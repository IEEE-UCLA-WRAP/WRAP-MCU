
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e510  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  0800e7c0  0800e7c0  0000f7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f1c8  0800f1c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f1d0  0800f1d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f1d4  0800f1d4  000101d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000b4  24000000  0800f1d8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003e768  240000b4  0800f28c  000110b4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2403e81c  0800f28c  0001181c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000110b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d383  00000000  00000000  000110e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033a6  00000000  00000000  0002e465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015f8  00000000  00000000  00031810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010fe  00000000  00000000  00032e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d3a  00000000  00000000  00033f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e11f  00000000  00000000  00066c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154b62  00000000  00000000  00084d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001d98c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006354  00000000  00000000  001d997c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001dfcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000026a0  00000000  00000000  001dfd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  001e23df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b4 	.word	0x240000b4
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e7a8 	.word	0x0800e7a8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000b8 	.word	0x240000b8
 80002ec:	0800e7a8 	.word	0x0800e7a8

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e6:	f000 ff83 	bl	80014f0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 fc37 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f90f 	bl	8000810 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f2:	f000 f9cf 	bl	8000994 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fb95 	bl	8000d24 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 fb73 	bl	8000ce4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fe:	f000 f9f9 	bl	80009f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000602:	f000 fa75 	bl	8000af0 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fb21 	bl	8000c4c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800060a:	f000 fad1 	bl	8000bb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start timers
  HAL_TIM_Base_Start(&htim2);
 800060e:	486b      	ldr	r0, [pc, #428]	@ (80007bc <main+0x1dc>)
 8000610:	f00a f916 	bl	800a840 <HAL_TIM_Base_Start>

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
  HAL_ADC_Start(&hadc2);
 8000614:	486a      	ldr	r0, [pc, #424]	@ (80007c0 <main+0x1e0>)
 8000616:	f002 f80f 	bl	8002638 <HAL_ADC_Start>

  // Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800061a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800061e:	4969      	ldr	r1, [pc, #420]	@ (80007c4 <main+0x1e4>)
 8000620:	4869      	ldr	r0, [pc, #420]	@ (80007c8 <main+0x1e8>)
 8000622:	f002 fff5 	bl	8003610 <HAL_ADCEx_MultiModeStart_DMA>

  uint16_t * samples;
  uint8_t packet_found;

  // setup params
  params_r params = {.CL_phase = 0,
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	f04f 0300 	mov.w	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b63      	ldr	r3, [pc, #396]	@ (80007cc <main+0x1ec>)
 8000640:	617b      	str	r3, [r7, #20]

    /* USER CODE BEGIN 3 */

	// execute one buffer at a time. Look at SWV console to see if computation time is too long
	// alias buffer for ease
	if (buff_flag_1) {
 8000642:	4b63      	ldr	r3, [pc, #396]	@ (80007d0 <main+0x1f0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <main+0x70>
	  samples = buffer_1;
 800064c:	4b61      	ldr	r3, [pc, #388]	@ (80007d4 <main+0x1f4>)
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	if (buff_flag_2) {
 8000650:	4b61      	ldr	r3, [pc, #388]	@ (80007d8 <main+0x1f8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <main+0x7e>
	  samples = buffer_2;
 800065a:	4b60      	ldr	r3, [pc, #384]	@ (80007dc <main+0x1fc>)
 800065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	if (buff_flag_1 || buff_flag_2) {
 800065e:	4b5c      	ldr	r3, [pc, #368]	@ (80007d0 <main+0x1f0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <main+0x92>
 8000668:	4b5b      	ldr	r3, [pc, #364]	@ (80007d8 <main+0x1f8>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0e7      	beq.n	8000642 <main+0x62>
	  packet_found = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	76fb      	strb	r3, [r7, #27]
	  // demodulate buffer
	  start = __HAL_TIM_GET_COUNTER(&htim2);
 8000676:	4b51      	ldr	r3, [pc, #324]	@ (80007bc <main+0x1dc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800067c:	4a58      	ldr	r2, [pc, #352]	@ (80007e0 <main+0x200>)
 800067e:	6013      	str	r3, [r2, #0]
	  num_symbs = demodulate(samples, temp_symbs, &params);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	461a      	mov	r2, r3
 8000684:	4957      	ldr	r1, [pc, #348]	@ (80007e4 <main+0x204>)
 8000686:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000688:	f000 fc86 	bl	8000f98 <demodulate>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b55      	ldr	r3, [pc, #340]	@ (80007e8 <main+0x208>)
 8000692:	601a      	str	r2, [r3, #0]
	  end = __HAL_TIM_GET_COUNTER(&htim2);
 8000694:	4b49      	ldr	r3, [pc, #292]	@ (80007bc <main+0x1dc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069a:	4a54      	ldr	r2, [pc, #336]	@ (80007ec <main+0x20c>)
 800069c:	6013      	str	r3, [r2, #0]

	  demod_time = end - start;
 800069e:	4b53      	ldr	r3, [pc, #332]	@ (80007ec <main+0x20c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b4f      	ldr	r3, [pc, #316]	@ (80007e0 <main+0x200>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	4a51      	ldr	r2, [pc, #324]	@ (80007f0 <main+0x210>)
 80006aa:	6013      	str	r3, [r2, #0]

	  total_symbs += num_symbs;
 80006ac:	4b51      	ldr	r3, [pc, #324]	@ (80007f4 <main+0x214>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <main+0x208>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	4a4f      	ldr	r2, [pc, #316]	@ (80007f4 <main+0x214>)
 80006b8:	6013      	str	r3, [r2, #0]
	  // add temp_symbs to running buffer for correlation
	  // shift latest entries
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006be:	e00f      	b.n	80006e0 <main+0x100>
		  symbol_buffer[j] = symbol_buffer[j+num_symbs];
 80006c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006c2:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <main+0x208>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a4b      	ldr	r2, [pc, #300]	@ (80007f8 <main+0x218>)
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4949      	ldr	r1, [pc, #292]	@ (80007f8 <main+0x218>)
 80006d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 80006da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006dc:	3301      	adds	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006e0:	4b41      	ldr	r3, [pc, #260]	@ (80007e8 <main+0x208>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1c3 0269 	rsb	r2, r3, #105	@ 0x69
 80006e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d8e8      	bhi.n	80006c0 <main+0xe0>
	  }
	  for (int j = 0; j < num_symbs; j++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f2:	e010      	b.n	8000716 <main+0x136>
		  symbol_buffer[SYMBOL_BUFF-1-num_symbs+j] = temp_symbs[j];
 80006f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f6:	4b3c      	ldr	r3, [pc, #240]	@ (80007e8 <main+0x208>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	3368      	adds	r3, #104	@ 0x68
 80006fe:	4939      	ldr	r1, [pc, #228]	@ (80007e4 <main+0x204>)
 8000700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	440a      	add	r2, r1
 8000706:	6812      	ldr	r2, [r2, #0]
 8000708:	493b      	ldr	r1, [pc, #236]	@ (80007f8 <main+0x218>)
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	440b      	add	r3, r1
 800070e:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < num_symbs; j++) {
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	3301      	adds	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
 8000716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000718:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <main+0x208>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d3e9      	bcc.n	80006f4 <main+0x114>
	  }

	  if (total_symbs >= NUM_SYMBS) {
 8000720:	4b34      	ldr	r3, [pc, #208]	@ (80007f4 <main+0x214>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b34      	cmp	r3, #52	@ 0x34
 8000726:	d93e      	bls.n	80007a6 <main+0x1c6>
			packet_found = find_packet(symbol_buffer, bits, SYMBOL_BUFF);
 8000728:	2269      	movs	r2, #105	@ 0x69
 800072a:	4934      	ldr	r1, [pc, #208]	@ (80007fc <main+0x21c>)
 800072c:	4832      	ldr	r0, [pc, #200]	@ (80007f8 <main+0x218>)
 800072e:	f000 fe05 	bl	800133c <find_packet>
 8000732:	4603      	mov	r3, r0
 8000734:	76fb      	strb	r3, [r7, #27]
			if (packet_found) {
 8000736:	7efb      	ldrb	r3, [r7, #27]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d031      	beq.n	80007a0 <main+0x1c0>
							result += decoded_bit;
						}
						t_str[i/BITS_PER_CHAR] = result;
					}
				#else
					for (int i = 0; i < NUM_SYMBS - (NUM_PACKET_H * PACKET_HEADER_LEN); i = i+8) {
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
 8000740:	e025      	b.n	800078e <main+0x1ae>
						result = 0;
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <main+0x220>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
						for(int j = 0; j < 8; j++)
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	e013      	b.n	8000776 <main+0x196>
						{
							result <<= 1;
 800074e:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <main+0x220>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <main+0x220>)
 8000758:	701a      	strb	r2, [r3, #0]
							result += bits[i + j];
 800075a:	6a3a      	ldr	r2, [r7, #32]
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	4413      	add	r3, r2
 8000760:	4a26      	ldr	r2, [pc, #152]	@ (80007fc <main+0x21c>)
 8000762:	5cd2      	ldrb	r2, [r2, r3]
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <main+0x220>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4413      	add	r3, r2
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <main+0x220>)
 800076e:	701a      	strb	r2, [r3, #0]
						for(int j = 0; j < 8; j++)
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	3301      	adds	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	2b07      	cmp	r3, #7
 800077a:	dde8      	ble.n	800074e <main+0x16e>
						}
						t_str[i>>3] = result;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	10db      	asrs	r3, r3, #3
 8000780:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <main+0x220>)
 8000782:	7811      	ldrb	r1, [r2, #0]
 8000784:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <main+0x224>)
 8000786:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < NUM_SYMBS - (NUM_PACKET_H * PACKET_HEADER_LEN); i = i+8) {
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	3308      	adds	r3, #8
 800078c:	623b      	str	r3, [r7, #32]
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	2b27      	cmp	r3, #39	@ 0x27
 8000792:	ddd6      	ble.n	8000742 <main+0x162>
					}

				#endif
				HAL_UART_Transmit(&huart3, (uint8_t *)t_str, sizeof(t_str), 100);
 8000794:	2364      	movs	r3, #100	@ 0x64
 8000796:	2205      	movs	r2, #5
 8000798:	491a      	ldr	r1, [pc, #104]	@ (8000804 <main+0x224>)
 800079a:	481b      	ldr	r0, [pc, #108]	@ (8000808 <main+0x228>)
 800079c:	f00a fbda 	bl	800af54 <HAL_UART_Transmit>
			}

			total_symbs = 0;
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <main+0x214>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
	  }
	  buff_process = RESET;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <main+0x22c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <main+0x1f0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <main+0x1f8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
	if (buff_flag_1) {
 80007b8:	e743      	b.n	8000642 <main+0x62>
 80007ba:	bf00      	nop
 80007bc:	24000210 	.word	0x24000210
 80007c0:	24000134 	.word	0x24000134
 80007c4:	240002f0 	.word	0x240002f0
 80007c8:	240000d0 	.word	0x240000d0
 80007cc:	42c80000 	.word	0x42c80000
 80007d0:	24014e84 	.word	0x24014e84
 80007d4:	2400a700 	.word	0x2400a700
 80007d8:	24014e85 	.word	0x24014e85
 80007dc:	2400f908 	.word	0x2400f908
 80007e0:	24014e88 	.word	0x24014e88
 80007e4:	24014b10 	.word	0x24014b10
 80007e8:	24014e94 	.word	0x24014e94
 80007ec:	24014e8c 	.word	0x24014e8c
 80007f0:	24014e90 	.word	0x24014e90
 80007f4:	24014e98 	.word	0x24014e98
 80007f8:	24014cb8 	.word	0x24014cb8
 80007fc:	24014e5c 	.word	0x24014e5c
 8000800:	2403e6c1 	.word	0x2403e6c1
 8000804:	24014ea8 	.word	0x24014ea8
 8000808:	2400025c 	.word	0x2400025c
 800080c:	24014e86 	.word	0x24014e86

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0a4      	sub	sp, #144	@ 0x90
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800081a:	224c      	movs	r2, #76	@ 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f00c ff3e 	bl	800d6a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000828:	2220      	movs	r2, #32
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f00c ff37 	bl	800d6a0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000844:	4b51      	ldr	r3, [pc, #324]	@ (800098c <SystemClock_Config+0x17c>)
 8000846:	f04f 32ff 	mov.w	r2, #4294967295
 800084a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800084e:	2004      	movs	r0, #4
 8000850:	f006 fabc 	bl	8006dcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b4d      	ldr	r3, [pc, #308]	@ (8000990 <SystemClock_Config+0x180>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a4c      	ldr	r2, [pc, #304]	@ (8000990 <SystemClock_Config+0x180>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b4a      	ldr	r3, [pc, #296]	@ (8000990 <SystemClock_Config+0x180>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000870:	bf00      	nop
 8000872:	4b47      	ldr	r3, [pc, #284]	@ (8000990 <SystemClock_Config+0x180>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800087a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800087e:	d1f8      	bne.n	8000872 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000880:	f006 fa94 	bl	8006dac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000884:	4b41      	ldr	r3, [pc, #260]	@ (800098c <SystemClock_Config+0x17c>)
 8000886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000888:	4a40      	ldr	r2, [pc, #256]	@ (800098c <SystemClock_Config+0x17c>)
 800088a:	f023 0318 	bic.w	r3, r3, #24
 800088e:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000890:	2327      	movs	r3, #39	@ 0x27
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800089e:	2301      	movs	r3, #1
 80008a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008a2:	2340      	movs	r3, #64	@ 0x40
 80008a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008a6:	2301      	movs	r3, #1
 80008a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	2302      	movs	r3, #2
 80008b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80008b6:	2346      	movs	r3, #70	@ 0x46
 80008b8:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008be:	2304      	movs	r3, #4
 80008c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008c8:	230c      	movs	r3, #12
 80008ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008de:	4618      	mov	r0, r3
 80008e0:	f006 face 	bl	8006e80 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xde>
  {
    Error_Handler();
 80008ea:	f000 fe2d 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	233f      	movs	r3, #63	@ 0x3f
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008fe:	2340      	movs	r3, #64	@ 0x40
 8000900:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090c:	2340      	movs	r3, #64	@ 0x40
 800090e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	2106      	movs	r1, #6
 8000916:	4618      	mov	r0, r3
 8000918:	f006 fee4 	bl	80076e4 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000922:	f000 fe11 	bl	8001548 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000926:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800092a:	2100      	movs	r1, #0
 800092c:	2000      	movs	r0, #0
 800092e:	f007 f88f 	bl	8007a50 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000932:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000936:	2100      	movs	r1, #0
 8000938:	2001      	movs	r0, #1
 800093a:	f007 f889 	bl	8007a50 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <SystemClock_Config+0x17c>)
 8000940:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000944:	4a11      	ldr	r2, [pc, #68]	@ (800098c <SystemClock_Config+0x17c>)
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <SystemClock_Config+0x17c>)
 8000950:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000954:	f003 0302 	and.w	r3, r3, #2
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000960:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000964:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800096a:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800096e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000970:	2322      	movs	r3, #34	@ 0x22
 8000972:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000974:	2320      	movs	r3, #32
 8000976:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4618      	mov	r0, r3
 800097e:	f009 fd4d 	bl	800a41c <HAL_RCCEx_CRSConfig>
}
 8000982:	bf00      	nop
 8000984:	3790      	adds	r7, #144	@ 0x90
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	58024400 	.word	0x58024400
 8000990:	58024800 	.word	0x58024800

08000994 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0b0      	sub	sp, #192	@ 0xc0
 8000998:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	22c0      	movs	r2, #192	@ 0xc0
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00c fe7d 	bl	800d6a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80009b6:	2312      	movs	r3, #18
 80009b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80009ba:	2303      	movs	r3, #3
 80009bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009c6:	23c0      	movs	r3, #192	@ 0xc0
 80009c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80009ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4618      	mov	r0, r3
 80009de:	f007 fa77 	bl	8007ed0 <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80009e8:	f000 fdae 	bl	8001548 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	37c0      	adds	r7, #192	@ 0xc0
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a18:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a1a:	4a33      	ldr	r2, [pc, #204]	@ (8000ae8 <MX_ADC1_Init+0xf4>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a42:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a48:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a54:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a60:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a74:	481b      	ldr	r0, [pc, #108]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a76:	f001 fc85 	bl	8002384 <HAL_ADC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a80:	f000 fd62 	bl	8001548 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000a84:	2307      	movs	r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000a88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a8c:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 8000a8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a9c:	f002 feba 	bl	8003814 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000aa6:	f000 fd4f 	bl	8001548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_ADC1_Init+0xf8>)
 8000aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000aba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000abc:	2304      	movs	r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000ace:	f002 f89b 	bl	8002c08 <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000ad8:	f000 fd36 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	@ 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240000d0 	.word	0x240000d0
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	0c900008 	.word	0x0c900008

08000af0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b08:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ba8 <MX_ADC2_Init+0xb8>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b14:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b22:	2204      	movs	r2, #4
 8000b24:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b58:	4812      	ldr	r0, [pc, #72]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b5a:	f001 fc13 	bl	8002384 <HAL_ADC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000b64:	f000 fcf0 	bl	8001548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b68:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_ADC2_Init+0xbc>)
 8000b6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b74:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b78:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b8c:	f002 f83c 	bl	8002c08 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b96:	f000 fcd7 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24000134 	.word	0x24000134
 8000ba8:	40022100 	.word	0x40022100
 8000bac:	0c900008 	.word	0x0c900008

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bd8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000be6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf8:	4813      	ldr	r0, [pc, #76]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bfa:	f009 fdc9 	bl	800a790 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c04:	f000 fca0 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000c16:	f009 fe83 	bl	800a920 <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c20:	f000 fc92 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000c32:	f00a f8b1 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f000 fc84 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000210 	.word	0x24000210

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c94:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c96:	f00a f90d 	bl	800aeb4 <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 fc52 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000ca8:	f00b fee0 	bl	800ca6c <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 fc49 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cba:	f00b ff15 	bl	800cae8 <HAL_UARTEx_SetRxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 fc40 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cca:	f00b fe96 	bl	800c9fa <HAL_UARTEx_DisableFifoMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 fc38 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2400025c 	.word	0x2400025c
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <MX_DMA_Init+0x3c>)
 8000cec:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d20 <MX_DMA_Init+0x3c>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_DMA_Init+0x3c>)
 8000cfc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	200b      	movs	r0, #11
 8000d0e:	f002 fef8 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d12:	200b      	movs	r0, #11
 8000d14:	f002 ff0f 	bl	8003b36 <HAL_NVIC_EnableIRQ>

}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	58024400 	.word	0x58024400

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d40:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d4a:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d58:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d5e:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d7c:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d9a:	4a22      	ldr	r2, [pc, #136]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2120      	movs	r1, #32
 8000db6:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <MX_GPIO_Init+0x104>)
 8000db8:	f005 ffde 	bl	8006d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	@ (8000e28 <MX_GPIO_Init+0x104>)
 8000dd4:	f005 fe20 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_GPIO_Init+0x108>)
 8000df6:	f005 fe0f 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_GPIO_Init+0x104>)
 8000e18:	f005 fdfe 	bl	8006a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	@ 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020000 	.word	0x58020000
 8000e2c:	58020800 	.word	0x58020800

08000e30 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	481d      	ldr	r0, [pc, #116]	@ (8000eb4 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000e3e:	f005 ff9b 	bl	8006d78 <HAL_GPIO_WritePin>

  adc_start = __HAL_TIM_GET_COUNTER(&htim2);
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e48:	4a1c      	ldr	r2, [pc, #112]	@ (8000ebc <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000e4a:	6013      	str	r3, [r2, #0]

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d129      	bne.n	8000eaa <HAL_ADC_ConvHalfCpltCallback+0x7a>
	  buff_process = SET;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = SET;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	e018      	b.n	8000ea0 <HAL_ADC_ConvHalfCpltCallback+0x70>
	  {
		  buffer_1[2*j] = (uint16_t)(adc_buf[j]&0x0000FFFF);
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	b291      	uxth	r1, r2
 8000e7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ed0 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000e7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_1[2*j+1] = (uint16_t)(adc_buf[j]>>16);
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	0c1a      	lsrs	r2, r3, #16
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	3301      	adds	r3, #1
 8000e92:	b291      	uxth	r1, r2
 8000e94:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000e96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f241 4281 	movw	r2, #5249	@ 0x1481
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	dde1      	ble.n	8000e6e <HAL_ADC_ConvHalfCpltCallback+0x3e>
	  }
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	58020000 	.word	0x58020000
 8000eb8:	24000210 	.word	0x24000210
 8000ebc:	24014e9c 	.word	0x24014e9c
 8000ec0:	24014e86 	.word	0x24014e86
 8000ec4:	24014e84 	.word	0x24014e84
 8000ec8:	24014e85 	.word	0x24014e85
 8000ecc:	240002f0 	.word	0x240002f0
 8000ed0:	2400a700 	.word	0x2400a700

08000ed4 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4823      	ldr	r0, [pc, #140]	@ (8000f70 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000ee2:	f005 ff49 	bl	8006d78 <HAL_GPIO_WritePin>

  adc_end = __HAL_TIM_GET_COUNTER(&htim2);
 8000ee6:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	4a22      	ldr	r2, [pc, #136]	@ (8000f78 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000eee:	6013      	str	r3, [r2, #0]
  adc_time = adc_end - adc_start;
 8000ef0:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <HAL_ADC_ConvCpltCallback+0xa8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	4a21      	ldr	r2, [pc, #132]	@ (8000f80 <HAL_ADC_ConvCpltCallback+0xac>)
 8000efc:	6013      	str	r3, [r2, #0]

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d12f      	bne.n	8000f68 <HAL_ADC_ConvCpltCallback+0x94>
	  buff_process = SET;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = SET;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e01e      	b.n	8000f5e <HAL_ADC_ConvCpltCallback+0x8a>
		  buffer_2[2*j] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]&0x0000FFFF);
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	f241 4382 	movw	r3, #5250	@ 0x1482
 8000f26:	4413      	add	r3, r2
 8000f28:	4a19      	ldr	r2, [pc, #100]	@ (8000f90 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	b291      	uxth	r1, r2
 8000f34:	4a17      	ldr	r2, [pc, #92]	@ (8000f94 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000f36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_2[2*j+1] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]>>16);
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	f241 4382 	movw	r3, #5250	@ 0x1482
 8000f40:	4413      	add	r3, r2
 8000f42:	4a13      	ldr	r2, [pc, #76]	@ (8000f90 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	0c1a      	lsrs	r2, r3, #16
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b291      	uxth	r1, r2
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000f54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f241 4281 	movw	r2, #5249	@ 0x1481
 8000f64:	4293      	cmp	r3, r2
 8000f66:	dddb      	ble.n	8000f20 <HAL_ADC_ConvCpltCallback+0x4c>
	  }
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58020000 	.word	0x58020000
 8000f74:	24000210 	.word	0x24000210
 8000f78:	24014ea0 	.word	0x24014ea0
 8000f7c:	24014e9c 	.word	0x24014e9c
 8000f80:	24014ea4 	.word	0x24014ea4
 8000f84:	24014e86 	.word	0x24014e86
 8000f88:	24014e85 	.word	0x24014e85
 8000f8c:	24014e84 	.word	0x24014e84
 8000f90:	240002f0 	.word	0x240002f0
 8000f94:	2400f908 	.word	0x2400f908

08000f98 <demodulate>:

int demodulate(const uint16_t * samples, int * symbs, params_r * params) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]

    normalize(samples, norm_samples);
 8000fa4:	4929      	ldr	r1, [pc, #164]	@ (800104c <demodulate+0xb4>)
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 fad4 	bl	8001554 <normalize>

//     Costas Loop
    costas_loop(norm_samples, samples_d, params);
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4928      	ldr	r1, [pc, #160]	@ (8001050 <demodulate+0xb8>)
 8000fb0:	4826      	ldr	r0, [pc, #152]	@ (800104c <demodulate+0xb4>)
 8000fb2:	f000 f859 	bl	8001068 <costas_loop>
    // filter w SRRC
    arm_conv_f32(samples_d, ADC_BUF_LEN, RRC, RRC_LEN, filtered_samps);
 8000fb6:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <demodulate+0xbc>)
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8000fbe:	4a26      	ldr	r2, [pc, #152]	@ (8001058 <demodulate+0xc0>)
 8000fc0:	f642 1104 	movw	r1, #10500	@ 0x2904
 8000fc4:	4822      	ldr	r0, [pc, #136]	@ (8001050 <demodulate+0xb8>)
 8000fc6:	f00c f8d1 	bl	800d16c <arm_conv_f32>
    // readjust window
    float shift = RRC_LEN/2. - 0.5;
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <demodulate+0xc4>)
 8000fcc:	61bb      	str	r3, [r7, #24]
    int k;
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 8000fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd6:	ee17 3a90 	vmov	r3, s15
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	e01a      	b.n	8001014 <demodulate+0x7c>
        k = i - shift;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff4:	ee17 3a90 	vmov	r3, s15
 8000ff8:	613b      	str	r3, [r7, #16]
        filtered_samps[k] = filtered_samps[i];
 8000ffa:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <demodulate+0xbc>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4913      	ldr	r1, [pc, #76]	@ (8001054 <demodulate+0xbc>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	601a      	str	r2, [r3, #0]
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001060 <demodulate+0xc8>
 8001022:	edd7 7a06 	vldr	s15, [r7, #24]
 8001026:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800102a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	d4d4      	bmi.n	8000fde <demodulate+0x46>
    }

    // timing recovery
    int bit_len = timing_recovery(filtered_samps, symbs, params);
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <demodulate+0xbc>)
 800103a:	f000 fb21 	bl	8001680 <timing_recovery>
 800103e:	6178      	str	r0, [r7, #20]

    return bit_len;
 8001040:	697b      	ldr	r3, [r7, #20]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	24014eb0 	.word	0x24014eb0
 8001050:	2401f2c0 	.word	0x2401f2c0
 8001054:	24033ae0 	.word	0x24033ae0
 8001058:	0800e7c0 	.word	0x0800e7c0
 800105c:	437a0000 	.word	0x437a0000
 8001060:	462be000 	.word	0x462be000
 8001064:	00000000 	.word	0x00000000

08001068 <costas_loop>:

void costas_loop(float * norm_samples, float * samples_d, params_r * params) {
 8001068:	b580      	push	{r7, lr}
 800106a:	ed2d 8b02 	vpush	{d8}
 800106e:	b0b2      	sub	sp, #200	@ 0xc8
 8001070:	af02      	add	r7, sp, #8
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
    float phase = params->CL_phase;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    float inph[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001080:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001084:	222c      	movs	r2, #44	@ 0x2c
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00c fb09 	bl	800d6a0 <memset>
    float quad[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800108e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001092:	222c      	movs	r2, #44	@ 0x2c
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00c fb02 	bl	800d6a0 <memset>
    float inph_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 800109c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]
    float quad_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]
    double error = 0;
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    float integrator = 0; //params->CL_integrator;
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    float kp = 8.5;
 80010d4:	4b94      	ldr	r3, [pc, #592]	@ (8001328 <costas_loop+0x2c0>)
 80010d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    float ki = 0.1;
 80010da:	4b94      	ldr	r3, [pc, #592]	@ (800132c <costas_loop+0x2c4>)
 80010dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float dt = (float)FC / (float)FS;
 80010e0:	4b93      	ldr	r3, [pc, #588]	@ (8001330 <costas_loop+0x2c8>)
 80010e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 80010e6:	2305      	movs	r3, #5
 80010e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80010ec:	e0e7      	b.n	80012be <costas_loop+0x256>
        // define t from microcontroller
        int k = i - ORDER;
 80010ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80010f2:	3b05      	subs	r3, #5
 80010f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        inph_[ORDER] = norm_samples[k]*2*cos(2*M_PI*dt*k + phase);
 80010f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800110a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800110e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001112:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001116:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8001320 <costas_loop+0x2b8>
 800111a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800111e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800112a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800112e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001136:	ee36 7b07 	vadd.f64	d7, d6, d7
 800113a:	eeb0 0b47 	vmov.f64	d0, d7
 800113e:	f00c fb47 	bl	800d7d0 <cos>
 8001142:	eeb0 7b40 	vmov.f64	d7, d0
 8001146:	ee28 7b07 	vmul.f64	d7, d8, d7
 800114a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800114e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        quad_[ORDER] = norm_samples[k]*-2*sin(2*M_PI*dt*k + phase);
 8001152:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800116c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001174:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8001320 <costas_loop+0x2b8>
 8001178:	ee27 6b06 	vmul.f64	d6, d7, d6
 800117c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001188:	ee26 6b07 	vmul.f64	d6, d6, d7
 800118c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001190:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001194:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001198:	eeb0 0b47 	vmov.f64	d0, d7
 800119c:	f00c fb64 	bl	800d868 <sin>
 80011a0:	eeb0 7b40 	vmov.f64	d7, d0
 80011a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        arm_conv_f32(inph_, ORDER+1, lp, ORDER+1, inph);
 80011b0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80011b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2306      	movs	r3, #6
 80011bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001334 <costas_loop+0x2cc>)
 80011be:	2106      	movs	r1, #6
 80011c0:	f00b ffd4 	bl	800d16c <arm_conv_f32>
        arm_conv_f32(quad_, ORDER+1, lp, ORDER+1, quad);
 80011c4:	f107 0010 	add.w	r0, r7, #16
 80011c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2306      	movs	r3, #6
 80011d0:	4a58      	ldr	r2, [pc, #352]	@ (8001334 <costas_loop+0x2cc>)
 80011d2:	2106      	movs	r1, #6
 80011d4:	f00b ffca 	bl	800d16c <arm_conv_f32>

        samples_d[k] = inph[ORDER];
 80011d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80011e6:	601a      	str	r2, [r3, #0]
        Quad[k] = quad[ORDER];
 80011e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011ea:	4953      	ldr	r1, [pc, #332]	@ (8001338 <costas_loop+0x2d0>)
 80011ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	601a      	str	r2, [r3, #0]

        error = inph[ORDER] * quad[ORDER];
 80011f6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80011fa:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80011fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001206:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
        integrator += ki*error;
 800120a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800120e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001212:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001216:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800121a:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 800121e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001222:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001226:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800122a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
        phase = phase + kp*error + integrator;
 800122e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001232:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001236:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800123a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800123e:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 8001242:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001246:	ee36 6b07 	vadd.f64	d6, d6, d7
 800124a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800124e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001252:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001256:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800125a:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

        // shift the values of inph_ and quad_
        for (int jx = 1; jx < ORDER+1; jx++) {
 800125e:	2301      	movs	r3, #1
 8001260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001264:	e022      	b.n	80012ac <costas_loop+0x244>
            inph_[jx-1] = inph_[jx];
 8001266:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800126a:	3b01      	subs	r3, #1
 800126c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	32c0      	adds	r2, #192	@ 0xc0
 8001274:	443a      	add	r2, r7
 8001276:	3a98      	subs	r2, #152	@ 0x98
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	33c0      	adds	r3, #192	@ 0xc0
 800127e:	443b      	add	r3, r7
 8001280:	3b98      	subs	r3, #152	@ 0x98
 8001282:	601a      	str	r2, [r3, #0]
            quad_[jx-1] = quad_[jx];
 8001284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001288:	3b01      	subs	r3, #1
 800128a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	32c0      	adds	r2, #192	@ 0xc0
 8001292:	443a      	add	r2, r7
 8001294:	3ab0      	subs	r2, #176	@ 0xb0
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	33c0      	adds	r3, #192	@ 0xc0
 800129c:	443b      	add	r3, r7
 800129e:	3bb0      	subs	r3, #176	@ 0xb0
 80012a0:	601a      	str	r2, [r3, #0]
        for (int jx = 1; jx < ORDER+1; jx++) {
 80012a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012a6:	3301      	adds	r3, #1
 80012a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	ddd8      	ble.n	8001266 <costas_loop+0x1fe>
    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 80012b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012b8:	3301      	adds	r3, #1
 80012ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80012be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012c2:	f642 1208 	movw	r2, #10504	@ 0x2908
 80012c6:	4293      	cmp	r3, r2
 80012c8:	f77f af11 	ble.w	80010ee <costas_loop+0x86>
        }
    }
    params->CL_phase = remainder(phase, 2*M_PI);
 80012cc:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80012d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d4:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001320 <costas_loop+0x2b8>
 80012d8:	eeb0 0b47 	vmov.f64	d0, d7
 80012dc:	f00c fa38 	bl	800d750 <remainder>
 80012e0:	eeb0 7b40 	vmov.f64	d7, d0
 80012e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	edc3 7a01 	vstr	s15, [r3, #4]
    params->CL_integrator = remainder(integrator, 2*M_PI);
 80012ee:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80012f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f6:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001320 <costas_loop+0x2b8>
 80012fa:	eeb0 0b47 	vmov.f64	d0, d7
 80012fe:	f00c fa27 	bl	800d750 <remainder>
 8001302:	eeb0 7b40 	vmov.f64	d7, d0
 8001306:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edc3 7a00 	vstr	s15, [r3]
}
 8001310:	bf00      	nop
 8001312:	37c0      	adds	r7, #192	@ 0xc0
 8001314:	46bd      	mov	sp, r7
 8001316:	ecbd 8b02 	vpop	{d8}
 800131a:	bd80      	pop	{r7, pc}
 800131c:	f3af 8000 	nop.w
 8001320:	54442d18 	.word	0x54442d18
 8001324:	401921fb 	.word	0x401921fb
 8001328:	41080000 	.word	0x41080000
 800132c:	3dcccccd 	.word	0x3dcccccd
 8001330:	3e3a5e35 	.word	0x3e3a5e35
 8001334:	24000000 	.word	0x24000000
 8001338:	240296d0 	.word	0x240296d0

0800133c <find_packet>:

uint8_t find_packet(float * symbs, uint8_t * bits, const int num_symbs) {
 800133c:	b580      	push	{r7, lr}
 800133e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001342:	af02      	add	r7, sp, #8
 8001344:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001348:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800134c:	6018      	str	r0, [r3, #0]
 800134e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001352:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001356:	6019      	str	r1, [r3, #0]
 8001358:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800135c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001360:	601a      	str	r2, [r3, #0]
    // take cross correlation
    float xcorr_out[SYMBOL_BUFF+PACKET_HEADER_LEN-1];
    packet_found = 0;
 8001362:	4b61      	ldr	r3, [pc, #388]	@ (80014e8 <find_packet+0x1ac>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
    arm_correlate_f32(packet_header, PACKET_HEADER_LEN, symbs, num_symbs, xcorr_out);
 8001368:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800136c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001370:	6819      	ldr	r1, [r3, #0]
 8001372:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001376:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	460b      	mov	r3, r1
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	210d      	movs	r1, #13
 8001386:	4859      	ldr	r0, [pc, #356]	@ (80014ec <find_packet+0x1b0>)
 8001388:	f00b fc3a 	bl	800cc00 <arm_correlate_f32>

    // find packet
    int shift = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    for (int i = num_symbs-(NUM_PACKET_H-1)*PACKET_HEADER_LEN - 1; i >= 0; i--) {
 8001392:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001396:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80013a2:	e05c      	b.n	800145e <find_packet+0x122>
        if (fabs(xcorr_out[i]) > PACKET_HEADER_LEN-1) {
 80013a4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80013a8:	f5a3 72f2 	sub.w	r2, r3, #484	@ 0x1e4
 80013ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	eef0 7ae7 	vabs.f32	s15, s15
 80013bc:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd44      	ble.n	8001454 <find_packet+0x118>
            shift = SYMBOL_BUFF+PACKET_HEADER_LEN-1-i;
 80013ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80013ce:	f1c3 0375 	rsb	r3, r3, #117	@ 0x75
 80013d2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
            packet_found = 1;
 80013d6:	4b44      	ldr	r3, [pc, #272]	@ (80014e8 <find_packet+0x1ac>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
            if (xcorr_out[i] < 0) {
 80013dc:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80013e0:	f5a3 72f2 	sub.w	r2, r3, #484	@ 0x1e4
 80013e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	d400      	bmi.n	80013fc <find_packet+0xc0>
				for (int j = 0; j < BITS; j++) {
					symbs[shift + j] = symbs[shift+ j]*-1;
				}
            }
            break;
 80013fa:	e034      	b.n	8001466 <find_packet+0x12a>
				for (int j = 0; j < BITS; j++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001402:	e022      	b.n	800144a <find_packet+0x10e>
					symbs[shift + j] = symbs[shift+ j]*-1;
 8001404:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8001408:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 8001414:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	4413      	add	r3, r2
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8001424:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 8001430:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	4413      	add	r3, r2
 8001438:	eef1 7a67 	vneg.f32	s15, s15
 800143c:	edc3 7a00 	vstr	s15, [r3]
				for (int j = 0; j < BITS; j++) {
 8001440:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001444:	3301      	adds	r3, #1
 8001446:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800144a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800144e:	2b27      	cmp	r3, #39	@ 0x27
 8001450:	ddd8      	ble.n	8001404 <find_packet+0xc8>
            break;
 8001452:	e008      	b.n	8001466 <find_packet+0x12a>
    for (int i = num_symbs-(NUM_PACKET_H-1)*PACKET_HEADER_LEN - 1; i >= 0; i--) {
 8001454:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001458:	3b01      	subs	r3, #1
 800145a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800145e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001462:	2b00      	cmp	r3, #0
 8001464:	da9e      	bge.n	80013a4 <find_packet+0x68>
        }
    }

    if (!packet_found)
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <find_packet+0x1ac>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <find_packet+0x136>
        return 0;
 800146e:	2300      	movs	r3, #0
 8001470:	e034      	b.n	80014dc <find_packet+0x1a0>

    // convert symbols to bits
    for (int i = 0; i < BITS; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001478:	e02b      	b.n	80014d2 <find_packet+0x196>
        bits[i] = (symbs[shift+i]+1)*0.5;
 800147a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 800147e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 800148a:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	4413      	add	r3, r2
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800149a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800149e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a2:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80014a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80014ae:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 80014b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014be:	edc7 7a00 	vstr	s15, [r7]
 80014c2:	783a      	ldrb	r2, [r7, #0]
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BITS; i++) {
 80014c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80014cc:	3301      	adds	r3, #1
 80014ce:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80014d2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80014d6:	2b27      	cmp	r3, #39	@ 0x27
 80014d8:	ddcf      	ble.n	800147a <find_packet+0x13e>
    }
    return 1;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	f507 77fc 	add.w	r7, r7, #504	@ 0x1f8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2403e6c0 	.word	0x2403e6c0
 80014ec:	24000018 	.word	0x24000018

080014f0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001502:	f002 fb33 	bl	8003b6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001506:	2301      	movs	r3, #1
 8001508:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800150a:	2300      	movs	r3, #0
 800150c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001512:	231f      	movs	r3, #31
 8001514:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001516:	2387      	movs	r3, #135	@ 0x87
 8001518:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800151a:	2300      	movs	r3, #0
 800151c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800151e:	2300      	movs	r3, #0
 8001520:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001522:	2301      	movs	r3, #1
 8001524:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001526:	2301      	movs	r3, #1
 8001528:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001532:	463b      	mov	r3, r7
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fb51 	bl	8003bdc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800153a:	2004      	movs	r0, #4
 800153c:	f002 fb2e 	bl	8003b9c <HAL_MPU_Enable>

}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <Error_Handler+0x8>

08001554 <normalize>:
params: parameters that need to be stored intermediately
returns length of symbs array. symbs array must be
allocated for longer than samples/sps + some margin
*/

void normalize(const uint16_t * samples, float * norm_samples) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
        // Normalize signal
    float var = 0, mean = 0;
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
    // find mean
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e011      	b.n	8001594 <normalize+0x40>
        mean += (float)samples[i];
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	ed97 7a06 	vldr	s14, [r7, #24]
 8001586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158a:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f642 1203 	movw	r2, #10499	@ 0x2903
 800159a:	4293      	cmp	r3, r2
 800159c:	dde8      	ble.n	8001570 <normalize+0x1c>
    }
    mean /= ADC_BUF_LEN;
 800159e:	ed97 7a06 	vldr	s14, [r7, #24]
 80015a2:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001678 <normalize+0x124>
 80015a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015aa:	edc7 7a06 	vstr	s15, [r7, #24]
    // find sample variance
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e01b      	b.n	80015ec <normalize+0x98>
        float temp = (float)samples[i]-mean;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ce:	edc7 7a02 	vstr	s15, [r7, #8]
        var += temp * temp;
 80015d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015da:	ed97 7a07 	vldr	s14, [r7, #28]
 80015de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e2:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	3301      	adds	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f642 1203 	movw	r2, #10499	@ 0x2903
 80015f2:	4293      	cmp	r3, r2
 80015f4:	ddde      	ble.n	80015b4 <normalize+0x60>
    }
    var = var / (ADC_BUF_LEN-1);
 80015f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80015fa:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800167c <normalize+0x128>
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	edc7 7a07 	vstr	s15, [r7, #28]
    var = sqrt(var)*25;
 8001606:	edd7 7a07 	vldr	s15, [r7, #28]
 800160a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800160e:	eeb0 0b47 	vmov.f64	d0, d7
 8001612:	f00c f8bd 	bl	800d790 <sqrt>
 8001616:	eeb0 7b40 	vmov.f64	d7, d0
 800161a:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 800161e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001626:	edc7 7a07 	vstr	s15, [r7, #28]

    // normalize
    // divide by 60 arbitrary, just done to get to an ampltiude I used to tune gain values
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e019      	b.n	8001664 <normalize+0x110>
        norm_samples[i] = (((float)samples[i]) - mean)/var;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001642:	edd7 7a06 	vldr	s15, [r7, #24]
 8001646:	ee77 6a67 	vsub.f32	s13, s14, s15
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	4413      	add	r3, r2
 8001652:	ed97 7a07 	vldr	s14, [r7, #28]
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3301      	adds	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f642 1203 	movw	r2, #10499	@ 0x2903
 800166a:	4293      	cmp	r3, r2
 800166c:	dde0      	ble.n	8001630 <normalize+0xdc>
    }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	46241000 	.word	0x46241000
 800167c:	46240c00 	.word	0x46240c00

08001680 <timing_recovery>:
float tr_int = 0;
float zc_samp = 0;
float max_integrator_value = 50;
float max_phase_value = 100;

int timing_recovery(float* rrc_samps_in, float* symbs_out, params_r* params) {
 8001680:	b580      	push	{r7, lr}
 8001682:	ed2d 8b02 	vpush	{d8}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
		params->TR_phase = remainder(phase, 2*M_PI);
		params->TR_integrator = remainder(integrator, 2*M_PI);

		return bit_len;
	} else if (TIMING_RECOVERY_METHOD == 1) {
		const float Kp = 8.5 / 25.0;
 8001690:	4ba0      	ldr	r3, [pc, #640]	@ (8001914 <timing_recovery+0x294>)
 8001692:	617b      	str	r3, [r7, #20]
		const float Ki = 0.1 / 25.0;
 8001694:	4ba0      	ldr	r3, [pc, #640]	@ (8001918 <timing_recovery+0x298>)
 8001696:	613b      	str	r3, [r7, #16]
		float error = 0;
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
		int i = 1;
 800169e:	2301      	movs	r3, #1
 80016a0:	623b      	str	r3, [r7, #32]

		params->TR_phase = fmod(params->TR_phase, params->sps);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80016a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edd3 6a04 	vldr	s13, [r3, #16]
 80016b2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016b6:	eeb0 1b46 	vmov.f64	d1, d6
 80016ba:	eeb0 0b47 	vmov.f64	d0, d7
 80016be:	f00c f823 	bl	800d708 <fmod>
 80016c2:	eeb0 7b40 	vmov.f64	d7, d0
 80016c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	edc3 7a03 	vstr	s15, [r3, #12]


		int offset = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
		int offset2 = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
		prev_symb = 25 * rrc_samps_in[lrintf(offset*params->sps)];
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	f00c f906 	bl	800d900 <lrintf>
 80016f4:	4603      	mov	r3, r0
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001708:	4b84      	ldr	r3, [pc, #528]	@ (800191c <timing_recovery+0x29c>)
 800170a:	edc3 7a00 	vstr	s15, [r3]
		symbs_out[0] = prev_symb;
 800170e:	4b83      	ldr	r3, [pc, #524]	@ (800191c <timing_recovery+0x29c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	601a      	str	r2, [r3, #0]

		while ((i < SYMBOL_BUFF) && (lrintf((i+offset+offset2)*params->sps + params->TR_phase) < ADC_BUF_LEN)) {
 8001716:	e0d5      	b.n	80018c4 <timing_recovery+0x244>
			symb = 25 * rrc_samps_in[lrintf((i+offset)*params->sps + params->TR_phase)];
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a04 	vldr	s15, [r3, #16]
 800172c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 7a03 	vldr	s15, [r3, #12]
 8001736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	f00c f8df 	bl	800d900 <lrintf>
 8001742:	4603      	mov	r3, r0
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	4b72      	ldr	r3, [pc, #456]	@ (8001920 <timing_recovery+0x2a0>)
 8001758:	edc3 7a00 	vstr	s15, [r3]

			// Mueller-Muller timing error detector
			error = sign(prev_symb) * symb - sign(symb) * prev_symb;
 800175c:	4b6f      	ldr	r3, [pc, #444]	@ (800191c <timing_recovery+0x29c>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	eeb0 0a67 	vmov.f32	s0, s15
 8001766:	f000 f8e9 	bl	800193c <sign>
 800176a:	ee07 0a90 	vmov	s15, r0
 800176e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001772:	4b6b      	ldr	r3, [pc, #428]	@ (8001920 <timing_recovery+0x2a0>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee27 8a27 	vmul.f32	s16, s14, s15
 800177c:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <timing_recovery+0x2a0>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	f000 f8d9 	bl	800193c <sign>
 800178a:	ee07 0a90 	vmov	s15, r0
 800178e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001792:	4b62      	ldr	r3, [pc, #392]	@ (800191c <timing_recovery+0x29c>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179c:	ee78 7a67 	vsub.f32	s15, s16, s15
 80017a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

			err = error;
 80017a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001924 <timing_recovery+0x2a4>)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	6013      	str	r3, [r2, #0]

			symbs_out[i] = symb / fabs(symb);
 80017aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001920 <timing_recovery+0x2a0>)
 80017ac:	edd3 6a00 	vldr	s13, [r3]
 80017b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001920 <timing_recovery+0x2a0>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	eeb0 7ae7 	vabs.f32	s14, s15
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4413      	add	r3, r2
 80017c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c6:	edc3 7a00 	vstr	s15, [r3]

			params->TR_phase += Kp * error + Ki * params->TR_integrator;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80017d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80017d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	ed93 6a02 	vldr	s12, [r3, #8]
 80017e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	edc3 7a03 	vstr	s15, [r3, #12]
			params->TR_integrator += error;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80017fe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	edc3 7a02 	vstr	s15, [r3, #8]

			if (params->TR_integrator > max_integrator_value) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001812:	4b45      	ldr	r3, [pc, #276]	@ (8001928 <timing_recovery+0x2a8>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	dd04      	ble.n	800182c <timing_recovery+0x1ac>
				params->TR_integrator = max_integrator_value;
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <timing_recovery+0x2a8>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	e014      	b.n	8001856 <timing_recovery+0x1d6>
			} else if (params->TR_integrator < -max_integrator_value) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <timing_recovery+0x2a8>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	eef1 7a67 	vneg.f32	s15, s15
 800183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d507      	bpl.n	8001856 <timing_recovery+0x1d6>
				params->TR_integrator = -max_integrator_value;
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <timing_recovery+0x2a8>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	eef1 7a67 	vneg.f32	s15, s15
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	edc3 7a02 	vstr	s15, [r3, #8]
			}

			if (params->TR_phase > max_phase_value) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	ed93 7a03 	vldr	s14, [r3, #12]
 800185c:	4b33      	ldr	r3, [pc, #204]	@ (800192c <timing_recovery+0x2ac>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	dd04      	ble.n	8001876 <timing_recovery+0x1f6>
				params->TR_phase = max_phase_value;
 800186c:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <timing_recovery+0x2ac>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	e014      	b.n	80018a0 <timing_recovery+0x220>
			} else if (params->TR_phase < -max_phase_value) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	ed93 7a03 	vldr	s14, [r3, #12]
 800187c:	4b2b      	ldr	r3, [pc, #172]	@ (800192c <timing_recovery+0x2ac>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	eef1 7a67 	vneg.f32	s15, s15
 8001886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d507      	bpl.n	80018a0 <timing_recovery+0x220>
				params->TR_phase = -max_phase_value;
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <timing_recovery+0x2ac>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	eef1 7a67 	vneg.f32	s15, s15
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edc3 7a03 	vstr	s15, [r3, #12]
			}

			tr_ph = params->TR_phase;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a22      	ldr	r2, [pc, #136]	@ (8001930 <timing_recovery+0x2b0>)
 80018a6:	6013      	str	r3, [r2, #0]
			tr_int = params->TR_integrator;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a21      	ldr	r2, [pc, #132]	@ (8001934 <timing_recovery+0x2b4>)
 80018ae:	6013      	str	r3, [r2, #0]

			prev_symb = symb;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <timing_recovery+0x2a0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <timing_recovery+0x29c>)
 80018b6:	6013      	str	r3, [r2, #0]
			i++;
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	3301      	adds	r3, #1
 80018bc:	623b      	str	r3, [r7, #32]
			i_fake = i;
 80018be:	4a1e      	ldr	r2, [pc, #120]	@ (8001938 <timing_recovery+0x2b8>)
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	6013      	str	r3, [r2, #0]
		while ((i < SYMBOL_BUFF) && (lrintf((i+offset+offset2)*params->sps + params->TR_phase) < ADC_BUF_LEN)) {
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2b68      	cmp	r3, #104	@ 0x68
 80018c8:	dc1c      	bgt.n	8001904 <timing_recovery+0x284>
 80018ca:	6a3a      	ldr	r2, [r7, #32]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	441a      	add	r2, r3
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4413      	add	r3, r2
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	edd3 7a04 	vldr	s15, [r3, #16]
 80018e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	eeb0 0a67 	vmov.f32	s0, s15
 80018f4:	f00c f804 	bl	800d900 <lrintf>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f642 1203 	movw	r2, #10499	@ 0x2903
 80018fe:	4293      	cmp	r3, r2
 8001900:	f77f af0a 	ble.w	8001718 <timing_recovery+0x98>
		}

		return i;
 8001904:	6a3b      	ldr	r3, [r7, #32]
			i_fake = i;
		}

		return i;
	}
}
 8001906:	4618      	mov	r0, r3
 8001908:	3728      	adds	r7, #40	@ 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	ecbd 8b02 	vpop	{d8}
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	3eae147b 	.word	0x3eae147b
 8001918:	3b83126f 	.word	0x3b83126f
 800191c:	2403e6c8 	.word	0x2403e6c8
 8001920:	2403e6c4 	.word	0x2403e6c4
 8001924:	2403e6cc 	.word	0x2403e6cc
 8001928:	2400004c 	.word	0x2400004c
 800192c:	24000050 	.word	0x24000050
 8001930:	2403e6d4 	.word	0x2403e6d4
 8001934:	2403e6d8 	.word	0x2403e6d8
 8001938:	2403e6d0 	.word	0x2403e6d0

0800193c <sign>:


int sign(float x) {
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0) {
 8001946:	edd7 7a01 	vldr	s15, [r7, #4]
 800194a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	dd01      	ble.n	8001958 <sign+0x1c>
        return 1;
 8001954:	2301      	movs	r3, #1
 8001956:	e00a      	b.n	800196e <sign+0x32>
    } else if (x < 0) {
 8001958:	edd7 7a01 	vldr	s15, [r7, #4]
 800195c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001964:	d502      	bpl.n	800196c <sign+0x30>
        return -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e000      	b.n	800196e <sign+0x32>
    } else {
        return 0;
 800196c:	2300      	movs	r3, #0
    }
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_MspInit+0x30>)
 8001984:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001988:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <HAL_MspInit+0x30>)
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_MspInit+0x30>)
 8001994:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	58024400 	.word	0x58024400

080019b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	@ 0x30
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a59      	ldr	r2, [pc, #356]	@ (8001b34 <HAL_ADC_MspInit+0x184>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d16c      	bne.n	8001aac <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019d2:	4b59      	ldr	r3, [pc, #356]	@ (8001b38 <HAL_ADC_MspInit+0x188>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a57      	ldr	r2, [pc, #348]	@ (8001b38 <HAL_ADC_MspInit+0x188>)
 80019da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019dc:	4b56      	ldr	r3, [pc, #344]	@ (8001b38 <HAL_ADC_MspInit+0x188>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d10e      	bne.n	8001a02 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019e4:	4b55      	ldr	r3, [pc, #340]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 80019e6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80019ea:	4a54      	ldr	r2, [pc, #336]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 80019ec:	f043 0320 	orr.w	r3, r3, #32
 80019f0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80019f4:	4b51      	ldr	r3, [pc, #324]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 80019f6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b4e      	ldr	r3, [pc, #312]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a08:	4a4c      	ldr	r2, [pc, #304]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a12:	4b4a      	ldr	r3, [pc, #296]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a20:	2340      	movs	r3, #64	@ 0x40
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a24:	2303      	movs	r3, #3
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4843      	ldr	r0, [pc, #268]	@ (8001b40 <HAL_ADC_MspInit+0x190>)
 8001a34:	f004 fff0 	bl	8006a18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001a38:	4b42      	ldr	r3, [pc, #264]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a3a:	4a43      	ldr	r2, [pc, #268]	@ (8001b48 <HAL_ADC_MspInit+0x198>)
 8001a3c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a3e:	4b41      	ldr	r3, [pc, #260]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a40:	2209      	movs	r2, #9
 8001a42:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a44:	4b3f      	ldr	r3, [pc, #252]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a50:	4b3c      	ldr	r3, [pc, #240]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a58:	4b3a      	ldr	r3, [pc, #232]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a60:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a68:	4b36      	ldr	r3, [pc, #216]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a70:	4b34      	ldr	r3, [pc, #208]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a76:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a78:	4b32      	ldr	r3, [pc, #200]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a7e:	4831      	ldr	r0, [pc, #196]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a80:	f002 f8ec 	bl	8003c5c <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8001a8a:	f7ff fd5d 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a2c      	ldr	r2, [pc, #176]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a92:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a94:	4a2b      	ldr	r2, [pc, #172]	@ (8001b44 <HAL_ADC_MspInit+0x194>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2012      	movs	r0, #18
 8001aa0:	f002 f82f 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001aa4:	2012      	movs	r0, #18
 8001aa6:	f002 f846 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001aaa:	e03f      	b.n	8001b2c <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a26      	ldr	r2, [pc, #152]	@ (8001b4c <HAL_ADC_MspInit+0x19c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d13a      	bne.n	8001b2c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_ADC_MspInit+0x188>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b38 <HAL_ADC_MspInit+0x188>)
 8001abe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <HAL_ADC_MspInit+0x188>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001aca:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001ace:	4a1b      	ldr	r2, [pc, #108]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001ad8:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001ada:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001aec:	4a13      	ldr	r2, [pc, #76]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_ADC_MspInit+0x18c>)
 8001af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b04:	2340      	movs	r3, #64	@ 0x40
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <HAL_ADC_MspInit+0x190>)
 8001b18:	f004 ff7e 	bl	8006a18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2012      	movs	r0, #18
 8001b22:	f001 ffee 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b26:	2012      	movs	r0, #18
 8001b28:	f002 f805 	bl	8003b36 <HAL_NVIC_EnableIRQ>
}
 8001b2c:	bf00      	nop
 8001b2e:	3730      	adds	r7, #48	@ 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40022000 	.word	0x40022000
 8001b38:	2403e6dc 	.word	0x2403e6dc
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	58020000 	.word	0x58020000
 8001b44:	24000198 	.word	0x24000198
 8001b48:	40020010 	.word	0x40020010
 8001b4c:	40022100 	.word	0x40022100

08001b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d10e      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <HAL_TIM_Base_MspInit+0x3c>)
 8001b64:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b68:	4a08      	ldr	r2, [pc, #32]	@ (8001b8c <HAL_TIM_Base_MspInit+0x3c>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_TIM_Base_MspInit+0x3c>)
 8001b74:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	58024400 	.word	0x58024400

08001b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0ba      	sub	sp, #232	@ 0xe8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	22c0      	movs	r2, #192	@ 0xc0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00b fd75 	bl	800d6a0 <memset>
  if(huart->Instance==USART3)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a2b      	ldr	r2, [pc, #172]	@ (8001c68 <HAL_UART_MspInit+0xd8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d14e      	bne.n	8001c5e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bc0:	f04f 0202 	mov.w	r2, #2
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f006 f97a 	bl	8007ed0 <HAL_RCCEx_PeriphCLKConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001be2:	f7ff fcb1 	bl	8001548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001be6:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <HAL_UART_MspInit+0xdc>)
 8001be8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bec:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_UART_MspInit+0xdc>)
 8001bee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <HAL_UART_MspInit+0xdc>)
 8001bf8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_UART_MspInit+0xdc>)
 8001c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c0a:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <HAL_UART_MspInit+0xdc>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c14:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_UART_MspInit+0xdc>)
 8001c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4809      	ldr	r0, [pc, #36]	@ (8001c70 <HAL_UART_MspInit+0xe0>)
 8001c4a:	f004 fee5 	bl	8006a18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2027      	movs	r0, #39	@ 0x27
 8001c54:	f001 ff55 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c58:	2027      	movs	r0, #39	@ 0x27
 8001c5a:	f001 ff6c 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c5e:	bf00      	nop
 8001c60:	37e8      	adds	r7, #232	@ 0xe8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40004800 	.word	0x40004800
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	58020c00 	.word	0x58020c00

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <NMI_Handler+0x4>

08001c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cca:	f000 f939 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <DMA1_Stream0_IRQHandler+0x10>)
 8001cda:	f003 fb1b 	bl	8005314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000198 	.word	0x24000198

08001ce8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <ADC_IRQHandler+0x14>)
 8001cee:	f000 fd5d 	bl	80027ac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001cf2:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <ADC_IRQHandler+0x18>)
 8001cf4:	f000 fd5a 	bl	80027ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	240000d0 	.word	0x240000d0
 8001d00:	24000134 	.word	0x24000134

08001d04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <USART3_IRQHandler+0x10>)
 8001d0a:	f009 f9b1 	bl	800b070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2400025c 	.word	0x2400025c

08001d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <SystemInit+0xd0>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d22:	4a31      	ldr	r2, [pc, #196]	@ (8001de8 <SystemInit+0xd0>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <SystemInit+0xd4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d807      	bhi.n	8001d48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d38:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <SystemInit+0xd4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 030f 	bic.w	r3, r3, #15
 8001d40:	4a2a      	ldr	r2, [pc, #168]	@ (8001dec <SystemInit+0xd4>)
 8001d42:	f043 0303 	orr.w	r3, r3, #3
 8001d46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d48:	4b29      	ldr	r3, [pc, #164]	@ (8001df0 <SystemInit+0xd8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a28      	ldr	r2, [pc, #160]	@ (8001df0 <SystemInit+0xd8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d54:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <SystemInit+0xd8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <SystemInit+0xd8>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4924      	ldr	r1, [pc, #144]	@ (8001df0 <SystemInit+0xd8>)
 8001d60:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <SystemInit+0xdc>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <SystemInit+0xd4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <SystemInit+0xd4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 030f 	bic.w	r3, r3, #15
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dec <SystemInit+0xd4>)
 8001d7c:	f043 0303 	orr.w	r3, r3, #3
 8001d80:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001d82:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <SystemInit+0xd8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001d88:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <SystemInit+0xd8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <SystemInit+0xd8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <SystemInit+0xd8>)
 8001d96:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <SystemInit+0xe0>)
 8001d98:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <SystemInit+0xd8>)
 8001d9c:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <SystemInit+0xe4>)
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <SystemInit+0xd8>)
 8001da2:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <SystemInit+0xe8>)
 8001da4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001da6:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <SystemInit+0xd8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dac:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <SystemInit+0xd8>)
 8001dae:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <SystemInit+0xe8>)
 8001db0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <SystemInit+0xd8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <SystemInit+0xd8>)
 8001dba:	4a11      	ldr	r2, [pc, #68]	@ (8001e00 <SystemInit+0xe8>)
 8001dbc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <SystemInit+0xd8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <SystemInit+0xd8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a09      	ldr	r2, [pc, #36]	@ (8001df0 <SystemInit+0xd8>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <SystemInit+0xd8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <SystemInit+0xec>)
 8001dd8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ddc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00
 8001dec:	52002000 	.word	0x52002000
 8001df0:	58024400 	.word	0x58024400
 8001df4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001df8:	02020200 	.word	0x02020200
 8001dfc:	01ff0000 	.word	0x01ff0000
 8001e00:	01010280 	.word	0x01010280
 8001e04:	52004000 	.word	0x52004000

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e0c:	f7ff ff84 	bl	8001d18 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e10:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e12:	490d      	ldr	r1, [pc, #52]	@ (8001e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e28:	4c0a      	ldr	r4, [pc, #40]	@ (8001e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f00b fc41 	bl	800d6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7fe fbd1 	bl	80005e0 <main>
  bx  lr
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e40:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e48:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 8001e4c:	0800f1d8 	.word	0x0800f1d8
  ldr r2, =_sbss
 8001e50:	240000b4 	.word	0x240000b4
  ldr r4, =_ebss
 8001e54:	2403e81c 	.word	0x2403e81c

08001e58 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <BDMA1_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e62:	2003      	movs	r0, #3
 8001e64:	f001 fe42 	bl	8003aec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e68:	f005 fe5c 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <HAL_Init+0x68>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	4913      	ldr	r1, [pc, #76]	@ (8001ec8 <HAL_Init+0x6c>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <HAL_Init+0x68>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ec8 <HAL_Init+0x6c>)
 8001e90:	5cd3      	ldrb	r3, [r2, r3]
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ecc <HAL_Init+0x70>)
 8001e9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <HAL_Init+0x74>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f000 f814 	bl	8001ed4 <HAL_InitTick>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e002      	b.n	8001ebc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb6:	f7ff fd61 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	0800ef94 	.word	0x0800ef94
 8001ecc:	24000058 	.word	0x24000058
 8001ed0:	24000054 	.word	0x24000054

08001ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <HAL_InitTick+0x60>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e021      	b.n	8001f2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <HAL_InitTick+0x64>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_InitTick+0x60>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f001 fe27 	bl	8003b52 <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f001 fdf1 	bl	8003b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	@ (8001f3c <HAL_InitTick+0x68>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	24000060 	.word	0x24000060
 8001f38:	24000054 	.word	0x24000054
 8001f3c:	2400005c 	.word	0x2400005c

08001f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	24000060 	.word	0x24000060
 8001f64:	2403e6e0 	.word	0x2403e6e0

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	2403e6e0 	.word	0x2403e6e0

08001f80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_GetREVID+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0c1b      	lsrs	r3, r3, #16
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	5c001000 	.word	0x5c001000

08001f98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3360      	adds	r3, #96	@ 0x60
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	430b      	orrs	r3, r1
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	611a      	str	r2, [r3, #16]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002072:	b480      	push	{r7}
 8002074:	b087      	sub	sp, #28
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3360      	adds	r3, #96	@ 0x60
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	601a      	str	r2, [r3, #0]
  }
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b087      	sub	sp, #28
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3330      	adds	r3, #48	@ 0x30
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	4413      	add	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	211f      	movs	r1, #31
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	401a      	ands	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	f003 011f 	and.w	r1, r3, #31
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	431a      	orrs	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800211a:	bf00      	nop
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3314      	adds	r3, #20
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	0e5b      	lsrs	r3, r3, #25
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	0d1b      	lsrs	r3, r3, #20
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2107      	movs	r1, #7
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	401a      	ands	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	0d1b      	lsrs	r3, r3, #20
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0318 	and.w	r3, r3, #24
 80021c6:	4908      	ldr	r1, [pc, #32]	@ (80021e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021c8:	40d9      	lsrs	r1, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	400b      	ands	r3, r1
 80021ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d2:	431a      	orrs	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	000fffff 	.word	0x000fffff

080021ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 031f 	and.w	r3, r3, #31
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6093      	str	r3, [r2, #8]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	5fffffc0 	.word	0x5fffffc0

08002248 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800225c:	d101      	bne.n	8002262 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <LL_ADC_EnableInternalRegulator+0x24>)
 800227e:	4013      	ands	r3, r2
 8002280:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	6fffffc0 	.word	0x6fffffc0

08002298 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <LL_ADC_Enable+0x24>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	7fffffc0 	.word	0x7fffffc0

080022e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <LL_ADC_IsEnabled+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_IsEnabled+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <LL_ADC_REG_StartConversion+0x24>)
 800231e:	4013      	ands	r3, r2
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	7fffffc0 	.word	0x7fffffc0

08002338 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b04      	cmp	r3, #4
 800234a:	d101      	bne.n	8002350 <LL_ADC_REG_IsConversionOngoing+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b08      	cmp	r3, #8
 8002370:	d101      	bne.n	8002376 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b089      	sub	sp, #36	@ 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e138      	b.n	8002610 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff faff 	bl	80019b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff3f 	bl	8002248 <LL_ADC_IsDeepPowerDownEnabled>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff25 	bl	8002224 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff5a 	bl	8002298 <LL_ADC_IsInternalRegulatorEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d114      	bne.n	8002414 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff3e 	bl	8002270 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023f4:	4b88      	ldr	r3, [pc, #544]	@ (8002618 <HAL_ADC_Init+0x294>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	4a88      	ldr	r2, [pc, #544]	@ (800261c <HAL_ADC_Init+0x298>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	3301      	adds	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002406:	e002      	b.n	800240e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3b01      	subs	r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f9      	bne.n	8002408 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff3d 	bl	8002298 <LL_ADC_IsInternalRegulatorEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff77 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 800244a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 80d2 	bne.w	80025fe <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 80ce 	bne.w	80025fe <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002466:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff36 	bl	80022e8 <LL_ADC_IsEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d110      	bne.n	80024a4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002482:	4867      	ldr	r0, [pc, #412]	@ (8002620 <HAL_ADC_Init+0x29c>)
 8002484:	f7ff ff30 	bl	80022e8 <LL_ADC_IsEnabled>
 8002488:	4604      	mov	r4, r0
 800248a:	4866      	ldr	r0, [pc, #408]	@ (8002624 <HAL_ADC_Init+0x2a0>)
 800248c:	f7ff ff2c 	bl	80022e8 <LL_ADC_IsEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	4323      	orrs	r3, r4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4619      	mov	r1, r3
 800249e:	4862      	ldr	r0, [pc, #392]	@ (8002628 <HAL_ADC_Init+0x2a4>)
 80024a0:	f7ff fd7a 	bl	8001f98 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7d5b      	ldrb	r3, [r3, #21]
 80024a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ae:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80024b4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7f1b      	ldrb	r3, [r3, #28]
 80024ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7f1b      	ldrb	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	045b      	lsls	r3, r3, #17
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	4b4c      	ldr	r3, [pc, #304]	@ (800262c <HAL_ADC_Init+0x2a8>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	69b9      	ldr	r1, [r7, #24]
 8002502:	430b      	orrs	r3, r1
 8002504:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff14 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 8002510:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff21 	bl	800235e <LL_ADC_INJ_IsConversionOngoing>
 800251c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d14a      	bne.n	80025ba <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d147      	bne.n	80025ba <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7d1b      	ldrb	r3, [r3, #20]
 800252e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	4b3c      	ldr	r3, [pc, #240]	@ (8002630 <HAL_ADC_Init+0x2ac>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	430b      	orrs	r3, r1
 800254a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002552:	2b01      	cmp	r3, #1
 8002554:	d11b      	bne.n	800258e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	4b34      	ldr	r3, [pc, #208]	@ (8002634 <HAL_ADC_Init+0x2b0>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800256a:	3a01      	subs	r2, #1
 800256c:	0411      	lsls	r1, r2, #16
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800257e:	430a      	orrs	r2, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	e007      	b.n	800259e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 ff21 	bl	80033fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d10c      	bne.n	80025dc <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	f023 010f 	bic.w	r1, r3, #15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	1e5a      	subs	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80025da:	e007      	b.n	80025ec <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020f 	bic.w	r2, r2, #15
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	f023 0303 	bic.w	r3, r3, #3
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80025fc:	e007      	b.n	800260e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800260e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3724      	adds	r7, #36	@ 0x24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd90      	pop	{r4, r7, pc}
 8002618:	24000054 	.word	0x24000054
 800261c:	053e2d63 	.word	0x053e2d63
 8002620:	40022000 	.word	0x40022000
 8002624:	40022100 	.word	0x40022100
 8002628:	40022300 	.word	0x40022300
 800262c:	fff0c003 	.word	0xfff0c003
 8002630:	ffffbffc 	.word	0xffffbffc
 8002634:	fc00f81e 	.word	0xfc00f81e

08002638 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002640:	4856      	ldr	r0, [pc, #344]	@ (800279c <HAL_ADC_Start+0x164>)
 8002642:	f7ff fdd3 	bl	80021ec <LL_ADC_GetMultimode>
 8002646:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fe73 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 809a 	bne.w	800278e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_ADC_Start+0x30>
 8002664:	2302      	movs	r3, #2
 8002666:	e095      	b.n	8002794 <HAL_ADC_Start+0x15c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fdb3 	bl	80031dc <ADC_Enable>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 8081 	bne.w	8002784 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002686:	4b46      	ldr	r3, [pc, #280]	@ (80027a0 <HAL_ADC_Start+0x168>)
 8002688:	4013      	ands	r3, r2
 800268a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a43      	ldr	r2, [pc, #268]	@ (80027a4 <HAL_ADC_Start+0x16c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d002      	beq.n	80026a2 <HAL_ADC_Start+0x6a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	e000      	b.n	80026a4 <HAL_ADC_Start+0x6c>
 80026a2:	4b41      	ldr	r3, [pc, #260]	@ (80027a8 <HAL_ADC_Start+0x170>)
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d002      	beq.n	80026b2 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ca:	d106      	bne.n	80026da <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f023 0206 	bic.w	r2, r3, #6
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80026d8:	e002      	b.n	80026e0 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	221c      	movs	r2, #28
 80026e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2b      	ldr	r2, [pc, #172]	@ (80027a4 <HAL_ADC_Start+0x16c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d002      	beq.n	8002700 <HAL_ADC_Start+0xc8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e000      	b.n	8002702 <HAL_ADC_Start+0xca>
 8002700:	4b29      	ldr	r3, [pc, #164]	@ (80027a8 <HAL_ADC_Start+0x170>)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	4293      	cmp	r3, r2
 8002708:	d008      	beq.n	800271c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d002      	beq.n	800271c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b09      	cmp	r3, #9
 800271a:	d114      	bne.n	8002746 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002732:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fde6 	bl	8002310 <LL_ADC_REG_StartConversion>
 8002744:	e025      	b.n	8002792 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a13      	ldr	r2, [pc, #76]	@ (80027a4 <HAL_ADC_Start+0x16c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d002      	beq.n	8002762 <HAL_ADC_Start+0x12a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	e000      	b.n	8002764 <HAL_ADC_Start+0x12c>
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_ADC_Start+0x170>)
 8002764:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00f      	beq.n	8002792 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800277a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
 8002782:	e006      	b.n	8002792 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800278c:	e001      	b.n	8002792 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800278e:	2302      	movs	r3, #2
 8002790:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40022300 	.word	0x40022300
 80027a0:	fffff0fe 	.word	0xfffff0fe
 80027a4:	40022100 	.word	0x40022100
 80027a8:	40022000 	.word	0x40022000

080027ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	@ 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c8:	4882      	ldr	r0, [pc, #520]	@ (80029d4 <HAL_ADC_IRQHandler+0x228>)
 80027ca:	f7ff fd0f 	bl	80021ec <LL_ADC_GetMultimode>
 80027ce:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d017      	beq.n	800280a <HAL_ADC_IRQHandler+0x5e>
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 ffff 	bl	8003800 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2202      	movs	r2, #2
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_ADC_IRQHandler+0x72>
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8083 	beq.w	8002930 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d07d      	beq.n	8002930 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc29 	bl	80020a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d062      	beq.n	8002922 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5d      	ldr	r2, [pc, #372]	@ (80029d8 <HAL_ADC_IRQHandler+0x22c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d002      	beq.n	800286c <HAL_ADC_IRQHandler+0xc0>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e000      	b.n	800286e <HAL_ADC_IRQHandler+0xc2>
 800286c:	4b5b      	ldr	r3, [pc, #364]	@ (80029dc <HAL_ADC_IRQHandler+0x230>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4293      	cmp	r3, r2
 8002874:	d008      	beq.n	8002888 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d002      	beq.n	8002888 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b09      	cmp	r3, #9
 8002886:	d104      	bne.n	8002892 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	e00c      	b.n	80028ac <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a50      	ldr	r2, [pc, #320]	@ (80029d8 <HAL_ADC_IRQHandler+0x22c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d002      	beq.n	80028a2 <HAL_ADC_IRQHandler+0xf6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	e000      	b.n	80028a4 <HAL_ADC_IRQHandler+0xf8>
 80028a2:	4b4e      	ldr	r3, [pc, #312]	@ (80029dc <HAL_ADC_IRQHandler+0x230>)
 80028a4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d135      	bne.n	8002922 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d12e      	bne.n	8002922 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fd35 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d11a      	bne.n	800290a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 020c 	bic.w	r2, r2, #12
 80028e2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d112      	bne.n	8002922 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
 8002908:	e00b      	b.n	8002922 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290e:	f043 0210 	orr.w	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe fad6 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	220c      	movs	r2, #12
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_ADC_IRQHandler+0x198>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 809f 	beq.w	8002a8e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8099 	beq.w	8002a8e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fbd4 	bl	8002126 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800297e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fb8f 	bl	80020a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800298a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a11      	ldr	r2, [pc, #68]	@ (80029d8 <HAL_ADC_IRQHandler+0x22c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d002      	beq.n	800299c <HAL_ADC_IRQHandler+0x1f0>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e000      	b.n	800299e <HAL_ADC_IRQHandler+0x1f2>
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <HAL_ADC_IRQHandler+0x230>)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d008      	beq.n	80029b8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d002      	beq.n	80029b8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	d104      	bne.n	80029c2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	e013      	b.n	80029ea <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <HAL_ADC_IRQHandler+0x22c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_ADC_IRQHandler+0x234>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	e007      	b.n	80029e2 <HAL_ADC_IRQHandler+0x236>
 80029d2:	bf00      	nop
 80029d4:	40022300 	.word	0x40022300
 80029d8:	40022100 	.word	0x40022100
 80029dc:	40022000 	.word	0x40022000
 80029e0:	4b7d      	ldr	r3, [pc, #500]	@ (8002bd8 <HAL_ADC_IRQHandler+0x42c>)
 80029e2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d047      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x25e>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03f      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d13a      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a14:	2b40      	cmp	r3, #64	@ 0x40
 8002a16:	d133      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d12e      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fc99 	bl	800235e <LL_ADC_INJ_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11a      	bne.n	8002a68 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d112      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a66:	e00b      	b.n	8002a80 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	f043 0210 	orr.w	r2, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fe95 	bl	80037b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2260      	movs	r2, #96	@ 0x60
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d011      	beq.n	8002abc <HAL_ADC_IRQHandler+0x310>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f896 	bl	8002be0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2280      	movs	r2, #128	@ 0x80
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_ADC_IRQHandler+0x340>
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fe7b 	bl	80037d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d012      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x370>
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fe6d 	bl	80037ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d036      	beq.n	8002b94 <HAL_ADC_IRQHandler+0x3e8>
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d031      	beq.n	8002b94 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3c:	e014      	b.n	8002b68 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b44:	4825      	ldr	r0, [pc, #148]	@ (8002bdc <HAL_ADC_IRQHandler+0x430>)
 8002b46:	f7ff fb5f 	bl	8002208 <LL_ADC_GetMultiDMATransfer>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b50:	2301      	movs	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b54:	e008      	b.n	8002b68 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b64:	2301      	movs	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d10e      	bne.n	8002b8c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f834 	bl	8002bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x424>
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bac:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	f043 0208 	orr.w	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fdfa 	bl	80037c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	@ 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40022300 	.word	0x40022300

08002be0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b0a1      	sub	sp, #132	@ 0x84
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a95      	ldr	r2, [pc, #596]	@ (8002e78 <HAL_ADC_ConfigChannel+0x270>)
 8002c22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x2a>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e2c0      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x5ac>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fb7a 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 82a5 	bne.w	8003196 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db2c      	blt.n	8002cae <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d108      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x6a>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	e016      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x98>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c82:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e003      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002c8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	69d1      	ldr	r1, [r2, #28]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	430b      	orrs	r3, r1
 8002cac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f7ff fa07 	bl	80020ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fb37 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 8002cca:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fb44 	bl	800235e <LL_ADC_INJ_IsConversionOngoing>
 8002cd6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 80a0 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 809c 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f7ff fa29 	bl	800214c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x118>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	e00a      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x12e>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d027      	beq.n	8002d90 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6919      	ldr	r1, [r3, #16]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d4e:	f7ff f957 	bl	8002000 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6919      	ldr	r1, [r3, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	7e5b      	ldrb	r3, [r3, #25]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x160>
 8002d62:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002d66:	e000      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x162>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f7ff f981 	bl	8002072 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6919      	ldr	r1, [r3, #16]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	7e1b      	ldrb	r3, [r3, #24]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x17e>
 8002d80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d84:	e000      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x180>
 8002d86:	2300      	movs	r3, #0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f7ff f959 	bl	8002040 <LL_ADC_SetDataRightShift>
 8002d8e:	e047      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	069b      	lsls	r3, r3, #26
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d107      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002db2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	069b      	lsls	r3, r3, #26
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d107      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dd6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	069b      	lsls	r3, r3, #26
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d107      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dfa:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	069b      	lsls	r3, r3, #26
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fa5f 	bl	80022e8 <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 81bb 	bne.w	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f7ff f9b0 	bl	80021a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a0b      	ldr	r2, [pc, #44]	@ (8002e78 <HAL_ADC_ConfigChannel+0x270>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	f040 8130 	bne.w	80030b0 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x274>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	3301      	adds	r3, #1
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e01b      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x2a8>
 8002e78:	47ff0000 	.word	0x47ff0000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002e94:	2320      	movs	r3, #32
 8002e96:	e003      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2b09      	cmp	r3, #9
 8002ea8:	bf94      	ite	ls
 8002eaa:	2301      	movls	r3, #1
 8002eac:	2300      	movhi	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d079      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x2c8>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	069b      	lsls	r3, r3, #26
 8002eca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ece:	e015      	b.n	8002efc <HAL_ADC_ConfigChannel+0x2f4>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	069b      	lsls	r3, r3, #26
 8002ef8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x314>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	e017      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x344>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002f34:	2320      	movs	r3, #32
 8002f36:	e003      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2101      	movs	r1, #1
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	ea42 0103 	orr.w	r1, r2, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x36a>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	3301      	adds	r3, #1
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	051b      	lsls	r3, r3, #20
 8002f70:	e018      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x39c>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	e003      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	e07e      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x3bc>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	3301      	adds	r3, #1
 8002fbc:	069b      	lsls	r3, r3, #26
 8002fbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc2:	e015      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3e8>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e003      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	069b      	lsls	r3, r3, #26
 8002fec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x408>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0e9b      	lsrs	r3, r3, #26
 8003002:	3301      	adds	r3, #1
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	e017      	b.n	8003040 <HAL_ADC_ConfigChannel+0x438>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	61bb      	str	r3, [r7, #24]
  return result;
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e003      	b.n	8003034 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	ea42 0103 	orr.w	r1, r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_ADC_ConfigChannel+0x464>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	3301      	adds	r3, #1
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	3b1e      	subs	r3, #30
 8003064:	051b      	lsls	r3, r3, #20
 8003066:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800306a:	e01b      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x49c>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	60fb      	str	r3, [r7, #12]
  return result;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f003 021f 	and.w	r2, r3, #31
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	3b1e      	subs	r3, #30
 800309e:	051b      	lsls	r3, r3, #20
 80030a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a4:	430b      	orrs	r3, r1
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	6892      	ldr	r2, [r2, #8]
 80030aa:	4619      	mov	r1, r3
 80030ac:	f7ff f84e 	bl	800214c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da77      	bge.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b8:	4840      	ldr	r0, [pc, #256]	@ (80031bc <HAL_ADC_ConfigChannel+0x5b4>)
 80030ba:	f7fe ff93 	bl	8001fe4 <LL_ADC_GetCommonPathInternalCh>
 80030be:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c0:	483f      	ldr	r0, [pc, #252]	@ (80031c0 <HAL_ADC_ConfigChannel+0x5b8>)
 80030c2:	f7ff f911 	bl	80022e8 <LL_ADC_IsEnabled>
 80030c6:	4604      	mov	r4, r0
 80030c8:	483e      	ldr	r0, [pc, #248]	@ (80031c4 <HAL_ADC_ConfigChannel+0x5bc>)
 80030ca:	f7ff f90d 	bl	80022e8 <LL_ADC_IsEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4323      	orrs	r3, r4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d155      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3b      	ldr	r2, [pc, #236]	@ (80031c8 <HAL_ADC_ConfigChannel+0x5c0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d122      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x51e>
 80030e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11d      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a35      	ldr	r2, [pc, #212]	@ (80031c4 <HAL_ADC_ConfigChannel+0x5bc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d159      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030fa:	4619      	mov	r1, r3
 80030fc:	482f      	ldr	r0, [pc, #188]	@ (80031bc <HAL_ADC_ConfigChannel+0x5b4>)
 80030fe:	f7fe ff5e 	bl	8001fbe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003102:	4b32      	ldr	r3, [pc, #200]	@ (80031cc <HAL_ADC_ConfigChannel+0x5c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	4a31      	ldr	r2, [pc, #196]	@ (80031d0 <HAL_ADC_ConfigChannel+0x5c8>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	3301      	adds	r3, #1
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003116:	e002      	b.n	800311e <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	3b01      	subs	r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f9      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003124:	e040      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2a      	ldr	r2, [pc, #168]	@ (80031d4 <HAL_ADC_ConfigChannel+0x5cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d111      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x54c>
 8003130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003132:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10c      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a21      	ldr	r2, [pc, #132]	@ (80031c4 <HAL_ADC_ConfigChannel+0x5bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d131      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800314a:	4619      	mov	r1, r3
 800314c:	481b      	ldr	r0, [pc, #108]	@ (80031bc <HAL_ADC_ConfigChannel+0x5b4>)
 800314e:	f7fe ff36 	bl	8001fbe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003152:	e029      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1f      	ldr	r2, [pc, #124]	@ (80031d8 <HAL_ADC_ConfigChannel+0x5d0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d124      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
 800315e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003160:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11f      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a15      	ldr	r2, [pc, #84]	@ (80031c4 <HAL_ADC_ConfigChannel+0x5bc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d11a      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003174:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003178:	4619      	mov	r1, r3
 800317a:	4810      	ldr	r0, [pc, #64]	@ (80031bc <HAL_ADC_ConfigChannel+0x5b4>)
 800317c:	f7fe ff1f 	bl	8001fbe <LL_ADC_SetCommonPathInternalCh>
 8003180:	e012      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003194:	e008      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3784      	adds	r7, #132	@ 0x84
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	40022300 	.word	0x40022300
 80031c0:	40022000 	.word	0x40022000
 80031c4:	40022100 	.word	0x40022100
 80031c8:	cb840000 	.word	0xcb840000
 80031cc:	24000054 	.word	0x24000054
 80031d0:	053e2d63 	.word	0x053e2d63
 80031d4:	bac04000 	.word	0xbac04000
 80031d8:	cfb80000 	.word	0xcfb80000

080031dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f87d 	bl	80022e8 <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d161      	bne.n	80032b8 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b32      	ldr	r3, [pc, #200]	@ (80032c4 <ADC_Enable+0xe8>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003206:	f043 0210 	orr.w	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e04d      	b.n	80032ba <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f84c 	bl	80022c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003228:	f7fe fe9e 	bl	8001f68 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800322e:	4826      	ldr	r0, [pc, #152]	@ (80032c8 <ADC_Enable+0xec>)
 8003230:	f7fe ffdc 	bl	80021ec <LL_ADC_GetMultimode>
 8003234:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a24      	ldr	r2, [pc, #144]	@ (80032cc <ADC_Enable+0xf0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d002      	beq.n	8003246 <ADC_Enable+0x6a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	e000      	b.n	8003248 <ADC_Enable+0x6c>
 8003246:	4b22      	ldr	r3, [pc, #136]	@ (80032d0 <ADC_Enable+0xf4>)
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	4293      	cmp	r3, r2
 800324e:	d02c      	beq.n	80032aa <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d130      	bne.n	80032b8 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003256:	e028      	b.n	80032aa <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f843 	bl	80022e8 <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f827 	bl	80022c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003272:	f7fe fe79 	bl	8001f68 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d914      	bls.n	80032aa <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d00d      	beq.n	80032aa <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	f043 0210 	orr.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e007      	b.n	80032ba <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d1cf      	bne.n	8003258 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	8000003f 	.word	0x8000003f
 80032c8:	40022300 	.word	0x40022300
 80032cc:	40022100 	.word	0x40022100
 80032d0:	40022000 	.word	0x40022000

080032d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d14b      	bne.n	8003386 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d021      	beq.n	800334c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fecb 	bl	80020a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d032      	beq.n	800337e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d12b      	bne.n	800337e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
 800334a:	e018      	b.n	800337e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d111      	bne.n	800337e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7fd fda8 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003384:	e00e      	b.n	80033a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff fc2e 	bl	8002bf4 <HAL_ADC_ErrorCallback>
}
 8003398:	e004      	b.n	80033a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7fd fd38 	bl	8000e30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	f043 0204 	orr.w	r2, r3, #4
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fc00 	bl	8002bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003404:	4b60      	ldr	r3, [pc, #384]	@ (8003588 <ADC_ConfigureBoostMode+0x18c>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01c      	beq.n	800344a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003410:	f004 fd02 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8003414:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800341e:	d010      	beq.n	8003442 <ADC_ConfigureBoostMode+0x46>
 8003420:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003424:	d873      	bhi.n	800350e <ADC_ConfigureBoostMode+0x112>
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800342a:	d002      	beq.n	8003432 <ADC_ConfigureBoostMode+0x36>
 800342c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003430:	d16d      	bne.n	800350e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	60fb      	str	r3, [r7, #12]
        break;
 8003440:	e068      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	60fb      	str	r3, [r7, #12]
        break;
 8003448:	e064      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800344a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	f005 fefb 	bl	800924c <HAL_RCCEx_GetPeriphCLKFreq>
 8003456:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003460:	d051      	beq.n	8003506 <ADC_ConfigureBoostMode+0x10a>
 8003462:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003466:	d854      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 8003468:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800346c:	d047      	beq.n	80034fe <ADC_ConfigureBoostMode+0x102>
 800346e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003472:	d84e      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 8003474:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003478:	d03d      	beq.n	80034f6 <ADC_ConfigureBoostMode+0xfa>
 800347a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800347e:	d848      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 8003480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003484:	d033      	beq.n	80034ee <ADC_ConfigureBoostMode+0xf2>
 8003486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800348a:	d842      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 800348c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003490:	d029      	beq.n	80034e6 <ADC_ConfigureBoostMode+0xea>
 8003492:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003496:	d83c      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 8003498:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800349c:	d01a      	beq.n	80034d4 <ADC_ConfigureBoostMode+0xd8>
 800349e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034a2:	d836      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 80034a4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034a8:	d014      	beq.n	80034d4 <ADC_ConfigureBoostMode+0xd8>
 80034aa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034ae:	d830      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 80034b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034b4:	d00e      	beq.n	80034d4 <ADC_ConfigureBoostMode+0xd8>
 80034b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ba:	d82a      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 80034bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034c0:	d008      	beq.n	80034d4 <ADC_ConfigureBoostMode+0xd8>
 80034c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034c6:	d824      	bhi.n	8003512 <ADC_ConfigureBoostMode+0x116>
 80034c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034cc:	d002      	beq.n	80034d4 <ADC_ConfigureBoostMode+0xd8>
 80034ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034d2:	d11e      	bne.n	8003512 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	0c9b      	lsrs	r3, r3, #18
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	60fb      	str	r3, [r7, #12]
        break;
 80034e4:	e016      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]
        break;
 80034ec:	e012      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	60fb      	str	r3, [r7, #12]
        break;
 80034f4:	e00e      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	60fb      	str	r3, [r7, #12]
        break;
 80034fc:	e00a      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	09db      	lsrs	r3, r3, #7
 8003502:	60fb      	str	r3, [r7, #12]
        break;
 8003504:	e006      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	60fb      	str	r3, [r7, #12]
        break;
 800350c:	e002      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
        break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003512:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <ADC_ConfigureBoostMode+0x190>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d808      	bhi.n	8003534 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003530:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003532:	e025      	b.n	8003580 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a16      	ldr	r2, [pc, #88]	@ (8003590 <ADC_ConfigureBoostMode+0x194>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d80a      	bhi.n	8003552 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	e016      	b.n	8003580 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a0f      	ldr	r2, [pc, #60]	@ (8003594 <ADC_ConfigureBoostMode+0x198>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d80a      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356c:	609a      	str	r2, [r3, #8]
}
 800356e:	e007      	b.n	8003580 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40022300 	.word	0x40022300
 800358c:	005f5e10 	.word	0x005f5e10
 8003590:	00bebc20 	.word	0x00bebc20
 8003594:	017d7840 	.word	0x017d7840

08003598 <LL_ADC_IsEnabled>:
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <LL_ADC_IsEnabled+0x18>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <LL_ADC_IsEnabled+0x1a>
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <LL_ADC_REG_StartConversion>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <LL_ADC_REG_StartConversion+0x24>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	f043 0204 	orr.w	r2, r3, #4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	7fffffc0 	.word	0x7fffffc0

080035e8 <LL_ADC_REG_IsConversionOngoing>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d101      	bne.n	8003600 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b0a0      	sub	sp, #128	@ 0x80
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ffe1 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
 800362e:	e0ad      	b.n	800378c <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800363a:	2302      	movs	r3, #2
 800363c:	e0a6      	b.n	800378c <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a52      	ldr	r2, [pc, #328]	@ (8003794 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d002      	beq.n	8003656 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	e000      	b.n	8003658 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 8003656:	4b50      	ldr	r3, [pc, #320]	@ (8003798 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	4293      	cmp	r3, r2
 800365e:	d006      	beq.n	800366e <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff fdbb 	bl	80031dc <ADC_Enable>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800366c:	e02e      	b.n	80036cc <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003672:	2300      	movs	r3, #0
 8003674:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a47      	ldr	r2, [pc, #284]	@ (8003798 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d102      	bne.n	8003686 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 8003680:	4b44      	ldr	r3, [pc, #272]	@ (8003794 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e001      	b.n	800368a <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e071      	b.n	800378c <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff fd97 	bl	80031dc <ADC_Enable>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 80036b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d107      	bne.n	80036cc <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fd8b 	bl	80031dc <ADC_Enable>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80036cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d155      	bne.n	8003780 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036d8:	4b30      	ldr	r3, [pc, #192]	@ (800379c <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 80036da:	4013      	ands	r3, r2
 80036dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ee:	4a2c      	ldr	r2, [pc, #176]	@ (80037a0 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 80036f0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f6:	4a2b      	ldr	r2, [pc, #172]	@ (80037a4 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 80036f8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fe:	4a2a      	ldr	r2, [pc, #168]	@ (80037a8 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 8003700:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	221c      	movs	r2, #28
 8003708:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0210 	orr.w	r2, r2, #16
 8003720:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d002      	beq.n	8003732 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	e000      	b.n	8003734 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8003732:	4b19      	ldr	r3, [pc, #100]	@ (8003798 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	4293      	cmp	r3, r2
 800373a:	d00d      	beq.n	8003758 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3340      	adds	r3, #64	@ 0x40
 8003746:	4619      	mov	r1, r3
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f000 fe14 	bl	8004378 <HAL_DMA_Start_IT>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003756:	e017      	b.n	8003788 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003758:	4b14      	ldr	r3, [pc, #80]	@ (80037ac <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 800375a:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003762:	330c      	adds	r3, #12
 8003764:	4619      	mov	r1, r3
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f000 fe05 	bl	8004378 <HAL_DMA_Start_IT>
 800376e:	4603      	mov	r3, r0
 8003770:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff21 	bl	80035c0 <LL_ADC_REG_StartConversion>
 800377e:	e003      	b.n	8003788 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8003788:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 800378c:	4618      	mov	r0, r3
 800378e:	3780      	adds	r7, #128	@ 0x80
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40022100 	.word	0x40022100
 8003798:	40022000 	.word	0x40022000
 800379c:	fffff0fe 	.word	0xfffff0fe
 80037a0:	080032d5 	.word	0x080032d5
 80037a4:	080033ad 	.word	0x080033ad
 80037a8:	080033c9 	.word	0x080033c9
 80037ac:	40022300 	.word	0x40022300

080037b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b09f      	sub	sp, #124	@ 0x7c
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800382e:	2302      	movs	r3, #2
 8003830:	e080      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800383e:	2300      	movs	r3, #0
 8003840:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3d      	ldr	r2, [pc, #244]	@ (800393c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d102      	bne.n	8003852 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800384c:	4b3c      	ldr	r3, [pc, #240]	@ (8003940 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	e001      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e05f      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff feb6 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 800387c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff feb0 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d141      	bne.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800388e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003890:	2b00      	cmp	r3, #0
 8003892:	d13e      	bne.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003894:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003896:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80038a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b2:	4822      	ldr	r0, [pc, #136]	@ (800393c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80038b4:	f7ff fe70 	bl	8003598 <LL_ADC_IsEnabled>
 80038b8:	4604      	mov	r4, r0
 80038ba:	4821      	ldr	r0, [pc, #132]	@ (8003940 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80038bc:	f7ff fe6c 	bl	8003598 <LL_ADC_IsEnabled>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4323      	orrs	r3, r4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d12e      	bne.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	6811      	ldr	r1, [r2, #0]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	6892      	ldr	r2, [r2, #8]
 80038d8:	430a      	orrs	r2, r1
 80038da:	431a      	orrs	r2, r3
 80038dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038e0:	e021      	b.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80038e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ee:	4813      	ldr	r0, [pc, #76]	@ (800393c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80038f0:	f7ff fe52 	bl	8003598 <LL_ADC_IsEnabled>
 80038f4:	4604      	mov	r4, r0
 80038f6:	4812      	ldr	r0, [pc, #72]	@ (8003940 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80038f8:	f7ff fe4e 	bl	8003598 <LL_ADC_IsEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4323      	orrs	r3, r4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d110      	bne.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800390a:	4013      	ands	r3, r2
 800390c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800390e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003910:	e009      	b.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003924:	e000      	b.n	8003928 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003926:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003930:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003934:	4618      	mov	r0, r3
 8003936:	377c      	adds	r7, #124	@ 0x7c
 8003938:	46bd      	mov	sp, r7
 800393a:	bd90      	pop	{r4, r7, pc}
 800393c:	40022000 	.word	0x40022000
 8003940:	40022100 	.word	0x40022100
 8003944:	40022300 	.word	0x40022300
 8003948:	fffff0e0 	.word	0xfffff0e0

0800394c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <__NVIC_SetPriorityGrouping+0x40>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003968:	4013      	ands	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003974:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397a:	4a04      	ldr	r2, [pc, #16]	@ (800398c <__NVIC_SetPriorityGrouping+0x40>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	60d3      	str	r3, [r2, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000ed00 	.word	0xe000ed00
 8003990:	05fa0000 	.word	0x05fa0000

08003994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003998:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <__NVIC_GetPriorityGrouping+0x18>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	f003 0307 	and.w	r3, r3, #7
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	db0b      	blt.n	80039da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	4907      	ldr	r1, [pc, #28]	@ (80039e8 <__NVIC_EnableIRQ+0x38>)
 80039ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2001      	movs	r0, #1
 80039d2:	fa00 f202 	lsl.w	r2, r0, r2
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000e100 	.word	0xe000e100

080039ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db0a      	blt.n	8003a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	490c      	ldr	r1, [pc, #48]	@ (8003a38 <__NVIC_SetPriority+0x4c>)
 8003a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0a:	0112      	lsls	r2, r2, #4
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a14:	e00a      	b.n	8003a2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4908      	ldr	r1, [pc, #32]	@ (8003a3c <__NVIC_SetPriority+0x50>)
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3b04      	subs	r3, #4
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	440b      	add	r3, r1
 8003a2a:	761a      	strb	r2, [r3, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	@ 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f1c3 0307 	rsb	r3, r3, #7
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf28      	it	cs
 8003a5e:	2304      	movcs	r3, #4
 8003a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d902      	bls.n	8003a70 <NVIC_EncodePriority+0x30>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3b03      	subs	r3, #3
 8003a6e:	e000      	b.n	8003a72 <NVIC_EncodePriority+0x32>
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	401a      	ands	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a88:	f04f 31ff 	mov.w	r1, #4294967295
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43d9      	mvns	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	4313      	orrs	r3, r2
         );
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	@ 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ab8:	d301      	bcc.n	8003abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00f      	b.n	8003ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003abe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae8 <SysTick_Config+0x40>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac6:	210f      	movs	r1, #15
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	f7ff ff8e 	bl	80039ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <SysTick_Config+0x40>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad6:	4b04      	ldr	r3, [pc, #16]	@ (8003ae8 <SysTick_Config+0x40>)
 8003ad8:	2207      	movs	r2, #7
 8003ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	e000e010 	.word	0xe000e010

08003aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff29 	bl	800394c <__NVIC_SetPriorityGrouping>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b10:	f7ff ff40 	bl	8003994 <__NVIC_GetPriorityGrouping>
 8003b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff90 	bl	8003a40 <NVIC_EncodePriority>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff5f 	bl	80039ec <__NVIC_SetPriority>
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff33 	bl	80039b0 <__NVIC_EnableIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ffa4 	bl	8003aa8 <SysTick_Config>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003b70:	f3bf 8f5f 	dmb	sy
}
 8003b74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003b76:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <HAL_MPU_Disable+0x28>)
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	4a06      	ldr	r2, [pc, #24]	@ (8003b94 <HAL_MPU_Disable+0x28>)
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b80:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003b82:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_MPU_Disable+0x2c>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000ed00 	.word	0xe000ed00
 8003b98:	e000ed90 	.word	0xe000ed90

08003b9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd4 <HAL_MPU_Enable+0x38>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003bae:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <HAL_MPU_Enable+0x3c>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_MPU_Enable+0x3c>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003bba:	f3bf 8f4f 	dsb	sy
}
 8003bbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bc0:	f3bf 8f6f 	isb	sy
}
 8003bc4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed90 	.word	0xe000ed90
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	785a      	ldrb	r2, [r3, #1]
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <HAL_MPU_ConfigRegion+0x7c>)
 8003bea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003bec:	4b1a      	ldr	r3, [pc, #104]	@ (8003c58 <HAL_MPU_ConfigRegion+0x7c>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <HAL_MPU_ConfigRegion+0x7c>)
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003bf8:	4a17      	ldr	r2, [pc, #92]	@ (8003c58 <HAL_MPU_ConfigRegion+0x7c>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7b1b      	ldrb	r3, [r3, #12]
 8003c04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7adb      	ldrb	r3, [r3, #11]
 8003c0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7a9b      	ldrb	r3, [r3, #10]
 8003c12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7b5b      	ldrb	r3, [r3, #13]
 8003c1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7b9b      	ldrb	r3, [r3, #14]
 8003c22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7bdb      	ldrb	r3, [r3, #15]
 8003c2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7a5b      	ldrb	r3, [r3, #9]
 8003c32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7a1b      	ldrb	r3, [r3, #8]
 8003c3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c44:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c48:	6113      	str	r3, [r2, #16]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000ed90 	.word	0xe000ed90

08003c5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7fe f980 	bl	8001f68 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e37d      	b.n	8004370 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a66      	ldr	r2, [pc, #408]	@ (8003e14 <HAL_DMA_Init+0x1b8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d04a      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a65      	ldr	r2, [pc, #404]	@ (8003e18 <HAL_DMA_Init+0x1bc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d045      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a63      	ldr	r2, [pc, #396]	@ (8003e1c <HAL_DMA_Init+0x1c0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d040      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a62      	ldr	r2, [pc, #392]	@ (8003e20 <HAL_DMA_Init+0x1c4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d03b      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a60      	ldr	r2, [pc, #384]	@ (8003e24 <HAL_DMA_Init+0x1c8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d036      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5f      	ldr	r2, [pc, #380]	@ (8003e28 <HAL_DMA_Init+0x1cc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d031      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e2c <HAL_DMA_Init+0x1d0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d02c      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8003e30 <HAL_DMA_Init+0x1d4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d027      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e34 <HAL_DMA_Init+0x1d8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d022      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a59      	ldr	r2, [pc, #356]	@ (8003e38 <HAL_DMA_Init+0x1dc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d01d      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a57      	ldr	r2, [pc, #348]	@ (8003e3c <HAL_DMA_Init+0x1e0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d018      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a56      	ldr	r2, [pc, #344]	@ (8003e40 <HAL_DMA_Init+0x1e4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a54      	ldr	r2, [pc, #336]	@ (8003e44 <HAL_DMA_Init+0x1e8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00e      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a53      	ldr	r2, [pc, #332]	@ (8003e48 <HAL_DMA_Init+0x1ec>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a51      	ldr	r2, [pc, #324]	@ (8003e4c <HAL_DMA_Init+0x1f0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d004      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a50      	ldr	r2, [pc, #320]	@ (8003e50 <HAL_DMA_Init+0x1f4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d101      	bne.n	8003d18 <HAL_DMA_Init+0xbc>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_DMA_Init+0xbe>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 813c 	beq.w	8003f98 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a37      	ldr	r2, [pc, #220]	@ (8003e14 <HAL_DMA_Init+0x1b8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d04a      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a36      	ldr	r2, [pc, #216]	@ (8003e18 <HAL_DMA_Init+0x1bc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d045      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a34      	ldr	r2, [pc, #208]	@ (8003e1c <HAL_DMA_Init+0x1c0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d040      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <HAL_DMA_Init+0x1c4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d03b      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a31      	ldr	r2, [pc, #196]	@ (8003e24 <HAL_DMA_Init+0x1c8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d036      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a30      	ldr	r2, [pc, #192]	@ (8003e28 <HAL_DMA_Init+0x1cc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d031      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2e      	ldr	r2, [pc, #184]	@ (8003e2c <HAL_DMA_Init+0x1d0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d02c      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <HAL_DMA_Init+0x1d4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d027      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2b      	ldr	r2, [pc, #172]	@ (8003e34 <HAL_DMA_Init+0x1d8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d022      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003e38 <HAL_DMA_Init+0x1dc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d01d      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a28      	ldr	r2, [pc, #160]	@ (8003e3c <HAL_DMA_Init+0x1e0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d018      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a27      	ldr	r2, [pc, #156]	@ (8003e40 <HAL_DMA_Init+0x1e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a25      	ldr	r2, [pc, #148]	@ (8003e44 <HAL_DMA_Init+0x1e8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a24      	ldr	r2, [pc, #144]	@ (8003e48 <HAL_DMA_Init+0x1ec>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a22      	ldr	r2, [pc, #136]	@ (8003e4c <HAL_DMA_Init+0x1f0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <HAL_DMA_Init+0x1f4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d108      	bne.n	8003de2 <HAL_DMA_Init+0x186>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e007      	b.n	8003df2 <HAL_DMA_Init+0x196>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003df2:	e02f      	b.n	8003e54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df4:	f7fe f8b8 	bl	8001f68 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d928      	bls.n	8003e54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e2ad      	b.n	8004370 <HAL_DMA_Init+0x714>
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1c8      	bne.n	8003df4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4b73      	ldr	r3, [pc, #460]	@ (800403c <HAL_DMA_Init+0x3e0>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003e7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d107      	bne.n	8003eb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b28      	cmp	r3, #40	@ 0x28
 8003ebe:	d903      	bls.n	8003ec8 <HAL_DMA_Init+0x26c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ec6:	d91f      	bls.n	8003f08 <HAL_DMA_Init+0x2ac>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ece:	d903      	bls.n	8003ed8 <HAL_DMA_Init+0x27c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b42      	cmp	r3, #66	@ 0x42
 8003ed6:	d917      	bls.n	8003f08 <HAL_DMA_Init+0x2ac>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b46      	cmp	r3, #70	@ 0x46
 8003ede:	d903      	bls.n	8003ee8 <HAL_DMA_Init+0x28c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b48      	cmp	r3, #72	@ 0x48
 8003ee6:	d90f      	bls.n	8003f08 <HAL_DMA_Init+0x2ac>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b4e      	cmp	r3, #78	@ 0x4e
 8003eee:	d903      	bls.n	8003ef8 <HAL_DMA_Init+0x29c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b52      	cmp	r3, #82	@ 0x52
 8003ef6:	d907      	bls.n	8003f08 <HAL_DMA_Init+0x2ac>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b73      	cmp	r3, #115	@ 0x73
 8003efe:	d905      	bls.n	8003f0c <HAL_DMA_Init+0x2b0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b77      	cmp	r3, #119	@ 0x77
 8003f06:	d801      	bhi.n	8003f0c <HAL_DMA_Init+0x2b0>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_DMA_Init+0x2b2>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f18:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f023 0307 	bic.w	r3, r3, #7
 8003f30:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d117      	bne.n	8003f74 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f002 fbd4 	bl	8006704 <DMA_CheckFifoParam>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2240      	movs	r2, #64	@ 0x40
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e1fd      	b.n	8004370 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f002 fb0f 	bl	80065a0 <DMA_CalcBaseAndBitshift>
 8003f82:	4603      	mov	r3, r0
 8003f84:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	223f      	movs	r2, #63	@ 0x3f
 8003f90:	409a      	lsls	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	e0fd      	b.n	8004194 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	@ (8004040 <HAL_DMA_Init+0x3e4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d04a      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a27      	ldr	r2, [pc, #156]	@ (8004044 <HAL_DMA_Init+0x3e8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d045      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a25      	ldr	r2, [pc, #148]	@ (8004048 <HAL_DMA_Init+0x3ec>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d040      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a24      	ldr	r2, [pc, #144]	@ (800404c <HAL_DMA_Init+0x3f0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d03b      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a22      	ldr	r2, [pc, #136]	@ (8004050 <HAL_DMA_Init+0x3f4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d036      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a21      	ldr	r2, [pc, #132]	@ (8004054 <HAL_DMA_Init+0x3f8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d031      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004058 <HAL_DMA_Init+0x3fc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02c      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800405c <HAL_DMA_Init+0x400>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d027      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	@ (8004060 <HAL_DMA_Init+0x404>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <HAL_DMA_Init+0x408>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01d      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a19      	ldr	r2, [pc, #100]	@ (8004068 <HAL_DMA_Init+0x40c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a18      	ldr	r2, [pc, #96]	@ (800406c <HAL_DMA_Init+0x410>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <HAL_DMA_Init+0x414>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <HAL_DMA_Init+0x418>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a13      	ldr	r2, [pc, #76]	@ (8004078 <HAL_DMA_Init+0x41c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_DMA_Init+0x3dc>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a12      	ldr	r2, [pc, #72]	@ (800407c <HAL_DMA_Init+0x420>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d123      	bne.n	8004080 <HAL_DMA_Init+0x424>
 8004038:	2301      	movs	r3, #1
 800403a:	e022      	b.n	8004082 <HAL_DMA_Init+0x426>
 800403c:	fe10803f 	.word	0xfe10803f
 8004040:	48022c08 	.word	0x48022c08
 8004044:	48022c1c 	.word	0x48022c1c
 8004048:	48022c30 	.word	0x48022c30
 800404c:	48022c44 	.word	0x48022c44
 8004050:	48022c58 	.word	0x48022c58
 8004054:	48022c6c 	.word	0x48022c6c
 8004058:	48022c80 	.word	0x48022c80
 800405c:	48022c94 	.word	0x48022c94
 8004060:	58025408 	.word	0x58025408
 8004064:	5802541c 	.word	0x5802541c
 8004068:	58025430 	.word	0x58025430
 800406c:	58025444 	.word	0x58025444
 8004070:	58025458 	.word	0x58025458
 8004074:	5802546c 	.word	0x5802546c
 8004078:	58025480 	.word	0x58025480
 800407c:	58025494 	.word	0x58025494
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d07d      	beq.n	8004182 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7f      	ldr	r2, [pc, #508]	@ (8004288 <HAL_DMA_Init+0x62c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d021      	beq.n	80040d4 <HAL_DMA_Init+0x478>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a7d      	ldr	r2, [pc, #500]	@ (800428c <HAL_DMA_Init+0x630>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01c      	beq.n	80040d4 <HAL_DMA_Init+0x478>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a7c      	ldr	r2, [pc, #496]	@ (8004290 <HAL_DMA_Init+0x634>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d017      	beq.n	80040d4 <HAL_DMA_Init+0x478>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a7a      	ldr	r2, [pc, #488]	@ (8004294 <HAL_DMA_Init+0x638>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d012      	beq.n	80040d4 <HAL_DMA_Init+0x478>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a79      	ldr	r2, [pc, #484]	@ (8004298 <HAL_DMA_Init+0x63c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00d      	beq.n	80040d4 <HAL_DMA_Init+0x478>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a77      	ldr	r2, [pc, #476]	@ (800429c <HAL_DMA_Init+0x640>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d008      	beq.n	80040d4 <HAL_DMA_Init+0x478>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a76      	ldr	r2, [pc, #472]	@ (80042a0 <HAL_DMA_Init+0x644>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <HAL_DMA_Init+0x478>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a74      	ldr	r2, [pc, #464]	@ (80042a4 <HAL_DMA_Init+0x648>)
 80040d2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4b6e      	ldr	r3, [pc, #440]	@ (80042a8 <HAL_DMA_Init+0x64c>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d008      	beq.n	800410e <HAL_DMA_Init+0x4b2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b80      	cmp	r3, #128	@ 0x80
 8004102:	d102      	bne.n	800410a <HAL_DMA_Init+0x4ae>
 8004104:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004108:	e002      	b.n	8004110 <HAL_DMA_Init+0x4b4>
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_DMA_Init+0x4b4>
 800410e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68d2      	ldr	r2, [r2, #12]
 8004114:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004116:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800411e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004126:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800412e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004136:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800413e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	4b55      	ldr	r3, [pc, #340]	@ (80042ac <HAL_DMA_Init+0x650>)
 8004156:	4413      	add	r3, r2
 8004158:	4a55      	ldr	r2, [pc, #340]	@ (80042b0 <HAL_DMA_Init+0x654>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	009a      	lsls	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f002 fa1a 	bl	80065a0 <DMA_CalcBaseAndBitshift>
 800416c:	4603      	mov	r3, r0
 800416e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	e008      	b.n	8004194 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2240      	movs	r2, #64	@ 0x40
 8004186:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2203      	movs	r2, #3
 800418c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0ed      	b.n	8004370 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a46      	ldr	r2, [pc, #280]	@ (80042b4 <HAL_DMA_Init+0x658>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d072      	beq.n	8004284 <HAL_DMA_Init+0x628>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a45      	ldr	r2, [pc, #276]	@ (80042b8 <HAL_DMA_Init+0x65c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d06d      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a43      	ldr	r2, [pc, #268]	@ (80042bc <HAL_DMA_Init+0x660>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d068      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a42      	ldr	r2, [pc, #264]	@ (80042c0 <HAL_DMA_Init+0x664>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d063      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a40      	ldr	r2, [pc, #256]	@ (80042c4 <HAL_DMA_Init+0x668>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d05e      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3f      	ldr	r2, [pc, #252]	@ (80042c8 <HAL_DMA_Init+0x66c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d059      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3d      	ldr	r2, [pc, #244]	@ (80042cc <HAL_DMA_Init+0x670>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d054      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3c      	ldr	r2, [pc, #240]	@ (80042d0 <HAL_DMA_Init+0x674>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d04f      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3a      	ldr	r2, [pc, #232]	@ (80042d4 <HAL_DMA_Init+0x678>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d04a      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a39      	ldr	r2, [pc, #228]	@ (80042d8 <HAL_DMA_Init+0x67c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d045      	beq.n	8004284 <HAL_DMA_Init+0x628>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a37      	ldr	r2, [pc, #220]	@ (80042dc <HAL_DMA_Init+0x680>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d040      	beq.n	8004284 <HAL_DMA_Init+0x628>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a36      	ldr	r2, [pc, #216]	@ (80042e0 <HAL_DMA_Init+0x684>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d03b      	beq.n	8004284 <HAL_DMA_Init+0x628>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a34      	ldr	r2, [pc, #208]	@ (80042e4 <HAL_DMA_Init+0x688>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d036      	beq.n	8004284 <HAL_DMA_Init+0x628>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a33      	ldr	r2, [pc, #204]	@ (80042e8 <HAL_DMA_Init+0x68c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d031      	beq.n	8004284 <HAL_DMA_Init+0x628>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a31      	ldr	r2, [pc, #196]	@ (80042ec <HAL_DMA_Init+0x690>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02c      	beq.n	8004284 <HAL_DMA_Init+0x628>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a30      	ldr	r2, [pc, #192]	@ (80042f0 <HAL_DMA_Init+0x694>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <HAL_DMA_Init+0x628>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a13      	ldr	r2, [pc, #76]	@ (8004288 <HAL_DMA_Init+0x62c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_Init+0x628>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a12      	ldr	r2, [pc, #72]	@ (800428c <HAL_DMA_Init+0x630>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_Init+0x628>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <HAL_DMA_Init+0x634>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_Init+0x628>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a0f      	ldr	r2, [pc, #60]	@ (8004294 <HAL_DMA_Init+0x638>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_Init+0x628>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0d      	ldr	r2, [pc, #52]	@ (8004298 <HAL_DMA_Init+0x63c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_Init+0x628>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a0c      	ldr	r2, [pc, #48]	@ (800429c <HAL_DMA_Init+0x640>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_Init+0x628>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a0a      	ldr	r2, [pc, #40]	@ (80042a0 <HAL_DMA_Init+0x644>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_Init+0x628>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a09      	ldr	r2, [pc, #36]	@ (80042a4 <HAL_DMA_Init+0x648>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d137      	bne.n	80042f4 <HAL_DMA_Init+0x698>
 8004284:	2301      	movs	r3, #1
 8004286:	e036      	b.n	80042f6 <HAL_DMA_Init+0x69a>
 8004288:	58025408 	.word	0x58025408
 800428c:	5802541c 	.word	0x5802541c
 8004290:	58025430 	.word	0x58025430
 8004294:	58025444 	.word	0x58025444
 8004298:	58025458 	.word	0x58025458
 800429c:	5802546c 	.word	0x5802546c
 80042a0:	58025480 	.word	0x58025480
 80042a4:	58025494 	.word	0x58025494
 80042a8:	fffe000f 	.word	0xfffe000f
 80042ac:	a7fdabf8 	.word	0xa7fdabf8
 80042b0:	cccccccd 	.word	0xcccccccd
 80042b4:	40020010 	.word	0x40020010
 80042b8:	40020028 	.word	0x40020028
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40020058 	.word	0x40020058
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40020088 	.word	0x40020088
 80042cc:	400200a0 	.word	0x400200a0
 80042d0:	400200b8 	.word	0x400200b8
 80042d4:	40020410 	.word	0x40020410
 80042d8:	40020428 	.word	0x40020428
 80042dc:	40020440 	.word	0x40020440
 80042e0:	40020458 	.word	0x40020458
 80042e4:	40020470 	.word	0x40020470
 80042e8:	40020488 	.word	0x40020488
 80042ec:	400204a0 	.word	0x400204a0
 80042f0:	400204b8 	.word	0x400204b8
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d032      	beq.n	8004360 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f002 fa7e 	bl	80067fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b80      	cmp	r3, #128	@ 0x80
 8004306:	d102      	bne.n	800430e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004322:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <HAL_DMA_Init+0x6f2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b08      	cmp	r3, #8
 8004332:	d80c      	bhi.n	800434e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f002 fafb 	bl	8006930 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800434a:	605a      	str	r2, [r3, #4]
 800434c:	e008      	b.n	8004360 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e226      	b.n	80047e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_DMA_Start_IT+0x2a>
 800439e:	2302      	movs	r3, #2
 80043a0:	e21f      	b.n	80047e2 <HAL_DMA_Start_IT+0x46a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	f040 820a 	bne.w	80047cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a68      	ldr	r2, [pc, #416]	@ (800456c <HAL_DMA_Start_IT+0x1f4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d04a      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a66      	ldr	r2, [pc, #408]	@ (8004570 <HAL_DMA_Start_IT+0x1f8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d045      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a65      	ldr	r2, [pc, #404]	@ (8004574 <HAL_DMA_Start_IT+0x1fc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d040      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a63      	ldr	r2, [pc, #396]	@ (8004578 <HAL_DMA_Start_IT+0x200>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d03b      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a62      	ldr	r2, [pc, #392]	@ (800457c <HAL_DMA_Start_IT+0x204>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d036      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a60      	ldr	r2, [pc, #384]	@ (8004580 <HAL_DMA_Start_IT+0x208>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d031      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5f      	ldr	r2, [pc, #380]	@ (8004584 <HAL_DMA_Start_IT+0x20c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d02c      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5d      	ldr	r2, [pc, #372]	@ (8004588 <HAL_DMA_Start_IT+0x210>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d027      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5c      	ldr	r2, [pc, #368]	@ (800458c <HAL_DMA_Start_IT+0x214>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5a      	ldr	r2, [pc, #360]	@ (8004590 <HAL_DMA_Start_IT+0x218>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01d      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a59      	ldr	r2, [pc, #356]	@ (8004594 <HAL_DMA_Start_IT+0x21c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a57      	ldr	r2, [pc, #348]	@ (8004598 <HAL_DMA_Start_IT+0x220>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a56      	ldr	r2, [pc, #344]	@ (800459c <HAL_DMA_Start_IT+0x224>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a54      	ldr	r2, [pc, #336]	@ (80045a0 <HAL_DMA_Start_IT+0x228>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a53      	ldr	r2, [pc, #332]	@ (80045a4 <HAL_DMA_Start_IT+0x22c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a51      	ldr	r2, [pc, #324]	@ (80045a8 <HAL_DMA_Start_IT+0x230>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d108      	bne.n	8004478 <HAL_DMA_Start_IT+0x100>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e007      	b.n	8004488 <HAL_DMA_Start_IT+0x110>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f001 fea2 	bl	80061d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a34      	ldr	r2, [pc, #208]	@ (800456c <HAL_DMA_Start_IT+0x1f4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d04a      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a33      	ldr	r2, [pc, #204]	@ (8004570 <HAL_DMA_Start_IT+0x1f8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d045      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a31      	ldr	r2, [pc, #196]	@ (8004574 <HAL_DMA_Start_IT+0x1fc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d040      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <HAL_DMA_Start_IT+0x200>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d03b      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <HAL_DMA_Start_IT+0x204>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d036      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <HAL_DMA_Start_IT+0x208>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d031      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004584 <HAL_DMA_Start_IT+0x20c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d02c      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2a      	ldr	r2, [pc, #168]	@ (8004588 <HAL_DMA_Start_IT+0x210>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d027      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a28      	ldr	r2, [pc, #160]	@ (800458c <HAL_DMA_Start_IT+0x214>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d022      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a27      	ldr	r2, [pc, #156]	@ (8004590 <HAL_DMA_Start_IT+0x218>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d01d      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a25      	ldr	r2, [pc, #148]	@ (8004594 <HAL_DMA_Start_IT+0x21c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a24      	ldr	r2, [pc, #144]	@ (8004598 <HAL_DMA_Start_IT+0x220>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a22      	ldr	r2, [pc, #136]	@ (800459c <HAL_DMA_Start_IT+0x224>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a21      	ldr	r2, [pc, #132]	@ (80045a0 <HAL_DMA_Start_IT+0x228>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1f      	ldr	r2, [pc, #124]	@ (80045a4 <HAL_DMA_Start_IT+0x22c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1e      	ldr	r2, [pc, #120]	@ (80045a8 <HAL_DMA_Start_IT+0x230>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_DMA_Start_IT+0x1c0>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_DMA_Start_IT+0x1c2>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d036      	beq.n	80045ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 021e 	bic.w	r2, r3, #30
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0216 	orr.w	r2, r2, #22
 8004550:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d03e      	beq.n	80045d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0208 	orr.w	r2, r2, #8
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e035      	b.n	80045d8 <HAL_DMA_Start_IT+0x260>
 800456c:	40020010 	.word	0x40020010
 8004570:	40020028 	.word	0x40020028
 8004574:	40020040 	.word	0x40020040
 8004578:	40020058 	.word	0x40020058
 800457c:	40020070 	.word	0x40020070
 8004580:	40020088 	.word	0x40020088
 8004584:	400200a0 	.word	0x400200a0
 8004588:	400200b8 	.word	0x400200b8
 800458c:	40020410 	.word	0x40020410
 8004590:	40020428 	.word	0x40020428
 8004594:	40020440 	.word	0x40020440
 8004598:	40020458 	.word	0x40020458
 800459c:	40020470 	.word	0x40020470
 80045a0:	40020488 	.word	0x40020488
 80045a4:	400204a0 	.word	0x400204a0
 80045a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 020e 	bic.w	r2, r3, #14
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 020a 	orr.w	r2, r2, #10
 80045be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0204 	orr.w	r2, r2, #4
 80045d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a83      	ldr	r2, [pc, #524]	@ (80047ec <HAL_DMA_Start_IT+0x474>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d072      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a82      	ldr	r2, [pc, #520]	@ (80047f0 <HAL_DMA_Start_IT+0x478>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d06d      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a80      	ldr	r2, [pc, #512]	@ (80047f4 <HAL_DMA_Start_IT+0x47c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d068      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7f      	ldr	r2, [pc, #508]	@ (80047f8 <HAL_DMA_Start_IT+0x480>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d063      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a7d      	ldr	r2, [pc, #500]	@ (80047fc <HAL_DMA_Start_IT+0x484>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d05e      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7c      	ldr	r2, [pc, #496]	@ (8004800 <HAL_DMA_Start_IT+0x488>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d059      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7a      	ldr	r2, [pc, #488]	@ (8004804 <HAL_DMA_Start_IT+0x48c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d054      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a79      	ldr	r2, [pc, #484]	@ (8004808 <HAL_DMA_Start_IT+0x490>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d04f      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a77      	ldr	r2, [pc, #476]	@ (800480c <HAL_DMA_Start_IT+0x494>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04a      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a76      	ldr	r2, [pc, #472]	@ (8004810 <HAL_DMA_Start_IT+0x498>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d045      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a74      	ldr	r2, [pc, #464]	@ (8004814 <HAL_DMA_Start_IT+0x49c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d040      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a73      	ldr	r2, [pc, #460]	@ (8004818 <HAL_DMA_Start_IT+0x4a0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d03b      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a71      	ldr	r2, [pc, #452]	@ (800481c <HAL_DMA_Start_IT+0x4a4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d036      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a70      	ldr	r2, [pc, #448]	@ (8004820 <HAL_DMA_Start_IT+0x4a8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d031      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6e      	ldr	r2, [pc, #440]	@ (8004824 <HAL_DMA_Start_IT+0x4ac>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02c      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6d      	ldr	r2, [pc, #436]	@ (8004828 <HAL_DMA_Start_IT+0x4b0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d027      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6b      	ldr	r2, [pc, #428]	@ (800482c <HAL_DMA_Start_IT+0x4b4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6a      	ldr	r2, [pc, #424]	@ (8004830 <HAL_DMA_Start_IT+0x4b8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01d      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a68      	ldr	r2, [pc, #416]	@ (8004834 <HAL_DMA_Start_IT+0x4bc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a67      	ldr	r2, [pc, #412]	@ (8004838 <HAL_DMA_Start_IT+0x4c0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a65      	ldr	r2, [pc, #404]	@ (800483c <HAL_DMA_Start_IT+0x4c4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a64      	ldr	r2, [pc, #400]	@ (8004840 <HAL_DMA_Start_IT+0x4c8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a62      	ldr	r2, [pc, #392]	@ (8004844 <HAL_DMA_Start_IT+0x4cc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a61      	ldr	r2, [pc, #388]	@ (8004848 <HAL_DMA_Start_IT+0x4d0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_DMA_Start_IT+0x354>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_DMA_Start_IT+0x356>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01a      	beq.n	8004708 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004706:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a37      	ldr	r2, [pc, #220]	@ (80047ec <HAL_DMA_Start_IT+0x474>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d04a      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a36      	ldr	r2, [pc, #216]	@ (80047f0 <HAL_DMA_Start_IT+0x478>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d045      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a34      	ldr	r2, [pc, #208]	@ (80047f4 <HAL_DMA_Start_IT+0x47c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d040      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a33      	ldr	r2, [pc, #204]	@ (80047f8 <HAL_DMA_Start_IT+0x480>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d03b      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a31      	ldr	r2, [pc, #196]	@ (80047fc <HAL_DMA_Start_IT+0x484>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d036      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a30      	ldr	r2, [pc, #192]	@ (8004800 <HAL_DMA_Start_IT+0x488>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d031      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2e      	ldr	r2, [pc, #184]	@ (8004804 <HAL_DMA_Start_IT+0x48c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d02c      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2d      	ldr	r2, [pc, #180]	@ (8004808 <HAL_DMA_Start_IT+0x490>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d027      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2b      	ldr	r2, [pc, #172]	@ (800480c <HAL_DMA_Start_IT+0x494>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d022      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <HAL_DMA_Start_IT+0x498>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d01d      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a28      	ldr	r2, [pc, #160]	@ (8004814 <HAL_DMA_Start_IT+0x49c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d018      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a27      	ldr	r2, [pc, #156]	@ (8004818 <HAL_DMA_Start_IT+0x4a0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a25      	ldr	r2, [pc, #148]	@ (800481c <HAL_DMA_Start_IT+0x4a4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a24      	ldr	r2, [pc, #144]	@ (8004820 <HAL_DMA_Start_IT+0x4a8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_DMA_Start_IT+0x4ac>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a21      	ldr	r2, [pc, #132]	@ (8004828 <HAL_DMA_Start_IT+0x4b0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d108      	bne.n	80047ba <HAL_DMA_Start_IT+0x442>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e012      	b.n	80047e0 <HAL_DMA_Start_IT+0x468>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e009      	b.n	80047e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40020010 	.word	0x40020010
 80047f0:	40020028 	.word	0x40020028
 80047f4:	40020040 	.word	0x40020040
 80047f8:	40020058 	.word	0x40020058
 80047fc:	40020070 	.word	0x40020070
 8004800:	40020088 	.word	0x40020088
 8004804:	400200a0 	.word	0x400200a0
 8004808:	400200b8 	.word	0x400200b8
 800480c:	40020410 	.word	0x40020410
 8004810:	40020428 	.word	0x40020428
 8004814:	40020440 	.word	0x40020440
 8004818:	40020458 	.word	0x40020458
 800481c:	40020470 	.word	0x40020470
 8004820:	40020488 	.word	0x40020488
 8004824:	400204a0 	.word	0x400204a0
 8004828:	400204b8 	.word	0x400204b8
 800482c:	58025408 	.word	0x58025408
 8004830:	5802541c 	.word	0x5802541c
 8004834:	58025430 	.word	0x58025430
 8004838:	58025444 	.word	0x58025444
 800483c:	58025458 	.word	0x58025458
 8004840:	5802546c 	.word	0x5802546c
 8004844:	58025480 	.word	0x58025480
 8004848:	58025494 	.word	0x58025494

0800484c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004854:	f7fd fb88 	bl	8001f68 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e2dc      	b.n	8004e1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d008      	beq.n	8004882 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2280      	movs	r2, #128	@ 0x80
 8004874:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e2cd      	b.n	8004e1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a76      	ldr	r2, [pc, #472]	@ (8004a60 <HAL_DMA_Abort+0x214>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d04a      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a74      	ldr	r2, [pc, #464]	@ (8004a64 <HAL_DMA_Abort+0x218>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d045      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a73      	ldr	r2, [pc, #460]	@ (8004a68 <HAL_DMA_Abort+0x21c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d040      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a71      	ldr	r2, [pc, #452]	@ (8004a6c <HAL_DMA_Abort+0x220>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d03b      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a70      	ldr	r2, [pc, #448]	@ (8004a70 <HAL_DMA_Abort+0x224>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d036      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a74 <HAL_DMA_Abort+0x228>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d031      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004a78 <HAL_DMA_Abort+0x22c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d02c      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a6b      	ldr	r2, [pc, #428]	@ (8004a7c <HAL_DMA_Abort+0x230>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d027      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004a80 <HAL_DMA_Abort+0x234>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a68      	ldr	r2, [pc, #416]	@ (8004a84 <HAL_DMA_Abort+0x238>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01d      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a67      	ldr	r2, [pc, #412]	@ (8004a88 <HAL_DMA_Abort+0x23c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a65      	ldr	r2, [pc, #404]	@ (8004a8c <HAL_DMA_Abort+0x240>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a64      	ldr	r2, [pc, #400]	@ (8004a90 <HAL_DMA_Abort+0x244>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a62      	ldr	r2, [pc, #392]	@ (8004a94 <HAL_DMA_Abort+0x248>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a61      	ldr	r2, [pc, #388]	@ (8004a98 <HAL_DMA_Abort+0x24c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_DMA_Abort+0xd6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a5f      	ldr	r2, [pc, #380]	@ (8004a9c <HAL_DMA_Abort+0x250>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_DMA_Abort+0xda>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_DMA_Abort+0xdc>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d013      	beq.n	8004954 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 021e 	bic.w	r2, r2, #30
 800493a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800494a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e00a      	b.n	800496a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 020e 	bic.w	r2, r2, #14
 8004962:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a60 <HAL_DMA_Abort+0x214>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d072      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3a      	ldr	r2, [pc, #232]	@ (8004a64 <HAL_DMA_Abort+0x218>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d06d      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a39      	ldr	r2, [pc, #228]	@ (8004a68 <HAL_DMA_Abort+0x21c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d068      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a37      	ldr	r2, [pc, #220]	@ (8004a6c <HAL_DMA_Abort+0x220>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d063      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a36      	ldr	r2, [pc, #216]	@ (8004a70 <HAL_DMA_Abort+0x224>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d05e      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a34      	ldr	r2, [pc, #208]	@ (8004a74 <HAL_DMA_Abort+0x228>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d059      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a33      	ldr	r2, [pc, #204]	@ (8004a78 <HAL_DMA_Abort+0x22c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d054      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a31      	ldr	r2, [pc, #196]	@ (8004a7c <HAL_DMA_Abort+0x230>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d04f      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a30      	ldr	r2, [pc, #192]	@ (8004a80 <HAL_DMA_Abort+0x234>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d04a      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004a84 <HAL_DMA_Abort+0x238>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d045      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004a88 <HAL_DMA_Abort+0x23c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d040      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2b      	ldr	r2, [pc, #172]	@ (8004a8c <HAL_DMA_Abort+0x240>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d03b      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a90 <HAL_DMA_Abort+0x244>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d036      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a28      	ldr	r2, [pc, #160]	@ (8004a94 <HAL_DMA_Abort+0x248>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d031      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a27      	ldr	r2, [pc, #156]	@ (8004a98 <HAL_DMA_Abort+0x24c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d02c      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a25      	ldr	r2, [pc, #148]	@ (8004a9c <HAL_DMA_Abort+0x250>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d027      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a24      	ldr	r2, [pc, #144]	@ (8004aa0 <HAL_DMA_Abort+0x254>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a22      	ldr	r2, [pc, #136]	@ (8004aa4 <HAL_DMA_Abort+0x258>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01d      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	@ (8004aa8 <HAL_DMA_Abort+0x25c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d018      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004aac <HAL_DMA_Abort+0x260>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab0 <HAL_DMA_Abort+0x264>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab4 <HAL_DMA_Abort+0x268>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab8 <HAL_DMA_Abort+0x26c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_DMA_Abort+0x20e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a19      	ldr	r2, [pc, #100]	@ (8004abc <HAL_DMA_Abort+0x270>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d132      	bne.n	8004ac0 <HAL_DMA_Abort+0x274>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e031      	b.n	8004ac2 <HAL_DMA_Abort+0x276>
 8004a5e:	bf00      	nop
 8004a60:	40020010 	.word	0x40020010
 8004a64:	40020028 	.word	0x40020028
 8004a68:	40020040 	.word	0x40020040
 8004a6c:	40020058 	.word	0x40020058
 8004a70:	40020070 	.word	0x40020070
 8004a74:	40020088 	.word	0x40020088
 8004a78:	400200a0 	.word	0x400200a0
 8004a7c:	400200b8 	.word	0x400200b8
 8004a80:	40020410 	.word	0x40020410
 8004a84:	40020428 	.word	0x40020428
 8004a88:	40020440 	.word	0x40020440
 8004a8c:	40020458 	.word	0x40020458
 8004a90:	40020470 	.word	0x40020470
 8004a94:	40020488 	.word	0x40020488
 8004a98:	400204a0 	.word	0x400204a0
 8004a9c:	400204b8 	.word	0x400204b8
 8004aa0:	58025408 	.word	0x58025408
 8004aa4:	5802541c 	.word	0x5802541c
 8004aa8:	58025430 	.word	0x58025430
 8004aac:	58025444 	.word	0x58025444
 8004ab0:	58025458 	.word	0x58025458
 8004ab4:	5802546c 	.word	0x5802546c
 8004ab8:	58025480 	.word	0x58025480
 8004abc:	58025494 	.word	0x58025494
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6d      	ldr	r2, [pc, #436]	@ (8004c90 <HAL_DMA_Abort+0x444>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d04a      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a6b      	ldr	r2, [pc, #428]	@ (8004c94 <HAL_DMA_Abort+0x448>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d045      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a6a      	ldr	r2, [pc, #424]	@ (8004c98 <HAL_DMA_Abort+0x44c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d040      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a68      	ldr	r2, [pc, #416]	@ (8004c9c <HAL_DMA_Abort+0x450>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d03b      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a67      	ldr	r2, [pc, #412]	@ (8004ca0 <HAL_DMA_Abort+0x454>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d036      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a65      	ldr	r2, [pc, #404]	@ (8004ca4 <HAL_DMA_Abort+0x458>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d031      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a64      	ldr	r2, [pc, #400]	@ (8004ca8 <HAL_DMA_Abort+0x45c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d02c      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a62      	ldr	r2, [pc, #392]	@ (8004cac <HAL_DMA_Abort+0x460>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d027      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a61      	ldr	r2, [pc, #388]	@ (8004cb0 <HAL_DMA_Abort+0x464>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a5f      	ldr	r2, [pc, #380]	@ (8004cb4 <HAL_DMA_Abort+0x468>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb8 <HAL_DMA_Abort+0x46c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5c      	ldr	r2, [pc, #368]	@ (8004cbc <HAL_DMA_Abort+0x470>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5b      	ldr	r2, [pc, #364]	@ (8004cc0 <HAL_DMA_Abort+0x474>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a59      	ldr	r2, [pc, #356]	@ (8004cc4 <HAL_DMA_Abort+0x478>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a58      	ldr	r2, [pc, #352]	@ (8004cc8 <HAL_DMA_Abort+0x47c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_DMA_Abort+0x32a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a56      	ldr	r2, [pc, #344]	@ (8004ccc <HAL_DMA_Abort+0x480>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d108      	bne.n	8004b88 <HAL_DMA_Abort+0x33c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e007      	b.n	8004b98 <HAL_DMA_Abort+0x34c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b98:	e013      	b.n	8004bc2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b9a:	f7fd f9e5 	bl	8001f68 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	d90c      	bls.n	8004bc2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e12d      	b.n	8004e1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c90 <HAL_DMA_Abort+0x444>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d04a      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c94 <HAL_DMA_Abort+0x448>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d045      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c98 <HAL_DMA_Abort+0x44c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d040      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c9c <HAL_DMA_Abort+0x450>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d03b      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a29      	ldr	r2, [pc, #164]	@ (8004ca0 <HAL_DMA_Abort+0x454>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d036      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a27      	ldr	r2, [pc, #156]	@ (8004ca4 <HAL_DMA_Abort+0x458>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d031      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a26      	ldr	r2, [pc, #152]	@ (8004ca8 <HAL_DMA_Abort+0x45c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d02c      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a24      	ldr	r2, [pc, #144]	@ (8004cac <HAL_DMA_Abort+0x460>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d027      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a23      	ldr	r2, [pc, #140]	@ (8004cb0 <HAL_DMA_Abort+0x464>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d022      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a21      	ldr	r2, [pc, #132]	@ (8004cb4 <HAL_DMA_Abort+0x468>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01d      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a20      	ldr	r2, [pc, #128]	@ (8004cb8 <HAL_DMA_Abort+0x46c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d018      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1e      	ldr	r2, [pc, #120]	@ (8004cbc <HAL_DMA_Abort+0x470>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc0 <HAL_DMA_Abort+0x474>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc4 <HAL_DMA_Abort+0x478>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc8 <HAL_DMA_Abort+0x47c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_DMA_Abort+0x422>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <HAL_DMA_Abort+0x480>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_DMA_Abort+0x426>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_DMA_Abort+0x428>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d02b      	beq.n	8004cd0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	223f      	movs	r2, #63	@ 0x3f
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	e02a      	b.n	8004ce6 <HAL_DMA_Abort+0x49a>
 8004c90:	40020010 	.word	0x40020010
 8004c94:	40020028 	.word	0x40020028
 8004c98:	40020040 	.word	0x40020040
 8004c9c:	40020058 	.word	0x40020058
 8004ca0:	40020070 	.word	0x40020070
 8004ca4:	40020088 	.word	0x40020088
 8004ca8:	400200a0 	.word	0x400200a0
 8004cac:	400200b8 	.word	0x400200b8
 8004cb0:	40020410 	.word	0x40020410
 8004cb4:	40020428 	.word	0x40020428
 8004cb8:	40020440 	.word	0x40020440
 8004cbc:	40020458 	.word	0x40020458
 8004cc0:	40020470 	.word	0x40020470
 8004cc4:	40020488 	.word	0x40020488
 8004cc8:	400204a0 	.word	0x400204a0
 8004ccc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2201      	movs	r2, #1
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a4f      	ldr	r2, [pc, #316]	@ (8004e28 <HAL_DMA_Abort+0x5dc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d072      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a4d      	ldr	r2, [pc, #308]	@ (8004e2c <HAL_DMA_Abort+0x5e0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d06d      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a4c      	ldr	r2, [pc, #304]	@ (8004e30 <HAL_DMA_Abort+0x5e4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d068      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a4a      	ldr	r2, [pc, #296]	@ (8004e34 <HAL_DMA_Abort+0x5e8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d063      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a49      	ldr	r2, [pc, #292]	@ (8004e38 <HAL_DMA_Abort+0x5ec>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d05e      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a47      	ldr	r2, [pc, #284]	@ (8004e3c <HAL_DMA_Abort+0x5f0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d059      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a46      	ldr	r2, [pc, #280]	@ (8004e40 <HAL_DMA_Abort+0x5f4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d054      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a44      	ldr	r2, [pc, #272]	@ (8004e44 <HAL_DMA_Abort+0x5f8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d04f      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a43      	ldr	r2, [pc, #268]	@ (8004e48 <HAL_DMA_Abort+0x5fc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d04a      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a41      	ldr	r2, [pc, #260]	@ (8004e4c <HAL_DMA_Abort+0x600>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d045      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a40      	ldr	r2, [pc, #256]	@ (8004e50 <HAL_DMA_Abort+0x604>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d040      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a3e      	ldr	r2, [pc, #248]	@ (8004e54 <HAL_DMA_Abort+0x608>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d03b      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3d      	ldr	r2, [pc, #244]	@ (8004e58 <HAL_DMA_Abort+0x60c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d036      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8004e5c <HAL_DMA_Abort+0x610>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d031      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3a      	ldr	r2, [pc, #232]	@ (8004e60 <HAL_DMA_Abort+0x614>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d02c      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a38      	ldr	r2, [pc, #224]	@ (8004e64 <HAL_DMA_Abort+0x618>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d027      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a37      	ldr	r2, [pc, #220]	@ (8004e68 <HAL_DMA_Abort+0x61c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a35      	ldr	r2, [pc, #212]	@ (8004e6c <HAL_DMA_Abort+0x620>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01d      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a34      	ldr	r2, [pc, #208]	@ (8004e70 <HAL_DMA_Abort+0x624>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d018      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a32      	ldr	r2, [pc, #200]	@ (8004e74 <HAL_DMA_Abort+0x628>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a31      	ldr	r2, [pc, #196]	@ (8004e78 <HAL_DMA_Abort+0x62c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8004e7c <HAL_DMA_Abort+0x630>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004e80 <HAL_DMA_Abort+0x634>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_DMA_Abort+0x58a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e84 <HAL_DMA_Abort+0x638>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_DMA_Abort+0x58e>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <HAL_DMA_Abort+0x590>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004de8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40020010 	.word	0x40020010
 8004e2c:	40020028 	.word	0x40020028
 8004e30:	40020040 	.word	0x40020040
 8004e34:	40020058 	.word	0x40020058
 8004e38:	40020070 	.word	0x40020070
 8004e3c:	40020088 	.word	0x40020088
 8004e40:	400200a0 	.word	0x400200a0
 8004e44:	400200b8 	.word	0x400200b8
 8004e48:	40020410 	.word	0x40020410
 8004e4c:	40020428 	.word	0x40020428
 8004e50:	40020440 	.word	0x40020440
 8004e54:	40020458 	.word	0x40020458
 8004e58:	40020470 	.word	0x40020470
 8004e5c:	40020488 	.word	0x40020488
 8004e60:	400204a0 	.word	0x400204a0
 8004e64:	400204b8 	.word	0x400204b8
 8004e68:	58025408 	.word	0x58025408
 8004e6c:	5802541c 	.word	0x5802541c
 8004e70:	58025430 	.word	0x58025430
 8004e74:	58025444 	.word	0x58025444
 8004e78:	58025458 	.word	0x58025458
 8004e7c:	5802546c 	.word	0x5802546c
 8004e80:	58025480 	.word	0x58025480
 8004e84:	58025494 	.word	0x58025494

08004e88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e237      	b.n	800530a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2280      	movs	r2, #128	@ 0x80
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e22c      	b.n	800530a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a5c      	ldr	r2, [pc, #368]	@ (8005028 <HAL_DMA_Abort_IT+0x1a0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d04a      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800502c <HAL_DMA_Abort_IT+0x1a4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d045      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a59      	ldr	r2, [pc, #356]	@ (8005030 <HAL_DMA_Abort_IT+0x1a8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d040      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a58      	ldr	r2, [pc, #352]	@ (8005034 <HAL_DMA_Abort_IT+0x1ac>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d03b      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a56      	ldr	r2, [pc, #344]	@ (8005038 <HAL_DMA_Abort_IT+0x1b0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d036      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a55      	ldr	r2, [pc, #340]	@ (800503c <HAL_DMA_Abort_IT+0x1b4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d031      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a53      	ldr	r2, [pc, #332]	@ (8005040 <HAL_DMA_Abort_IT+0x1b8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d02c      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a52      	ldr	r2, [pc, #328]	@ (8005044 <HAL_DMA_Abort_IT+0x1bc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d027      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a50      	ldr	r2, [pc, #320]	@ (8005048 <HAL_DMA_Abort_IT+0x1c0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d022      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a4f      	ldr	r2, [pc, #316]	@ (800504c <HAL_DMA_Abort_IT+0x1c4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d01d      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a4d      	ldr	r2, [pc, #308]	@ (8005050 <HAL_DMA_Abort_IT+0x1c8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d018      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a4c      	ldr	r2, [pc, #304]	@ (8005054 <HAL_DMA_Abort_IT+0x1cc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d013      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8005058 <HAL_DMA_Abort_IT+0x1d0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00e      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a49      	ldr	r2, [pc, #292]	@ (800505c <HAL_DMA_Abort_IT+0x1d4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d009      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a47      	ldr	r2, [pc, #284]	@ (8005060 <HAL_DMA_Abort_IT+0x1d8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xc8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a46      	ldr	r2, [pc, #280]	@ (8005064 <HAL_DMA_Abort_IT+0x1dc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_DMA_Abort_IT+0xcc>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_DMA_Abort_IT+0xce>
 8004f54:	2300      	movs	r3, #0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8086 	beq.w	8005068 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2f      	ldr	r2, [pc, #188]	@ (8005028 <HAL_DMA_Abort_IT+0x1a0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d04a      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2e      	ldr	r2, [pc, #184]	@ (800502c <HAL_DMA_Abort_IT+0x1a4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d045      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005030 <HAL_DMA_Abort_IT+0x1a8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d040      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2b      	ldr	r2, [pc, #172]	@ (8005034 <HAL_DMA_Abort_IT+0x1ac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d03b      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a29      	ldr	r2, [pc, #164]	@ (8005038 <HAL_DMA_Abort_IT+0x1b0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d036      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a28      	ldr	r2, [pc, #160]	@ (800503c <HAL_DMA_Abort_IT+0x1b4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d031      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a26      	ldr	r2, [pc, #152]	@ (8005040 <HAL_DMA_Abort_IT+0x1b8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02c      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a25      	ldr	r2, [pc, #148]	@ (8005044 <HAL_DMA_Abort_IT+0x1bc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d027      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <HAL_DMA_Abort_IT+0x1c0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a22      	ldr	r2, [pc, #136]	@ (800504c <HAL_DMA_Abort_IT+0x1c4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	@ (8005050 <HAL_DMA_Abort_IT+0x1c8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005054 <HAL_DMA_Abort_IT+0x1cc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8005058 <HAL_DMA_Abort_IT+0x1d0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	@ (800505c <HAL_DMA_Abort_IT+0x1d4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8005060 <HAL_DMA_Abort_IT+0x1d8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_DMA_Abort_IT+0x17c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a19      	ldr	r2, [pc, #100]	@ (8005064 <HAL_DMA_Abort_IT+0x1dc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d108      	bne.n	8005016 <HAL_DMA_Abort_IT+0x18e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e178      	b.n	8005308 <HAL_DMA_Abort_IT+0x480>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e16f      	b.n	8005308 <HAL_DMA_Abort_IT+0x480>
 8005028:	40020010 	.word	0x40020010
 800502c:	40020028 	.word	0x40020028
 8005030:	40020040 	.word	0x40020040
 8005034:	40020058 	.word	0x40020058
 8005038:	40020070 	.word	0x40020070
 800503c:	40020088 	.word	0x40020088
 8005040:	400200a0 	.word	0x400200a0
 8005044:	400200b8 	.word	0x400200b8
 8005048:	40020410 	.word	0x40020410
 800504c:	40020428 	.word	0x40020428
 8005050:	40020440 	.word	0x40020440
 8005054:	40020458 	.word	0x40020458
 8005058:	40020470 	.word	0x40020470
 800505c:	40020488 	.word	0x40020488
 8005060:	400204a0 	.word	0x400204a0
 8005064:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 020e 	bic.w	r2, r2, #14
 8005076:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a6c      	ldr	r2, [pc, #432]	@ (8005230 <HAL_DMA_Abort_IT+0x3a8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d04a      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6b      	ldr	r2, [pc, #428]	@ (8005234 <HAL_DMA_Abort_IT+0x3ac>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d045      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a69      	ldr	r2, [pc, #420]	@ (8005238 <HAL_DMA_Abort_IT+0x3b0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d040      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a68      	ldr	r2, [pc, #416]	@ (800523c <HAL_DMA_Abort_IT+0x3b4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d03b      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a66      	ldr	r2, [pc, #408]	@ (8005240 <HAL_DMA_Abort_IT+0x3b8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d036      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a65      	ldr	r2, [pc, #404]	@ (8005244 <HAL_DMA_Abort_IT+0x3bc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d031      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a63      	ldr	r2, [pc, #396]	@ (8005248 <HAL_DMA_Abort_IT+0x3c0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d02c      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a62      	ldr	r2, [pc, #392]	@ (800524c <HAL_DMA_Abort_IT+0x3c4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d027      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a60      	ldr	r2, [pc, #384]	@ (8005250 <HAL_DMA_Abort_IT+0x3c8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005254 <HAL_DMA_Abort_IT+0x3cc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005258 <HAL_DMA_Abort_IT+0x3d0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a5c      	ldr	r2, [pc, #368]	@ (800525c <HAL_DMA_Abort_IT+0x3d4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005260 <HAL_DMA_Abort_IT+0x3d8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a59      	ldr	r2, [pc, #356]	@ (8005264 <HAL_DMA_Abort_IT+0x3dc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a57      	ldr	r2, [pc, #348]	@ (8005268 <HAL_DMA_Abort_IT+0x3e0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_Abort_IT+0x290>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a56      	ldr	r2, [pc, #344]	@ (800526c <HAL_DMA_Abort_IT+0x3e4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d108      	bne.n	800512a <HAL_DMA_Abort_IT+0x2a2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e007      	b.n	800513a <HAL_DMA_Abort_IT+0x2b2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a3c      	ldr	r2, [pc, #240]	@ (8005230 <HAL_DMA_Abort_IT+0x3a8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d072      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3a      	ldr	r2, [pc, #232]	@ (8005234 <HAL_DMA_Abort_IT+0x3ac>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d06d      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a39      	ldr	r2, [pc, #228]	@ (8005238 <HAL_DMA_Abort_IT+0x3b0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d068      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a37      	ldr	r2, [pc, #220]	@ (800523c <HAL_DMA_Abort_IT+0x3b4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d063      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a36      	ldr	r2, [pc, #216]	@ (8005240 <HAL_DMA_Abort_IT+0x3b8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d05e      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a34      	ldr	r2, [pc, #208]	@ (8005244 <HAL_DMA_Abort_IT+0x3bc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d059      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a33      	ldr	r2, [pc, #204]	@ (8005248 <HAL_DMA_Abort_IT+0x3c0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d054      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a31      	ldr	r2, [pc, #196]	@ (800524c <HAL_DMA_Abort_IT+0x3c4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d04f      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a30      	ldr	r2, [pc, #192]	@ (8005250 <HAL_DMA_Abort_IT+0x3c8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d04a      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2e      	ldr	r2, [pc, #184]	@ (8005254 <HAL_DMA_Abort_IT+0x3cc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d045      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005258 <HAL_DMA_Abort_IT+0x3d0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d040      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2b      	ldr	r2, [pc, #172]	@ (800525c <HAL_DMA_Abort_IT+0x3d4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d03b      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005260 <HAL_DMA_Abort_IT+0x3d8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d036      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a28      	ldr	r2, [pc, #160]	@ (8005264 <HAL_DMA_Abort_IT+0x3dc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d031      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a27      	ldr	r2, [pc, #156]	@ (8005268 <HAL_DMA_Abort_IT+0x3e0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d02c      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a25      	ldr	r2, [pc, #148]	@ (800526c <HAL_DMA_Abort_IT+0x3e4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d027      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a24      	ldr	r2, [pc, #144]	@ (8005270 <HAL_DMA_Abort_IT+0x3e8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d022      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <HAL_DMA_Abort_IT+0x3ec>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01d      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <HAL_DMA_Abort_IT+0x3f0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d018      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1f      	ldr	r2, [pc, #124]	@ (800527c <HAL_DMA_Abort_IT+0x3f4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <HAL_DMA_Abort_IT+0x3f8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1c      	ldr	r2, [pc, #112]	@ (8005284 <HAL_DMA_Abort_IT+0x3fc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1b      	ldr	r2, [pc, #108]	@ (8005288 <HAL_DMA_Abort_IT+0x400>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_DMA_Abort_IT+0x3a2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	@ (800528c <HAL_DMA_Abort_IT+0x404>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d132      	bne.n	8005290 <HAL_DMA_Abort_IT+0x408>
 800522a:	2301      	movs	r3, #1
 800522c:	e031      	b.n	8005292 <HAL_DMA_Abort_IT+0x40a>
 800522e:	bf00      	nop
 8005230:	40020010 	.word	0x40020010
 8005234:	40020028 	.word	0x40020028
 8005238:	40020040 	.word	0x40020040
 800523c:	40020058 	.word	0x40020058
 8005240:	40020070 	.word	0x40020070
 8005244:	40020088 	.word	0x40020088
 8005248:	400200a0 	.word	0x400200a0
 800524c:	400200b8 	.word	0x400200b8
 8005250:	40020410 	.word	0x40020410
 8005254:	40020428 	.word	0x40020428
 8005258:	40020440 	.word	0x40020440
 800525c:	40020458 	.word	0x40020458
 8005260:	40020470 	.word	0x40020470
 8005264:	40020488 	.word	0x40020488
 8005268:	400204a0 	.word	0x400204a0
 800526c:	400204b8 	.word	0x400204b8
 8005270:	58025408 	.word	0x58025408
 8005274:	5802541c 	.word	0x5802541c
 8005278:	58025430 	.word	0x58025430
 800527c:	58025444 	.word	0x58025444
 8005280:	58025458 	.word	0x58025458
 8005284:	5802546c 	.word	0x5802546c
 8005288:	58025480 	.word	0x58025480
 800528c:	58025494 	.word	0x58025494
 8005290:	2300      	movs	r3, #0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d028      	beq.n	80052e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	2201      	movs	r2, #1
 80052b6:	409a      	lsls	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop

08005314 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	@ 0x28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005320:	4b67      	ldr	r3, [pc, #412]	@ (80054c0 <HAL_DMA_IRQHandler+0x1ac>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a67      	ldr	r2, [pc, #412]	@ (80054c4 <HAL_DMA_IRQHandler+0x1b0>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	0a9b      	lsrs	r3, r3, #10
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005332:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005338:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a5f      	ldr	r2, [pc, #380]	@ (80054c8 <HAL_DMA_IRQHandler+0x1b4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d04a      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a5d      	ldr	r2, [pc, #372]	@ (80054cc <HAL_DMA_IRQHandler+0x1b8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d045      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a5c      	ldr	r2, [pc, #368]	@ (80054d0 <HAL_DMA_IRQHandler+0x1bc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d040      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a5a      	ldr	r2, [pc, #360]	@ (80054d4 <HAL_DMA_IRQHandler+0x1c0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d03b      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a59      	ldr	r2, [pc, #356]	@ (80054d8 <HAL_DMA_IRQHandler+0x1c4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d036      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a57      	ldr	r2, [pc, #348]	@ (80054dc <HAL_DMA_IRQHandler+0x1c8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d031      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a56      	ldr	r2, [pc, #344]	@ (80054e0 <HAL_DMA_IRQHandler+0x1cc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d02c      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a54      	ldr	r2, [pc, #336]	@ (80054e4 <HAL_DMA_IRQHandler+0x1d0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d027      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a53      	ldr	r2, [pc, #332]	@ (80054e8 <HAL_DMA_IRQHandler+0x1d4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d022      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a51      	ldr	r2, [pc, #324]	@ (80054ec <HAL_DMA_IRQHandler+0x1d8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d01d      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a50      	ldr	r2, [pc, #320]	@ (80054f0 <HAL_DMA_IRQHandler+0x1dc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a4e      	ldr	r2, [pc, #312]	@ (80054f4 <HAL_DMA_IRQHandler+0x1e0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a4d      	ldr	r2, [pc, #308]	@ (80054f8 <HAL_DMA_IRQHandler+0x1e4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a4b      	ldr	r2, [pc, #300]	@ (80054fc <HAL_DMA_IRQHandler+0x1e8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005500 <HAL_DMA_IRQHandler+0x1ec>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xd2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a48      	ldr	r2, [pc, #288]	@ (8005504 <HAL_DMA_IRQHandler+0x1f0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_DMA_IRQHandler+0xd6>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <HAL_DMA_IRQHandler+0xd8>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 842b 	beq.w	8005c48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2208      	movs	r2, #8
 80053fc:	409a      	lsls	r2, r3
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80a2 	beq.w	800554c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2e      	ldr	r2, [pc, #184]	@ (80054c8 <HAL_DMA_IRQHandler+0x1b4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d04a      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2d      	ldr	r2, [pc, #180]	@ (80054cc <HAL_DMA_IRQHandler+0x1b8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d045      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2b      	ldr	r2, [pc, #172]	@ (80054d0 <HAL_DMA_IRQHandler+0x1bc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d040      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2a      	ldr	r2, [pc, #168]	@ (80054d4 <HAL_DMA_IRQHandler+0x1c0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d03b      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a28      	ldr	r2, [pc, #160]	@ (80054d8 <HAL_DMA_IRQHandler+0x1c4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d036      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a27      	ldr	r2, [pc, #156]	@ (80054dc <HAL_DMA_IRQHandler+0x1c8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d031      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a25      	ldr	r2, [pc, #148]	@ (80054e0 <HAL_DMA_IRQHandler+0x1cc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d02c      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a24      	ldr	r2, [pc, #144]	@ (80054e4 <HAL_DMA_IRQHandler+0x1d0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d027      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a22      	ldr	r2, [pc, #136]	@ (80054e8 <HAL_DMA_IRQHandler+0x1d4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d022      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a21      	ldr	r2, [pc, #132]	@ (80054ec <HAL_DMA_IRQHandler+0x1d8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d01d      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1f      	ldr	r2, [pc, #124]	@ (80054f0 <HAL_DMA_IRQHandler+0x1dc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d018      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1e      	ldr	r2, [pc, #120]	@ (80054f4 <HAL_DMA_IRQHandler+0x1e0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <HAL_DMA_IRQHandler+0x1e4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00e      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1b      	ldr	r2, [pc, #108]	@ (80054fc <HAL_DMA_IRQHandler+0x1e8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d009      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a19      	ldr	r2, [pc, #100]	@ (8005500 <HAL_DMA_IRQHandler+0x1ec>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x194>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a18      	ldr	r2, [pc, #96]	@ (8005504 <HAL_DMA_IRQHandler+0x1f0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d12f      	bne.n	8005508 <HAL_DMA_IRQHandler+0x1f4>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bf14      	ite	ne
 80054b6:	2301      	movne	r3, #1
 80054b8:	2300      	moveq	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e02e      	b.n	800551c <HAL_DMA_IRQHandler+0x208>
 80054be:	bf00      	nop
 80054c0:	24000054 	.word	0x24000054
 80054c4:	1b4e81b5 	.word	0x1b4e81b5
 80054c8:	40020010 	.word	0x40020010
 80054cc:	40020028 	.word	0x40020028
 80054d0:	40020040 	.word	0x40020040
 80054d4:	40020058 	.word	0x40020058
 80054d8:	40020070 	.word	0x40020070
 80054dc:	40020088 	.word	0x40020088
 80054e0:	400200a0 	.word	0x400200a0
 80054e4:	400200b8 	.word	0x400200b8
 80054e8:	40020410 	.word	0x40020410
 80054ec:	40020428 	.word	0x40020428
 80054f0:	40020440 	.word	0x40020440
 80054f4:	40020458 	.word	0x40020458
 80054f8:	40020470 	.word	0x40020470
 80054fc:	40020488 	.word	0x40020488
 8005500:	400204a0 	.word	0x400204a0
 8005504:	400204b8 	.word	0x400204b8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf14      	ite	ne
 8005516:	2301      	movne	r3, #1
 8005518:	2300      	moveq	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0204 	bic.w	r2, r2, #4
 800552e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	2208      	movs	r2, #8
 800553a:	409a      	lsls	r2, r3
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005544:	f043 0201 	orr.w	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	fa22 f303 	lsr.w	r3, r2, r3
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d06e      	beq.n	8005640 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a69      	ldr	r2, [pc, #420]	@ (800570c <HAL_DMA_IRQHandler+0x3f8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d04a      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a67      	ldr	r2, [pc, #412]	@ (8005710 <HAL_DMA_IRQHandler+0x3fc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d045      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a66      	ldr	r2, [pc, #408]	@ (8005714 <HAL_DMA_IRQHandler+0x400>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d040      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a64      	ldr	r2, [pc, #400]	@ (8005718 <HAL_DMA_IRQHandler+0x404>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d03b      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a63      	ldr	r2, [pc, #396]	@ (800571c <HAL_DMA_IRQHandler+0x408>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d036      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a61      	ldr	r2, [pc, #388]	@ (8005720 <HAL_DMA_IRQHandler+0x40c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d031      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a60      	ldr	r2, [pc, #384]	@ (8005724 <HAL_DMA_IRQHandler+0x410>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d02c      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005728 <HAL_DMA_IRQHandler+0x414>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d027      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5d      	ldr	r2, [pc, #372]	@ (800572c <HAL_DMA_IRQHandler+0x418>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d022      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5b      	ldr	r2, [pc, #364]	@ (8005730 <HAL_DMA_IRQHandler+0x41c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01d      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5a      	ldr	r2, [pc, #360]	@ (8005734 <HAL_DMA_IRQHandler+0x420>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d018      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a58      	ldr	r2, [pc, #352]	@ (8005738 <HAL_DMA_IRQHandler+0x424>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a57      	ldr	r2, [pc, #348]	@ (800573c <HAL_DMA_IRQHandler+0x428>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a55      	ldr	r2, [pc, #340]	@ (8005740 <HAL_DMA_IRQHandler+0x42c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a54      	ldr	r2, [pc, #336]	@ (8005744 <HAL_DMA_IRQHandler+0x430>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2ee>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a52      	ldr	r2, [pc, #328]	@ (8005748 <HAL_DMA_IRQHandler+0x434>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10a      	bne.n	8005618 <HAL_DMA_IRQHandler+0x304>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560c:	2b00      	cmp	r3, #0
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e003      	b.n	8005620 <HAL_DMA_IRQHandler+0x30c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	2201      	movs	r2, #1
 800562e:	409a      	lsls	r2, r3
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005638:	f043 0202 	orr.w	r2, r3, #2
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2204      	movs	r2, #4
 800564a:	409a      	lsls	r2, r3
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 808f 	beq.w	8005774 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2c      	ldr	r2, [pc, #176]	@ (800570c <HAL_DMA_IRQHandler+0x3f8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d04a      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2a      	ldr	r2, [pc, #168]	@ (8005710 <HAL_DMA_IRQHandler+0x3fc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d045      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a29      	ldr	r2, [pc, #164]	@ (8005714 <HAL_DMA_IRQHandler+0x400>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d040      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a27      	ldr	r2, [pc, #156]	@ (8005718 <HAL_DMA_IRQHandler+0x404>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d03b      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a26      	ldr	r2, [pc, #152]	@ (800571c <HAL_DMA_IRQHandler+0x408>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d036      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a24      	ldr	r2, [pc, #144]	@ (8005720 <HAL_DMA_IRQHandler+0x40c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d031      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a23      	ldr	r2, [pc, #140]	@ (8005724 <HAL_DMA_IRQHandler+0x410>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d02c      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a21      	ldr	r2, [pc, #132]	@ (8005728 <HAL_DMA_IRQHandler+0x414>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d027      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a20      	ldr	r2, [pc, #128]	@ (800572c <HAL_DMA_IRQHandler+0x418>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005730 <HAL_DMA_IRQHandler+0x41c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01d      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1d      	ldr	r2, [pc, #116]	@ (8005734 <HAL_DMA_IRQHandler+0x420>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005738 <HAL_DMA_IRQHandler+0x424>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1a      	ldr	r2, [pc, #104]	@ (800573c <HAL_DMA_IRQHandler+0x428>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a18      	ldr	r2, [pc, #96]	@ (8005740 <HAL_DMA_IRQHandler+0x42c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a17      	ldr	r2, [pc, #92]	@ (8005744 <HAL_DMA_IRQHandler+0x430>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x3e2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a15      	ldr	r2, [pc, #84]	@ (8005748 <HAL_DMA_IRQHandler+0x434>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d12a      	bne.n	800574c <HAL_DMA_IRQHandler+0x438>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e023      	b.n	8005754 <HAL_DMA_IRQHandler+0x440>
 800570c:	40020010 	.word	0x40020010
 8005710:	40020028 	.word	0x40020028
 8005714:	40020040 	.word	0x40020040
 8005718:	40020058 	.word	0x40020058
 800571c:	40020070 	.word	0x40020070
 8005720:	40020088 	.word	0x40020088
 8005724:	400200a0 	.word	0x400200a0
 8005728:	400200b8 	.word	0x400200b8
 800572c:	40020410 	.word	0x40020410
 8005730:	40020428 	.word	0x40020428
 8005734:	40020440 	.word	0x40020440
 8005738:	40020458 	.word	0x40020458
 800573c:	40020470 	.word	0x40020470
 8005740:	40020488 	.word	0x40020488
 8005744:	400204a0 	.word	0x400204a0
 8005748:	400204b8 	.word	0x400204b8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00d      	beq.n	8005774 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2204      	movs	r2, #4
 8005762:	409a      	lsls	r2, r3
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576c:	f043 0204 	orr.w	r2, r3, #4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2210      	movs	r2, #16
 800577e:	409a      	lsls	r2, r3
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80a6 	beq.w	80058d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a85      	ldr	r2, [pc, #532]	@ (80059a4 <HAL_DMA_IRQHandler+0x690>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04a      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a83      	ldr	r2, [pc, #524]	@ (80059a8 <HAL_DMA_IRQHandler+0x694>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d045      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a82      	ldr	r2, [pc, #520]	@ (80059ac <HAL_DMA_IRQHandler+0x698>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a80      	ldr	r2, [pc, #512]	@ (80059b0 <HAL_DMA_IRQHandler+0x69c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d03b      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a7f      	ldr	r2, [pc, #508]	@ (80059b4 <HAL_DMA_IRQHandler+0x6a0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d036      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a7d      	ldr	r2, [pc, #500]	@ (80059b8 <HAL_DMA_IRQHandler+0x6a4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d031      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a7c      	ldr	r2, [pc, #496]	@ (80059bc <HAL_DMA_IRQHandler+0x6a8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02c      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a7a      	ldr	r2, [pc, #488]	@ (80059c0 <HAL_DMA_IRQHandler+0x6ac>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d027      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a79      	ldr	r2, [pc, #484]	@ (80059c4 <HAL_DMA_IRQHandler+0x6b0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a77      	ldr	r2, [pc, #476]	@ (80059c8 <HAL_DMA_IRQHandler+0x6b4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a76      	ldr	r2, [pc, #472]	@ (80059cc <HAL_DMA_IRQHandler+0x6b8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a74      	ldr	r2, [pc, #464]	@ (80059d0 <HAL_DMA_IRQHandler+0x6bc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a73      	ldr	r2, [pc, #460]	@ (80059d4 <HAL_DMA_IRQHandler+0x6c0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a71      	ldr	r2, [pc, #452]	@ (80059d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a70      	ldr	r2, [pc, #448]	@ (80059dc <HAL_DMA_IRQHandler+0x6c8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_DMA_IRQHandler+0x516>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a6e      	ldr	r2, [pc, #440]	@ (80059e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d10a      	bne.n	8005840 <HAL_DMA_IRQHandler+0x52c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e009      	b.n	8005854 <HAL_DMA_IRQHandler+0x540>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d03e      	beq.n	80058d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2210      	movs	r2, #16
 8005862:	409a      	lsls	r2, r3
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d018      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d108      	bne.n	8005896 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d024      	beq.n	80058d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	4798      	blx	r3
 8005894:	e01f      	b.n	80058d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01b      	beq.n	80058d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	4798      	blx	r3
 80058a6:	e016      	b.n	80058d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d107      	bne.n	80058c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0208 	bic.w	r2, r2, #8
 80058c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	2220      	movs	r2, #32
 80058e0:	409a      	lsls	r2, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8110 	beq.w	8005b0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <HAL_DMA_IRQHandler+0x690>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d04a      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <HAL_DMA_IRQHandler+0x694>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d045      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a29      	ldr	r2, [pc, #164]	@ (80059ac <HAL_DMA_IRQHandler+0x698>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d040      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a28      	ldr	r2, [pc, #160]	@ (80059b0 <HAL_DMA_IRQHandler+0x69c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d03b      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a26      	ldr	r2, [pc, #152]	@ (80059b4 <HAL_DMA_IRQHandler+0x6a0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d036      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <HAL_DMA_IRQHandler+0x6a4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d031      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a23      	ldr	r2, [pc, #140]	@ (80059bc <HAL_DMA_IRQHandler+0x6a8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02c      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a22      	ldr	r2, [pc, #136]	@ (80059c0 <HAL_DMA_IRQHandler+0x6ac>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d027      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a20      	ldr	r2, [pc, #128]	@ (80059c4 <HAL_DMA_IRQHandler+0x6b0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1f      	ldr	r2, [pc, #124]	@ (80059c8 <HAL_DMA_IRQHandler+0x6b4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d01d      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <HAL_DMA_IRQHandler+0x6b8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1c      	ldr	r2, [pc, #112]	@ (80059d0 <HAL_DMA_IRQHandler+0x6bc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1a      	ldr	r2, [pc, #104]	@ (80059d4 <HAL_DMA_IRQHandler+0x6c0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a17      	ldr	r2, [pc, #92]	@ (80059dc <HAL_DMA_IRQHandler+0x6c8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_DMA_IRQHandler+0x678>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a16      	ldr	r2, [pc, #88]	@ (80059e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d12b      	bne.n	80059e4 <HAL_DMA_IRQHandler+0x6d0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf14      	ite	ne
 800599a:	2301      	movne	r3, #1
 800599c:	2300      	moveq	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	e02a      	b.n	80059f8 <HAL_DMA_IRQHandler+0x6e4>
 80059a2:	bf00      	nop
 80059a4:	40020010 	.word	0x40020010
 80059a8:	40020028 	.word	0x40020028
 80059ac:	40020040 	.word	0x40020040
 80059b0:	40020058 	.word	0x40020058
 80059b4:	40020070 	.word	0x40020070
 80059b8:	40020088 	.word	0x40020088
 80059bc:	400200a0 	.word	0x400200a0
 80059c0:	400200b8 	.word	0x400200b8
 80059c4:	40020410 	.word	0x40020410
 80059c8:	40020428 	.word	0x40020428
 80059cc:	40020440 	.word	0x40020440
 80059d0:	40020458 	.word	0x40020458
 80059d4:	40020470 	.word	0x40020470
 80059d8:	40020488 	.word	0x40020488
 80059dc:	400204a0 	.word	0x400204a0
 80059e0:	400204b8 	.word	0x400204b8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf14      	ite	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	2300      	moveq	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8087 	beq.w	8005b0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2220      	movs	r2, #32
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d139      	bne.n	8005a8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0216 	bic.w	r2, r2, #22
 8005a28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <HAL_DMA_IRQHandler+0x736>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0208 	bic.w	r2, r2, #8
 8005a58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	223f      	movs	r2, #63	@ 0x3f
 8005a64:	409a      	lsls	r2, r3
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8382 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4798      	blx	r3
          }
          return;
 8005a8c:	e37c      	b.n	8006188 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d018      	beq.n	8005ace <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d108      	bne.n	8005abc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d02c      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
 8005aba:	e027      	b.n	8005b0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d023      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4798      	blx	r3
 8005acc:	e01e      	b.n	8005b0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10f      	bne.n	8005afc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0210 	bic.w	r2, r2, #16
 8005aea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 833e 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8088 	beq.w	8005c34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2204      	movs	r2, #4
 8005b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a89      	ldr	r2, [pc, #548]	@ (8005d58 <HAL_DMA_IRQHandler+0xa44>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04a      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a88      	ldr	r2, [pc, #544]	@ (8005d5c <HAL_DMA_IRQHandler+0xa48>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d045      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a86      	ldr	r2, [pc, #536]	@ (8005d60 <HAL_DMA_IRQHandler+0xa4c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d040      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a85      	ldr	r2, [pc, #532]	@ (8005d64 <HAL_DMA_IRQHandler+0xa50>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d03b      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a83      	ldr	r2, [pc, #524]	@ (8005d68 <HAL_DMA_IRQHandler+0xa54>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d036      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a82      	ldr	r2, [pc, #520]	@ (8005d6c <HAL_DMA_IRQHandler+0xa58>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d031      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a80      	ldr	r2, [pc, #512]	@ (8005d70 <HAL_DMA_IRQHandler+0xa5c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d02c      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a7f      	ldr	r2, [pc, #508]	@ (8005d74 <HAL_DMA_IRQHandler+0xa60>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d027      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a7d      	ldr	r2, [pc, #500]	@ (8005d78 <HAL_DMA_IRQHandler+0xa64>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d022      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d7c <HAL_DMA_IRQHandler+0xa68>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d01d      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a7a      	ldr	r2, [pc, #488]	@ (8005d80 <HAL_DMA_IRQHandler+0xa6c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a79      	ldr	r2, [pc, #484]	@ (8005d84 <HAL_DMA_IRQHandler+0xa70>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a77      	ldr	r2, [pc, #476]	@ (8005d88 <HAL_DMA_IRQHandler+0xa74>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a76      	ldr	r2, [pc, #472]	@ (8005d8c <HAL_DMA_IRQHandler+0xa78>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a74      	ldr	r2, [pc, #464]	@ (8005d90 <HAL_DMA_IRQHandler+0xa7c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x8b8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a73      	ldr	r2, [pc, #460]	@ (8005d94 <HAL_DMA_IRQHandler+0xa80>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d108      	bne.n	8005bde <HAL_DMA_IRQHandler+0x8ca>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e007      	b.n	8005bee <HAL_DMA_IRQHandler+0x8da>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d307      	bcc.n	8005c0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f2      	bne.n	8005bee <HAL_DMA_IRQHandler+0x8da>
 8005c08:	e000      	b.n	8005c0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c0a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d004      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005c22:	e003      	b.n	8005c2c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 82aa 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
 8005c46:	e2a4      	b.n	8006192 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a52      	ldr	r2, [pc, #328]	@ (8005d98 <HAL_DMA_IRQHandler+0xa84>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d04a      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a51      	ldr	r2, [pc, #324]	@ (8005d9c <HAL_DMA_IRQHandler+0xa88>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d045      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a4f      	ldr	r2, [pc, #316]	@ (8005da0 <HAL_DMA_IRQHandler+0xa8c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d040      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a4e      	ldr	r2, [pc, #312]	@ (8005da4 <HAL_DMA_IRQHandler+0xa90>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d03b      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a4c      	ldr	r2, [pc, #304]	@ (8005da8 <HAL_DMA_IRQHandler+0xa94>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d036      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a4b      	ldr	r2, [pc, #300]	@ (8005dac <HAL_DMA_IRQHandler+0xa98>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d031      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a49      	ldr	r2, [pc, #292]	@ (8005db0 <HAL_DMA_IRQHandler+0xa9c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d02c      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a48      	ldr	r2, [pc, #288]	@ (8005db4 <HAL_DMA_IRQHandler+0xaa0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d027      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a46      	ldr	r2, [pc, #280]	@ (8005db8 <HAL_DMA_IRQHandler+0xaa4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d022      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a45      	ldr	r2, [pc, #276]	@ (8005dbc <HAL_DMA_IRQHandler+0xaa8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d01d      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a43      	ldr	r2, [pc, #268]	@ (8005dc0 <HAL_DMA_IRQHandler+0xaac>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d018      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a42      	ldr	r2, [pc, #264]	@ (8005dc4 <HAL_DMA_IRQHandler+0xab0>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a40      	ldr	r2, [pc, #256]	@ (8005dc8 <HAL_DMA_IRQHandler+0xab4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00e      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a3f      	ldr	r2, [pc, #252]	@ (8005dcc <HAL_DMA_IRQHandler+0xab8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d009      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd0 <HAL_DMA_IRQHandler+0xabc>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0x9d4>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8005dd4 <HAL_DMA_IRQHandler+0xac0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d101      	bne.n	8005cec <HAL_DMA_IRQHandler+0x9d8>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <HAL_DMA_IRQHandler+0x9da>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 824f 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d00:	f003 031f 	and.w	r3, r3, #31
 8005d04:	2204      	movs	r2, #4
 8005d06:	409a      	lsls	r2, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80dd 	beq.w	8005ecc <HAL_DMA_IRQHandler+0xbb8>
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80d7 	beq.w	8005ecc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	2204      	movs	r2, #4
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d059      	beq.n	8005dec <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d14a      	bne.n	8005dd8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8220 	beq.w	800618c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d54:	e21a      	b.n	800618c <HAL_DMA_IRQHandler+0xe78>
 8005d56:	bf00      	nop
 8005d58:	40020010 	.word	0x40020010
 8005d5c:	40020028 	.word	0x40020028
 8005d60:	40020040 	.word	0x40020040
 8005d64:	40020058 	.word	0x40020058
 8005d68:	40020070 	.word	0x40020070
 8005d6c:	40020088 	.word	0x40020088
 8005d70:	400200a0 	.word	0x400200a0
 8005d74:	400200b8 	.word	0x400200b8
 8005d78:	40020410 	.word	0x40020410
 8005d7c:	40020428 	.word	0x40020428
 8005d80:	40020440 	.word	0x40020440
 8005d84:	40020458 	.word	0x40020458
 8005d88:	40020470 	.word	0x40020470
 8005d8c:	40020488 	.word	0x40020488
 8005d90:	400204a0 	.word	0x400204a0
 8005d94:	400204b8 	.word	0x400204b8
 8005d98:	48022c08 	.word	0x48022c08
 8005d9c:	48022c1c 	.word	0x48022c1c
 8005da0:	48022c30 	.word	0x48022c30
 8005da4:	48022c44 	.word	0x48022c44
 8005da8:	48022c58 	.word	0x48022c58
 8005dac:	48022c6c 	.word	0x48022c6c
 8005db0:	48022c80 	.word	0x48022c80
 8005db4:	48022c94 	.word	0x48022c94
 8005db8:	58025408 	.word	0x58025408
 8005dbc:	5802541c 	.word	0x5802541c
 8005dc0:	58025430 	.word	0x58025430
 8005dc4:	58025444 	.word	0x58025444
 8005dc8:	58025458 	.word	0x58025458
 8005dcc:	5802546c 	.word	0x5802546c
 8005dd0:	58025480 	.word	0x58025480
 8005dd4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 81d5 	beq.w	800618c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dea:	e1cf      	b.n	800618c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d160      	bne.n	8005eb8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a7f      	ldr	r2, [pc, #508]	@ (8005ff8 <HAL_DMA_IRQHandler+0xce4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7d      	ldr	r2, [pc, #500]	@ (8005ffc <HAL_DMA_IRQHandler+0xce8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a7c      	ldr	r2, [pc, #496]	@ (8006000 <HAL_DMA_IRQHandler+0xcec>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a7a      	ldr	r2, [pc, #488]	@ (8006004 <HAL_DMA_IRQHandler+0xcf0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a79      	ldr	r2, [pc, #484]	@ (8006008 <HAL_DMA_IRQHandler+0xcf4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a77      	ldr	r2, [pc, #476]	@ (800600c <HAL_DMA_IRQHandler+0xcf8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a76      	ldr	r2, [pc, #472]	@ (8006010 <HAL_DMA_IRQHandler+0xcfc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a74      	ldr	r2, [pc, #464]	@ (8006014 <HAL_DMA_IRQHandler+0xd00>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a73      	ldr	r2, [pc, #460]	@ (8006018 <HAL_DMA_IRQHandler+0xd04>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a71      	ldr	r2, [pc, #452]	@ (800601c <HAL_DMA_IRQHandler+0xd08>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a70      	ldr	r2, [pc, #448]	@ (8006020 <HAL_DMA_IRQHandler+0xd0c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <HAL_DMA_IRQHandler+0xd10>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a6d      	ldr	r2, [pc, #436]	@ (8006028 <HAL_DMA_IRQHandler+0xd14>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a6b      	ldr	r2, [pc, #428]	@ (800602c <HAL_DMA_IRQHandler+0xd18>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a6a      	ldr	r2, [pc, #424]	@ (8006030 <HAL_DMA_IRQHandler+0xd1c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb82>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a68      	ldr	r2, [pc, #416]	@ (8006034 <HAL_DMA_IRQHandler+0xd20>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0xb94>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0208 	bic.w	r2, r2, #8
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e007      	b.n	8005eb8 <HAL_DMA_IRQHandler+0xba4>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8165 	beq.w	800618c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eca:	e15f      	b.n	800618c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80c5 	beq.w	800606c <HAL_DMA_IRQHandler+0xd58>
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80bf 	beq.w	800606c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	409a      	lsls	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d018      	beq.n	8005f3a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 813a 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f24:	e134      	b.n	8006190 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8130 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f38:	e12a      	b.n	8006190 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f040 8089 	bne.w	8006058 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff8 <HAL_DMA_IRQHandler+0xce4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d04a      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a29      	ldr	r2, [pc, #164]	@ (8005ffc <HAL_DMA_IRQHandler+0xce8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d045      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a28      	ldr	r2, [pc, #160]	@ (8006000 <HAL_DMA_IRQHandler+0xcec>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d040      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a26      	ldr	r2, [pc, #152]	@ (8006004 <HAL_DMA_IRQHandler+0xcf0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d03b      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a25      	ldr	r2, [pc, #148]	@ (8006008 <HAL_DMA_IRQHandler+0xcf4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d036      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a23      	ldr	r2, [pc, #140]	@ (800600c <HAL_DMA_IRQHandler+0xcf8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d031      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a22      	ldr	r2, [pc, #136]	@ (8006010 <HAL_DMA_IRQHandler+0xcfc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d02c      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a20      	ldr	r2, [pc, #128]	@ (8006014 <HAL_DMA_IRQHandler+0xd00>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d027      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006018 <HAL_DMA_IRQHandler+0xd04>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d022      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800601c <HAL_DMA_IRQHandler+0xd08>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01d      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1c      	ldr	r2, [pc, #112]	@ (8006020 <HAL_DMA_IRQHandler+0xd0c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d018      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006024 <HAL_DMA_IRQHandler+0xd10>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a19      	ldr	r2, [pc, #100]	@ (8006028 <HAL_DMA_IRQHandler+0xd14>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00e      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a17      	ldr	r2, [pc, #92]	@ (800602c <HAL_DMA_IRQHandler+0xd18>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a16      	ldr	r2, [pc, #88]	@ (8006030 <HAL_DMA_IRQHandler+0xd1c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d004      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xcd2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a14      	ldr	r2, [pc, #80]	@ (8006034 <HAL_DMA_IRQHandler+0xd20>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d128      	bne.n	8006038 <HAL_DMA_IRQHandler+0xd24>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0214 	bic.w	r2, r2, #20
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	e027      	b.n	8006048 <HAL_DMA_IRQHandler+0xd34>
 8005ff8:	40020010 	.word	0x40020010
 8005ffc:	40020028 	.word	0x40020028
 8006000:	40020040 	.word	0x40020040
 8006004:	40020058 	.word	0x40020058
 8006008:	40020070 	.word	0x40020070
 800600c:	40020088 	.word	0x40020088
 8006010:	400200a0 	.word	0x400200a0
 8006014:	400200b8 	.word	0x400200b8
 8006018:	40020410 	.word	0x40020410
 800601c:	40020428 	.word	0x40020428
 8006020:	40020440 	.word	0x40020440
 8006024:	40020458 	.word	0x40020458
 8006028:	40020470 	.word	0x40020470
 800602c:	40020488 	.word	0x40020488
 8006030:	400204a0 	.word	0x400204a0
 8006034:	400204b8 	.word	0x400204b8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 020a 	bic.w	r2, r2, #10
 8006046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8097 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800606a:	e091      	b.n	8006190 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2208      	movs	r2, #8
 8006076:	409a      	lsls	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8088 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe7e>
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8082 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a41      	ldr	r2, [pc, #260]	@ (8006198 <HAL_DMA_IRQHandler+0xe84>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a3f      	ldr	r2, [pc, #252]	@ (800619c <HAL_DMA_IRQHandler+0xe88>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a3e      	ldr	r2, [pc, #248]	@ (80061a0 <HAL_DMA_IRQHandler+0xe8c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a3c      	ldr	r2, [pc, #240]	@ (80061a4 <HAL_DMA_IRQHandler+0xe90>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3b      	ldr	r2, [pc, #236]	@ (80061a8 <HAL_DMA_IRQHandler+0xe94>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a39      	ldr	r2, [pc, #228]	@ (80061ac <HAL_DMA_IRQHandler+0xe98>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a38      	ldr	r2, [pc, #224]	@ (80061b0 <HAL_DMA_IRQHandler+0xe9c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a36      	ldr	r2, [pc, #216]	@ (80061b4 <HAL_DMA_IRQHandler+0xea0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a35      	ldr	r2, [pc, #212]	@ (80061b8 <HAL_DMA_IRQHandler+0xea4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a33      	ldr	r2, [pc, #204]	@ (80061bc <HAL_DMA_IRQHandler+0xea8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a32      	ldr	r2, [pc, #200]	@ (80061c0 <HAL_DMA_IRQHandler+0xeac>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a30      	ldr	r2, [pc, #192]	@ (80061c4 <HAL_DMA_IRQHandler+0xeb0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2f      	ldr	r2, [pc, #188]	@ (80061c8 <HAL_DMA_IRQHandler+0xeb4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a2d      	ldr	r2, [pc, #180]	@ (80061cc <HAL_DMA_IRQHandler+0xeb8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a2c      	ldr	r2, [pc, #176]	@ (80061d0 <HAL_DMA_IRQHandler+0xebc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_IRQHandler+0xe1a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <HAL_DMA_IRQHandler+0xec0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <HAL_DMA_IRQHandler+0xe2c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 021c 	bic.w	r2, r2, #28
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e007      	b.n	8006150 <HAL_DMA_IRQHandler+0xe3c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 020e 	bic.w	r2, r2, #14
 800614e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2201      	movs	r2, #1
 800615a:	409a      	lsls	r2, r3
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
 8006186:	e004      	b.n	8006192 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006188:	bf00      	nop
 800618a:	e002      	b.n	8006192 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618c:	bf00      	nop
 800618e:	e000      	b.n	8006192 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006190:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006192:	3728      	adds	r7, #40	@ 0x28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40020010 	.word	0x40020010
 800619c:	40020028 	.word	0x40020028
 80061a0:	40020040 	.word	0x40020040
 80061a4:	40020058 	.word	0x40020058
 80061a8:	40020070 	.word	0x40020070
 80061ac:	40020088 	.word	0x40020088
 80061b0:	400200a0 	.word	0x400200a0
 80061b4:	400200b8 	.word	0x400200b8
 80061b8:	40020410 	.word	0x40020410
 80061bc:	40020428 	.word	0x40020428
 80061c0:	40020440 	.word	0x40020440
 80061c4:	40020458 	.word	0x40020458
 80061c8:	40020470 	.word	0x40020470
 80061cc:	40020488 	.word	0x40020488
 80061d0:	400204a0 	.word	0x400204a0
 80061d4:	400204b8 	.word	0x400204b8

080061d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a7f      	ldr	r2, [pc, #508]	@ (80063f4 <DMA_SetConfig+0x21c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d072      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a7d      	ldr	r2, [pc, #500]	@ (80063f8 <DMA_SetConfig+0x220>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d06d      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a7c      	ldr	r2, [pc, #496]	@ (80063fc <DMA_SetConfig+0x224>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d068      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a7a      	ldr	r2, [pc, #488]	@ (8006400 <DMA_SetConfig+0x228>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d063      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a79      	ldr	r2, [pc, #484]	@ (8006404 <DMA_SetConfig+0x22c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d05e      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a77      	ldr	r2, [pc, #476]	@ (8006408 <DMA_SetConfig+0x230>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d059      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a76      	ldr	r2, [pc, #472]	@ (800640c <DMA_SetConfig+0x234>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d054      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a74      	ldr	r2, [pc, #464]	@ (8006410 <DMA_SetConfig+0x238>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d04f      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a73      	ldr	r2, [pc, #460]	@ (8006414 <DMA_SetConfig+0x23c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d04a      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a71      	ldr	r2, [pc, #452]	@ (8006418 <DMA_SetConfig+0x240>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d045      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a70      	ldr	r2, [pc, #448]	@ (800641c <DMA_SetConfig+0x244>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d040      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a6e      	ldr	r2, [pc, #440]	@ (8006420 <DMA_SetConfig+0x248>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d03b      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a6d      	ldr	r2, [pc, #436]	@ (8006424 <DMA_SetConfig+0x24c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d036      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a6b      	ldr	r2, [pc, #428]	@ (8006428 <DMA_SetConfig+0x250>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6a      	ldr	r2, [pc, #424]	@ (800642c <DMA_SetConfig+0x254>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d02c      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a68      	ldr	r2, [pc, #416]	@ (8006430 <DMA_SetConfig+0x258>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d027      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a67      	ldr	r2, [pc, #412]	@ (8006434 <DMA_SetConfig+0x25c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a65      	ldr	r2, [pc, #404]	@ (8006438 <DMA_SetConfig+0x260>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a64      	ldr	r2, [pc, #400]	@ (800643c <DMA_SetConfig+0x264>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a62      	ldr	r2, [pc, #392]	@ (8006440 <DMA_SetConfig+0x268>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a61      	ldr	r2, [pc, #388]	@ (8006444 <DMA_SetConfig+0x26c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5f      	ldr	r2, [pc, #380]	@ (8006448 <DMA_SetConfig+0x270>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a5e      	ldr	r2, [pc, #376]	@ (800644c <DMA_SetConfig+0x274>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5c      	ldr	r2, [pc, #368]	@ (8006450 <DMA_SetConfig+0x278>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <DMA_SetConfig+0x10e>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <DMA_SetConfig+0x110>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80062f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006306:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a39      	ldr	r2, [pc, #228]	@ (80063f4 <DMA_SetConfig+0x21c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d04a      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a38      	ldr	r2, [pc, #224]	@ (80063f8 <DMA_SetConfig+0x220>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d045      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a36      	ldr	r2, [pc, #216]	@ (80063fc <DMA_SetConfig+0x224>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d040      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a35      	ldr	r2, [pc, #212]	@ (8006400 <DMA_SetConfig+0x228>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d03b      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a33      	ldr	r2, [pc, #204]	@ (8006404 <DMA_SetConfig+0x22c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d036      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a32      	ldr	r2, [pc, #200]	@ (8006408 <DMA_SetConfig+0x230>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d031      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a30      	ldr	r2, [pc, #192]	@ (800640c <DMA_SetConfig+0x234>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d02c      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a2f      	ldr	r2, [pc, #188]	@ (8006410 <DMA_SetConfig+0x238>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d027      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2d      	ldr	r2, [pc, #180]	@ (8006414 <DMA_SetConfig+0x23c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2c      	ldr	r2, [pc, #176]	@ (8006418 <DMA_SetConfig+0x240>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d01d      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a2a      	ldr	r2, [pc, #168]	@ (800641c <DMA_SetConfig+0x244>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a29      	ldr	r2, [pc, #164]	@ (8006420 <DMA_SetConfig+0x248>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a27      	ldr	r2, [pc, #156]	@ (8006424 <DMA_SetConfig+0x24c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a26      	ldr	r2, [pc, #152]	@ (8006428 <DMA_SetConfig+0x250>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a24      	ldr	r2, [pc, #144]	@ (800642c <DMA_SetConfig+0x254>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a23      	ldr	r2, [pc, #140]	@ (8006430 <DMA_SetConfig+0x258>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d101      	bne.n	80063ac <DMA_SetConfig+0x1d4>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <DMA_SetConfig+0x1d6>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d059      	beq.n	8006466 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	223f      	movs	r2, #63	@ 0x3f
 80063bc:	409a      	lsls	r2, r3
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80063d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b40      	cmp	r3, #64	@ 0x40
 80063e0:	d138      	bne.n	8006454 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063f2:	e0ae      	b.n	8006552 <DMA_SetConfig+0x37a>
 80063f4:	40020010 	.word	0x40020010
 80063f8:	40020028 	.word	0x40020028
 80063fc:	40020040 	.word	0x40020040
 8006400:	40020058 	.word	0x40020058
 8006404:	40020070 	.word	0x40020070
 8006408:	40020088 	.word	0x40020088
 800640c:	400200a0 	.word	0x400200a0
 8006410:	400200b8 	.word	0x400200b8
 8006414:	40020410 	.word	0x40020410
 8006418:	40020428 	.word	0x40020428
 800641c:	40020440 	.word	0x40020440
 8006420:	40020458 	.word	0x40020458
 8006424:	40020470 	.word	0x40020470
 8006428:	40020488 	.word	0x40020488
 800642c:	400204a0 	.word	0x400204a0
 8006430:	400204b8 	.word	0x400204b8
 8006434:	58025408 	.word	0x58025408
 8006438:	5802541c 	.word	0x5802541c
 800643c:	58025430 	.word	0x58025430
 8006440:	58025444 	.word	0x58025444
 8006444:	58025458 	.word	0x58025458
 8006448:	5802546c 	.word	0x5802546c
 800644c:	58025480 	.word	0x58025480
 8006450:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	60da      	str	r2, [r3, #12]
}
 8006464:	e075      	b.n	8006552 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a3d      	ldr	r2, [pc, #244]	@ (8006560 <DMA_SetConfig+0x388>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d04a      	beq.n	8006506 <DMA_SetConfig+0x32e>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a3b      	ldr	r2, [pc, #236]	@ (8006564 <DMA_SetConfig+0x38c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d045      	beq.n	8006506 <DMA_SetConfig+0x32e>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a3a      	ldr	r2, [pc, #232]	@ (8006568 <DMA_SetConfig+0x390>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d040      	beq.n	8006506 <DMA_SetConfig+0x32e>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a38      	ldr	r2, [pc, #224]	@ (800656c <DMA_SetConfig+0x394>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d03b      	beq.n	8006506 <DMA_SetConfig+0x32e>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a37      	ldr	r2, [pc, #220]	@ (8006570 <DMA_SetConfig+0x398>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d036      	beq.n	8006506 <DMA_SetConfig+0x32e>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a35      	ldr	r2, [pc, #212]	@ (8006574 <DMA_SetConfig+0x39c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d031      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a34      	ldr	r2, [pc, #208]	@ (8006578 <DMA_SetConfig+0x3a0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d02c      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a32      	ldr	r2, [pc, #200]	@ (800657c <DMA_SetConfig+0x3a4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d027      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a31      	ldr	r2, [pc, #196]	@ (8006580 <DMA_SetConfig+0x3a8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d022      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006584 <DMA_SetConfig+0x3ac>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01d      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006588 <DMA_SetConfig+0x3b0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d018      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2c      	ldr	r2, [pc, #176]	@ (800658c <DMA_SetConfig+0x3b4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006590 <DMA_SetConfig+0x3b8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a29      	ldr	r2, [pc, #164]	@ (8006594 <DMA_SetConfig+0x3bc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a28      	ldr	r2, [pc, #160]	@ (8006598 <DMA_SetConfig+0x3c0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <DMA_SetConfig+0x32e>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a26      	ldr	r2, [pc, #152]	@ (800659c <DMA_SetConfig+0x3c4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <DMA_SetConfig+0x332>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <DMA_SetConfig+0x334>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2201      	movs	r2, #1
 800651a:	409a      	lsls	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b40      	cmp	r3, #64	@ 0x40
 800652e:	d108      	bne.n	8006542 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	60da      	str	r2, [r3, #12]
}
 8006540:	e007      	b.n	8006552 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	48022c08 	.word	0x48022c08
 8006564:	48022c1c 	.word	0x48022c1c
 8006568:	48022c30 	.word	0x48022c30
 800656c:	48022c44 	.word	0x48022c44
 8006570:	48022c58 	.word	0x48022c58
 8006574:	48022c6c 	.word	0x48022c6c
 8006578:	48022c80 	.word	0x48022c80
 800657c:	48022c94 	.word	0x48022c94
 8006580:	58025408 	.word	0x58025408
 8006584:	5802541c 	.word	0x5802541c
 8006588:	58025430 	.word	0x58025430
 800658c:	58025444 	.word	0x58025444
 8006590:	58025458 	.word	0x58025458
 8006594:	5802546c 	.word	0x5802546c
 8006598:	58025480 	.word	0x58025480
 800659c:	58025494 	.word	0x58025494

080065a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a42      	ldr	r2, [pc, #264]	@ (80066b8 <DMA_CalcBaseAndBitshift+0x118>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d04a      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a41      	ldr	r2, [pc, #260]	@ (80066bc <DMA_CalcBaseAndBitshift+0x11c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d045      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a3f      	ldr	r2, [pc, #252]	@ (80066c0 <DMA_CalcBaseAndBitshift+0x120>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d040      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a3e      	ldr	r2, [pc, #248]	@ (80066c4 <DMA_CalcBaseAndBitshift+0x124>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d03b      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a3c      	ldr	r2, [pc, #240]	@ (80066c8 <DMA_CalcBaseAndBitshift+0x128>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d036      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a3b      	ldr	r2, [pc, #236]	@ (80066cc <DMA_CalcBaseAndBitshift+0x12c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d031      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a39      	ldr	r2, [pc, #228]	@ (80066d0 <DMA_CalcBaseAndBitshift+0x130>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d02c      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a38      	ldr	r2, [pc, #224]	@ (80066d4 <DMA_CalcBaseAndBitshift+0x134>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d027      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a36      	ldr	r2, [pc, #216]	@ (80066d8 <DMA_CalcBaseAndBitshift+0x138>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d022      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a35      	ldr	r2, [pc, #212]	@ (80066dc <DMA_CalcBaseAndBitshift+0x13c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d01d      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a33      	ldr	r2, [pc, #204]	@ (80066e0 <DMA_CalcBaseAndBitshift+0x140>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d018      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a32      	ldr	r2, [pc, #200]	@ (80066e4 <DMA_CalcBaseAndBitshift+0x144>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a30      	ldr	r2, [pc, #192]	@ (80066e8 <DMA_CalcBaseAndBitshift+0x148>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00e      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2f      	ldr	r2, [pc, #188]	@ (80066ec <DMA_CalcBaseAndBitshift+0x14c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a2d      	ldr	r2, [pc, #180]	@ (80066f0 <DMA_CalcBaseAndBitshift+0x150>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <DMA_CalcBaseAndBitshift+0xa8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a2c      	ldr	r2, [pc, #176]	@ (80066f4 <DMA_CalcBaseAndBitshift+0x154>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d101      	bne.n	800664c <DMA_CalcBaseAndBitshift+0xac>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <DMA_CalcBaseAndBitshift+0xae>
 800664c:	2300      	movs	r3, #0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d024      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	3b10      	subs	r3, #16
 800665a:	4a27      	ldr	r2, [pc, #156]	@ (80066f8 <DMA_CalcBaseAndBitshift+0x158>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	4a24      	ldr	r2, [pc, #144]	@ (80066fc <DMA_CalcBaseAndBitshift+0x15c>)
 800666c:	5cd3      	ldrb	r3, [r2, r3]
 800666e:	461a      	mov	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d908      	bls.n	800668c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	4b1f      	ldr	r3, [pc, #124]	@ (8006700 <DMA_CalcBaseAndBitshift+0x160>)
 8006682:	4013      	ands	r3, r2
 8006684:	1d1a      	adds	r2, r3, #4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	659a      	str	r2, [r3, #88]	@ 0x58
 800668a:	e00d      	b.n	80066a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	4b1b      	ldr	r3, [pc, #108]	@ (8006700 <DMA_CalcBaseAndBitshift+0x160>)
 8006694:	4013      	ands	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6593      	str	r3, [r2, #88]	@ 0x58
 800669a:	e005      	b.n	80066a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	40020010 	.word	0x40020010
 80066bc:	40020028 	.word	0x40020028
 80066c0:	40020040 	.word	0x40020040
 80066c4:	40020058 	.word	0x40020058
 80066c8:	40020070 	.word	0x40020070
 80066cc:	40020088 	.word	0x40020088
 80066d0:	400200a0 	.word	0x400200a0
 80066d4:	400200b8 	.word	0x400200b8
 80066d8:	40020410 	.word	0x40020410
 80066dc:	40020428 	.word	0x40020428
 80066e0:	40020440 	.word	0x40020440
 80066e4:	40020458 	.word	0x40020458
 80066e8:	40020470 	.word	0x40020470
 80066ec:	40020488 	.word	0x40020488
 80066f0:	400204a0 	.word	0x400204a0
 80066f4:	400204b8 	.word	0x400204b8
 80066f8:	aaaaaaab 	.word	0xaaaaaaab
 80066fc:	0800efa4 	.word	0x0800efa4
 8006700:	fffffc00 	.word	0xfffffc00

08006704 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d120      	bne.n	800675a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	2b03      	cmp	r3, #3
 800671e:	d858      	bhi.n	80067d2 <DMA_CheckFifoParam+0xce>
 8006720:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <DMA_CheckFifoParam+0x24>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	08006739 	.word	0x08006739
 800672c:	0800674b 	.word	0x0800674b
 8006730:	08006739 	.word	0x08006739
 8006734:	080067d3 	.word	0x080067d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d048      	beq.n	80067d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006748:	e045      	b.n	80067d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006752:	d142      	bne.n	80067da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006758:	e03f      	b.n	80067da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006762:	d123      	bne.n	80067ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	2b03      	cmp	r3, #3
 800676a:	d838      	bhi.n	80067de <DMA_CheckFifoParam+0xda>
 800676c:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <DMA_CheckFifoParam+0x70>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	08006785 	.word	0x08006785
 8006778:	0800678b 	.word	0x0800678b
 800677c:	08006785 	.word	0x08006785
 8006780:	0800679d 	.word	0x0800679d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
        break;
 8006788:	e030      	b.n	80067ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d025      	beq.n	80067e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800679a:	e022      	b.n	80067e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067a4:	d11f      	bne.n	80067e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067aa:	e01c      	b.n	80067e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d902      	bls.n	80067ba <DMA_CheckFifoParam+0xb6>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d003      	beq.n	80067c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067b8:	e018      	b.n	80067ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
        break;
 80067be:	e015      	b.n	80067ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00e      	beq.n	80067ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	73fb      	strb	r3, [r7, #15]
    break;
 80067d0:	e00b      	b.n	80067ea <DMA_CheckFifoParam+0xe6>
        break;
 80067d2:	bf00      	nop
 80067d4:	e00a      	b.n	80067ec <DMA_CheckFifoParam+0xe8>
        break;
 80067d6:	bf00      	nop
 80067d8:	e008      	b.n	80067ec <DMA_CheckFifoParam+0xe8>
        break;
 80067da:	bf00      	nop
 80067dc:	e006      	b.n	80067ec <DMA_CheckFifoParam+0xe8>
        break;
 80067de:	bf00      	nop
 80067e0:	e004      	b.n	80067ec <DMA_CheckFifoParam+0xe8>
        break;
 80067e2:	bf00      	nop
 80067e4:	e002      	b.n	80067ec <DMA_CheckFifoParam+0xe8>
        break;
 80067e6:	bf00      	nop
 80067e8:	e000      	b.n	80067ec <DMA_CheckFifoParam+0xe8>
    break;
 80067ea:	bf00      	nop
    }
  }

  return status;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a38      	ldr	r2, [pc, #224]	@ (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d022      	beq.n	800685a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a36      	ldr	r2, [pc, #216]	@ (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01d      	beq.n	800685a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a35      	ldr	r2, [pc, #212]	@ (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d018      	beq.n	800685a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a33      	ldr	r2, [pc, #204]	@ (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a32      	ldr	r2, [pc, #200]	@ (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00e      	beq.n	800685a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a30      	ldr	r2, [pc, #192]	@ (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d009      	beq.n	800685a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a2f      	ldr	r2, [pc, #188]	@ (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a2d      	ldr	r2, [pc, #180]	@ (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d101      	bne.n	800685e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800685e:	2300      	movs	r3, #0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01a      	beq.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	3b08      	subs	r3, #8
 800686c:	4a28      	ldr	r2, [pc, #160]	@ (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800686e:	fba2 2303 	umull	r2, r3, r2, r3
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4b26      	ldr	r3, [pc, #152]	@ (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a24      	ldr	r2, [pc, #144]	@ (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006888:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	2201      	movs	r2, #1
 8006892:	409a      	lsls	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006898:	e024      	b.n	80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	3b10      	subs	r3, #16
 80068a2:	4a1e      	ldr	r2, [pc, #120]	@ (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d806      	bhi.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d902      	bls.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3308      	adds	r3, #8
 80068c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4b18      	ldr	r3, [pc, #96]	@ (8006928 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a16      	ldr	r2, [pc, #88]	@ (800692c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	2201      	movs	r2, #1
 80068de:	409a      	lsls	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	58025408 	.word	0x58025408
 80068f4:	5802541c 	.word	0x5802541c
 80068f8:	58025430 	.word	0x58025430
 80068fc:	58025444 	.word	0x58025444
 8006900:	58025458 	.word	0x58025458
 8006904:	5802546c 	.word	0x5802546c
 8006908:	58025480 	.word	0x58025480
 800690c:	58025494 	.word	0x58025494
 8006910:	cccccccd 	.word	0xcccccccd
 8006914:	16009600 	.word	0x16009600
 8006918:	58025880 	.word	0x58025880
 800691c:	aaaaaaab 	.word	0xaaaaaaab
 8006920:	400204b8 	.word	0x400204b8
 8006924:	4002040f 	.word	0x4002040f
 8006928:	10008200 	.word	0x10008200
 800692c:	40020880 	.word	0x40020880

08006930 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d04a      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d847      	bhi.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a25      	ldr	r2, [pc, #148]	@ (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d022      	beq.n	800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a24      	ldr	r2, [pc, #144]	@ (80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d01d      	beq.n	800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a22      	ldr	r2, [pc, #136]	@ (80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d018      	beq.n	800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a21      	ldr	r2, [pc, #132]	@ (80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d013      	beq.n	800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1f      	ldr	r2, [pc, #124]	@ (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00e      	beq.n	800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1e      	ldr	r2, [pc, #120]	@ (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d009      	beq.n	800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1c      	ldr	r2, [pc, #112]	@ (8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d004      	beq.n	800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1b      	ldr	r2, [pc, #108]	@ (8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d101      	bne.n	80069a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4b17      	ldr	r3, [pc, #92]	@ (8006a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a15      	ldr	r2, [pc, #84]	@ (8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80069ba:	e009      	b.n	80069d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4b14      	ldr	r3, [pc, #80]	@ (8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	461a      	mov	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a11      	ldr	r2, [pc, #68]	@ (8006a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069ce:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	2201      	movs	r2, #1
 80069d6:	409a      	lsls	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80069dc:	bf00      	nop
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	58025408 	.word	0x58025408
 80069ec:	5802541c 	.word	0x5802541c
 80069f0:	58025430 	.word	0x58025430
 80069f4:	58025444 	.word	0x58025444
 80069f8:	58025458 	.word	0x58025458
 80069fc:	5802546c 	.word	0x5802546c
 8006a00:	58025480 	.word	0x58025480
 8006a04:	58025494 	.word	0x58025494
 8006a08:	1600963f 	.word	0x1600963f
 8006a0c:	58025940 	.word	0x58025940
 8006a10:	1000823f 	.word	0x1000823f
 8006a14:	40020940 	.word	0x40020940

08006a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b089      	sub	sp, #36	@ 0x24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a26:	4b89      	ldr	r3, [pc, #548]	@ (8006c4c <HAL_GPIO_Init+0x234>)
 8006a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a2a:	e194      	b.n	8006d56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	2101      	movs	r1, #1
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	4013      	ands	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8186 	beq.w	8006d50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d005      	beq.n	8006a5c <HAL_GPIO_Init+0x44>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d130      	bne.n	8006abe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	2203      	movs	r2, #3
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4013      	ands	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a92:	2201      	movs	r2, #1
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	091b      	lsrs	r3, r3, #4
 8006aa8:	f003 0201 	and.w	r2, r3, #1
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d017      	beq.n	8006afa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	43db      	mvns	r3, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d123      	bne.n	8006b4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	08da      	lsrs	r2, r3, #3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3208      	adds	r2, #8
 8006b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	220f      	movs	r2, #15
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	4013      	ands	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	08da      	lsrs	r2, r3, #3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3208      	adds	r2, #8
 8006b48:	69b9      	ldr	r1, [r7, #24]
 8006b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	2203      	movs	r2, #3
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	43db      	mvns	r3, r3
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	4013      	ands	r3, r2
 8006b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 0203 	and.w	r2, r3, #3
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 80e0 	beq.w	8006d50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b90:	4b2f      	ldr	r3, [pc, #188]	@ (8006c50 <HAL_GPIO_Init+0x238>)
 8006b92:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b96:	4a2e      	ldr	r2, [pc, #184]	@ (8006c50 <HAL_GPIO_Init+0x238>)
 8006b98:	f043 0302 	orr.w	r3, r3, #2
 8006b9c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c50 <HAL_GPIO_Init+0x238>)
 8006ba2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bae:	4a29      	ldr	r2, [pc, #164]	@ (8006c54 <HAL_GPIO_Init+0x23c>)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	089b      	lsrs	r3, r3, #2
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	220f      	movs	r2, #15
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a20      	ldr	r2, [pc, #128]	@ (8006c58 <HAL_GPIO_Init+0x240>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d052      	beq.n	8006c80 <HAL_GPIO_Init+0x268>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c5c <HAL_GPIO_Init+0x244>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d031      	beq.n	8006c46 <HAL_GPIO_Init+0x22e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c60 <HAL_GPIO_Init+0x248>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d02b      	beq.n	8006c42 <HAL_GPIO_Init+0x22a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a1d      	ldr	r2, [pc, #116]	@ (8006c64 <HAL_GPIO_Init+0x24c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d025      	beq.n	8006c3e <HAL_GPIO_Init+0x226>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c68 <HAL_GPIO_Init+0x250>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d01f      	beq.n	8006c3a <HAL_GPIO_Init+0x222>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c6c <HAL_GPIO_Init+0x254>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d019      	beq.n	8006c36 <HAL_GPIO_Init+0x21e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1a      	ldr	r2, [pc, #104]	@ (8006c70 <HAL_GPIO_Init+0x258>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <HAL_GPIO_Init+0x21a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	@ (8006c74 <HAL_GPIO_Init+0x25c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00d      	beq.n	8006c2e <HAL_GPIO_Init+0x216>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a18      	ldr	r2, [pc, #96]	@ (8006c78 <HAL_GPIO_Init+0x260>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <HAL_GPIO_Init+0x212>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a17      	ldr	r2, [pc, #92]	@ (8006c7c <HAL_GPIO_Init+0x264>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <HAL_GPIO_Init+0x20e>
 8006c22:	2309      	movs	r3, #9
 8006c24:	e02d      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c26:	230a      	movs	r3, #10
 8006c28:	e02b      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	e029      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c2e:	2307      	movs	r3, #7
 8006c30:	e027      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c32:	2306      	movs	r3, #6
 8006c34:	e025      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c36:	2305      	movs	r3, #5
 8006c38:	e023      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c3a:	2304      	movs	r3, #4
 8006c3c:	e021      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e01f      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e01d      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e01b      	b.n	8006c82 <HAL_GPIO_Init+0x26a>
 8006c4a:	bf00      	nop
 8006c4c:	58000080 	.word	0x58000080
 8006c50:	58024400 	.word	0x58024400
 8006c54:	58000400 	.word	0x58000400
 8006c58:	58020000 	.word	0x58020000
 8006c5c:	58020400 	.word	0x58020400
 8006c60:	58020800 	.word	0x58020800
 8006c64:	58020c00 	.word	0x58020c00
 8006c68:	58021000 	.word	0x58021000
 8006c6c:	58021400 	.word	0x58021400
 8006c70:	58021800 	.word	0x58021800
 8006c74:	58021c00 	.word	0x58021c00
 8006c78:	58022000 	.word	0x58022000
 8006c7c:	58022400 	.word	0x58022400
 8006c80:	2300      	movs	r3, #0
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	f002 0203 	and.w	r2, r2, #3
 8006c88:	0092      	lsls	r2, r2, #2
 8006c8a:	4093      	lsls	r3, r2
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c92:	4938      	ldr	r1, [pc, #224]	@ (8006d74 <HAL_GPIO_Init+0x35c>)
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	089b      	lsrs	r3, r3, #2
 8006c98:	3302      	adds	r3, #2
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	43db      	mvns	r3, r3
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006cf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	43db      	mvns	r3, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4013      	ands	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	3301      	adds	r3, #1
 8006d54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f47f ae63 	bne.w	8006a2c <HAL_GPIO_Init+0x14>
  }
}
 8006d66:	bf00      	nop
 8006d68:	bf00      	nop
 8006d6a:	3724      	adds	r7, #36	@ 0x24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	58000400 	.word	0x58000400

08006d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
 8006d84:	4613      	mov	r3, r2
 8006d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d88:	787b      	ldrb	r3, [r7, #1]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d8e:	887a      	ldrh	r2, [r7, #2]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d94:	e003      	b.n	8006d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d96:	887b      	ldrh	r3, [r7, #2]
 8006d98:	041a      	lsls	r2, r3, #16
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	619a      	str	r2, [r3, #24]
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006db0:	4b05      	ldr	r3, [pc, #20]	@ (8006dc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a04      	ldr	r2, [pc, #16]	@ (8006dc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dba:	6013      	str	r3, [r2, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	58024800 	.word	0x58024800

08006dcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006dd4:	4b29      	ldr	r3, [pc, #164]	@ (8006e7c <HAL_PWREx_ConfigSupply+0xb0>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	2b06      	cmp	r3, #6
 8006dde:	d00a      	beq.n	8006df6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006de0:	4b26      	ldr	r3, [pc, #152]	@ (8006e7c <HAL_PWREx_ConfigSupply+0xb0>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d001      	beq.n	8006df2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e040      	b.n	8006e74 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e03e      	b.n	8006e74 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006df6:	4b21      	ldr	r3, [pc, #132]	@ (8006e7c <HAL_PWREx_ConfigSupply+0xb0>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006dfe:	491f      	ldr	r1, [pc, #124]	@ (8006e7c <HAL_PWREx_ConfigSupply+0xb0>)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e06:	f7fb f8af 	bl	8001f68 <HAL_GetTick>
 8006e0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e0c:	e009      	b.n	8006e22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e0e:	f7fb f8ab 	bl	8001f68 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e1c:	d901      	bls.n	8006e22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e028      	b.n	8006e74 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e22:	4b16      	ldr	r3, [pc, #88]	@ (8006e7c <HAL_PWREx_ConfigSupply+0xb0>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e2e:	d1ee      	bne.n	8006e0e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b1e      	cmp	r3, #30
 8006e34:	d008      	beq.n	8006e48 <HAL_PWREx_ConfigSupply+0x7c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e3a:	d005      	beq.n	8006e48 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b1d      	cmp	r3, #29
 8006e40:	d002      	beq.n	8006e48 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b2d      	cmp	r3, #45	@ 0x2d
 8006e46:	d114      	bne.n	8006e72 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006e48:	f7fb f88e 	bl	8001f68 <HAL_GetTick>
 8006e4c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e4e:	e009      	b.n	8006e64 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e50:	f7fb f88a 	bl	8001f68 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e5e:	d901      	bls.n	8006e64 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e007      	b.n	8006e74 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e64:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <HAL_PWREx_ConfigSupply+0xb0>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e70:	d1ee      	bne.n	8006e50 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	58024800 	.word	0x58024800

08006e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08c      	sub	sp, #48	@ 0x30
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d102      	bne.n	8006e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f000 bc1f 	b.w	80076d2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80b3 	beq.w	8007008 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ea2:	4b95      	ldr	r3, [pc, #596]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eac:	4b92      	ldr	r3, [pc, #584]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb4:	2b10      	cmp	r3, #16
 8006eb6:	d007      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x48>
 8006eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eba:	2b18      	cmp	r3, #24
 8006ebc:	d112      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x64>
 8006ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d10d      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec8:	4b8b      	ldr	r3, [pc, #556]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8098 	beq.w	8007006 <HAL_RCC_OscConfig+0x186>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 8093 	bne.w	8007006 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e3f6      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eec:	d106      	bne.n	8006efc <HAL_RCC_OscConfig+0x7c>
 8006eee:	4b82      	ldr	r3, [pc, #520]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a81      	ldr	r2, [pc, #516]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e058      	b.n	8006fae <HAL_RCC_OscConfig+0x12e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d112      	bne.n	8006f2a <HAL_RCC_OscConfig+0xaa>
 8006f04:	4b7c      	ldr	r3, [pc, #496]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a7b      	ldr	r2, [pc, #492]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	4b79      	ldr	r3, [pc, #484]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a78      	ldr	r2, [pc, #480]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f16:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	4b76      	ldr	r3, [pc, #472]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a75      	ldr	r2, [pc, #468]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	e041      	b.n	8006fae <HAL_RCC_OscConfig+0x12e>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f32:	d112      	bne.n	8006f5a <HAL_RCC_OscConfig+0xda>
 8006f34:	4b70      	ldr	r3, [pc, #448]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a6f      	ldr	r2, [pc, #444]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4b6d      	ldr	r3, [pc, #436]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a6c      	ldr	r2, [pc, #432]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f46:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a69      	ldr	r2, [pc, #420]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	e029      	b.n	8006fae <HAL_RCC_OscConfig+0x12e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006f62:	d112      	bne.n	8006f8a <HAL_RCC_OscConfig+0x10a>
 8006f64:	4b64      	ldr	r3, [pc, #400]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a63      	ldr	r2, [pc, #396]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	4b61      	ldr	r3, [pc, #388]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a60      	ldr	r2, [pc, #384]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a5d      	ldr	r2, [pc, #372]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	e011      	b.n	8006fae <HAL_RCC_OscConfig+0x12e>
 8006f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a5a      	ldr	r2, [pc, #360]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	4b58      	ldr	r3, [pc, #352]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a57      	ldr	r2, [pc, #348]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	4b55      	ldr	r3, [pc, #340]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a54      	ldr	r2, [pc, #336]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006fa8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d013      	beq.n	8006fde <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb6:	f7fa ffd7 	bl	8001f68 <HAL_GetTick>
 8006fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fbe:	f7fa ffd3 	bl	8001f68 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b64      	cmp	r3, #100	@ 0x64
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e380      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fd0:	4b49      	ldr	r3, [pc, #292]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0f0      	beq.n	8006fbe <HAL_RCC_OscConfig+0x13e>
 8006fdc:	e014      	b.n	8007008 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fde:	f7fa ffc3 	bl	8001f68 <HAL_GetTick>
 8006fe2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fe6:	f7fa ffbf 	bl	8001f68 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b64      	cmp	r3, #100	@ 0x64
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e36c      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f0      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x166>
 8007004:	e000      	b.n	8007008 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007006:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 808c 	beq.w	800712e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007016:	4b38      	ldr	r3, [pc, #224]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800701e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007020:	4b35      	ldr	r3, [pc, #212]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <HAL_RCC_OscConfig+0x1bc>
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	2b18      	cmp	r3, #24
 8007030:	d137      	bne.n	80070a2 <HAL_RCC_OscConfig+0x222>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d132      	bne.n	80070a2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800703c:	4b2e      	ldr	r3, [pc, #184]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_RCC_OscConfig+0x1d4>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e33e      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007054:	4b28      	ldr	r3, [pc, #160]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f023 0219 	bic.w	r2, r3, #25
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4925      	ldr	r1, [pc, #148]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8007062:	4313      	orrs	r3, r2
 8007064:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007066:	f7fa ff7f 	bl	8001f68 <HAL_GetTick>
 800706a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800706c:	e008      	b.n	8007080 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800706e:	f7fa ff7b 	bl	8001f68 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e328      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007080:	4b1d      	ldr	r3, [pc, #116]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f0      	beq.n	800706e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708c:	4b1a      	ldr	r3, [pc, #104]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	4917      	ldr	r1, [pc, #92]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070a0:	e045      	b.n	800712e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d028      	beq.n	80070fc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070aa:	4b13      	ldr	r3, [pc, #76]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f023 0219 	bic.w	r2, r3, #25
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	4910      	ldr	r1, [pc, #64]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070bc:	f7fa ff54 	bl	8001f68 <HAL_GetTick>
 80070c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070c4:	f7fa ff50 	bl	8001f68 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e2fd      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070d6:	4b08      	ldr	r3, [pc, #32]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0f0      	beq.n	80070c4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e2:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	061b      	lsls	r3, r3, #24
 80070f0:	4901      	ldr	r1, [pc, #4]	@ (80070f8 <HAL_RCC_OscConfig+0x278>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	604b      	str	r3, [r1, #4]
 80070f6:	e01a      	b.n	800712e <HAL_RCC_OscConfig+0x2ae>
 80070f8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070fc:	4b97      	ldr	r3, [pc, #604]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a96      	ldr	r2, [pc, #600]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007102:	f023 0301 	bic.w	r3, r3, #1
 8007106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007108:	f7fa ff2e 	bl	8001f68 <HAL_GetTick>
 800710c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007110:	f7fa ff2a 	bl	8001f68 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e2d7      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007122:	4b8e      	ldr	r3, [pc, #568]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1f0      	bne.n	8007110 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	d06a      	beq.n	8007210 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800713a:	4b88      	ldr	r3, [pc, #544]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007142:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007144:	4b85      	ldr	r3, [pc, #532]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	2b08      	cmp	r3, #8
 800714e:	d007      	beq.n	8007160 <HAL_RCC_OscConfig+0x2e0>
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b18      	cmp	r3, #24
 8007154:	d11b      	bne.n	800718e <HAL_RCC_OscConfig+0x30e>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f003 0303 	and.w	r3, r3, #3
 800715c:	2b01      	cmp	r3, #1
 800715e:	d116      	bne.n	800718e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007160:	4b7e      	ldr	r3, [pc, #504]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <HAL_RCC_OscConfig+0x2f8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	2b80      	cmp	r3, #128	@ 0x80
 8007172:	d001      	beq.n	8007178 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e2ac      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007178:	4b78      	ldr	r3, [pc, #480]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	061b      	lsls	r3, r3, #24
 8007186:	4975      	ldr	r1, [pc, #468]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007188:	4313      	orrs	r3, r2
 800718a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800718c:	e040      	b.n	8007210 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d023      	beq.n	80071de <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007196:	4b71      	ldr	r3, [pc, #452]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a70      	ldr	r2, [pc, #448]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 800719c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a2:	f7fa fee1 	bl	8001f68 <HAL_GetTick>
 80071a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071aa:	f7fa fedd 	bl	8001f68 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e28a      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071bc:	4b67      	ldr	r3, [pc, #412]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071c8:	4b64      	ldr	r3, [pc, #400]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	061b      	lsls	r3, r3, #24
 80071d6:	4961      	ldr	r1, [pc, #388]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	60cb      	str	r3, [r1, #12]
 80071dc:	e018      	b.n	8007210 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071de:	4b5f      	ldr	r3, [pc, #380]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a5e      	ldr	r2, [pc, #376]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80071e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ea:	f7fa febd 	bl	8001f68 <HAL_GetTick>
 80071ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071f0:	e008      	b.n	8007204 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071f2:	f7fa feb9 	bl	8001f68 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e266      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007204:	4b55      	ldr	r3, [pc, #340]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1f0      	bne.n	80071f2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d036      	beq.n	800728a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d019      	beq.n	8007258 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007224:	4b4d      	ldr	r3, [pc, #308]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007228:	4a4c      	ldr	r2, [pc, #304]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 800722a:	f043 0301 	orr.w	r3, r3, #1
 800722e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007230:	f7fa fe9a 	bl	8001f68 <HAL_GetTick>
 8007234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007238:	f7fa fe96 	bl	8001f68 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e243      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800724a:	4b44      	ldr	r3, [pc, #272]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 800724c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <HAL_RCC_OscConfig+0x3b8>
 8007256:	e018      	b.n	800728a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007258:	4b40      	ldr	r3, [pc, #256]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 800725a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725c:	4a3f      	ldr	r2, [pc, #252]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 800725e:	f023 0301 	bic.w	r3, r3, #1
 8007262:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007264:	f7fa fe80 	bl	8001f68 <HAL_GetTick>
 8007268:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800726c:	f7fa fe7c 	bl	8001f68 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e229      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800727e:	4b37      	ldr	r3, [pc, #220]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f0      	bne.n	800726c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d036      	beq.n	8007304 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d019      	beq.n	80072d2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800729e:	4b2f      	ldr	r3, [pc, #188]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a2e      	ldr	r2, [pc, #184]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80072a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072aa:	f7fa fe5d 	bl	8001f68 <HAL_GetTick>
 80072ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072b2:	f7fa fe59 	bl	8001f68 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e206      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072c4:	4b25      	ldr	r3, [pc, #148]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x432>
 80072d0:	e018      	b.n	8007304 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072d2:	4b22      	ldr	r3, [pc, #136]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a21      	ldr	r2, [pc, #132]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80072d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072de:	f7fa fe43 	bl	8001f68 <HAL_GetTick>
 80072e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072e6:	f7fa fe3f 	bl	8001f68 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e1ec      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072f8:	4b18      	ldr	r3, [pc, #96]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1f0      	bne.n	80072e6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 80af 	beq.w	8007470 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007312:	4b13      	ldr	r3, [pc, #76]	@ (8007360 <HAL_RCC_OscConfig+0x4e0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a12      	ldr	r2, [pc, #72]	@ (8007360 <HAL_RCC_OscConfig+0x4e0>)
 8007318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800731c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800731e:	f7fa fe23 	bl	8001f68 <HAL_GetTick>
 8007322:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007326:	f7fa fe1f 	bl	8001f68 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b64      	cmp	r3, #100	@ 0x64
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e1cc      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007338:	4b09      	ldr	r3, [pc, #36]	@ (8007360 <HAL_RCC_OscConfig+0x4e0>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f0      	beq.n	8007326 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d10b      	bne.n	8007364 <HAL_RCC_OscConfig+0x4e4>
 800734c:	4b03      	ldr	r3, [pc, #12]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 800734e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007350:	4a02      	ldr	r2, [pc, #8]	@ (800735c <HAL_RCC_OscConfig+0x4dc>)
 8007352:	f043 0301 	orr.w	r3, r3, #1
 8007356:	6713      	str	r3, [r2, #112]	@ 0x70
 8007358:	e05b      	b.n	8007412 <HAL_RCC_OscConfig+0x592>
 800735a:	bf00      	nop
 800735c:	58024400 	.word	0x58024400
 8007360:	58024800 	.word	0x58024800
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d112      	bne.n	8007392 <HAL_RCC_OscConfig+0x512>
 800736c:	4b9d      	ldr	r3, [pc, #628]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800736e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007370:	4a9c      	ldr	r2, [pc, #624]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	6713      	str	r3, [r2, #112]	@ 0x70
 8007378:	4b9a      	ldr	r3, [pc, #616]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737c:	4a99      	ldr	r2, [pc, #612]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800737e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007382:	6713      	str	r3, [r2, #112]	@ 0x70
 8007384:	4b97      	ldr	r3, [pc, #604]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007388:	4a96      	ldr	r2, [pc, #600]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800738a:	f023 0304 	bic.w	r3, r3, #4
 800738e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007390:	e03f      	b.n	8007412 <HAL_RCC_OscConfig+0x592>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b05      	cmp	r3, #5
 8007398:	d112      	bne.n	80073c0 <HAL_RCC_OscConfig+0x540>
 800739a:	4b92      	ldr	r3, [pc, #584]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800739c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739e:	4a91      	ldr	r2, [pc, #580]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073a0:	f043 0304 	orr.w	r3, r3, #4
 80073a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a6:	4b8f      	ldr	r3, [pc, #572]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073aa:	4a8e      	ldr	r2, [pc, #568]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b2:	4b8c      	ldr	r3, [pc, #560]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b6:	4a8b      	ldr	r2, [pc, #556]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073b8:	f043 0301 	orr.w	r3, r3, #1
 80073bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073be:	e028      	b.n	8007412 <HAL_RCC_OscConfig+0x592>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b85      	cmp	r3, #133	@ 0x85
 80073c6:	d112      	bne.n	80073ee <HAL_RCC_OscConfig+0x56e>
 80073c8:	4b86      	ldr	r3, [pc, #536]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	4a85      	ldr	r2, [pc, #532]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073ce:	f043 0304 	orr.w	r3, r3, #4
 80073d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073d4:	4b83      	ldr	r3, [pc, #524]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d8:	4a82      	ldr	r2, [pc, #520]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073de:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e0:	4b80      	ldr	r3, [pc, #512]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e4:	4a7f      	ldr	r2, [pc, #508]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ec:	e011      	b.n	8007412 <HAL_RCC_OscConfig+0x592>
 80073ee:	4b7d      	ldr	r3, [pc, #500]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f2:	4a7c      	ldr	r2, [pc, #496]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073f4:	f023 0301 	bic.w	r3, r3, #1
 80073f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073fa:	4b7a      	ldr	r3, [pc, #488]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fe:	4a79      	ldr	r2, [pc, #484]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007400:	f023 0304 	bic.w	r3, r3, #4
 8007404:	6713      	str	r3, [r2, #112]	@ 0x70
 8007406:	4b77      	ldr	r3, [pc, #476]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740a:	4a76      	ldr	r2, [pc, #472]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800740c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007410:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d015      	beq.n	8007446 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741a:	f7fa fda5 	bl	8001f68 <HAL_GetTick>
 800741e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007420:	e00a      	b.n	8007438 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007422:	f7fa fda1 	bl	8001f68 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007430:	4293      	cmp	r3, r2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e14c      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007438:	4b6a      	ldr	r3, [pc, #424]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0ee      	beq.n	8007422 <HAL_RCC_OscConfig+0x5a2>
 8007444:	e014      	b.n	8007470 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007446:	f7fa fd8f 	bl	8001f68 <HAL_GetTick>
 800744a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800744c:	e00a      	b.n	8007464 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800744e:	f7fa fd8b 	bl	8001f68 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745c:	4293      	cmp	r3, r2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e136      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007464:	4b5f      	ldr	r3, [pc, #380]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1ee      	bne.n	800744e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 812b 	beq.w	80076d0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800747a:	4b5a      	ldr	r3, [pc, #360]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007482:	2b18      	cmp	r3, #24
 8007484:	f000 80bb 	beq.w	80075fe <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	2b02      	cmp	r3, #2
 800748e:	f040 8095 	bne.w	80075bc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007492:	4b54      	ldr	r3, [pc, #336]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a53      	ldr	r2, [pc, #332]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800749c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749e:	f7fa fd63 	bl	8001f68 <HAL_GetTick>
 80074a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a6:	f7fa fd5f 	bl	8001f68 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e10c      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074b8:	4b4a      	ldr	r3, [pc, #296]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f0      	bne.n	80074a6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074c4:	4b47      	ldr	r3, [pc, #284]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80074c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074c8:	4b47      	ldr	r3, [pc, #284]	@ (80075e8 <HAL_RCC_OscConfig+0x768>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074d4:	0112      	lsls	r2, r2, #4
 80074d6:	430a      	orrs	r2, r1
 80074d8:	4942      	ldr	r1, [pc, #264]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e2:	3b01      	subs	r3, #1
 80074e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ec:	3b01      	subs	r3, #1
 80074ee:	025b      	lsls	r3, r3, #9
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f8:	3b01      	subs	r3, #1
 80074fa:	041b      	lsls	r3, r3, #16
 80074fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007506:	3b01      	subs	r3, #1
 8007508:	061b      	lsls	r3, r3, #24
 800750a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800750e:	4935      	ldr	r1, [pc, #212]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007510:	4313      	orrs	r3, r2
 8007512:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007514:	4b33      	ldr	r3, [pc, #204]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007518:	4a32      	ldr	r2, [pc, #200]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007520:	4b30      	ldr	r3, [pc, #192]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007524:	4b31      	ldr	r3, [pc, #196]	@ (80075ec <HAL_RCC_OscConfig+0x76c>)
 8007526:	4013      	ands	r3, r2
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800752c:	00d2      	lsls	r2, r2, #3
 800752e:	492d      	ldr	r1, [pc, #180]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007530:	4313      	orrs	r3, r2
 8007532:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007534:	4b2b      	ldr	r3, [pc, #172]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007538:	f023 020c 	bic.w	r2, r3, #12
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007540:	4928      	ldr	r1, [pc, #160]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007542:	4313      	orrs	r3, r2
 8007544:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007546:	4b27      	ldr	r3, [pc, #156]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754a:	f023 0202 	bic.w	r2, r3, #2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007552:	4924      	ldr	r1, [pc, #144]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007554:	4313      	orrs	r3, r2
 8007556:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007558:	4b22      	ldr	r3, [pc, #136]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	4a21      	ldr	r2, [pc, #132]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800755e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007564:	4b1f      	ldr	r3, [pc, #124]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	4a1e      	ldr	r2, [pc, #120]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800756a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800756e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007570:	4b1c      	ldr	r3, [pc, #112]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	4a1b      	ldr	r2, [pc, #108]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007576:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800757a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800757c:	4b19      	ldr	r3, [pc, #100]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	4a18      	ldr	r2, [pc, #96]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007588:	4b16      	ldr	r3, [pc, #88]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a15      	ldr	r2, [pc, #84]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 800758e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007594:	f7fa fce8 	bl	8001f68 <HAL_GetTick>
 8007598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800759a:	e008      	b.n	80075ae <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800759c:	f7fa fce4 	bl	8001f68 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e091      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075ae:	4b0d      	ldr	r3, [pc, #52]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f0      	beq.n	800759c <HAL_RCC_OscConfig+0x71c>
 80075ba:	e089      	b.n	80076d0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075bc:	4b09      	ldr	r3, [pc, #36]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a08      	ldr	r2, [pc, #32]	@ (80075e4 <HAL_RCC_OscConfig+0x764>)
 80075c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c8:	f7fa fcce 	bl	8001f68 <HAL_GetTick>
 80075cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075ce:	e00f      	b.n	80075f0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d0:	f7fa fcca 	bl	8001f68 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d908      	bls.n	80075f0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e077      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
 80075e2:	bf00      	nop
 80075e4:	58024400 	.word	0x58024400
 80075e8:	fffffc0c 	.word	0xfffffc0c
 80075ec:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075f0:	4b3a      	ldr	r3, [pc, #232]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e9      	bne.n	80075d0 <HAL_RCC_OscConfig+0x750>
 80075fc:	e068      	b.n	80076d0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075fe:	4b37      	ldr	r3, [pc, #220]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 8007600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007602:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007604:	4b35      	ldr	r3, [pc, #212]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760e:	2b01      	cmp	r3, #1
 8007610:	d031      	beq.n	8007676 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f003 0203 	and.w	r2, r3, #3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800761c:	429a      	cmp	r2, r3
 800761e:	d12a      	bne.n	8007676 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800762c:	429a      	cmp	r2, r3
 800762e:	d122      	bne.n	8007676 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800763c:	429a      	cmp	r2, r3
 800763e:	d11a      	bne.n	8007676 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	0a5b      	lsrs	r3, r3, #9
 8007644:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800764c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800764e:	429a      	cmp	r2, r3
 8007650:	d111      	bne.n	8007676 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	0c1b      	lsrs	r3, r3, #16
 8007656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007660:	429a      	cmp	r2, r3
 8007662:	d108      	bne.n	8007676 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	0e1b      	lsrs	r3, r3, #24
 8007668:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007670:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007672:	429a      	cmp	r2, r3
 8007674:	d001      	beq.n	800767a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e02b      	b.n	80076d2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800767a:	4b18      	ldr	r3, [pc, #96]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 800767c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800767e:	08db      	lsrs	r3, r3, #3
 8007680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007684:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	d01f      	beq.n	80076d0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007690:	4b12      	ldr	r3, [pc, #72]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	4a11      	ldr	r2, [pc, #68]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 8007696:	f023 0301 	bic.w	r3, r3, #1
 800769a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800769c:	f7fa fc64 	bl	8001f68 <HAL_GetTick>
 80076a0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80076a2:	bf00      	nop
 80076a4:	f7fa fc60 	bl	8001f68 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d0f9      	beq.n	80076a4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076b0:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 80076b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076b4:	4b0a      	ldr	r3, [pc, #40]	@ (80076e0 <HAL_RCC_OscConfig+0x860>)
 80076b6:	4013      	ands	r3, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80076bc:	00d2      	lsls	r2, r2, #3
 80076be:	4907      	ldr	r1, [pc, #28]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80076c4:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	4a04      	ldr	r2, [pc, #16]	@ (80076dc <HAL_RCC_OscConfig+0x85c>)
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3730      	adds	r7, #48	@ 0x30
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	58024400 	.word	0x58024400
 80076e0:	ffff0007 	.word	0xffff0007

080076e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e19c      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076f8:	4b8a      	ldr	r3, [pc, #552]	@ (8007924 <HAL_RCC_ClockConfig+0x240>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d910      	bls.n	8007728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007706:	4b87      	ldr	r3, [pc, #540]	@ (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f023 020f 	bic.w	r2, r3, #15
 800770e:	4985      	ldr	r1, [pc, #532]	@ (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	4313      	orrs	r3, r2
 8007714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007716:	4b83      	ldr	r3, [pc, #524]	@ (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d001      	beq.n	8007728 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e184      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d010      	beq.n	8007756 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691a      	ldr	r2, [r3, #16]
 8007738:	4b7b      	ldr	r3, [pc, #492]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007740:	429a      	cmp	r2, r3
 8007742:	d908      	bls.n	8007756 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007744:	4b78      	ldr	r3, [pc, #480]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	4975      	ldr	r1, [pc, #468]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007752:	4313      	orrs	r3, r2
 8007754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d010      	beq.n	8007784 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	4b70      	ldr	r3, [pc, #448]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800776e:	429a      	cmp	r2, r3
 8007770:	d908      	bls.n	8007784 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007772:	4b6d      	ldr	r3, [pc, #436]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	496a      	ldr	r1, [pc, #424]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007780:	4313      	orrs	r3, r2
 8007782:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0310 	and.w	r3, r3, #16
 800778c:	2b00      	cmp	r3, #0
 800778e:	d010      	beq.n	80077b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	4b64      	ldr	r3, [pc, #400]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800779c:	429a      	cmp	r2, r3
 800779e:	d908      	bls.n	80077b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077a0:	4b61      	ldr	r3, [pc, #388]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	495e      	ldr	r1, [pc, #376]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d010      	beq.n	80077e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69da      	ldr	r2, [r3, #28]
 80077c2:	4b59      	ldr	r3, [pc, #356]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d908      	bls.n	80077e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077ce:	4b56      	ldr	r3, [pc, #344]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	4953      	ldr	r1, [pc, #332]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d010      	beq.n	800780e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d908      	bls.n	800780e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f023 020f 	bic.w	r2, r3, #15
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	4947      	ldr	r1, [pc, #284]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 800780a:	4313      	orrs	r3, r2
 800780c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d055      	beq.n	80078c6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800781a:	4b43      	ldr	r3, [pc, #268]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	4940      	ldr	r1, [pc, #256]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007828:	4313      	orrs	r3, r2
 800782a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d107      	bne.n	8007844 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007834:	4b3c      	ldr	r3, [pc, #240]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d121      	bne.n	8007884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e0f6      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b03      	cmp	r3, #3
 800784a:	d107      	bne.n	800785c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800784c:	4b36      	ldr	r3, [pc, #216]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d115      	bne.n	8007884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0ea      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d107      	bne.n	8007874 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007864:	4b30      	ldr	r3, [pc, #192]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0de      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007874:	4b2c      	ldr	r3, [pc, #176]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0d6      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007884:	4b28      	ldr	r3, [pc, #160]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f023 0207 	bic.w	r2, r3, #7
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4925      	ldr	r1, [pc, #148]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007892:	4313      	orrs	r3, r2
 8007894:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007896:	f7fa fb67 	bl	8001f68 <HAL_GetTick>
 800789a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789c:	e00a      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800789e:	f7fa fb63 	bl	8001f68 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0be      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d1eb      	bne.n	800789e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d010      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	4b14      	ldr	r3, [pc, #80]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	429a      	cmp	r2, r3
 80078e0:	d208      	bcs.n	80078f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078e2:	4b11      	ldr	r3, [pc, #68]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f023 020f 	bic.w	r2, r3, #15
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	490e      	ldr	r1, [pc, #56]	@ (8007928 <HAL_RCC_ClockConfig+0x244>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <HAL_RCC_ClockConfig+0x240>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 030f 	and.w	r3, r3, #15
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d214      	bcs.n	800792c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007902:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f023 020f 	bic.w	r2, r3, #15
 800790a:	4906      	ldr	r1, [pc, #24]	@ (8007924 <HAL_RCC_ClockConfig+0x240>)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	4313      	orrs	r3, r2
 8007910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007912:	4b04      	ldr	r3, [pc, #16]	@ (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d005      	beq.n	800792c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e086      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
 8007924:	52002000 	.word	0x52002000
 8007928:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d010      	beq.n	800795a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007944:	429a      	cmp	r2, r3
 8007946:	d208      	bcs.n	800795a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007948:	4b3c      	ldr	r3, [pc, #240]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	4939      	ldr	r1, [pc, #228]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 8007956:	4313      	orrs	r3, r2
 8007958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d010      	beq.n	8007988 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695a      	ldr	r2, [r3, #20]
 800796a:	4b34      	ldr	r3, [pc, #208]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007972:	429a      	cmp	r2, r3
 8007974:	d208      	bcs.n	8007988 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007976:	4b31      	ldr	r3, [pc, #196]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	492e      	ldr	r1, [pc, #184]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 8007984:	4313      	orrs	r3, r2
 8007986:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	4b28      	ldr	r3, [pc, #160]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d208      	bcs.n	80079b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079a4:	4b25      	ldr	r3, [pc, #148]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	4922      	ldr	r1, [pc, #136]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d010      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d208      	bcs.n	80079e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80079d2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	4917      	ldr	r1, [pc, #92]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80079e4:	f000 f89e 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 80079e8:	4602      	mov	r2, r0
 80079ea:	4b14      	ldr	r3, [pc, #80]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	0a1b      	lsrs	r3, r3, #8
 80079f0:	f003 030f 	and.w	r3, r3, #15
 80079f4:	4912      	ldr	r1, [pc, #72]	@ (8007a40 <HAL_RCC_ClockConfig+0x35c>)
 80079f6:	5ccb      	ldrb	r3, [r1, r3]
 80079f8:	f003 031f 	and.w	r3, r3, #31
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007a00:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a02:	4b0e      	ldr	r3, [pc, #56]	@ (8007a3c <HAL_RCC_ClockConfig+0x358>)
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8007a40 <HAL_RCC_ClockConfig+0x35c>)
 8007a0c:	5cd3      	ldrb	r3, [r2, r3]
 8007a0e:	f003 031f 	and.w	r3, r3, #31
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
 8007a18:	4a0a      	ldr	r2, [pc, #40]	@ (8007a44 <HAL_RCC_ClockConfig+0x360>)
 8007a1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a48 <HAL_RCC_ClockConfig+0x364>)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a22:	4b0a      	ldr	r3, [pc, #40]	@ (8007a4c <HAL_RCC_ClockConfig+0x368>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fa fa54 	bl	8001ed4 <HAL_InitTick>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	0800ef94 	.word	0x0800ef94
 8007a44:	24000058 	.word	0x24000058
 8007a48:	24000054 	.word	0x24000054
 8007a4c:	2400005c 	.word	0x2400005c

08007a50 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08c      	sub	sp, #48	@ 0x30
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d12a      	bne.n	8007ab8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007a62:	4b2d      	ldr	r3, [pc, #180]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007a68:	4a2b      	ldr	r2, [pc, #172]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007a72:	4b29      	ldr	r3, [pc, #164]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007a74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a86:	2302      	movs	r3, #2
 8007a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007a92:	2300      	movs	r3, #0
 8007a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007a96:	f107 031c 	add.w	r3, r7, #28
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	481f      	ldr	r0, [pc, #124]	@ (8007b1c <HAL_RCC_MCOConfig+0xcc>)
 8007a9e:	f7fe ffbb 	bl	8006a18 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	4919      	ldr	r1, [pc, #100]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007ab6:	e02a      	b.n	8007b0e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007ab8:	4b17      	ldr	r3, [pc, #92]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007aba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007abe:	4a16      	ldr	r2, [pc, #88]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007ac0:	f043 0304 	orr.w	r3, r3, #4
 8007ac4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007ac8:	4b13      	ldr	r3, [pc, #76]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007aca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007adc:	2302      	movs	r3, #2
 8007ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007aec:	f107 031c 	add.w	r3, r7, #28
 8007af0:	4619      	mov	r1, r3
 8007af2:	480b      	ldr	r0, [pc, #44]	@ (8007b20 <HAL_RCC_MCOConfig+0xd0>)
 8007af4:	f7fe ff90 	bl	8006a18 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007af8:	4b07      	ldr	r3, [pc, #28]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	01d9      	lsls	r1, r3, #7
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	430b      	orrs	r3, r1
 8007b08:	4903      	ldr	r1, [pc, #12]	@ (8007b18 <HAL_RCC_MCOConfig+0xc8>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	610b      	str	r3, [r1, #16]
}
 8007b0e:	bf00      	nop
 8007b10:	3730      	adds	r7, #48	@ 0x30
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	58020000 	.word	0x58020000
 8007b20:	58020800 	.word	0x58020800

08007b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b089      	sub	sp, #36	@ 0x24
 8007b28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b2a:	4bb3      	ldr	r3, [pc, #716]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b32:	2b18      	cmp	r3, #24
 8007b34:	f200 8155 	bhi.w	8007de2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007b38:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007ba5 	.word	0x08007ba5
 8007b44:	08007de3 	.word	0x08007de3
 8007b48:	08007de3 	.word	0x08007de3
 8007b4c:	08007de3 	.word	0x08007de3
 8007b50:	08007de3 	.word	0x08007de3
 8007b54:	08007de3 	.word	0x08007de3
 8007b58:	08007de3 	.word	0x08007de3
 8007b5c:	08007de3 	.word	0x08007de3
 8007b60:	08007bcb 	.word	0x08007bcb
 8007b64:	08007de3 	.word	0x08007de3
 8007b68:	08007de3 	.word	0x08007de3
 8007b6c:	08007de3 	.word	0x08007de3
 8007b70:	08007de3 	.word	0x08007de3
 8007b74:	08007de3 	.word	0x08007de3
 8007b78:	08007de3 	.word	0x08007de3
 8007b7c:	08007de3 	.word	0x08007de3
 8007b80:	08007bd1 	.word	0x08007bd1
 8007b84:	08007de3 	.word	0x08007de3
 8007b88:	08007de3 	.word	0x08007de3
 8007b8c:	08007de3 	.word	0x08007de3
 8007b90:	08007de3 	.word	0x08007de3
 8007b94:	08007de3 	.word	0x08007de3
 8007b98:	08007de3 	.word	0x08007de3
 8007b9c:	08007de3 	.word	0x08007de3
 8007ba0:	08007bd7 	.word	0x08007bd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ba4:	4b94      	ldr	r3, [pc, #592]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bb0:	4b91      	ldr	r3, [pc, #580]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	08db      	lsrs	r3, r3, #3
 8007bb6:	f003 0303 	and.w	r3, r3, #3
 8007bba:	4a90      	ldr	r2, [pc, #576]	@ (8007dfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007bc2:	e111      	b.n	8007de8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007bc4:	4b8d      	ldr	r3, [pc, #564]	@ (8007dfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bc6:	61bb      	str	r3, [r7, #24]
      break;
 8007bc8:	e10e      	b.n	8007de8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007bca:	4b8d      	ldr	r3, [pc, #564]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bcc:	61bb      	str	r3, [r7, #24]
      break;
 8007bce:	e10b      	b.n	8007de8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8007e04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007bd2:	61bb      	str	r3, [r7, #24]
      break;
 8007bd4:	e108      	b.n	8007de8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bd6:	4b88      	ldr	r3, [pc, #544]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007be0:	4b85      	ldr	r3, [pc, #532]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be4:	091b      	lsrs	r3, r3, #4
 8007be6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bec:	4b82      	ldr	r3, [pc, #520]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007bf6:	4b80      	ldr	r3, [pc, #512]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfa:	08db      	lsrs	r3, r3, #3
 8007bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	fb02 f303 	mul.w	r3, r2, r3
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80e1 	beq.w	8007ddc <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	f000 8083 	beq.w	8007d28 <HAL_RCC_GetSysClockFreq+0x204>
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	f200 80a1 	bhi.w	8007d6c <HAL_RCC_GetSysClockFreq+0x248>
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <HAL_RCC_GetSysClockFreq+0x114>
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d056      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c36:	e099      	b.n	8007d6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c38:	4b6f      	ldr	r3, [pc, #444]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d02d      	beq.n	8007ca0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c44:	4b6c      	ldr	r3, [pc, #432]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	08db      	lsrs	r3, r3, #3
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	4a6b      	ldr	r2, [pc, #428]	@ (8007dfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c50:	fa22 f303 	lsr.w	r3, r2, r3
 8007c54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	ee07 3a90 	vmov	s15, r3
 8007c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6e:	4b62      	ldr	r3, [pc, #392]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007e08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c9e:	e087      	b.n	8007db0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007caa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007e0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb2:	4b51      	ldr	r3, [pc, #324]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007e08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ce2:	e065      	b.n	8007db0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007e10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf6:	4b40      	ldr	r3, [pc, #256]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d0a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007e08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d26:	e043      	b.n	8007db0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007e14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d4e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007e08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d6a:	e021      	b.n	8007db0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d76:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007e10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d92:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007e08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007daa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007db0:	4b11      	ldr	r3, [pc, #68]	@ (8007df8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db4:	0a5b      	lsrs	r3, r3, #9
 8007db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dba:	3301      	adds	r3, #1
 8007dbc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	ee07 3a90 	vmov	s15, r3
 8007dc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007dc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd4:	ee17 3a90 	vmov	r3, s15
 8007dd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007dda:	e005      	b.n	8007de8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61bb      	str	r3, [r7, #24]
      break;
 8007de0:	e002      	b.n	8007de8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007de2:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007de4:	61bb      	str	r3, [r7, #24]
      break;
 8007de6:	bf00      	nop
  }

  return sysclockfreq;
 8007de8:	69bb      	ldr	r3, [r7, #24]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3724      	adds	r7, #36	@ 0x24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	03d09000 	.word	0x03d09000
 8007e00:	003d0900 	.word	0x003d0900
 8007e04:	007a1200 	.word	0x007a1200
 8007e08:	46000000 	.word	0x46000000
 8007e0c:	4c742400 	.word	0x4c742400
 8007e10:	4a742400 	.word	0x4a742400
 8007e14:	4af42400 	.word	0x4af42400

08007e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007e1e:	f7ff fe81 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 8007e22:	4602      	mov	r2, r0
 8007e24:	4b10      	ldr	r3, [pc, #64]	@ (8007e68 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	0a1b      	lsrs	r3, r3, #8
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	490f      	ldr	r1, [pc, #60]	@ (8007e6c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e30:	5ccb      	ldrb	r3, [r1, r3]
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e68 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	4a09      	ldr	r2, [pc, #36]	@ (8007e6c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e46:	5cd3      	ldrb	r3, [r2, r3]
 8007e48:	f003 031f 	and.w	r3, r3, #31
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e52:	4a07      	ldr	r2, [pc, #28]	@ (8007e70 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e56:	4a07      	ldr	r2, [pc, #28]	@ (8007e74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e5c:	4b04      	ldr	r3, [pc, #16]	@ (8007e70 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	58024400 	.word	0x58024400
 8007e6c:	0800ef94 	.word	0x0800ef94
 8007e70:	24000058 	.word	0x24000058
 8007e74:	24000054 	.word	0x24000054

08007e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007e7c:	f7ff ffcc 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8007e80:	4602      	mov	r2, r0
 8007e82:	4b06      	ldr	r3, [pc, #24]	@ (8007e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	091b      	lsrs	r3, r3, #4
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	4904      	ldr	r1, [pc, #16]	@ (8007ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e8e:	5ccb      	ldrb	r3, [r1, r3]
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	58024400 	.word	0x58024400
 8007ea0:	0800ef94 	.word	0x0800ef94

08007ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007ea8:	f7ff ffb6 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8007eac:	4602      	mov	r2, r0
 8007eae:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	0a1b      	lsrs	r3, r3, #8
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	4904      	ldr	r1, [pc, #16]	@ (8007ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eba:	5ccb      	ldrb	r3, [r1, r3]
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	58024400 	.word	0x58024400
 8007ecc:	0800ef94 	.word	0x0800ef94

08007ed0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed4:	b0c8      	sub	sp, #288	@ 0x120
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007edc:	2300      	movs	r3, #0
 8007ede:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007ef4:	2500      	movs	r5, #0
 8007ef6:	ea54 0305 	orrs.w	r3, r4, r5
 8007efa:	d049      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f06:	d02f      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f0c:	d828      	bhi.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f12:	d01a      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f18:	d822      	bhi.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f22:	d007      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f24:	e01c      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f26:	4ba7      	ldr	r3, [pc, #668]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	4aa6      	ldr	r2, [pc, #664]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f32:	e01a      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f38:	3308      	adds	r3, #8
 8007f3a:	2102      	movs	r1, #2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 fac3 	bl	800a4c8 <RCCEx_PLL2_Config>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f48:	e00f      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f4e:	3328      	adds	r3, #40	@ 0x28
 8007f50:	2102      	movs	r1, #2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f002 fb6a 	bl	800a62c <RCCEx_PLL3_Config>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f5e:	e004      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f66:	e000      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f72:	4b94      	ldr	r3, [pc, #592]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f80:	4a90      	ldr	r2, [pc, #576]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f82:	430b      	orrs	r3, r1
 8007f84:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f86:	e003      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007f9c:	f04f 0900 	mov.w	r9, #0
 8007fa0:	ea58 0309 	orrs.w	r3, r8, r9
 8007fa4:	d047      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d82a      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	08007fcd 	.word	0x08007fcd
 8007fbc:	08007fdb 	.word	0x08007fdb
 8007fc0:	08007ff1 	.word	0x08007ff1
 8007fc4:	0800800f 	.word	0x0800800f
 8007fc8:	0800800f 	.word	0x0800800f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fcc:	4b7d      	ldr	r3, [pc, #500]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd0:	4a7c      	ldr	r2, [pc, #496]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fd8:	e01a      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fde:	3308      	adds	r3, #8
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f002 fa70 	bl	800a4c8 <RCCEx_PLL2_Config>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fee:	e00f      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ff4:	3328      	adds	r3, #40	@ 0x28
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f002 fb17 	bl	800a62c <RCCEx_PLL3_Config>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008004:	e004      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800800c:	e000      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800800e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008010:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10a      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008018:	4b6a      	ldr	r3, [pc, #424]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800801a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801c:	f023 0107 	bic.w	r1, r3, #7
 8008020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008026:	4a67      	ldr	r2, [pc, #412]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008028:	430b      	orrs	r3, r1
 800802a:	6513      	str	r3, [r2, #80]	@ 0x50
 800802c:	e003      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008032:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008042:	f04f 0b00 	mov.w	fp, #0
 8008046:	ea5a 030b 	orrs.w	r3, sl, fp
 800804a:	d054      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800804c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008052:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008056:	d036      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008058:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800805c:	d82f      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800805e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008062:	d032      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008068:	d829      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800806a:	2bc0      	cmp	r3, #192	@ 0xc0
 800806c:	d02f      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800806e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008070:	d825      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008072:	2b80      	cmp	r3, #128	@ 0x80
 8008074:	d018      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008076:	2b80      	cmp	r3, #128	@ 0x80
 8008078:	d821      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800807e:	2b40      	cmp	r3, #64	@ 0x40
 8008080:	d007      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008082:	e01c      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008084:	4b4f      	ldr	r3, [pc, #316]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	4a4e      	ldr	r2, [pc, #312]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800808e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008090:	e01e      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008096:	3308      	adds	r3, #8
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f002 fa14 	bl	800a4c8 <RCCEx_PLL2_Config>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80080a6:	e013      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ac:	3328      	adds	r3, #40	@ 0x28
 80080ae:	2100      	movs	r1, #0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f002 fabb 	bl	800a62c <RCCEx_PLL3_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80080bc:	e008      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080c4:	e004      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80080c6:	bf00      	nop
 80080c8:	e002      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80080ca:	bf00      	nop
 80080cc:	e000      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80080ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80080d8:	4b3a      	ldr	r3, [pc, #232]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80080e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080e6:	4a37      	ldr	r2, [pc, #220]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80080ec:	e003      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80080f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008102:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008106:	2300      	movs	r3, #0
 8008108:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800810c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008110:	460b      	mov	r3, r1
 8008112:	4313      	orrs	r3, r2
 8008114:	d05c      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800811a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800811c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008120:	d03b      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008122:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008126:	d834      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800812c:	d037      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800812e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008132:	d82e      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008134:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008138:	d033      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800813a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800813e:	d828      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008144:	d01a      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800814a:	d822      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008154:	d007      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008156:	e01c      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008158:	4b1a      	ldr	r3, [pc, #104]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	4a19      	ldr	r2, [pc, #100]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800815e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008164:	e01e      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816a:	3308      	adds	r3, #8
 800816c:	2100      	movs	r1, #0
 800816e:	4618      	mov	r0, r3
 8008170:	f002 f9aa 	bl	800a4c8 <RCCEx_PLL2_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800817a:	e013      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800817c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008180:	3328      	adds	r3, #40	@ 0x28
 8008182:	2100      	movs	r1, #0
 8008184:	4618      	mov	r0, r3
 8008186:	f002 fa51 	bl	800a62c <RCCEx_PLL3_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008190:	e008      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008198:	e004      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800819a:	bf00      	nop
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80081a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10d      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80081ac:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80081b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ba:	4a02      	ldr	r2, [pc, #8]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081bc:	430b      	orrs	r3, r1
 80081be:	6513      	str	r3, [r2, #80]	@ 0x50
 80081c0:	e006      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80081c2:	bf00      	nop
 80081c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80081d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80081dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80081e0:	2300      	movs	r3, #0
 80081e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80081e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80081ea:	460b      	mov	r3, r1
 80081ec:	4313      	orrs	r3, r2
 80081ee:	d03a      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80081f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081f6:	2b30      	cmp	r3, #48	@ 0x30
 80081f8:	d01f      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80081fa:	2b30      	cmp	r3, #48	@ 0x30
 80081fc:	d819      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d00c      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008202:	2b20      	cmp	r3, #32
 8008204:	d815      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d019      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800820a:	2b10      	cmp	r3, #16
 800820c:	d111      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800820e:	4bae      	ldr	r3, [pc, #696]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008212:	4aad      	ldr	r2, [pc, #692]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800821a:	e011      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800821c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008220:	3308      	adds	r3, #8
 8008222:	2102      	movs	r1, #2
 8008224:	4618      	mov	r0, r3
 8008226:	f002 f94f 	bl	800a4c8 <RCCEx_PLL2_Config>
 800822a:	4603      	mov	r3, r0
 800822c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008230:	e006      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008238:	e002      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800823a:	bf00      	nop
 800823c:	e000      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800823e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008240:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008248:	4b9f      	ldr	r3, [pc, #636]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800824a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800824c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008256:	4a9c      	ldr	r2, [pc, #624]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008258:	430b      	orrs	r3, r1
 800825a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800825c:	e003      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008262:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008272:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008276:	2300      	movs	r3, #0
 8008278:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800827c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008280:	460b      	mov	r3, r1
 8008282:	4313      	orrs	r3, r2
 8008284:	d051      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800828a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800828c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008290:	d035      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008296:	d82e      	bhi.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008298:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800829c:	d031      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800829e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082a2:	d828      	bhi.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80082a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082a8:	d01a      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80082aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ae:	d822      	bhi.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80082b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b8:	d007      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80082ba:	e01c      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082bc:	4b82      	ldr	r3, [pc, #520]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c0:	4a81      	ldr	r2, [pc, #516]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082c8:	e01c      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ce:	3308      	adds	r3, #8
 80082d0:	2100      	movs	r1, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f002 f8f8 	bl	800a4c8 <RCCEx_PLL2_Config>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082de:	e011      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e4:	3328      	adds	r3, #40	@ 0x28
 80082e6:	2100      	movs	r1, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f002 f99f 	bl	800a62c <RCCEx_PLL3_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082f4:	e006      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082fc:	e002      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80082fe:	bf00      	nop
 8008300:	e000      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008304:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800830c:	4b6e      	ldr	r3, [pc, #440]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800830e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008310:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800831a:	4a6b      	ldr	r2, [pc, #428]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800831c:	430b      	orrs	r3, r1
 800831e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008320:	e003      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008322:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008326:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800832a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008336:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800833a:	2300      	movs	r3, #0
 800833c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008340:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008344:	460b      	mov	r3, r1
 8008346:	4313      	orrs	r3, r2
 8008348:	d053      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800834a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800834e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008354:	d033      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008356:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800835a:	d82c      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800835c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008360:	d02f      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008362:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008366:	d826      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008368:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800836c:	d02b      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800836e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008372:	d820      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008378:	d012      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800837a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800837e:	d81a      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d022      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008388:	d115      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800838a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800838e:	3308      	adds	r3, #8
 8008390:	2101      	movs	r1, #1
 8008392:	4618      	mov	r0, r3
 8008394:	f002 f898 	bl	800a4c8 <RCCEx_PLL2_Config>
 8008398:	4603      	mov	r3, r0
 800839a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800839e:	e015      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a4:	3328      	adds	r3, #40	@ 0x28
 80083a6:	2101      	movs	r1, #1
 80083a8:	4618      	mov	r0, r3
 80083aa:	f002 f93f 	bl	800a62c <RCCEx_PLL3_Config>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80083b4:	e00a      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083bc:	e006      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80083be:	bf00      	nop
 80083c0:	e004      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80083c2:	bf00      	nop
 80083c4:	e002      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80083c6:	bf00      	nop
 80083c8:	e000      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80083ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80083d4:	4b3c      	ldr	r3, [pc, #240]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80083dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083e2:	4a39      	ldr	r2, [pc, #228]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083e4:	430b      	orrs	r3, r1
 80083e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80083e8:	e003      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80083fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008402:	2300      	movs	r3, #0
 8008404:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008408:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800840c:	460b      	mov	r3, r1
 800840e:	4313      	orrs	r3, r2
 8008410:	d060      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800841a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800841e:	d039      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008420:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008424:	d832      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800842a:	d035      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800842c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008430:	d82c      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008436:	d031      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800843c:	d826      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800843e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008442:	d02d      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008444:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008448:	d820      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800844a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800844e:	d012      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008454:	d81a      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d024      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800845a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800845e:	d115      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008464:	3308      	adds	r3, #8
 8008466:	2101      	movs	r1, #1
 8008468:	4618      	mov	r0, r3
 800846a:	f002 f82d 	bl	800a4c8 <RCCEx_PLL2_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008474:	e017      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800847a:	3328      	adds	r3, #40	@ 0x28
 800847c:	2101      	movs	r1, #1
 800847e:	4618      	mov	r0, r3
 8008480:	f002 f8d4 	bl	800a62c <RCCEx_PLL3_Config>
 8008484:	4603      	mov	r3, r0
 8008486:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800848a:	e00c      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008492:	e008      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008494:	bf00      	nop
 8008496:	e006      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008498:	bf00      	nop
 800849a:	e004      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800849c:	bf00      	nop
 800849e:	e002      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084a0:	bf00      	nop
 80084a2:	e000      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10e      	bne.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80084ae:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80084b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084be:	4a02      	ldr	r2, [pc, #8]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084c0:	430b      	orrs	r3, r1
 80084c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80084c4:	e006      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80084c6:	bf00      	nop
 80084c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80084e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084e4:	2300      	movs	r3, #0
 80084e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084ee:	460b      	mov	r3, r1
 80084f0:	4313      	orrs	r3, r2
 80084f2:	d037      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80084f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084fe:	d00e      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008504:	d816      	bhi.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d018      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800850a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800850e:	d111      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008510:	4bc4      	ldr	r3, [pc, #784]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008514:	4ac3      	ldr	r2, [pc, #780]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800851a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800851c:	e00f      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800851e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008522:	3308      	adds	r3, #8
 8008524:	2101      	movs	r1, #1
 8008526:	4618      	mov	r0, r3
 8008528:	f001 ffce 	bl	800a4c8 <RCCEx_PLL2_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008532:	e004      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800853a:	e000      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800853c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800853e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10a      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008546:	4bb7      	ldr	r3, [pc, #732]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800854a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800854e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008554:	4ab3      	ldr	r2, [pc, #716]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008556:	430b      	orrs	r3, r1
 8008558:	6513      	str	r3, [r2, #80]	@ 0x50
 800855a:	e003      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008560:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008574:	2300      	movs	r3, #0
 8008576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800857a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800857e:	460b      	mov	r3, r1
 8008580:	4313      	orrs	r3, r2
 8008582:	d039      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800858a:	2b03      	cmp	r3, #3
 800858c:	d81c      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085d1 	.word	0x080085d1
 8008598:	080085a5 	.word	0x080085a5
 800859c:	080085b3 	.word	0x080085b3
 80085a0:	080085d1 	.word	0x080085d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a4:	4b9f      	ldr	r3, [pc, #636]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a8:	4a9e      	ldr	r2, [pc, #632]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80085b0:	e00f      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b6:	3308      	adds	r3, #8
 80085b8:	2102      	movs	r1, #2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 ff84 	bl	800a4c8 <RCCEx_PLL2_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80085c6:	e004      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085ce:	e000      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80085d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10a      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80085da:	4b92      	ldr	r3, [pc, #584]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085de:	f023 0103 	bic.w	r1, r3, #3
 80085e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085e8:	4a8e      	ldr	r2, [pc, #568]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ea:	430b      	orrs	r3, r1
 80085ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085ee:	e003      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008604:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008608:	2300      	movs	r3, #0
 800860a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800860e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008612:	460b      	mov	r3, r1
 8008614:	4313      	orrs	r3, r2
 8008616:	f000 8099 	beq.w	800874c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800861a:	4b83      	ldr	r3, [pc, #524]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a82      	ldr	r2, [pc, #520]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008624:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008626:	f7f9 fc9f 	bl	8001f68 <HAL_GetTick>
 800862a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800862e:	e00b      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008630:	f7f9 fc9a 	bl	8001f68 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b64      	cmp	r3, #100	@ 0x64
 800863e:	d903      	bls.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008646:	e005      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008648:	4b77      	ldr	r3, [pc, #476]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0ed      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008658:	2b00      	cmp	r3, #0
 800865a:	d173      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800865c:	4b71      	ldr	r3, [pc, #452]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800865e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008664:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008668:	4053      	eors	r3, r2
 800866a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866e:	2b00      	cmp	r3, #0
 8008670:	d015      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008672:	4b6c      	ldr	r3, [pc, #432]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800867a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800867e:	4b69      	ldr	r3, [pc, #420]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008682:	4a68      	ldr	r2, [pc, #416]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008688:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800868a:	4b66      	ldr	r3, [pc, #408]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800868c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868e:	4a65      	ldr	r2, [pc, #404]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008694:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008696:	4a63      	ldr	r2, [pc, #396]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800869e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086aa:	d118      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ac:	f7f9 fc5c 	bl	8001f68 <HAL_GetTick>
 80086b0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086b4:	e00d      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086b6:	f7f9 fc57 	bl	8001f68 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80086c0:	1ad2      	subs	r2, r2, r3
 80086c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d903      	bls.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80086d0:	e005      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086d2:	4b54      	ldr	r3, [pc, #336]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0eb      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80086de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d129      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086f6:	d10e      	bne.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80086f8:	4b4a      	ldr	r3, [pc, #296]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008708:	091a      	lsrs	r2, r3, #4
 800870a:	4b48      	ldr	r3, [pc, #288]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800870c:	4013      	ands	r3, r2
 800870e:	4a45      	ldr	r2, [pc, #276]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008710:	430b      	orrs	r3, r1
 8008712:	6113      	str	r3, [r2, #16]
 8008714:	e005      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008716:	4b43      	ldr	r3, [pc, #268]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	4a42      	ldr	r2, [pc, #264]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800871c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008720:	6113      	str	r3, [r2, #16]
 8008722:	4b40      	ldr	r3, [pc, #256]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008724:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800872a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800872e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008732:	4a3c      	ldr	r2, [pc, #240]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008734:	430b      	orrs	r3, r1
 8008736:	6713      	str	r3, [r2, #112]	@ 0x70
 8008738:	e008      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800873a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800873e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008742:	e003      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008744:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008748:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800874c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f002 0301 	and.w	r3, r2, #1
 8008758:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008762:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008766:	460b      	mov	r3, r1
 8008768:	4313      	orrs	r3, r2
 800876a:	f000 8090 	beq.w	800888e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800876e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008776:	2b28      	cmp	r3, #40	@ 0x28
 8008778:	d870      	bhi.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800877a:	a201      	add	r2, pc, #4	@ (adr r2, 8008780 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	08008865 	.word	0x08008865
 8008784:	0800885d 	.word	0x0800885d
 8008788:	0800885d 	.word	0x0800885d
 800878c:	0800885d 	.word	0x0800885d
 8008790:	0800885d 	.word	0x0800885d
 8008794:	0800885d 	.word	0x0800885d
 8008798:	0800885d 	.word	0x0800885d
 800879c:	0800885d 	.word	0x0800885d
 80087a0:	08008831 	.word	0x08008831
 80087a4:	0800885d 	.word	0x0800885d
 80087a8:	0800885d 	.word	0x0800885d
 80087ac:	0800885d 	.word	0x0800885d
 80087b0:	0800885d 	.word	0x0800885d
 80087b4:	0800885d 	.word	0x0800885d
 80087b8:	0800885d 	.word	0x0800885d
 80087bc:	0800885d 	.word	0x0800885d
 80087c0:	08008847 	.word	0x08008847
 80087c4:	0800885d 	.word	0x0800885d
 80087c8:	0800885d 	.word	0x0800885d
 80087cc:	0800885d 	.word	0x0800885d
 80087d0:	0800885d 	.word	0x0800885d
 80087d4:	0800885d 	.word	0x0800885d
 80087d8:	0800885d 	.word	0x0800885d
 80087dc:	0800885d 	.word	0x0800885d
 80087e0:	08008865 	.word	0x08008865
 80087e4:	0800885d 	.word	0x0800885d
 80087e8:	0800885d 	.word	0x0800885d
 80087ec:	0800885d 	.word	0x0800885d
 80087f0:	0800885d 	.word	0x0800885d
 80087f4:	0800885d 	.word	0x0800885d
 80087f8:	0800885d 	.word	0x0800885d
 80087fc:	0800885d 	.word	0x0800885d
 8008800:	08008865 	.word	0x08008865
 8008804:	0800885d 	.word	0x0800885d
 8008808:	0800885d 	.word	0x0800885d
 800880c:	0800885d 	.word	0x0800885d
 8008810:	0800885d 	.word	0x0800885d
 8008814:	0800885d 	.word	0x0800885d
 8008818:	0800885d 	.word	0x0800885d
 800881c:	0800885d 	.word	0x0800885d
 8008820:	08008865 	.word	0x08008865
 8008824:	58024400 	.word	0x58024400
 8008828:	58024800 	.word	0x58024800
 800882c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008834:	3308      	adds	r3, #8
 8008836:	2101      	movs	r1, #1
 8008838:	4618      	mov	r0, r3
 800883a:	f001 fe45 	bl	800a4c8 <RCCEx_PLL2_Config>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008844:	e00f      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800884a:	3328      	adds	r3, #40	@ 0x28
 800884c:	2101      	movs	r1, #1
 800884e:	4618      	mov	r0, r3
 8008850:	f001 feec 	bl	800a62c <RCCEx_PLL3_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800885a:	e004      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008862:	e000      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008866:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800886e:	4bc0      	ldr	r3, [pc, #768]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008872:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800887e:	4abc      	ldr	r2, [pc, #752]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008880:	430b      	orrs	r3, r1
 8008882:	6553      	str	r3, [r2, #84]	@ 0x54
 8008884:	e003      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800888a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800888e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f002 0302 	and.w	r3, r2, #2
 800889a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800889e:	2300      	movs	r3, #0
 80088a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80088a4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80088a8:	460b      	mov	r3, r1
 80088aa:	4313      	orrs	r3, r2
 80088ac:	d043      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80088ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d824      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80088ba:	a201      	add	r2, pc, #4	@ (adr r2, 80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	0800890d 	.word	0x0800890d
 80088c4:	080088d9 	.word	0x080088d9
 80088c8:	080088ef 	.word	0x080088ef
 80088cc:	0800890d 	.word	0x0800890d
 80088d0:	0800890d 	.word	0x0800890d
 80088d4:	0800890d 	.word	0x0800890d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088dc:	3308      	adds	r3, #8
 80088de:	2101      	movs	r1, #1
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fdf1 	bl	800a4c8 <RCCEx_PLL2_Config>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80088ec:	e00f      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f2:	3328      	adds	r3, #40	@ 0x28
 80088f4:	2101      	movs	r1, #1
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 fe98 	bl	800a62c <RCCEx_PLL3_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008902:	e004      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800890a:	e000      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800890c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800890e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008916:	4b96      	ldr	r3, [pc, #600]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800891a:	f023 0107 	bic.w	r1, r3, #7
 800891e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008926:	4a92      	ldr	r2, [pc, #584]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008928:	430b      	orrs	r3, r1
 800892a:	6553      	str	r3, [r2, #84]	@ 0x54
 800892c:	e003      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008932:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f002 0304 	and.w	r3, r2, #4
 8008942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008946:	2300      	movs	r3, #0
 8008948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800894c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008950:	460b      	mov	r3, r1
 8008952:	4313      	orrs	r3, r2
 8008954:	d043      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800895a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800895e:	2b05      	cmp	r3, #5
 8008960:	d824      	bhi.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	080089b5 	.word	0x080089b5
 800896c:	08008981 	.word	0x08008981
 8008970:	08008997 	.word	0x08008997
 8008974:	080089b5 	.word	0x080089b5
 8008978:	080089b5 	.word	0x080089b5
 800897c:	080089b5 	.word	0x080089b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008984:	3308      	adds	r3, #8
 8008986:	2101      	movs	r1, #1
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fd9d 	bl	800a4c8 <RCCEx_PLL2_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008994:	e00f      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800899a:	3328      	adds	r3, #40	@ 0x28
 800899c:	2101      	movs	r1, #1
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 fe44 	bl	800a62c <RCCEx_PLL3_Config>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089aa:	e004      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089b2:	e000      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80089b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10b      	bne.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089be:	4b6c      	ldr	r3, [pc, #432]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80089c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c2:	f023 0107 	bic.w	r1, r3, #7
 80089c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089ce:	4a68      	ldr	r2, [pc, #416]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80089d0:	430b      	orrs	r3, r1
 80089d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80089d4:	e003      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	f002 0320 	and.w	r3, r2, #32
 80089ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089ee:	2300      	movs	r3, #0
 80089f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089f8:	460b      	mov	r3, r1
 80089fa:	4313      	orrs	r3, r2
 80089fc:	d055      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80089fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a0a:	d033      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a10:	d82c      	bhi.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a16:	d02f      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1c:	d826      	bhi.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a22:	d02b      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a28:	d820      	bhi.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a2e:	d012      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a34:	d81a      	bhi.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d022      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008a3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a3e:	d115      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a44:	3308      	adds	r3, #8
 8008a46:	2100      	movs	r1, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 fd3d 	bl	800a4c8 <RCCEx_PLL2_Config>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a54:	e015      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a5a:	3328      	adds	r3, #40	@ 0x28
 8008a5c:	2102      	movs	r1, #2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 fde4 	bl	800a62c <RCCEx_PLL3_Config>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a6a:	e00a      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a72:	e006      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a74:	bf00      	nop
 8008a76:	e004      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a78:	bf00      	nop
 8008a7a:	e002      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a7c:	bf00      	nop
 8008a7e:	e000      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10b      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a8a:	4b39      	ldr	r3, [pc, #228]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a8e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a9a:	4a35      	ldr	r2, [pc, #212]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008aa0:	e003      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aa6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008aba:	2300      	movs	r3, #0
 8008abc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008ac0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	d058      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ad2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008ad6:	d033      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008ad8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008adc:	d82c      	bhi.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ae2:	d02f      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ae8:	d826      	bhi.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008aea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008aee:	d02b      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008af0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008af4:	d820      	bhi.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008af6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008afa:	d012      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b00:	d81a      	bhi.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d022      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b0a:	d115      	bne.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b10:	3308      	adds	r3, #8
 8008b12:	2100      	movs	r1, #0
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 fcd7 	bl	800a4c8 <RCCEx_PLL2_Config>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b20:	e015      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b26:	3328      	adds	r3, #40	@ 0x28
 8008b28:	2102      	movs	r1, #2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fd7e 	bl	800a62c <RCCEx_PLL3_Config>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b36:	e00a      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b3e:	e006      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b40:	bf00      	nop
 8008b42:	e004      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b44:	bf00      	nop
 8008b46:	e002      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10e      	bne.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b56:	4b06      	ldr	r3, [pc, #24]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b66:	4a02      	ldr	r2, [pc, #8]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b68:	430b      	orrs	r3, r1
 8008b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b6c:	e006      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008b6e:	bf00      	nop
 8008b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b96:	460b      	mov	r3, r1
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	d055      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ba0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ba4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ba8:	d033      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008baa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bae:	d82c      	bhi.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bb4:	d02f      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bba:	d826      	bhi.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008bbc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008bc0:	d02b      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008bc2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008bc6:	d820      	bhi.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008bc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bcc:	d012      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008bce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bd2:	d81a      	bhi.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d022      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bdc:	d115      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be2:	3308      	adds	r3, #8
 8008be4:	2100      	movs	r1, #0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 fc6e 	bl	800a4c8 <RCCEx_PLL2_Config>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008bf2:	e015      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf8:	3328      	adds	r3, #40	@ 0x28
 8008bfa:	2102      	movs	r1, #2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 fd15 	bl	800a62c <RCCEx_PLL3_Config>
 8008c02:	4603      	mov	r3, r0
 8008c04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c08:	e00a      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c10:	e006      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c12:	bf00      	nop
 8008c14:	e004      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c16:	bf00      	nop
 8008c18:	e002      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c1a:	bf00      	nop
 8008c1c:	e000      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10b      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c28:	4ba1      	ldr	r3, [pc, #644]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c2c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c38:	4a9d      	ldr	r2, [pc, #628]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c3a:	430b      	orrs	r3, r1
 8008c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c3e:	e003      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f002 0308 	and.w	r3, r2, #8
 8008c54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c62:	460b      	mov	r3, r1
 8008c64:	4313      	orrs	r3, r2
 8008c66:	d01e      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c74:	d10c      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c7a:	3328      	adds	r3, #40	@ 0x28
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 fcd4 	bl	800a62c <RCCEx_PLL3_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c90:	4b87      	ldr	r3, [pc, #540]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c94:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ca0:	4a83      	ldr	r2, [pc, #524]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f002 0310 	and.w	r3, r2, #16
 8008cb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008cbc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	d01e      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cd2:	d10c      	bne.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd8:	3328      	adds	r3, #40	@ 0x28
 8008cda:	2102      	movs	r1, #2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f001 fca5 	bl	800a62c <RCCEx_PLL3_Config>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008cee:	4b70      	ldr	r3, [pc, #448]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cfe:	4a6c      	ldr	r2, [pc, #432]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d00:	430b      	orrs	r3, r1
 8008d02:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4313      	orrs	r3, r2
 8008d22:	d03e      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d30:	d022      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008d32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d36:	d81b      	bhi.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d40:	d00b      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008d42:	e015      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d48:	3308      	adds	r3, #8
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f001 fbbb 	bl	800a4c8 <RCCEx_PLL2_Config>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d58:	e00f      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5e:	3328      	adds	r3, #40	@ 0x28
 8008d60:	2102      	movs	r1, #2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f001 fc62 	bl	800a62c <RCCEx_PLL3_Config>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d6e:	e004      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d76:	e000      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10b      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d82:	4b4b      	ldr	r3, [pc, #300]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d86:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d92:	4a47      	ldr	r2, [pc, #284]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d94:	430b      	orrs	r3, r1
 8008d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d98:	e003      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008daa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008dae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008db0:	2300      	movs	r3, #0
 8008db2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008db4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008db8:	460b      	mov	r3, r1
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	d03b      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008dca:	d01f      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008dcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008dd0:	d818      	bhi.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dd6:	d003      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008dd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ddc:	d007      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008dde:	e011      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de0:	4b33      	ldr	r3, [pc, #204]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	4a32      	ldr	r2, [pc, #200]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008dec:	e00f      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df2:	3328      	adds	r3, #40	@ 0x28
 8008df4:	2101      	movs	r1, #1
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 fc18 	bl	800a62c <RCCEx_PLL3_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e02:	e004      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e0a:	e000      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e16:	4b26      	ldr	r3, [pc, #152]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e26:	4a22      	ldr	r2, [pc, #136]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e2c:	e003      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008e42:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e44:	2300      	movs	r3, #0
 8008e46:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	d034      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e60:	d007      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008e62:	e011      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e64:	4b12      	ldr	r3, [pc, #72]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	4a11      	ldr	r2, [pc, #68]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e70:	e00e      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e76:	3308      	adds	r3, #8
 8008e78:	2102      	movs	r1, #2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f001 fb24 	bl	800a4c8 <RCCEx_PLL2_Config>
 8008e80:	4603      	mov	r3, r0
 8008e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e86:	e003      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10d      	bne.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e98:	4b05      	ldr	r3, [pc, #20]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea6:	4a02      	ldr	r2, [pc, #8]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ea8:	430b      	orrs	r3, r1
 8008eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008eac:	e006      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008eae:	bf00      	nop
 8008eb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008eca:	2300      	movs	r3, #0
 8008ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ece:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	d00c      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008edc:	3328      	adds	r3, #40	@ 0x28
 8008ede:	2102      	movs	r1, #2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fba3 	bl	800a62c <RCCEx_PLL3_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008efe:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f00:	2300      	movs	r3, #0
 8008f02:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	d038      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f1a:	d018      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f20:	d811      	bhi.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f26:	d014      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f2c:	d80b      	bhi.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d011      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f36:	d106      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f38:	4bc3      	ldr	r3, [pc, #780]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3c:	4ac2      	ldr	r2, [pc, #776]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008f44:	e008      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f4c:	e004      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f4e:	bf00      	nop
 8008f50:	e002      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f52:	bf00      	nop
 8008f54:	e000      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10b      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f60:	4bb9      	ldr	r3, [pc, #740]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f70:	4ab5      	ldr	r2, [pc, #724]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f72:	430b      	orrs	r3, r1
 8008f74:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f76:	e003      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f8e:	2300      	movs	r3, #0
 8008f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f96:	460b      	mov	r3, r1
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	d009      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f9c:	4baa      	ldr	r3, [pc, #680]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008faa:	4aa7      	ldr	r2, [pc, #668]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fac:	430b      	orrs	r3, r1
 8008fae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008fbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	d009      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fcc:	4b9e      	ldr	r3, [pc, #632]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fd0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fda:	4a9b      	ldr	r2, [pc, #620]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008fec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fee:	2300      	movs	r3, #0
 8008ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ff2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	d009      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008ffc:	4b92      	ldr	r3, [pc, #584]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009000:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800900a:	4a8f      	ldr	r2, [pc, #572]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800900c:	430b      	orrs	r3, r1
 800900e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800901c:	643b      	str	r3, [r7, #64]	@ 0x40
 800901e:	2300      	movs	r3, #0
 8009020:	647b      	str	r3, [r7, #68]	@ 0x44
 8009022:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009026:	460b      	mov	r3, r1
 8009028:	4313      	orrs	r3, r2
 800902a:	d00e      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800902c:	4b86      	ldr	r3, [pc, #536]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	4a85      	ldr	r2, [pc, #532]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009032:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009036:	6113      	str	r3, [r2, #16]
 8009038:	4b83      	ldr	r3, [pc, #524]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800903a:	6919      	ldr	r1, [r3, #16]
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009040:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009044:	4a80      	ldr	r2, [pc, #512]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009046:	430b      	orrs	r3, r1
 8009048:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800904a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009056:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009058:	2300      	movs	r3, #0
 800905a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800905c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009060:	460b      	mov	r3, r1
 8009062:	4313      	orrs	r3, r2
 8009064:	d009      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009066:	4b78      	ldr	r3, [pc, #480]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800906a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800906e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009074:	4a74      	ldr	r2, [pc, #464]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009076:	430b      	orrs	r3, r1
 8009078:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800907a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009086:	633b      	str	r3, [r7, #48]	@ 0x30
 8009088:	2300      	movs	r3, #0
 800908a:	637b      	str	r3, [r7, #52]	@ 0x34
 800908c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009090:	460b      	mov	r3, r1
 8009092:	4313      	orrs	r3, r2
 8009094:	d00a      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009096:	4b6c      	ldr	r3, [pc, #432]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800909a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800909e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090a6:	4a68      	ldr	r2, [pc, #416]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090a8:	430b      	orrs	r3, r1
 80090aa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80090ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	2100      	movs	r1, #0
 80090b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80090c2:	460b      	mov	r3, r1
 80090c4:	4313      	orrs	r3, r2
 80090c6:	d011      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090cc:	3308      	adds	r3, #8
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 f9f9 	bl	800a4c8 <RCCEx_PLL2_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80090dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80090ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	2100      	movs	r1, #0
 80090f6:	6239      	str	r1, [r7, #32]
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80090fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009102:	460b      	mov	r3, r1
 8009104:	4313      	orrs	r3, r2
 8009106:	d011      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800910c:	3308      	adds	r3, #8
 800910e:	2101      	movs	r1, #1
 8009110:	4618      	mov	r0, r3
 8009112:	f001 f9d9 	bl	800a4c8 <RCCEx_PLL2_Config>
 8009116:	4603      	mov	r3, r0
 8009118:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800911c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009128:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	2100      	movs	r1, #0
 8009136:	61b9      	str	r1, [r7, #24]
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	61fb      	str	r3, [r7, #28]
 800913e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009142:	460b      	mov	r3, r1
 8009144:	4313      	orrs	r3, r2
 8009146:	d011      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800914c:	3308      	adds	r3, #8
 800914e:	2102      	movs	r1, #2
 8009150:	4618      	mov	r0, r3
 8009152:	f001 f9b9 	bl	800a4c8 <RCCEx_PLL2_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800915c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009168:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800916c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	2100      	movs	r1, #0
 8009176:	6139      	str	r1, [r7, #16]
 8009178:	f003 0308 	and.w	r3, r3, #8
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009182:	460b      	mov	r3, r1
 8009184:	4313      	orrs	r3, r2
 8009186:	d011      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800918c:	3328      	adds	r3, #40	@ 0x28
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f001 fa4b 	bl	800a62c <RCCEx_PLL3_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800919c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d003      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80091ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	2100      	movs	r1, #0
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	f003 0310 	and.w	r3, r3, #16
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80091c2:	460b      	mov	r3, r1
 80091c4:	4313      	orrs	r3, r2
 80091c6:	d011      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091cc:	3328      	adds	r3, #40	@ 0x28
 80091ce:	2101      	movs	r1, #1
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 fa2b 	bl	800a62c <RCCEx_PLL3_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80091dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80091ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	2100      	movs	r1, #0
 80091f6:	6039      	str	r1, [r7, #0]
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	607b      	str	r3, [r7, #4]
 80091fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009202:	460b      	mov	r3, r1
 8009204:	4313      	orrs	r3, r2
 8009206:	d011      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800920c:	3328      	adds	r3, #40	@ 0x28
 800920e:	2102      	movs	r1, #2
 8009210:	4618      	mov	r0, r3
 8009212:	f001 fa0b 	bl	800a62c <RCCEx_PLL3_Config>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800921c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009224:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009228:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800922c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	e000      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
}
 800923a:	4618      	mov	r0, r3
 800923c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009240:	46bd      	mov	sp, r7
 8009242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009246:	bf00      	nop
 8009248:	58024400 	.word	0x58024400

0800924c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b090      	sub	sp, #64	@ 0x40
 8009250:	af00      	add	r7, sp, #0
 8009252:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800925e:	430b      	orrs	r3, r1
 8009260:	f040 8094 	bne.w	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009264:	4b97      	ldr	r3, [pc, #604]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800926e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009270:	2b04      	cmp	r3, #4
 8009272:	f200 8087 	bhi.w	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009276:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	08009291 	.word	0x08009291
 8009280:	080092b9 	.word	0x080092b9
 8009284:	080092e1 	.word	0x080092e1
 8009288:	0800937d 	.word	0x0800937d
 800928c:	08009309 	.word	0x08009309
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009290:	4b8c      	ldr	r3, [pc, #560]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800929c:	d108      	bne.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800929e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 ff68 	bl	800a178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ac:	f000 bc97 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b4:	f000 bc93 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092b8:	4b82      	ldr	r3, [pc, #520]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092c4:	d108      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c6:	f107 0318 	add.w	r3, r7, #24
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fcac 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d4:	f000 bc83 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092dc:	f000 bc7f 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092e0:	4b78      	ldr	r3, [pc, #480]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092ec:	d108      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ee:	f107 030c 	add.w	r3, r7, #12
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 fdec 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092fc:	f000 bc6f 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009304:	f000 bc6b 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009308:	4b6e      	ldr	r3, [pc, #440]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800930a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800930c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009310:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009312:	4b6c      	ldr	r3, [pc, #432]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0304 	and.w	r3, r3, #4
 800931a:	2b04      	cmp	r3, #4
 800931c:	d10c      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800931e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009320:	2b00      	cmp	r3, #0
 8009322:	d109      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009324:	4b67      	ldr	r3, [pc, #412]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	08db      	lsrs	r3, r3, #3
 800932a:	f003 0303 	and.w	r3, r3, #3
 800932e:	4a66      	ldr	r2, [pc, #408]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009330:	fa22 f303 	lsr.w	r3, r2, r3
 8009334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009336:	e01f      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009338:	4b62      	ldr	r3, [pc, #392]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009344:	d106      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800934c:	d102      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800934e:	4b5f      	ldr	r3, [pc, #380]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009352:	e011      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009354:	4b5b      	ldr	r3, [pc, #364]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800935c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009360:	d106      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009368:	d102      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800936a:	4b59      	ldr	r3, [pc, #356]	@ (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800936e:	e003      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009374:	f000 bc33 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009378:	f000 bc31 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800937c:	4b55      	ldr	r3, [pc, #340]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009380:	f000 bc2d 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009388:	f000 bc29 	b.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800938c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009390:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009394:	430b      	orrs	r3, r1
 8009396:	f040 809f 	bne.w	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800939a:	4b4a      	ldr	r3, [pc, #296]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800939c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800939e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80093a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093aa:	d04d      	beq.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093b2:	f200 8084 	bhi.w	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80093ba:	d07d      	beq.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	2bc0      	cmp	r3, #192	@ 0xc0
 80093c0:	d87d      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	2b80      	cmp	r3, #128	@ 0x80
 80093c6:	d02d      	beq.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	2b80      	cmp	r3, #128	@ 0x80
 80093cc:	d877      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	2b40      	cmp	r3, #64	@ 0x40
 80093d8:	d012      	beq.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80093da:	e070      	b.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093dc:	4b39      	ldr	r3, [pc, #228]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093e8:	d107      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fec2 	bl	800a178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f8:	e3f1      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fe:	e3ee      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009400:	4b30      	ldr	r3, [pc, #192]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800940c:	d107      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fc08 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941c:	e3df      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009422:	e3dc      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009424:	4b27      	ldr	r3, [pc, #156]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800942c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009430:	d107      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009432:	f107 030c 	add.w	r3, r7, #12
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fd4a 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009440:	e3cd      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009446:	e3ca      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009448:	4b1e      	ldr	r3, [pc, #120]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800944a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800944c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009452:	4b1c      	ldr	r3, [pc, #112]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b04      	cmp	r3, #4
 800945c:	d10c      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800945e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009460:	2b00      	cmp	r3, #0
 8009462:	d109      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009464:	4b17      	ldr	r3, [pc, #92]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	08db      	lsrs	r3, r3, #3
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	4a16      	ldr	r2, [pc, #88]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009470:	fa22 f303 	lsr.w	r3, r2, r3
 8009474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009476:	e01e      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009478:	4b12      	ldr	r3, [pc, #72]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009484:	d106      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800948c:	d102      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800948e:	4b0f      	ldr	r3, [pc, #60]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009492:	e010      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009494:	4b0b      	ldr	r3, [pc, #44]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800949c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094a0:	d106      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80094a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a8:	d102      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094aa:	4b09      	ldr	r3, [pc, #36]	@ (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094ae:	e002      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094b4:	e393      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094b6:	e392      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094b8:	4b06      	ldr	r3, [pc, #24]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094bc:	e38f      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c2:	e38c      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094c4:	58024400 	.word	0x58024400
 80094c8:	03d09000 	.word	0x03d09000
 80094cc:	003d0900 	.word	0x003d0900
 80094d0:	007a1200 	.word	0x007a1200
 80094d4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80094d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094dc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80094e0:	430b      	orrs	r3, r1
 80094e2:	f040 809c 	bne.w	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80094e6:	4b9e      	ldr	r3, [pc, #632]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ea:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80094ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80094f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094f6:	d054      	beq.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094fe:	f200 808b 	bhi.w	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009504:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009508:	f000 8083 	beq.w	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009512:	f200 8081 	bhi.w	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800951c:	d02f      	beq.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800951e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009524:	d878      	bhi.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	2b00      	cmp	r3, #0
 800952a:	d004      	beq.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800952c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009532:	d012      	beq.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009534:	e070      	b.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009536:	4b8a      	ldr	r3, [pc, #552]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800953e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009542:	d107      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fe15 	bl	800a178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800954e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009552:	e344      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009558:	e341      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800955a:	4b81      	ldr	r3, [pc, #516]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009566:	d107      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009568:	f107 0318 	add.w	r3, r7, #24
 800956c:	4618      	mov	r0, r3
 800956e:	f000 fb5b 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009576:	e332      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957c:	e32f      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800957e:	4b78      	ldr	r3, [pc, #480]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800958a:	d107      	bne.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800958c:	f107 030c 	add.w	r3, r7, #12
 8009590:	4618      	mov	r0, r3
 8009592:	f000 fc9d 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959a:	e320      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a0:	e31d      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095a2:	4b6f      	ldr	r3, [pc, #444]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095ac:	4b6c      	ldr	r3, [pc, #432]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	d10c      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80095b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d109      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095be:	4b68      	ldr	r3, [pc, #416]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	08db      	lsrs	r3, r3, #3
 80095c4:	f003 0303 	and.w	r3, r3, #3
 80095c8:	4a66      	ldr	r2, [pc, #408]	@ (8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80095ca:	fa22 f303 	lsr.w	r3, r2, r3
 80095ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095d0:	e01e      	b.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095d2:	4b63      	ldr	r3, [pc, #396]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095de:	d106      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80095e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095e6:	d102      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095e8:	4b5f      	ldr	r3, [pc, #380]	@ (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80095ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ec:	e010      	b.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095ee:	4b5c      	ldr	r3, [pc, #368]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095fa:	d106      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80095fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009602:	d102      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009604:	4b59      	ldr	r3, [pc, #356]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009608:	e002      	b.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800960e:	e2e6      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009610:	e2e5      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009612:	4b57      	ldr	r3, [pc, #348]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009616:	e2e2      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961c:	e2df      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800961e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009622:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009626:	430b      	orrs	r3, r1
 8009628:	f040 80a7 	bne.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800962c:	4b4c      	ldr	r3, [pc, #304]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800962e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009630:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009634:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800963c:	d055      	beq.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800963e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009644:	f200 8096 	bhi.w	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800964e:	f000 8084 	beq.w	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8009652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009654:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009658:	f200 808c 	bhi.w	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800965c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009662:	d030      	beq.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8009664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800966a:	f200 8083 	bhi.w	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800967a:	d012      	beq.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800967c:	e07a      	b.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800967e:	4b38      	ldr	r3, [pc, #224]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800968a:	d107      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800968c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fd71 	bl	800a178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800969a:	e2a0      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a0:	e29d      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096ae:	d107      	bne.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b0:	f107 0318 	add.w	r3, r7, #24
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fab7 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096be:	e28e      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c4:	e28b      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096c6:	4b26      	ldr	r3, [pc, #152]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d2:	d107      	bne.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d4:	f107 030c 	add.w	r3, r7, #12
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fbf9 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e2:	e27c      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e8:	e279      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80096f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b04      	cmp	r3, #4
 80096fe:	d10c      	bne.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8009700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009702:	2b00      	cmp	r3, #0
 8009704:	d109      	bne.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009706:	4b16      	ldr	r3, [pc, #88]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	08db      	lsrs	r3, r3, #3
 800970c:	f003 0303 	and.w	r3, r3, #3
 8009710:	4a14      	ldr	r2, [pc, #80]	@ (8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009712:	fa22 f303 	lsr.w	r3, r2, r3
 8009716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009718:	e01e      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800971a:	4b11      	ldr	r3, [pc, #68]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009726:	d106      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800972e:	d102      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009730:	4b0d      	ldr	r3, [pc, #52]	@ (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009734:	e010      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009736:	4b0a      	ldr	r3, [pc, #40]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800973e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009742:	d106      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800974a:	d102      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800974c:	4b07      	ldr	r3, [pc, #28]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009750:	e002      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009756:	e242      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009758:	e241      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800975a:	4b05      	ldr	r3, [pc, #20]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800975e:	e23e      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009760:	58024400 	.word	0x58024400
 8009764:	03d09000 	.word	0x03d09000
 8009768:	003d0900 	.word	0x003d0900
 800976c:	007a1200 	.word	0x007a1200
 8009770:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009778:	e231      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800977a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800977e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009782:	430b      	orrs	r3, r1
 8009784:	f040 8085 	bne.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009788:	4b9c      	ldr	r3, [pc, #624]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800978a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800978c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009790:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009798:	d06b      	beq.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800979a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097a0:	d874      	bhi.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80097a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097a8:	d056      	beq.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80097aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097b0:	d86c      	bhi.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80097b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097b8:	d03b      	beq.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80097ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097c0:	d864      	bhi.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80097c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c8:	d021      	beq.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097d0:	d85c      	bhi.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80097d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d004      	beq.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80097d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097de:	d004      	beq.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80097e0:	e054      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80097e2:	f7fe fb49 	bl	8007e78 <HAL_RCC_GetPCLK1Freq>
 80097e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097e8:	e1f9      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097ea:	4b84      	ldr	r3, [pc, #528]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097f6:	d107      	bne.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097f8:	f107 0318 	add.w	r3, r7, #24
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fa13 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009806:	e1ea      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800980c:	e1e7      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800980e:	4b7b      	ldr	r3, [pc, #492]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800981a:	d107      	bne.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800981c:	f107 030c 	add.w	r3, r7, #12
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fb55 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800982a:	e1d8      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009830:	e1d5      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009832:	4b72      	ldr	r3, [pc, #456]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0304 	and.w	r3, r3, #4
 800983a:	2b04      	cmp	r3, #4
 800983c:	d109      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800983e:	4b6f      	ldr	r3, [pc, #444]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	08db      	lsrs	r3, r3, #3
 8009844:	f003 0303 	and.w	r3, r3, #3
 8009848:	4a6d      	ldr	r2, [pc, #436]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800984a:	fa22 f303 	lsr.w	r3, r2, r3
 800984e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009850:	e1c5      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009856:	e1c2      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009858:	4b68      	ldr	r3, [pc, #416]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009864:	d102      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8009866:	4b67      	ldr	r3, [pc, #412]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800986a:	e1b8      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009870:	e1b5      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009872:	4b62      	ldr	r3, [pc, #392]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800987a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800987e:	d102      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8009880:	4b61      	ldr	r3, [pc, #388]	@ (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009884:	e1ab      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988a:	e1a8      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009890:	e1a5      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009896:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800989a:	430b      	orrs	r3, r1
 800989c:	d173      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800989e:	4b57      	ldr	r3, [pc, #348]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098ae:	d02f      	beq.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80098b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098b6:	d863      	bhi.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80098b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098c4:	d012      	beq.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80098c6:	e05b      	b.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098c8:	4b4c      	ldr	r3, [pc, #304]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098d4:	d107      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098d6:	f107 0318 	add.w	r3, r7, #24
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f9a4 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098e4:	e17b      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ea:	e178      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098ec:	4b43      	ldr	r3, [pc, #268]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f8:	d107      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098fa:	f107 030c 	add.w	r3, r7, #12
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fae6 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009908:	e169      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990e:	e166      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009910:	4b3a      	ldr	r3, [pc, #232]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009914:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009918:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800991a:	4b38      	ldr	r3, [pc, #224]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	2b04      	cmp	r3, #4
 8009924:	d10c      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8009926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009928:	2b00      	cmp	r3, #0
 800992a:	d109      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800992c:	4b33      	ldr	r3, [pc, #204]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	08db      	lsrs	r3, r3, #3
 8009932:	f003 0303 	and.w	r3, r3, #3
 8009936:	4a32      	ldr	r2, [pc, #200]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009938:	fa22 f303 	lsr.w	r3, r2, r3
 800993c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800993e:	e01e      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009940:	4b2e      	ldr	r3, [pc, #184]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800994c:	d106      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800994e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009954:	d102      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009956:	4b2b      	ldr	r3, [pc, #172]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800995a:	e010      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800995c:	4b27      	ldr	r3, [pc, #156]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009968:	d106      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800996a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800996c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009970:	d102      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009972:	4b25      	ldr	r3, [pc, #148]	@ (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009976:	e002      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800997c:	e12f      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800997e:	e12e      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009984:	e12b      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800998a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800998e:	430b      	orrs	r3, r1
 8009990:	d13c      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009992:	4b1a      	ldr	r3, [pc, #104]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800999a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d004      	beq.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a8:	d012      	beq.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80099aa:	e023      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099ac:	4b13      	ldr	r3, [pc, #76]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099b8:	d107      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fbda 	bl	800a178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099c8:	e109      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ce:	e106      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099d0:	4b0a      	ldr	r3, [pc, #40]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099dc:	d107      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099de:	f107 0318 	add.w	r3, r7, #24
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f920 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ec:	e0f7      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f2:	e0f4      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f8:	e0f1      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80099fa:	bf00      	nop
 80099fc:	58024400 	.word	0x58024400
 8009a00:	03d09000 	.word	0x03d09000
 8009a04:	003d0900 	.word	0x003d0900
 8009a08:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a10:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009a14:	430b      	orrs	r3, r1
 8009a16:	f040 8091 	bne.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a1a:	4b73      	ldr	r3, [pc, #460]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a1e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009a22:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a26:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a2a:	f000 8081 	beq.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a30:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a34:	d87f      	bhi.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a3c:	d06b      	beq.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a44:	d877      	bhi.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4c:	d056      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a54:	d86f      	bhi.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a5c:	d03b      	beq.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a64:	d867      	bhi.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a6c:	d021      	beq.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a74:	d85f      	bhi.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d004      	beq.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a82:	d004      	beq.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009a84:	e057      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a86:	f000 f8b9 	bl	8009bfc <HAL_RCCEx_GetD3PCLK1Freq>
 8009a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a8c:	e0a7      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a8e:	4b56      	ldr	r3, [pc, #344]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a9a:	d107      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a9c:	f107 0318 	add.w	r3, r7, #24
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 f8c1 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aaa:	e098      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab0:	e095      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abe:	d107      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ac0:	f107 030c 	add.w	r3, r7, #12
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fa03 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ace:	e086      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad4:	e083      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ad6:	4b44      	ldr	r3, [pc, #272]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0304 	and.w	r3, r3, #4
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d109      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae2:	4b41      	ldr	r3, [pc, #260]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	08db      	lsrs	r3, r3, #3
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	4a3f      	ldr	r2, [pc, #252]	@ (8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009aee:	fa22 f303 	lsr.w	r3, r2, r3
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009af4:	e073      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afa:	e070      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009afc:	4b3a      	ldr	r3, [pc, #232]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b08:	d102      	bne.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009b0a:	4b39      	ldr	r3, [pc, #228]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b0e:	e066      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b14:	e063      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b16:	4b34      	ldr	r3, [pc, #208]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b22:	d102      	bne.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009b24:	4b33      	ldr	r3, [pc, #204]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b28:	e059      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2e:	e056      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b30:	4b31      	ldr	r3, [pc, #196]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b34:	e053      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3a:	e050      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b40:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009b44:	430b      	orrs	r3, r1
 8009b46:	d148      	bne.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009b48:	4b27      	ldr	r3, [pc, #156]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b58:	d02a      	beq.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b60:	d838      	bhi.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b6e:	d00d      	beq.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009b70:	e030      	b.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b72:	4b1d      	ldr	r3, [pc, #116]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b7e:	d102      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009b80:	4b1c      	ldr	r3, [pc, #112]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b84:	e02b      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b8a:	e028      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b8c:	4b16      	ldr	r3, [pc, #88]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b98:	d107      	bne.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 faea 	bl	800a178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ba8:	e019      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bae:	e016      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bbc:	d107      	bne.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bbe:	f107 0318 	add.w	r3, r7, #24
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f830 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bcc:	e007      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd2:	e004      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd8:	e001      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3740      	adds	r7, #64	@ 0x40
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	58024400 	.word	0x58024400
 8009bec:	03d09000 	.word	0x03d09000
 8009bf0:	003d0900 	.word	0x003d0900
 8009bf4:	007a1200 	.word	0x007a1200
 8009bf8:	00bb8000 	.word	0x00bb8000

08009bfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009c00:	f7fe f90a 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8009c04:	4602      	mov	r2, r0
 8009c06:	4b06      	ldr	r3, [pc, #24]	@ (8009c20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	091b      	lsrs	r3, r3, #4
 8009c0c:	f003 0307 	and.w	r3, r3, #7
 8009c10:	4904      	ldr	r1, [pc, #16]	@ (8009c24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c12:	5ccb      	ldrb	r3, [r1, r3]
 8009c14:	f003 031f 	and.w	r3, r3, #31
 8009c18:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	58024400 	.word	0x58024400
 8009c24:	0800ef94 	.word	0x0800ef94

08009c28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b089      	sub	sp, #36	@ 0x24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c30:	4ba1      	ldr	r3, [pc, #644]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009c3a:	4b9f      	ldr	r3, [pc, #636]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3e:	0b1b      	lsrs	r3, r3, #12
 8009c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c46:	4b9c      	ldr	r3, [pc, #624]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4a:	091b      	lsrs	r3, r3, #4
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009c52:	4b99      	ldr	r3, [pc, #612]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c56:	08db      	lsrs	r3, r3, #3
 8009c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	fb02 f303 	mul.w	r3, r2, r3
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 8111 	beq.w	8009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	f000 8083 	beq.w	8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	f200 80a1 	bhi.w	8009dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d056      	beq.n	8009d40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c92:	e099      	b.n	8009dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c94:	4b88      	ldr	r3, [pc, #544]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0320 	and.w	r3, r3, #32
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d02d      	beq.n	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ca0:	4b85      	ldr	r3, [pc, #532]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	08db      	lsrs	r3, r3, #3
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	4a84      	ldr	r2, [pc, #528]	@ (8009ebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009cac:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cca:	4b7b      	ldr	r3, [pc, #492]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cfa:	e087      	b.n	8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d3e:	e065      	b.n	8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d52:	4b59      	ldr	r3, [pc, #356]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5a:	ee07 3a90 	vmov	s15, r3
 8009d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d82:	e043      	b.n	8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d96:	4b48      	ldr	r3, [pc, #288]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009daa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dc6:	e021      	b.n	8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dda:	4b37      	ldr	r3, [pc, #220]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e10:	0a5b      	lsrs	r3, r3, #9
 8009e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e32:	ee17 2a90 	vmov	r2, s15
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3e:	0c1b      	lsrs	r3, r3, #16
 8009e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e44:	ee07 3a90 	vmov	s15, r3
 8009e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e60:	ee17 2a90 	vmov	r2, s15
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009e68:	4b13      	ldr	r3, [pc, #76]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e6c:	0e1b      	lsrs	r3, r3, #24
 8009e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8e:	ee17 2a90 	vmov	r2, s15
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e96:	e008      	b.n	8009eaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	609a      	str	r2, [r3, #8]
}
 8009eaa:	bf00      	nop
 8009eac:	3724      	adds	r7, #36	@ 0x24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	58024400 	.word	0x58024400
 8009ebc:	03d09000 	.word	0x03d09000
 8009ec0:	46000000 	.word	0x46000000
 8009ec4:	4c742400 	.word	0x4c742400
 8009ec8:	4a742400 	.word	0x4a742400
 8009ecc:	4af42400 	.word	0x4af42400

08009ed0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b089      	sub	sp, #36	@ 0x24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ed8:	4ba1      	ldr	r3, [pc, #644]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009edc:	f003 0303 	and.w	r3, r3, #3
 8009ee0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009ee2:	4b9f      	ldr	r3, [pc, #636]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee6:	0d1b      	lsrs	r3, r3, #20
 8009ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009eec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009eee:	4b9c      	ldr	r3, [pc, #624]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef2:	0a1b      	lsrs	r3, r3, #8
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009efa:	4b99      	ldr	r3, [pc, #612]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efe:	08db      	lsrs	r3, r3, #3
 8009f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	fb02 f303 	mul.w	r3, r2, r3
 8009f0a:	ee07 3a90 	vmov	s15, r3
 8009f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 8111 	beq.w	800a140 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	f000 8083 	beq.w	800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	f200 80a1 	bhi.w	800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d003      	beq.n	8009f3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d056      	beq.n	8009fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f3a:	e099      	b.n	800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f3c:	4b88      	ldr	r3, [pc, #544]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d02d      	beq.n	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f48:	4b85      	ldr	r3, [pc, #532]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	08db      	lsrs	r3, r3, #3
 8009f4e:	f003 0303 	and.w	r3, r3, #3
 8009f52:	4a84      	ldr	r2, [pc, #528]	@ (800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f54:	fa22 f303 	lsr.w	r3, r2, r3
 8009f58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f72:	4b7b      	ldr	r3, [pc, #492]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fa2:	e087      	b.n	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb6:	4b6a      	ldr	r3, [pc, #424]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fe6:	e065      	b.n	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffa:	4b59      	ldr	r3, [pc, #356]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a002:	ee07 3a90 	vmov	s15, r3
 800a006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a00e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a02a:	e043      	b.n	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a036:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03e:	4b48      	ldr	r3, [pc, #288]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a046:	ee07 3a90 	vmov	s15, r3
 800a04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a052:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a06e:	e021      	b.n	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a082:	4b37      	ldr	r3, [pc, #220]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a092:	ed97 6a03 	vldr	s12, [r7, #12]
 800a096:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a0b4:	4b2a      	ldr	r3, [pc, #168]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b8:	0a5b      	lsrs	r3, r3, #9
 800a0ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0da:	ee17 2a90 	vmov	r2, s15
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a0e2:	4b1f      	ldr	r3, [pc, #124]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ec:	ee07 3a90 	vmov	s15, r3
 800a0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a108:	ee17 2a90 	vmov	r2, s15
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a110:	4b13      	ldr	r3, [pc, #76]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a114:	0e1b      	lsrs	r3, r3, #24
 800a116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a11a:	ee07 3a90 	vmov	s15, r3
 800a11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a12a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a136:	ee17 2a90 	vmov	r2, s15
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a13e:	e008      	b.n	800a152 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	609a      	str	r2, [r3, #8]
}
 800a152:	bf00      	nop
 800a154:	3724      	adds	r7, #36	@ 0x24
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	58024400 	.word	0x58024400
 800a164:	03d09000 	.word	0x03d09000
 800a168:	46000000 	.word	0x46000000
 800a16c:	4c742400 	.word	0x4c742400
 800a170:	4a742400 	.word	0x4a742400
 800a174:	4af42400 	.word	0x4af42400

0800a178 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a178:	b480      	push	{r7}
 800a17a:	b089      	sub	sp, #36	@ 0x24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a180:	4ba0      	ldr	r3, [pc, #640]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a184:	f003 0303 	and.w	r3, r3, #3
 800a188:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a18a:	4b9e      	ldr	r3, [pc, #632]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18e:	091b      	lsrs	r3, r3, #4
 800a190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a194:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a196:	4b9b      	ldr	r3, [pc, #620]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a1a0:	4b98      	ldr	r3, [pc, #608]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a4:	08db      	lsrs	r3, r3, #3
 800a1a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	fb02 f303 	mul.w	r3, r2, r3
 800a1b0:	ee07 3a90 	vmov	s15, r3
 800a1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f000 8111 	beq.w	800a3e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	f000 8083 	beq.w	800a2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	f200 80a1 	bhi.w	800a316 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d056      	beq.n	800a28e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a1e0:	e099      	b.n	800a316 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1e2:	4b88      	ldr	r3, [pc, #544]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0320 	and.w	r3, r3, #32
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d02d      	beq.n	800a24a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1ee:	4b85      	ldr	r3, [pc, #532]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	08db      	lsrs	r3, r3, #3
 800a1f4:	f003 0303 	and.w	r3, r3, #3
 800a1f8:	4a83      	ldr	r2, [pc, #524]	@ (800a408 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a1fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a1fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	ee07 3a90 	vmov	s15, r3
 800a210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a218:	4b7a      	ldr	r3, [pc, #488]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a21a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a220:	ee07 3a90 	vmov	s15, r3
 800a224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a228:	ed97 6a03 	vldr	s12, [r7, #12]
 800a22c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a238:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a23c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a240:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a244:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a248:	e087      	b.n	800a35a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a254:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a410 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a25c:	4b69      	ldr	r3, [pc, #420]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a25e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a264:	ee07 3a90 	vmov	s15, r3
 800a268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a26c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a270:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a27c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a28c:	e065      	b.n	800a35a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	ee07 3a90 	vmov	s15, r3
 800a294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a298:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a414 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a29c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a0:	4b58      	ldr	r3, [pc, #352]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a8:	ee07 3a90 	vmov	s15, r3
 800a2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2d0:	e043      	b.n	800a35a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	ee07 3a90 	vmov	s15, r3
 800a2d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a418 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a2e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2e4:	4b47      	ldr	r3, [pc, #284]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ec:	ee07 3a90 	vmov	s15, r3
 800a2f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a304:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a30c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a310:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a314:	e021      	b.n	800a35a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a320:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a410 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a328:	4b36      	ldr	r3, [pc, #216]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a32a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a330:	ee07 3a90 	vmov	s15, r3
 800a334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a338:	ed97 6a03 	vldr	s12, [r7, #12]
 800a33c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a348:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a34c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a350:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a354:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a358:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a35a:	4b2a      	ldr	r3, [pc, #168]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a35e:	0a5b      	lsrs	r3, r3, #9
 800a360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a364:	ee07 3a90 	vmov	s15, r3
 800a368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a370:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a374:	edd7 6a07 	vldr	s13, [r7, #28]
 800a378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a37c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a380:	ee17 2a90 	vmov	r2, s15
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a388:	4b1e      	ldr	r3, [pc, #120]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a38a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38c:	0c1b      	lsrs	r3, r3, #16
 800a38e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a392:	ee07 3a90 	vmov	s15, r3
 800a396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a39e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ae:	ee17 2a90 	vmov	r2, s15
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a3b6:	4b13      	ldr	r3, [pc, #76]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ba:	0e1b      	lsrs	r3, r3, #24
 800a3bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3c0:	ee07 3a90 	vmov	s15, r3
 800a3c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3dc:	ee17 2a90 	vmov	r2, s15
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a3e4:	e008      	b.n	800a3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	609a      	str	r2, [r3, #8]
}
 800a3f8:	bf00      	nop
 800a3fa:	3724      	adds	r7, #36	@ 0x24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	58024400 	.word	0x58024400
 800a408:	03d09000 	.word	0x03d09000
 800a40c:	46000000 	.word	0x46000000
 800a410:	4c742400 	.word	0x4c742400
 800a414:	4a742400 	.word	0x4a742400
 800a418:	4af42400 	.word	0x4af42400

0800a41c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800a424:	4b26      	ldr	r3, [pc, #152]	@ (800a4c0 <HAL_RCCEx_CRSConfig+0xa4>)
 800a426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a42a:	4a25      	ldr	r2, [pc, #148]	@ (800a4c0 <HAL_RCCEx_CRSConfig+0xa4>)
 800a42c:	f043 0302 	orr.w	r3, r3, #2
 800a430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800a434:	4b22      	ldr	r3, [pc, #136]	@ (800a4c0 <HAL_RCCEx_CRSConfig+0xa4>)
 800a436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a43a:	4a21      	ldr	r2, [pc, #132]	@ (800a4c0 <HAL_RCCEx_CRSConfig+0xa4>)
 800a43c:	f023 0302 	bic.w	r3, r3, #2
 800a440:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800a444:	f7f7 fd9c 	bl	8001f80 <HAL_GetREVID>
 800a448:	4603      	mov	r3, r0
 800a44a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a44e:	4293      	cmp	r3, r2
 800a450:	d80b      	bhi.n	800a46a <HAL_RCCEx_CRSConfig+0x4e>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a45a:	d106      	bne.n	800a46a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	4313      	orrs	r3, r2
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e008      	b.n	800a47c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	4313      	orrs	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4313      	orrs	r3, r2
 800a484:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	041b      	lsls	r3, r3, #16
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	4313      	orrs	r3, r2
 800a490:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800a492:	4a0c      	ldr	r2, [pc, #48]	@ (800a4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a498:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	021b      	lsls	r3, r3, #8
 800a4a6:	4907      	ldr	r1, [pc, #28]	@ (800a4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a4ac:	4b05      	ldr	r3, [pc, #20]	@ (800a4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a04      	ldr	r2, [pc, #16]	@ (800a4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800a4b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a4b6:	6013      	str	r3, [r2, #0]
}
 800a4b8:	bf00      	nop
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	58024400 	.word	0x58024400
 800a4c4:	40008400 	.word	0x40008400

0800a4c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4d6:	4b53      	ldr	r3, [pc, #332]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d101      	bne.n	800a4e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e099      	b.n	800a61a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4e6:	4b4f      	ldr	r3, [pc, #316]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a4e      	ldr	r2, [pc, #312]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a4ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4f2:	f7f7 fd39 	bl	8001f68 <HAL_GetTick>
 800a4f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4f8:	e008      	b.n	800a50c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4fa:	f7f7 fd35 	bl	8001f68 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d901      	bls.n	800a50c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e086      	b.n	800a61a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a50c:	4b45      	ldr	r3, [pc, #276]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1f0      	bne.n	800a4fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a518:	4b42      	ldr	r3, [pc, #264]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	031b      	lsls	r3, r3, #12
 800a526:	493f      	ldr	r1, [pc, #252]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	3b01      	subs	r3, #1
 800a532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	025b      	lsls	r3, r3, #9
 800a53e:	b29b      	uxth	r3, r3
 800a540:	431a      	orrs	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	3b01      	subs	r3, #1
 800a548:	041b      	lsls	r3, r3, #16
 800a54a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a54e:	431a      	orrs	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	3b01      	subs	r3, #1
 800a556:	061b      	lsls	r3, r3, #24
 800a558:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a55c:	4931      	ldr	r1, [pc, #196]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a562:	4b30      	ldr	r3, [pc, #192]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a566:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	492d      	ldr	r1, [pc, #180]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a570:	4313      	orrs	r3, r2
 800a572:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a574:	4b2b      	ldr	r3, [pc, #172]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a578:	f023 0220 	bic.w	r2, r3, #32
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	4928      	ldr	r1, [pc, #160]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a582:	4313      	orrs	r3, r2
 800a584:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a586:	4b27      	ldr	r3, [pc, #156]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58a:	4a26      	ldr	r2, [pc, #152]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a58c:	f023 0310 	bic.w	r3, r3, #16
 800a590:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a592:	4b24      	ldr	r3, [pc, #144]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a596:	4b24      	ldr	r3, [pc, #144]	@ (800a628 <RCCEx_PLL2_Config+0x160>)
 800a598:	4013      	ands	r3, r2
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	69d2      	ldr	r2, [r2, #28]
 800a59e:	00d2      	lsls	r2, r2, #3
 800a5a0:	4920      	ldr	r1, [pc, #128]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a5a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5ac:	f043 0310 	orr.w	r3, r3, #16
 800a5b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a5b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5bc:	4a19      	ldr	r2, [pc, #100]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5c4:	e00f      	b.n	800a5e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d106      	bne.n	800a5da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a5cc:	4b15      	ldr	r3, [pc, #84]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d0:	4a14      	ldr	r2, [pc, #80]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5d8:	e005      	b.n	800a5e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a5da:	4b12      	ldr	r3, [pc, #72]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5de:	4a11      	ldr	r2, [pc, #68]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a0e      	ldr	r2, [pc, #56]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a5ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5f2:	f7f7 fcb9 	bl	8001f68 <HAL_GetTick>
 800a5f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5f8:	e008      	b.n	800a60c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5fa:	f7f7 fcb5 	bl	8001f68 <HAL_GetTick>
 800a5fe:	4602      	mov	r2, r0
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	2b02      	cmp	r3, #2
 800a606:	d901      	bls.n	800a60c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e006      	b.n	800a61a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a60c:	4b05      	ldr	r3, [pc, #20]	@ (800a624 <RCCEx_PLL2_Config+0x15c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0f0      	beq.n	800a5fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a618:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	58024400 	.word	0x58024400
 800a628:	ffff0007 	.word	0xffff0007

0800a62c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a63a:	4b53      	ldr	r3, [pc, #332]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63e:	f003 0303 	and.w	r3, r3, #3
 800a642:	2b03      	cmp	r3, #3
 800a644:	d101      	bne.n	800a64a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e099      	b.n	800a77e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a64a:	4b4f      	ldr	r3, [pc, #316]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a4e      	ldr	r2, [pc, #312]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a656:	f7f7 fc87 	bl	8001f68 <HAL_GetTick>
 800a65a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a65c:	e008      	b.n	800a670 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a65e:	f7f7 fc83 	bl	8001f68 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d901      	bls.n	800a670 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e086      	b.n	800a77e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a670:	4b45      	ldr	r3, [pc, #276]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1f0      	bne.n	800a65e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a67c:	4b42      	ldr	r3, [pc, #264]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a680:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	051b      	lsls	r3, r3, #20
 800a68a:	493f      	ldr	r1, [pc, #252]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	3b01      	subs	r3, #1
 800a696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	025b      	lsls	r3, r3, #9
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	041b      	lsls	r3, r3, #16
 800a6ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	061b      	lsls	r3, r3, #24
 800a6bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a6c0:	4931      	ldr	r1, [pc, #196]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a6c6:	4b30      	ldr	r3, [pc, #192]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	492d      	ldr	r1, [pc, #180]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a6d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	4928      	ldr	r1, [pc, #160]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6ea:	4b27      	ldr	r3, [pc, #156]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ee:	4a26      	ldr	r2, [pc, #152]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a6f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6f6:	4b24      	ldr	r3, [pc, #144]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a6f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6fa:	4b24      	ldr	r3, [pc, #144]	@ (800a78c <RCCEx_PLL3_Config+0x160>)
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	69d2      	ldr	r2, [r2, #28]
 800a702:	00d2      	lsls	r2, r2, #3
 800a704:	4920      	ldr	r1, [pc, #128]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a706:	4313      	orrs	r3, r2
 800a708:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a70a:	4b1f      	ldr	r3, [pc, #124]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70e:	4a1e      	ldr	r2, [pc, #120]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a714:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d106      	bne.n	800a72a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a71c:	4b1a      	ldr	r3, [pc, #104]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a720:	4a19      	ldr	r2, [pc, #100]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a722:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a726:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a728:	e00f      	b.n	800a74a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d106      	bne.n	800a73e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a730:	4b15      	ldr	r3, [pc, #84]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a734:	4a14      	ldr	r2, [pc, #80]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a736:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a73a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a73c:	e005      	b.n	800a74a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a73e:	4b12      	ldr	r3, [pc, #72]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a742:	4a11      	ldr	r2, [pc, #68]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a744:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a748:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a74a:	4b0f      	ldr	r3, [pc, #60]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a0e      	ldr	r2, [pc, #56]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a756:	f7f7 fc07 	bl	8001f68 <HAL_GetTick>
 800a75a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a75c:	e008      	b.n	800a770 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a75e:	f7f7 fc03 	bl	8001f68 <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d901      	bls.n	800a770 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e006      	b.n	800a77e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a770:	4b05      	ldr	r3, [pc, #20]	@ (800a788 <RCCEx_PLL3_Config+0x15c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d0f0      	beq.n	800a75e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	58024400 	.word	0x58024400
 800a78c:	ffff0007 	.word	0xffff0007

0800a790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e049      	b.n	800a836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7f7 f9ca 	bl	8001b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	4610      	mov	r0, r2
 800a7d0:	f000 f99e 	bl	800ab10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b01      	cmp	r3, #1
 800a852:	d001      	beq.n	800a858 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e04c      	b.n	800a8f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a26      	ldr	r2, [pc, #152]	@ (800a900 <HAL_TIM_Base_Start+0xc0>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d022      	beq.n	800a8b0 <HAL_TIM_Base_Start+0x70>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a872:	d01d      	beq.n	800a8b0 <HAL_TIM_Base_Start+0x70>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a22      	ldr	r2, [pc, #136]	@ (800a904 <HAL_TIM_Base_Start+0xc4>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d018      	beq.n	800a8b0 <HAL_TIM_Base_Start+0x70>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a21      	ldr	r2, [pc, #132]	@ (800a908 <HAL_TIM_Base_Start+0xc8>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d013      	beq.n	800a8b0 <HAL_TIM_Base_Start+0x70>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a1f      	ldr	r2, [pc, #124]	@ (800a90c <HAL_TIM_Base_Start+0xcc>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d00e      	beq.n	800a8b0 <HAL_TIM_Base_Start+0x70>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a1e      	ldr	r2, [pc, #120]	@ (800a910 <HAL_TIM_Base_Start+0xd0>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d009      	beq.n	800a8b0 <HAL_TIM_Base_Start+0x70>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a1c      	ldr	r2, [pc, #112]	@ (800a914 <HAL_TIM_Base_Start+0xd4>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d004      	beq.n	800a8b0 <HAL_TIM_Base_Start+0x70>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a918 <HAL_TIM_Base_Start+0xd8>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d115      	bne.n	800a8dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	4b19      	ldr	r3, [pc, #100]	@ (800a91c <HAL_TIM_Base_Start+0xdc>)
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b06      	cmp	r3, #6
 800a8c0:	d015      	beq.n	800a8ee <HAL_TIM_Base_Start+0xae>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8c8:	d011      	beq.n	800a8ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f042 0201 	orr.w	r2, r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8da:	e008      	b.n	800a8ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f042 0201 	orr.w	r2, r2, #1
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	e000      	b.n	800a8f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	40010000 	.word	0x40010000
 800a904:	40000400 	.word	0x40000400
 800a908:	40000800 	.word	0x40000800
 800a90c:	40000c00 	.word	0x40000c00
 800a910:	40010400 	.word	0x40010400
 800a914:	40001800 	.word	0x40001800
 800a918:	40014000 	.word	0x40014000
 800a91c:	00010007 	.word	0x00010007

0800a920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a934:	2b01      	cmp	r3, #1
 800a936:	d101      	bne.n	800a93c <HAL_TIM_ConfigClockSource+0x1c>
 800a938:	2302      	movs	r3, #2
 800a93a:	e0dc      	b.n	800aaf6 <HAL_TIM_ConfigClockSource+0x1d6>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	4b6a      	ldr	r3, [pc, #424]	@ (800ab00 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a958:	4013      	ands	r3, r2
 800a95a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a64      	ldr	r2, [pc, #400]	@ (800ab04 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a972:	4293      	cmp	r3, r2
 800a974:	f000 80a9 	beq.w	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800a978:	4a62      	ldr	r2, [pc, #392]	@ (800ab04 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	f200 80ae 	bhi.w	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a980:	4a61      	ldr	r2, [pc, #388]	@ (800ab08 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a982:	4293      	cmp	r3, r2
 800a984:	f000 80a1 	beq.w	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800a988:	4a5f      	ldr	r2, [pc, #380]	@ (800ab08 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	f200 80a6 	bhi.w	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a990:	4a5e      	ldr	r2, [pc, #376]	@ (800ab0c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a992:	4293      	cmp	r3, r2
 800a994:	f000 8099 	beq.w	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800a998:	4a5c      	ldr	r2, [pc, #368]	@ (800ab0c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	f200 809e 	bhi.w	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9a4:	f000 8091 	beq.w	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800a9a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9ac:	f200 8096 	bhi.w	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9b4:	f000 8089 	beq.w	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800a9b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9bc:	f200 808e 	bhi.w	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9c4:	d03e      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x124>
 800a9c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ca:	f200 8087 	bhi.w	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9d2:	f000 8086 	beq.w	800aae2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a9d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9da:	d87f      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9dc:	2b70      	cmp	r3, #112	@ 0x70
 800a9de:	d01a      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0xf6>
 800a9e0:	2b70      	cmp	r3, #112	@ 0x70
 800a9e2:	d87b      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e4:	2b60      	cmp	r3, #96	@ 0x60
 800a9e6:	d050      	beq.n	800aa8a <HAL_TIM_ConfigClockSource+0x16a>
 800a9e8:	2b60      	cmp	r3, #96	@ 0x60
 800a9ea:	d877      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9ec:	2b50      	cmp	r3, #80	@ 0x50
 800a9ee:	d03c      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x14a>
 800a9f0:	2b50      	cmp	r3, #80	@ 0x50
 800a9f2:	d873      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f4:	2b40      	cmp	r3, #64	@ 0x40
 800a9f6:	d058      	beq.n	800aaaa <HAL_TIM_ConfigClockSource+0x18a>
 800a9f8:	2b40      	cmp	r3, #64	@ 0x40
 800a9fa:	d86f      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9fc:	2b30      	cmp	r3, #48	@ 0x30
 800a9fe:	d064      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800aa00:	2b30      	cmp	r3, #48	@ 0x30
 800aa02:	d86b      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d060      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	d867      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d05c      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800aa10:	2b10      	cmp	r3, #16
 800aa12:	d05a      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x1aa>
 800aa14:	e062      	b.n	800aadc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa26:	f000 f997 	bl	800ad58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	609a      	str	r2, [r3, #8]
      break;
 800aa42:	e04f      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa54:	f000 f980 	bl	800ad58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa66:	609a      	str	r2, [r3, #8]
      break;
 800aa68:	e03c      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa76:	461a      	mov	r2, r3
 800aa78:	f000 f8f0 	bl	800ac5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2150      	movs	r1, #80	@ 0x50
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f94a 	bl	800ad1c <TIM_ITRx_SetConfig>
      break;
 800aa88:	e02c      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa96:	461a      	mov	r2, r3
 800aa98:	f000 f90f 	bl	800acba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2160      	movs	r1, #96	@ 0x60
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 f93a 	bl	800ad1c <TIM_ITRx_SetConfig>
      break;
 800aaa8:	e01c      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab6:	461a      	mov	r2, r3
 800aab8:	f000 f8d0 	bl	800ac5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2140      	movs	r1, #64	@ 0x40
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 f92a 	bl	800ad1c <TIM_ITRx_SetConfig>
      break;
 800aac8:	e00c      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f000 f921 	bl	800ad1c <TIM_ITRx_SetConfig>
      break;
 800aada:	e003      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	73fb      	strb	r3, [r7, #15]
      break;
 800aae0:	e000      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	ffceff88 	.word	0xffceff88
 800ab04:	00100040 	.word	0x00100040
 800ab08:	00100030 	.word	0x00100030
 800ab0c:	00100020 	.word	0x00100020

0800ab10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a46      	ldr	r2, [pc, #280]	@ (800ac3c <TIM_Base_SetConfig+0x12c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d013      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab2e:	d00f      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a43      	ldr	r2, [pc, #268]	@ (800ac40 <TIM_Base_SetConfig+0x130>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d00b      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a42      	ldr	r2, [pc, #264]	@ (800ac44 <TIM_Base_SetConfig+0x134>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d007      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a41      	ldr	r2, [pc, #260]	@ (800ac48 <TIM_Base_SetConfig+0x138>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d003      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a40      	ldr	r2, [pc, #256]	@ (800ac4c <TIM_Base_SetConfig+0x13c>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d108      	bne.n	800ab62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a35      	ldr	r2, [pc, #212]	@ (800ac3c <TIM_Base_SetConfig+0x12c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d01f      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab70:	d01b      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a32      	ldr	r2, [pc, #200]	@ (800ac40 <TIM_Base_SetConfig+0x130>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d017      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a31      	ldr	r2, [pc, #196]	@ (800ac44 <TIM_Base_SetConfig+0x134>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d013      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a30      	ldr	r2, [pc, #192]	@ (800ac48 <TIM_Base_SetConfig+0x138>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00f      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a2f      	ldr	r2, [pc, #188]	@ (800ac4c <TIM_Base_SetConfig+0x13c>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00b      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a2e      	ldr	r2, [pc, #184]	@ (800ac50 <TIM_Base_SetConfig+0x140>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d007      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a2d      	ldr	r2, [pc, #180]	@ (800ac54 <TIM_Base_SetConfig+0x144>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d003      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a2c      	ldr	r2, [pc, #176]	@ (800ac58 <TIM_Base_SetConfig+0x148>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d108      	bne.n	800abbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4313      	orrs	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a16      	ldr	r2, [pc, #88]	@ (800ac3c <TIM_Base_SetConfig+0x12c>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00f      	beq.n	800ac08 <TIM_Base_SetConfig+0xf8>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a18      	ldr	r2, [pc, #96]	@ (800ac4c <TIM_Base_SetConfig+0x13c>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d00b      	beq.n	800ac08 <TIM_Base_SetConfig+0xf8>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a17      	ldr	r2, [pc, #92]	@ (800ac50 <TIM_Base_SetConfig+0x140>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d007      	beq.n	800ac08 <TIM_Base_SetConfig+0xf8>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a16      	ldr	r2, [pc, #88]	@ (800ac54 <TIM_Base_SetConfig+0x144>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d003      	beq.n	800ac08 <TIM_Base_SetConfig+0xf8>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a15      	ldr	r2, [pc, #84]	@ (800ac58 <TIM_Base_SetConfig+0x148>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d103      	bne.n	800ac10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	691a      	ldr	r2, [r3, #16]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d105      	bne.n	800ac2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	f023 0201 	bic.w	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	611a      	str	r2, [r3, #16]
  }
}
 800ac2e:	bf00      	nop
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40010000 	.word	0x40010000
 800ac40:	40000400 	.word	0x40000400
 800ac44:	40000800 	.word	0x40000800
 800ac48:	40000c00 	.word	0x40000c00
 800ac4c:	40010400 	.word	0x40010400
 800ac50:	40014000 	.word	0x40014000
 800ac54:	40014400 	.word	0x40014400
 800ac58:	40014800 	.word	0x40014800

0800ac5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	f023 0201 	bic.w	r2, r3, #1
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f023 030a 	bic.w	r3, r3, #10
 800ac98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	621a      	str	r2, [r3, #32]
}
 800acae:	bf00      	nop
 800acb0:	371c      	adds	r7, #28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acba:	b480      	push	{r7}
 800acbc:	b087      	sub	sp, #28
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	f023 0210 	bic.w	r2, r3, #16
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ace4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	031b      	lsls	r3, r3, #12
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	4313      	orrs	r3, r2
 800acee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800acf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	621a      	str	r2, [r3, #32]
}
 800ad0e:	bf00      	nop
 800ad10:	371c      	adds	r7, #28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
	...

0800ad1c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4b09      	ldr	r3, [pc, #36]	@ (800ad54 <TIM_ITRx_SetConfig+0x38>)
 800ad30:	4013      	ands	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	f043 0307 	orr.w	r3, r3, #7
 800ad3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	609a      	str	r2, [r3, #8]
}
 800ad46:	bf00      	nop
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	ffcfff8f 	.word	0xffcfff8f

0800ad58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	021a      	lsls	r2, r3, #8
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	697a      	ldr	r2, [r7, #20]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	609a      	str	r2, [r3, #8]
}
 800ad8c:	bf00      	nop
 800ad8e:	371c      	adds	r7, #28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adac:	2302      	movs	r3, #2
 800adae:	e06d      	b.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a30      	ldr	r2, [pc, #192]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d004      	beq.n	800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a2f      	ldr	r2, [pc, #188]	@ (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d108      	bne.n	800adf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800adea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a20      	ldr	r2, [pc, #128]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d022      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae22:	d01d      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d018      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a1c      	ldr	r2, [pc, #112]	@ (800aea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d013      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d00e      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a15      	ldr	r2, [pc, #84]	@ (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d009      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a16      	ldr	r2, [pc, #88]	@ (800aeac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d004      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a15      	ldr	r2, [pc, #84]	@ (800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10c      	bne.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	40010000 	.word	0x40010000
 800ae9c:	40010400 	.word	0x40010400
 800aea0:	40000400 	.word	0x40000400
 800aea4:	40000800 	.word	0x40000800
 800aea8:	40000c00 	.word	0x40000c00
 800aeac:	40001800 	.word	0x40001800
 800aeb0:	40014000 	.word	0x40014000

0800aeb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e042      	b.n	800af4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7f6 fe59 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2224      	movs	r2, #36	@ 0x24
 800aee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f022 0201 	bic.w	r2, r2, #1
 800aef4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f001 fafc 	bl	800c4fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fc8d 	bl	800b824 <UART_SetConfig>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e01b      	b.n	800af4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689a      	ldr	r2, [r3, #8]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f042 0201 	orr.w	r2, r2, #1
 800af42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f001 fb7b 	bl	800c640 <UART_CheckIdleState>
 800af4a:	4603      	mov	r3, r0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08a      	sub	sp, #40	@ 0x28
 800af58:	af02      	add	r7, sp, #8
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	603b      	str	r3, [r7, #0]
 800af60:	4613      	mov	r3, r2
 800af62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af6a:	2b20      	cmp	r3, #32
 800af6c:	d17b      	bne.n	800b066 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <HAL_UART_Transmit+0x26>
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	e074      	b.n	800b068 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2221      	movs	r2, #33	@ 0x21
 800af8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af8e:	f7f6 ffeb 	bl	8001f68 <HAL_GetTick>
 800af92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	88fa      	ldrh	r2, [r7, #6]
 800af98:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	88fa      	ldrh	r2, [r7, #6]
 800afa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afac:	d108      	bne.n	800afc0 <HAL_UART_Transmit+0x6c>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d104      	bne.n	800afc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800afb6:	2300      	movs	r3, #0
 800afb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	61bb      	str	r3, [r7, #24]
 800afbe:	e003      	b.n	800afc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afc4:	2300      	movs	r3, #0
 800afc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800afc8:	e030      	b.n	800b02c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2200      	movs	r2, #0
 800afd2:	2180      	movs	r1, #128	@ 0x80
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f001 fbdd 	bl	800c794 <UART_WaitOnFlagUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d005      	beq.n	800afec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2220      	movs	r2, #32
 800afe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800afe8:	2303      	movs	r3, #3
 800afea:	e03d      	b.n	800b068 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10b      	bne.n	800b00a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b000:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	3302      	adds	r3, #2
 800b006:	61bb      	str	r3, [r7, #24]
 800b008:	e007      	b.n	800b01a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	781a      	ldrb	r2, [r3, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	3301      	adds	r3, #1
 800b018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b020:	b29b      	uxth	r3, r3
 800b022:	3b01      	subs	r3, #1
 800b024:	b29a      	uxth	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b032:	b29b      	uxth	r3, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1c8      	bne.n	800afca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2200      	movs	r2, #0
 800b040:	2140      	movs	r1, #64	@ 0x40
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f001 fba6 	bl	800c794 <UART_WaitOnFlagUntilTimeout>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2220      	movs	r2, #32
 800b052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e006      	b.n	800b068 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	e000      	b.n	800b068 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b066:	2302      	movs	r3, #2
  }
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3720      	adds	r7, #32
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b0ba      	sub	sp, #232	@ 0xe8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b096:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b09a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b09e:	4013      	ands	r3, r2
 800b0a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b0a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d11b      	bne.n	800b0e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0b0:	f003 0320 	and.w	r3, r3, #32
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d015      	beq.n	800b0e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0bc:	f003 0320 	and.w	r3, r3, #32
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d105      	bne.n	800b0d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d009      	beq.n	800b0e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 8377 	beq.w	800b7c8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	4798      	blx	r3
      }
      return;
 800b0e2:	e371      	b.n	800b7c8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b0e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 8123 	beq.w	800b334 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b0ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b0f2:	4b8d      	ldr	r3, [pc, #564]	@ (800b328 <HAL_UART_IRQHandler+0x2b8>)
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d106      	bne.n	800b108 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b0fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b0fe:	4b8b      	ldr	r3, [pc, #556]	@ (800b32c <HAL_UART_IRQHandler+0x2bc>)
 800b100:	4013      	ands	r3, r2
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 8116 	beq.w	800b334 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	2b00      	cmp	r3, #0
 800b112:	d011      	beq.n	800b138 <HAL_UART_IRQHandler+0xc8>
 800b114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2201      	movs	r2, #1
 800b126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b12e:	f043 0201 	orr.w	r2, r3, #1
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d011      	beq.n	800b168 <HAL_UART_IRQHandler+0xf8>
 800b144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00b      	beq.n	800b168 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2202      	movs	r2, #2
 800b156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15e:	f043 0204 	orr.w	r2, r3, #4
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b16c:	f003 0304 	and.w	r3, r3, #4
 800b170:	2b00      	cmp	r3, #0
 800b172:	d011      	beq.n	800b198 <HAL_UART_IRQHandler+0x128>
 800b174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00b      	beq.n	800b198 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2204      	movs	r2, #4
 800b186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b18e:	f043 0202 	orr.w	r2, r3, #2
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b19c:	f003 0308 	and.w	r3, r3, #8
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d017      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1a8:	f003 0320 	and.w	r3, r3, #32
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d105      	bne.n	800b1bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b1b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b1b4:	4b5c      	ldr	r3, [pc, #368]	@ (800b328 <HAL_UART_IRQHandler+0x2b8>)
 800b1b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ca:	f043 0208 	orr.w	r2, r3, #8
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d012      	beq.n	800b206 <HAL_UART_IRQHandler+0x196>
 800b1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00c      	beq.n	800b206 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fc:	f043 0220 	orr.w	r2, r3, #32
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 82dd 	beq.w	800b7cc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b216:	f003 0320 	and.w	r3, r3, #32
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d013      	beq.n	800b246 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b222:	f003 0320 	and.w	r3, r3, #32
 800b226:	2b00      	cmp	r3, #0
 800b228:	d105      	bne.n	800b236 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b22e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d007      	beq.n	800b246 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b24c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b25a:	2b40      	cmp	r3, #64	@ 0x40
 800b25c:	d005      	beq.n	800b26a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b262:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b266:	2b00      	cmp	r3, #0
 800b268:	d054      	beq.n	800b314 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 fb00 	bl	800c870 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b27a:	2b40      	cmp	r3, #64	@ 0x40
 800b27c:	d146      	bne.n	800b30c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3308      	adds	r3, #8
 800b284:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b294:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b29c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b2aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b2b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b2c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1d9      	bne.n	800b27e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d017      	beq.n	800b304 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2da:	4a15      	ldr	r2, [pc, #84]	@ (800b330 <HAL_UART_IRQHandler+0x2c0>)
 800b2dc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7f9 fdcf 	bl	8004e88 <HAL_DMA_Abort_IT>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d019      	beq.n	800b324 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b2fe:	4610      	mov	r0, r2
 800b300:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b302:	e00f      	b.n	800b324 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 fa77 	bl	800b7f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b30a:	e00b      	b.n	800b324 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fa73 	bl	800b7f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b312:	e007      	b.n	800b324 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fa6f 	bl	800b7f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b322:	e253      	b.n	800b7cc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b324:	bf00      	nop
    return;
 800b326:	e251      	b.n	800b7cc <HAL_UART_IRQHandler+0x75c>
 800b328:	10000001 	.word	0x10000001
 800b32c:	04000120 	.word	0x04000120
 800b330:	0800c93d 	.word	0x0800c93d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b338:	2b01      	cmp	r3, #1
 800b33a:	f040 81e7 	bne.w	800b70c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b342:	f003 0310 	and.w	r3, r3, #16
 800b346:	2b00      	cmp	r3, #0
 800b348:	f000 81e0 	beq.w	800b70c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b34c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b350:	f003 0310 	and.w	r3, r3, #16
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 81d9 	beq.w	800b70c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2210      	movs	r2, #16
 800b360:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b36c:	2b40      	cmp	r3, #64	@ 0x40
 800b36e:	f040 8151 	bne.w	800b614 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a96      	ldr	r2, [pc, #600]	@ (800b5d4 <HAL_UART_IRQHandler+0x564>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d068      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a93      	ldr	r2, [pc, #588]	@ (800b5d8 <HAL_UART_IRQHandler+0x568>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d061      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a91      	ldr	r2, [pc, #580]	@ (800b5dc <HAL_UART_IRQHandler+0x56c>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d05a      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a8e      	ldr	r2, [pc, #568]	@ (800b5e0 <HAL_UART_IRQHandler+0x570>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d053      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a8c      	ldr	r2, [pc, #560]	@ (800b5e4 <HAL_UART_IRQHandler+0x574>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d04c      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a89      	ldr	r2, [pc, #548]	@ (800b5e8 <HAL_UART_IRQHandler+0x578>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d045      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a87      	ldr	r2, [pc, #540]	@ (800b5ec <HAL_UART_IRQHandler+0x57c>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d03e      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a84      	ldr	r2, [pc, #528]	@ (800b5f0 <HAL_UART_IRQHandler+0x580>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d037      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a82      	ldr	r2, [pc, #520]	@ (800b5f4 <HAL_UART_IRQHandler+0x584>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d030      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a7f      	ldr	r2, [pc, #508]	@ (800b5f8 <HAL_UART_IRQHandler+0x588>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d029      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a7d      	ldr	r2, [pc, #500]	@ (800b5fc <HAL_UART_IRQHandler+0x58c>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d022      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a7a      	ldr	r2, [pc, #488]	@ (800b600 <HAL_UART_IRQHandler+0x590>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d01b      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a78      	ldr	r2, [pc, #480]	@ (800b604 <HAL_UART_IRQHandler+0x594>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d014      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a75      	ldr	r2, [pc, #468]	@ (800b608 <HAL_UART_IRQHandler+0x598>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d00d      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a73      	ldr	r2, [pc, #460]	@ (800b60c <HAL_UART_IRQHandler+0x59c>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d006      	beq.n	800b452 <HAL_UART_IRQHandler+0x3e2>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a70      	ldr	r2, [pc, #448]	@ (800b610 <HAL_UART_IRQHandler+0x5a0>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d106      	bne.n	800b460 <HAL_UART_IRQHandler+0x3f0>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	e005      	b.n	800b46c <HAL_UART_IRQHandler+0x3fc>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 81ab 	beq.w	800b7d0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b484:	429a      	cmp	r2, r3
 800b486:	f080 81a3 	bcs.w	800b7d0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b490:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4a0:	f000 8087 	beq.w	800b5b2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b4b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b4ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b4da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b4de:	e841 2300 	strex	r3, r2, [r1]
 800b4e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b4e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1da      	bne.n	800b4a4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4f8:	e853 3f00 	ldrex	r3, [r3]
 800b4fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b4fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b500:	f023 0301 	bic.w	r3, r3, #1
 800b504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3308      	adds	r3, #8
 800b50e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b512:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b516:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b51a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e1      	bne.n	800b4ee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3308      	adds	r3, #8
 800b530:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b53a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b53c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3308      	adds	r3, #8
 800b54a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b54e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b550:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b552:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b554:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b556:	e841 2300 	strex	r3, r2, [r1]
 800b55a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b55c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1e3      	bne.n	800b52a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b578:	e853 3f00 	ldrex	r3, [r3]
 800b57c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b57e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b580:	f023 0310 	bic.w	r3, r3, #16
 800b584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	461a      	mov	r2, r3
 800b58e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b592:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b594:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b598:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b59a:	e841 2300 	strex	r3, r2, [r1]
 800b59e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1e4      	bne.n	800b570 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7f9 f94d 	bl	800484c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f91d 	bl	800b80c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5d2:	e0fd      	b.n	800b7d0 <HAL_UART_IRQHandler+0x760>
 800b5d4:	40020010 	.word	0x40020010
 800b5d8:	40020028 	.word	0x40020028
 800b5dc:	40020040 	.word	0x40020040
 800b5e0:	40020058 	.word	0x40020058
 800b5e4:	40020070 	.word	0x40020070
 800b5e8:	40020088 	.word	0x40020088
 800b5ec:	400200a0 	.word	0x400200a0
 800b5f0:	400200b8 	.word	0x400200b8
 800b5f4:	40020410 	.word	0x40020410
 800b5f8:	40020428 	.word	0x40020428
 800b5fc:	40020440 	.word	0x40020440
 800b600:	40020458 	.word	0x40020458
 800b604:	40020470 	.word	0x40020470
 800b608:	40020488 	.word	0x40020488
 800b60c:	400204a0 	.word	0x400204a0
 800b610:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b620:	b29b      	uxth	r3, r3
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b62e:	b29b      	uxth	r3, r3
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 80cf 	beq.w	800b7d4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f000 80ca 	beq.w	800b7d4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b648:	e853 3f00 	ldrex	r3, [r3]
 800b64c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b654:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	461a      	mov	r2, r3
 800b65e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b662:	647b      	str	r3, [r7, #68]	@ 0x44
 800b664:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e4      	bne.n	800b640 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3308      	adds	r3, #8
 800b67c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	623b      	str	r3, [r7, #32]
   return(result);
 800b686:	6a3a      	ldr	r2, [r7, #32]
 800b688:	4b55      	ldr	r3, [pc, #340]	@ (800b7e0 <HAL_UART_IRQHandler+0x770>)
 800b68a:	4013      	ands	r3, r2
 800b68c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3308      	adds	r3, #8
 800b696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b69a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e3      	bne.n	800b676 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	e853 3f00 	ldrex	r3, [r3]
 800b6ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f023 0310 	bic.w	r3, r3, #16
 800b6d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b6e4:	61fb      	str	r3, [r7, #28]
 800b6e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e8:	69b9      	ldr	r1, [r7, #24]
 800b6ea:	69fa      	ldr	r2, [r7, #28]
 800b6ec:	e841 2300 	strex	r3, r2, [r1]
 800b6f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e4      	bne.n	800b6c2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2202      	movs	r2, #2
 800b6fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b702:	4619      	mov	r1, r3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f881 	bl	800b80c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b70a:	e063      	b.n	800b7d4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b710:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00e      	beq.n	800b736 <HAL_UART_IRQHandler+0x6c6>
 800b718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b71c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b720:	2b00      	cmp	r3, #0
 800b722:	d008      	beq.n	800b736 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b72c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 f945 	bl	800c9be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b734:	e051      	b.n	800b7da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d014      	beq.n	800b76c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d008      	beq.n	800b76c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d03a      	beq.n	800b7d8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	4798      	blx	r3
    }
    return;
 800b76a:	e035      	b.n	800b7d8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b774:	2b00      	cmp	r3, #0
 800b776:	d009      	beq.n	800b78c <HAL_UART_IRQHandler+0x71c>
 800b778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b780:	2b00      	cmp	r3, #0
 800b782:	d003      	beq.n	800b78c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f001 f8ef 	bl	800c968 <UART_EndTransmit_IT>
    return;
 800b78a:	e026      	b.n	800b7da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d009      	beq.n	800b7ac <HAL_UART_IRQHandler+0x73c>
 800b798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b79c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d003      	beq.n	800b7ac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f001 f91e 	bl	800c9e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7aa:	e016      	b.n	800b7da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d010      	beq.n	800b7da <HAL_UART_IRQHandler+0x76a>
 800b7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	da0c      	bge.n	800b7da <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 f906 	bl	800c9d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7c6:	e008      	b.n	800b7da <HAL_UART_IRQHandler+0x76a>
      return;
 800b7c8:	bf00      	nop
 800b7ca:	e006      	b.n	800b7da <HAL_UART_IRQHandler+0x76a>
    return;
 800b7cc:	bf00      	nop
 800b7ce:	e004      	b.n	800b7da <HAL_UART_IRQHandler+0x76a>
      return;
 800b7d0:	bf00      	nop
 800b7d2:	e002      	b.n	800b7da <HAL_UART_IRQHandler+0x76a>
      return;
 800b7d4:	bf00      	nop
 800b7d6:	e000      	b.n	800b7da <HAL_UART_IRQHandler+0x76a>
    return;
 800b7d8:	bf00      	nop
  }
}
 800b7da:	37e8      	adds	r7, #232	@ 0xe8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	effffffe 	.word	0xeffffffe

0800b7e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	460b      	mov	r3, r1
 800b816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b828:	b092      	sub	sp, #72	@ 0x48
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	431a      	orrs	r2, r3
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	431a      	orrs	r2, r3
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	4313      	orrs	r3, r2
 800b84a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	4bbe      	ldr	r3, [pc, #760]	@ (800bb4c <UART_SetConfig+0x328>)
 800b854:	4013      	ands	r3, r2
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	6812      	ldr	r2, [r2, #0]
 800b85a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b85c:	430b      	orrs	r3, r1
 800b85e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	430a      	orrs	r2, r1
 800b874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4ab3      	ldr	r2, [pc, #716]	@ (800bb50 <UART_SetConfig+0x32c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d004      	beq.n	800b890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b88c:	4313      	orrs	r3, r2
 800b88e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	689a      	ldr	r2, [r3, #8]
 800b896:	4baf      	ldr	r3, [pc, #700]	@ (800bb54 <UART_SetConfig+0x330>)
 800b898:	4013      	ands	r3, r2
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	6812      	ldr	r2, [r2, #0]
 800b89e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8aa:	f023 010f 	bic.w	r1, r3, #15
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4aa6      	ldr	r2, [pc, #664]	@ (800bb58 <UART_SetConfig+0x334>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d177      	bne.n	800b9b4 <UART_SetConfig+0x190>
 800b8c4:	4ba5      	ldr	r3, [pc, #660]	@ (800bb5c <UART_SetConfig+0x338>)
 800b8c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b8cc:	2b28      	cmp	r3, #40	@ 0x28
 800b8ce:	d86d      	bhi.n	800b9ac <UART_SetConfig+0x188>
 800b8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <UART_SetConfig+0xb4>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b97d 	.word	0x0800b97d
 800b8dc:	0800b9ad 	.word	0x0800b9ad
 800b8e0:	0800b9ad 	.word	0x0800b9ad
 800b8e4:	0800b9ad 	.word	0x0800b9ad
 800b8e8:	0800b9ad 	.word	0x0800b9ad
 800b8ec:	0800b9ad 	.word	0x0800b9ad
 800b8f0:	0800b9ad 	.word	0x0800b9ad
 800b8f4:	0800b9ad 	.word	0x0800b9ad
 800b8f8:	0800b985 	.word	0x0800b985
 800b8fc:	0800b9ad 	.word	0x0800b9ad
 800b900:	0800b9ad 	.word	0x0800b9ad
 800b904:	0800b9ad 	.word	0x0800b9ad
 800b908:	0800b9ad 	.word	0x0800b9ad
 800b90c:	0800b9ad 	.word	0x0800b9ad
 800b910:	0800b9ad 	.word	0x0800b9ad
 800b914:	0800b9ad 	.word	0x0800b9ad
 800b918:	0800b98d 	.word	0x0800b98d
 800b91c:	0800b9ad 	.word	0x0800b9ad
 800b920:	0800b9ad 	.word	0x0800b9ad
 800b924:	0800b9ad 	.word	0x0800b9ad
 800b928:	0800b9ad 	.word	0x0800b9ad
 800b92c:	0800b9ad 	.word	0x0800b9ad
 800b930:	0800b9ad 	.word	0x0800b9ad
 800b934:	0800b9ad 	.word	0x0800b9ad
 800b938:	0800b995 	.word	0x0800b995
 800b93c:	0800b9ad 	.word	0x0800b9ad
 800b940:	0800b9ad 	.word	0x0800b9ad
 800b944:	0800b9ad 	.word	0x0800b9ad
 800b948:	0800b9ad 	.word	0x0800b9ad
 800b94c:	0800b9ad 	.word	0x0800b9ad
 800b950:	0800b9ad 	.word	0x0800b9ad
 800b954:	0800b9ad 	.word	0x0800b9ad
 800b958:	0800b99d 	.word	0x0800b99d
 800b95c:	0800b9ad 	.word	0x0800b9ad
 800b960:	0800b9ad 	.word	0x0800b9ad
 800b964:	0800b9ad 	.word	0x0800b9ad
 800b968:	0800b9ad 	.word	0x0800b9ad
 800b96c:	0800b9ad 	.word	0x0800b9ad
 800b970:	0800b9ad 	.word	0x0800b9ad
 800b974:	0800b9ad 	.word	0x0800b9ad
 800b978:	0800b9a5 	.word	0x0800b9a5
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b982:	e326      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b984:	2304      	movs	r3, #4
 800b986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98a:	e322      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b98c:	2308      	movs	r3, #8
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b992:	e31e      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b994:	2310      	movs	r3, #16
 800b996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99a:	e31a      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b99c:	2320      	movs	r3, #32
 800b99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9a2:	e316      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b9a4:	2340      	movs	r3, #64	@ 0x40
 800b9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9aa:	e312      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b9ac:	2380      	movs	r3, #128	@ 0x80
 800b9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9b2:	e30e      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a69      	ldr	r2, [pc, #420]	@ (800bb60 <UART_SetConfig+0x33c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d130      	bne.n	800ba20 <UART_SetConfig+0x1fc>
 800b9be:	4b67      	ldr	r3, [pc, #412]	@ (800bb5c <UART_SetConfig+0x338>)
 800b9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9c2:	f003 0307 	and.w	r3, r3, #7
 800b9c6:	2b05      	cmp	r3, #5
 800b9c8:	d826      	bhi.n	800ba18 <UART_SetConfig+0x1f4>
 800b9ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d0 <UART_SetConfig+0x1ac>)
 800b9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d0:	0800b9e9 	.word	0x0800b9e9
 800b9d4:	0800b9f1 	.word	0x0800b9f1
 800b9d8:	0800b9f9 	.word	0x0800b9f9
 800b9dc:	0800ba01 	.word	0x0800ba01
 800b9e0:	0800ba09 	.word	0x0800ba09
 800b9e4:	0800ba11 	.word	0x0800ba11
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ee:	e2f0      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b9f0:	2304      	movs	r3, #4
 800b9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f6:	e2ec      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800b9f8:	2308      	movs	r3, #8
 800b9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fe:	e2e8      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba00:	2310      	movs	r3, #16
 800ba02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba06:	e2e4      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba08:	2320      	movs	r3, #32
 800ba0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0e:	e2e0      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba10:	2340      	movs	r3, #64	@ 0x40
 800ba12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba16:	e2dc      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba18:	2380      	movs	r3, #128	@ 0x80
 800ba1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba1e:	e2d8      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a4f      	ldr	r2, [pc, #316]	@ (800bb64 <UART_SetConfig+0x340>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d130      	bne.n	800ba8c <UART_SetConfig+0x268>
 800ba2a:	4b4c      	ldr	r3, [pc, #304]	@ (800bb5c <UART_SetConfig+0x338>)
 800ba2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba2e:	f003 0307 	and.w	r3, r3, #7
 800ba32:	2b05      	cmp	r3, #5
 800ba34:	d826      	bhi.n	800ba84 <UART_SetConfig+0x260>
 800ba36:	a201      	add	r2, pc, #4	@ (adr r2, 800ba3c <UART_SetConfig+0x218>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba55 	.word	0x0800ba55
 800ba40:	0800ba5d 	.word	0x0800ba5d
 800ba44:	0800ba65 	.word	0x0800ba65
 800ba48:	0800ba6d 	.word	0x0800ba6d
 800ba4c:	0800ba75 	.word	0x0800ba75
 800ba50:	0800ba7d 	.word	0x0800ba7d
 800ba54:	2300      	movs	r3, #0
 800ba56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5a:	e2ba      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba5c:	2304      	movs	r3, #4
 800ba5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba62:	e2b6      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba64:	2308      	movs	r3, #8
 800ba66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6a:	e2b2      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba6c:	2310      	movs	r3, #16
 800ba6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba72:	e2ae      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba74:	2320      	movs	r3, #32
 800ba76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba7a:	e2aa      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba7c:	2340      	movs	r3, #64	@ 0x40
 800ba7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba82:	e2a6      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba84:	2380      	movs	r3, #128	@ 0x80
 800ba86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba8a:	e2a2      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a35      	ldr	r2, [pc, #212]	@ (800bb68 <UART_SetConfig+0x344>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d130      	bne.n	800baf8 <UART_SetConfig+0x2d4>
 800ba96:	4b31      	ldr	r3, [pc, #196]	@ (800bb5c <UART_SetConfig+0x338>)
 800ba98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba9a:	f003 0307 	and.w	r3, r3, #7
 800ba9e:	2b05      	cmp	r3, #5
 800baa0:	d826      	bhi.n	800baf0 <UART_SetConfig+0x2cc>
 800baa2:	a201      	add	r2, pc, #4	@ (adr r2, 800baa8 <UART_SetConfig+0x284>)
 800baa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa8:	0800bac1 	.word	0x0800bac1
 800baac:	0800bac9 	.word	0x0800bac9
 800bab0:	0800bad1 	.word	0x0800bad1
 800bab4:	0800bad9 	.word	0x0800bad9
 800bab8:	0800bae1 	.word	0x0800bae1
 800babc:	0800bae9 	.word	0x0800bae9
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac6:	e284      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bac8:	2304      	movs	r3, #4
 800baca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bace:	e280      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bad0:	2308      	movs	r3, #8
 800bad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad6:	e27c      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bad8:	2310      	movs	r3, #16
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bade:	e278      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bae0:	2320      	movs	r3, #32
 800bae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bae6:	e274      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bae8:	2340      	movs	r3, #64	@ 0x40
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baee:	e270      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800baf0:	2380      	movs	r3, #128	@ 0x80
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf6:	e26c      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a1b      	ldr	r2, [pc, #108]	@ (800bb6c <UART_SetConfig+0x348>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d142      	bne.n	800bb88 <UART_SetConfig+0x364>
 800bb02:	4b16      	ldr	r3, [pc, #88]	@ (800bb5c <UART_SetConfig+0x338>)
 800bb04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	2b05      	cmp	r3, #5
 800bb0c:	d838      	bhi.n	800bb80 <UART_SetConfig+0x35c>
 800bb0e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb14 <UART_SetConfig+0x2f0>)
 800bb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb14:	0800bb2d 	.word	0x0800bb2d
 800bb18:	0800bb35 	.word	0x0800bb35
 800bb1c:	0800bb3d 	.word	0x0800bb3d
 800bb20:	0800bb45 	.word	0x0800bb45
 800bb24:	0800bb71 	.word	0x0800bb71
 800bb28:	0800bb79 	.word	0x0800bb79
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb32:	e24e      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bb34:	2304      	movs	r3, #4
 800bb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3a:	e24a      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bb3c:	2308      	movs	r3, #8
 800bb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb42:	e246      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bb44:	2310      	movs	r3, #16
 800bb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb4a:	e242      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bb4c:	cfff69f3 	.word	0xcfff69f3
 800bb50:	58000c00 	.word	0x58000c00
 800bb54:	11fff4ff 	.word	0x11fff4ff
 800bb58:	40011000 	.word	0x40011000
 800bb5c:	58024400 	.word	0x58024400
 800bb60:	40004400 	.word	0x40004400
 800bb64:	40004800 	.word	0x40004800
 800bb68:	40004c00 	.word	0x40004c00
 800bb6c:	40005000 	.word	0x40005000
 800bb70:	2320      	movs	r3, #32
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb76:	e22c      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bb78:	2340      	movs	r3, #64	@ 0x40
 800bb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7e:	e228      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bb80:	2380      	movs	r3, #128	@ 0x80
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb86:	e224      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4ab1      	ldr	r2, [pc, #708]	@ (800be54 <UART_SetConfig+0x630>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d176      	bne.n	800bc80 <UART_SetConfig+0x45c>
 800bb92:	4bb1      	ldr	r3, [pc, #708]	@ (800be58 <UART_SetConfig+0x634>)
 800bb94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb9a:	2b28      	cmp	r3, #40	@ 0x28
 800bb9c:	d86c      	bhi.n	800bc78 <UART_SetConfig+0x454>
 800bb9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bba4 <UART_SetConfig+0x380>)
 800bba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba4:	0800bc49 	.word	0x0800bc49
 800bba8:	0800bc79 	.word	0x0800bc79
 800bbac:	0800bc79 	.word	0x0800bc79
 800bbb0:	0800bc79 	.word	0x0800bc79
 800bbb4:	0800bc79 	.word	0x0800bc79
 800bbb8:	0800bc79 	.word	0x0800bc79
 800bbbc:	0800bc79 	.word	0x0800bc79
 800bbc0:	0800bc79 	.word	0x0800bc79
 800bbc4:	0800bc51 	.word	0x0800bc51
 800bbc8:	0800bc79 	.word	0x0800bc79
 800bbcc:	0800bc79 	.word	0x0800bc79
 800bbd0:	0800bc79 	.word	0x0800bc79
 800bbd4:	0800bc79 	.word	0x0800bc79
 800bbd8:	0800bc79 	.word	0x0800bc79
 800bbdc:	0800bc79 	.word	0x0800bc79
 800bbe0:	0800bc79 	.word	0x0800bc79
 800bbe4:	0800bc59 	.word	0x0800bc59
 800bbe8:	0800bc79 	.word	0x0800bc79
 800bbec:	0800bc79 	.word	0x0800bc79
 800bbf0:	0800bc79 	.word	0x0800bc79
 800bbf4:	0800bc79 	.word	0x0800bc79
 800bbf8:	0800bc79 	.word	0x0800bc79
 800bbfc:	0800bc79 	.word	0x0800bc79
 800bc00:	0800bc79 	.word	0x0800bc79
 800bc04:	0800bc61 	.word	0x0800bc61
 800bc08:	0800bc79 	.word	0x0800bc79
 800bc0c:	0800bc79 	.word	0x0800bc79
 800bc10:	0800bc79 	.word	0x0800bc79
 800bc14:	0800bc79 	.word	0x0800bc79
 800bc18:	0800bc79 	.word	0x0800bc79
 800bc1c:	0800bc79 	.word	0x0800bc79
 800bc20:	0800bc79 	.word	0x0800bc79
 800bc24:	0800bc69 	.word	0x0800bc69
 800bc28:	0800bc79 	.word	0x0800bc79
 800bc2c:	0800bc79 	.word	0x0800bc79
 800bc30:	0800bc79 	.word	0x0800bc79
 800bc34:	0800bc79 	.word	0x0800bc79
 800bc38:	0800bc79 	.word	0x0800bc79
 800bc3c:	0800bc79 	.word	0x0800bc79
 800bc40:	0800bc79 	.word	0x0800bc79
 800bc44:	0800bc71 	.word	0x0800bc71
 800bc48:	2301      	movs	r3, #1
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4e:	e1c0      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bc50:	2304      	movs	r3, #4
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc56:	e1bc      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bc58:	2308      	movs	r3, #8
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5e:	e1b8      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bc60:	2310      	movs	r3, #16
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc66:	e1b4      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bc68:	2320      	movs	r3, #32
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc6e:	e1b0      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bc70:	2340      	movs	r3, #64	@ 0x40
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc76:	e1ac      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bc78:	2380      	movs	r3, #128	@ 0x80
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc7e:	e1a8      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a75      	ldr	r2, [pc, #468]	@ (800be5c <UART_SetConfig+0x638>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d130      	bne.n	800bcec <UART_SetConfig+0x4c8>
 800bc8a:	4b73      	ldr	r3, [pc, #460]	@ (800be58 <UART_SetConfig+0x634>)
 800bc8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc8e:	f003 0307 	and.w	r3, r3, #7
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	d826      	bhi.n	800bce4 <UART_SetConfig+0x4c0>
 800bc96:	a201      	add	r2, pc, #4	@ (adr r2, 800bc9c <UART_SetConfig+0x478>)
 800bc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9c:	0800bcb5 	.word	0x0800bcb5
 800bca0:	0800bcbd 	.word	0x0800bcbd
 800bca4:	0800bcc5 	.word	0x0800bcc5
 800bca8:	0800bccd 	.word	0x0800bccd
 800bcac:	0800bcd5 	.word	0x0800bcd5
 800bcb0:	0800bcdd 	.word	0x0800bcdd
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcba:	e18a      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bcbc:	2304      	movs	r3, #4
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc2:	e186      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bcc4:	2308      	movs	r3, #8
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcca:	e182      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bccc:	2310      	movs	r3, #16
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd2:	e17e      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bcd4:	2320      	movs	r3, #32
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcda:	e17a      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bcdc:	2340      	movs	r3, #64	@ 0x40
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce2:	e176      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bce4:	2380      	movs	r3, #128	@ 0x80
 800bce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcea:	e172      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a5b      	ldr	r2, [pc, #364]	@ (800be60 <UART_SetConfig+0x63c>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d130      	bne.n	800bd58 <UART_SetConfig+0x534>
 800bcf6:	4b58      	ldr	r3, [pc, #352]	@ (800be58 <UART_SetConfig+0x634>)
 800bcf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcfa:	f003 0307 	and.w	r3, r3, #7
 800bcfe:	2b05      	cmp	r3, #5
 800bd00:	d826      	bhi.n	800bd50 <UART_SetConfig+0x52c>
 800bd02:	a201      	add	r2, pc, #4	@ (adr r2, 800bd08 <UART_SetConfig+0x4e4>)
 800bd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd08:	0800bd21 	.word	0x0800bd21
 800bd0c:	0800bd29 	.word	0x0800bd29
 800bd10:	0800bd31 	.word	0x0800bd31
 800bd14:	0800bd39 	.word	0x0800bd39
 800bd18:	0800bd41 	.word	0x0800bd41
 800bd1c:	0800bd49 	.word	0x0800bd49
 800bd20:	2300      	movs	r3, #0
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd26:	e154      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bd28:	2304      	movs	r3, #4
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2e:	e150      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bd30:	2308      	movs	r3, #8
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd36:	e14c      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bd38:	2310      	movs	r3, #16
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3e:	e148      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bd40:	2320      	movs	r3, #32
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd46:	e144      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bd48:	2340      	movs	r3, #64	@ 0x40
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4e:	e140      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bd50:	2380      	movs	r3, #128	@ 0x80
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd56:	e13c      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a41      	ldr	r2, [pc, #260]	@ (800be64 <UART_SetConfig+0x640>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	f040 8082 	bne.w	800be68 <UART_SetConfig+0x644>
 800bd64:	4b3c      	ldr	r3, [pc, #240]	@ (800be58 <UART_SetConfig+0x634>)
 800bd66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd6c:	2b28      	cmp	r3, #40	@ 0x28
 800bd6e:	d86d      	bhi.n	800be4c <UART_SetConfig+0x628>
 800bd70:	a201      	add	r2, pc, #4	@ (adr r2, 800bd78 <UART_SetConfig+0x554>)
 800bd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd76:	bf00      	nop
 800bd78:	0800be1d 	.word	0x0800be1d
 800bd7c:	0800be4d 	.word	0x0800be4d
 800bd80:	0800be4d 	.word	0x0800be4d
 800bd84:	0800be4d 	.word	0x0800be4d
 800bd88:	0800be4d 	.word	0x0800be4d
 800bd8c:	0800be4d 	.word	0x0800be4d
 800bd90:	0800be4d 	.word	0x0800be4d
 800bd94:	0800be4d 	.word	0x0800be4d
 800bd98:	0800be25 	.word	0x0800be25
 800bd9c:	0800be4d 	.word	0x0800be4d
 800bda0:	0800be4d 	.word	0x0800be4d
 800bda4:	0800be4d 	.word	0x0800be4d
 800bda8:	0800be4d 	.word	0x0800be4d
 800bdac:	0800be4d 	.word	0x0800be4d
 800bdb0:	0800be4d 	.word	0x0800be4d
 800bdb4:	0800be4d 	.word	0x0800be4d
 800bdb8:	0800be2d 	.word	0x0800be2d
 800bdbc:	0800be4d 	.word	0x0800be4d
 800bdc0:	0800be4d 	.word	0x0800be4d
 800bdc4:	0800be4d 	.word	0x0800be4d
 800bdc8:	0800be4d 	.word	0x0800be4d
 800bdcc:	0800be4d 	.word	0x0800be4d
 800bdd0:	0800be4d 	.word	0x0800be4d
 800bdd4:	0800be4d 	.word	0x0800be4d
 800bdd8:	0800be35 	.word	0x0800be35
 800bddc:	0800be4d 	.word	0x0800be4d
 800bde0:	0800be4d 	.word	0x0800be4d
 800bde4:	0800be4d 	.word	0x0800be4d
 800bde8:	0800be4d 	.word	0x0800be4d
 800bdec:	0800be4d 	.word	0x0800be4d
 800bdf0:	0800be4d 	.word	0x0800be4d
 800bdf4:	0800be4d 	.word	0x0800be4d
 800bdf8:	0800be3d 	.word	0x0800be3d
 800bdfc:	0800be4d 	.word	0x0800be4d
 800be00:	0800be4d 	.word	0x0800be4d
 800be04:	0800be4d 	.word	0x0800be4d
 800be08:	0800be4d 	.word	0x0800be4d
 800be0c:	0800be4d 	.word	0x0800be4d
 800be10:	0800be4d 	.word	0x0800be4d
 800be14:	0800be4d 	.word	0x0800be4d
 800be18:	0800be45 	.word	0x0800be45
 800be1c:	2301      	movs	r3, #1
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be22:	e0d6      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800be24:	2304      	movs	r3, #4
 800be26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2a:	e0d2      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800be2c:	2308      	movs	r3, #8
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be32:	e0ce      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800be34:	2310      	movs	r3, #16
 800be36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3a:	e0ca      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800be3c:	2320      	movs	r3, #32
 800be3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be42:	e0c6      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800be44:	2340      	movs	r3, #64	@ 0x40
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4a:	e0c2      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800be4c:	2380      	movs	r3, #128	@ 0x80
 800be4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be52:	e0be      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800be54:	40011400 	.word	0x40011400
 800be58:	58024400 	.word	0x58024400
 800be5c:	40007800 	.word	0x40007800
 800be60:	40007c00 	.word	0x40007c00
 800be64:	40011800 	.word	0x40011800
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4aad      	ldr	r2, [pc, #692]	@ (800c124 <UART_SetConfig+0x900>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d176      	bne.n	800bf60 <UART_SetConfig+0x73c>
 800be72:	4bad      	ldr	r3, [pc, #692]	@ (800c128 <UART_SetConfig+0x904>)
 800be74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be7a:	2b28      	cmp	r3, #40	@ 0x28
 800be7c:	d86c      	bhi.n	800bf58 <UART_SetConfig+0x734>
 800be7e:	a201      	add	r2, pc, #4	@ (adr r2, 800be84 <UART_SetConfig+0x660>)
 800be80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be84:	0800bf29 	.word	0x0800bf29
 800be88:	0800bf59 	.word	0x0800bf59
 800be8c:	0800bf59 	.word	0x0800bf59
 800be90:	0800bf59 	.word	0x0800bf59
 800be94:	0800bf59 	.word	0x0800bf59
 800be98:	0800bf59 	.word	0x0800bf59
 800be9c:	0800bf59 	.word	0x0800bf59
 800bea0:	0800bf59 	.word	0x0800bf59
 800bea4:	0800bf31 	.word	0x0800bf31
 800bea8:	0800bf59 	.word	0x0800bf59
 800beac:	0800bf59 	.word	0x0800bf59
 800beb0:	0800bf59 	.word	0x0800bf59
 800beb4:	0800bf59 	.word	0x0800bf59
 800beb8:	0800bf59 	.word	0x0800bf59
 800bebc:	0800bf59 	.word	0x0800bf59
 800bec0:	0800bf59 	.word	0x0800bf59
 800bec4:	0800bf39 	.word	0x0800bf39
 800bec8:	0800bf59 	.word	0x0800bf59
 800becc:	0800bf59 	.word	0x0800bf59
 800bed0:	0800bf59 	.word	0x0800bf59
 800bed4:	0800bf59 	.word	0x0800bf59
 800bed8:	0800bf59 	.word	0x0800bf59
 800bedc:	0800bf59 	.word	0x0800bf59
 800bee0:	0800bf59 	.word	0x0800bf59
 800bee4:	0800bf41 	.word	0x0800bf41
 800bee8:	0800bf59 	.word	0x0800bf59
 800beec:	0800bf59 	.word	0x0800bf59
 800bef0:	0800bf59 	.word	0x0800bf59
 800bef4:	0800bf59 	.word	0x0800bf59
 800bef8:	0800bf59 	.word	0x0800bf59
 800befc:	0800bf59 	.word	0x0800bf59
 800bf00:	0800bf59 	.word	0x0800bf59
 800bf04:	0800bf49 	.word	0x0800bf49
 800bf08:	0800bf59 	.word	0x0800bf59
 800bf0c:	0800bf59 	.word	0x0800bf59
 800bf10:	0800bf59 	.word	0x0800bf59
 800bf14:	0800bf59 	.word	0x0800bf59
 800bf18:	0800bf59 	.word	0x0800bf59
 800bf1c:	0800bf59 	.word	0x0800bf59
 800bf20:	0800bf59 	.word	0x0800bf59
 800bf24:	0800bf51 	.word	0x0800bf51
 800bf28:	2301      	movs	r3, #1
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2e:	e050      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bf30:	2304      	movs	r3, #4
 800bf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf36:	e04c      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bf38:	2308      	movs	r3, #8
 800bf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3e:	e048      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bf40:	2310      	movs	r3, #16
 800bf42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf46:	e044      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bf48:	2320      	movs	r3, #32
 800bf4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf4e:	e040      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bf50:	2340      	movs	r3, #64	@ 0x40
 800bf52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf56:	e03c      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bf58:	2380      	movs	r3, #128	@ 0x80
 800bf5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf5e:	e038      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a71      	ldr	r2, [pc, #452]	@ (800c12c <UART_SetConfig+0x908>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d130      	bne.n	800bfcc <UART_SetConfig+0x7a8>
 800bf6a:	4b6f      	ldr	r3, [pc, #444]	@ (800c128 <UART_SetConfig+0x904>)
 800bf6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf6e:	f003 0307 	and.w	r3, r3, #7
 800bf72:	2b05      	cmp	r3, #5
 800bf74:	d826      	bhi.n	800bfc4 <UART_SetConfig+0x7a0>
 800bf76:	a201      	add	r2, pc, #4	@ (adr r2, 800bf7c <UART_SetConfig+0x758>)
 800bf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7c:	0800bf95 	.word	0x0800bf95
 800bf80:	0800bf9d 	.word	0x0800bf9d
 800bf84:	0800bfa5 	.word	0x0800bfa5
 800bf88:	0800bfad 	.word	0x0800bfad
 800bf8c:	0800bfb5 	.word	0x0800bfb5
 800bf90:	0800bfbd 	.word	0x0800bfbd
 800bf94:	2302      	movs	r3, #2
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9a:	e01a      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bf9c:	2304      	movs	r3, #4
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa2:	e016      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bfa4:	2308      	movs	r3, #8
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfaa:	e012      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bfac:	2310      	movs	r3, #16
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfb2:	e00e      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bfb4:	2320      	movs	r3, #32
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfba:	e00a      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bfbc:	2340      	movs	r3, #64	@ 0x40
 800bfbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfc2:	e006      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bfc4:	2380      	movs	r3, #128	@ 0x80
 800bfc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfca:	e002      	b.n	800bfd2 <UART_SetConfig+0x7ae>
 800bfcc:	2380      	movs	r3, #128	@ 0x80
 800bfce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a55      	ldr	r2, [pc, #340]	@ (800c12c <UART_SetConfig+0x908>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	f040 80f8 	bne.w	800c1ce <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bfe2:	2b20      	cmp	r3, #32
 800bfe4:	dc46      	bgt.n	800c074 <UART_SetConfig+0x850>
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	db75      	blt.n	800c0d6 <UART_SetConfig+0x8b2>
 800bfea:	3b02      	subs	r3, #2
 800bfec:	2b1e      	cmp	r3, #30
 800bfee:	d872      	bhi.n	800c0d6 <UART_SetConfig+0x8b2>
 800bff0:	a201      	add	r2, pc, #4	@ (adr r2, 800bff8 <UART_SetConfig+0x7d4>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c07b 	.word	0x0800c07b
 800bffc:	0800c0d7 	.word	0x0800c0d7
 800c000:	0800c083 	.word	0x0800c083
 800c004:	0800c0d7 	.word	0x0800c0d7
 800c008:	0800c0d7 	.word	0x0800c0d7
 800c00c:	0800c0d7 	.word	0x0800c0d7
 800c010:	0800c093 	.word	0x0800c093
 800c014:	0800c0d7 	.word	0x0800c0d7
 800c018:	0800c0d7 	.word	0x0800c0d7
 800c01c:	0800c0d7 	.word	0x0800c0d7
 800c020:	0800c0d7 	.word	0x0800c0d7
 800c024:	0800c0d7 	.word	0x0800c0d7
 800c028:	0800c0d7 	.word	0x0800c0d7
 800c02c:	0800c0d7 	.word	0x0800c0d7
 800c030:	0800c0a3 	.word	0x0800c0a3
 800c034:	0800c0d7 	.word	0x0800c0d7
 800c038:	0800c0d7 	.word	0x0800c0d7
 800c03c:	0800c0d7 	.word	0x0800c0d7
 800c040:	0800c0d7 	.word	0x0800c0d7
 800c044:	0800c0d7 	.word	0x0800c0d7
 800c048:	0800c0d7 	.word	0x0800c0d7
 800c04c:	0800c0d7 	.word	0x0800c0d7
 800c050:	0800c0d7 	.word	0x0800c0d7
 800c054:	0800c0d7 	.word	0x0800c0d7
 800c058:	0800c0d7 	.word	0x0800c0d7
 800c05c:	0800c0d7 	.word	0x0800c0d7
 800c060:	0800c0d7 	.word	0x0800c0d7
 800c064:	0800c0d7 	.word	0x0800c0d7
 800c068:	0800c0d7 	.word	0x0800c0d7
 800c06c:	0800c0d7 	.word	0x0800c0d7
 800c070:	0800c0c9 	.word	0x0800c0c9
 800c074:	2b40      	cmp	r3, #64	@ 0x40
 800c076:	d02a      	beq.n	800c0ce <UART_SetConfig+0x8aa>
 800c078:	e02d      	b.n	800c0d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c07a:	f7fd fdbf 	bl	8009bfc <HAL_RCCEx_GetD3PCLK1Freq>
 800c07e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c080:	e02f      	b.n	800c0e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c086:	4618      	mov	r0, r3
 800c088:	f7fd fdce 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c090:	e027      	b.n	800c0e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c092:	f107 0318 	add.w	r3, r7, #24
 800c096:	4618      	mov	r0, r3
 800c098:	f7fd ff1a 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0a0:	e01f      	b.n	800c0e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0a2:	4b21      	ldr	r3, [pc, #132]	@ (800c128 <UART_SetConfig+0x904>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0320 	and.w	r3, r3, #32
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d009      	beq.n	800c0c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c128 <UART_SetConfig+0x904>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	08db      	lsrs	r3, r3, #3
 800c0b4:	f003 0303 	and.w	r3, r3, #3
 800c0b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c130 <UART_SetConfig+0x90c>)
 800c0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0c0:	e00f      	b.n	800c0e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c0c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c130 <UART_SetConfig+0x90c>)
 800c0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0c6:	e00c      	b.n	800c0e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c134 <UART_SetConfig+0x910>)
 800c0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0cc:	e009      	b.n	800c0e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0d4:	e005      	b.n	800c0e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c0e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 81ee 	beq.w	800c4c6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ee:	4a12      	ldr	r2, [pc, #72]	@ (800c138 <UART_SetConfig+0x914>)
 800c0f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0fc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	4613      	mov	r3, r2
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	4413      	add	r3, r2
 800c108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d305      	bcc.n	800c11a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c116:	429a      	cmp	r2, r3
 800c118:	d910      	bls.n	800c13c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c120:	e1d1      	b.n	800c4c6 <UART_SetConfig+0xca2>
 800c122:	bf00      	nop
 800c124:	40011c00 	.word	0x40011c00
 800c128:	58024400 	.word	0x58024400
 800c12c:	58000c00 	.word	0x58000c00
 800c130:	03d09000 	.word	0x03d09000
 800c134:	003d0900 	.word	0x003d0900
 800c138:	0800efac 	.word	0x0800efac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c13e:	2200      	movs	r2, #0
 800c140:	60bb      	str	r3, [r7, #8]
 800c142:	60fa      	str	r2, [r7, #12]
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c148:	4ac0      	ldr	r2, [pc, #768]	@ (800c44c <UART_SetConfig+0xc28>)
 800c14a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	2200      	movs	r2, #0
 800c152:	603b      	str	r3, [r7, #0]
 800c154:	607a      	str	r2, [r7, #4]
 800c156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c15a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c15e:	f7f4 f8c7 	bl	80002f0 <__aeabi_uldivmod>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4610      	mov	r0, r2
 800c168:	4619      	mov	r1, r3
 800c16a:	f04f 0200 	mov.w	r2, #0
 800c16e:	f04f 0300 	mov.w	r3, #0
 800c172:	020b      	lsls	r3, r1, #8
 800c174:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c178:	0202      	lsls	r2, r0, #8
 800c17a:	6979      	ldr	r1, [r7, #20]
 800c17c:	6849      	ldr	r1, [r1, #4]
 800c17e:	0849      	lsrs	r1, r1, #1
 800c180:	2000      	movs	r0, #0
 800c182:	460c      	mov	r4, r1
 800c184:	4605      	mov	r5, r0
 800c186:	eb12 0804 	adds.w	r8, r2, r4
 800c18a:	eb43 0905 	adc.w	r9, r3, r5
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	469a      	mov	sl, r3
 800c196:	4693      	mov	fp, r2
 800c198:	4652      	mov	r2, sl
 800c19a:	465b      	mov	r3, fp
 800c19c:	4640      	mov	r0, r8
 800c19e:	4649      	mov	r1, r9
 800c1a0:	f7f4 f8a6 	bl	80002f0 <__aeabi_uldivmod>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c1b2:	d308      	bcc.n	800c1c6 <UART_SetConfig+0x9a2>
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1ba:	d204      	bcs.n	800c1c6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1c2:	60da      	str	r2, [r3, #12]
 800c1c4:	e17f      	b.n	800c4c6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c1cc:	e17b      	b.n	800c4c6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1d6:	f040 80bd 	bne.w	800c354 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c1da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1de:	2b20      	cmp	r3, #32
 800c1e0:	dc48      	bgt.n	800c274 <UART_SetConfig+0xa50>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	db7b      	blt.n	800c2de <UART_SetConfig+0xaba>
 800c1e6:	2b20      	cmp	r3, #32
 800c1e8:	d879      	bhi.n	800c2de <UART_SetConfig+0xaba>
 800c1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f0 <UART_SetConfig+0x9cc>)
 800c1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f0:	0800c27b 	.word	0x0800c27b
 800c1f4:	0800c283 	.word	0x0800c283
 800c1f8:	0800c2df 	.word	0x0800c2df
 800c1fc:	0800c2df 	.word	0x0800c2df
 800c200:	0800c28b 	.word	0x0800c28b
 800c204:	0800c2df 	.word	0x0800c2df
 800c208:	0800c2df 	.word	0x0800c2df
 800c20c:	0800c2df 	.word	0x0800c2df
 800c210:	0800c29b 	.word	0x0800c29b
 800c214:	0800c2df 	.word	0x0800c2df
 800c218:	0800c2df 	.word	0x0800c2df
 800c21c:	0800c2df 	.word	0x0800c2df
 800c220:	0800c2df 	.word	0x0800c2df
 800c224:	0800c2df 	.word	0x0800c2df
 800c228:	0800c2df 	.word	0x0800c2df
 800c22c:	0800c2df 	.word	0x0800c2df
 800c230:	0800c2ab 	.word	0x0800c2ab
 800c234:	0800c2df 	.word	0x0800c2df
 800c238:	0800c2df 	.word	0x0800c2df
 800c23c:	0800c2df 	.word	0x0800c2df
 800c240:	0800c2df 	.word	0x0800c2df
 800c244:	0800c2df 	.word	0x0800c2df
 800c248:	0800c2df 	.word	0x0800c2df
 800c24c:	0800c2df 	.word	0x0800c2df
 800c250:	0800c2df 	.word	0x0800c2df
 800c254:	0800c2df 	.word	0x0800c2df
 800c258:	0800c2df 	.word	0x0800c2df
 800c25c:	0800c2df 	.word	0x0800c2df
 800c260:	0800c2df 	.word	0x0800c2df
 800c264:	0800c2df 	.word	0x0800c2df
 800c268:	0800c2df 	.word	0x0800c2df
 800c26c:	0800c2df 	.word	0x0800c2df
 800c270:	0800c2d1 	.word	0x0800c2d1
 800c274:	2b40      	cmp	r3, #64	@ 0x40
 800c276:	d02e      	beq.n	800c2d6 <UART_SetConfig+0xab2>
 800c278:	e031      	b.n	800c2de <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c27a:	f7fb fdfd 	bl	8007e78 <HAL_RCC_GetPCLK1Freq>
 800c27e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c280:	e033      	b.n	800c2ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c282:	f7fb fe0f 	bl	8007ea4 <HAL_RCC_GetPCLK2Freq>
 800c286:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c288:	e02f      	b.n	800c2ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c28a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fd fcca 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c298:	e027      	b.n	800c2ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c29a:	f107 0318 	add.w	r3, r7, #24
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fd fe16 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2a8:	e01f      	b.n	800c2ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2aa:	4b69      	ldr	r3, [pc, #420]	@ (800c450 <UART_SetConfig+0xc2c>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 0320 	and.w	r3, r3, #32
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d009      	beq.n	800c2ca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2b6:	4b66      	ldr	r3, [pc, #408]	@ (800c450 <UART_SetConfig+0xc2c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	08db      	lsrs	r3, r3, #3
 800c2bc:	f003 0303 	and.w	r3, r3, #3
 800c2c0:	4a64      	ldr	r2, [pc, #400]	@ (800c454 <UART_SetConfig+0xc30>)
 800c2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2c8:	e00f      	b.n	800c2ea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c2ca:	4b62      	ldr	r3, [pc, #392]	@ (800c454 <UART_SetConfig+0xc30>)
 800c2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ce:	e00c      	b.n	800c2ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2d0:	4b61      	ldr	r3, [pc, #388]	@ (800c458 <UART_SetConfig+0xc34>)
 800c2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2d4:	e009      	b.n	800c2ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2dc:	e005      	b.n	800c2ea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c2e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 80ea 	beq.w	800c4c6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f6:	4a55      	ldr	r2, [pc, #340]	@ (800c44c <UART_SetConfig+0xc28>)
 800c2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c300:	fbb3 f3f2 	udiv	r3, r3, r2
 800c304:	005a      	lsls	r2, r3, #1
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	085b      	lsrs	r3, r3, #1
 800c30c:	441a      	add	r2, r3
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	fbb2 f3f3 	udiv	r3, r2, r3
 800c316:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31a:	2b0f      	cmp	r3, #15
 800c31c:	d916      	bls.n	800c34c <UART_SetConfig+0xb28>
 800c31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c324:	d212      	bcs.n	800c34c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c328:	b29b      	uxth	r3, r3
 800c32a:	f023 030f 	bic.w	r3, r3, #15
 800c32e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c332:	085b      	lsrs	r3, r3, #1
 800c334:	b29b      	uxth	r3, r3
 800c336:	f003 0307 	and.w	r3, r3, #7
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c33e:	4313      	orrs	r3, r2
 800c340:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c348:	60da      	str	r2, [r3, #12]
 800c34a:	e0bc      	b.n	800c4c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c352:	e0b8      	b.n	800c4c6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c354:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c358:	2b20      	cmp	r3, #32
 800c35a:	dc4b      	bgt.n	800c3f4 <UART_SetConfig+0xbd0>
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f2c0 8087 	blt.w	800c470 <UART_SetConfig+0xc4c>
 800c362:	2b20      	cmp	r3, #32
 800c364:	f200 8084 	bhi.w	800c470 <UART_SetConfig+0xc4c>
 800c368:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <UART_SetConfig+0xb4c>)
 800c36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36e:	bf00      	nop
 800c370:	0800c3fb 	.word	0x0800c3fb
 800c374:	0800c403 	.word	0x0800c403
 800c378:	0800c471 	.word	0x0800c471
 800c37c:	0800c471 	.word	0x0800c471
 800c380:	0800c40b 	.word	0x0800c40b
 800c384:	0800c471 	.word	0x0800c471
 800c388:	0800c471 	.word	0x0800c471
 800c38c:	0800c471 	.word	0x0800c471
 800c390:	0800c41b 	.word	0x0800c41b
 800c394:	0800c471 	.word	0x0800c471
 800c398:	0800c471 	.word	0x0800c471
 800c39c:	0800c471 	.word	0x0800c471
 800c3a0:	0800c471 	.word	0x0800c471
 800c3a4:	0800c471 	.word	0x0800c471
 800c3a8:	0800c471 	.word	0x0800c471
 800c3ac:	0800c471 	.word	0x0800c471
 800c3b0:	0800c42b 	.word	0x0800c42b
 800c3b4:	0800c471 	.word	0x0800c471
 800c3b8:	0800c471 	.word	0x0800c471
 800c3bc:	0800c471 	.word	0x0800c471
 800c3c0:	0800c471 	.word	0x0800c471
 800c3c4:	0800c471 	.word	0x0800c471
 800c3c8:	0800c471 	.word	0x0800c471
 800c3cc:	0800c471 	.word	0x0800c471
 800c3d0:	0800c471 	.word	0x0800c471
 800c3d4:	0800c471 	.word	0x0800c471
 800c3d8:	0800c471 	.word	0x0800c471
 800c3dc:	0800c471 	.word	0x0800c471
 800c3e0:	0800c471 	.word	0x0800c471
 800c3e4:	0800c471 	.word	0x0800c471
 800c3e8:	0800c471 	.word	0x0800c471
 800c3ec:	0800c471 	.word	0x0800c471
 800c3f0:	0800c463 	.word	0x0800c463
 800c3f4:	2b40      	cmp	r3, #64	@ 0x40
 800c3f6:	d037      	beq.n	800c468 <UART_SetConfig+0xc44>
 800c3f8:	e03a      	b.n	800c470 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3fa:	f7fb fd3d 	bl	8007e78 <HAL_RCC_GetPCLK1Freq>
 800c3fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c400:	e03c      	b.n	800c47c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c402:	f7fb fd4f 	bl	8007ea4 <HAL_RCC_GetPCLK2Freq>
 800c406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c408:	e038      	b.n	800c47c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c40a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fd fc0a 	bl	8009c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c418:	e030      	b.n	800c47c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c41a:	f107 0318 	add.w	r3, r7, #24
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fd fd56 	bl	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c428:	e028      	b.n	800c47c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c42a:	4b09      	ldr	r3, [pc, #36]	@ (800c450 <UART_SetConfig+0xc2c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f003 0320 	and.w	r3, r3, #32
 800c432:	2b00      	cmp	r3, #0
 800c434:	d012      	beq.n	800c45c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c436:	4b06      	ldr	r3, [pc, #24]	@ (800c450 <UART_SetConfig+0xc2c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	08db      	lsrs	r3, r3, #3
 800c43c:	f003 0303 	and.w	r3, r3, #3
 800c440:	4a04      	ldr	r2, [pc, #16]	@ (800c454 <UART_SetConfig+0xc30>)
 800c442:	fa22 f303 	lsr.w	r3, r2, r3
 800c446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c448:	e018      	b.n	800c47c <UART_SetConfig+0xc58>
 800c44a:	bf00      	nop
 800c44c:	0800efac 	.word	0x0800efac
 800c450:	58024400 	.word	0x58024400
 800c454:	03d09000 	.word	0x03d09000
 800c458:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c45c:	4b24      	ldr	r3, [pc, #144]	@ (800c4f0 <UART_SetConfig+0xccc>)
 800c45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c460:	e00c      	b.n	800c47c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c462:	4b24      	ldr	r3, [pc, #144]	@ (800c4f4 <UART_SetConfig+0xcd0>)
 800c464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c466:	e009      	b.n	800c47c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c46e:	e005      	b.n	800c47c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c470:	2300      	movs	r3, #0
 800c472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c47a:	bf00      	nop
    }

    if (pclk != 0U)
 800c47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d021      	beq.n	800c4c6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c486:	4a1c      	ldr	r2, [pc, #112]	@ (800c4f8 <UART_SetConfig+0xcd4>)
 800c488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c48c:	461a      	mov	r2, r3
 800c48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c490:	fbb3 f2f2 	udiv	r2, r3, r2
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	085b      	lsrs	r3, r3, #1
 800c49a:	441a      	add	r2, r3
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a8:	2b0f      	cmp	r3, #15
 800c4aa:	d909      	bls.n	800c4c0 <UART_SetConfig+0xc9c>
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4b2:	d205      	bcs.n	800c4c0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	60da      	str	r2, [r3, #12]
 800c4be:	e002      	b.n	800c4c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c4e2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3748      	adds	r7, #72	@ 0x48
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4f0:	03d09000 	.word	0x03d09000
 800c4f4:	003d0900 	.word	0x003d0900
 800c4f8:	0800efac 	.word	0x0800efac

0800c4fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c508:	f003 0308 	and.w	r3, r3, #8
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00a      	beq.n	800c526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	430a      	orrs	r2, r1
 800c524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c52a:	f003 0301 	and.w	r3, r3, #1
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00a      	beq.n	800c548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	430a      	orrs	r2, r1
 800c546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c54c:	f003 0302 	and.w	r3, r3, #2
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00a      	beq.n	800c56a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	430a      	orrs	r2, r1
 800c568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c56e:	f003 0304 	and.w	r3, r3, #4
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	430a      	orrs	r2, r1
 800c58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c590:	f003 0310 	and.w	r3, r3, #16
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00a      	beq.n	800c5ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b2:	f003 0320 	and.w	r3, r3, #32
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00a      	beq.n	800c5d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d01a      	beq.n	800c612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	430a      	orrs	r2, r1
 800c5f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5fa:	d10a      	bne.n	800c612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	430a      	orrs	r2, r1
 800c610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	430a      	orrs	r2, r1
 800c632:	605a      	str	r2, [r3, #4]
  }
}
 800c634:	bf00      	nop
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b098      	sub	sp, #96	@ 0x60
 800c644:	af02      	add	r7, sp, #8
 800c646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c650:	f7f5 fc8a 	bl	8001f68 <HAL_GetTick>
 800c654:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0308 	and.w	r3, r3, #8
 800c660:	2b08      	cmp	r3, #8
 800c662:	d12f      	bne.n	800c6c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c664:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c66c:	2200      	movs	r2, #0
 800c66e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f88e 	bl	800c794 <UART_WaitOnFlagUntilTimeout>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d022      	beq.n	800c6c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c686:	e853 3f00 	ldrex	r3, [r3]
 800c68a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c68e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c692:	653b      	str	r3, [r7, #80]	@ 0x50
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	461a      	mov	r2, r3
 800c69a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c69c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c69e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6a4:	e841 2300 	strex	r3, r2, [r1]
 800c6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1e6      	bne.n	800c67e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	e063      	b.n	800c78c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0304 	and.w	r3, r3, #4
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d149      	bne.n	800c766 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f857 	bl	800c794 <UART_WaitOnFlagUntilTimeout>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d03c      	beq.n	800c766 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f4:	e853 3f00 	ldrex	r3, [r3]
 800c6f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	461a      	mov	r2, r3
 800c708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c70a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c70c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c712:	e841 2300 	strex	r3, r2, [r1]
 800c716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1e6      	bne.n	800c6ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3308      	adds	r3, #8
 800c724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	e853 3f00 	ldrex	r3, [r3]
 800c72c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f023 0301 	bic.w	r3, r3, #1
 800c734:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3308      	adds	r3, #8
 800c73c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c73e:	61fa      	str	r2, [r7, #28]
 800c740:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	69b9      	ldr	r1, [r7, #24]
 800c744:	69fa      	ldr	r2, [r7, #28]
 800c746:	e841 2300 	strex	r3, r2, [r1]
 800c74a:	617b      	str	r3, [r7, #20]
   return(result);
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1e5      	bne.n	800c71e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e012      	b.n	800c78c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2220      	movs	r2, #32
 800c76a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2220      	movs	r2, #32
 800c772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3758      	adds	r7, #88	@ 0x58
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	603b      	str	r3, [r7, #0]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7a4:	e04f      	b.n	800c846 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ac:	d04b      	beq.n	800c846 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7ae:	f7f5 fbdb 	bl	8001f68 <HAL_GetTick>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d302      	bcc.n	800c7c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d101      	bne.n	800c7c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	e04e      	b.n	800c866 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 0304 	and.w	r3, r3, #4
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d037      	beq.n	800c846 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b80      	cmp	r3, #128	@ 0x80
 800c7da:	d034      	beq.n	800c846 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b40      	cmp	r3, #64	@ 0x40
 800c7e0:	d031      	beq.n	800c846 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	f003 0308 	and.w	r3, r3, #8
 800c7ec:	2b08      	cmp	r3, #8
 800c7ee:	d110      	bne.n	800c812 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2208      	movs	r2, #8
 800c7f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f000 f839 	bl	800c870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2208      	movs	r2, #8
 800c802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	e029      	b.n	800c866 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	69db      	ldr	r3, [r3, #28]
 800c818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c81c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c820:	d111      	bne.n	800c846 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c82a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f81f 	bl	800c870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2220      	movs	r2, #32
 800c836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c842:	2303      	movs	r3, #3
 800c844:	e00f      	b.n	800c866 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	69da      	ldr	r2, [r3, #28]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	4013      	ands	r3, r2
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	429a      	cmp	r2, r3
 800c854:	bf0c      	ite	eq
 800c856:	2301      	moveq	r3, #1
 800c858:	2300      	movne	r3, #0
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	461a      	mov	r2, r3
 800c85e:	79fb      	ldrb	r3, [r7, #7]
 800c860:	429a      	cmp	r2, r3
 800c862:	d0a0      	beq.n	800c7a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
	...

0800c870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c870:	b480      	push	{r7}
 800c872:	b095      	sub	sp, #84	@ 0x54
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c880:	e853 3f00 	ldrex	r3, [r3]
 800c884:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c88c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c896:	643b      	str	r3, [r7, #64]	@ 0x40
 800c898:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c89c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c89e:	e841 2300 	strex	r3, r2, [r1]
 800c8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1e6      	bne.n	800c878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b2:	6a3b      	ldr	r3, [r7, #32]
 800c8b4:	e853 3f00 	ldrex	r3, [r3]
 800c8b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8ba:	69fa      	ldr	r2, [r7, #28]
 800c8bc:	4b1e      	ldr	r3, [pc, #120]	@ (800c938 <UART_EndRxTransfer+0xc8>)
 800c8be:	4013      	ands	r3, r2
 800c8c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1e5      	bne.n	800c8aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d118      	bne.n	800c918 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	e853 3f00 	ldrex	r3, [r3]
 800c8f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f023 0310 	bic.w	r3, r3, #16
 800c8fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	461a      	mov	r2, r3
 800c902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c904:	61bb      	str	r3, [r7, #24]
 800c906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c908:	6979      	ldr	r1, [r7, #20]
 800c90a:	69ba      	ldr	r2, [r7, #24]
 800c90c:	e841 2300 	strex	r3, r2, [r1]
 800c910:	613b      	str	r3, [r7, #16]
   return(result);
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e6      	bne.n	800c8e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2220      	movs	r2, #32
 800c91c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c92c:	bf00      	nop
 800c92e:	3754      	adds	r7, #84	@ 0x54
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr
 800c938:	effffffe 	.word	0xeffffffe

0800c93c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2200      	movs	r2, #0
 800c956:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f7fe ff4c 	bl	800b7f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c960:	bf00      	nop
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	e853 3f00 	ldrex	r3, [r3]
 800c97c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c984:	61fb      	str	r3, [r7, #28]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	61bb      	str	r3, [r7, #24]
 800c990:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c992:	6979      	ldr	r1, [r7, #20]
 800c994:	69ba      	ldr	r2, [r7, #24]
 800c996:	e841 2300 	strex	r3, r2, [r1]
 800c99a:	613b      	str	r3, [r7, #16]
   return(result);
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1e6      	bne.n	800c970 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2220      	movs	r2, #32
 800c9a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7fe ff17 	bl	800b7e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9b6:	bf00      	nop
 800c9b8:	3720      	adds	r7, #32
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c9be:	b480      	push	{r7}
 800c9c0:	b083      	sub	sp, #12
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c9c6:	bf00      	nop
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c9da:	bf00      	nop
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b083      	sub	sp, #12
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c9ee:	bf00      	nop
 800c9f0:	370c      	adds	r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d101      	bne.n	800ca10 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca0c:	2302      	movs	r3, #2
 800ca0e:	e027      	b.n	800ca60 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2224      	movs	r2, #36	@ 0x24
 800ca1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f022 0201 	bic.w	r2, r2, #1
 800ca36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ca3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2220      	movs	r2, #32
 800ca52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d101      	bne.n	800ca84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca80:	2302      	movs	r3, #2
 800ca82:	e02d      	b.n	800cae0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2224      	movs	r2, #36	@ 0x24
 800ca90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f022 0201 	bic.w	r2, r2, #1
 800caaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	430a      	orrs	r2, r1
 800cabe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 f84f 	bl	800cb64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2220      	movs	r2, #32
 800cad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cade:	2300      	movs	r3, #0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d101      	bne.n	800cb00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cafc:	2302      	movs	r3, #2
 800cafe:	e02d      	b.n	800cb5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2224      	movs	r2, #36	@ 0x24
 800cb0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f022 0201 	bic.w	r2, r2, #1
 800cb26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	683a      	ldr	r2, [r7, #0]
 800cb38:	430a      	orrs	r2, r1
 800cb3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f811 	bl	800cb64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2220      	movs	r2, #32
 800cb4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d108      	bne.n	800cb86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb84:	e031      	b.n	800cbea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb86:	2310      	movs	r3, #16
 800cb88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb8a:	2310      	movs	r3, #16
 800cb8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	0e5b      	lsrs	r3, r3, #25
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	f003 0307 	and.w	r3, r3, #7
 800cb9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	0f5b      	lsrs	r3, r3, #29
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	f003 0307 	and.w	r3, r3, #7
 800cbac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbae:	7bbb      	ldrb	r3, [r7, #14]
 800cbb0:	7b3a      	ldrb	r2, [r7, #12]
 800cbb2:	4911      	ldr	r1, [pc, #68]	@ (800cbf8 <UARTEx_SetNbDataToProcess+0x94>)
 800cbb4:	5c8a      	ldrb	r2, [r1, r2]
 800cbb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cbba:	7b3a      	ldrb	r2, [r7, #12]
 800cbbc:	490f      	ldr	r1, [pc, #60]	@ (800cbfc <UARTEx_SetNbDataToProcess+0x98>)
 800cbbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbcc:	7bfb      	ldrb	r3, [r7, #15]
 800cbce:	7b7a      	ldrb	r2, [r7, #13]
 800cbd0:	4909      	ldr	r1, [pc, #36]	@ (800cbf8 <UARTEx_SetNbDataToProcess+0x94>)
 800cbd2:	5c8a      	ldrb	r2, [r1, r2]
 800cbd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cbd8:	7b7a      	ldrb	r2, [r7, #13]
 800cbda:	4908      	ldr	r1, [pc, #32]	@ (800cbfc <UARTEx_SetNbDataToProcess+0x98>)
 800cbdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbde:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cbea:	bf00      	nop
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	0800efc4 	.word	0x0800efc4
 800cbfc:	0800efcc 	.word	0x0800efcc

0800cc00 <arm_correlate_f32>:
 800cc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	4299      	cmp	r1, r3
 800cc06:	b08d      	sub	sp, #52	@ 0x34
 800cc08:	f0c0 824c 	bcc.w	800d0a4 <arm_correlate_f32+0x4a4>
 800cc0c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800cc0e:	eba1 0c03 	sub.w	ip, r1, r3
 800cc12:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800cc16:	f04f 0e04 	mov.w	lr, #4
 800cc1a:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 800cc1e:	3101      	adds	r1, #1
 800cc20:	1ac9      	subs	r1, r1, r3
 800cc22:	3c01      	subs	r4, #1
 800cc24:	1e5e      	subs	r6, r3, #1
 800cc26:	9102      	str	r1, [sp, #8]
 800cc28:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800cc2c:	f000 8294 	beq.w	800d158 <arm_correlate_f32+0x558>
 800cc30:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800cd80 <arm_correlate_f32+0x180>
 800cc34:	f1a1 0804 	sub.w	r8, r1, #4
 800cc38:	46e1      	mov	r9, ip
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	2401      	movs	r4, #1
 800cc3e:	f014 0703 	ands.w	r7, r4, #3
 800cc42:	d01b      	beq.n	800cc7c <arm_correlate_f32+0x7c>
 800cc44:	ed91 7a00 	vldr	s14, [r1]
 800cc48:	edd5 6a00 	vldr	s13, [r5]
 800cc4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc50:	3f01      	subs	r7, #1
 800cc52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc56:	d011      	beq.n	800cc7c <arm_correlate_f32+0x7c>
 800cc58:	ed91 7a01 	vldr	s14, [r1, #4]
 800cc5c:	edd5 6a01 	vldr	s13, [r5, #4]
 800cc60:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc64:	2f01      	cmp	r7, #1
 800cc66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc6a:	d007      	beq.n	800cc7c <arm_correlate_f32+0x7c>
 800cc6c:	ed95 7a02 	vldr	s14, [r5, #8]
 800cc70:	edd1 6a02 	vldr	s13, [r1, #8]
 800cc74:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc78:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc7c:	1c67      	adds	r7, r4, #1
 800cc7e:	42bb      	cmp	r3, r7
 800cc80:	edc9 7a00 	vstr	s15, [r9]
 800cc84:	4641      	mov	r1, r8
 800cc86:	44f1      	add	r9, lr
 800cc88:	d03a      	beq.n	800cd00 <arm_correlate_f32+0x100>
 800cc8a:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 800cc8e:	f000 8267 	beq.w	800d160 <arm_correlate_f32+0x560>
 800cc92:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800cc96:	f100 0110 	add.w	r1, r0, #16
 800cc9a:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800cd80 <arm_correlate_f32+0x180>
 800cc9e:	eb01 050a 	add.w	r5, r1, sl
 800cca2:	f108 0410 	add.w	r4, r8, #16
 800cca6:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ccaa:	ed54 3a04 	vldr	s7, [r4, #-16]
 800ccae:	ed11 6a03 	vldr	s12, [r1, #-12]
 800ccb2:	ed14 4a03 	vldr	s8, [r4, #-12]
 800ccb6:	ed51 6a02 	vldr	s13, [r1, #-8]
 800ccba:	ed54 4a02 	vldr	s9, [r4, #-8]
 800ccbe:	ed51 5a01 	vldr	s11, [r1, #-4]
 800ccc2:	ed14 5a01 	vldr	s10, [r4, #-4]
 800ccc6:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ccca:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ccce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccd2:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800ccd6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ccda:	ee65 6a85 	vmul.f32	s13, s11, s10
 800ccde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cce2:	3110      	adds	r1, #16
 800cce4:	428d      	cmp	r5, r1
 800cce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccea:	f104 0410 	add.w	r4, r4, #16
 800ccee:	d1da      	bne.n	800cca6 <arm_correlate_f32+0xa6>
 800ccf0:	eb00 050a 	add.w	r5, r0, sl
 800ccf4:	eb08 010a 	add.w	r1, r8, sl
 800ccf8:	f1a8 0804 	sub.w	r8, r8, #4
 800ccfc:	463c      	mov	r4, r7
 800ccfe:	e79e      	b.n	800cc3e <arm_correlate_f32+0x3e>
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	fb0e cc04 	mla	ip, lr, r4, ip
 800cd06:	f240 81dd 	bls.w	800d0c4 <arm_correlate_f32+0x4c4>
 800cd0a:	9b02      	ldr	r3, [sp, #8]
 800cd0c:	0899      	lsrs	r1, r3, #2
 800cd0e:	9103      	str	r1, [sp, #12]
 800cd10:	f000 8220 	beq.w	800d154 <arm_correlate_f32+0x554>
 800cd14:	08bb      	lsrs	r3, r7, #2
 800cd16:	f007 0403 	and.w	r4, r7, #3
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	011b      	lsls	r3, r3, #4
 800cd1e:	f103 0b0c 	add.w	fp, r3, #12
 800cd22:	18d5      	adds	r5, r2, r3
 800cd24:	1e63      	subs	r3, r4, #1
 800cd26:	0109      	lsls	r1, r1, #4
 800cd28:	9306      	str	r3, [sp, #24]
 800cd2a:	f100 080c 	add.w	r8, r0, #12
 800cd2e:	9401      	str	r4, [sp, #4]
 800cd30:	9104      	str	r1, [sp, #16]
 800cd32:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800cd36:	4441      	add	r1, r8
 800cd38:	f102 0310 	add.w	r3, r2, #16
 800cd3c:	e9cd 6009 	strd	r6, r0, [sp, #36]	@ 0x24
 800cd40:	9e06      	ldr	r6, [sp, #24]
 800cd42:	9405      	str	r4, [sp, #20]
 800cd44:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 800cd48:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 800cd4c:	46e1      	mov	r9, ip
 800cd4e:	4483      	add	fp, r0
 800cd50:	460f      	mov	r7, r1
 800cd52:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cd54:	469c      	mov	ip, r3
 800cd56:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800cd80 <arm_correlate_f32+0x180>
 800cd5a:	ed58 1a03 	vldr	s3, [r8, #-12]
 800cd5e:	ed18 2a02 	vldr	s4, [r8, #-8]
 800cd62:	ed58 2a01 	vldr	s5, [r8, #-4]
 800cd66:	ed98 0a00 	vldr	s0, [r8]
 800cd6a:	9900      	ldr	r1, [sp, #0]
 800cd6c:	eef0 5a46 	vmov.f32	s11, s12
 800cd70:	eeb0 5a46 	vmov.f32	s10, s12
 800cd74:	eef0 4a46 	vmov.f32	s9, s12
 800cd78:	4663      	mov	r3, ip
 800cd7a:	4642      	mov	r2, r8
 800cd7c:	e005      	b.n	800cd8a <arm_correlate_f32+0x18a>
 800cd7e:	bf00      	nop
 800cd80:	00000000 	.word	0x00000000
 800cd84:	ed90 0a04 	vldr	s0, [r0, #16]
 800cd88:	3210      	adds	r2, #16
 800cd8a:	ed53 6a04 	vldr	s13, [r3, #-16]
 800cd8e:	ed13 7a03 	vldr	s14, [r3, #-12]
 800cd92:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cd96:	ed13 1a01 	vldr	s2, [r3, #-4]
 800cd9a:	ee62 3a26 	vmul.f32	s7, s4, s13
 800cd9e:	ee22 4aa6 	vmul.f32	s8, s5, s13
 800cda2:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800cda6:	edd2 1a01 	vldr	s3, [r2, #4]
 800cdaa:	ee66 6a80 	vmul.f32	s13, s13, s0
 800cdae:	ee22 3a07 	vmul.f32	s6, s4, s14
 800cdb2:	ee33 5a85 	vadd.f32	s10, s7, s10
 800cdb6:	ee74 5a25 	vadd.f32	s11, s8, s11
 800cdba:	ee62 3a87 	vmul.f32	s7, s5, s14
 800cdbe:	ee20 4a07 	vmul.f32	s8, s0, s14
 800cdc2:	ee70 4aa4 	vadd.f32	s9, s1, s9
 800cdc6:	ee36 6a86 	vadd.f32	s12, s13, s12
 800cdca:	ed92 2a02 	vldr	s4, [r2, #8]
 800cdce:	ee27 7a21 	vmul.f32	s14, s14, s3
 800cdd2:	ee73 3a85 	vadd.f32	s7, s7, s10
 800cdd6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cdda:	ee20 5a27 	vmul.f32	s10, s0, s15
 800cdde:	ee33 3a24 	vadd.f32	s6, s6, s9
 800cde2:	ee34 4a25 	vadd.f32	s8, s8, s11
 800cde6:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800cdea:	ee61 5aa7 	vmul.f32	s11, s3, s15
 800cdee:	edd2 2a03 	vldr	s5, [r2, #12]
 800cdf2:	ee67 7a82 	vmul.f32	s15, s15, s4
 800cdf6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800cdfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cdfe:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ce02:	ee20 0a01 	vmul.f32	s0, s0, s2
 800ce06:	ee61 3a81 	vmul.f32	s7, s3, s2
 800ce0a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800ce0e:	ee22 7a01 	vmul.f32	s14, s4, s2
 800ce12:	ee21 6a22 	vmul.f32	s12, s2, s5
 800ce16:	3901      	subs	r1, #1
 800ce18:	f103 0310 	add.w	r3, r3, #16
 800ce1c:	ee70 4a24 	vadd.f32	s9, s0, s9
 800ce20:	ee33 5a85 	vadd.f32	s10, s7, s10
 800ce24:	ee77 5a25 	vadd.f32	s11, s14, s11
 800ce28:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ce2c:	4610      	mov	r0, r2
 800ce2e:	d1a9      	bne.n	800cd84 <arm_correlate_f32+0x184>
 800ce30:	9b01      	ldr	r3, [sp, #4]
 800ce32:	b3f3      	cbz	r3, 800ceb2 <arm_correlate_f32+0x2b2>
 800ce34:	edd5 7a00 	vldr	s15, [r5]
 800ce38:	ed9b 4a00 	vldr	s8, [fp]
 800ce3c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800ce40:	ee62 3a27 	vmul.f32	s7, s4, s15
 800ce44:	ee22 7aa7 	vmul.f32	s14, s5, s15
 800ce48:	ee64 7a27 	vmul.f32	s15, s8, s15
 800ce4c:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800ce50:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ce54:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ce58:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ce5c:	b34e      	cbz	r6, 800ceb2 <arm_correlate_f32+0x2b2>
 800ce5e:	edd5 7a01 	vldr	s15, [r5, #4]
 800ce62:	eddb 6a01 	vldr	s13, [fp, #4]
 800ce66:	ee22 7a27 	vmul.f32	s14, s4, s15
 800ce6a:	ee22 3aa7 	vmul.f32	s6, s5, s15
 800ce6e:	ee67 3a84 	vmul.f32	s7, s15, s8
 800ce72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce76:	2e01      	cmp	r6, #1
 800ce78:	ee74 4a87 	vadd.f32	s9, s9, s14
 800ce7c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ce80:	ee75 5aa3 	vadd.f32	s11, s11, s7
 800ce84:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ce88:	d013      	beq.n	800ceb2 <arm_correlate_f32+0x2b2>
 800ce8a:	ed95 7a02 	vldr	s14, [r5, #8]
 800ce8e:	eddb 3a02 	vldr	s7, [fp, #8]
 800ce92:	ee62 7a87 	vmul.f32	s15, s5, s14
 800ce96:	ee27 4a04 	vmul.f32	s8, s14, s8
 800ce9a:	ee67 6a26 	vmul.f32	s13, s14, s13
 800ce9e:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cea2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800cea6:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ceaa:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800ceae:	ee36 6a07 	vadd.f32	s12, s12, s14
 800ceb2:	f108 0810 	add.w	r8, r8, #16
 800ceb6:	eb09 020e 	add.w	r2, r9, lr
 800ceba:	eb0a 030e 	add.w	r3, sl, lr
 800cebe:	4547      	cmp	r7, r8
 800cec0:	edc9 4a00 	vstr	s9, [r9]
 800cec4:	f10b 0b10 	add.w	fp, fp, #16
 800cec8:	ed82 5a00 	vstr	s10, [r2]
 800cecc:	44a1      	add	r9, r4
 800cece:	edca 5a00 	vstr	s11, [sl]
 800ced2:	ed83 6a00 	vstr	s12, [r3]
 800ced6:	44a2      	add	sl, r4
 800ced8:	f47f af3d 	bne.w	800cd56 <arm_correlate_f32+0x156>
 800cedc:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 800cee0:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	@ 0x24
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	9c05      	ldr	r4, [sp, #20]
 800cee8:	9904      	ldr	r1, [sp, #16]
 800ceea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ceec:	fb04 cc03 	mla	ip, r4, r3, ip
 800cef0:	4401      	add	r1, r0
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	460d      	mov	r5, r1
 800cef6:	9303      	str	r3, [sp, #12]
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	f013 0303 	ands.w	r3, r3, #3
 800cefe:	9301      	str	r3, [sp, #4]
 800cf00:	d071      	beq.n	800cfe6 <arm_correlate_f32+0x3e6>
 800cf02:	9903      	ldr	r1, [sp, #12]
 800cf04:	9205      	str	r2, [sp, #20]
 800cf06:	f007 0403 	and.w	r4, r7, #3
 800cf0a:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800cf0e:	1c4f      	adds	r7, r1, #1
 800cf10:	1859      	adds	r1, r3, r1
 800cf12:	1d03      	adds	r3, r0, #4
 800cf14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cf18:	9400      	str	r4, [sp, #0]
 800cf1a:	f102 0110 	add.w	r1, r2, #16
 800cf1e:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 800cf22:	3c01      	subs	r4, #1
 800cf24:	e9cd 6003 	strd	r6, r0, [sp, #12]
 800cf28:	eb02 090a 	add.w	r9, r2, sl
 800cf2c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800cf30:	46e0      	mov	r8, ip
 800cf32:	4618      	mov	r0, r3
 800cf34:	460e      	mov	r6, r1
 800cf36:	4622      	mov	r2, r4
 800cf38:	ed5f 7a6f 	vldr	s15, [pc, #-444]	@ 800cd80 <arm_correlate_f32+0x180>
 800cf3c:	f105 0110 	add.w	r1, r5, #16
 800cf40:	4633      	mov	r3, r6
 800cf42:	465c      	mov	r4, fp
 800cf44:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cf48:	ed53 3a04 	vldr	s7, [r3, #-16]
 800cf4c:	ed11 6a03 	vldr	s12, [r1, #-12]
 800cf50:	ed13 4a03 	vldr	s8, [r3, #-12]
 800cf54:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cf58:	ed53 4a02 	vldr	s9, [r3, #-8]
 800cf5c:	ed51 5a01 	vldr	s11, [r1, #-4]
 800cf60:	ed13 5a01 	vldr	s10, [r3, #-4]
 800cf64:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cf68:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cf6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf70:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800cf74:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cf78:	ee65 6a85 	vmul.f32	s13, s11, s10
 800cf7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf80:	3c01      	subs	r4, #1
 800cf82:	f101 0110 	add.w	r1, r1, #16
 800cf86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf8a:	f103 0310 	add.w	r3, r3, #16
 800cf8e:	d1d9      	bne.n	800cf44 <arm_correlate_f32+0x344>
 800cf90:	9b00      	ldr	r3, [sp, #0]
 800cf92:	4455      	add	r5, sl
 800cf94:	b1d3      	cbz	r3, 800cfcc <arm_correlate_f32+0x3cc>
 800cf96:	ed99 7a00 	vldr	s14, [r9]
 800cf9a:	edd5 6a00 	vldr	s13, [r5]
 800cf9e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cfa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfa6:	b18a      	cbz	r2, 800cfcc <arm_correlate_f32+0x3cc>
 800cfa8:	ed99 7a01 	vldr	s14, [r9, #4]
 800cfac:	edd5 6a01 	vldr	s13, [r5, #4]
 800cfb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cfb4:	2a01      	cmp	r2, #1
 800cfb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfba:	d007      	beq.n	800cfcc <arm_correlate_f32+0x3cc>
 800cfbc:	ed95 7a02 	vldr	s14, [r5, #8]
 800cfc0:	edd9 6a02 	vldr	s13, [r9, #8]
 800cfc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cfc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfcc:	463d      	mov	r5, r7
 800cfce:	3704      	adds	r7, #4
 800cfd0:	42b8      	cmp	r0, r7
 800cfd2:	edc8 7a00 	vstr	s15, [r8]
 800cfd6:	44f0      	add	r8, lr
 800cfd8:	d1ae      	bne.n	800cf38 <arm_correlate_f32+0x338>
 800cfda:	9b01      	ldr	r3, [sp, #4]
 800cfdc:	9a05      	ldr	r2, [sp, #20]
 800cfde:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 800cfe2:	fb0e cc03 	mla	ip, lr, r3, ip
 800cfe6:	9b02      	ldr	r3, [sp, #8]
 800cfe8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cfec:	08b5      	lsrs	r5, r6, #2
 800cfee:	ed5f 5a9c 	vldr	s11, [pc, #-624]	@ 800cd80 <arm_correlate_f32+0x180>
 800cff2:	f000 80ac 	beq.w	800d14e <arm_correlate_f32+0x54e>
 800cff6:	f100 0110 	add.w	r1, r0, #16
 800cffa:	f102 0310 	add.w	r3, r2, #16
 800cffe:	462c      	mov	r4, r5
 800d000:	ed51 6a04 	vldr	s13, [r1, #-16]
 800d004:	ed53 3a04 	vldr	s7, [r3, #-16]
 800d008:	ed11 7a03 	vldr	s14, [r1, #-12]
 800d00c:	ed13 4a03 	vldr	s8, [r3, #-12]
 800d010:	ed51 7a02 	vldr	s15, [r1, #-8]
 800d014:	ed53 4a02 	vldr	s9, [r3, #-8]
 800d018:	ed11 6a01 	vldr	s12, [r1, #-4]
 800d01c:	ed13 5a01 	vldr	s10, [r3, #-4]
 800d020:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d024:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d028:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d02c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d030:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d034:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d03c:	3c01      	subs	r4, #1
 800d03e:	f101 0110 	add.w	r1, r1, #16
 800d042:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d046:	f103 0310 	add.w	r3, r3, #16
 800d04a:	d1d9      	bne.n	800d000 <arm_correlate_f32+0x400>
 800d04c:	012d      	lsls	r5, r5, #4
 800d04e:	1941      	adds	r1, r0, r5
 800d050:	4415      	add	r5, r2
 800d052:	f016 0303 	ands.w	r3, r6, #3
 800d056:	d01b      	beq.n	800d090 <arm_correlate_f32+0x490>
 800d058:	edd5 7a00 	vldr	s15, [r5]
 800d05c:	ed91 7a00 	vldr	s14, [r1]
 800d060:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d064:	3b01      	subs	r3, #1
 800d066:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d06a:	d011      	beq.n	800d090 <arm_correlate_f32+0x490>
 800d06c:	edd5 7a01 	vldr	s15, [r5, #4]
 800d070:	ed91 7a01 	vldr	s14, [r1, #4]
 800d074:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d078:	2b01      	cmp	r3, #1
 800d07a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d07e:	d007      	beq.n	800d090 <arm_correlate_f32+0x490>
 800d080:	edd1 7a02 	vldr	s15, [r1, #8]
 800d084:	ed95 7a02 	vldr	s14, [r5, #8]
 800d088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d08c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d090:	3e01      	subs	r6, #1
 800d092:	edcc 5a00 	vstr	s11, [ip]
 800d096:	f100 0004 	add.w	r0, r0, #4
 800d09a:	44f4      	add	ip, lr
 800d09c:	d1a6      	bne.n	800cfec <arm_correlate_f32+0x3ec>
 800d09e:	b00d      	add	sp, #52	@ 0x34
 800d0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a4:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 800d0a8:	4606      	mov	r6, r0
 800d0aa:	3c02      	subs	r4, #2
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d0b0:	440c      	add	r4, r1
 800d0b2:	460d      	mov	r5, r1
 800d0b4:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	f06f 0e03 	mvn.w	lr, #3
 800d0c0:	462b      	mov	r3, r5
 800d0c2:	e5aa      	b.n	800cc1a <arm_correlate_f32+0x1a>
 800d0c4:	9902      	ldr	r1, [sp, #8]
 800d0c6:	2900      	cmp	r1, #0
 800d0c8:	d090      	beq.n	800cfec <arm_correlate_f32+0x3ec>
 800d0ca:	9902      	ldr	r1, [sp, #8]
 800d0cc:	ed1f 6ad4 	vldr	s12, [pc, #-848]	@ 800cd80 <arm_correlate_f32+0x180>
 800d0d0:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800d0d4:	eb00 0708 	add.w	r7, r0, r8
 800d0d8:	4601      	mov	r1, r0
 800d0da:	4665      	mov	r5, ip
 800d0dc:	e020      	b.n	800d120 <arm_correlate_f32+0x520>
 800d0de:	edd2 7a00 	vldr	s15, [r2]
 800d0e2:	ecb4 7a01 	vldmia	r4!, {s14}
 800d0e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d0ee:	b18e      	cbz	r6, 800d114 <arm_correlate_f32+0x514>
 800d0f0:	ed92 7a01 	vldr	s14, [r2, #4]
 800d0f4:	edd1 6a01 	vldr	s13, [r1, #4]
 800d0f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d102:	d007      	beq.n	800d114 <arm_correlate_f32+0x514>
 800d104:	ed91 7a02 	vldr	s14, [r1, #8]
 800d108:	edd2 6a02 	vldr	s13, [r2, #8]
 800d10c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d110:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d114:	42bc      	cmp	r4, r7
 800d116:	edc5 7a00 	vstr	s15, [r5]
 800d11a:	4621      	mov	r1, r4
 800d11c:	4475      	add	r5, lr
 800d11e:	d00b      	beq.n	800d138 <arm_correlate_f32+0x538>
 800d120:	460c      	mov	r4, r1
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1db      	bne.n	800d0de <arm_correlate_f32+0x4de>
 800d126:	1d0c      	adds	r4, r1, #4
 800d128:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800d168 <arm_correlate_f32+0x568>
 800d12c:	42bc      	cmp	r4, r7
 800d12e:	edc5 7a00 	vstr	s15, [r5]
 800d132:	4621      	mov	r1, r4
 800d134:	4475      	add	r5, lr
 800d136:	d1f3      	bne.n	800d120 <arm_correlate_f32+0x520>
 800d138:	9b02      	ldr	r3, [sp, #8]
 800d13a:	4440      	add	r0, r8
 800d13c:	fb0e cc03 	mla	ip, lr, r3, ip
 800d140:	2e00      	cmp	r6, #0
 800d142:	d0ac      	beq.n	800d09e <arm_correlate_f32+0x49e>
 800d144:	08b5      	lsrs	r5, r6, #2
 800d146:	eddf 5a08 	vldr	s11, [pc, #32]	@ 800d168 <arm_correlate_f32+0x568>
 800d14a:	f47f af54 	bne.w	800cff6 <arm_correlate_f32+0x3f6>
 800d14e:	4615      	mov	r5, r2
 800d150:	4601      	mov	r1, r0
 800d152:	e77e      	b.n	800d052 <arm_correlate_f32+0x452>
 800d154:	4605      	mov	r5, r0
 800d156:	e6cf      	b.n	800cef8 <arm_correlate_f32+0x2f8>
 800d158:	9902      	ldr	r1, [sp, #8]
 800d15a:	2900      	cmp	r1, #0
 800d15c:	d1b5      	bne.n	800d0ca <arm_correlate_f32+0x4ca>
 800d15e:	e79e      	b.n	800d09e <arm_correlate_f32+0x49e>
 800d160:	eddf 7a01 	vldr	s15, [pc, #4]	@ 800d168 <arm_correlate_f32+0x568>
 800d164:	4605      	mov	r5, r0
 800d166:	e5c7      	b.n	800ccf8 <arm_correlate_f32+0xf8>
 800d168:	00000000 	.word	0x00000000

0800d16c <arm_conv_f32>:
 800d16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d170:	b08b      	sub	sp, #44	@ 0x2c
 800d172:	4299      	cmp	r1, r3
 800d174:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d176:	d205      	bcs.n	800d184 <arm_conv_f32+0x18>
 800d178:	4606      	mov	r6, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	4610      	mov	r0, r2
 800d17e:	4619      	mov	r1, r3
 800d180:	4632      	mov	r2, r6
 800d182:	4623      	mov	r3, r4
 800d184:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800d188:	3101      	adds	r1, #1
 800d18a:	1ac9      	subs	r1, r1, r3
 800d18c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d190:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800d194:	9101      	str	r1, [sp, #4]
 800d196:	1e59      	subs	r1, r3, #1
 800d198:	eb02 070b 	add.w	r7, r2, fp
 800d19c:	f000 8277 	beq.w	800d68e <arm_conv_f32+0x522>
 800d1a0:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800d460 <arm_conv_f32+0x2f4>
 800d1a4:	f102 0904 	add.w	r9, r2, #4
 800d1a8:	46aa      	mov	sl, r5
 800d1aa:	4680      	mov	r8, r0
 800d1ac:	2401      	movs	r4, #1
 800d1ae:	f014 0603 	ands.w	r6, r4, #3
 800d1b2:	d01b      	beq.n	800d1ec <arm_conv_f32+0x80>
 800d1b4:	ed92 7a00 	vldr	s14, [r2]
 800d1b8:	edd8 6a00 	vldr	s13, [r8]
 800d1bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1c0:	3e01      	subs	r6, #1
 800d1c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1c6:	d011      	beq.n	800d1ec <arm_conv_f32+0x80>
 800d1c8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800d1cc:	edd8 6a01 	vldr	s13, [r8, #4]
 800d1d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1d4:	2e01      	cmp	r6, #1
 800d1d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1da:	d007      	beq.n	800d1ec <arm_conv_f32+0x80>
 800d1dc:	ed98 7a02 	vldr	s14, [r8, #8]
 800d1e0:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d1e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1ec:	3401      	adds	r4, #1
 800d1ee:	42a3      	cmp	r3, r4
 800d1f0:	ecea 7a01 	vstmia	sl!, {s15}
 800d1f4:	464a      	mov	r2, r9
 800d1f6:	d03a      	beq.n	800d26e <arm_conv_f32+0x102>
 800d1f8:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800d1fc:	f000 824c 	beq.w	800d698 <arm_conv_f32+0x52c>
 800d200:	f100 0210 	add.w	r2, r0, #16
 800d204:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800d208:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800d460 <arm_conv_f32+0x2f4>
 800d20c:	eb02 0c08 	add.w	ip, r2, r8
 800d210:	f1a9 0610 	sub.w	r6, r9, #16
 800d214:	ed12 7a04 	vldr	s14, [r2, #-16]
 800d218:	edd6 3a04 	vldr	s7, [r6, #16]
 800d21c:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d220:	ed96 4a03 	vldr	s8, [r6, #12]
 800d224:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d228:	edd6 4a02 	vldr	s9, [r6, #8]
 800d22c:	ed52 5a01 	vldr	s11, [r2, #-4]
 800d230:	ed96 5a01 	vldr	s10, [r6, #4]
 800d234:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d238:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d23c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d240:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800d244:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d248:	ee65 6a85 	vmul.f32	s13, s11, s10
 800d24c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d250:	3210      	adds	r2, #16
 800d252:	4594      	cmp	ip, r2
 800d254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d258:	f1a6 0610 	sub.w	r6, r6, #16
 800d25c:	d1da      	bne.n	800d214 <arm_conv_f32+0xa8>
 800d25e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800d262:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800d266:	4480      	add	r8, r0
 800d268:	f109 0904 	add.w	r9, r9, #4
 800d26c:	e79f      	b.n	800d1ae <arm_conv_f32+0x42>
 800d26e:	2b03      	cmp	r3, #3
 800d270:	445d      	add	r5, fp
 800d272:	f240 80e9 	bls.w	800d448 <arm_conv_f32+0x2dc>
 800d276:	9b01      	ldr	r3, [sp, #4]
 800d278:	089a      	lsrs	r2, r3, #2
 800d27a:	9202      	str	r2, [sp, #8]
 800d27c:	f000 8203 	beq.w	800d686 <arm_conv_f32+0x51a>
 800d280:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800d284:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800d288:	0112      	lsls	r2, r2, #4
 800d28a:	f004 0603 	and.w	r6, r4, #3
 800d28e:	9203      	str	r2, [sp, #12]
 800d290:	f1a3 0a10 	sub.w	sl, r3, #16
 800d294:	f1a3 020c 	sub.w	r2, r3, #12
 800d298:	3b08      	subs	r3, #8
 800d29a:	9204      	str	r2, [sp, #16]
 800d29c:	9305      	str	r3, [sp, #20]
 800d29e:	f106 39ff 	add.w	r9, r6, #4294967295
 800d2a2:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800d2a6:	9a03      	ldr	r2, [sp, #12]
 800d2a8:	f100 0c1c 	add.w	ip, r0, #28
 800d2ac:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800d2b0:	464c      	mov	r4, r9
 800d2b2:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800d2b6:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800d2ba:	f1a7 0310 	sub.w	r3, r7, #16
 800d2be:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800d2c2:	eb05 0b02 	add.w	fp, r5, r2
 800d2c6:	461f      	mov	r7, r3
 800d2c8:	3510      	adds	r5, #16
 800d2ca:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800d460 <arm_conv_f32+0x2f4>
 800d2ce:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800d2d2:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800d2d6:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800d2da:	eeb0 5a46 	vmov.f32	s10, s12
 800d2de:	eef0 4a46 	vmov.f32	s9, s12
 800d2e2:	eef0 5a46 	vmov.f32	s11, s12
 800d2e6:	463a      	mov	r2, r7
 800d2e8:	4663      	mov	r3, ip
 800d2ea:	4641      	mov	r1, r8
 800d2ec:	edd2 6a04 	vldr	s13, [r2, #16]
 800d2f0:	ed13 0a04 	vldr	s0, [r3, #-16]
 800d2f4:	ed92 7a03 	vldr	s14, [r2, #12]
 800d2f8:	edd2 7a02 	vldr	s15, [r2, #8]
 800d2fc:	edd2 0a01 	vldr	s1, [r2, #4]
 800d300:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800d304:	ee62 3a26 	vmul.f32	s7, s4, s13
 800d308:	ee61 2a26 	vmul.f32	s5, s2, s13
 800d30c:	ed13 1a03 	vldr	s2, [r3, #-12]
 800d310:	ee66 6a80 	vmul.f32	s13, s13, s0
 800d314:	ee21 4a87 	vmul.f32	s8, s3, s14
 800d318:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d31c:	ee33 5a85 	vadd.f32	s10, s7, s10
 800d320:	ee22 3a07 	vmul.f32	s6, s4, s14
 800d324:	ed53 1a02 	vldr	s3, [r3, #-8]
 800d328:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800d32c:	ee36 6a86 	vadd.f32	s12, s13, s12
 800d330:	ee60 3a07 	vmul.f32	s7, s0, s14
 800d334:	ee27 7a01 	vmul.f32	s14, s14, s2
 800d338:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d33c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d340:	ee74 2a22 	vadd.f32	s5, s8, s5
 800d344:	ee60 4a27 	vmul.f32	s9, s0, s15
 800d348:	ee22 4a27 	vmul.f32	s8, s4, s15
 800d34c:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d350:	ed13 2a01 	vldr	s4, [r3, #-4]
 800d354:	ee21 5a27 	vmul.f32	s10, s2, s15
 800d358:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800d35c:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d360:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d364:	ee34 4a22 	vadd.f32	s8, s8, s5
 800d368:	ee60 5a20 	vmul.f32	s11, s0, s1
 800d36c:	ee21 3a20 	vmul.f32	s6, s2, s1
 800d370:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d374:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800d378:	ee20 6a82 	vmul.f32	s12, s1, s4
 800d37c:	3901      	subs	r1, #1
 800d37e:	f1a2 0210 	sub.w	r2, r2, #16
 800d382:	ee75 5a84 	vadd.f32	s11, s11, s8
 800d386:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d38a:	ee37 5a05 	vadd.f32	s10, s14, s10
 800d38e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d392:	f103 0310 	add.w	r3, r3, #16
 800d396:	d1a9      	bne.n	800d2ec <arm_conv_f32+0x180>
 800d398:	eb0a 030c 	add.w	r3, sl, ip
 800d39c:	2e00      	cmp	r6, #0
 800d39e:	d042      	beq.n	800d426 <arm_conv_f32+0x2ba>
 800d3a0:	edde 7a00 	vldr	s15, [lr]
 800d3a4:	ed93 4a00 	vldr	s8, [r3]
 800d3a8:	ee61 6a27 	vmul.f32	s13, s2, s15
 800d3ac:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800d3b0:	ee22 7a27 	vmul.f32	s14, s4, s15
 800d3b4:	ee64 7a27 	vmul.f32	s15, s8, s15
 800d3b8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800d3bc:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d3c0:	ee35 5a07 	vadd.f32	s10, s10, s14
 800d3c4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d3c8:	eb09 030c 	add.w	r3, r9, ip
 800d3cc:	b35c      	cbz	r4, 800d426 <arm_conv_f32+0x2ba>
 800d3ce:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800d3d2:	edd3 6a00 	vldr	s13, [r3]
 800d3d6:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800d3da:	ee22 3a27 	vmul.f32	s6, s4, s15
 800d3de:	ee67 3a84 	vmul.f32	s7, s15, s8
 800d3e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3e6:	2c01      	cmp	r4, #1
 800d3e8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d3ec:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d3f0:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d3f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d3f8:	eb00 030c 	add.w	r3, r0, ip
 800d3fc:	d013      	beq.n	800d426 <arm_conv_f32+0x2ba>
 800d3fe:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800d402:	edd3 3a00 	vldr	s7, [r3]
 800d406:	ee62 7a07 	vmul.f32	s15, s4, s14
 800d40a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800d40e:	ee67 6a26 	vmul.f32	s13, s14, s13
 800d412:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d416:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d41a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d41e:	ee35 5a26 	vadd.f32	s10, s10, s13
 800d422:	ee36 6a07 	vadd.f32	s12, s12, s14
 800d426:	45ab      	cmp	fp, r5
 800d428:	ed45 5a04 	vstr	s11, [r5, #-16]
 800d42c:	ed45 4a03 	vstr	s9, [r5, #-12]
 800d430:	ed05 5a02 	vstr	s10, [r5, #-8]
 800d434:	ed05 6a01 	vstr	s12, [r5, #-4]
 800d438:	f10c 0c10 	add.w	ip, ip, #16
 800d43c:	f105 0310 	add.w	r3, r5, #16
 800d440:	f000 809e 	beq.w	800d580 <arm_conv_f32+0x414>
 800d444:	461d      	mov	r5, r3
 800d446:	e740      	b.n	800d2ca <arm_conv_f32+0x15e>
 800d448:	9a01      	ldr	r2, [sp, #4]
 800d44a:	46ac      	mov	ip, r5
 800d44c:	2a00      	cmp	r2, #0
 800d44e:	d037      	beq.n	800d4c0 <arm_conv_f32+0x354>
 800d450:	9a01      	ldr	r2, [sp, #4]
 800d452:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800d460 <arm_conv_f32+0x2f4>
 800d456:	0096      	lsls	r6, r2, #2
 800d458:	eb05 0c06 	add.w	ip, r5, r6
 800d45c:	4604      	mov	r4, r0
 800d45e:	e021      	b.n	800d4a4 <arm_conv_f32+0x338>
 800d460:	00000000 	.word	0x00000000
 800d464:	edd7 7a00 	vldr	s15, [r7]
 800d468:	ecb2 7a01 	vldmia	r2!, {s14}
 800d46c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d470:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d474:	b189      	cbz	r1, 800d49a <arm_conv_f32+0x32e>
 800d476:	ed17 7a01 	vldr	s14, [r7, #-4]
 800d47a:	edd4 6a01 	vldr	s13, [r4, #4]
 800d47e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d482:	2b02      	cmp	r3, #2
 800d484:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d488:	d007      	beq.n	800d49a <arm_conv_f32+0x32e>
 800d48a:	ed94 7a02 	vldr	s14, [r4, #8]
 800d48e:	ed57 6a02 	vldr	s13, [r7, #-8]
 800d492:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d496:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d49a:	ece5 7a01 	vstmia	r5!, {s15}
 800d49e:	4565      	cmp	r5, ip
 800d4a0:	4614      	mov	r4, r2
 800d4a2:	d00a      	beq.n	800d4ba <arm_conv_f32+0x34e>
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1dc      	bne.n	800d464 <arm_conv_f32+0x2f8>
 800d4aa:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800d460 <arm_conv_f32+0x2f4>
 800d4ae:	ece5 7a01 	vstmia	r5!, {s15}
 800d4b2:	1d22      	adds	r2, r4, #4
 800d4b4:	4565      	cmp	r5, ip
 800d4b6:	4614      	mov	r4, r2
 800d4b8:	d1f4      	bne.n	800d4a4 <arm_conv_f32+0x338>
 800d4ba:	4430      	add	r0, r6
 800d4bc:	2900      	cmp	r1, #0
 800d4be:	d059      	beq.n	800d574 <arm_conv_f32+0x408>
 800d4c0:	088d      	lsrs	r5, r1, #2
 800d4c2:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800d460 <arm_conv_f32+0x2f4>
 800d4c6:	d058      	beq.n	800d57a <arm_conv_f32+0x40e>
 800d4c8:	f100 0210 	add.w	r2, r0, #16
 800d4cc:	f1a7 0310 	sub.w	r3, r7, #16
 800d4d0:	462c      	mov	r4, r5
 800d4d2:	ed52 6a04 	vldr	s13, [r2, #-16]
 800d4d6:	edd3 3a04 	vldr	s7, [r3, #16]
 800d4da:	ed12 7a03 	vldr	s14, [r2, #-12]
 800d4de:	ed93 4a03 	vldr	s8, [r3, #12]
 800d4e2:	ed52 7a02 	vldr	s15, [r2, #-8]
 800d4e6:	edd3 4a02 	vldr	s9, [r3, #8]
 800d4ea:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d4ee:	ed93 5a01 	vldr	s10, [r3, #4]
 800d4f2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d4f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d4fa:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d4fe:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d502:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d506:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d50a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d50e:	3c01      	subs	r4, #1
 800d510:	f102 0210 	add.w	r2, r2, #16
 800d514:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d518:	f1a3 0310 	sub.w	r3, r3, #16
 800d51c:	d1d9      	bne.n	800d4d2 <arm_conv_f32+0x366>
 800d51e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800d522:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800d526:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800d52a:	f011 0203 	ands.w	r2, r1, #3
 800d52e:	d01b      	beq.n	800d568 <arm_conv_f32+0x3fc>
 800d530:	edd3 7a00 	vldr	s15, [r3]
 800d534:	ed95 7a00 	vldr	s14, [r5]
 800d538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d53c:	3a01      	subs	r2, #1
 800d53e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d542:	d011      	beq.n	800d568 <arm_conv_f32+0x3fc>
 800d544:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d548:	ed95 7a01 	vldr	s14, [r5, #4]
 800d54c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d550:	2a01      	cmp	r2, #1
 800d552:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d556:	d007      	beq.n	800d568 <arm_conv_f32+0x3fc>
 800d558:	edd5 7a02 	vldr	s15, [r5, #8]
 800d55c:	ed13 7a02 	vldr	s14, [r3, #-8]
 800d560:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d564:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d568:	3901      	subs	r1, #1
 800d56a:	ecec 5a01 	vstmia	ip!, {s11}
 800d56e:	f100 0004 	add.w	r0, r0, #4
 800d572:	d1a5      	bne.n	800d4c0 <arm_conv_f32+0x354>
 800d574:	b00b      	add	sp, #44	@ 0x2c
 800d576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57a:	463b      	mov	r3, r7
 800d57c:	4605      	mov	r5, r0
 800d57e:	e7d4      	b.n	800d52a <arm_conv_f32+0x3be>
 800d580:	9b02      	ldr	r3, [sp, #8]
 800d582:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	9302      	str	r3, [sp, #8]
 800d58a:	9b03      	ldr	r3, [sp, #12]
 800d58c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800d590:	4403      	add	r3, r0
 800d592:	465d      	mov	r5, fp
 800d594:	469e      	mov	lr, r3
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	f013 0c03 	ands.w	ip, r3, #3
 800d59c:	d075      	beq.n	800d68a <arm_conv_f32+0x51e>
 800d59e:	9b02      	ldr	r3, [sp, #8]
 800d5a0:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800d5a4:	f004 0403 	and.w	r4, r4, #3
 800d5a8:	f104 3bff 	add.w	fp, r4, #4294967295
 800d5ac:	f103 0801 	add.w	r8, r3, #1
 800d5b0:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800d5b4:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800d5b8:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800d5bc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800d5c0:	f1a7 0210 	sub.w	r2, r7, #16
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	465b      	mov	r3, fp
 800d5c8:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800d5cc:	468b      	mov	fp, r1
 800d5ce:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4617      	mov	r7, r2
 800d5d6:	461c      	mov	r4, r3
 800d5d8:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800d460 <arm_conv_f32+0x2f4>
 800d5dc:	f10e 0210 	add.w	r2, lr, #16
 800d5e0:	463b      	mov	r3, r7
 800d5e2:	4656      	mov	r6, sl
 800d5e4:	ed12 7a04 	vldr	s14, [r2, #-16]
 800d5e8:	edd3 3a04 	vldr	s7, [r3, #16]
 800d5ec:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d5f0:	ed93 4a03 	vldr	s8, [r3, #12]
 800d5f4:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d5f8:	edd3 4a02 	vldr	s9, [r3, #8]
 800d5fc:	ed52 5a01 	vldr	s11, [r2, #-4]
 800d600:	ed93 5a01 	vldr	s10, [r3, #4]
 800d604:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d608:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d60c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d610:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800d614:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d618:	ee65 6a85 	vmul.f32	s13, s11, s10
 800d61c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d620:	3e01      	subs	r6, #1
 800d622:	f102 0210 	add.w	r2, r2, #16
 800d626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d62a:	f1a3 0310 	sub.w	r3, r3, #16
 800d62e:	d1d9      	bne.n	800d5e4 <arm_conv_f32+0x478>
 800d630:	4486      	add	lr, r0
 800d632:	b1d1      	cbz	r1, 800d66a <arm_conv_f32+0x4fe>
 800d634:	ed99 7a00 	vldr	s14, [r9]
 800d638:	edde 6a00 	vldr	s13, [lr]
 800d63c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d640:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d644:	b18c      	cbz	r4, 800d66a <arm_conv_f32+0x4fe>
 800d646:	ed19 7a01 	vldr	s14, [r9, #-4]
 800d64a:	edde 6a01 	vldr	s13, [lr, #4]
 800d64e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d652:	2c01      	cmp	r4, #1
 800d654:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d658:	d007      	beq.n	800d66a <arm_conv_f32+0x4fe>
 800d65a:	ed9e 7a02 	vldr	s14, [lr, #8]
 800d65e:	ed59 6a02 	vldr	s13, [r9, #-8]
 800d662:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d66a:	ece5 7a01 	vstmia	r5!, {s15}
 800d66e:	4565      	cmp	r5, ip
 800d670:	46c6      	mov	lr, r8
 800d672:	f108 0804 	add.w	r8, r8, #4
 800d676:	d1af      	bne.n	800d5d8 <arm_conv_f32+0x46c>
 800d678:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800d67c:	4659      	mov	r1, fp
 800d67e:	9b01      	ldr	r3, [sp, #4]
 800d680:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d684:	e71c      	b.n	800d4c0 <arm_conv_f32+0x354>
 800d686:	4686      	mov	lr, r0
 800d688:	e785      	b.n	800d596 <arm_conv_f32+0x42a>
 800d68a:	46ac      	mov	ip, r5
 800d68c:	e7f7      	b.n	800d67e <arm_conv_f32+0x512>
 800d68e:	9a01      	ldr	r2, [sp, #4]
 800d690:	2a00      	cmp	r2, #0
 800d692:	f47f aedd 	bne.w	800d450 <arm_conv_f32+0x2e4>
 800d696:	e76d      	b.n	800d574 <arm_conv_f32+0x408>
 800d698:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800d460 <arm_conv_f32+0x2f4>
 800d69c:	4680      	mov	r8, r0
 800d69e:	e5e3      	b.n	800d268 <arm_conv_f32+0xfc>

0800d6a0 <memset>:
 800d6a0:	4402      	add	r2, r0
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d100      	bne.n	800d6aa <memset+0xa>
 800d6a8:	4770      	bx	lr
 800d6aa:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ae:	e7f9      	b.n	800d6a4 <memset+0x4>

0800d6b0 <__errno>:
 800d6b0:	4b01      	ldr	r3, [pc, #4]	@ (800d6b8 <__errno+0x8>)
 800d6b2:	6818      	ldr	r0, [r3, #0]
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	24000064 	.word	0x24000064

0800d6bc <__libc_init_array>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	4d0d      	ldr	r5, [pc, #52]	@ (800d6f4 <__libc_init_array+0x38>)
 800d6c0:	4c0d      	ldr	r4, [pc, #52]	@ (800d6f8 <__libc_init_array+0x3c>)
 800d6c2:	1b64      	subs	r4, r4, r5
 800d6c4:	10a4      	asrs	r4, r4, #2
 800d6c6:	2600      	movs	r6, #0
 800d6c8:	42a6      	cmp	r6, r4
 800d6ca:	d109      	bne.n	800d6e0 <__libc_init_array+0x24>
 800d6cc:	4d0b      	ldr	r5, [pc, #44]	@ (800d6fc <__libc_init_array+0x40>)
 800d6ce:	4c0c      	ldr	r4, [pc, #48]	@ (800d700 <__libc_init_array+0x44>)
 800d6d0:	f001 f86a 	bl	800e7a8 <_init>
 800d6d4:	1b64      	subs	r4, r4, r5
 800d6d6:	10a4      	asrs	r4, r4, #2
 800d6d8:	2600      	movs	r6, #0
 800d6da:	42a6      	cmp	r6, r4
 800d6dc:	d105      	bne.n	800d6ea <__libc_init_array+0x2e>
 800d6de:	bd70      	pop	{r4, r5, r6, pc}
 800d6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6e4:	4798      	blx	r3
 800d6e6:	3601      	adds	r6, #1
 800d6e8:	e7ee      	b.n	800d6c8 <__libc_init_array+0xc>
 800d6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6ee:	4798      	blx	r3
 800d6f0:	3601      	adds	r6, #1
 800d6f2:	e7f2      	b.n	800d6da <__libc_init_array+0x1e>
 800d6f4:	0800f1d0 	.word	0x0800f1d0
 800d6f8:	0800f1d0 	.word	0x0800f1d0
 800d6fc:	0800f1d0 	.word	0x0800f1d0
 800d700:	0800f1d4 	.word	0x0800f1d4
 800d704:	00000000 	.word	0x00000000

0800d708 <fmod>:
 800d708:	b508      	push	{r3, lr}
 800d70a:	ed2d 8b04 	vpush	{d8-d9}
 800d70e:	eeb0 9b40 	vmov.f64	d9, d0
 800d712:	eeb0 8b41 	vmov.f64	d8, d1
 800d716:	f000 f9f7 	bl	800db08 <__ieee754_fmod>
 800d71a:	eeb4 9b48 	vcmp.f64	d9, d8
 800d71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d722:	d60c      	bvs.n	800d73e <fmod+0x36>
 800d724:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800d748 <fmod+0x40>
 800d728:	eeb4 8b49 	vcmp.f64	d8, d9
 800d72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d730:	d105      	bne.n	800d73e <fmod+0x36>
 800d732:	f7ff ffbd 	bl	800d6b0 <__errno>
 800d736:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d73a:	2321      	movs	r3, #33	@ 0x21
 800d73c:	6003      	str	r3, [r0, #0]
 800d73e:	ecbd 8b04 	vpop	{d8-d9}
 800d742:	bd08      	pop	{r3, pc}
 800d744:	f3af 8000 	nop.w
	...

0800d750 <remainder>:
 800d750:	b508      	push	{r3, lr}
 800d752:	ed2d 8b04 	vpush	{d8-d9}
 800d756:	eeb0 8b41 	vmov.f64	d8, d1
 800d75a:	f000 fc25 	bl	800dfa8 <__ieee754_remainder>
 800d75e:	eeb4 8b48 	vcmp.f64	d8, d8
 800d762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d766:	d60c      	bvs.n	800d782 <remainder+0x32>
 800d768:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d788 <remainder+0x38>
 800d76c:	eeb4 8b49 	vcmp.f64	d8, d9
 800d770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d774:	d105      	bne.n	800d782 <remainder+0x32>
 800d776:	f7ff ff9b 	bl	800d6b0 <__errno>
 800d77a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d77e:	2321      	movs	r3, #33	@ 0x21
 800d780:	6003      	str	r3, [r0, #0]
 800d782:	ecbd 8b04 	vpop	{d8-d9}
 800d786:	bd08      	pop	{r3, pc}
	...

0800d790 <sqrt>:
 800d790:	b508      	push	{r3, lr}
 800d792:	ed2d 8b04 	vpush	{d8-d9}
 800d796:	eeb0 8b40 	vmov.f64	d8, d0
 800d79a:	f000 f8f1 	bl	800d980 <__ieee754_sqrt>
 800d79e:	eeb4 8b48 	vcmp.f64	d8, d8
 800d7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a6:	d60c      	bvs.n	800d7c2 <sqrt+0x32>
 800d7a8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d7c8 <sqrt+0x38>
 800d7ac:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b4:	d505      	bpl.n	800d7c2 <sqrt+0x32>
 800d7b6:	f7ff ff7b 	bl	800d6b0 <__errno>
 800d7ba:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d7be:	2321      	movs	r3, #33	@ 0x21
 800d7c0:	6003      	str	r3, [r0, #0]
 800d7c2:	ecbd 8b04 	vpop	{d8-d9}
 800d7c6:	bd08      	pop	{r3, pc}
	...

0800d7d0 <cos>:
 800d7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7d2:	eeb0 7b40 	vmov.f64	d7, d0
 800d7d6:	ee17 3a90 	vmov	r3, s15
 800d7da:	4a21      	ldr	r2, [pc, #132]	@ (800d860 <cos+0x90>)
 800d7dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d806      	bhi.n	800d7f2 <cos+0x22>
 800d7e4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d858 <cos+0x88>
 800d7e8:	b005      	add	sp, #20
 800d7ea:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7ee:	f000 b8cb 	b.w	800d988 <__kernel_cos>
 800d7f2:	4a1c      	ldr	r2, [pc, #112]	@ (800d864 <cos+0x94>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d904      	bls.n	800d802 <cos+0x32>
 800d7f8:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d7fc:	b005      	add	sp, #20
 800d7fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800d802:	4668      	mov	r0, sp
 800d804:	f000 fa8c 	bl	800dd20 <__ieee754_rem_pio2>
 800d808:	f000 0003 	and.w	r0, r0, #3
 800d80c:	2801      	cmp	r0, #1
 800d80e:	d009      	beq.n	800d824 <cos+0x54>
 800d810:	2802      	cmp	r0, #2
 800d812:	d010      	beq.n	800d836 <cos+0x66>
 800d814:	b9b0      	cbnz	r0, 800d844 <cos+0x74>
 800d816:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d81a:	ed9d 0b00 	vldr	d0, [sp]
 800d81e:	f000 f8b3 	bl	800d988 <__kernel_cos>
 800d822:	e7eb      	b.n	800d7fc <cos+0x2c>
 800d824:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d828:	ed9d 0b00 	vldr	d0, [sp]
 800d82c:	f000 f914 	bl	800da58 <__kernel_sin>
 800d830:	eeb1 0b40 	vneg.f64	d0, d0
 800d834:	e7e2      	b.n	800d7fc <cos+0x2c>
 800d836:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d83a:	ed9d 0b00 	vldr	d0, [sp]
 800d83e:	f000 f8a3 	bl	800d988 <__kernel_cos>
 800d842:	e7f5      	b.n	800d830 <cos+0x60>
 800d844:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d848:	ed9d 0b00 	vldr	d0, [sp]
 800d84c:	2001      	movs	r0, #1
 800d84e:	f000 f903 	bl	800da58 <__kernel_sin>
 800d852:	e7d3      	b.n	800d7fc <cos+0x2c>
 800d854:	f3af 8000 	nop.w
	...
 800d860:	3fe921fb 	.word	0x3fe921fb
 800d864:	7fefffff 	.word	0x7fefffff

0800d868 <sin>:
 800d868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d86a:	eeb0 7b40 	vmov.f64	d7, d0
 800d86e:	ee17 3a90 	vmov	r3, s15
 800d872:	4a21      	ldr	r2, [pc, #132]	@ (800d8f8 <sin+0x90>)
 800d874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d878:	4293      	cmp	r3, r2
 800d87a:	d807      	bhi.n	800d88c <sin+0x24>
 800d87c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d8f0 <sin+0x88>
 800d880:	2000      	movs	r0, #0
 800d882:	b005      	add	sp, #20
 800d884:	f85d eb04 	ldr.w	lr, [sp], #4
 800d888:	f000 b8e6 	b.w	800da58 <__kernel_sin>
 800d88c:	4a1b      	ldr	r2, [pc, #108]	@ (800d8fc <sin+0x94>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d904      	bls.n	800d89c <sin+0x34>
 800d892:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d896:	b005      	add	sp, #20
 800d898:	f85d fb04 	ldr.w	pc, [sp], #4
 800d89c:	4668      	mov	r0, sp
 800d89e:	f000 fa3f 	bl	800dd20 <__ieee754_rem_pio2>
 800d8a2:	f000 0003 	and.w	r0, r0, #3
 800d8a6:	2801      	cmp	r0, #1
 800d8a8:	d00a      	beq.n	800d8c0 <sin+0x58>
 800d8aa:	2802      	cmp	r0, #2
 800d8ac:	d00f      	beq.n	800d8ce <sin+0x66>
 800d8ae:	b9c0      	cbnz	r0, 800d8e2 <sin+0x7a>
 800d8b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8b4:	ed9d 0b00 	vldr	d0, [sp]
 800d8b8:	2001      	movs	r0, #1
 800d8ba:	f000 f8cd 	bl	800da58 <__kernel_sin>
 800d8be:	e7ea      	b.n	800d896 <sin+0x2e>
 800d8c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8c4:	ed9d 0b00 	vldr	d0, [sp]
 800d8c8:	f000 f85e 	bl	800d988 <__kernel_cos>
 800d8cc:	e7e3      	b.n	800d896 <sin+0x2e>
 800d8ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8d2:	ed9d 0b00 	vldr	d0, [sp]
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	f000 f8be 	bl	800da58 <__kernel_sin>
 800d8dc:	eeb1 0b40 	vneg.f64	d0, d0
 800d8e0:	e7d9      	b.n	800d896 <sin+0x2e>
 800d8e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8e6:	ed9d 0b00 	vldr	d0, [sp]
 800d8ea:	f000 f84d 	bl	800d988 <__kernel_cos>
 800d8ee:	e7f5      	b.n	800d8dc <sin+0x74>
	...
 800d8f8:	3fe921fb 	.word	0x3fe921fb
 800d8fc:	7fefffff 	.word	0x7fefffff

0800d900 <lrintf>:
 800d900:	ee10 3a10 	vmov	r3, s0
 800d904:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d908:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 800d90c:	281e      	cmp	r0, #30
 800d90e:	b082      	sub	sp, #8
 800d910:	dc2f      	bgt.n	800d972 <lrintf+0x72>
 800d912:	1c41      	adds	r1, r0, #1
 800d914:	da02      	bge.n	800d91c <lrintf+0x1c>
 800d916:	2000      	movs	r0, #0
 800d918:	b002      	add	sp, #8
 800d91a:	4770      	bx	lr
 800d91c:	2816      	cmp	r0, #22
 800d91e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800d922:	dd0a      	ble.n	800d93a <lrintf+0x3a>
 800d924:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d928:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d92c:	3a96      	subs	r2, #150	@ 0x96
 800d92e:	fa03 f002 	lsl.w	r0, r3, r2
 800d932:	2900      	cmp	r1, #0
 800d934:	d0f0      	beq.n	800d918 <lrintf+0x18>
 800d936:	4240      	negs	r0, r0
 800d938:	e7ee      	b.n	800d918 <lrintf+0x18>
 800d93a:	4b10      	ldr	r3, [pc, #64]	@ (800d97c <lrintf+0x7c>)
 800d93c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d940:	ed93 7a00 	vldr	s14, [r3]
 800d944:	ee37 0a00 	vadd.f32	s0, s14, s0
 800d948:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d94c:	eddd 7a01 	vldr	s15, [sp, #4]
 800d950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d954:	ee17 3a90 	vmov	r3, s15
 800d958:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d95c:	d0db      	beq.n	800d916 <lrintf+0x16>
 800d95e:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d962:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800d966:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d96a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d96e:	40d8      	lsrs	r0, r3
 800d970:	e7df      	b.n	800d932 <lrintf+0x32>
 800d972:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d976:	ee17 0a90 	vmov	r0, s15
 800d97a:	e7cd      	b.n	800d918 <lrintf+0x18>
 800d97c:	0800efd4 	.word	0x0800efd4

0800d980 <__ieee754_sqrt>:
 800d980:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d984:	4770      	bx	lr
	...

0800d988 <__kernel_cos>:
 800d988:	eeb0 5b40 	vmov.f64	d5, d0
 800d98c:	ee15 1a90 	vmov	r1, s11
 800d990:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d994:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d998:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800d99c:	d204      	bcs.n	800d9a8 <__kernel_cos+0x20>
 800d99e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800d9a2:	ee17 3a90 	vmov	r3, s15
 800d9a6:	b343      	cbz	r3, 800d9fa <__kernel_cos+0x72>
 800d9a8:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d9ac:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800d9b0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800da20 <__kernel_cos+0x98>
 800d9b4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800da28 <__kernel_cos+0xa0>
 800d9b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d9bc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800da30 <__kernel_cos+0xa8>
 800d9c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d9c4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800da38 <__kernel_cos+0xb0>
 800d9c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d9cc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800da40 <__kernel_cos+0xb8>
 800d9d0:	4b1f      	ldr	r3, [pc, #124]	@ (800da50 <__kernel_cos+0xc8>)
 800d9d2:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d9d6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800da48 <__kernel_cos+0xc0>
 800d9da:	4299      	cmp	r1, r3
 800d9dc:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d9e0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d9e4:	ee24 4b06 	vmul.f64	d4, d4, d6
 800d9e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d9ec:	eea6 1b04 	vfma.f64	d1, d6, d4
 800d9f0:	d804      	bhi.n	800d9fc <__kernel_cos+0x74>
 800d9f2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800d9f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d9fa:	4770      	bx	lr
 800d9fc:	4b15      	ldr	r3, [pc, #84]	@ (800da54 <__kernel_cos+0xcc>)
 800d9fe:	4299      	cmp	r1, r3
 800da00:	d809      	bhi.n	800da16 <__kernel_cos+0x8e>
 800da02:	2200      	movs	r2, #0
 800da04:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800da08:	ec43 2b16 	vmov	d6, r2, r3
 800da0c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800da10:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da14:	e7ed      	b.n	800d9f2 <__kernel_cos+0x6a>
 800da16:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800da1a:	e7f7      	b.n	800da0c <__kernel_cos+0x84>
 800da1c:	f3af 8000 	nop.w
 800da20:	be8838d4 	.word	0xbe8838d4
 800da24:	bda8fae9 	.word	0xbda8fae9
 800da28:	bdb4b1c4 	.word	0xbdb4b1c4
 800da2c:	3e21ee9e 	.word	0x3e21ee9e
 800da30:	809c52ad 	.word	0x809c52ad
 800da34:	be927e4f 	.word	0xbe927e4f
 800da38:	19cb1590 	.word	0x19cb1590
 800da3c:	3efa01a0 	.word	0x3efa01a0
 800da40:	16c15177 	.word	0x16c15177
 800da44:	bf56c16c 	.word	0xbf56c16c
 800da48:	5555554c 	.word	0x5555554c
 800da4c:	3fa55555 	.word	0x3fa55555
 800da50:	3fd33332 	.word	0x3fd33332
 800da54:	3fe90000 	.word	0x3fe90000

0800da58 <__kernel_sin>:
 800da58:	ee10 3a90 	vmov	r3, s1
 800da5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da60:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800da64:	d204      	bcs.n	800da70 <__kernel_sin+0x18>
 800da66:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800da6a:	ee17 3a90 	vmov	r3, s15
 800da6e:	b35b      	cbz	r3, 800dac8 <__kernel_sin+0x70>
 800da70:	ee20 6b00 	vmul.f64	d6, d0, d0
 800da74:	ee20 5b06 	vmul.f64	d5, d0, d6
 800da78:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800dad0 <__kernel_sin+0x78>
 800da7c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800dad8 <__kernel_sin+0x80>
 800da80:	eea6 4b07 	vfma.f64	d4, d6, d7
 800da84:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800dae0 <__kernel_sin+0x88>
 800da88:	eea4 7b06 	vfma.f64	d7, d4, d6
 800da8c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800dae8 <__kernel_sin+0x90>
 800da90:	eea7 4b06 	vfma.f64	d4, d7, d6
 800da94:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800daf0 <__kernel_sin+0x98>
 800da98:	eea4 7b06 	vfma.f64	d7, d4, d6
 800da9c:	b930      	cbnz	r0, 800daac <__kernel_sin+0x54>
 800da9e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800daf8 <__kernel_sin+0xa0>
 800daa2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800daa6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800daaa:	4770      	bx	lr
 800daac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800dab0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800dab4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800dab8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800dabc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800db00 <__kernel_sin+0xa8>
 800dac0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800dac4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	f3af 8000 	nop.w
 800dad0:	5acfd57c 	.word	0x5acfd57c
 800dad4:	3de5d93a 	.word	0x3de5d93a
 800dad8:	8a2b9ceb 	.word	0x8a2b9ceb
 800dadc:	be5ae5e6 	.word	0xbe5ae5e6
 800dae0:	57b1fe7d 	.word	0x57b1fe7d
 800dae4:	3ec71de3 	.word	0x3ec71de3
 800dae8:	19c161d5 	.word	0x19c161d5
 800daec:	bf2a01a0 	.word	0xbf2a01a0
 800daf0:	1110f8a6 	.word	0x1110f8a6
 800daf4:	3f811111 	.word	0x3f811111
 800daf8:	55555549 	.word	0x55555549
 800dafc:	bfc55555 	.word	0xbfc55555
 800db00:	55555549 	.word	0x55555549
 800db04:	3fc55555 	.word	0x3fc55555

0800db08 <__ieee754_fmod>:
 800db08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db0c:	ed8d 1b00 	vstr	d1, [sp]
 800db10:	e9dd 6500 	ldrd	r6, r5, [sp]
 800db14:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800db18:	ea56 0307 	orrs.w	r3, r6, r7
 800db1c:	46b6      	mov	lr, r6
 800db1e:	d00d      	beq.n	800db3c <__ieee754_fmod+0x34>
 800db20:	ee10 ca90 	vmov	ip, s1
 800db24:	4b78      	ldr	r3, [pc, #480]	@ (800dd08 <__ieee754_fmod+0x200>)
 800db26:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800db2a:	4598      	cmp	r8, r3
 800db2c:	d806      	bhi.n	800db3c <__ieee754_fmod+0x34>
 800db2e:	4273      	negs	r3, r6
 800db30:	4a76      	ldr	r2, [pc, #472]	@ (800dd0c <__ieee754_fmod+0x204>)
 800db32:	4333      	orrs	r3, r6
 800db34:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800db38:	4293      	cmp	r3, r2
 800db3a:	d908      	bls.n	800db4e <__ieee754_fmod+0x46>
 800db3c:	ed9d 7b00 	vldr	d7, [sp]
 800db40:	ee20 7b07 	vmul.f64	d7, d0, d7
 800db44:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800db48:	b003      	add	sp, #12
 800db4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db4e:	ee10 9a10 	vmov	r9, s0
 800db52:	45b8      	cmp	r8, r7
 800db54:	4649      	mov	r1, r9
 800db56:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800db5a:	dc09      	bgt.n	800db70 <__ieee754_fmod+0x68>
 800db5c:	dbf4      	blt.n	800db48 <__ieee754_fmod+0x40>
 800db5e:	454e      	cmp	r6, r9
 800db60:	d8f2      	bhi.n	800db48 <__ieee754_fmod+0x40>
 800db62:	d105      	bne.n	800db70 <__ieee754_fmod+0x68>
 800db64:	4b6a      	ldr	r3, [pc, #424]	@ (800dd10 <__ieee754_fmod+0x208>)
 800db66:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800db6a:	ed93 0b00 	vldr	d0, [r3]
 800db6e:	e7eb      	b.n	800db48 <__ieee754_fmod+0x40>
 800db70:	4a66      	ldr	r2, [pc, #408]	@ (800dd0c <__ieee754_fmod+0x204>)
 800db72:	ea1c 0f02 	tst.w	ip, r2
 800db76:	d14a      	bne.n	800dc0e <__ieee754_fmod+0x106>
 800db78:	f1b8 0f00 	cmp.w	r8, #0
 800db7c:	d13f      	bne.n	800dbfe <__ieee754_fmod+0xf6>
 800db7e:	4865      	ldr	r0, [pc, #404]	@ (800dd14 <__ieee754_fmod+0x20c>)
 800db80:	464b      	mov	r3, r9
 800db82:	2b00      	cmp	r3, #0
 800db84:	dc38      	bgt.n	800dbf8 <__ieee754_fmod+0xf0>
 800db86:	4215      	tst	r5, r2
 800db88:	d150      	bne.n	800dc2c <__ieee754_fmod+0x124>
 800db8a:	2f00      	cmp	r7, #0
 800db8c:	d147      	bne.n	800dc1e <__ieee754_fmod+0x116>
 800db8e:	4a61      	ldr	r2, [pc, #388]	@ (800dd14 <__ieee754_fmod+0x20c>)
 800db90:	4633      	mov	r3, r6
 800db92:	2b00      	cmp	r3, #0
 800db94:	dc40      	bgt.n	800dc18 <__ieee754_fmod+0x110>
 800db96:	4b60      	ldr	r3, [pc, #384]	@ (800dd18 <__ieee754_fmod+0x210>)
 800db98:	4298      	cmp	r0, r3
 800db9a:	db4b      	blt.n	800dc34 <__ieee754_fmod+0x12c>
 800db9c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800dba0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dba4:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800dd18 <__ieee754_fmod+0x210>
 800dba8:	4562      	cmp	r2, ip
 800dbaa:	db58      	blt.n	800dc5e <__ieee754_fmod+0x156>
 800dbac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dbb0:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800dbb4:	1a80      	subs	r0, r0, r2
 800dbb6:	1b5e      	subs	r6, r3, r5
 800dbb8:	eba1 070e 	sub.w	r7, r1, lr
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d164      	bne.n	800dc8a <__ieee754_fmod+0x182>
 800dbc0:	4571      	cmp	r1, lr
 800dbc2:	bf38      	it	cc
 800dbc4:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800dbc8:	2e00      	cmp	r6, #0
 800dbca:	bfa4      	itt	ge
 800dbcc:	4639      	movge	r1, r7
 800dbce:	4633      	movge	r3, r6
 800dbd0:	ea53 0001 	orrs.w	r0, r3, r1
 800dbd4:	d0c6      	beq.n	800db64 <__ieee754_fmod+0x5c>
 800dbd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbda:	db6b      	blt.n	800dcb4 <__ieee754_fmod+0x1ac>
 800dbdc:	484e      	ldr	r0, [pc, #312]	@ (800dd18 <__ieee754_fmod+0x210>)
 800dbde:	4282      	cmp	r2, r0
 800dbe0:	db6e      	blt.n	800dcc0 <__ieee754_fmod+0x1b8>
 800dbe2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dbe6:	4323      	orrs	r3, r4
 800dbe8:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800dbec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	ec45 4b10 	vmov	d0, r4, r5
 800dbf6:	e7a7      	b.n	800db48 <__ieee754_fmod+0x40>
 800dbf8:	3801      	subs	r0, #1
 800dbfa:	005b      	lsls	r3, r3, #1
 800dbfc:	e7c1      	b.n	800db82 <__ieee754_fmod+0x7a>
 800dbfe:	4846      	ldr	r0, [pc, #280]	@ (800dd18 <__ieee754_fmod+0x210>)
 800dc00:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	ddbe      	ble.n	800db86 <__ieee754_fmod+0x7e>
 800dc08:	3801      	subs	r0, #1
 800dc0a:	005b      	lsls	r3, r3, #1
 800dc0c:	e7fa      	b.n	800dc04 <__ieee754_fmod+0xfc>
 800dc0e:	ea4f 5028 	mov.w	r0, r8, asr #20
 800dc12:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800dc16:	e7b6      	b.n	800db86 <__ieee754_fmod+0x7e>
 800dc18:	3a01      	subs	r2, #1
 800dc1a:	005b      	lsls	r3, r3, #1
 800dc1c:	e7b9      	b.n	800db92 <__ieee754_fmod+0x8a>
 800dc1e:	4a3e      	ldr	r2, [pc, #248]	@ (800dd18 <__ieee754_fmod+0x210>)
 800dc20:	02fb      	lsls	r3, r7, #11
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	ddb7      	ble.n	800db96 <__ieee754_fmod+0x8e>
 800dc26:	3a01      	subs	r2, #1
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	e7fa      	b.n	800dc22 <__ieee754_fmod+0x11a>
 800dc2c:	153a      	asrs	r2, r7, #20
 800dc2e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800dc32:	e7b0      	b.n	800db96 <__ieee754_fmod+0x8e>
 800dc34:	eba3 0c00 	sub.w	ip, r3, r0
 800dc38:	f1bc 0f1f 	cmp.w	ip, #31
 800dc3c:	dc09      	bgt.n	800dc52 <__ieee754_fmod+0x14a>
 800dc3e:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800dc42:	fa08 f10c 	lsl.w	r1, r8, ip
 800dc46:	fa29 f303 	lsr.w	r3, r9, r3
 800dc4a:	430b      	orrs	r3, r1
 800dc4c:	fa09 f10c 	lsl.w	r1, r9, ip
 800dc50:	e7a8      	b.n	800dba4 <__ieee754_fmod+0x9c>
 800dc52:	4b32      	ldr	r3, [pc, #200]	@ (800dd1c <__ieee754_fmod+0x214>)
 800dc54:	1a1b      	subs	r3, r3, r0
 800dc56:	fa09 f303 	lsl.w	r3, r9, r3
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	e7a2      	b.n	800dba4 <__ieee754_fmod+0x9c>
 800dc5e:	ebac 0c02 	sub.w	ip, ip, r2
 800dc62:	f1bc 0f1f 	cmp.w	ip, #31
 800dc66:	dc09      	bgt.n	800dc7c <__ieee754_fmod+0x174>
 800dc68:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800dc6c:	fa07 f70c 	lsl.w	r7, r7, ip
 800dc70:	fa26 f505 	lsr.w	r5, r6, r5
 800dc74:	433d      	orrs	r5, r7
 800dc76:	fa06 fe0c 	lsl.w	lr, r6, ip
 800dc7a:	e79b      	b.n	800dbb4 <__ieee754_fmod+0xac>
 800dc7c:	4d27      	ldr	r5, [pc, #156]	@ (800dd1c <__ieee754_fmod+0x214>)
 800dc7e:	1aad      	subs	r5, r5, r2
 800dc80:	fa06 f505 	lsl.w	r5, r6, r5
 800dc84:	f04f 0e00 	mov.w	lr, #0
 800dc88:	e794      	b.n	800dbb4 <__ieee754_fmod+0xac>
 800dc8a:	4571      	cmp	r1, lr
 800dc8c:	bf38      	it	cc
 800dc8e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800dc92:	2e00      	cmp	r6, #0
 800dc94:	da05      	bge.n	800dca2 <__ieee754_fmod+0x19a>
 800dc96:	0fce      	lsrs	r6, r1, #31
 800dc98:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dc9c:	0049      	lsls	r1, r1, #1
 800dc9e:	3801      	subs	r0, #1
 800dca0:	e789      	b.n	800dbb6 <__ieee754_fmod+0xae>
 800dca2:	ea56 0307 	orrs.w	r3, r6, r7
 800dca6:	f43f af5d 	beq.w	800db64 <__ieee754_fmod+0x5c>
 800dcaa:	0ffb      	lsrs	r3, r7, #31
 800dcac:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800dcb0:	0079      	lsls	r1, r7, #1
 800dcb2:	e7f4      	b.n	800dc9e <__ieee754_fmod+0x196>
 800dcb4:	0fc8      	lsrs	r0, r1, #31
 800dcb6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800dcba:	0049      	lsls	r1, r1, #1
 800dcbc:	3a01      	subs	r2, #1
 800dcbe:	e78a      	b.n	800dbd6 <__ieee754_fmod+0xce>
 800dcc0:	1a80      	subs	r0, r0, r2
 800dcc2:	2814      	cmp	r0, #20
 800dcc4:	dc0c      	bgt.n	800dce0 <__ieee754_fmod+0x1d8>
 800dcc6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800dcca:	fa03 f202 	lsl.w	r2, r3, r2
 800dcce:	40c1      	lsrs	r1, r0
 800dcd0:	430a      	orrs	r2, r1
 800dcd2:	4103      	asrs	r3, r0
 800dcd4:	ea43 0104 	orr.w	r1, r3, r4
 800dcd8:	4610      	mov	r0, r2
 800dcda:	ec41 0b10 	vmov	d0, r0, r1
 800dcde:	e733      	b.n	800db48 <__ieee754_fmod+0x40>
 800dce0:	281f      	cmp	r0, #31
 800dce2:	dc07      	bgt.n	800dcf4 <__ieee754_fmod+0x1ec>
 800dce4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800dce8:	40c1      	lsrs	r1, r0
 800dcea:	fa03 f202 	lsl.w	r2, r3, r2
 800dcee:	430a      	orrs	r2, r1
 800dcf0:	4623      	mov	r3, r4
 800dcf2:	e7ef      	b.n	800dcd4 <__ieee754_fmod+0x1cc>
 800dcf4:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800dcf8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800dcfc:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800dd00:	32e2      	adds	r2, #226	@ 0xe2
 800dd02:	fa43 f202 	asr.w	r2, r3, r2
 800dd06:	e7f3      	b.n	800dcf0 <__ieee754_fmod+0x1e8>
 800dd08:	7fefffff 	.word	0x7fefffff
 800dd0c:	7ff00000 	.word	0x7ff00000
 800dd10:	0800efe0 	.word	0x0800efe0
 800dd14:	fffffbed 	.word	0xfffffbed
 800dd18:	fffffc02 	.word	0xfffffc02
 800dd1c:	fffffbe2 	.word	0xfffffbe2

0800dd20 <__ieee754_rem_pio2>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	eeb0 7b40 	vmov.f64	d7, d0
 800dd26:	ee17 5a90 	vmov	r5, s15
 800dd2a:	4b99      	ldr	r3, [pc, #612]	@ (800df90 <__ieee754_rem_pio2+0x270>)
 800dd2c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800dd30:	429e      	cmp	r6, r3
 800dd32:	b088      	sub	sp, #32
 800dd34:	4604      	mov	r4, r0
 800dd36:	d807      	bhi.n	800dd48 <__ieee754_rem_pio2+0x28>
 800dd38:	2200      	movs	r2, #0
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	ed84 0b00 	vstr	d0, [r4]
 800dd40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dd44:	2000      	movs	r0, #0
 800dd46:	e01b      	b.n	800dd80 <__ieee754_rem_pio2+0x60>
 800dd48:	4b92      	ldr	r3, [pc, #584]	@ (800df94 <__ieee754_rem_pio2+0x274>)
 800dd4a:	429e      	cmp	r6, r3
 800dd4c:	d83b      	bhi.n	800ddc6 <__ieee754_rem_pio2+0xa6>
 800dd4e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800dd52:	2d00      	cmp	r5, #0
 800dd54:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800df50 <__ieee754_rem_pio2+0x230>
 800dd58:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800dd5c:	dd19      	ble.n	800dd92 <__ieee754_rem_pio2+0x72>
 800dd5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dd62:	429e      	cmp	r6, r3
 800dd64:	d00e      	beq.n	800dd84 <__ieee754_rem_pio2+0x64>
 800dd66:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800df58 <__ieee754_rem_pio2+0x238>
 800dd6a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800dd6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd72:	ed84 6b00 	vstr	d6, [r4]
 800dd76:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dd7a:	ed84 7b02 	vstr	d7, [r4, #8]
 800dd7e:	2001      	movs	r0, #1
 800dd80:	b008      	add	sp, #32
 800dd82:	bd70      	pop	{r4, r5, r6, pc}
 800dd84:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800df60 <__ieee754_rem_pio2+0x240>
 800dd88:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800df68 <__ieee754_rem_pio2+0x248>
 800dd8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd90:	e7eb      	b.n	800dd6a <__ieee754_rem_pio2+0x4a>
 800dd92:	429e      	cmp	r6, r3
 800dd94:	ee30 7b06 	vadd.f64	d7, d0, d6
 800dd98:	d00e      	beq.n	800ddb8 <__ieee754_rem_pio2+0x98>
 800dd9a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800df58 <__ieee754_rem_pio2+0x238>
 800dd9e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800dda2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dda6:	ed84 6b00 	vstr	d6, [r4]
 800ddaa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ddae:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ddb6:	e7e3      	b.n	800dd80 <__ieee754_rem_pio2+0x60>
 800ddb8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800df60 <__ieee754_rem_pio2+0x240>
 800ddbc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800df68 <__ieee754_rem_pio2+0x248>
 800ddc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ddc4:	e7eb      	b.n	800dd9e <__ieee754_rem_pio2+0x7e>
 800ddc6:	4b74      	ldr	r3, [pc, #464]	@ (800df98 <__ieee754_rem_pio2+0x278>)
 800ddc8:	429e      	cmp	r6, r3
 800ddca:	d870      	bhi.n	800deae <__ieee754_rem_pio2+0x18e>
 800ddcc:	f000 f96e 	bl	800e0ac <fabs>
 800ddd0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ddd4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800df70 <__ieee754_rem_pio2+0x250>
 800ddd8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800dddc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dde0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800dde4:	ee17 0a90 	vmov	r0, s15
 800dde8:	eeb1 4b45 	vneg.f64	d4, d5
 800ddec:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800df50 <__ieee754_rem_pio2+0x230>
 800ddf0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ddf4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800df58 <__ieee754_rem_pio2+0x238>
 800ddf8:	281f      	cmp	r0, #31
 800ddfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ddfe:	ee30 6b47 	vsub.f64	d6, d0, d7
 800de02:	dc05      	bgt.n	800de10 <__ieee754_rem_pio2+0xf0>
 800de04:	4b65      	ldr	r3, [pc, #404]	@ (800df9c <__ieee754_rem_pio2+0x27c>)
 800de06:	1e42      	subs	r2, r0, #1
 800de08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de0c:	42b3      	cmp	r3, r6
 800de0e:	d109      	bne.n	800de24 <__ieee754_rem_pio2+0x104>
 800de10:	ee16 3a90 	vmov	r3, s13
 800de14:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800de18:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800de1c:	2b10      	cmp	r3, #16
 800de1e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800de22:	dc02      	bgt.n	800de2a <__ieee754_rem_pio2+0x10a>
 800de24:	ed84 6b00 	vstr	d6, [r4]
 800de28:	e01a      	b.n	800de60 <__ieee754_rem_pio2+0x140>
 800de2a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800df60 <__ieee754_rem_pio2+0x240>
 800de2e:	eeb0 6b40 	vmov.f64	d6, d0
 800de32:	eea4 6b03 	vfma.f64	d6, d4, d3
 800de36:	ee30 7b46 	vsub.f64	d7, d0, d6
 800de3a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800de3e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800df68 <__ieee754_rem_pio2+0x248>
 800de42:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800de46:	ee36 3b47 	vsub.f64	d3, d6, d7
 800de4a:	ee13 3a90 	vmov	r3, s7
 800de4e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	2b31      	cmp	r3, #49	@ 0x31
 800de56:	dc17      	bgt.n	800de88 <__ieee754_rem_pio2+0x168>
 800de58:	eeb0 0b46 	vmov.f64	d0, d6
 800de5c:	ed84 3b00 	vstr	d3, [r4]
 800de60:	ed94 6b00 	vldr	d6, [r4]
 800de64:	2d00      	cmp	r5, #0
 800de66:	ee30 0b46 	vsub.f64	d0, d0, d6
 800de6a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800de6e:	ed84 0b02 	vstr	d0, [r4, #8]
 800de72:	da85      	bge.n	800dd80 <__ieee754_rem_pio2+0x60>
 800de74:	eeb1 6b46 	vneg.f64	d6, d6
 800de78:	eeb1 0b40 	vneg.f64	d0, d0
 800de7c:	ed84 6b00 	vstr	d6, [r4]
 800de80:	ed84 0b02 	vstr	d0, [r4, #8]
 800de84:	4240      	negs	r0, r0
 800de86:	e77b      	b.n	800dd80 <__ieee754_rem_pio2+0x60>
 800de88:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800df78 <__ieee754_rem_pio2+0x258>
 800de8c:	eeb0 0b46 	vmov.f64	d0, d6
 800de90:	eea4 0b07 	vfma.f64	d0, d4, d7
 800de94:	ee36 6b40 	vsub.f64	d6, d6, d0
 800de98:	eea4 6b07 	vfma.f64	d6, d4, d7
 800de9c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800df80 <__ieee754_rem_pio2+0x260>
 800dea0:	eeb0 7b46 	vmov.f64	d7, d6
 800dea4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800dea8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800deac:	e7ba      	b.n	800de24 <__ieee754_rem_pio2+0x104>
 800deae:	4b3c      	ldr	r3, [pc, #240]	@ (800dfa0 <__ieee754_rem_pio2+0x280>)
 800deb0:	429e      	cmp	r6, r3
 800deb2:	d906      	bls.n	800dec2 <__ieee754_rem_pio2+0x1a2>
 800deb4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800deb8:	ed80 7b02 	vstr	d7, [r0, #8]
 800debc:	ed80 7b00 	vstr	d7, [r0]
 800dec0:	e740      	b.n	800dd44 <__ieee754_rem_pio2+0x24>
 800dec2:	ee10 3a10 	vmov	r3, s0
 800dec6:	1532      	asrs	r2, r6, #20
 800dec8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800decc:	4618      	mov	r0, r3
 800dece:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ded2:	ec41 0b17 	vmov	d7, r0, r1
 800ded6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800deda:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800df88 <__ieee754_rem_pio2+0x268>
 800dede:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dee2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dee6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800deea:	ee27 7b05 	vmul.f64	d7, d7, d5
 800deee:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800def2:	a808      	add	r0, sp, #32
 800def4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800def8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800defc:	ed8d 6b04 	vstr	d6, [sp, #16]
 800df00:	ee27 7b05 	vmul.f64	d7, d7, d5
 800df04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800df08:	2103      	movs	r1, #3
 800df0a:	ed30 7b02 	vldmdb	r0!, {d7}
 800df0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df16:	460b      	mov	r3, r1
 800df18:	f101 31ff 	add.w	r1, r1, #4294967295
 800df1c:	d0f5      	beq.n	800df0a <__ieee754_rem_pio2+0x1ea>
 800df1e:	4921      	ldr	r1, [pc, #132]	@ (800dfa4 <__ieee754_rem_pio2+0x284>)
 800df20:	9101      	str	r1, [sp, #4]
 800df22:	2102      	movs	r1, #2
 800df24:	9100      	str	r1, [sp, #0]
 800df26:	a802      	add	r0, sp, #8
 800df28:	4621      	mov	r1, r4
 800df2a:	f000 f8c9 	bl	800e0c0 <__kernel_rem_pio2>
 800df2e:	2d00      	cmp	r5, #0
 800df30:	f6bf af26 	bge.w	800dd80 <__ieee754_rem_pio2+0x60>
 800df34:	ed94 7b00 	vldr	d7, [r4]
 800df38:	eeb1 7b47 	vneg.f64	d7, d7
 800df3c:	ed84 7b00 	vstr	d7, [r4]
 800df40:	ed94 7b02 	vldr	d7, [r4, #8]
 800df44:	eeb1 7b47 	vneg.f64	d7, d7
 800df48:	ed84 7b02 	vstr	d7, [r4, #8]
 800df4c:	e79a      	b.n	800de84 <__ieee754_rem_pio2+0x164>
 800df4e:	bf00      	nop
 800df50:	54400000 	.word	0x54400000
 800df54:	3ff921fb 	.word	0x3ff921fb
 800df58:	1a626331 	.word	0x1a626331
 800df5c:	3dd0b461 	.word	0x3dd0b461
 800df60:	1a600000 	.word	0x1a600000
 800df64:	3dd0b461 	.word	0x3dd0b461
 800df68:	2e037073 	.word	0x2e037073
 800df6c:	3ba3198a 	.word	0x3ba3198a
 800df70:	6dc9c883 	.word	0x6dc9c883
 800df74:	3fe45f30 	.word	0x3fe45f30
 800df78:	2e000000 	.word	0x2e000000
 800df7c:	3ba3198a 	.word	0x3ba3198a
 800df80:	252049c1 	.word	0x252049c1
 800df84:	397b839a 	.word	0x397b839a
 800df88:	00000000 	.word	0x00000000
 800df8c:	41700000 	.word	0x41700000
 800df90:	3fe921fb 	.word	0x3fe921fb
 800df94:	4002d97b 	.word	0x4002d97b
 800df98:	413921fb 	.word	0x413921fb
 800df9c:	0800eff0 	.word	0x0800eff0
 800dfa0:	7fefffff 	.word	0x7fefffff
 800dfa4:	0800f070 	.word	0x0800f070

0800dfa8 <__ieee754_remainder>:
 800dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfac:	ed2d 8b04 	vpush	{d8-d9}
 800dfb0:	eeb0 9b41 	vmov.f64	d9, d1
 800dfb4:	eeb0 8b40 	vmov.f64	d8, d0
 800dfb8:	ee19 7a90 	vmov	r7, s19
 800dfbc:	ee11 8a10 	vmov	r8, s2
 800dfc0:	f027 4600 	bic.w	r6, r7, #2147483648	@ 0x80000000
 800dfc4:	ea56 0308 	orrs.w	r3, r6, r8
 800dfc8:	d107      	bne.n	800dfda <__ieee754_remainder+0x32>
 800dfca:	ee28 8b09 	vmul.f64	d8, d8, d9
 800dfce:	ee88 0b08 	vdiv.f64	d0, d8, d8
 800dfd2:	ecbd 8b04 	vpop	{d8-d9}
 800dfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfda:	ee18 5a90 	vmov	r5, s17
 800dfde:	4b30      	ldr	r3, [pc, #192]	@ (800e0a0 <__ieee754_remainder+0xf8>)
 800dfe0:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800dfe4:	429c      	cmp	r4, r3
 800dfe6:	d8f0      	bhi.n	800dfca <__ieee754_remainder+0x22>
 800dfe8:	429e      	cmp	r6, r3
 800dfea:	d909      	bls.n	800e000 <__ieee754_remainder+0x58>
 800dfec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dff0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800dff4:	ea53 0308 	orrs.w	r3, r3, r8
 800dff8:	d1e7      	bne.n	800dfca <__ieee754_remainder+0x22>
 800dffa:	eeb0 0b48 	vmov.f64	d0, d8
 800dffe:	e006      	b.n	800e00e <__ieee754_remainder+0x66>
 800e000:	4b28      	ldr	r3, [pc, #160]	@ (800e0a4 <__ieee754_remainder+0xfc>)
 800e002:	429e      	cmp	r6, r3
 800e004:	d8f9      	bhi.n	800dffa <__ieee754_remainder+0x52>
 800e006:	ee31 1b01 	vadd.f64	d1, d1, d1
 800e00a:	f7ff fd7d 	bl	800db08 <__ieee754_fmod>
 800e00e:	ee18 3a10 	vmov	r3, s16
 800e012:	1ba4      	subs	r4, r4, r6
 800e014:	eba3 0308 	sub.w	r3, r3, r8
 800e018:	431c      	orrs	r4, r3
 800e01a:	d104      	bne.n	800e026 <__ieee754_remainder+0x7e>
 800e01c:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 800e098 <__ieee754_remainder+0xf0>
 800e020:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e024:	e7d5      	b.n	800dfd2 <__ieee754_remainder+0x2a>
 800e026:	f000 f841 	bl	800e0ac <fabs>
 800e02a:	eeb0 8b40 	vmov.f64	d8, d0
 800e02e:	eeb0 0b49 	vmov.f64	d0, d9
 800e032:	f000 f83b 	bl	800e0ac <fabs>
 800e036:	4b1c      	ldr	r3, [pc, #112]	@ (800e0a8 <__ieee754_remainder+0x100>)
 800e038:	403b      	ands	r3, r7
 800e03a:	b993      	cbnz	r3, 800e062 <__ieee754_remainder+0xba>
 800e03c:	ee38 7b08 	vadd.f64	d7, d8, d8
 800e040:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800e044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e048:	dd1b      	ble.n	800e082 <__ieee754_remainder+0xda>
 800e04a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e04e:	ee38 7b08 	vadd.f64	d7, d8, d8
 800e052:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800e056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e05a:	db12      	blt.n	800e082 <__ieee754_remainder+0xda>
 800e05c:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e060:	e00f      	b.n	800e082 <__ieee754_remainder+0xda>
 800e062:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e066:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e06a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e072:	dd06      	ble.n	800e082 <__ieee754_remainder+0xda>
 800e074:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e078:	eeb4 7bc8 	vcmpe.f64	d7, d8
 800e07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e080:	d9ec      	bls.n	800e05c <__ieee754_remainder+0xb4>
 800e082:	ee18 1a90 	vmov	r1, s17
 800e086:	ec53 2b18 	vmov	r2, r3, d8
 800e08a:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 800e08e:	ea85 0301 	eor.w	r3, r5, r1
 800e092:	ec43 2b10 	vmov	d0, r2, r3
 800e096:	e79c      	b.n	800dfd2 <__ieee754_remainder+0x2a>
	...
 800e0a0:	7fefffff 	.word	0x7fefffff
 800e0a4:	7fdfffff 	.word	0x7fdfffff
 800e0a8:	7fe00000 	.word	0x7fe00000

0800e0ac <fabs>:
 800e0ac:	ec51 0b10 	vmov	r0, r1, d0
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e0b6:	ec43 2b10 	vmov	d0, r2, r3
 800e0ba:	4770      	bx	lr
 800e0bc:	0000      	movs	r0, r0
	...

0800e0c0 <__kernel_rem_pio2>:
 800e0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c4:	ed2d 8b06 	vpush	{d8-d10}
 800e0c8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800e0cc:	469b      	mov	fp, r3
 800e0ce:	9001      	str	r0, [sp, #4]
 800e0d0:	4bbb      	ldr	r3, [pc, #748]	@ (800e3c0 <__kernel_rem_pio2+0x300>)
 800e0d2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800e0d4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800e0d8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800e0dc:	f112 0f14 	cmn.w	r2, #20
 800e0e0:	bfa8      	it	ge
 800e0e2:	1ed3      	subge	r3, r2, #3
 800e0e4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800e0e8:	bfb8      	it	lt
 800e0ea:	2300      	movlt	r3, #0
 800e0ec:	f06f 0517 	mvn.w	r5, #23
 800e0f0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800e3a8 <__kernel_rem_pio2+0x2e8>
 800e0f4:	bfa4      	itt	ge
 800e0f6:	2018      	movge	r0, #24
 800e0f8:	fb93 f3f0 	sdivge	r3, r3, r0
 800e0fc:	fb03 5505 	mla	r5, r3, r5, r5
 800e100:	eba3 040a 	sub.w	r4, r3, sl
 800e104:	4415      	add	r5, r2
 800e106:	460f      	mov	r7, r1
 800e108:	eb09 060a 	add.w	r6, r9, sl
 800e10c:	a81a      	add	r0, sp, #104	@ 0x68
 800e10e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800e112:	2200      	movs	r2, #0
 800e114:	42b2      	cmp	r2, r6
 800e116:	dd0e      	ble.n	800e136 <__kernel_rem_pio2+0x76>
 800e118:	aa1a      	add	r2, sp, #104	@ 0x68
 800e11a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800e11e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800e122:	2600      	movs	r6, #0
 800e124:	454e      	cmp	r6, r9
 800e126:	dc25      	bgt.n	800e174 <__kernel_rem_pio2+0xb4>
 800e128:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800e3a8 <__kernel_rem_pio2+0x2e8>
 800e12c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e130:	4614      	mov	r4, r2
 800e132:	2000      	movs	r0, #0
 800e134:	e015      	b.n	800e162 <__kernel_rem_pio2+0xa2>
 800e136:	42d4      	cmn	r4, r2
 800e138:	d409      	bmi.n	800e14e <__kernel_rem_pio2+0x8e>
 800e13a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800e13e:	ee07 1a90 	vmov	s15, r1
 800e142:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e146:	eca0 7b02 	vstmia	r0!, {d7}
 800e14a:	3201      	adds	r2, #1
 800e14c:	e7e2      	b.n	800e114 <__kernel_rem_pio2+0x54>
 800e14e:	eeb0 7b46 	vmov.f64	d7, d6
 800e152:	e7f8      	b.n	800e146 <__kernel_rem_pio2+0x86>
 800e154:	ecbc 5b02 	vldmia	ip!, {d5}
 800e158:	ed94 6b00 	vldr	d6, [r4]
 800e15c:	3001      	adds	r0, #1
 800e15e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e162:	4550      	cmp	r0, sl
 800e164:	f1a4 0408 	sub.w	r4, r4, #8
 800e168:	ddf4      	ble.n	800e154 <__kernel_rem_pio2+0x94>
 800e16a:	ecae 7b02 	vstmia	lr!, {d7}
 800e16e:	3601      	adds	r6, #1
 800e170:	3208      	adds	r2, #8
 800e172:	e7d7      	b.n	800e124 <__kernel_rem_pio2+0x64>
 800e174:	aa06      	add	r2, sp, #24
 800e176:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800e3b0 <__kernel_rem_pio2+0x2f0>
 800e17a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800e3b8 <__kernel_rem_pio2+0x2f8>
 800e17e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800e182:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800e186:	9203      	str	r2, [sp, #12]
 800e188:	9302      	str	r3, [sp, #8]
 800e18a:	464c      	mov	r4, r9
 800e18c:	00e3      	lsls	r3, r4, #3
 800e18e:	9304      	str	r3, [sp, #16]
 800e190:	ab92      	add	r3, sp, #584	@ 0x248
 800e192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e196:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800e19a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800e19c:	ab06      	add	r3, sp, #24
 800e19e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e1a2:	461e      	mov	r6, r3
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	f1a2 0208 	sub.w	r2, r2, #8
 800e1ac:	dc4a      	bgt.n	800e244 <__kernel_rem_pio2+0x184>
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	9305      	str	r3, [sp, #20]
 800e1b2:	f000 fa01 	bl	800e5b8 <scalbn>
 800e1b6:	eeb0 8b40 	vmov.f64	d8, d0
 800e1ba:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800e1be:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e1c2:	f000 fa79 	bl	800e6b8 <floor>
 800e1c6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800e1ca:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e1ce:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e1d2:	2d00      	cmp	r5, #0
 800e1d4:	ee17 8a90 	vmov	r8, s15
 800e1d8:	9b05      	ldr	r3, [sp, #20]
 800e1da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e1de:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e1e2:	dd41      	ble.n	800e268 <__kernel_rem_pio2+0x1a8>
 800e1e4:	1e60      	subs	r0, r4, #1
 800e1e6:	aa06      	add	r2, sp, #24
 800e1e8:	f1c5 0c18 	rsb	ip, r5, #24
 800e1ec:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800e1f0:	fa46 f20c 	asr.w	r2, r6, ip
 800e1f4:	4490      	add	r8, r2
 800e1f6:	fa02 f20c 	lsl.w	r2, r2, ip
 800e1fa:	1ab6      	subs	r6, r6, r2
 800e1fc:	aa06      	add	r2, sp, #24
 800e1fe:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800e202:	f1c5 0217 	rsb	r2, r5, #23
 800e206:	4116      	asrs	r6, r2
 800e208:	2e00      	cmp	r6, #0
 800e20a:	dd3c      	ble.n	800e286 <__kernel_rem_pio2+0x1c6>
 800e20c:	f04f 0c00 	mov.w	ip, #0
 800e210:	f108 0801 	add.w	r8, r8, #1
 800e214:	4660      	mov	r0, ip
 800e216:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800e21a:	4564      	cmp	r4, ip
 800e21c:	dc66      	bgt.n	800e2ec <__kernel_rem_pio2+0x22c>
 800e21e:	2d00      	cmp	r5, #0
 800e220:	dd03      	ble.n	800e22a <__kernel_rem_pio2+0x16a>
 800e222:	2d01      	cmp	r5, #1
 800e224:	d072      	beq.n	800e30c <__kernel_rem_pio2+0x24c>
 800e226:	2d02      	cmp	r5, #2
 800e228:	d07a      	beq.n	800e320 <__kernel_rem_pio2+0x260>
 800e22a:	2e02      	cmp	r6, #2
 800e22c:	d12b      	bne.n	800e286 <__kernel_rem_pio2+0x1c6>
 800e22e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e232:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e236:	b330      	cbz	r0, 800e286 <__kernel_rem_pio2+0x1c6>
 800e238:	4628      	mov	r0, r5
 800e23a:	f000 f9bd 	bl	800e5b8 <scalbn>
 800e23e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e242:	e020      	b.n	800e286 <__kernel_rem_pio2+0x1c6>
 800e244:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e248:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e24c:	3801      	subs	r0, #1
 800e24e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e252:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e256:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e25a:	eca6 0a01 	vstmia	r6!, {s0}
 800e25e:	ed92 0b00 	vldr	d0, [r2]
 800e262:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e266:	e79e      	b.n	800e1a6 <__kernel_rem_pio2+0xe6>
 800e268:	d105      	bne.n	800e276 <__kernel_rem_pio2+0x1b6>
 800e26a:	1e62      	subs	r2, r4, #1
 800e26c:	a906      	add	r1, sp, #24
 800e26e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800e272:	15f6      	asrs	r6, r6, #23
 800e274:	e7c8      	b.n	800e208 <__kernel_rem_pio2+0x148>
 800e276:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e27a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e282:	da31      	bge.n	800e2e8 <__kernel_rem_pio2+0x228>
 800e284:	2600      	movs	r6, #0
 800e286:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e28e:	f040 809b 	bne.w	800e3c8 <__kernel_rem_pio2+0x308>
 800e292:	1e62      	subs	r2, r4, #1
 800e294:	2000      	movs	r0, #0
 800e296:	454a      	cmp	r2, r9
 800e298:	da49      	bge.n	800e32e <__kernel_rem_pio2+0x26e>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d062      	beq.n	800e364 <__kernel_rem_pio2+0x2a4>
 800e29e:	3c01      	subs	r4, #1
 800e2a0:	ab06      	add	r3, sp, #24
 800e2a2:	3d18      	subs	r5, #24
 800e2a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d0f8      	beq.n	800e29e <__kernel_rem_pio2+0x1de>
 800e2ac:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	f000 f981 	bl	800e5b8 <scalbn>
 800e2b6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800e3b0 <__kernel_rem_pio2+0x2f0>
 800e2ba:	1c62      	adds	r2, r4, #1
 800e2bc:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e2be:	00d3      	lsls	r3, r2, #3
 800e2c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e2c4:	4622      	mov	r2, r4
 800e2c6:	2a00      	cmp	r2, #0
 800e2c8:	f280 80a8 	bge.w	800e41c <__kernel_rem_pio2+0x35c>
 800e2cc:	4622      	mov	r2, r4
 800e2ce:	2a00      	cmp	r2, #0
 800e2d0:	f2c0 80c6 	blt.w	800e460 <__kernel_rem_pio2+0x3a0>
 800e2d4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e2d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e2da:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800e3a8 <__kernel_rem_pio2+0x2e8>
 800e2de:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800e3c4 <__kernel_rem_pio2+0x304>
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	1aa1      	subs	r1, r4, r2
 800e2e6:	e0b0      	b.n	800e44a <__kernel_rem_pio2+0x38a>
 800e2e8:	2602      	movs	r6, #2
 800e2ea:	e78f      	b.n	800e20c <__kernel_rem_pio2+0x14c>
 800e2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2f0:	b948      	cbnz	r0, 800e306 <__kernel_rem_pio2+0x246>
 800e2f2:	b122      	cbz	r2, 800e2fe <__kernel_rem_pio2+0x23e>
 800e2f4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800e2f8:	f843 2c04 	str.w	r2, [r3, #-4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	f10c 0c01 	add.w	ip, ip, #1
 800e302:	4610      	mov	r0, r2
 800e304:	e789      	b.n	800e21a <__kernel_rem_pio2+0x15a>
 800e306:	ebae 0202 	sub.w	r2, lr, r2
 800e30a:	e7f5      	b.n	800e2f8 <__kernel_rem_pio2+0x238>
 800e30c:	1e62      	subs	r2, r4, #1
 800e30e:	ab06      	add	r3, sp, #24
 800e310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e314:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e318:	a906      	add	r1, sp, #24
 800e31a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e31e:	e784      	b.n	800e22a <__kernel_rem_pio2+0x16a>
 800e320:	1e62      	subs	r2, r4, #1
 800e322:	ab06      	add	r3, sp, #24
 800e324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e328:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e32c:	e7f4      	b.n	800e318 <__kernel_rem_pio2+0x258>
 800e32e:	ab06      	add	r3, sp, #24
 800e330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e334:	3a01      	subs	r2, #1
 800e336:	4318      	orrs	r0, r3
 800e338:	e7ad      	b.n	800e296 <__kernel_rem_pio2+0x1d6>
 800e33a:	3301      	adds	r3, #1
 800e33c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e340:	2800      	cmp	r0, #0
 800e342:	d0fa      	beq.n	800e33a <__kernel_rem_pio2+0x27a>
 800e344:	9a04      	ldr	r2, [sp, #16]
 800e346:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800e34a:	446a      	add	r2, sp
 800e34c:	eb04 000b 	add.w	r0, r4, fp
 800e350:	a91a      	add	r1, sp, #104	@ 0x68
 800e352:	1c66      	adds	r6, r4, #1
 800e354:	3a98      	subs	r2, #152	@ 0x98
 800e356:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800e35a:	4423      	add	r3, r4
 800e35c:	42b3      	cmp	r3, r6
 800e35e:	da04      	bge.n	800e36a <__kernel_rem_pio2+0x2aa>
 800e360:	461c      	mov	r4, r3
 800e362:	e713      	b.n	800e18c <__kernel_rem_pio2+0xcc>
 800e364:	9a03      	ldr	r2, [sp, #12]
 800e366:	2301      	movs	r3, #1
 800e368:	e7e8      	b.n	800e33c <__kernel_rem_pio2+0x27c>
 800e36a:	9902      	ldr	r1, [sp, #8]
 800e36c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e370:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800e374:	9104      	str	r1, [sp, #16]
 800e376:	ee07 1a90 	vmov	s15, r1
 800e37a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e37e:	2400      	movs	r4, #0
 800e380:	eca0 7b02 	vstmia	r0!, {d7}
 800e384:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800e3a8 <__kernel_rem_pio2+0x2e8>
 800e388:	4686      	mov	lr, r0
 800e38a:	4554      	cmp	r4, sl
 800e38c:	dd03      	ble.n	800e396 <__kernel_rem_pio2+0x2d6>
 800e38e:	eca2 7b02 	vstmia	r2!, {d7}
 800e392:	3601      	adds	r6, #1
 800e394:	e7e2      	b.n	800e35c <__kernel_rem_pio2+0x29c>
 800e396:	ecbc 5b02 	vldmia	ip!, {d5}
 800e39a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800e39e:	3401      	adds	r4, #1
 800e3a0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e3a4:	e7f1      	b.n	800e38a <__kernel_rem_pio2+0x2ca>
 800e3a6:	bf00      	nop
	...
 800e3b4:	3e700000 	.word	0x3e700000
 800e3b8:	00000000 	.word	0x00000000
 800e3bc:	41700000 	.word	0x41700000
 800e3c0:	0800f1b8 	.word	0x0800f1b8
 800e3c4:	0800f178 	.word	0x0800f178
 800e3c8:	4268      	negs	r0, r5
 800e3ca:	eeb0 0b48 	vmov.f64	d0, d8
 800e3ce:	f000 f8f3 	bl	800e5b8 <scalbn>
 800e3d2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800e5a0 <__kernel_rem_pio2+0x4e0>
 800e3d6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3de:	db17      	blt.n	800e410 <__kernel_rem_pio2+0x350>
 800e3e0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800e5a8 <__kernel_rem_pio2+0x4e8>
 800e3e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e3e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e3ec:	aa06      	add	r2, sp, #24
 800e3ee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e3f2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e3f6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e3fa:	3518      	adds	r5, #24
 800e3fc:	ee10 3a10 	vmov	r3, s0
 800e400:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e404:	ee17 3a10 	vmov	r3, s14
 800e408:	3401      	adds	r4, #1
 800e40a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e40e:	e74d      	b.n	800e2ac <__kernel_rem_pio2+0x1ec>
 800e410:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e414:	aa06      	add	r2, sp, #24
 800e416:	ee10 3a10 	vmov	r3, s0
 800e41a:	e7f6      	b.n	800e40a <__kernel_rem_pio2+0x34a>
 800e41c:	a806      	add	r0, sp, #24
 800e41e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e422:	9001      	str	r0, [sp, #4]
 800e424:	ee07 0a90 	vmov	s15, r0
 800e428:	3a01      	subs	r2, #1
 800e42a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e42e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e432:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e436:	ed21 7b02 	vstmdb	r1!, {d7}
 800e43a:	e744      	b.n	800e2c6 <__kernel_rem_pio2+0x206>
 800e43c:	ecbc 5b02 	vldmia	ip!, {d5}
 800e440:	ecb5 6b02 	vldmia	r5!, {d6}
 800e444:	3001      	adds	r0, #1
 800e446:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e44a:	4548      	cmp	r0, r9
 800e44c:	dc01      	bgt.n	800e452 <__kernel_rem_pio2+0x392>
 800e44e:	4281      	cmp	r1, r0
 800e450:	daf4      	bge.n	800e43c <__kernel_rem_pio2+0x37c>
 800e452:	a842      	add	r0, sp, #264	@ 0x108
 800e454:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e458:	ed81 7b00 	vstr	d7, [r1]
 800e45c:	3a01      	subs	r2, #1
 800e45e:	e736      	b.n	800e2ce <__kernel_rem_pio2+0x20e>
 800e460:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e462:	2a02      	cmp	r2, #2
 800e464:	dc0a      	bgt.n	800e47c <__kernel_rem_pio2+0x3bc>
 800e466:	2a00      	cmp	r2, #0
 800e468:	dc2d      	bgt.n	800e4c6 <__kernel_rem_pio2+0x406>
 800e46a:	d046      	beq.n	800e4fa <__kernel_rem_pio2+0x43a>
 800e46c:	f008 0007 	and.w	r0, r8, #7
 800e470:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800e474:	ecbd 8b06 	vpop	{d8-d10}
 800e478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e47e:	2a03      	cmp	r2, #3
 800e480:	d1f4      	bne.n	800e46c <__kernel_rem_pio2+0x3ac>
 800e482:	a942      	add	r1, sp, #264	@ 0x108
 800e484:	f1a3 0208 	sub.w	r2, r3, #8
 800e488:	440a      	add	r2, r1
 800e48a:	4611      	mov	r1, r2
 800e48c:	4620      	mov	r0, r4
 800e48e:	2800      	cmp	r0, #0
 800e490:	f1a1 0108 	sub.w	r1, r1, #8
 800e494:	dc52      	bgt.n	800e53c <__kernel_rem_pio2+0x47c>
 800e496:	4621      	mov	r1, r4
 800e498:	2901      	cmp	r1, #1
 800e49a:	f1a2 0208 	sub.w	r2, r2, #8
 800e49e:	dc5d      	bgt.n	800e55c <__kernel_rem_pio2+0x49c>
 800e4a0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800e5b0 <__kernel_rem_pio2+0x4f0>
 800e4a4:	aa42      	add	r2, sp, #264	@ 0x108
 800e4a6:	4413      	add	r3, r2
 800e4a8:	2c01      	cmp	r4, #1
 800e4aa:	dc67      	bgt.n	800e57c <__kernel_rem_pio2+0x4bc>
 800e4ac:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800e4b0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800e4b4:	2e00      	cmp	r6, #0
 800e4b6:	d167      	bne.n	800e588 <__kernel_rem_pio2+0x4c8>
 800e4b8:	ed87 5b00 	vstr	d5, [r7]
 800e4bc:	ed87 6b02 	vstr	d6, [r7, #8]
 800e4c0:	ed87 7b04 	vstr	d7, [r7, #16]
 800e4c4:	e7d2      	b.n	800e46c <__kernel_rem_pio2+0x3ac>
 800e4c6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800e5b0 <__kernel_rem_pio2+0x4f0>
 800e4ca:	aa42      	add	r2, sp, #264	@ 0x108
 800e4cc:	4413      	add	r3, r2
 800e4ce:	4622      	mov	r2, r4
 800e4d0:	2a00      	cmp	r2, #0
 800e4d2:	da24      	bge.n	800e51e <__kernel_rem_pio2+0x45e>
 800e4d4:	b34e      	cbz	r6, 800e52a <__kernel_rem_pio2+0x46a>
 800e4d6:	eeb1 7b46 	vneg.f64	d7, d6
 800e4da:	ed87 7b00 	vstr	d7, [r7]
 800e4de:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800e4e2:	aa44      	add	r2, sp, #272	@ 0x110
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e4ea:	429c      	cmp	r4, r3
 800e4ec:	da20      	bge.n	800e530 <__kernel_rem_pio2+0x470>
 800e4ee:	b10e      	cbz	r6, 800e4f4 <__kernel_rem_pio2+0x434>
 800e4f0:	eeb1 7b47 	vneg.f64	d7, d7
 800e4f4:	ed87 7b02 	vstr	d7, [r7, #8]
 800e4f8:	e7b8      	b.n	800e46c <__kernel_rem_pio2+0x3ac>
 800e4fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800e5b0 <__kernel_rem_pio2+0x4f0>
 800e4fe:	aa42      	add	r2, sp, #264	@ 0x108
 800e500:	4413      	add	r3, r2
 800e502:	2c00      	cmp	r4, #0
 800e504:	da05      	bge.n	800e512 <__kernel_rem_pio2+0x452>
 800e506:	b10e      	cbz	r6, 800e50c <__kernel_rem_pio2+0x44c>
 800e508:	eeb1 7b47 	vneg.f64	d7, d7
 800e50c:	ed87 7b00 	vstr	d7, [r7]
 800e510:	e7ac      	b.n	800e46c <__kernel_rem_pio2+0x3ac>
 800e512:	ed33 6b02 	vldmdb	r3!, {d6}
 800e516:	3c01      	subs	r4, #1
 800e518:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e51c:	e7f1      	b.n	800e502 <__kernel_rem_pio2+0x442>
 800e51e:	ed33 7b02 	vldmdb	r3!, {d7}
 800e522:	3a01      	subs	r2, #1
 800e524:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e528:	e7d2      	b.n	800e4d0 <__kernel_rem_pio2+0x410>
 800e52a:	eeb0 7b46 	vmov.f64	d7, d6
 800e52e:	e7d4      	b.n	800e4da <__kernel_rem_pio2+0x41a>
 800e530:	ecb2 6b02 	vldmia	r2!, {d6}
 800e534:	3301      	adds	r3, #1
 800e536:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e53a:	e7d6      	b.n	800e4ea <__kernel_rem_pio2+0x42a>
 800e53c:	ed91 7b00 	vldr	d7, [r1]
 800e540:	ed91 5b02 	vldr	d5, [r1, #8]
 800e544:	3801      	subs	r0, #1
 800e546:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e54a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e54e:	ed81 6b00 	vstr	d6, [r1]
 800e552:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e556:	ed81 7b02 	vstr	d7, [r1, #8]
 800e55a:	e798      	b.n	800e48e <__kernel_rem_pio2+0x3ce>
 800e55c:	ed92 7b00 	vldr	d7, [r2]
 800e560:	ed92 5b02 	vldr	d5, [r2, #8]
 800e564:	3901      	subs	r1, #1
 800e566:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e56a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e56e:	ed82 6b00 	vstr	d6, [r2]
 800e572:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e576:	ed82 7b02 	vstr	d7, [r2, #8]
 800e57a:	e78d      	b.n	800e498 <__kernel_rem_pio2+0x3d8>
 800e57c:	ed33 6b02 	vldmdb	r3!, {d6}
 800e580:	3c01      	subs	r4, #1
 800e582:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e586:	e78f      	b.n	800e4a8 <__kernel_rem_pio2+0x3e8>
 800e588:	eeb1 5b45 	vneg.f64	d5, d5
 800e58c:	eeb1 6b46 	vneg.f64	d6, d6
 800e590:	ed87 5b00 	vstr	d5, [r7]
 800e594:	eeb1 7b47 	vneg.f64	d7, d7
 800e598:	ed87 6b02 	vstr	d6, [r7, #8]
 800e59c:	e790      	b.n	800e4c0 <__kernel_rem_pio2+0x400>
 800e59e:	bf00      	nop
 800e5a0:	00000000 	.word	0x00000000
 800e5a4:	41700000 	.word	0x41700000
 800e5a8:	00000000 	.word	0x00000000
 800e5ac:	3e700000 	.word	0x3e700000
	...

0800e5b8 <scalbn>:
 800e5b8:	ee10 1a90 	vmov	r1, s1
 800e5bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5c0:	b98b      	cbnz	r3, 800e5e6 <scalbn+0x2e>
 800e5c2:	ee10 3a10 	vmov	r3, s0
 800e5c6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e5ca:	4319      	orrs	r1, r3
 800e5cc:	d00a      	beq.n	800e5e4 <scalbn+0x2c>
 800e5ce:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e680 <scalbn+0xc8>
 800e5d2:	4b37      	ldr	r3, [pc, #220]	@ (800e6b0 <scalbn+0xf8>)
 800e5d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e5d8:	4298      	cmp	r0, r3
 800e5da:	da0b      	bge.n	800e5f4 <scalbn+0x3c>
 800e5dc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e688 <scalbn+0xd0>
 800e5e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e5e4:	4770      	bx	lr
 800e5e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d107      	bne.n	800e5fe <scalbn+0x46>
 800e5ee:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e5f2:	4770      	bx	lr
 800e5f4:	ee10 1a90 	vmov	r1, s1
 800e5f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5fc:	3b36      	subs	r3, #54	@ 0x36
 800e5fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e602:	4290      	cmp	r0, r2
 800e604:	dd0d      	ble.n	800e622 <scalbn+0x6a>
 800e606:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e690 <scalbn+0xd8>
 800e60a:	ee10 3a90 	vmov	r3, s1
 800e60e:	eeb0 6b47 	vmov.f64	d6, d7
 800e612:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800e698 <scalbn+0xe0>
 800e616:	2b00      	cmp	r3, #0
 800e618:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e61c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e620:	4770      	bx	lr
 800e622:	4418      	add	r0, r3
 800e624:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800e628:	4298      	cmp	r0, r3
 800e62a:	dcec      	bgt.n	800e606 <scalbn+0x4e>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	dd0a      	ble.n	800e646 <scalbn+0x8e>
 800e630:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800e634:	ec53 2b10 	vmov	r2, r3, d0
 800e638:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800e63c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e640:	ec43 2b10 	vmov	d0, r2, r3
 800e644:	4770      	bx	lr
 800e646:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800e64a:	da09      	bge.n	800e660 <scalbn+0xa8>
 800e64c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800e688 <scalbn+0xd0>
 800e650:	ee10 3a90 	vmov	r3, s1
 800e654:	eeb0 6b47 	vmov.f64	d6, d7
 800e658:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800e6a0 <scalbn+0xe8>
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	e7db      	b.n	800e618 <scalbn+0x60>
 800e660:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800e664:	ec53 2b10 	vmov	r2, r3, d0
 800e668:	3036      	adds	r0, #54	@ 0x36
 800e66a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800e66e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e672:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e6a8 <scalbn+0xf0>
 800e676:	ec43 2b10 	vmov	d0, r2, r3
 800e67a:	e7b1      	b.n	800e5e0 <scalbn+0x28>
 800e67c:	f3af 8000 	nop.w
 800e680:	00000000 	.word	0x00000000
 800e684:	43500000 	.word	0x43500000
 800e688:	c2f8f359 	.word	0xc2f8f359
 800e68c:	01a56e1f 	.word	0x01a56e1f
 800e690:	8800759c 	.word	0x8800759c
 800e694:	7e37e43c 	.word	0x7e37e43c
 800e698:	8800759c 	.word	0x8800759c
 800e69c:	fe37e43c 	.word	0xfe37e43c
 800e6a0:	c2f8f359 	.word	0xc2f8f359
 800e6a4:	81a56e1f 	.word	0x81a56e1f
 800e6a8:	00000000 	.word	0x00000000
 800e6ac:	3c900000 	.word	0x3c900000
 800e6b0:	ffff3cb0 	.word	0xffff3cb0
 800e6b4:	00000000 	.word	0x00000000

0800e6b8 <floor>:
 800e6b8:	ee10 3a90 	vmov	r3, s1
 800e6bc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800e6c0:	ee10 2a10 	vmov	r2, s0
 800e6c4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800e6c8:	2913      	cmp	r1, #19
 800e6ca:	b530      	push	{r4, r5, lr}
 800e6cc:	4615      	mov	r5, r2
 800e6ce:	dc33      	bgt.n	800e738 <floor+0x80>
 800e6d0:	2900      	cmp	r1, #0
 800e6d2:	da18      	bge.n	800e706 <floor+0x4e>
 800e6d4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800e798 <floor+0xe0>
 800e6d8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e6dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6e4:	dd0a      	ble.n	800e6fc <floor+0x44>
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	da50      	bge.n	800e78c <floor+0xd4>
 800e6ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	4b2a      	ldr	r3, [pc, #168]	@ (800e7a0 <floor+0xe8>)
 800e6f6:	bf08      	it	eq
 800e6f8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	4610      	mov	r0, r2
 800e700:	ec41 0b10 	vmov	d0, r0, r1
 800e704:	e01f      	b.n	800e746 <floor+0x8e>
 800e706:	4827      	ldr	r0, [pc, #156]	@ (800e7a4 <floor+0xec>)
 800e708:	4108      	asrs	r0, r1
 800e70a:	ea03 0400 	and.w	r4, r3, r0
 800e70e:	4314      	orrs	r4, r2
 800e710:	d019      	beq.n	800e746 <floor+0x8e>
 800e712:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e798 <floor+0xe0>
 800e716:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e71a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e722:	ddeb      	ble.n	800e6fc <floor+0x44>
 800e724:	2b00      	cmp	r3, #0
 800e726:	bfbe      	ittt	lt
 800e728:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800e72c:	410a      	asrlt	r2, r1
 800e72e:	189b      	addlt	r3, r3, r2
 800e730:	ea23 0300 	bic.w	r3, r3, r0
 800e734:	2200      	movs	r2, #0
 800e736:	e7e1      	b.n	800e6fc <floor+0x44>
 800e738:	2933      	cmp	r1, #51	@ 0x33
 800e73a:	dd05      	ble.n	800e748 <floor+0x90>
 800e73c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e740:	d101      	bne.n	800e746 <floor+0x8e>
 800e742:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e746:	bd30      	pop	{r4, r5, pc}
 800e748:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800e74c:	f04f 30ff 	mov.w	r0, #4294967295
 800e750:	40e0      	lsrs	r0, r4
 800e752:	4210      	tst	r0, r2
 800e754:	d0f7      	beq.n	800e746 <floor+0x8e>
 800e756:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e798 <floor+0xe0>
 800e75a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e75e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e766:	ddc9      	ble.n	800e6fc <floor+0x44>
 800e768:	2b00      	cmp	r3, #0
 800e76a:	da02      	bge.n	800e772 <floor+0xba>
 800e76c:	2914      	cmp	r1, #20
 800e76e:	d103      	bne.n	800e778 <floor+0xc0>
 800e770:	3301      	adds	r3, #1
 800e772:	ea22 0200 	bic.w	r2, r2, r0
 800e776:	e7c1      	b.n	800e6fc <floor+0x44>
 800e778:	2401      	movs	r4, #1
 800e77a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800e77e:	fa04 f101 	lsl.w	r1, r4, r1
 800e782:	440a      	add	r2, r1
 800e784:	42aa      	cmp	r2, r5
 800e786:	bf38      	it	cc
 800e788:	191b      	addcc	r3, r3, r4
 800e78a:	e7f2      	b.n	800e772 <floor+0xba>
 800e78c:	2200      	movs	r2, #0
 800e78e:	4613      	mov	r3, r2
 800e790:	e7b4      	b.n	800e6fc <floor+0x44>
 800e792:	bf00      	nop
 800e794:	f3af 8000 	nop.w
 800e798:	8800759c 	.word	0x8800759c
 800e79c:	7e37e43c 	.word	0x7e37e43c
 800e7a0:	bff00000 	.word	0xbff00000
 800e7a4:	000fffff 	.word	0x000fffff

0800e7a8 <_init>:
 800e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7aa:	bf00      	nop
 800e7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ae:	bc08      	pop	{r3}
 800e7b0:	469e      	mov	lr, r3
 800e7b2:	4770      	bx	lr

0800e7b4 <_fini>:
 800e7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b6:	bf00      	nop
 800e7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ba:	bc08      	pop	{r3}
 800e7bc:	469e      	mov	lr, r3
 800e7be:	4770      	bx	lr
