
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b838  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bae4  0800bae4  0000cae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb24  0800bb24  0000cb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb2c  0800bb2c  0000cb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bb30  0800bb30  0000cb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800bb34  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b00  24000010  0800bb44  0000d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000b10  0800bb44  0000db10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015d42  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000283d  00000000  00000000  00022d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fd0  00000000  00000000  000255c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c31  00000000  00000000  00026590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003121f  00000000  00000000  000271c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001595d  00000000  00000000  000583e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147175  00000000  00000000  0006dd3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b4eb2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004304  00000000  00000000  001b4ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001b91fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800bacc 	.word	0x0800bacc

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800bacc 	.word	0x0800bacc

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 fafa 	bl	8000bd8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fd7a 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fa26 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 80005f0:	f000 fa04 	bl	80009fc <MX_DMA_Init>
  MX_ADC1_Init();
 80005f4:	f000 f8d6 	bl	80007a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f8:	f000 f954 	bl	80008a4 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f9b2 	bl	8000964 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
	HAL_ADC_Start(&hadc2);
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <main+0x38>)
 8000602:	f001 f9a9 	bl	8001958 <HAL_ADC_Start>

	// Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
	HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)adcbuf,ADC_BUF_SIZE);
 8000606:	2240      	movs	r2, #64	@ 0x40
 8000608:	4903      	ldr	r1, [pc, #12]	@ (8000618 <main+0x3c>)
 800060a:	4804      	ldr	r0, [pc, #16]	@ (800061c <main+0x40>)
 800060c:	f002 faac 	bl	8002b68 <HAL_ADCEx_MultiModeStart_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x34>
 8000614:	24000090 	.word	0x24000090
 8000618:	24000a00 	.word	0x24000a00
 800061c:	2400002c 	.word	0x2400002c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0a4      	sub	sp, #144	@ 0x90
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00b fa20 	bl	800ba74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000638:	2220      	movs	r2, #32
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f00b fa19 	bl	800ba74 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
 8000652:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000654:	4b51      	ldr	r3, [pc, #324]	@ (800079c <SystemClock_Config+0x17c>)
 8000656:	f04f 32ff 	mov.w	r2, #4294967295
 800065a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800065e:	2004      	movs	r0, #4
 8000660:	f005 ff0e 	bl	8006480 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b4d      	ldr	r3, [pc, #308]	@ (80007a0 <SystemClock_Config+0x180>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a4c      	ldr	r2, [pc, #304]	@ (80007a0 <SystemClock_Config+0x180>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b4a      	ldr	r3, [pc, #296]	@ (80007a0 <SystemClock_Config+0x180>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000680:	bf00      	nop
 8000682:	4b47      	ldr	r3, [pc, #284]	@ (80007a0 <SystemClock_Config+0x180>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000690:	f005 fee6 	bl	8006460 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000694:	4b41      	ldr	r3, [pc, #260]	@ (800079c <SystemClock_Config+0x17c>)
 8000696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000698:	4a40      	ldr	r2, [pc, #256]	@ (800079c <SystemClock_Config+0x17c>)
 800069a:	f023 0318 	bic.w	r3, r3, #24
 800069e:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006a0:	2327      	movs	r3, #39	@ 0x27
 80006a2:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006b2:	2340      	movs	r3, #64	@ 0x40
 80006b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	2302      	movs	r3, #2
 80006c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80006c6:	2346      	movs	r3, #70	@ 0x46
 80006c8:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d8:	230c      	movs	r3, #12
 80006da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 ff20 	bl	8006534 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xde>
  {
    Error_Handler();
 80006fa:	f000 fa99 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	233f      	movs	r3, #63	@ 0x3f
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800070e:	2340      	movs	r3, #64	@ 0x40
 8000710:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800071c:	2340      	movs	r3, #64	@ 0x40
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000724:	2106      	movs	r1, #6
 8000726:	4618      	mov	r0, r3
 8000728:	f006 fb36 	bl	8006d98 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000732:	f000 fa7d 	bl	8000c30 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000736:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800073a:	2100      	movs	r1, #0
 800073c:	2000      	movs	r0, #0
 800073e:	f006 fce1 	bl	8007104 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000742:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000746:	2100      	movs	r1, #0
 8000748:	2001      	movs	r0, #1
 800074a:	f006 fcdb 	bl	8007104 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <SystemClock_Config+0x17c>)
 8000750:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000754:	4a11      	ldr	r2, [pc, #68]	@ (800079c <SystemClock_Config+0x17c>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <SystemClock_Config+0x17c>)
 8000760:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000770:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000774:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800077a:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000780:	2322      	movs	r3, #34	@ 0x22
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000784:	2320      	movs	r3, #32
 8000786:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4618      	mov	r0, r3
 800078e:	f009 f99f 	bl	8009ad0 <HAL_RCCEx_CRSConfig>
}
 8000792:	bf00      	nop
 8000794:	3790      	adds	r7, #144	@ 0x90
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	58024400 	.word	0x58024400
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c8:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007ca:	4a34      	ldr	r2, [pc, #208]	@ (800089c <MX_ADC1_Init+0xf8>)
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ce:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007d6:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007f4:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_ADC1_Init+0xf4>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <MX_ADC1_Init+0xf4>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800080c:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <MX_ADC1_Init+0xf4>)
 800080e:	2203      	movs	r2, #3
 8000810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <MX_ADC1_Init+0xf4>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_ADC1_Init+0xf4>)
 800081a:	2200      	movs	r2, #0
 800081c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_ADC1_Init+0xf4>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000826:	481c      	ldr	r0, [pc, #112]	@ (8000898 <MX_ADC1_Init+0xf4>)
 8000828:	f000 ff3c 	bl	80016a4 <HAL_ADC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000832:	f000 f9fd 	bl	8000c30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000836:	2307      	movs	r3, #7
 8000838:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 800083a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800083e:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 8000840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4812      	ldr	r0, [pc, #72]	@ (8000898 <MX_ADC1_Init+0xf4>)
 800084e:	f002 fb55 	bl	8002efc <HAL_ADCEx_MultiModeConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000858:	f000 f9ea 	bl	8000c30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_ADC1_Init+0xfc>)
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000860:	2306      	movs	r3, #6
 8000862:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000868:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800086c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086e:	2304      	movs	r3, #4
 8000870:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	@ (8000898 <MX_ADC1_Init+0xf4>)
 8000880:	f001 fb52 	bl	8001f28 <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800088a:	f000 f9d1 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	@ 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2400002c 	.word	0x2400002c
 800089c:	40022000 	.word	0x40022000
 80008a0:	0c900008 	.word	0x0c900008

080008a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008bc:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008be:	4a27      	ldr	r2, [pc, #156]	@ (800095c <MX_ADC2_Init+0xb8>)
 80008c0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008c2:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008c4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008ca:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d0:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008d8:	2204      	movs	r2, #4
 80008da:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_ADC2_Init+0xb4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_ADC2_Init+0xb4>)
 8000902:	2200      	movs	r2, #0
 8000904:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_ADC2_Init+0xb4>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800090e:	4812      	ldr	r0, [pc, #72]	@ (8000958 <MX_ADC2_Init+0xb4>)
 8000910:	f000 fec8 	bl	80016a4 <HAL_ADC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 800091a:	f000 f989 	bl	8000c30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_ADC2_Init+0xbc>)
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000922:	2306      	movs	r3, #6
 8000924:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000930:	2304      	movs	r3, #4
 8000932:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_ADC2_Init+0xb4>)
 8000942:	f001 faf1 	bl	8001f28 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800094c:	f000 f970 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000090 	.word	0x24000090
 800095c:	40022100 	.word	0x40022100
 8000960:	0c900008 	.word	0x0c900008

08000964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000968:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 800096a:	4a23      	ldr	r2, [pc, #140]	@ (80009f8 <MX_USART3_UART_Init+0x94>)
 800096c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096e:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ac:	4811      	ldr	r0, [pc, #68]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 80009ae:	f009 fa49 	bl	8009e44 <HAL_UART_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009b8:	f000 f93a 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 80009c0:	f00a ff8e 	bl	800b8e0 <HAL_UARTEx_SetTxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f931 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4808      	ldr	r0, [pc, #32]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 80009d2:	f00a ffc3 	bl	800b95c <HAL_UARTEx_SetRxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f928 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_USART3_UART_Init+0x90>)
 80009e2:	f00a ff44 	bl	800b86e <HAL_UARTEx_DisableFifoMode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f920 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2400016c 	.word	0x2400016c
 80009f8:	40004800 	.word	0x40004800

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_DMA_Init+0x3c>)
 8000a04:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a08:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <MX_DMA_Init+0x3c>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_DMA_Init+0x3c>)
 8000a14:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	200b      	movs	r0, #11
 8000a26:	f002 fbe0 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a2a:	200b      	movs	r0, #11
 8000a2c:	f002 fbf7 	bl	800321e <HAL_NVIC_EnableIRQ>

}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	58024400 	.word	0x58024400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a58:	4a2f      	ldr	r2, [pc, #188]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a70:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a76:	4a28      	ldr	r2, [pc, #160]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a80:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000a82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000aa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aac:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ab2:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <MX_GPIO_Init+0xdc>)
 8000abe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <MX_GPIO_Init+0xe0>)
 8000ae8:	f005 fb0a 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_GPIO_Init+0xe4>)
 8000b0a:	f005 faf9 	bl	8006100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	@ 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020800 	.word	0x58020800
 8000b20:	58020000 	.word	0x58020000

08000b24 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  // copies ADC/DMA temp buffer into sample buffer
  for(int j = 0; j < ADC_BUF_SIZE/2; j++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e010      	b.n	8000b54 <HAL_ADC_ConvHalfCpltCallback+0x30>
  {
	  samples[i] = adcbuf[j];
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b3e:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  i++;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000b4c:	6013      	str	r3, [r2, #0]
  for(int j = 0; j < ADC_BUF_SIZE/2; j++)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b1f      	cmp	r3, #31
 8000b58:	ddeb      	ble.n	8000b32 <HAL_ADC_ConvHalfCpltCallback+0xe>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	24000b00 	.word	0x24000b00
 8000b6c:	24000a00 	.word	0x24000a00
 8000b70:	24000200 	.word	0x24000200

08000b74 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  // copies ADC/DMA temp buffer into sample buffer
  for(int j = ADC_BUF_SIZE/2; j < ADC_BUF_SIZE; j++)
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e010      	b.n	8000ba4 <HAL_ADC_ConvCpltCallback+0x30>
  {
    samples[i] = adcbuf[j];
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4911      	ldr	r1, [pc, #68]	@ (8000bcc <HAL_ADC_ConvCpltCallback+0x58>)
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b8e:	4910      	ldr	r1, [pc, #64]	@ (8000bd0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    i++;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc8 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b9c:	6013      	str	r3, [r2, #0]
  for(int j = ADC_BUF_SIZE/2; j < ADC_BUF_SIZE; j++)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ba8:	ddeb      	ble.n	8000b82 <HAL_ADC_ConvCpltCallback+0xe>
  }

  // if enough samples taken, stops ADC and DMA
  if(i >= SAMPLE_BUF_MULTIPLE * ADC_BUF_SIZE)
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <HAL_ADC_ConvCpltCallback+0x54>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bb2:	d305      	bcc.n	8000bc0 <HAL_ADC_ConvCpltCallback+0x4c>
  {
	  adcflag = SET;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <HAL_ADC_ConvCpltCallback+0x60>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
	  HAL_ADCEx_MultiModeStop_DMA(hadc);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f002 f8a4 	bl	8002d08 <HAL_ADCEx_MultiModeStop_DMA>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24000b00 	.word	0x24000b00
 8000bcc:	24000a00 	.word	0x24000a00
 8000bd0:	24000200 	.word	0x24000200
 8000bd4:	24000b04 	.word	0x24000b04

08000bd8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bde:	463b      	mov	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bea:	f002 fb33 	bl	8003254 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bfa:	231f      	movs	r3, #31
 8000bfc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bfe:	2387      	movs	r3, #135	@ 0x87
 8000c00:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c06:	2300      	movs	r3, #0
 8000c08:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fb51 	bl	80032c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c22:	2004      	movs	r0, #4
 8000c24:	f002 fb2e 	bl	8003284 <HAL_MPU_Enable>

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c44:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c48:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c54:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	58024400 	.word	0x58024400

08000c70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	@ 0x30
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a59      	ldr	r2, [pc, #356]	@ (8000df4 <HAL_ADC_MspInit+0x184>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d16c      	bne.n	8000d6c <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c92:	4b59      	ldr	r3, [pc, #356]	@ (8000df8 <HAL_ADC_MspInit+0x188>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	4a57      	ldr	r2, [pc, #348]	@ (8000df8 <HAL_ADC_MspInit+0x188>)
 8000c9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c9c:	4b56      	ldr	r3, [pc, #344]	@ (8000df8 <HAL_ADC_MspInit+0x188>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d10e      	bne.n	8000cc2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ca4:	4b55      	ldr	r3, [pc, #340]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000ca6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000caa:	4a54      	ldr	r2, [pc, #336]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000cb4:	4b51      	ldr	r3, [pc, #324]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000cb6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cba:	f003 0320 	and.w	r3, r3, #32
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000cd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce0:	2340      	movs	r3, #64	@ 0x40
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4843      	ldr	r0, [pc, #268]	@ (8000e00 <HAL_ADC_MspInit+0x190>)
 8000cf4:	f005 fa04 	bl	8006100 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cf8:	4b42      	ldr	r3, [pc, #264]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000cfa:	4a43      	ldr	r2, [pc, #268]	@ (8000e08 <HAL_ADC_MspInit+0x198>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cfe:	4b41      	ldr	r3, [pc, #260]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d00:	2209      	movs	r2, #9
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d04:	4b3f      	ldr	r3, [pc, #252]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b3c      	ldr	r3, [pc, #240]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d18:	4b3a      	ldr	r3, [pc, #232]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d20:	4b38      	ldr	r3, [pc, #224]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d30:	4b34      	ldr	r3, [pc, #208]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d38:	4b32      	ldr	r3, [pc, #200]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d3e:	4831      	ldr	r0, [pc, #196]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d40:	f002 fb00 	bl	8003344 <HAL_DMA_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000d4a:	f7ff ff71 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a2c      	ldr	r2, [pc, #176]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d52:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d54:	4a2b      	ldr	r2, [pc, #172]	@ (8000e04 <HAL_ADC_MspInit+0x194>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2012      	movs	r0, #18
 8000d60:	f002 fa43 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d64:	2012      	movs	r0, #18
 8000d66:	f002 fa5a 	bl	800321e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d6a:	e03f      	b.n	8000dec <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a26      	ldr	r2, [pc, #152]	@ (8000e0c <HAL_ADC_MspInit+0x19c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d13a      	bne.n	8000dec <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d76:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <HAL_ADC_MspInit+0x188>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000df8 <HAL_ADC_MspInit+0x188>)
 8000d7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <HAL_ADC_MspInit+0x188>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d10e      	bne.n	8000da6 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d88:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000d8a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000d90:	f043 0320 	orr.w	r3, r3, #32
 8000d94:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000d9a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d9e:	f003 0320 	and.w	r3, r3, #32
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000da8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dac:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_ADC_MspInit+0x18c>)
 8000db8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc4:	2340      	movs	r3, #64	@ 0x40
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480a      	ldr	r0, [pc, #40]	@ (8000e00 <HAL_ADC_MspInit+0x190>)
 8000dd8:	f005 f992 	bl	8006100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2012      	movs	r0, #18
 8000de2:	f002 fa02 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000de6:	2012      	movs	r0, #18
 8000de8:	f002 fa19 	bl	800321e <HAL_NVIC_EnableIRQ>
}
 8000dec:	bf00      	nop
 8000dee:	3730      	adds	r7, #48	@ 0x30
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40022000 	.word	0x40022000
 8000df8:	24000b08 	.word	0x24000b08
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	58020000 	.word	0x58020000
 8000e04:	240000f4 	.word	0x240000f4
 8000e08:	40020010 	.word	0x40020010
 8000e0c:	40022100 	.word	0x40022100

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0ba      	sub	sp, #232	@ 0xe8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	22c0      	movs	r2, #192	@ 0xc0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00a fe1f 	bl	800ba74 <memset>
  if(huart->Instance==USART3)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee8 <HAL_UART_MspInit+0xd8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d14e      	bne.n	8000ede <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e40:	f04f 0202 	mov.w	r2, #2
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4618      	mov	r0, r3
 8000e58:	f006 fb94 	bl	8007584 <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e62:	f7ff fee5 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <HAL_UART_MspInit+0xdc>)
 8000e68:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000eec <HAL_UART_MspInit+0xdc>)
 8000e6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e72:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <HAL_UART_MspInit+0xdc>)
 8000e78:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_UART_MspInit+0xdc>)
 8000e86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e8a:	4a18      	ldr	r2, [pc, #96]	@ (8000eec <HAL_UART_MspInit+0xdc>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_UART_MspInit+0xdc>)
 8000e96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000eca:	f005 f919 	bl	8006100 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2027      	movs	r0, #39	@ 0x27
 8000ed4:	f002 f989 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ed8:	2027      	movs	r0, #39	@ 0x27
 8000eda:	f002 f9a0 	bl	800321e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	37e8      	adds	r7, #232	@ 0xe8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004800 	.word	0x40004800
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58020c00 	.word	0x58020c00

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4a:	f000 f939 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <DMA1_Stream0_IRQHandler+0x10>)
 8000f5a:	f003 fd4f 	bl	80049fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	240000f4 	.word	0x240000f4

08000f68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f6c:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <ADC_IRQHandler+0x14>)
 8000f6e:	f000 fdad 	bl	8001acc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f72:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <ADC_IRQHandler+0x18>)
 8000f74:	f000 fdaa 	bl	8001acc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2400002c 	.word	0x2400002c
 8000f80:	24000090 	.word	0x24000090

08000f84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <USART3_IRQHandler+0x10>)
 8000f8a:	f008 ffab 	bl	8009ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2400016c 	.word	0x2400016c

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <SystemInit+0xd0>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa2:	4a31      	ldr	r2, [pc, #196]	@ (8001068 <SystemInit+0xd0>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fac:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <SystemInit+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d807      	bhi.n	8000fc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800106c <SystemInit+0xd4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800106c <SystemInit+0xd4>)
 8000fc2:	f043 0303 	orr.w	r3, r3, #3
 8000fc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <SystemInit+0xd8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a28      	ldr	r2, [pc, #160]	@ (8001070 <SystemInit+0xd8>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <SystemInit+0xd8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <SystemInit+0xd8>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4924      	ldr	r1, [pc, #144]	@ (8001070 <SystemInit+0xd8>)
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <SystemInit+0xdc>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <SystemInit+0xd4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <SystemInit+0xd4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 030f 	bic.w	r3, r3, #15
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <SystemInit+0xd4>)
 8000ffc:	f043 0303 	orr.w	r3, r3, #3
 8001000:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <SystemInit+0xd8>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <SystemInit+0xd8>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <SystemInit+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <SystemInit+0xd8>)
 8001016:	4a18      	ldr	r2, [pc, #96]	@ (8001078 <SystemInit+0xe0>)
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <SystemInit+0xd8>)
 800101c:	4a17      	ldr	r2, [pc, #92]	@ (800107c <SystemInit+0xe4>)
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <SystemInit+0xd8>)
 8001022:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <SystemInit+0xe8>)
 8001024:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001026:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <SystemInit+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <SystemInit+0xd8>)
 800102e:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <SystemInit+0xe8>)
 8001030:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <SystemInit+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001038:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <SystemInit+0xd8>)
 800103a:	4a11      	ldr	r2, [pc, #68]	@ (8001080 <SystemInit+0xe8>)
 800103c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <SystemInit+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <SystemInit+0xd8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <SystemInit+0xd8>)
 800104a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800104e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <SystemInit+0xd8>)
 8001052:	2200      	movs	r2, #0
 8001054:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <SystemInit+0xec>)
 8001058:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800105c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	52002000 	.word	0x52002000
 8001070:	58024400 	.word	0x58024400
 8001074:	eaf6ed7f 	.word	0xeaf6ed7f
 8001078:	02020200 	.word	0x02020200
 800107c:	01ff0000 	.word	0x01ff0000
 8001080:	01010280 	.word	0x01010280
 8001084:	52004000 	.word	0x52004000

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800108c:	f7ff ff84 	bl	8000f98 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	@ (80010c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	@ (80010d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f00a fce5 	bl	800ba84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fa8f 	bl	80005dc <main>
  bx  lr
 80010be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80010c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010c8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010cc:	0800bb34 	.word	0x0800bb34
  ldr r2, =_sbss
 80010d0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010d4:	24000b10 	.word	0x24000b10

080010d8 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <BDMA1_IRQHandler>
	...

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e2:	2003      	movs	r0, #3
 80010e4:	f002 f876 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010e8:	f006 f876 	bl	80071d8 <HAL_RCC_GetSysClockFreq>
 80010ec:	4602      	mov	r2, r0
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_Init+0x68>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	4913      	ldr	r1, [pc, #76]	@ (8001148 <HAL_Init+0x6c>)
 80010fa:	5ccb      	ldrb	r3, [r1, r3]
 80010fc:	f003 031f 	and.w	r3, r3, #31
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_Init+0x68>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	4a0e      	ldr	r2, [pc, #56]	@ (8001148 <HAL_Init+0x6c>)
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <HAL_Init+0x70>)
 800111e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_Init+0x74>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f814 	bl	8001154 <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e002      	b.n	800113c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001136:	f7ff fd81 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	58024400 	.word	0x58024400
 8001148:	0800bae4 	.word	0x0800bae4
 800114c:	24000004 	.word	0x24000004
 8001150:	24000000 	.word	0x24000000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_InitTick+0x60>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e021      	b.n	80011ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_InitTick+0x64>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_InitTick+0x60>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f002 f85b 	bl	800323a <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f002 f825 	bl	80031ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <HAL_InitTick+0x68>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2400000c 	.word	0x2400000c
 80011b8:	24000000 	.word	0x24000000
 80011bc:	24000008 	.word	0x24000008

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2400000c 	.word	0x2400000c
 80011e4:	24000b0c 	.word	0x24000b0c

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	24000b0c 	.word	0x24000b0c

08001200 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <HAL_GetREVID+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0c1b      	lsrs	r3, r3, #16
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	5c001000 	.word	0x5c001000

08001218 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3360      	adds	r3, #96	@ 0x60
 8001292:	461a      	mov	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	431a      	orrs	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	611a      	str	r2, [r3, #16]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b087      	sub	sp, #28
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3360      	adds	r3, #96	@ 0x60
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	601a      	str	r2, [r3, #0]
  }
}
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800134e:	b480      	push	{r7}
 8001350:	b087      	sub	sp, #28
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3330      	adds	r3, #48	@ 0x30
 800135e:	461a      	mov	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	4413      	add	r3, r2
 800136c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	211f      	movs	r1, #31
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0e9b      	lsrs	r3, r3, #26
 8001386:	f003 011f 	and.w	r1, r3, #31
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	431a      	orrs	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3314      	adds	r3, #20
 80013dc:	461a      	mov	r2, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	0e5b      	lsrs	r3, r3, #25
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	0d1b      	lsrs	r3, r3, #20
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	2107      	movs	r1, #7
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	401a      	ands	r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	0d1b      	lsrs	r3, r3, #20
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	431a      	orrs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001416:	bf00      	nop
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0318 	and.w	r3, r3, #24
 8001446:	4908      	ldr	r1, [pc, #32]	@ (8001468 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001448:	40d9      	lsrs	r1, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	400b      	ands	r3, r1
 800144e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001452:	431a      	orrs	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	000fffff 	.word	0x000fffff

0800146c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 031f 	and.w	r3, r3, #31
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6093      	str	r3, [r2, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	5fffffc0 	.word	0x5fffffc0

080014c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014dc:	d101      	bne.n	80014e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <LL_ADC_EnableInternalRegulator+0x24>)
 80014fe:	4013      	ands	r3, r2
 8001500:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	6fffffc0 	.word	0x6fffffc0

08001518 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800152c:	d101      	bne.n	8001532 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <LL_ADC_Enable+0x24>)
 800154e:	4013      	ands	r3, r2
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	7fffffc0 	.word	0x7fffffc0

08001568 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <LL_ADC_Disable+0x24>)
 8001576:	4013      	ands	r3, r2
 8001578:	f043 0202 	orr.w	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	7fffffc0 	.word	0x7fffffc0

08001590 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_IsEnabled+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_IsEnabled+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d101      	bne.n	80015ce <LL_ADC_IsDisableOngoing+0x18>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <LL_ADC_IsDisableOngoing+0x1a>
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <LL_ADC_REG_StartConversion+0x24>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	f043 0204 	orr.w	r2, r3, #4
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	7fffffc0 	.word	0x7fffffc0

08001604 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <LL_ADC_REG_StopConversion+0x24>)
 8001612:	4013      	ands	r3, r2
 8001614:	f043 0210 	orr.w	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	7fffffc0 	.word	0x7fffffc0

0800162c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b04      	cmp	r3, #4
 800163e:	d101      	bne.n	8001644 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <LL_ADC_INJ_StopConversion+0x24>)
 8001662:	4013      	ands	r3, r2
 8001664:	f043 0220 	orr.w	r2, r3, #32
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	7fffffc0 	.word	0x7fffffc0

0800167c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b08      	cmp	r3, #8
 800168e:	d101      	bne.n	8001694 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e138      	b.n	8001930 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff facf 	bl	8000c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff feef 	bl	80014c8 <LL_ADC_IsDeepPowerDownEnabled>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fed5 	bl	80014a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff0a 	bl	8001518 <LL_ADC_IsInternalRegulatorEnabled>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d114      	bne.n	8001734 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff feee 	bl	80014f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001714:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <HAL_ADC_Init+0x294>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	4a88      	ldr	r2, [pc, #544]	@ (800193c <HAL_ADC_Init+0x298>)
 800171c:	fba2 2303 	umull	r2, r3, r2, r3
 8001720:	099b      	lsrs	r3, r3, #6
 8001722:	3301      	adds	r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001726:	e002      	b.n	800172e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3b01      	subs	r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f9      	bne.n	8001728 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff feed 	bl	8001518 <LL_ADC_IsInternalRegulatorEnabled>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10d      	bne.n	8001760 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001748:	f043 0210 	orr.w	r2, r3, #16
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff61 	bl	800162c <LL_ADC_REG_IsConversionOngoing>
 800176a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	f040 80d2 	bne.w	800191e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 80ce 	bne.w	800191e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001786:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800178a:	f043 0202 	orr.w	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fefa 	bl	8001590 <LL_ADC_IsEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d110      	bne.n	80017c4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017a2:	4867      	ldr	r0, [pc, #412]	@ (8001940 <HAL_ADC_Init+0x29c>)
 80017a4:	f7ff fef4 	bl	8001590 <LL_ADC_IsEnabled>
 80017a8:	4604      	mov	r4, r0
 80017aa:	4866      	ldr	r0, [pc, #408]	@ (8001944 <HAL_ADC_Init+0x2a0>)
 80017ac:	f7ff fef0 	bl	8001590 <LL_ADC_IsEnabled>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4323      	orrs	r3, r4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4619      	mov	r1, r3
 80017be:	4862      	ldr	r0, [pc, #392]	@ (8001948 <HAL_ADC_Init+0x2a4>)
 80017c0:	f7ff fd2a 	bl	8001218 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7d5b      	ldrb	r3, [r3, #21]
 80017c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ce:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80017d4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7f1b      	ldrb	r3, [r3, #28]
 80017da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7f1b      	ldrb	r3, [r3, #28]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	045b      	lsls	r3, r3, #17
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b4c      	ldr	r3, [pc, #304]	@ (800194c <HAL_ADC_Init+0x2a8>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	430b      	orrs	r3, r1
 8001824:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fefe 	bl	800162c <LL_ADC_REG_IsConversionOngoing>
 8001830:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff20 	bl	800167c <LL_ADC_INJ_IsConversionOngoing>
 800183c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d14a      	bne.n	80018da <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d147      	bne.n	80018da <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7d1b      	ldrb	r3, [r3, #20]
 800184e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b3c      	ldr	r3, [pc, #240]	@ (8001950 <HAL_ADC_Init+0x2ac>)
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	430b      	orrs	r3, r1
 800186a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001872:	2b01      	cmp	r3, #1
 8001874:	d11b      	bne.n	80018ae <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <HAL_ADC_Init+0x2b0>)
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800188a:	3a01      	subs	r2, #1
 800188c:	0411      	lsls	r1, r2, #16
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800189e:	430a      	orrs	r2, r1
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	e007      	b.n	80018be <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f001 f83d 	bl	8002954 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10c      	bne.n	80018fc <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	f023 010f 	bic.w	r1, r3, #15
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	1e5a      	subs	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80018fa:	e007      	b.n	800190c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 020f 	bic.w	r2, r2, #15
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001910:	f023 0303 	bic.w	r3, r3, #3
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	655a      	str	r2, [r3, #84]	@ 0x54
 800191c:	e007      	b.n	800192e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001922:	f043 0210 	orr.w	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800192e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3724      	adds	r7, #36	@ 0x24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	24000000 	.word	0x24000000
 800193c:	053e2d63 	.word	0x053e2d63
 8001940:	40022000 	.word	0x40022000
 8001944:	40022100 	.word	0x40022100
 8001948:	40022300 	.word	0x40022300
 800194c:	fff0c003 	.word	0xfff0c003
 8001950:	ffffbffc 	.word	0xffffbffc
 8001954:	fc00f81e 	.word	0xfc00f81e

08001958 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001960:	4856      	ldr	r0, [pc, #344]	@ (8001abc <HAL_ADC_Start+0x164>)
 8001962:	f7ff fd83 	bl	800146c <LL_ADC_GetMultimode>
 8001966:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe5d 	bl	800162c <LL_ADC_REG_IsConversionOngoing>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 809a 	bne.w	8001aae <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_ADC_Start+0x30>
 8001984:	2302      	movs	r3, #2
 8001986:	e095      	b.n	8001ab4 <HAL_ADC_Start+0x15c>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fe6f 	bl	8002674 <ADC_Enable>
 8001996:	4603      	mov	r3, r0
 8001998:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 8081 	bne.w	8001aa4 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019a6:	4b46      	ldr	r3, [pc, #280]	@ (8001ac0 <HAL_ADC_Start+0x168>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a43      	ldr	r2, [pc, #268]	@ (8001ac4 <HAL_ADC_Start+0x16c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d002      	beq.n	80019c2 <HAL_ADC_Start+0x6a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	e000      	b.n	80019c4 <HAL_ADC_Start+0x6c>
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <HAL_ADC_Start+0x170>)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d002      	beq.n	80019d2 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019ea:	d106      	bne.n	80019fa <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	f023 0206 	bic.w	r2, r3, #6
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80019f8:	e002      	b.n	8001a00 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	221c      	movs	r2, #28
 8001a06:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac4 <HAL_ADC_Start+0x16c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d002      	beq.n	8001a20 <HAL_ADC_Start+0xc8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	e000      	b.n	8001a22 <HAL_ADC_Start+0xca>
 8001a20:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <HAL_ADC_Start+0x170>)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d008      	beq.n	8001a3c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d002      	beq.n	8001a3c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	d114      	bne.n	8001a66 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fdbc 	bl	80015dc <LL_ADC_REG_StartConversion>
 8001a64:	e025      	b.n	8001ab2 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a13      	ldr	r2, [pc, #76]	@ (8001ac4 <HAL_ADC_Start+0x16c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d002      	beq.n	8001a82 <HAL_ADC_Start+0x12a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	e000      	b.n	8001a84 <HAL_ADC_Start+0x12c>
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_ADC_Start+0x170>)
 8001a84:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00f      	beq.n	8001ab2 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001aa2:	e006      	b.n	8001ab2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001aac:	e001      	b.n	8001ab2 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40022300 	.word	0x40022300
 8001ac0:	fffff0fe 	.word	0xfffff0fe
 8001ac4:	40022100 	.word	0x40022100
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ae8:	4882      	ldr	r0, [pc, #520]	@ (8001cf4 <HAL_ADC_IRQHandler+0x228>)
 8001aea:	f7ff fcbf 	bl	800146c <LL_ADC_GetMultimode>
 8001aee:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d017      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x5e>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d012      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b14:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f001 f9e3 	bl	8002ee8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2202      	movs	r2, #2
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x72>
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10a      	bne.n	8001b54 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8083 	beq.w	8001c50 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d07d      	beq.n	8001c50 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fbd9 	bl	8001328 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d062      	beq.n	8001c42 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf8 <HAL_ADC_IRQHandler+0x22c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d002      	beq.n	8001b8c <HAL_ADC_IRQHandler+0xc0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_IRQHandler+0xc2>
 8001b8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001cfc <HAL_ADC_IRQHandler+0x230>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d008      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d002      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d104      	bne.n	8001bb2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	e00c      	b.n	8001bcc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a50      	ldr	r2, [pc, #320]	@ (8001cf8 <HAL_ADC_IRQHandler+0x22c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d002      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0xf6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	e000      	b.n	8001bc4 <HAL_ADC_IRQHandler+0xf8>
 8001bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cfc <HAL_ADC_IRQHandler+0x230>)
 8001bc4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d135      	bne.n	8001c42 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d12e      	bne.n	8001c42 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fd1f 	bl	800162c <LL_ADC_REG_IsConversionOngoing>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11a      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 020c 	bic.w	r2, r2, #12
 8001c02:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d112      	bne.n	8001c42 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c28:	e00b      	b.n	8001c42 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe ff96 	bl	8000b74 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x198>
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10b      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 809f 	beq.w	8001dae <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8099 	beq.w	8001dae <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fb84 	bl	80013a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c9e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fb3f 	bl	8001328 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001caa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <HAL_ADC_IRQHandler+0x22c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d002      	beq.n	8001cbc <HAL_ADC_IRQHandler+0x1f0>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e000      	b.n	8001cbe <HAL_ADC_IRQHandler+0x1f2>
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_ADC_IRQHandler+0x230>)
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d008      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d002      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b07      	cmp	r3, #7
 8001cd6:	d104      	bne.n	8001ce2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	623b      	str	r3, [r7, #32]
 8001ce0:	e013      	b.n	8001d0a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_ADC_IRQHandler+0x22c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_ADC_IRQHandler+0x234>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	e007      	b.n	8001d02 <HAL_ADC_IRQHandler+0x236>
 8001cf2:	bf00      	nop
 8001cf4:	40022300 	.word	0x40022300
 8001cf8:	40022100 	.word	0x40022100
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef8 <HAL_ADC_IRQHandler+0x42c>)
 8001d02:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d047      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x25e>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03f      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d13a      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d34:	2b40      	cmp	r3, #64	@ 0x40
 8001d36:	d133      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d12e      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fc98 	bl	800167c <LL_ADC_INJ_IsConversionOngoing>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11a      	bne.n	8001d88 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d60:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d112      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d86:	e00b      	b.n	8001da0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f001 f879 	bl	8002e98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2260      	movs	r2, #96	@ 0x60
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d011      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x310>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00c      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f896 	bl	8001f00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x340>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f001 f85f 	bl	8002ec0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x370>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00d      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f001 f851 	bl	8002ed4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d036      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x3e8>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d031      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e5c:	e014      	b.n	8001e88 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e64:	4825      	ldr	r0, [pc, #148]	@ (8001efc <HAL_ADC_IRQHandler+0x430>)
 8001e66:	f7ff fb0f 	bl	8001488 <LL_ADC_GetMultiDMATransfer>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00b      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e70:	2301      	movs	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e74:	e008      	b.n	8001e88 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e84:	2301      	movs	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10e      	bne.n	8001eac <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e92:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	f043 0202 	orr.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f834 	bl	8001f14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d018      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x424>
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ecc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	f043 0208 	orr.w	r2, r3, #8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 ffde 	bl	8002eac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	@ 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40022300 	.word	0x40022300

08001f00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b0a1      	sub	sp, #132	@ 0x84
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a95      	ldr	r2, [pc, #596]	@ (8002198 <HAL_ADC_ConfigChannel+0x270>)
 8001f42:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x2a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e2c0      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x5ac>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fb64 	bl	800162c <LL_ADC_REG_IsConversionOngoing>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 82a5 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db2c      	blt.n	8001fce <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d108      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x6a>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	e016      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x98>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001faa:	2320      	movs	r3, #32
 8001fac:	e003      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2201      	movs	r2, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	69d1      	ldr	r1, [r2, #28]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	430b      	orrs	r3, r1
 8001fcc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f7ff f9b7 	bl	800134e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fb21 	bl	800162c <LL_ADC_REG_IsConversionOngoing>
 8001fea:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fb43 	bl	800167c <LL_ADC_INJ_IsConversionOngoing>
 8001ff6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 80a0 	bne.w	8002140 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002000:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 809c 	bne.w	8002140 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	461a      	mov	r2, r3
 8002016:	f7ff f9d9 	bl	80013cc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x118>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	e00a      	b.n	8002056 <HAL_ADC_ConfigChannel+0x12e>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d027      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6919      	ldr	r1, [r3, #16]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800206e:	f7ff f907 	bl	8001280 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6919      	ldr	r1, [r3, #16]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	7e5b      	ldrb	r3, [r3, #25]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x160>
 8002082:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002086:	e000      	b.n	800208a <HAL_ADC_ConfigChannel+0x162>
 8002088:	2300      	movs	r3, #0
 800208a:	461a      	mov	r2, r3
 800208c:	f7ff f931 	bl	80012f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6919      	ldr	r1, [r3, #16]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	7e1b      	ldrb	r3, [r3, #24]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x17e>
 80020a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020a4:	e000      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x180>
 80020a6:	2300      	movs	r3, #0
 80020a8:	461a      	mov	r2, r3
 80020aa:	f7ff f909 	bl	80012c0 <LL_ADC_SetDataRightShift>
 80020ae:	e047      	b.n	8002140 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	069b      	lsls	r3, r3, #26
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020d2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	069b      	lsls	r3, r3, #26
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020f6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	069b      	lsls	r3, r3, #26
 8002108:	429a      	cmp	r2, r3
 800210a:	d107      	bne.n	800211c <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800211a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002122:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	069b      	lsls	r3, r3, #26
 800212c:	429a      	cmp	r2, r3
 800212e:	d107      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800213e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fa23 	bl	8001590 <LL_ADC_IsEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 81bb 	bne.w	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6819      	ldr	r1, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	461a      	mov	r2, r3
 8002160:	f7ff f960 	bl	8001424 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a0b      	ldr	r2, [pc, #44]	@ (8002198 <HAL_ADC_ConfigChannel+0x270>)
 800216a:	4293      	cmp	r3, r2
 800216c:	f040 8130 	bne.w	80023d0 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10d      	bne.n	800219c <HAL_ADC_ConfigChannel+0x274>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0e9b      	lsrs	r3, r3, #26
 8002186:	3301      	adds	r3, #1
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	2b09      	cmp	r3, #9
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e01b      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x2a8>
 8002198:	47ff0000 	.word	0x47ff0000
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80021b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	bf94      	ite	ls
 80021ca:	2301      	movls	r3, #1
 80021cc:	2300      	movhi	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d079      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x2c8>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	069b      	lsls	r3, r3, #26
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ee:	e015      	b.n	800221c <HAL_ADC_ConfigChannel+0x2f4>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002200:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 800220c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_ADC_ConfigChannel+0x314>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	3301      	adds	r3, #1
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	e017      	b.n	800226c <HAL_ADC_ConfigChannel+0x344>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800224a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800224e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e003      	b.n	8002260 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	ea42 0103 	orr.w	r1, r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x36a>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	3301      	adds	r3, #1
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	051b      	lsls	r3, r3, #20
 8002290:	e018      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x39c>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80022ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c4:	430b      	orrs	r3, r1
 80022c6:	e07e      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x3bc>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	3301      	adds	r3, #1
 80022dc:	069b      	lsls	r3, r3, #26
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e2:	e015      	b.n	8002310 <HAL_ADC_ConfigChannel+0x3e8>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x408>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	e017      	b.n	8002360 <HAL_ADC_ConfigChannel+0x438>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	61bb      	str	r3, [r7, #24]
  return result;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e003      	b.n	8002354 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	ea42 0103 	orr.w	r1, r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_ADC_ConfigChannel+0x464>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	3b1e      	subs	r3, #30
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800238a:	e01b      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x49c>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	60fb      	str	r3, [r7, #12]
  return result;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 021f 	and.w	r2, r3, #31
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	3b1e      	subs	r3, #30
 80023be:	051b      	lsls	r3, r3, #20
 80023c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c4:	430b      	orrs	r3, r1
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fffe 	bl	80013cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da77      	bge.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d8:	4840      	ldr	r0, [pc, #256]	@ (80024dc <HAL_ADC_ConfigChannel+0x5b4>)
 80023da:	f7fe ff43 	bl	8001264 <LL_ADC_GetCommonPathInternalCh>
 80023de:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023e0:	483f      	ldr	r0, [pc, #252]	@ (80024e0 <HAL_ADC_ConfigChannel+0x5b8>)
 80023e2:	f7ff f8d5 	bl	8001590 <LL_ADC_IsEnabled>
 80023e6:	4604      	mov	r4, r0
 80023e8:	483e      	ldr	r0, [pc, #248]	@ (80024e4 <HAL_ADC_ConfigChannel+0x5bc>)
 80023ea:	f7ff f8d1 	bl	8001590 <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4323      	orrs	r3, r4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d155      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a3b      	ldr	r2, [pc, #236]	@ (80024e8 <HAL_ADC_ConfigChannel+0x5c0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d122      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x51e>
 8002400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d11d      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a35      	ldr	r2, [pc, #212]	@ (80024e4 <HAL_ADC_ConfigChannel+0x5bc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d159      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002416:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800241a:	4619      	mov	r1, r3
 800241c:	482f      	ldr	r0, [pc, #188]	@ (80024dc <HAL_ADC_ConfigChannel+0x5b4>)
 800241e:	f7fe ff0e 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002422:	4b32      	ldr	r3, [pc, #200]	@ (80024ec <HAL_ADC_ConfigChannel+0x5c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <HAL_ADC_ConfigChannel+0x5c8>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	3301      	adds	r3, #1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002436:	e002      	b.n	800243e <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	3b01      	subs	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f9      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002444:	e040      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2a      	ldr	r2, [pc, #168]	@ (80024f4 <HAL_ADC_ConfigChannel+0x5cc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d111      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x54c>
 8002450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002452:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a21      	ldr	r2, [pc, #132]	@ (80024e4 <HAL_ADC_ConfigChannel+0x5bc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d131      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800246a:	4619      	mov	r1, r3
 800246c:	481b      	ldr	r0, [pc, #108]	@ (80024dc <HAL_ADC_ConfigChannel+0x5b4>)
 800246e:	f7fe fee6 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002472:	e029      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <HAL_ADC_ConfigChannel+0x5d0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d124      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
 800247e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11f      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a15      	ldr	r2, [pc, #84]	@ (80024e4 <HAL_ADC_ConfigChannel+0x5bc>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d11a      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002494:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002498:	4619      	mov	r1, r3
 800249a:	4810      	ldr	r0, [pc, #64]	@ (80024dc <HAL_ADC_ConfigChannel+0x5b4>)
 800249c:	f7fe fecf 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
 80024a0:	e012      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80024b4:	e008      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ba:	f043 0220 	orr.w	r2, r3, #32
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3784      	adds	r7, #132	@ 0x84
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	40022300 	.word	0x40022300
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40022100 	.word	0x40022100
 80024e8:	cb840000 	.word	0xcb840000
 80024ec:	24000000 	.word	0x24000000
 80024f0:	053e2d63 	.word	0x053e2d63
 80024f4:	bac04000 	.word	0xbac04000
 80024f8:	cfb80000 	.word	0xcfb80000

080024fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff f88a 	bl	800162c <LL_ADC_REG_IsConversionOngoing>
 8002518:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f8ac 	bl	800167c <LL_ADC_INJ_IsConversionOngoing>
 8002524:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8098 	beq.w	8002664 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02a      	beq.n	8002598 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7d5b      	ldrb	r3, [r3, #21]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d126      	bne.n	8002598 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7d1b      	ldrb	r3, [r3, #20]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d122      	bne.n	8002598 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002556:	e014      	b.n	8002582 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4a45      	ldr	r2, [pc, #276]	@ (8002670 <ADC_ConversionStop+0x174>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d90d      	bls.n	800257c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	f043 0210 	orr.w	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e074      	b.n	8002666 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258c:	2b40      	cmp	r3, #64	@ 0x40
 800258e:	d1e3      	bne.n	8002558 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2240      	movs	r2, #64	@ 0x40
 8002596:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d014      	beq.n	80025c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f842 	bl	800162c <LL_ADC_REG_IsConversionOngoing>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe ffff 	bl	80015b6 <LL_ADC_IsDisableOngoing>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f81e 	bl	8001604 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d014      	beq.n	80025f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff f852 	bl	800167c <LL_ADC_INJ_IsConversionOngoing>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00c      	beq.n	80025f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe ffe7 	bl	80015b6 <LL_ADC_IsDisableOngoing>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d104      	bne.n	80025f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f82e 	bl	8001654 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d005      	beq.n	800260a <ADC_ConversionStop+0x10e>
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d105      	bne.n	8002610 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002604:	230c      	movs	r3, #12
 8002606:	617b      	str	r3, [r7, #20]
        break;
 8002608:	e005      	b.n	8002616 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800260a:	2308      	movs	r3, #8
 800260c:	617b      	str	r3, [r7, #20]
        break;
 800260e:	e002      	b.n	8002616 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002610:	2304      	movs	r3, #4
 8002612:	617b      	str	r3, [r7, #20]
        break;
 8002614:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002616:	f7fe fde7 	bl	80011e8 <HAL_GetTick>
 800261a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800261c:	e01b      	b.n	8002656 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800261e:	f7fe fde3 	bl	80011e8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b05      	cmp	r3, #5
 800262a:	d914      	bls.n	8002656 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e007      	b.n	8002666 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1dc      	bne.n	800261e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	000cdbff 	.word	0x000cdbff

08002674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe ff85 	bl	8001590 <LL_ADC_IsEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d161      	bne.n	8002750 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	4b32      	ldr	r3, [pc, #200]	@ (800275c <ADC_Enable+0xe8>)
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269e:	f043 0210 	orr.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e04d      	b.n	8002752 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe ff40 	bl	8001540 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fd92 	bl	80011e8 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026c6:	4826      	ldr	r0, [pc, #152]	@ (8002760 <ADC_Enable+0xec>)
 80026c8:	f7fe fed0 	bl	800146c <LL_ADC_GetMultimode>
 80026cc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a24      	ldr	r2, [pc, #144]	@ (8002764 <ADC_Enable+0xf0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d002      	beq.n	80026de <ADC_Enable+0x6a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	e000      	b.n	80026e0 <ADC_Enable+0x6c>
 80026de:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <ADC_Enable+0xf4>)
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d02c      	beq.n	8002742 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d130      	bne.n	8002750 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ee:	e028      	b.n	8002742 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe ff4b 	bl	8001590 <LL_ADC_IsEnabled>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe ff1b 	bl	8001540 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800270a:	f7fe fd6d 	bl	80011e8 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d914      	bls.n	8002742 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d00d      	beq.n	8002742 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	f043 0210 	orr.w	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d1cf      	bne.n	80026f0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	8000003f 	.word	0x8000003f
 8002760:	40022300 	.word	0x40022300
 8002764:	40022100 	.word	0x40022100
 8002768:	40022000 	.word	0x40022000

0800276c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe ff1c 	bl	80015b6 <LL_ADC_IsDisableOngoing>
 800277e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe ff03 	bl	8001590 <LL_ADC_IsEnabled>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d047      	beq.n	8002820 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d144      	bne.n	8002820 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030d 	and.w	r3, r3, #13
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10c      	bne.n	80027be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fedd 	bl	8001568 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2203      	movs	r2, #3
 80027b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027b6:	f7fe fd17 	bl	80011e8 <HAL_GetTick>
 80027ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027bc:	e029      	b.n	8002812 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c2:	f043 0210 	orr.w	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e023      	b.n	8002822 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027da:	f7fe fd05 	bl	80011e8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d914      	bls.n	8002812 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fa:	f043 0210 	orr.w	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e007      	b.n	8002822 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1dc      	bne.n	80027da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002836:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002840:	2b00      	cmp	r3, #0
 8002842:	d14b      	bne.n	80028dc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d021      	beq.n	80028a2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fd60 	bl	8001328 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d032      	beq.n	80028d4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d12b      	bne.n	80028d4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002880:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d11f      	bne.n	80028d4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
 80028a0:	e018      	b.n	80028d4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d111      	bne.n	80028d4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7fe f94d 	bl	8000b74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028da:	e00e      	b.n	80028fa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff fb13 	bl	8001f14 <HAL_ADC_ErrorCallback>
}
 80028ee:	e004      	b.n	80028fa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7fe f907 	bl	8000b24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	f043 0204 	orr.w	r2, r3, #4
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff fae5 	bl	8001f14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800295c:	4b60      	ldr	r3, [pc, #384]	@ (8002ae0 <ADC_ConfigureBoostMode+0x18c>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01c      	beq.n	80029a2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002968:	f004 fdb0 	bl	80074cc <HAL_RCC_GetHCLKFreq>
 800296c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002976:	d010      	beq.n	800299a <ADC_ConfigureBoostMode+0x46>
 8002978:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800297c:	d873      	bhi.n	8002a66 <ADC_ConfigureBoostMode+0x112>
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002982:	d002      	beq.n	800298a <ADC_ConfigureBoostMode+0x36>
 8002984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002988:	d16d      	bne.n	8002a66 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
        break;
 8002998:	e068      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	60fb      	str	r3, [r7, #12]
        break;
 80029a0:	e064      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029a2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	f005 ffa9 	bl	8008900 <HAL_RCCEx_GetPeriphCLKFreq>
 80029ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029b8:	d051      	beq.n	8002a5e <ADC_ConfigureBoostMode+0x10a>
 80029ba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029be:	d854      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 80029c0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029c4:	d047      	beq.n	8002a56 <ADC_ConfigureBoostMode+0x102>
 80029c6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029ca:	d84e      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 80029cc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029d0:	d03d      	beq.n	8002a4e <ADC_ConfigureBoostMode+0xfa>
 80029d2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029d6:	d848      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 80029d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029dc:	d033      	beq.n	8002a46 <ADC_ConfigureBoostMode+0xf2>
 80029de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029e2:	d842      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 80029e4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029e8:	d029      	beq.n	8002a3e <ADC_ConfigureBoostMode+0xea>
 80029ea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029ee:	d83c      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 80029f0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029f4:	d01a      	beq.n	8002a2c <ADC_ConfigureBoostMode+0xd8>
 80029f6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029fa:	d836      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 80029fc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a00:	d014      	beq.n	8002a2c <ADC_ConfigureBoostMode+0xd8>
 8002a02:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a06:	d830      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 8002a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a0c:	d00e      	beq.n	8002a2c <ADC_ConfigureBoostMode+0xd8>
 8002a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a12:	d82a      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 8002a14:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a18:	d008      	beq.n	8002a2c <ADC_ConfigureBoostMode+0xd8>
 8002a1a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a1e:	d824      	bhi.n	8002a6a <ADC_ConfigureBoostMode+0x116>
 8002a20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a24:	d002      	beq.n	8002a2c <ADC_ConfigureBoostMode+0xd8>
 8002a26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a2a:	d11e      	bne.n	8002a6a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c9b      	lsrs	r3, r3, #18
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	60fb      	str	r3, [r7, #12]
        break;
 8002a3c:	e016      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
        break;
 8002a44:	e012      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	60fb      	str	r3, [r7, #12]
        break;
 8002a4c:	e00e      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	60fb      	str	r3, [r7, #12]
        break;
 8002a54:	e00a      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	09db      	lsrs	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]
        break;
 8002a5c:	e006      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	60fb      	str	r3, [r7, #12]
        break;
 8002a64:	e002      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
        break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002a6a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae4 <ADC_ConfigureBoostMode+0x190>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d808      	bhi.n	8002a8c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a88:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a8a:	e025      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a16      	ldr	r2, [pc, #88]	@ (8002ae8 <ADC_ConfigureBoostMode+0x194>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d80a      	bhi.n	8002aaa <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	e016      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a0f      	ldr	r2, [pc, #60]	@ (8002aec <ADC_ConfigureBoostMode+0x198>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d80a      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac4:	609a      	str	r2, [r3, #8]
}
 8002ac6:	e007      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40022300 	.word	0x40022300
 8002ae4:	005f5e10 	.word	0x005f5e10
 8002ae8:	00bebc20 	.word	0x00bebc20
 8002aec:	017d7840 	.word	0x017d7840

08002af0 <LL_ADC_IsEnabled>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <LL_ADC_IsEnabled+0x18>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <LL_ADC_IsEnabled+0x1a>
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <LL_ADC_REG_StartConversion>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <LL_ADC_REG_StartConversion+0x24>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	7fffffc0 	.word	0x7fffffc0

08002b40 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d101      	bne.n	8002b58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0a0      	sub	sp, #128	@ 0x80
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ffe1 	bl	8002b40 <LL_ADC_REG_IsConversionOngoing>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0ad      	b.n	8002ce4 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0a6      	b.n	8002ce4 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a52      	ldr	r2, [pc, #328]	@ (8002cec <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d002      	beq.n	8002bae <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	e000      	b.n	8002bb0 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 8002bae:	4b50      	ldr	r3, [pc, #320]	@ (8002cf0 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d006      	beq.n	8002bc6 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff fd5b 	bl	8002674 <ADC_Enable>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bc4:	e02e      	b.n	8002c24 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a47      	ldr	r2, [pc, #284]	@ (8002cf0 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d102      	bne.n	8002bde <HAL_ADCEx_MultiModeStart_DMA+0x76>
 8002bd8:	4b44      	ldr	r3, [pc, #272]	@ (8002cec <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e001      	b.n	8002be2 <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e071      	b.n	8002ce4 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff fd37 	bl	8002674 <ADC_Enable>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 8002c0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d107      	bne.n	8002c24 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fd2b 	bl	8002674 <ADC_Enable>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002c24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d155      	bne.n	8002cd8 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c30:	4b30      	ldr	r3, [pc, #192]	@ (8002cf4 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c46:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf8 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8002c48:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cfc <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	4a2a      	ldr	r2, [pc, #168]	@ (8002d00 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 8002c58:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	221c      	movs	r2, #28
 8002c60:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0210 	orr.w	r2, r2, #16
 8002c78:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cec <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d002      	beq.n	8002c8a <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	e000      	b.n	8002c8c <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8002c8a:	4b19      	ldr	r3, [pc, #100]	@ (8002cf0 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00d      	beq.n	8002cb0 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3340      	adds	r3, #64	@ 0x40
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f000 fedc 	bl	8003a60 <HAL_DMA_Start_IT>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002cae:	e017      	b.n	8002ce0 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 8002cb2:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002cb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cba:	330c      	adds	r3, #12
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f000 fecd 	bl	8003a60 <HAL_DMA_Start_IT>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff21 	bl	8002b18 <LL_ADC_REG_StartConversion>
 8002cd6:	e003      	b.n	8002ce0 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002ce0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3780      	adds	r7, #128	@ 0x80
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40022100 	.word	0x40022100
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	fffff0fe 	.word	0xfffff0fe
 8002cf8:	0800282b 	.word	0x0800282b
 8002cfc:	08002903 	.word	0x08002903
 8002d00:	0800291f 	.word	0x0800291f
 8002d04:	40022300 	.word	0x40022300

08002d08 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b0a0      	sub	sp, #128	@ 0x80
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e0b2      	b.n	8002e84 <HAL_ADCEx_MultiModeStop_DMA+0x17c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d26:	2103      	movs	r1, #3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff fbe7 	bl	80024fc <ADC_ConversionStop>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 809d 	bne.w	8002e78 <HAL_ADCEx_MultiModeStop_DMA+0x170>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	663b      	str	r3, [r7, #96]	@ 0x60
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a50      	ldr	r2, [pc, #320]	@ (8002e8c <HAL_ADCEx_MultiModeStop_DMA+0x184>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d102      	bne.n	8002d56 <HAL_ADCEx_MultiModeStop_DMA+0x4e>
 8002d50:	4b4f      	ldr	r3, [pc, #316]	@ (8002e90 <HAL_ADCEx_MultiModeStop_DMA+0x188>)
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e001      	b.n	8002d5a <HAL_ADCEx_MultiModeStop_DMA+0x52>
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]

    if (tmphadcSlave.Instance == NULL)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ADCEx_MultiModeStop_DMA+0x70>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e085      	b.n	8002e84 <HAL_ADCEx_MultiModeStop_DMA+0x17c>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8002d78:	f7fe fa36 	bl	80011e8 <HAL_GetTick>
 8002d7c:	6778      	str	r0, [r7, #116]	@ 0x74

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fedd 	bl	8002b40 <LL_ADC_REG_IsConversionOngoing>
 8002d86:	67b8      	str	r0, [r7, #120]	@ 0x78
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002d88:	e027      	b.n	8002dda <HAL_ADCEx_MultiModeStop_DMA+0xd2>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d8a:	f7fe fa2d 	bl	80011e8 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d91b      	bls.n	8002dd0 <HAL_ADCEx_MultiModeStop_DMA+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fed0 	bl	8002b40 <LL_ADC_REG_IsConversionOngoing>
 8002da0:	67b8      	str	r0, [r7, #120]	@ 0x78

        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff feca 	bl	8002b40 <LL_ADC_REG_IsConversionOngoing>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d002      	beq.n	8002db8 <HAL_ADCEx_MultiModeStop_DMA+0xb0>
           || (tmphadcSlave_conversion_on_going == 1UL)
 8002db2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10b      	bne.n	8002dd0 <HAL_ADCEx_MultiModeStop_DMA+0xc8>
          )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	f043 0210 	orr.w	r2, r3, #16
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e059      	b.n	8002e84 <HAL_ADCEx_MultiModeStop_DMA+0x17c>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff feb4 	bl	8002b40 <LL_ADC_REG_IsConversionOngoing>
 8002dd8:	67b8      	str	r0, [r7, #120]	@ 0x78
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff feae 	bl	8002b40 <LL_ADC_REG_IsConversionOngoing>
 8002de4:	4603      	mov	r3, r0
           || (tmphadcSlave_conversion_on_going == 1UL)
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d0cf      	beq.n	8002d8a <HAL_ADCEx_MultiModeStop_DMA+0x82>
 8002dea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d0cc      	beq.n	8002d8a <HAL_ADCEx_MultiModeStop_DMA+0x82>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 f89d 	bl	8003f34 <HAL_DMA_Abort>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8002e00:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_ADCEx_MultiModeStop_DMA+0x10c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0210 	bic.w	r2, r2, #16
 8002e22:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8002e24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d115      	bne.n	8002e58 <HAL_ADCEx_MultiModeStop_DMA+0x150>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8002e2c:	f107 030c 	add.w	r3, r7, #12
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fc9b 	bl	800276c <ADC_Disable>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fc95 	bl	800276c <ADC_Disable>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10f      	bne.n	8002e68 <HAL_ADCEx_MultiModeStop_DMA+0x160>
 8002e48:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_ADCEx_MultiModeStop_DMA+0x160>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e56:	e007      	b.n	8002e68 <HAL_ADCEx_MultiModeStop_DMA+0x160>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fc87 	bl	800276c <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fc82 	bl	800276c <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_ADCEx_MultiModeStop_DMA+0x18c>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e80:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3780      	adds	r7, #128	@ 0x80
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	40022100 	.word	0x40022100
 8002e94:	ffffeefe 	.word	0xffffeefe

08002e98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b09f      	sub	sp, #124	@ 0x7c
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e080      	b.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d102      	bne.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f34:	4b3c      	ldr	r3, [pc, #240]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	e001      	b.n	8002f3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10b      	bne.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e05f      	b.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fdee 	bl	8002b40 <LL_ADC_REG_IsConversionOngoing>
 8002f64:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fde8 	bl	8002b40 <LL_ADC_REG_IsConversionOngoing>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d141      	bne.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d13e      	bne.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800302c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9a:	4822      	ldr	r0, [pc, #136]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f9c:	f7ff fda8 	bl	8002af0 <LL_ADC_IsEnabled>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4821      	ldr	r0, [pc, #132]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002fa4:	f7ff fda4 	bl	8002af0 <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4323      	orrs	r3, r4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d12e      	bne.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	6811      	ldr	r1, [r2, #0]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	6892      	ldr	r2, [r2, #8]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc8:	e021      	b.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd6:	4813      	ldr	r0, [pc, #76]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002fd8:	f7ff fd8a 	bl	8002af0 <LL_ADC_IsEnabled>
 8002fdc:	4604      	mov	r4, r0
 8002fde:	4812      	ldr	r0, [pc, #72]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002fe0:	f7ff fd86 	bl	8002af0 <LL_ADC_IsEnabled>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4323      	orrs	r3, r4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d110      	bne.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ff6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff8:	e009      	b.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800300c:	e000      	b.n	8003010 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800300e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003018:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800301c:	4618      	mov	r0, r3
 800301e:	377c      	adds	r7, #124	@ 0x7c
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	40022000 	.word	0x40022000
 8003028:	40022100 	.word	0x40022100
 800302c:	40022300 	.word	0x40022300
 8003030:	fffff0e0 	.word	0xfffff0e0

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <__NVIC_SetPriorityGrouping+0x40>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800305c:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 800305e:	4313      	orrs	r3, r2
 8003060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003062:	4a04      	ldr	r2, [pc, #16]	@ (8003074 <__NVIC_SetPriorityGrouping+0x40>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	60d3      	str	r3, [r2, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00
 8003078:	05fa0000 	.word	0x05fa0000

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	@ (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db0a      	blt.n	80030fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	490c      	ldr	r1, [pc, #48]	@ (8003120 <__NVIC_SetPriority+0x4c>)
 80030ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030fc:	e00a      	b.n	8003114 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4908      	ldr	r1, [pc, #32]	@ (8003124 <__NVIC_SetPriority+0x50>)
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	3b04      	subs	r3, #4
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	440b      	add	r3, r1
 8003112:	761a      	strb	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	@ 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f1c3 0307 	rsb	r3, r3, #7
 8003142:	2b04      	cmp	r3, #4
 8003144:	bf28      	it	cs
 8003146:	2304      	movcs	r3, #4
 8003148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3304      	adds	r3, #4
 800314e:	2b06      	cmp	r3, #6
 8003150:	d902      	bls.n	8003158 <NVIC_EncodePriority+0x30>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3b03      	subs	r3, #3
 8003156:	e000      	b.n	800315a <NVIC_EncodePriority+0x32>
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	f04f 32ff 	mov.w	r2, #4294967295
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	401a      	ands	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43d9      	mvns	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	4313      	orrs	r3, r2
         );
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	@ 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a0:	d301      	bcc.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00f      	b.n	80031c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4a0a      	ldr	r2, [pc, #40]	@ (80031d0 <SysTick_Config+0x40>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	210f      	movs	r1, #15
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f7ff ff8e 	bl	80030d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <SysTick_Config+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <SysTick_Config+0x40>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff29 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031f8:	f7ff ff40 	bl	800307c <__NVIC_GetPriorityGrouping>
 80031fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	6978      	ldr	r0, [r7, #20]
 8003204:	f7ff ff90 	bl	8003128 <NVIC_EncodePriority>
 8003208:	4602      	mov	r2, r0
 800320a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff5f 	bl	80030d4 <__NVIC_SetPriority>
}
 8003216:	bf00      	nop
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	4603      	mov	r3, r0
 8003226:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff33 	bl	8003098 <__NVIC_EnableIRQ>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ffa4 	bl	8003190 <SysTick_Config>
 8003248:	4603      	mov	r3, r0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003258:	f3bf 8f5f 	dmb	sy
}
 800325c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <HAL_MPU_Disable+0x28>)
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	4a06      	ldr	r2, [pc, #24]	@ (800327c <HAL_MPU_Disable+0x28>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003268:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800326a:	4b05      	ldr	r3, [pc, #20]	@ (8003280 <HAL_MPU_Disable+0x2c>)
 800326c:	2200      	movs	r2, #0
 800326e:	605a      	str	r2, [r3, #4]
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000ed00 	.word	0xe000ed00
 8003280:	e000ed90 	.word	0xe000ed90

08003284 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800328c:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <HAL_MPU_Enable+0x38>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_MPU_Enable+0x3c>)
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	4a09      	ldr	r2, [pc, #36]	@ (80032c0 <HAL_MPU_Enable+0x3c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80032a2:	f3bf 8f4f 	dsb	sy
}
 80032a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032a8:	f3bf 8f6f 	isb	sy
}
 80032ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed90 	.word	0xe000ed90
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	785a      	ldrb	r2, [r3, #1]
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_MPU_ConfigRegion+0x7c>)
 80032d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80032d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <HAL_MPU_ConfigRegion+0x7c>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	4a19      	ldr	r2, [pc, #100]	@ (8003340 <HAL_MPU_ConfigRegion+0x7c>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80032e0:	4a17      	ldr	r2, [pc, #92]	@ (8003340 <HAL_MPU_ConfigRegion+0x7c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7b1b      	ldrb	r3, [r3, #12]
 80032ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7adb      	ldrb	r3, [r3, #11]
 80032f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7a9b      	ldrb	r3, [r3, #10]
 80032fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7b5b      	ldrb	r3, [r3, #13]
 8003302:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003304:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7b9b      	ldrb	r3, [r3, #14]
 800330a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800330c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7bdb      	ldrb	r3, [r3, #15]
 8003312:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003314:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	7a5b      	ldrb	r3, [r3, #9]
 800331a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800331c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7a1b      	ldrb	r3, [r3, #8]
 8003322:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003324:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800332c:	4a04      	ldr	r2, [pc, #16]	@ (8003340 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800332e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003330:	6113      	str	r3, [r2, #16]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000ed90 	.word	0xe000ed90

08003344 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7fd ff4c 	bl	80011e8 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e37d      	b.n	8003a58 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a66      	ldr	r2, [pc, #408]	@ (80034fc <HAL_DMA_Init+0x1b8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d04a      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a65      	ldr	r2, [pc, #404]	@ (8003500 <HAL_DMA_Init+0x1bc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d045      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a63      	ldr	r2, [pc, #396]	@ (8003504 <HAL_DMA_Init+0x1c0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d040      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a62      	ldr	r2, [pc, #392]	@ (8003508 <HAL_DMA_Init+0x1c4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d03b      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a60      	ldr	r2, [pc, #384]	@ (800350c <HAL_DMA_Init+0x1c8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d036      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a5f      	ldr	r2, [pc, #380]	@ (8003510 <HAL_DMA_Init+0x1cc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d031      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5d      	ldr	r2, [pc, #372]	@ (8003514 <HAL_DMA_Init+0x1d0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02c      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003518 <HAL_DMA_Init+0x1d4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d027      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5a      	ldr	r2, [pc, #360]	@ (800351c <HAL_DMA_Init+0x1d8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d022      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a59      	ldr	r2, [pc, #356]	@ (8003520 <HAL_DMA_Init+0x1dc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d01d      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a57      	ldr	r2, [pc, #348]	@ (8003524 <HAL_DMA_Init+0x1e0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d018      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a56      	ldr	r2, [pc, #344]	@ (8003528 <HAL_DMA_Init+0x1e4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a54      	ldr	r2, [pc, #336]	@ (800352c <HAL_DMA_Init+0x1e8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a53      	ldr	r2, [pc, #332]	@ (8003530 <HAL_DMA_Init+0x1ec>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a51      	ldr	r2, [pc, #324]	@ (8003534 <HAL_DMA_Init+0x1f0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_Init+0xb8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a50      	ldr	r2, [pc, #320]	@ (8003538 <HAL_DMA_Init+0x1f4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_DMA_Init+0xbc>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_DMA_Init+0xbe>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 813c 	beq.w	8003680 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a37      	ldr	r2, [pc, #220]	@ (80034fc <HAL_DMA_Init+0x1b8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d04a      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a36      	ldr	r2, [pc, #216]	@ (8003500 <HAL_DMA_Init+0x1bc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d045      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a34      	ldr	r2, [pc, #208]	@ (8003504 <HAL_DMA_Init+0x1c0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d040      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a33      	ldr	r2, [pc, #204]	@ (8003508 <HAL_DMA_Init+0x1c4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d03b      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a31      	ldr	r2, [pc, #196]	@ (800350c <HAL_DMA_Init+0x1c8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d036      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a30      	ldr	r2, [pc, #192]	@ (8003510 <HAL_DMA_Init+0x1cc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d031      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2e      	ldr	r2, [pc, #184]	@ (8003514 <HAL_DMA_Init+0x1d0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d02c      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2d      	ldr	r2, [pc, #180]	@ (8003518 <HAL_DMA_Init+0x1d4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d027      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2b      	ldr	r2, [pc, #172]	@ (800351c <HAL_DMA_Init+0x1d8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d022      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2a      	ldr	r2, [pc, #168]	@ (8003520 <HAL_DMA_Init+0x1dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d01d      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a28      	ldr	r2, [pc, #160]	@ (8003524 <HAL_DMA_Init+0x1e0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d018      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a27      	ldr	r2, [pc, #156]	@ (8003528 <HAL_DMA_Init+0x1e4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d013      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a25      	ldr	r2, [pc, #148]	@ (800352c <HAL_DMA_Init+0x1e8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00e      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a24      	ldr	r2, [pc, #144]	@ (8003530 <HAL_DMA_Init+0x1ec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a22      	ldr	r2, [pc, #136]	@ (8003534 <HAL_DMA_Init+0x1f0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_DMA_Init+0x174>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a21      	ldr	r2, [pc, #132]	@ (8003538 <HAL_DMA_Init+0x1f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d108      	bne.n	80034ca <HAL_DMA_Init+0x186>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e007      	b.n	80034da <HAL_DMA_Init+0x196>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034da:	e02f      	b.n	800353c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034dc:	f7fd fe84 	bl	80011e8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d928      	bls.n	800353c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2203      	movs	r2, #3
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e2ad      	b.n	8003a58 <HAL_DMA_Init+0x714>
 80034fc:	40020010 	.word	0x40020010
 8003500:	40020028 	.word	0x40020028
 8003504:	40020040 	.word	0x40020040
 8003508:	40020058 	.word	0x40020058
 800350c:	40020070 	.word	0x40020070
 8003510:	40020088 	.word	0x40020088
 8003514:	400200a0 	.word	0x400200a0
 8003518:	400200b8 	.word	0x400200b8
 800351c:	40020410 	.word	0x40020410
 8003520:	40020428 	.word	0x40020428
 8003524:	40020440 	.word	0x40020440
 8003528:	40020458 	.word	0x40020458
 800352c:	40020470 	.word	0x40020470
 8003530:	40020488 	.word	0x40020488
 8003534:	400204a0 	.word	0x400204a0
 8003538:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1c8      	bne.n	80034dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4b73      	ldr	r3, [pc, #460]	@ (8003724 <HAL_DMA_Init+0x3e0>)
 8003556:	4013      	ands	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003562:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	2b04      	cmp	r3, #4
 800358e:	d107      	bne.n	80035a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	4313      	orrs	r3, r2
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b28      	cmp	r3, #40	@ 0x28
 80035a6:	d903      	bls.n	80035b0 <HAL_DMA_Init+0x26c>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80035ae:	d91f      	bls.n	80035f0 <HAL_DMA_Init+0x2ac>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80035b6:	d903      	bls.n	80035c0 <HAL_DMA_Init+0x27c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b42      	cmp	r3, #66	@ 0x42
 80035be:	d917      	bls.n	80035f0 <HAL_DMA_Init+0x2ac>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b46      	cmp	r3, #70	@ 0x46
 80035c6:	d903      	bls.n	80035d0 <HAL_DMA_Init+0x28c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b48      	cmp	r3, #72	@ 0x48
 80035ce:	d90f      	bls.n	80035f0 <HAL_DMA_Init+0x2ac>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b4e      	cmp	r3, #78	@ 0x4e
 80035d6:	d903      	bls.n	80035e0 <HAL_DMA_Init+0x29c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b52      	cmp	r3, #82	@ 0x52
 80035de:	d907      	bls.n	80035f0 <HAL_DMA_Init+0x2ac>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b73      	cmp	r3, #115	@ 0x73
 80035e6:	d905      	bls.n	80035f4 <HAL_DMA_Init+0x2b0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b77      	cmp	r3, #119	@ 0x77
 80035ee:	d801      	bhi.n	80035f4 <HAL_DMA_Init+0x2b0>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_DMA_Init+0x2b2>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003600:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 0307 	bic.w	r3, r3, #7
 8003618:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	2b04      	cmp	r3, #4
 800362a:	d117      	bne.n	800365c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00e      	beq.n	800365c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f002 fbd4 	bl	8005dec <DMA_CheckFifoParam>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2240      	movs	r2, #64	@ 0x40
 800364e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e1fd      	b.n	8003a58 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f002 fb0f 	bl	8005c88 <DMA_CalcBaseAndBitshift>
 800366a:	4603      	mov	r3, r0
 800366c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	223f      	movs	r2, #63	@ 0x3f
 8003678:	409a      	lsls	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	e0fd      	b.n	800387c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a28      	ldr	r2, [pc, #160]	@ (8003728 <HAL_DMA_Init+0x3e4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d04a      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a27      	ldr	r2, [pc, #156]	@ (800372c <HAL_DMA_Init+0x3e8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d045      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a25      	ldr	r2, [pc, #148]	@ (8003730 <HAL_DMA_Init+0x3ec>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d040      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a24      	ldr	r2, [pc, #144]	@ (8003734 <HAL_DMA_Init+0x3f0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d03b      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a22      	ldr	r2, [pc, #136]	@ (8003738 <HAL_DMA_Init+0x3f4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d036      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a21      	ldr	r2, [pc, #132]	@ (800373c <HAL_DMA_Init+0x3f8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d031      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003740 <HAL_DMA_Init+0x3fc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02c      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003744 <HAL_DMA_Init+0x400>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d027      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003748 <HAL_DMA_Init+0x404>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d022      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1b      	ldr	r2, [pc, #108]	@ (800374c <HAL_DMA_Init+0x408>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a19      	ldr	r2, [pc, #100]	@ (8003750 <HAL_DMA_Init+0x40c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d018      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a18      	ldr	r2, [pc, #96]	@ (8003754 <HAL_DMA_Init+0x410>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a16      	ldr	r2, [pc, #88]	@ (8003758 <HAL_DMA_Init+0x414>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a15      	ldr	r2, [pc, #84]	@ (800375c <HAL_DMA_Init+0x418>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <HAL_DMA_Init+0x41c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_DMA_Init+0x3dc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a12      	ldr	r2, [pc, #72]	@ (8003764 <HAL_DMA_Init+0x420>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d123      	bne.n	8003768 <HAL_DMA_Init+0x424>
 8003720:	2301      	movs	r3, #1
 8003722:	e022      	b.n	800376a <HAL_DMA_Init+0x426>
 8003724:	fe10803f 	.word	0xfe10803f
 8003728:	48022c08 	.word	0x48022c08
 800372c:	48022c1c 	.word	0x48022c1c
 8003730:	48022c30 	.word	0x48022c30
 8003734:	48022c44 	.word	0x48022c44
 8003738:	48022c58 	.word	0x48022c58
 800373c:	48022c6c 	.word	0x48022c6c
 8003740:	48022c80 	.word	0x48022c80
 8003744:	48022c94 	.word	0x48022c94
 8003748:	58025408 	.word	0x58025408
 800374c:	5802541c 	.word	0x5802541c
 8003750:	58025430 	.word	0x58025430
 8003754:	58025444 	.word	0x58025444
 8003758:	58025458 	.word	0x58025458
 800375c:	5802546c 	.word	0x5802546c
 8003760:	58025480 	.word	0x58025480
 8003764:	58025494 	.word	0x58025494
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d07d      	beq.n	800386a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a7f      	ldr	r2, [pc, #508]	@ (8003970 <HAL_DMA_Init+0x62c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d021      	beq.n	80037bc <HAL_DMA_Init+0x478>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7d      	ldr	r2, [pc, #500]	@ (8003974 <HAL_DMA_Init+0x630>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01c      	beq.n	80037bc <HAL_DMA_Init+0x478>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7c      	ldr	r2, [pc, #496]	@ (8003978 <HAL_DMA_Init+0x634>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d017      	beq.n	80037bc <HAL_DMA_Init+0x478>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7a      	ldr	r2, [pc, #488]	@ (800397c <HAL_DMA_Init+0x638>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d012      	beq.n	80037bc <HAL_DMA_Init+0x478>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a79      	ldr	r2, [pc, #484]	@ (8003980 <HAL_DMA_Init+0x63c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00d      	beq.n	80037bc <HAL_DMA_Init+0x478>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a77      	ldr	r2, [pc, #476]	@ (8003984 <HAL_DMA_Init+0x640>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d008      	beq.n	80037bc <HAL_DMA_Init+0x478>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a76      	ldr	r2, [pc, #472]	@ (8003988 <HAL_DMA_Init+0x644>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <HAL_DMA_Init+0x478>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a74      	ldr	r2, [pc, #464]	@ (800398c <HAL_DMA_Init+0x648>)
 80037ba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003990 <HAL_DMA_Init+0x64c>)
 80037d8:	4013      	ands	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b40      	cmp	r3, #64	@ 0x40
 80037e2:	d008      	beq.n	80037f6 <HAL_DMA_Init+0x4b2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b80      	cmp	r3, #128	@ 0x80
 80037ea:	d102      	bne.n	80037f2 <HAL_DMA_Init+0x4ae>
 80037ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037f0:	e002      	b.n	80037f8 <HAL_DMA_Init+0x4b4>
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <HAL_DMA_Init+0x4b4>
 80037f6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68d2      	ldr	r2, [r2, #12]
 80037fc:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037fe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003806:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800380e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003816:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800381e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003826:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	4b55      	ldr	r3, [pc, #340]	@ (8003994 <HAL_DMA_Init+0x650>)
 800383e:	4413      	add	r3, r2
 8003840:	4a55      	ldr	r2, [pc, #340]	@ (8003998 <HAL_DMA_Init+0x654>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f002 fa1a 	bl	8005c88 <DMA_CalcBaseAndBitshift>
 8003854:	4603      	mov	r3, r0
 8003856:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2201      	movs	r2, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	e008      	b.n	800387c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2240      	movs	r2, #64	@ 0x40
 800386e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2203      	movs	r2, #3
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0ed      	b.n	8003a58 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a46      	ldr	r2, [pc, #280]	@ (800399c <HAL_DMA_Init+0x658>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d072      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a45      	ldr	r2, [pc, #276]	@ (80039a0 <HAL_DMA_Init+0x65c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d06d      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a43      	ldr	r2, [pc, #268]	@ (80039a4 <HAL_DMA_Init+0x660>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d068      	beq.n	800396c <HAL_DMA_Init+0x628>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a42      	ldr	r2, [pc, #264]	@ (80039a8 <HAL_DMA_Init+0x664>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d063      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a40      	ldr	r2, [pc, #256]	@ (80039ac <HAL_DMA_Init+0x668>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d05e      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3f      	ldr	r2, [pc, #252]	@ (80039b0 <HAL_DMA_Init+0x66c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d059      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a3d      	ldr	r2, [pc, #244]	@ (80039b4 <HAL_DMA_Init+0x670>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d054      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3c      	ldr	r2, [pc, #240]	@ (80039b8 <HAL_DMA_Init+0x674>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d04f      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a3a      	ldr	r2, [pc, #232]	@ (80039bc <HAL_DMA_Init+0x678>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d04a      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a39      	ldr	r2, [pc, #228]	@ (80039c0 <HAL_DMA_Init+0x67c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d045      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a37      	ldr	r2, [pc, #220]	@ (80039c4 <HAL_DMA_Init+0x680>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d040      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a36      	ldr	r2, [pc, #216]	@ (80039c8 <HAL_DMA_Init+0x684>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d03b      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a34      	ldr	r2, [pc, #208]	@ (80039cc <HAL_DMA_Init+0x688>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d036      	beq.n	800396c <HAL_DMA_Init+0x628>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a33      	ldr	r2, [pc, #204]	@ (80039d0 <HAL_DMA_Init+0x68c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d031      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a31      	ldr	r2, [pc, #196]	@ (80039d4 <HAL_DMA_Init+0x690>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02c      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a30      	ldr	r2, [pc, #192]	@ (80039d8 <HAL_DMA_Init+0x694>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d027      	beq.n	800396c <HAL_DMA_Init+0x628>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_DMA_Init+0x62c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a12      	ldr	r2, [pc, #72]	@ (8003974 <HAL_DMA_Init+0x630>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01d      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a10      	ldr	r2, [pc, #64]	@ (8003978 <HAL_DMA_Init+0x634>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <HAL_DMA_Init+0x628>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a0f      	ldr	r2, [pc, #60]	@ (800397c <HAL_DMA_Init+0x638>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0d      	ldr	r2, [pc, #52]	@ (8003980 <HAL_DMA_Init+0x63c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_DMA_Init+0x628>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <HAL_DMA_Init+0x640>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <HAL_DMA_Init+0x644>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_DMA_Init+0x628>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a09      	ldr	r2, [pc, #36]	@ (800398c <HAL_DMA_Init+0x648>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d137      	bne.n	80039dc <HAL_DMA_Init+0x698>
 800396c:	2301      	movs	r3, #1
 800396e:	e036      	b.n	80039de <HAL_DMA_Init+0x69a>
 8003970:	58025408 	.word	0x58025408
 8003974:	5802541c 	.word	0x5802541c
 8003978:	58025430 	.word	0x58025430
 800397c:	58025444 	.word	0x58025444
 8003980:	58025458 	.word	0x58025458
 8003984:	5802546c 	.word	0x5802546c
 8003988:	58025480 	.word	0x58025480
 800398c:	58025494 	.word	0x58025494
 8003990:	fffe000f 	.word	0xfffe000f
 8003994:	a7fdabf8 	.word	0xa7fdabf8
 8003998:	cccccccd 	.word	0xcccccccd
 800399c:	40020010 	.word	0x40020010
 80039a0:	40020028 	.word	0x40020028
 80039a4:	40020040 	.word	0x40020040
 80039a8:	40020058 	.word	0x40020058
 80039ac:	40020070 	.word	0x40020070
 80039b0:	40020088 	.word	0x40020088
 80039b4:	400200a0 	.word	0x400200a0
 80039b8:	400200b8 	.word	0x400200b8
 80039bc:	40020410 	.word	0x40020410
 80039c0:	40020428 	.word	0x40020428
 80039c4:	40020440 	.word	0x40020440
 80039c8:	40020458 	.word	0x40020458
 80039cc:	40020470 	.word	0x40020470
 80039d0:	40020488 	.word	0x40020488
 80039d4:	400204a0 	.word	0x400204a0
 80039d8:	400204b8 	.word	0x400204b8
 80039dc:	2300      	movs	r3, #0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d032      	beq.n	8003a48 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f002 fa7e 	bl	8005ee4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b80      	cmp	r3, #128	@ 0x80
 80039ee:	d102      	bne.n	80039f6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a0a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <HAL_DMA_Init+0x6f2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d80c      	bhi.n	8003a36 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f002 fafb 	bl	8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	e008      	b.n	8003a48 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e226      	b.n	8003eca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_DMA_Start_IT+0x2a>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e21f      	b.n	8003eca <HAL_DMA_Start_IT+0x46a>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	f040 820a 	bne.w	8003eb4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a68      	ldr	r2, [pc, #416]	@ (8003c54 <HAL_DMA_Start_IT+0x1f4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d04a      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a66      	ldr	r2, [pc, #408]	@ (8003c58 <HAL_DMA_Start_IT+0x1f8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d045      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a65      	ldr	r2, [pc, #404]	@ (8003c5c <HAL_DMA_Start_IT+0x1fc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d040      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a63      	ldr	r2, [pc, #396]	@ (8003c60 <HAL_DMA_Start_IT+0x200>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d03b      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a62      	ldr	r2, [pc, #392]	@ (8003c64 <HAL_DMA_Start_IT+0x204>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d036      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a60      	ldr	r2, [pc, #384]	@ (8003c68 <HAL_DMA_Start_IT+0x208>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d031      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a5f      	ldr	r2, [pc, #380]	@ (8003c6c <HAL_DMA_Start_IT+0x20c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d02c      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c70 <HAL_DMA_Start_IT+0x210>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d027      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a5c      	ldr	r2, [pc, #368]	@ (8003c74 <HAL_DMA_Start_IT+0x214>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c78 <HAL_DMA_Start_IT+0x218>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01d      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a59      	ldr	r2, [pc, #356]	@ (8003c7c <HAL_DMA_Start_IT+0x21c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a57      	ldr	r2, [pc, #348]	@ (8003c80 <HAL_DMA_Start_IT+0x220>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a56      	ldr	r2, [pc, #344]	@ (8003c84 <HAL_DMA_Start_IT+0x224>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a54      	ldr	r2, [pc, #336]	@ (8003c88 <HAL_DMA_Start_IT+0x228>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a53      	ldr	r2, [pc, #332]	@ (8003c8c <HAL_DMA_Start_IT+0x22c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_DMA_Start_IT+0xee>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a51      	ldr	r2, [pc, #324]	@ (8003c90 <HAL_DMA_Start_IT+0x230>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <HAL_DMA_Start_IT+0x100>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e007      	b.n	8003b70 <HAL_DMA_Start_IT+0x110>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f001 fea2 	bl	80058c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a34      	ldr	r2, [pc, #208]	@ (8003c54 <HAL_DMA_Start_IT+0x1f4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d04a      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a33      	ldr	r2, [pc, #204]	@ (8003c58 <HAL_DMA_Start_IT+0x1f8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d045      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a31      	ldr	r2, [pc, #196]	@ (8003c5c <HAL_DMA_Start_IT+0x1fc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d040      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a30      	ldr	r2, [pc, #192]	@ (8003c60 <HAL_DMA_Start_IT+0x200>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d03b      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8003c64 <HAL_DMA_Start_IT+0x204>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d036      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c68 <HAL_DMA_Start_IT+0x208>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d031      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c6c <HAL_DMA_Start_IT+0x20c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02c      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c70 <HAL_DMA_Start_IT+0x210>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d027      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a28      	ldr	r2, [pc, #160]	@ (8003c74 <HAL_DMA_Start_IT+0x214>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a27      	ldr	r2, [pc, #156]	@ (8003c78 <HAL_DMA_Start_IT+0x218>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d01d      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a25      	ldr	r2, [pc, #148]	@ (8003c7c <HAL_DMA_Start_IT+0x21c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a24      	ldr	r2, [pc, #144]	@ (8003c80 <HAL_DMA_Start_IT+0x220>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a22      	ldr	r2, [pc, #136]	@ (8003c84 <HAL_DMA_Start_IT+0x224>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a21      	ldr	r2, [pc, #132]	@ (8003c88 <HAL_DMA_Start_IT+0x228>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c8c <HAL_DMA_Start_IT+0x22c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_DMA_Start_IT+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <HAL_DMA_Start_IT+0x230>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d101      	bne.n	8003c20 <HAL_DMA_Start_IT+0x1c0>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <HAL_DMA_Start_IT+0x1c2>
 8003c20:	2300      	movs	r3, #0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d036      	beq.n	8003c94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 021e 	bic.w	r2, r3, #30
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0216 	orr.w	r2, r2, #22
 8003c38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d03e      	beq.n	8003cc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0208 	orr.w	r2, r2, #8
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e035      	b.n	8003cc0 <HAL_DMA_Start_IT+0x260>
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 020e 	bic.w	r2, r3, #14
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 020a 	orr.w	r2, r2, #10
 8003ca6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0204 	orr.w	r2, r2, #4
 8003cbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a83      	ldr	r2, [pc, #524]	@ (8003ed4 <HAL_DMA_Start_IT+0x474>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d072      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a82      	ldr	r2, [pc, #520]	@ (8003ed8 <HAL_DMA_Start_IT+0x478>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d06d      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a80      	ldr	r2, [pc, #512]	@ (8003edc <HAL_DMA_Start_IT+0x47c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d068      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ee0 <HAL_DMA_Start_IT+0x480>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d063      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7d      	ldr	r2, [pc, #500]	@ (8003ee4 <HAL_DMA_Start_IT+0x484>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d05e      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ee8 <HAL_DMA_Start_IT+0x488>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d059      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7a      	ldr	r2, [pc, #488]	@ (8003eec <HAL_DMA_Start_IT+0x48c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d054      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a79      	ldr	r2, [pc, #484]	@ (8003ef0 <HAL_DMA_Start_IT+0x490>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d04f      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a77      	ldr	r2, [pc, #476]	@ (8003ef4 <HAL_DMA_Start_IT+0x494>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04a      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a76      	ldr	r2, [pc, #472]	@ (8003ef8 <HAL_DMA_Start_IT+0x498>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d045      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a74      	ldr	r2, [pc, #464]	@ (8003efc <HAL_DMA_Start_IT+0x49c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d040      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a73      	ldr	r2, [pc, #460]	@ (8003f00 <HAL_DMA_Start_IT+0x4a0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d03b      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a71      	ldr	r2, [pc, #452]	@ (8003f04 <HAL_DMA_Start_IT+0x4a4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d036      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a70      	ldr	r2, [pc, #448]	@ (8003f08 <HAL_DMA_Start_IT+0x4a8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d031      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6e      	ldr	r2, [pc, #440]	@ (8003f0c <HAL_DMA_Start_IT+0x4ac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d02c      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003f10 <HAL_DMA_Start_IT+0x4b0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d027      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6b      	ldr	r2, [pc, #428]	@ (8003f14 <HAL_DMA_Start_IT+0x4b4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003f18 <HAL_DMA_Start_IT+0x4b8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01d      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	@ (8003f1c <HAL_DMA_Start_IT+0x4bc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a67      	ldr	r2, [pc, #412]	@ (8003f20 <HAL_DMA_Start_IT+0x4c0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a65      	ldr	r2, [pc, #404]	@ (8003f24 <HAL_DMA_Start_IT+0x4c4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a64      	ldr	r2, [pc, #400]	@ (8003f28 <HAL_DMA_Start_IT+0x4c8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a62      	ldr	r2, [pc, #392]	@ (8003f2c <HAL_DMA_Start_IT+0x4cc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_DMA_Start_IT+0x350>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a61      	ldr	r2, [pc, #388]	@ (8003f30 <HAL_DMA_Start_IT+0x4d0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d101      	bne.n	8003db4 <HAL_DMA_Start_IT+0x354>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <HAL_DMA_Start_IT+0x356>
 8003db4:	2300      	movs	r3, #0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01a      	beq.n	8003df0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a37      	ldr	r2, [pc, #220]	@ (8003ed4 <HAL_DMA_Start_IT+0x474>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d04a      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a36      	ldr	r2, [pc, #216]	@ (8003ed8 <HAL_DMA_Start_IT+0x478>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d045      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a34      	ldr	r2, [pc, #208]	@ (8003edc <HAL_DMA_Start_IT+0x47c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d040      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a33      	ldr	r2, [pc, #204]	@ (8003ee0 <HAL_DMA_Start_IT+0x480>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d03b      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a31      	ldr	r2, [pc, #196]	@ (8003ee4 <HAL_DMA_Start_IT+0x484>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d036      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a30      	ldr	r2, [pc, #192]	@ (8003ee8 <HAL_DMA_Start_IT+0x488>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d031      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2e      	ldr	r2, [pc, #184]	@ (8003eec <HAL_DMA_Start_IT+0x48c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d02c      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef0 <HAL_DMA_Start_IT+0x490>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d027      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef4 <HAL_DMA_Start_IT+0x494>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d022      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef8 <HAL_DMA_Start_IT+0x498>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d01d      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a28      	ldr	r2, [pc, #160]	@ (8003efc <HAL_DMA_Start_IT+0x49c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d018      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a27      	ldr	r2, [pc, #156]	@ (8003f00 <HAL_DMA_Start_IT+0x4a0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d013      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	@ (8003f04 <HAL_DMA_Start_IT+0x4a4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00e      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a24      	ldr	r2, [pc, #144]	@ (8003f08 <HAL_DMA_Start_IT+0x4a8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d009      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a22      	ldr	r2, [pc, #136]	@ (8003f0c <HAL_DMA_Start_IT+0x4ac>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <HAL_DMA_Start_IT+0x430>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a21      	ldr	r2, [pc, #132]	@ (8003f10 <HAL_DMA_Start_IT+0x4b0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <HAL_DMA_Start_IT+0x442>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e012      	b.n	8003ec8 <HAL_DMA_Start_IT+0x468>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e009      	b.n	8003ec8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40020010 	.word	0x40020010
 8003ed8:	40020028 	.word	0x40020028
 8003edc:	40020040 	.word	0x40020040
 8003ee0:	40020058 	.word	0x40020058
 8003ee4:	40020070 	.word	0x40020070
 8003ee8:	40020088 	.word	0x40020088
 8003eec:	400200a0 	.word	0x400200a0
 8003ef0:	400200b8 	.word	0x400200b8
 8003ef4:	40020410 	.word	0x40020410
 8003ef8:	40020428 	.word	0x40020428
 8003efc:	40020440 	.word	0x40020440
 8003f00:	40020458 	.word	0x40020458
 8003f04:	40020470 	.word	0x40020470
 8003f08:	40020488 	.word	0x40020488
 8003f0c:	400204a0 	.word	0x400204a0
 8003f10:	400204b8 	.word	0x400204b8
 8003f14:	58025408 	.word	0x58025408
 8003f18:	5802541c 	.word	0x5802541c
 8003f1c:	58025430 	.word	0x58025430
 8003f20:	58025444 	.word	0x58025444
 8003f24:	58025458 	.word	0x58025458
 8003f28:	5802546c 	.word	0x5802546c
 8003f2c:	58025480 	.word	0x58025480
 8003f30:	58025494 	.word	0x58025494

08003f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7fd f954 	bl	80011e8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e2dc      	b.n	8004506 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d008      	beq.n	8003f6a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2280      	movs	r2, #128	@ 0x80
 8003f5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e2cd      	b.n	8004506 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a76      	ldr	r2, [pc, #472]	@ (8004148 <HAL_DMA_Abort+0x214>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04a      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a74      	ldr	r2, [pc, #464]	@ (800414c <HAL_DMA_Abort+0x218>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d045      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a73      	ldr	r2, [pc, #460]	@ (8004150 <HAL_DMA_Abort+0x21c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d040      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a71      	ldr	r2, [pc, #452]	@ (8004154 <HAL_DMA_Abort+0x220>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d03b      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a70      	ldr	r2, [pc, #448]	@ (8004158 <HAL_DMA_Abort+0x224>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d036      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a6e      	ldr	r2, [pc, #440]	@ (800415c <HAL_DMA_Abort+0x228>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d031      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6d      	ldr	r2, [pc, #436]	@ (8004160 <HAL_DMA_Abort+0x22c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d02c      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6b      	ldr	r2, [pc, #428]	@ (8004164 <HAL_DMA_Abort+0x230>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6a      	ldr	r2, [pc, #424]	@ (8004168 <HAL_DMA_Abort+0x234>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a68      	ldr	r2, [pc, #416]	@ (800416c <HAL_DMA_Abort+0x238>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a67      	ldr	r2, [pc, #412]	@ (8004170 <HAL_DMA_Abort+0x23c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a65      	ldr	r2, [pc, #404]	@ (8004174 <HAL_DMA_Abort+0x240>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a64      	ldr	r2, [pc, #400]	@ (8004178 <HAL_DMA_Abort+0x244>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a62      	ldr	r2, [pc, #392]	@ (800417c <HAL_DMA_Abort+0x248>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a61      	ldr	r2, [pc, #388]	@ (8004180 <HAL_DMA_Abort+0x24c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_Abort+0xd6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5f      	ldr	r2, [pc, #380]	@ (8004184 <HAL_DMA_Abort+0x250>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <HAL_DMA_Abort+0xda>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <HAL_DMA_Abort+0xdc>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 021e 	bic.w	r2, r2, #30
 8004022:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004032:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e00a      	b.n	8004052 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 020e 	bic.w	r2, r2, #14
 800404a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a3c      	ldr	r2, [pc, #240]	@ (8004148 <HAL_DMA_Abort+0x214>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d072      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a3a      	ldr	r2, [pc, #232]	@ (800414c <HAL_DMA_Abort+0x218>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d06d      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a39      	ldr	r2, [pc, #228]	@ (8004150 <HAL_DMA_Abort+0x21c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d068      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a37      	ldr	r2, [pc, #220]	@ (8004154 <HAL_DMA_Abort+0x220>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d063      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a36      	ldr	r2, [pc, #216]	@ (8004158 <HAL_DMA_Abort+0x224>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d05e      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a34      	ldr	r2, [pc, #208]	@ (800415c <HAL_DMA_Abort+0x228>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d059      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a33      	ldr	r2, [pc, #204]	@ (8004160 <HAL_DMA_Abort+0x22c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d054      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a31      	ldr	r2, [pc, #196]	@ (8004164 <HAL_DMA_Abort+0x230>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04f      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a30      	ldr	r2, [pc, #192]	@ (8004168 <HAL_DMA_Abort+0x234>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d04a      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2e      	ldr	r2, [pc, #184]	@ (800416c <HAL_DMA_Abort+0x238>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d045      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004170 <HAL_DMA_Abort+0x23c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d040      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004174 <HAL_DMA_Abort+0x240>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d03b      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004178 <HAL_DMA_Abort+0x244>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d036      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a28      	ldr	r2, [pc, #160]	@ (800417c <HAL_DMA_Abort+0x248>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d031      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a27      	ldr	r2, [pc, #156]	@ (8004180 <HAL_DMA_Abort+0x24c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d02c      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a25      	ldr	r2, [pc, #148]	@ (8004184 <HAL_DMA_Abort+0x250>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d027      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a24      	ldr	r2, [pc, #144]	@ (8004188 <HAL_DMA_Abort+0x254>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a22      	ldr	r2, [pc, #136]	@ (800418c <HAL_DMA_Abort+0x258>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a21      	ldr	r2, [pc, #132]	@ (8004190 <HAL_DMA_Abort+0x25c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1f      	ldr	r2, [pc, #124]	@ (8004194 <HAL_DMA_Abort+0x260>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1e      	ldr	r2, [pc, #120]	@ (8004198 <HAL_DMA_Abort+0x264>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1c      	ldr	r2, [pc, #112]	@ (800419c <HAL_DMA_Abort+0x268>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1b      	ldr	r2, [pc, #108]	@ (80041a0 <HAL_DMA_Abort+0x26c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_DMA_Abort+0x20e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a19      	ldr	r2, [pc, #100]	@ (80041a4 <HAL_DMA_Abort+0x270>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d132      	bne.n	80041a8 <HAL_DMA_Abort+0x274>
 8004142:	2301      	movs	r3, #1
 8004144:	e031      	b.n	80041aa <HAL_DMA_Abort+0x276>
 8004146:	bf00      	nop
 8004148:	40020010 	.word	0x40020010
 800414c:	40020028 	.word	0x40020028
 8004150:	40020040 	.word	0x40020040
 8004154:	40020058 	.word	0x40020058
 8004158:	40020070 	.word	0x40020070
 800415c:	40020088 	.word	0x40020088
 8004160:	400200a0 	.word	0x400200a0
 8004164:	400200b8 	.word	0x400200b8
 8004168:	40020410 	.word	0x40020410
 800416c:	40020428 	.word	0x40020428
 8004170:	40020440 	.word	0x40020440
 8004174:	40020458 	.word	0x40020458
 8004178:	40020470 	.word	0x40020470
 800417c:	40020488 	.word	0x40020488
 8004180:	400204a0 	.word	0x400204a0
 8004184:	400204b8 	.word	0x400204b8
 8004188:	58025408 	.word	0x58025408
 800418c:	5802541c 	.word	0x5802541c
 8004190:	58025430 	.word	0x58025430
 8004194:	58025444 	.word	0x58025444
 8004198:	58025458 	.word	0x58025458
 800419c:	5802546c 	.word	0x5802546c
 80041a0:	58025480 	.word	0x58025480
 80041a4:	58025494 	.word	0x58025494
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004378 <HAL_DMA_Abort+0x444>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d04a      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6b      	ldr	r2, [pc, #428]	@ (800437c <HAL_DMA_Abort+0x448>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d045      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004380 <HAL_DMA_Abort+0x44c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d040      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a68      	ldr	r2, [pc, #416]	@ (8004384 <HAL_DMA_Abort+0x450>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d03b      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a67      	ldr	r2, [pc, #412]	@ (8004388 <HAL_DMA_Abort+0x454>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d036      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a65      	ldr	r2, [pc, #404]	@ (800438c <HAL_DMA_Abort+0x458>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d031      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a64      	ldr	r2, [pc, #400]	@ (8004390 <HAL_DMA_Abort+0x45c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d02c      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a62      	ldr	r2, [pc, #392]	@ (8004394 <HAL_DMA_Abort+0x460>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d027      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a61      	ldr	r2, [pc, #388]	@ (8004398 <HAL_DMA_Abort+0x464>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d022      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5f      	ldr	r2, [pc, #380]	@ (800439c <HAL_DMA_Abort+0x468>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01d      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a5e      	ldr	r2, [pc, #376]	@ (80043a0 <HAL_DMA_Abort+0x46c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d018      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a5c      	ldr	r2, [pc, #368]	@ (80043a4 <HAL_DMA_Abort+0x470>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a5b      	ldr	r2, [pc, #364]	@ (80043a8 <HAL_DMA_Abort+0x474>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00e      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a59      	ldr	r2, [pc, #356]	@ (80043ac <HAL_DMA_Abort+0x478>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a58      	ldr	r2, [pc, #352]	@ (80043b0 <HAL_DMA_Abort+0x47c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_DMA_Abort+0x32a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a56      	ldr	r2, [pc, #344]	@ (80043b4 <HAL_DMA_Abort+0x480>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <HAL_DMA_Abort+0x33c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e007      	b.n	8004280 <HAL_DMA_Abort+0x34c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004280:	e013      	b.n	80042aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004282:	f7fc ffb1 	bl	80011e8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b05      	cmp	r3, #5
 800428e:	d90c      	bls.n	80042aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2203      	movs	r2, #3
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e12d      	b.n	8004506 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e5      	bne.n	8004282 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004378 <HAL_DMA_Abort+0x444>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2d      	ldr	r2, [pc, #180]	@ (800437c <HAL_DMA_Abort+0x448>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004380 <HAL_DMA_Abort+0x44c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004384 <HAL_DMA_Abort+0x450>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a29      	ldr	r2, [pc, #164]	@ (8004388 <HAL_DMA_Abort+0x454>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a27      	ldr	r2, [pc, #156]	@ (800438c <HAL_DMA_Abort+0x458>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a26      	ldr	r2, [pc, #152]	@ (8004390 <HAL_DMA_Abort+0x45c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a24      	ldr	r2, [pc, #144]	@ (8004394 <HAL_DMA_Abort+0x460>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a23      	ldr	r2, [pc, #140]	@ (8004398 <HAL_DMA_Abort+0x464>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a21      	ldr	r2, [pc, #132]	@ (800439c <HAL_DMA_Abort+0x468>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a20      	ldr	r2, [pc, #128]	@ (80043a0 <HAL_DMA_Abort+0x46c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1e      	ldr	r2, [pc, #120]	@ (80043a4 <HAL_DMA_Abort+0x470>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1d      	ldr	r2, [pc, #116]	@ (80043a8 <HAL_DMA_Abort+0x474>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1b      	ldr	r2, [pc, #108]	@ (80043ac <HAL_DMA_Abort+0x478>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1a      	ldr	r2, [pc, #104]	@ (80043b0 <HAL_DMA_Abort+0x47c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_Abort+0x422>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_DMA_Abort+0x480>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_DMA_Abort+0x426>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_DMA_Abort+0x428>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02b      	beq.n	80043b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	223f      	movs	r2, #63	@ 0x3f
 8004370:	409a      	lsls	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	e02a      	b.n	80043ce <HAL_DMA_Abort+0x49a>
 8004378:	40020010 	.word	0x40020010
 800437c:	40020028 	.word	0x40020028
 8004380:	40020040 	.word	0x40020040
 8004384:	40020058 	.word	0x40020058
 8004388:	40020070 	.word	0x40020070
 800438c:	40020088 	.word	0x40020088
 8004390:	400200a0 	.word	0x400200a0
 8004394:	400200b8 	.word	0x400200b8
 8004398:	40020410 	.word	0x40020410
 800439c:	40020428 	.word	0x40020428
 80043a0:	40020440 	.word	0x40020440
 80043a4:	40020458 	.word	0x40020458
 80043a8:	40020470 	.word	0x40020470
 80043ac:	40020488 	.word	0x40020488
 80043b0:	400204a0 	.word	0x400204a0
 80043b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a4f      	ldr	r2, [pc, #316]	@ (8004510 <HAL_DMA_Abort+0x5dc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d072      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004514 <HAL_DMA_Abort+0x5e0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d06d      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004518 <HAL_DMA_Abort+0x5e4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d068      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a4a      	ldr	r2, [pc, #296]	@ (800451c <HAL_DMA_Abort+0x5e8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d063      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a49      	ldr	r2, [pc, #292]	@ (8004520 <HAL_DMA_Abort+0x5ec>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d05e      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a47      	ldr	r2, [pc, #284]	@ (8004524 <HAL_DMA_Abort+0x5f0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d059      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a46      	ldr	r2, [pc, #280]	@ (8004528 <HAL_DMA_Abort+0x5f4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d054      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a44      	ldr	r2, [pc, #272]	@ (800452c <HAL_DMA_Abort+0x5f8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d04f      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a43      	ldr	r2, [pc, #268]	@ (8004530 <HAL_DMA_Abort+0x5fc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d04a      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a41      	ldr	r2, [pc, #260]	@ (8004534 <HAL_DMA_Abort+0x600>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d045      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a40      	ldr	r2, [pc, #256]	@ (8004538 <HAL_DMA_Abort+0x604>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d040      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a3e      	ldr	r2, [pc, #248]	@ (800453c <HAL_DMA_Abort+0x608>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d03b      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a3d      	ldr	r2, [pc, #244]	@ (8004540 <HAL_DMA_Abort+0x60c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d036      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3b      	ldr	r2, [pc, #236]	@ (8004544 <HAL_DMA_Abort+0x610>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d031      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a3a      	ldr	r2, [pc, #232]	@ (8004548 <HAL_DMA_Abort+0x614>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d02c      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a38      	ldr	r2, [pc, #224]	@ (800454c <HAL_DMA_Abort+0x618>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d027      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a37      	ldr	r2, [pc, #220]	@ (8004550 <HAL_DMA_Abort+0x61c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d022      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a35      	ldr	r2, [pc, #212]	@ (8004554 <HAL_DMA_Abort+0x620>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01d      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a34      	ldr	r2, [pc, #208]	@ (8004558 <HAL_DMA_Abort+0x624>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d018      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a32      	ldr	r2, [pc, #200]	@ (800455c <HAL_DMA_Abort+0x628>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a31      	ldr	r2, [pc, #196]	@ (8004560 <HAL_DMA_Abort+0x62c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004564 <HAL_DMA_Abort+0x630>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004568 <HAL_DMA_Abort+0x634>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_DMA_Abort+0x58a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2c      	ldr	r2, [pc, #176]	@ (800456c <HAL_DMA_Abort+0x638>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <HAL_DMA_Abort+0x58e>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_DMA_Abort+0x590>
 80044c2:	2300      	movs	r3, #0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80044d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40020010 	.word	0x40020010
 8004514:	40020028 	.word	0x40020028
 8004518:	40020040 	.word	0x40020040
 800451c:	40020058 	.word	0x40020058
 8004520:	40020070 	.word	0x40020070
 8004524:	40020088 	.word	0x40020088
 8004528:	400200a0 	.word	0x400200a0
 800452c:	400200b8 	.word	0x400200b8
 8004530:	40020410 	.word	0x40020410
 8004534:	40020428 	.word	0x40020428
 8004538:	40020440 	.word	0x40020440
 800453c:	40020458 	.word	0x40020458
 8004540:	40020470 	.word	0x40020470
 8004544:	40020488 	.word	0x40020488
 8004548:	400204a0 	.word	0x400204a0
 800454c:	400204b8 	.word	0x400204b8
 8004550:	58025408 	.word	0x58025408
 8004554:	5802541c 	.word	0x5802541c
 8004558:	58025430 	.word	0x58025430
 800455c:	58025444 	.word	0x58025444
 8004560:	58025458 	.word	0x58025458
 8004564:	5802546c 	.word	0x5802546c
 8004568:	58025480 	.word	0x58025480
 800456c:	58025494 	.word	0x58025494

08004570 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e237      	b.n	80049f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d004      	beq.n	8004598 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2280      	movs	r2, #128	@ 0x80
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e22c      	b.n	80049f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5c      	ldr	r2, [pc, #368]	@ (8004710 <HAL_DMA_Abort_IT+0x1a0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d04a      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004714 <HAL_DMA_Abort_IT+0x1a4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d045      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a59      	ldr	r2, [pc, #356]	@ (8004718 <HAL_DMA_Abort_IT+0x1a8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d040      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a58      	ldr	r2, [pc, #352]	@ (800471c <HAL_DMA_Abort_IT+0x1ac>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d03b      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a56      	ldr	r2, [pc, #344]	@ (8004720 <HAL_DMA_Abort_IT+0x1b0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d036      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a55      	ldr	r2, [pc, #340]	@ (8004724 <HAL_DMA_Abort_IT+0x1b4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d031      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a53      	ldr	r2, [pc, #332]	@ (8004728 <HAL_DMA_Abort_IT+0x1b8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02c      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a52      	ldr	r2, [pc, #328]	@ (800472c <HAL_DMA_Abort_IT+0x1bc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d027      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a50      	ldr	r2, [pc, #320]	@ (8004730 <HAL_DMA_Abort_IT+0x1c0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d022      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4f      	ldr	r2, [pc, #316]	@ (8004734 <HAL_DMA_Abort_IT+0x1c4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d01d      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a4d      	ldr	r2, [pc, #308]	@ (8004738 <HAL_DMA_Abort_IT+0x1c8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d018      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4c      	ldr	r2, [pc, #304]	@ (800473c <HAL_DMA_Abort_IT+0x1cc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d013      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a4a      	ldr	r2, [pc, #296]	@ (8004740 <HAL_DMA_Abort_IT+0x1d0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00e      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a49      	ldr	r2, [pc, #292]	@ (8004744 <HAL_DMA_Abort_IT+0x1d4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d009      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a47      	ldr	r2, [pc, #284]	@ (8004748 <HAL_DMA_Abort_IT+0x1d8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <HAL_DMA_Abort_IT+0xc8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a46      	ldr	r2, [pc, #280]	@ (800474c <HAL_DMA_Abort_IT+0x1dc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d101      	bne.n	800463c <HAL_DMA_Abort_IT+0xcc>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <HAL_DMA_Abort_IT+0xce>
 800463c:	2300      	movs	r3, #0
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8086 	beq.w	8004750 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2204      	movs	r2, #4
 8004648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2f      	ldr	r2, [pc, #188]	@ (8004710 <HAL_DMA_Abort_IT+0x1a0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d04a      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2e      	ldr	r2, [pc, #184]	@ (8004714 <HAL_DMA_Abort_IT+0x1a4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d045      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2c      	ldr	r2, [pc, #176]	@ (8004718 <HAL_DMA_Abort_IT+0x1a8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d040      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2b      	ldr	r2, [pc, #172]	@ (800471c <HAL_DMA_Abort_IT+0x1ac>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d03b      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a29      	ldr	r2, [pc, #164]	@ (8004720 <HAL_DMA_Abort_IT+0x1b0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d036      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a28      	ldr	r2, [pc, #160]	@ (8004724 <HAL_DMA_Abort_IT+0x1b4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d031      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a26      	ldr	r2, [pc, #152]	@ (8004728 <HAL_DMA_Abort_IT+0x1b8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d02c      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a25      	ldr	r2, [pc, #148]	@ (800472c <HAL_DMA_Abort_IT+0x1bc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d027      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a23      	ldr	r2, [pc, #140]	@ (8004730 <HAL_DMA_Abort_IT+0x1c0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d022      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a22      	ldr	r2, [pc, #136]	@ (8004734 <HAL_DMA_Abort_IT+0x1c4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01d      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a20      	ldr	r2, [pc, #128]	@ (8004738 <HAL_DMA_Abort_IT+0x1c8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d018      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1f      	ldr	r2, [pc, #124]	@ (800473c <HAL_DMA_Abort_IT+0x1cc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004740 <HAL_DMA_Abort_IT+0x1d0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00e      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004744 <HAL_DMA_Abort_IT+0x1d4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004748 <HAL_DMA_Abort_IT+0x1d8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_DMA_Abort_IT+0x17c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a19      	ldr	r2, [pc, #100]	@ (800474c <HAL_DMA_Abort_IT+0x1dc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d108      	bne.n	80046fe <HAL_DMA_Abort_IT+0x18e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e178      	b.n	80049f0 <HAL_DMA_Abort_IT+0x480>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e16f      	b.n	80049f0 <HAL_DMA_Abort_IT+0x480>
 8004710:	40020010 	.word	0x40020010
 8004714:	40020028 	.word	0x40020028
 8004718:	40020040 	.word	0x40020040
 800471c:	40020058 	.word	0x40020058
 8004720:	40020070 	.word	0x40020070
 8004724:	40020088 	.word	0x40020088
 8004728:	400200a0 	.word	0x400200a0
 800472c:	400200b8 	.word	0x400200b8
 8004730:	40020410 	.word	0x40020410
 8004734:	40020428 	.word	0x40020428
 8004738:	40020440 	.word	0x40020440
 800473c:	40020458 	.word	0x40020458
 8004740:	40020470 	.word	0x40020470
 8004744:	40020488 	.word	0x40020488
 8004748:	400204a0 	.word	0x400204a0
 800474c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 020e 	bic.w	r2, r2, #14
 800475e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a6c      	ldr	r2, [pc, #432]	@ (8004918 <HAL_DMA_Abort_IT+0x3a8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a6b      	ldr	r2, [pc, #428]	@ (800491c <HAL_DMA_Abort_IT+0x3ac>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a69      	ldr	r2, [pc, #420]	@ (8004920 <HAL_DMA_Abort_IT+0x3b0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a68      	ldr	r2, [pc, #416]	@ (8004924 <HAL_DMA_Abort_IT+0x3b4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a66      	ldr	r2, [pc, #408]	@ (8004928 <HAL_DMA_Abort_IT+0x3b8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a65      	ldr	r2, [pc, #404]	@ (800492c <HAL_DMA_Abort_IT+0x3bc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a63      	ldr	r2, [pc, #396]	@ (8004930 <HAL_DMA_Abort_IT+0x3c0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a62      	ldr	r2, [pc, #392]	@ (8004934 <HAL_DMA_Abort_IT+0x3c4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a60      	ldr	r2, [pc, #384]	@ (8004938 <HAL_DMA_Abort_IT+0x3c8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a5f      	ldr	r2, [pc, #380]	@ (800493c <HAL_DMA_Abort_IT+0x3cc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004940 <HAL_DMA_Abort_IT+0x3d0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004944 <HAL_DMA_Abort_IT+0x3d4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004948 <HAL_DMA_Abort_IT+0x3d8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a59      	ldr	r2, [pc, #356]	@ (800494c <HAL_DMA_Abort_IT+0x3dc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a57      	ldr	r2, [pc, #348]	@ (8004950 <HAL_DMA_Abort_IT+0x3e0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_Abort_IT+0x290>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a56      	ldr	r2, [pc, #344]	@ (8004954 <HAL_DMA_Abort_IT+0x3e4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d108      	bne.n	8004812 <HAL_DMA_Abort_IT+0x2a2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e007      	b.n	8004822 <HAL_DMA_Abort_IT+0x2b2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3c      	ldr	r2, [pc, #240]	@ (8004918 <HAL_DMA_Abort_IT+0x3a8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d072      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a3a      	ldr	r2, [pc, #232]	@ (800491c <HAL_DMA_Abort_IT+0x3ac>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d06d      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a39      	ldr	r2, [pc, #228]	@ (8004920 <HAL_DMA_Abort_IT+0x3b0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d068      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a37      	ldr	r2, [pc, #220]	@ (8004924 <HAL_DMA_Abort_IT+0x3b4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d063      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a36      	ldr	r2, [pc, #216]	@ (8004928 <HAL_DMA_Abort_IT+0x3b8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d05e      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a34      	ldr	r2, [pc, #208]	@ (800492c <HAL_DMA_Abort_IT+0x3bc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d059      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a33      	ldr	r2, [pc, #204]	@ (8004930 <HAL_DMA_Abort_IT+0x3c0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d054      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a31      	ldr	r2, [pc, #196]	@ (8004934 <HAL_DMA_Abort_IT+0x3c4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d04f      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a30      	ldr	r2, [pc, #192]	@ (8004938 <HAL_DMA_Abort_IT+0x3c8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d04a      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2e      	ldr	r2, [pc, #184]	@ (800493c <HAL_DMA_Abort_IT+0x3cc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d045      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <HAL_DMA_Abort_IT+0x3d0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d040      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a2b      	ldr	r2, [pc, #172]	@ (8004944 <HAL_DMA_Abort_IT+0x3d4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d03b      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2a      	ldr	r2, [pc, #168]	@ (8004948 <HAL_DMA_Abort_IT+0x3d8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d036      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a28      	ldr	r2, [pc, #160]	@ (800494c <HAL_DMA_Abort_IT+0x3dc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d031      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <HAL_DMA_Abort_IT+0x3e0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d02c      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a25      	ldr	r2, [pc, #148]	@ (8004954 <HAL_DMA_Abort_IT+0x3e4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d027      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a24      	ldr	r2, [pc, #144]	@ (8004958 <HAL_DMA_Abort_IT+0x3e8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d022      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a22      	ldr	r2, [pc, #136]	@ (800495c <HAL_DMA_Abort_IT+0x3ec>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01d      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a21      	ldr	r2, [pc, #132]	@ (8004960 <HAL_DMA_Abort_IT+0x3f0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d018      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <HAL_DMA_Abort_IT+0x3f4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <HAL_DMA_Abort_IT+0x3f8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <HAL_DMA_Abort_IT+0x3fc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <HAL_DMA_Abort_IT+0x400>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_DMA_Abort_IT+0x3a2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <HAL_DMA_Abort_IT+0x404>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d132      	bne.n	8004978 <HAL_DMA_Abort_IT+0x408>
 8004912:	2301      	movs	r3, #1
 8004914:	e031      	b.n	800497a <HAL_DMA_Abort_IT+0x40a>
 8004916:	bf00      	nop
 8004918:	40020010 	.word	0x40020010
 800491c:	40020028 	.word	0x40020028
 8004920:	40020040 	.word	0x40020040
 8004924:	40020058 	.word	0x40020058
 8004928:	40020070 	.word	0x40020070
 800492c:	40020088 	.word	0x40020088
 8004930:	400200a0 	.word	0x400200a0
 8004934:	400200b8 	.word	0x400200b8
 8004938:	40020410 	.word	0x40020410
 800493c:	40020428 	.word	0x40020428
 8004940:	40020440 	.word	0x40020440
 8004944:	40020458 	.word	0x40020458
 8004948:	40020470 	.word	0x40020470
 800494c:	40020488 	.word	0x40020488
 8004950:	400204a0 	.word	0x400204a0
 8004954:	400204b8 	.word	0x400204b8
 8004958:	58025408 	.word	0x58025408
 800495c:	5802541c 	.word	0x5802541c
 8004960:	58025430 	.word	0x58025430
 8004964:	58025444 	.word	0x58025444
 8004968:	58025458 	.word	0x58025458
 800496c:	5802546c 	.word	0x5802546c
 8004970:	58025480 	.word	0x58025480
 8004974:	58025494 	.word	0x58025494
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d028      	beq.n	80049d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800498c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2201      	movs	r2, #1
 800499e:	409a      	lsls	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00c      	beq.n	80049d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop

080049fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	@ 0x28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a08:	4b67      	ldr	r3, [pc, #412]	@ (8004ba8 <HAL_DMA_IRQHandler+0x1ac>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a67      	ldr	r2, [pc, #412]	@ (8004bac <HAL_DMA_IRQHandler+0x1b0>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	0a9b      	lsrs	r3, r3, #10
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a5f      	ldr	r2, [pc, #380]	@ (8004bb0 <HAL_DMA_IRQHandler+0x1b4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d04a      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a5d      	ldr	r2, [pc, #372]	@ (8004bb4 <HAL_DMA_IRQHandler+0x1b8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d045      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5c      	ldr	r2, [pc, #368]	@ (8004bb8 <HAL_DMA_IRQHandler+0x1bc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d040      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5a      	ldr	r2, [pc, #360]	@ (8004bbc <HAL_DMA_IRQHandler+0x1c0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d03b      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a59      	ldr	r2, [pc, #356]	@ (8004bc0 <HAL_DMA_IRQHandler+0x1c4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d036      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a57      	ldr	r2, [pc, #348]	@ (8004bc4 <HAL_DMA_IRQHandler+0x1c8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d031      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a56      	ldr	r2, [pc, #344]	@ (8004bc8 <HAL_DMA_IRQHandler+0x1cc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d02c      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a54      	ldr	r2, [pc, #336]	@ (8004bcc <HAL_DMA_IRQHandler+0x1d0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d027      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a53      	ldr	r2, [pc, #332]	@ (8004bd0 <HAL_DMA_IRQHandler+0x1d4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d022      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a51      	ldr	r2, [pc, #324]	@ (8004bd4 <HAL_DMA_IRQHandler+0x1d8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01d      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a50      	ldr	r2, [pc, #320]	@ (8004bd8 <HAL_DMA_IRQHandler+0x1dc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8004bdc <HAL_DMA_IRQHandler+0x1e0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8004be0 <HAL_DMA_IRQHandler+0x1e4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a4b      	ldr	r2, [pc, #300]	@ (8004be4 <HAL_DMA_IRQHandler+0x1e8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a4a      	ldr	r2, [pc, #296]	@ (8004be8 <HAL_DMA_IRQHandler+0x1ec>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_DMA_IRQHandler+0xd2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a48      	ldr	r2, [pc, #288]	@ (8004bec <HAL_DMA_IRQHandler+0x1f0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0xd6>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_DMA_IRQHandler+0xd8>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 842b 	beq.w	8005330 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 80a2 	beq.w	8004c34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb0 <HAL_DMA_IRQHandler+0x1b4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d04a      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb4 <HAL_DMA_IRQHandler+0x1b8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d045      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2b      	ldr	r2, [pc, #172]	@ (8004bb8 <HAL_DMA_IRQHandler+0x1bc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d040      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2a      	ldr	r2, [pc, #168]	@ (8004bbc <HAL_DMA_IRQHandler+0x1c0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d03b      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a28      	ldr	r2, [pc, #160]	@ (8004bc0 <HAL_DMA_IRQHandler+0x1c4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d036      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a27      	ldr	r2, [pc, #156]	@ (8004bc4 <HAL_DMA_IRQHandler+0x1c8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d031      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a25      	ldr	r2, [pc, #148]	@ (8004bc8 <HAL_DMA_IRQHandler+0x1cc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02c      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a24      	ldr	r2, [pc, #144]	@ (8004bcc <HAL_DMA_IRQHandler+0x1d0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d027      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a22      	ldr	r2, [pc, #136]	@ (8004bd0 <HAL_DMA_IRQHandler+0x1d4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d022      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a21      	ldr	r2, [pc, #132]	@ (8004bd4 <HAL_DMA_IRQHandler+0x1d8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d01d      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd8 <HAL_DMA_IRQHandler+0x1dc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d018      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1e      	ldr	r2, [pc, #120]	@ (8004bdc <HAL_DMA_IRQHandler+0x1e0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004be0 <HAL_DMA_IRQHandler+0x1e4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00e      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <HAL_DMA_IRQHandler+0x1e8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d009      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a19      	ldr	r2, [pc, #100]	@ (8004be8 <HAL_DMA_IRQHandler+0x1ec>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x194>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a18      	ldr	r2, [pc, #96]	@ (8004bec <HAL_DMA_IRQHandler+0x1f0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d12f      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x1f4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e02e      	b.n	8004c04 <HAL_DMA_IRQHandler+0x208>
 8004ba6:	bf00      	nop
 8004ba8:	24000000 	.word	0x24000000
 8004bac:	1b4e81b5 	.word	0x1b4e81b5
 8004bb0:	40020010 	.word	0x40020010
 8004bb4:	40020028 	.word	0x40020028
 8004bb8:	40020040 	.word	0x40020040
 8004bbc:	40020058 	.word	0x40020058
 8004bc0:	40020070 	.word	0x40020070
 8004bc4:	40020088 	.word	0x40020088
 8004bc8:	400200a0 	.word	0x400200a0
 8004bcc:	400200b8 	.word	0x400200b8
 8004bd0:	40020410 	.word	0x40020410
 8004bd4:	40020428 	.word	0x40020428
 8004bd8:	40020440 	.word	0x40020440
 8004bdc:	40020458 	.word	0x40020458
 8004be0:	40020470 	.word	0x40020470
 8004be4:	40020488 	.word	0x40020488
 8004be8:	400204a0 	.word	0x400204a0
 8004bec:	400204b8 	.word	0x400204b8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf14      	ite	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	2300      	moveq	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0204 	bic.w	r2, r2, #4
 8004c16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2208      	movs	r2, #8
 8004c22:	409a      	lsls	r2, r3
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2c:	f043 0201 	orr.w	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d06e      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a69      	ldr	r2, [pc, #420]	@ (8004df4 <HAL_DMA_IRQHandler+0x3f8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d04a      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a67      	ldr	r2, [pc, #412]	@ (8004df8 <HAL_DMA_IRQHandler+0x3fc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d045      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a66      	ldr	r2, [pc, #408]	@ (8004dfc <HAL_DMA_IRQHandler+0x400>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d040      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a64      	ldr	r2, [pc, #400]	@ (8004e00 <HAL_DMA_IRQHandler+0x404>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d03b      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a63      	ldr	r2, [pc, #396]	@ (8004e04 <HAL_DMA_IRQHandler+0x408>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d036      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a61      	ldr	r2, [pc, #388]	@ (8004e08 <HAL_DMA_IRQHandler+0x40c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d031      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a60      	ldr	r2, [pc, #384]	@ (8004e0c <HAL_DMA_IRQHandler+0x410>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d02c      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5e      	ldr	r2, [pc, #376]	@ (8004e10 <HAL_DMA_IRQHandler+0x414>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d027      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8004e14 <HAL_DMA_IRQHandler+0x418>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d022      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5b      	ldr	r2, [pc, #364]	@ (8004e18 <HAL_DMA_IRQHandler+0x41c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01d      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a5a      	ldr	r2, [pc, #360]	@ (8004e1c <HAL_DMA_IRQHandler+0x420>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d018      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a58      	ldr	r2, [pc, #352]	@ (8004e20 <HAL_DMA_IRQHandler+0x424>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d013      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a57      	ldr	r2, [pc, #348]	@ (8004e24 <HAL_DMA_IRQHandler+0x428>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00e      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a55      	ldr	r2, [pc, #340]	@ (8004e28 <HAL_DMA_IRQHandler+0x42c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d009      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a54      	ldr	r2, [pc, #336]	@ (8004e2c <HAL_DMA_IRQHandler+0x430>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d004      	beq.n	8004cea <HAL_DMA_IRQHandler+0x2ee>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a52      	ldr	r2, [pc, #328]	@ (8004e30 <HAL_DMA_IRQHandler+0x434>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10a      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x304>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e003      	b.n	8004d08 <HAL_DMA_IRQHandler+0x30c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2201      	movs	r2, #1
 8004d16:	409a      	lsls	r2, r3
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	f043 0202 	orr.w	r2, r3, #2
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2204      	movs	r2, #4
 8004d32:	409a      	lsls	r2, r3
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 808f 	beq.w	8004e5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2c      	ldr	r2, [pc, #176]	@ (8004df4 <HAL_DMA_IRQHandler+0x3f8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d04a      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004df8 <HAL_DMA_IRQHandler+0x3fc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d045      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a29      	ldr	r2, [pc, #164]	@ (8004dfc <HAL_DMA_IRQHandler+0x400>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d040      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a27      	ldr	r2, [pc, #156]	@ (8004e00 <HAL_DMA_IRQHandler+0x404>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d03b      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a26      	ldr	r2, [pc, #152]	@ (8004e04 <HAL_DMA_IRQHandler+0x408>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d036      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a24      	ldr	r2, [pc, #144]	@ (8004e08 <HAL_DMA_IRQHandler+0x40c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d031      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a23      	ldr	r2, [pc, #140]	@ (8004e0c <HAL_DMA_IRQHandler+0x410>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d02c      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a21      	ldr	r2, [pc, #132]	@ (8004e10 <HAL_DMA_IRQHandler+0x414>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d027      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a20      	ldr	r2, [pc, #128]	@ (8004e14 <HAL_DMA_IRQHandler+0x418>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d022      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e18 <HAL_DMA_IRQHandler+0x41c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01d      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e1c <HAL_DMA_IRQHandler+0x420>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d018      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e20 <HAL_DMA_IRQHandler+0x424>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1a      	ldr	r2, [pc, #104]	@ (8004e24 <HAL_DMA_IRQHandler+0x428>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00e      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a18      	ldr	r2, [pc, #96]	@ (8004e28 <HAL_DMA_IRQHandler+0x42c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a17      	ldr	r2, [pc, #92]	@ (8004e2c <HAL_DMA_IRQHandler+0x430>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_DMA_IRQHandler+0x3e2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a15      	ldr	r2, [pc, #84]	@ (8004e30 <HAL_DMA_IRQHandler+0x434>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d12a      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x438>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e023      	b.n	8004e3c <HAL_DMA_IRQHandler+0x440>
 8004df4:	40020010 	.word	0x40020010
 8004df8:	40020028 	.word	0x40020028
 8004dfc:	40020040 	.word	0x40020040
 8004e00:	40020058 	.word	0x40020058
 8004e04:	40020070 	.word	0x40020070
 8004e08:	40020088 	.word	0x40020088
 8004e0c:	400200a0 	.word	0x400200a0
 8004e10:	400200b8 	.word	0x400200b8
 8004e14:	40020410 	.word	0x40020410
 8004e18:	40020428 	.word	0x40020428
 8004e1c:	40020440 	.word	0x40020440
 8004e20:	40020458 	.word	0x40020458
 8004e24:	40020470 	.word	0x40020470
 8004e28:	40020488 	.word	0x40020488
 8004e2c:	400204a0 	.word	0x400204a0
 8004e30:	400204b8 	.word	0x400204b8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00d      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	2204      	movs	r2, #4
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e54:	f043 0204 	orr.w	r2, r3, #4
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	2210      	movs	r2, #16
 8004e66:	409a      	lsls	r2, r3
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80a6 	beq.w	8004fbe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a85      	ldr	r2, [pc, #532]	@ (800508c <HAL_DMA_IRQHandler+0x690>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d04a      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a83      	ldr	r2, [pc, #524]	@ (8005090 <HAL_DMA_IRQHandler+0x694>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d045      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a82      	ldr	r2, [pc, #520]	@ (8005094 <HAL_DMA_IRQHandler+0x698>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d040      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a80      	ldr	r2, [pc, #512]	@ (8005098 <HAL_DMA_IRQHandler+0x69c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d03b      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a7f      	ldr	r2, [pc, #508]	@ (800509c <HAL_DMA_IRQHandler+0x6a0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d036      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a7d      	ldr	r2, [pc, #500]	@ (80050a0 <HAL_DMA_IRQHandler+0x6a4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d031      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a7c      	ldr	r2, [pc, #496]	@ (80050a4 <HAL_DMA_IRQHandler+0x6a8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d02c      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a7a      	ldr	r2, [pc, #488]	@ (80050a8 <HAL_DMA_IRQHandler+0x6ac>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d027      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a79      	ldr	r2, [pc, #484]	@ (80050ac <HAL_DMA_IRQHandler+0x6b0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a77      	ldr	r2, [pc, #476]	@ (80050b0 <HAL_DMA_IRQHandler+0x6b4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01d      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a76      	ldr	r2, [pc, #472]	@ (80050b4 <HAL_DMA_IRQHandler+0x6b8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a74      	ldr	r2, [pc, #464]	@ (80050b8 <HAL_DMA_IRQHandler+0x6bc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a73      	ldr	r2, [pc, #460]	@ (80050bc <HAL_DMA_IRQHandler+0x6c0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a71      	ldr	r2, [pc, #452]	@ (80050c0 <HAL_DMA_IRQHandler+0x6c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a70      	ldr	r2, [pc, #448]	@ (80050c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x516>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a6e      	ldr	r2, [pc, #440]	@ (80050c8 <HAL_DMA_IRQHandler+0x6cc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d10a      	bne.n	8004f28 <HAL_DMA_IRQHandler+0x52c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf14      	ite	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	2300      	moveq	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e009      	b.n	8004f3c <HAL_DMA_IRQHandler+0x540>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bf14      	ite	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	2300      	moveq	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03e      	beq.n	8004fbe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	2210      	movs	r2, #16
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d018      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d108      	bne.n	8004f7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d024      	beq.n	8004fbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
 8004f7c:	e01f      	b.n	8004fbe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01b      	beq.n	8004fbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
 8004f8e:	e016      	b.n	8004fbe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0208 	bic.w	r2, r2, #8
 8004fac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8110 	beq.w	80051f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800508c <HAL_DMA_IRQHandler+0x690>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d04a      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8005090 <HAL_DMA_IRQHandler+0x694>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d045      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a29      	ldr	r2, [pc, #164]	@ (8005094 <HAL_DMA_IRQHandler+0x698>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d040      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a28      	ldr	r2, [pc, #160]	@ (8005098 <HAL_DMA_IRQHandler+0x69c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d03b      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a26      	ldr	r2, [pc, #152]	@ (800509c <HAL_DMA_IRQHandler+0x6a0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d036      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a25      	ldr	r2, [pc, #148]	@ (80050a0 <HAL_DMA_IRQHandler+0x6a4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d031      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a23      	ldr	r2, [pc, #140]	@ (80050a4 <HAL_DMA_IRQHandler+0x6a8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d02c      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a22      	ldr	r2, [pc, #136]	@ (80050a8 <HAL_DMA_IRQHandler+0x6ac>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d027      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a20      	ldr	r2, [pc, #128]	@ (80050ac <HAL_DMA_IRQHandler+0x6b0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1f      	ldr	r2, [pc, #124]	@ (80050b0 <HAL_DMA_IRQHandler+0x6b4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d01d      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1d      	ldr	r2, [pc, #116]	@ (80050b4 <HAL_DMA_IRQHandler+0x6b8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d018      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1c      	ldr	r2, [pc, #112]	@ (80050b8 <HAL_DMA_IRQHandler+0x6bc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1a      	ldr	r2, [pc, #104]	@ (80050bc <HAL_DMA_IRQHandler+0x6c0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00e      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a19      	ldr	r2, [pc, #100]	@ (80050c0 <HAL_DMA_IRQHandler+0x6c4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d009      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a17      	ldr	r2, [pc, #92]	@ (80050c4 <HAL_DMA_IRQHandler+0x6c8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_DMA_IRQHandler+0x678>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a16      	ldr	r2, [pc, #88]	@ (80050c8 <HAL_DMA_IRQHandler+0x6cc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d12b      	bne.n	80050cc <HAL_DMA_IRQHandler+0x6d0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e02a      	b.n	80050e0 <HAL_DMA_IRQHandler+0x6e4>
 800508a:	bf00      	nop
 800508c:	40020010 	.word	0x40020010
 8005090:	40020028 	.word	0x40020028
 8005094:	40020040 	.word	0x40020040
 8005098:	40020058 	.word	0x40020058
 800509c:	40020070 	.word	0x40020070
 80050a0:	40020088 	.word	0x40020088
 80050a4:	400200a0 	.word	0x400200a0
 80050a8:	400200b8 	.word	0x400200b8
 80050ac:	40020410 	.word	0x40020410
 80050b0:	40020428 	.word	0x40020428
 80050b4:	40020440 	.word	0x40020440
 80050b8:	40020458 	.word	0x40020458
 80050bc:	40020470 	.word	0x40020470
 80050c0:	40020488 	.word	0x40020488
 80050c4:	400204a0 	.word	0x400204a0
 80050c8:	400204b8 	.word	0x400204b8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8087 	beq.w	80051f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2220      	movs	r2, #32
 80050f0:	409a      	lsls	r2, r3
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d139      	bne.n	8005176 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0216 	bic.w	r2, r2, #22
 8005110:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005120:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d103      	bne.n	8005132 <HAL_DMA_IRQHandler+0x736>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0208 	bic.w	r2, r2, #8
 8005140:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	223f      	movs	r2, #63	@ 0x3f
 800514c:	409a      	lsls	r2, r3
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8382 	beq.w	8005870 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
          }
          return;
 8005174:	e37c      	b.n	8005870 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d018      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d108      	bne.n	80051a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005196:	2b00      	cmp	r3, #0
 8005198:	d02c      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
 80051a2:	e027      	b.n	80051f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d023      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3
 80051b4:	e01e      	b.n	80051f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0210 	bic.w	r2, r2, #16
 80051d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 833e 	beq.w	800587a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8088 	beq.w	800531c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2204      	movs	r2, #4
 8005210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a89      	ldr	r2, [pc, #548]	@ (8005440 <HAL_DMA_IRQHandler+0xa44>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d04a      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a88      	ldr	r2, [pc, #544]	@ (8005444 <HAL_DMA_IRQHandler+0xa48>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d045      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a86      	ldr	r2, [pc, #536]	@ (8005448 <HAL_DMA_IRQHandler+0xa4c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d040      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a85      	ldr	r2, [pc, #532]	@ (800544c <HAL_DMA_IRQHandler+0xa50>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d03b      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a83      	ldr	r2, [pc, #524]	@ (8005450 <HAL_DMA_IRQHandler+0xa54>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d036      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a82      	ldr	r2, [pc, #520]	@ (8005454 <HAL_DMA_IRQHandler+0xa58>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d031      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a80      	ldr	r2, [pc, #512]	@ (8005458 <HAL_DMA_IRQHandler+0xa5c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d02c      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a7f      	ldr	r2, [pc, #508]	@ (800545c <HAL_DMA_IRQHandler+0xa60>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d027      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a7d      	ldr	r2, [pc, #500]	@ (8005460 <HAL_DMA_IRQHandler+0xa64>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d022      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a7c      	ldr	r2, [pc, #496]	@ (8005464 <HAL_DMA_IRQHandler+0xa68>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d01d      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a7a      	ldr	r2, [pc, #488]	@ (8005468 <HAL_DMA_IRQHandler+0xa6c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a79      	ldr	r2, [pc, #484]	@ (800546c <HAL_DMA_IRQHandler+0xa70>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a77      	ldr	r2, [pc, #476]	@ (8005470 <HAL_DMA_IRQHandler+0xa74>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a76      	ldr	r2, [pc, #472]	@ (8005474 <HAL_DMA_IRQHandler+0xa78>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a74      	ldr	r2, [pc, #464]	@ (8005478 <HAL_DMA_IRQHandler+0xa7c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x8b8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a73      	ldr	r2, [pc, #460]	@ (800547c <HAL_DMA_IRQHandler+0xa80>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d108      	bne.n	80052c6 <HAL_DMA_IRQHandler+0x8ca>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e007      	b.n	80052d6 <HAL_DMA_IRQHandler+0x8da>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052de:	429a      	cmp	r2, r3
 80052e0:	d307      	bcc.n	80052f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f2      	bne.n	80052d6 <HAL_DMA_IRQHandler+0x8da>
 80052f0:	e000      	b.n	80052f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80052f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2203      	movs	r2, #3
 8005306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800530a:	e003      	b.n	8005314 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 82aa 	beq.w	800587a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
 800532e:	e2a4      	b.n	800587a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a52      	ldr	r2, [pc, #328]	@ (8005480 <HAL_DMA_IRQHandler+0xa84>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d04a      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a51      	ldr	r2, [pc, #324]	@ (8005484 <HAL_DMA_IRQHandler+0xa88>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d045      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a4f      	ldr	r2, [pc, #316]	@ (8005488 <HAL_DMA_IRQHandler+0xa8c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d040      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a4e      	ldr	r2, [pc, #312]	@ (800548c <HAL_DMA_IRQHandler+0xa90>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d03b      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a4c      	ldr	r2, [pc, #304]	@ (8005490 <HAL_DMA_IRQHandler+0xa94>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d036      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a4b      	ldr	r2, [pc, #300]	@ (8005494 <HAL_DMA_IRQHandler+0xa98>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d031      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a49      	ldr	r2, [pc, #292]	@ (8005498 <HAL_DMA_IRQHandler+0xa9c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02c      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a48      	ldr	r2, [pc, #288]	@ (800549c <HAL_DMA_IRQHandler+0xaa0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d027      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a46      	ldr	r2, [pc, #280]	@ (80054a0 <HAL_DMA_IRQHandler+0xaa4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a45      	ldr	r2, [pc, #276]	@ (80054a4 <HAL_DMA_IRQHandler+0xaa8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d01d      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a43      	ldr	r2, [pc, #268]	@ (80054a8 <HAL_DMA_IRQHandler+0xaac>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a42      	ldr	r2, [pc, #264]	@ (80054ac <HAL_DMA_IRQHandler+0xab0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a40      	ldr	r2, [pc, #256]	@ (80054b0 <HAL_DMA_IRQHandler+0xab4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3f      	ldr	r2, [pc, #252]	@ (80054b4 <HAL_DMA_IRQHandler+0xab8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3d      	ldr	r2, [pc, #244]	@ (80054b8 <HAL_DMA_IRQHandler+0xabc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x9d4>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3c      	ldr	r2, [pc, #240]	@ (80054bc <HAL_DMA_IRQHandler+0xac0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d101      	bne.n	80053d4 <HAL_DMA_IRQHandler+0x9d8>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <HAL_DMA_IRQHandler+0x9da>
 80053d4:	2300      	movs	r3, #0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 824f 	beq.w	800587a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2204      	movs	r2, #4
 80053ee:	409a      	lsls	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80dd 	beq.w	80055b4 <HAL_DMA_IRQHandler+0xbb8>
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80d7 	beq.w	80055b4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2204      	movs	r2, #4
 8005410:	409a      	lsls	r2, r3
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d059      	beq.n	80054d4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d14a      	bne.n	80054c0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8220 	beq.w	8005874 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800543c:	e21a      	b.n	8005874 <HAL_DMA_IRQHandler+0xe78>
 800543e:	bf00      	nop
 8005440:	40020010 	.word	0x40020010
 8005444:	40020028 	.word	0x40020028
 8005448:	40020040 	.word	0x40020040
 800544c:	40020058 	.word	0x40020058
 8005450:	40020070 	.word	0x40020070
 8005454:	40020088 	.word	0x40020088
 8005458:	400200a0 	.word	0x400200a0
 800545c:	400200b8 	.word	0x400200b8
 8005460:	40020410 	.word	0x40020410
 8005464:	40020428 	.word	0x40020428
 8005468:	40020440 	.word	0x40020440
 800546c:	40020458 	.word	0x40020458
 8005470:	40020470 	.word	0x40020470
 8005474:	40020488 	.word	0x40020488
 8005478:	400204a0 	.word	0x400204a0
 800547c:	400204b8 	.word	0x400204b8
 8005480:	48022c08 	.word	0x48022c08
 8005484:	48022c1c 	.word	0x48022c1c
 8005488:	48022c30 	.word	0x48022c30
 800548c:	48022c44 	.word	0x48022c44
 8005490:	48022c58 	.word	0x48022c58
 8005494:	48022c6c 	.word	0x48022c6c
 8005498:	48022c80 	.word	0x48022c80
 800549c:	48022c94 	.word	0x48022c94
 80054a0:	58025408 	.word	0x58025408
 80054a4:	5802541c 	.word	0x5802541c
 80054a8:	58025430 	.word	0x58025430
 80054ac:	58025444 	.word	0x58025444
 80054b0:	58025458 	.word	0x58025458
 80054b4:	5802546c 	.word	0x5802546c
 80054b8:	58025480 	.word	0x58025480
 80054bc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 81d5 	beq.w	8005874 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d2:	e1cf      	b.n	8005874 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d160      	bne.n	80055a0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a7f      	ldr	r2, [pc, #508]	@ (80056e0 <HAL_DMA_IRQHandler+0xce4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d04a      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a7d      	ldr	r2, [pc, #500]	@ (80056e4 <HAL_DMA_IRQHandler+0xce8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d045      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a7c      	ldr	r2, [pc, #496]	@ (80056e8 <HAL_DMA_IRQHandler+0xcec>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d040      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a7a      	ldr	r2, [pc, #488]	@ (80056ec <HAL_DMA_IRQHandler+0xcf0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d03b      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a79      	ldr	r2, [pc, #484]	@ (80056f0 <HAL_DMA_IRQHandler+0xcf4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d036      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a77      	ldr	r2, [pc, #476]	@ (80056f4 <HAL_DMA_IRQHandler+0xcf8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d031      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a76      	ldr	r2, [pc, #472]	@ (80056f8 <HAL_DMA_IRQHandler+0xcfc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d02c      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a74      	ldr	r2, [pc, #464]	@ (80056fc <HAL_DMA_IRQHandler+0xd00>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d027      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a73      	ldr	r2, [pc, #460]	@ (8005700 <HAL_DMA_IRQHandler+0xd04>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d022      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a71      	ldr	r2, [pc, #452]	@ (8005704 <HAL_DMA_IRQHandler+0xd08>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01d      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a70      	ldr	r2, [pc, #448]	@ (8005708 <HAL_DMA_IRQHandler+0xd0c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d018      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6e      	ldr	r2, [pc, #440]	@ (800570c <HAL_DMA_IRQHandler+0xd10>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a6d      	ldr	r2, [pc, #436]	@ (8005710 <HAL_DMA_IRQHandler+0xd14>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00e      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a6b      	ldr	r2, [pc, #428]	@ (8005714 <HAL_DMA_IRQHandler+0xd18>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6a      	ldr	r2, [pc, #424]	@ (8005718 <HAL_DMA_IRQHandler+0xd1c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_DMA_IRQHandler+0xb82>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a68      	ldr	r2, [pc, #416]	@ (800571c <HAL_DMA_IRQHandler+0xd20>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <HAL_DMA_IRQHandler+0xb94>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0208 	bic.w	r2, r2, #8
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e007      	b.n	80055a0 <HAL_DMA_IRQHandler+0xba4>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0204 	bic.w	r2, r2, #4
 800559e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8165 	beq.w	8005874 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055b2:	e15f      	b.n	8005874 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2202      	movs	r2, #2
 80055be:	409a      	lsls	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80c5 	beq.w	8005754 <HAL_DMA_IRQHandler+0xd58>
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80bf 	beq.w	8005754 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2202      	movs	r2, #2
 80055e0:	409a      	lsls	r2, r3
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d018      	beq.n	8005622 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 813a 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800560c:	e134      	b.n	8005878 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8130 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005620:	e12a      	b.n	8005878 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	f040 8089 	bne.w	8005740 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2b      	ldr	r2, [pc, #172]	@ (80056e0 <HAL_DMA_IRQHandler+0xce4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d04a      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a29      	ldr	r2, [pc, #164]	@ (80056e4 <HAL_DMA_IRQHandler+0xce8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d045      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a28      	ldr	r2, [pc, #160]	@ (80056e8 <HAL_DMA_IRQHandler+0xcec>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d040      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a26      	ldr	r2, [pc, #152]	@ (80056ec <HAL_DMA_IRQHandler+0xcf0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d03b      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a25      	ldr	r2, [pc, #148]	@ (80056f0 <HAL_DMA_IRQHandler+0xcf4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d036      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a23      	ldr	r2, [pc, #140]	@ (80056f4 <HAL_DMA_IRQHandler+0xcf8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d031      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a22      	ldr	r2, [pc, #136]	@ (80056f8 <HAL_DMA_IRQHandler+0xcfc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d02c      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a20      	ldr	r2, [pc, #128]	@ (80056fc <HAL_DMA_IRQHandler+0xd00>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d027      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1f      	ldr	r2, [pc, #124]	@ (8005700 <HAL_DMA_IRQHandler+0xd04>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1d      	ldr	r2, [pc, #116]	@ (8005704 <HAL_DMA_IRQHandler+0xd08>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1c      	ldr	r2, [pc, #112]	@ (8005708 <HAL_DMA_IRQHandler+0xd0c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1a      	ldr	r2, [pc, #104]	@ (800570c <HAL_DMA_IRQHandler+0xd10>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a19      	ldr	r2, [pc, #100]	@ (8005710 <HAL_DMA_IRQHandler+0xd14>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a17      	ldr	r2, [pc, #92]	@ (8005714 <HAL_DMA_IRQHandler+0xd18>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a16      	ldr	r2, [pc, #88]	@ (8005718 <HAL_DMA_IRQHandler+0xd1c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_IRQHandler+0xcd2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a14      	ldr	r2, [pc, #80]	@ (800571c <HAL_DMA_IRQHandler+0xd20>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d128      	bne.n	8005720 <HAL_DMA_IRQHandler+0xd24>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0214 	bic.w	r2, r2, #20
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e027      	b.n	8005730 <HAL_DMA_IRQHandler+0xd34>
 80056e0:	40020010 	.word	0x40020010
 80056e4:	40020028 	.word	0x40020028
 80056e8:	40020040 	.word	0x40020040
 80056ec:	40020058 	.word	0x40020058
 80056f0:	40020070 	.word	0x40020070
 80056f4:	40020088 	.word	0x40020088
 80056f8:	400200a0 	.word	0x400200a0
 80056fc:	400200b8 	.word	0x400200b8
 8005700:	40020410 	.word	0x40020410
 8005704:	40020428 	.word	0x40020428
 8005708:	40020440 	.word	0x40020440
 800570c:	40020458 	.word	0x40020458
 8005710:	40020470 	.word	0x40020470
 8005714:	40020488 	.word	0x40020488
 8005718:	400204a0 	.word	0x400204a0
 800571c:	400204b8 	.word	0x400204b8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 020a 	bic.w	r2, r2, #10
 800572e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8097 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005752:	e091      	b.n	8005878 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	2208      	movs	r2, #8
 800575e:	409a      	lsls	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8088 	beq.w	800587a <HAL_DMA_IRQHandler+0xe7e>
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8082 	beq.w	800587a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a41      	ldr	r2, [pc, #260]	@ (8005880 <HAL_DMA_IRQHandler+0xe84>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d04a      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a3f      	ldr	r2, [pc, #252]	@ (8005884 <HAL_DMA_IRQHandler+0xe88>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d045      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a3e      	ldr	r2, [pc, #248]	@ (8005888 <HAL_DMA_IRQHandler+0xe8c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d040      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a3c      	ldr	r2, [pc, #240]	@ (800588c <HAL_DMA_IRQHandler+0xe90>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d03b      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005890 <HAL_DMA_IRQHandler+0xe94>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d036      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a39      	ldr	r2, [pc, #228]	@ (8005894 <HAL_DMA_IRQHandler+0xe98>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d031      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a38      	ldr	r2, [pc, #224]	@ (8005898 <HAL_DMA_IRQHandler+0xe9c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d02c      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a36      	ldr	r2, [pc, #216]	@ (800589c <HAL_DMA_IRQHandler+0xea0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d027      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a35      	ldr	r2, [pc, #212]	@ (80058a0 <HAL_DMA_IRQHandler+0xea4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d022      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a33      	ldr	r2, [pc, #204]	@ (80058a4 <HAL_DMA_IRQHandler+0xea8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01d      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a32      	ldr	r2, [pc, #200]	@ (80058a8 <HAL_DMA_IRQHandler+0xeac>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d018      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a30      	ldr	r2, [pc, #192]	@ (80058ac <HAL_DMA_IRQHandler+0xeb0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <HAL_DMA_IRQHandler+0xeb4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a2d      	ldr	r2, [pc, #180]	@ (80058b4 <HAL_DMA_IRQHandler+0xeb8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a2c      	ldr	r2, [pc, #176]	@ (80058b8 <HAL_DMA_IRQHandler+0xebc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_DMA_IRQHandler+0xe1a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2a      	ldr	r2, [pc, #168]	@ (80058bc <HAL_DMA_IRQHandler+0xec0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d108      	bne.n	8005828 <HAL_DMA_IRQHandler+0xe2c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 021c 	bic.w	r2, r2, #28
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e007      	b.n	8005838 <HAL_DMA_IRQHandler+0xe3c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 020e 	bic.w	r2, r2, #14
 8005836:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2201      	movs	r2, #1
 8005842:	409a      	lsls	r2, r3
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
 800586e:	e004      	b.n	800587a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005870:	bf00      	nop
 8005872:	e002      	b.n	800587a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005874:	bf00      	nop
 8005876:	e000      	b.n	800587a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005878:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800587a:	3728      	adds	r7, #40	@ 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40020010 	.word	0x40020010
 8005884:	40020028 	.word	0x40020028
 8005888:	40020040 	.word	0x40020040
 800588c:	40020058 	.word	0x40020058
 8005890:	40020070 	.word	0x40020070
 8005894:	40020088 	.word	0x40020088
 8005898:	400200a0 	.word	0x400200a0
 800589c:	400200b8 	.word	0x400200b8
 80058a0:	40020410 	.word	0x40020410
 80058a4:	40020428 	.word	0x40020428
 80058a8:	40020440 	.word	0x40020440
 80058ac:	40020458 	.word	0x40020458
 80058b0:	40020470 	.word	0x40020470
 80058b4:	40020488 	.word	0x40020488
 80058b8:	400204a0 	.word	0x400204a0
 80058bc:	400204b8 	.word	0x400204b8

080058c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a7f      	ldr	r2, [pc, #508]	@ (8005adc <DMA_SetConfig+0x21c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d072      	beq.n	80059ca <DMA_SetConfig+0x10a>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ae0 <DMA_SetConfig+0x220>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d06d      	beq.n	80059ca <DMA_SetConfig+0x10a>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ae4 <DMA_SetConfig+0x224>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d068      	beq.n	80059ca <DMA_SetConfig+0x10a>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a7a      	ldr	r2, [pc, #488]	@ (8005ae8 <DMA_SetConfig+0x228>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d063      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a79      	ldr	r2, [pc, #484]	@ (8005aec <DMA_SetConfig+0x22c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d05e      	beq.n	80059ca <DMA_SetConfig+0x10a>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a77      	ldr	r2, [pc, #476]	@ (8005af0 <DMA_SetConfig+0x230>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d059      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a76      	ldr	r2, [pc, #472]	@ (8005af4 <DMA_SetConfig+0x234>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d054      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a74      	ldr	r2, [pc, #464]	@ (8005af8 <DMA_SetConfig+0x238>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d04f      	beq.n	80059ca <DMA_SetConfig+0x10a>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a73      	ldr	r2, [pc, #460]	@ (8005afc <DMA_SetConfig+0x23c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d04a      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a71      	ldr	r2, [pc, #452]	@ (8005b00 <DMA_SetConfig+0x240>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d045      	beq.n	80059ca <DMA_SetConfig+0x10a>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a70      	ldr	r2, [pc, #448]	@ (8005b04 <DMA_SetConfig+0x244>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d040      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a6e      	ldr	r2, [pc, #440]	@ (8005b08 <DMA_SetConfig+0x248>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d03b      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a6d      	ldr	r2, [pc, #436]	@ (8005b0c <DMA_SetConfig+0x24c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d036      	beq.n	80059ca <DMA_SetConfig+0x10a>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a6b      	ldr	r2, [pc, #428]	@ (8005b10 <DMA_SetConfig+0x250>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d031      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a6a      	ldr	r2, [pc, #424]	@ (8005b14 <DMA_SetConfig+0x254>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d02c      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a68      	ldr	r2, [pc, #416]	@ (8005b18 <DMA_SetConfig+0x258>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d027      	beq.n	80059ca <DMA_SetConfig+0x10a>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a67      	ldr	r2, [pc, #412]	@ (8005b1c <DMA_SetConfig+0x25c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a65      	ldr	r2, [pc, #404]	@ (8005b20 <DMA_SetConfig+0x260>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01d      	beq.n	80059ca <DMA_SetConfig+0x10a>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a64      	ldr	r2, [pc, #400]	@ (8005b24 <DMA_SetConfig+0x264>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <DMA_SetConfig+0x10a>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a62      	ldr	r2, [pc, #392]	@ (8005b28 <DMA_SetConfig+0x268>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <DMA_SetConfig+0x10a>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a61      	ldr	r2, [pc, #388]	@ (8005b2c <DMA_SetConfig+0x26c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <DMA_SetConfig+0x10a>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a5f      	ldr	r2, [pc, #380]	@ (8005b30 <DMA_SetConfig+0x270>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <DMA_SetConfig+0x10a>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005b34 <DMA_SetConfig+0x274>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <DMA_SetConfig+0x10a>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a5c      	ldr	r2, [pc, #368]	@ (8005b38 <DMA_SetConfig+0x278>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d101      	bne.n	80059ce <DMA_SetConfig+0x10e>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <DMA_SetConfig+0x110>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00d      	beq.n	80059f0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80059dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d004      	beq.n	80059f0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80059ee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a39      	ldr	r2, [pc, #228]	@ (8005adc <DMA_SetConfig+0x21c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d04a      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a38      	ldr	r2, [pc, #224]	@ (8005ae0 <DMA_SetConfig+0x220>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d045      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a36      	ldr	r2, [pc, #216]	@ (8005ae4 <DMA_SetConfig+0x224>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d040      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a35      	ldr	r2, [pc, #212]	@ (8005ae8 <DMA_SetConfig+0x228>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d03b      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a33      	ldr	r2, [pc, #204]	@ (8005aec <DMA_SetConfig+0x22c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d036      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a32      	ldr	r2, [pc, #200]	@ (8005af0 <DMA_SetConfig+0x230>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d031      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a30      	ldr	r2, [pc, #192]	@ (8005af4 <DMA_SetConfig+0x234>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02c      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005af8 <DMA_SetConfig+0x238>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d027      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a2d      	ldr	r2, [pc, #180]	@ (8005afc <DMA_SetConfig+0x23c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d022      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b00 <DMA_SetConfig+0x240>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01d      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2a      	ldr	r2, [pc, #168]	@ (8005b04 <DMA_SetConfig+0x244>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a29      	ldr	r2, [pc, #164]	@ (8005b08 <DMA_SetConfig+0x248>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a27      	ldr	r2, [pc, #156]	@ (8005b0c <DMA_SetConfig+0x24c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a26      	ldr	r2, [pc, #152]	@ (8005b10 <DMA_SetConfig+0x250>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a24      	ldr	r2, [pc, #144]	@ (8005b14 <DMA_SetConfig+0x254>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <DMA_SetConfig+0x1d0>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a23      	ldr	r2, [pc, #140]	@ (8005b18 <DMA_SetConfig+0x258>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <DMA_SetConfig+0x1d4>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <DMA_SetConfig+0x1d6>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d059      	beq.n	8005b4e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	223f      	movs	r2, #63	@ 0x3f
 8005aa4:	409a      	lsls	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ab8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b40      	cmp	r3, #64	@ 0x40
 8005ac8:	d138      	bne.n	8005b3c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ada:	e0ae      	b.n	8005c3a <DMA_SetConfig+0x37a>
 8005adc:	40020010 	.word	0x40020010
 8005ae0:	40020028 	.word	0x40020028
 8005ae4:	40020040 	.word	0x40020040
 8005ae8:	40020058 	.word	0x40020058
 8005aec:	40020070 	.word	0x40020070
 8005af0:	40020088 	.word	0x40020088
 8005af4:	400200a0 	.word	0x400200a0
 8005af8:	400200b8 	.word	0x400200b8
 8005afc:	40020410 	.word	0x40020410
 8005b00:	40020428 	.word	0x40020428
 8005b04:	40020440 	.word	0x40020440
 8005b08:	40020458 	.word	0x40020458
 8005b0c:	40020470 	.word	0x40020470
 8005b10:	40020488 	.word	0x40020488
 8005b14:	400204a0 	.word	0x400204a0
 8005b18:	400204b8 	.word	0x400204b8
 8005b1c:	58025408 	.word	0x58025408
 8005b20:	5802541c 	.word	0x5802541c
 8005b24:	58025430 	.word	0x58025430
 8005b28:	58025444 	.word	0x58025444
 8005b2c:	58025458 	.word	0x58025458
 8005b30:	5802546c 	.word	0x5802546c
 8005b34:	58025480 	.word	0x58025480
 8005b38:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]
}
 8005b4c:	e075      	b.n	8005c3a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a3d      	ldr	r2, [pc, #244]	@ (8005c48 <DMA_SetConfig+0x388>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04a      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8005c4c <DMA_SetConfig+0x38c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d045      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3a      	ldr	r2, [pc, #232]	@ (8005c50 <DMA_SetConfig+0x390>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d040      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a38      	ldr	r2, [pc, #224]	@ (8005c54 <DMA_SetConfig+0x394>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d03b      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a37      	ldr	r2, [pc, #220]	@ (8005c58 <DMA_SetConfig+0x398>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d036      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a35      	ldr	r2, [pc, #212]	@ (8005c5c <DMA_SetConfig+0x39c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d031      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a34      	ldr	r2, [pc, #208]	@ (8005c60 <DMA_SetConfig+0x3a0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02c      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a32      	ldr	r2, [pc, #200]	@ (8005c64 <DMA_SetConfig+0x3a4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d027      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a31      	ldr	r2, [pc, #196]	@ (8005c68 <DMA_SetConfig+0x3a8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a2f      	ldr	r2, [pc, #188]	@ (8005c6c <DMA_SetConfig+0x3ac>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01d      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8005c70 <DMA_SetConfig+0x3b0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c74 <DMA_SetConfig+0x3b4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2b      	ldr	r2, [pc, #172]	@ (8005c78 <DMA_SetConfig+0x3b8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a29      	ldr	r2, [pc, #164]	@ (8005c7c <DMA_SetConfig+0x3bc>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a28      	ldr	r2, [pc, #160]	@ (8005c80 <DMA_SetConfig+0x3c0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <DMA_SetConfig+0x32e>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a26      	ldr	r2, [pc, #152]	@ (8005c84 <DMA_SetConfig+0x3c4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <DMA_SetConfig+0x332>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <DMA_SetConfig+0x334>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d020      	beq.n	8005c3a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2201      	movs	r2, #1
 8005c02:	409a      	lsls	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b40      	cmp	r3, #64	@ 0x40
 8005c16:	d108      	bne.n	8005c2a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	60da      	str	r2, [r3, #12]
}
 8005c28:	e007      	b.n	8005c3a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	48022c08 	.word	0x48022c08
 8005c4c:	48022c1c 	.word	0x48022c1c
 8005c50:	48022c30 	.word	0x48022c30
 8005c54:	48022c44 	.word	0x48022c44
 8005c58:	48022c58 	.word	0x48022c58
 8005c5c:	48022c6c 	.word	0x48022c6c
 8005c60:	48022c80 	.word	0x48022c80
 8005c64:	48022c94 	.word	0x48022c94
 8005c68:	58025408 	.word	0x58025408
 8005c6c:	5802541c 	.word	0x5802541c
 8005c70:	58025430 	.word	0x58025430
 8005c74:	58025444 	.word	0x58025444
 8005c78:	58025458 	.word	0x58025458
 8005c7c:	5802546c 	.word	0x5802546c
 8005c80:	58025480 	.word	0x58025480
 8005c84:	58025494 	.word	0x58025494

08005c88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a42      	ldr	r2, [pc, #264]	@ (8005da0 <DMA_CalcBaseAndBitshift+0x118>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d04a      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a41      	ldr	r2, [pc, #260]	@ (8005da4 <DMA_CalcBaseAndBitshift+0x11c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d045      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a3f      	ldr	r2, [pc, #252]	@ (8005da8 <DMA_CalcBaseAndBitshift+0x120>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d040      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8005dac <DMA_CalcBaseAndBitshift+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d03b      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8005db0 <DMA_CalcBaseAndBitshift+0x128>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d036      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a3b      	ldr	r2, [pc, #236]	@ (8005db4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d031      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a39      	ldr	r2, [pc, #228]	@ (8005db8 <DMA_CalcBaseAndBitshift+0x130>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d02c      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a38      	ldr	r2, [pc, #224]	@ (8005dbc <DMA_CalcBaseAndBitshift+0x134>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d027      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a36      	ldr	r2, [pc, #216]	@ (8005dc0 <DMA_CalcBaseAndBitshift+0x138>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d022      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a35      	ldr	r2, [pc, #212]	@ (8005dc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d01d      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a33      	ldr	r2, [pc, #204]	@ (8005dc8 <DMA_CalcBaseAndBitshift+0x140>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d018      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a32      	ldr	r2, [pc, #200]	@ (8005dcc <DMA_CalcBaseAndBitshift+0x144>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a30      	ldr	r2, [pc, #192]	@ (8005dd0 <DMA_CalcBaseAndBitshift+0x148>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00e      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2f      	ldr	r2, [pc, #188]	@ (8005dd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <DMA_CalcBaseAndBitshift+0x150>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <DMA_CalcBaseAndBitshift+0xa8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005ddc <DMA_CalcBaseAndBitshift+0x154>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d101      	bne.n	8005d34 <DMA_CalcBaseAndBitshift+0xac>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <DMA_CalcBaseAndBitshift+0xae>
 8005d34:	2300      	movs	r3, #0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d024      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	3b10      	subs	r3, #16
 8005d42:	4a27      	ldr	r2, [pc, #156]	@ (8005de0 <DMA_CalcBaseAndBitshift+0x158>)
 8005d44:	fba2 2303 	umull	r2, r3, r2, r3
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	4a24      	ldr	r2, [pc, #144]	@ (8005de4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005d54:	5cd3      	ldrb	r3, [r2, r3]
 8005d56:	461a      	mov	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d908      	bls.n	8005d74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	4b1f      	ldr	r3, [pc, #124]	@ (8005de8 <DMA_CalcBaseAndBitshift+0x160>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d72:	e00d      	b.n	8005d90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005de8 <DMA_CalcBaseAndBitshift+0x160>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d82:	e005      	b.n	8005d90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	40020010 	.word	0x40020010
 8005da4:	40020028 	.word	0x40020028
 8005da8:	40020040 	.word	0x40020040
 8005dac:	40020058 	.word	0x40020058
 8005db0:	40020070 	.word	0x40020070
 8005db4:	40020088 	.word	0x40020088
 8005db8:	400200a0 	.word	0x400200a0
 8005dbc:	400200b8 	.word	0x400200b8
 8005dc0:	40020410 	.word	0x40020410
 8005dc4:	40020428 	.word	0x40020428
 8005dc8:	40020440 	.word	0x40020440
 8005dcc:	40020458 	.word	0x40020458
 8005dd0:	40020470 	.word	0x40020470
 8005dd4:	40020488 	.word	0x40020488
 8005dd8:	400204a0 	.word	0x400204a0
 8005ddc:	400204b8 	.word	0x400204b8
 8005de0:	aaaaaaab 	.word	0xaaaaaaab
 8005de4:	0800baf4 	.word	0x0800baf4
 8005de8:	fffffc00 	.word	0xfffffc00

08005dec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d120      	bne.n	8005e42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d858      	bhi.n	8005eba <DMA_CheckFifoParam+0xce>
 8005e08:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <DMA_CheckFifoParam+0x24>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e33 	.word	0x08005e33
 8005e18:	08005e21 	.word	0x08005e21
 8005e1c:	08005ebb 	.word	0x08005ebb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d048      	beq.n	8005ebe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e30:	e045      	b.n	8005ebe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e3a:	d142      	bne.n	8005ec2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e40:	e03f      	b.n	8005ec2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e4a:	d123      	bne.n	8005e94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d838      	bhi.n	8005ec6 <DMA_CheckFifoParam+0xda>
 8005e54:	a201      	add	r2, pc, #4	@ (adr r2, 8005e5c <DMA_CheckFifoParam+0x70>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e6d 	.word	0x08005e6d
 8005e60:	08005e73 	.word	0x08005e73
 8005e64:	08005e6d 	.word	0x08005e6d
 8005e68:	08005e85 	.word	0x08005e85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73fb      	strb	r3, [r7, #15]
        break;
 8005e70:	e030      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d025      	beq.n	8005eca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e82:	e022      	b.n	8005eca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e8c:	d11f      	bne.n	8005ece <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e92:	e01c      	b.n	8005ece <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d902      	bls.n	8005ea2 <DMA_CheckFifoParam+0xb6>
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d003      	beq.n	8005ea8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ea0:	e018      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ea6:	e015      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00e      	beq.n	8005ed2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8005eb8:	e00b      	b.n	8005ed2 <DMA_CheckFifoParam+0xe6>
        break;
 8005eba:	bf00      	nop
 8005ebc:	e00a      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ebe:	bf00      	nop
 8005ec0:	e008      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ec2:	bf00      	nop
 8005ec4:	e006      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ec6:	bf00      	nop
 8005ec8:	e004      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <DMA_CheckFifoParam+0xe8>
    break;
 8005ed2:	bf00      	nop
    }
  }

  return status;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop

08005ee4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a38      	ldr	r2, [pc, #224]	@ (8005fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d022      	beq.n	8005f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a36      	ldr	r2, [pc, #216]	@ (8005fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01d      	beq.n	8005f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a35      	ldr	r2, [pc, #212]	@ (8005fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d018      	beq.n	8005f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a33      	ldr	r2, [pc, #204]	@ (8005fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a32      	ldr	r2, [pc, #200]	@ (8005fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00e      	beq.n	8005f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a30      	ldr	r2, [pc, #192]	@ (8005fec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d009      	beq.n	8005f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2f      	ldr	r2, [pc, #188]	@ (8005ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d004      	beq.n	8005f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d101      	bne.n	8005f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f46:	2300      	movs	r3, #0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01a      	beq.n	8005f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	3b08      	subs	r3, #8
 8005f54:	4a28      	ldr	r2, [pc, #160]	@ (8005ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4b26      	ldr	r3, [pc, #152]	@ (8005ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a24      	ldr	r2, [pc, #144]	@ (8006000 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005f70:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	2201      	movs	r2, #1
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005f80:	e024      	b.n	8005fcc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	3b10      	subs	r3, #16
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006004 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4a1c      	ldr	r2, [pc, #112]	@ (8006008 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d806      	bhi.n	8005faa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800600c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d902      	bls.n	8005faa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4b18      	ldr	r3, [pc, #96]	@ (8006010 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a16      	ldr	r2, [pc, #88]	@ (8006014 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005fbc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fcc:	bf00      	nop
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	58025408 	.word	0x58025408
 8005fdc:	5802541c 	.word	0x5802541c
 8005fe0:	58025430 	.word	0x58025430
 8005fe4:	58025444 	.word	0x58025444
 8005fe8:	58025458 	.word	0x58025458
 8005fec:	5802546c 	.word	0x5802546c
 8005ff0:	58025480 	.word	0x58025480
 8005ff4:	58025494 	.word	0x58025494
 8005ff8:	cccccccd 	.word	0xcccccccd
 8005ffc:	16009600 	.word	0x16009600
 8006000:	58025880 	.word	0x58025880
 8006004:	aaaaaaab 	.word	0xaaaaaaab
 8006008:	400204b8 	.word	0x400204b8
 800600c:	4002040f 	.word	0x4002040f
 8006010:	10008200 	.word	0x10008200
 8006014:	40020880 	.word	0x40020880

08006018 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d04a      	beq.n	80060c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d847      	bhi.n	80060c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a25      	ldr	r2, [pc, #148]	@ (80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d022      	beq.n	8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a24      	ldr	r2, [pc, #144]	@ (80060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d01d      	beq.n	8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a22      	ldr	r2, [pc, #136]	@ (80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a21      	ldr	r2, [pc, #132]	@ (80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1f      	ldr	r2, [pc, #124]	@ (80060e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1e      	ldr	r2, [pc, #120]	@ (80060e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1c      	ldr	r2, [pc, #112]	@ (80060e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1b      	ldr	r2, [pc, #108]	@ (80060ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4b17      	ldr	r3, [pc, #92]	@ (80060f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80060a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80060a2:	e009      	b.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4b14      	ldr	r3, [pc, #80]	@ (80060f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a11      	ldr	r2, [pc, #68]	@ (80060fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80060b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	2201      	movs	r2, #1
 80060be:	409a      	lsls	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	58025408 	.word	0x58025408
 80060d4:	5802541c 	.word	0x5802541c
 80060d8:	58025430 	.word	0x58025430
 80060dc:	58025444 	.word	0x58025444
 80060e0:	58025458 	.word	0x58025458
 80060e4:	5802546c 	.word	0x5802546c
 80060e8:	58025480 	.word	0x58025480
 80060ec:	58025494 	.word	0x58025494
 80060f0:	1600963f 	.word	0x1600963f
 80060f4:	58025940 	.word	0x58025940
 80060f8:	1000823f 	.word	0x1000823f
 80060fc:	40020940 	.word	0x40020940

08006100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	@ 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800610e:	4b89      	ldr	r3, [pc, #548]	@ (8006334 <HAL_GPIO_Init+0x234>)
 8006110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006112:	e194      	b.n	800643e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	2101      	movs	r1, #1
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	4013      	ands	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8186 	beq.w	8006438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	2b01      	cmp	r3, #1
 8006136:	d005      	beq.n	8006144 <HAL_GPIO_Init+0x44>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d130      	bne.n	80061a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	2203      	movs	r2, #3
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4313      	orrs	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800617a:	2201      	movs	r2, #1
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	43db      	mvns	r3, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4013      	ands	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	f003 0201 	and.w	r2, r3, #1
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4313      	orrs	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d017      	beq.n	80061e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	2203      	movs	r2, #3
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43db      	mvns	r3, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4013      	ands	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d123      	bne.n	8006236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	08da      	lsrs	r2, r3, #3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3208      	adds	r2, #8
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	220f      	movs	r2, #15
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4313      	orrs	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	08da      	lsrs	r2, r3, #3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3208      	adds	r2, #8
 8006230:	69b9      	ldr	r1, [r7, #24]
 8006232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	2203      	movs	r2, #3
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f003 0203 	and.w	r2, r3, #3
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4313      	orrs	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80e0 	beq.w	8006438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006278:	4b2f      	ldr	r3, [pc, #188]	@ (8006338 <HAL_GPIO_Init+0x238>)
 800627a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800627e:	4a2e      	ldr	r2, [pc, #184]	@ (8006338 <HAL_GPIO_Init+0x238>)
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006288:	4b2b      	ldr	r3, [pc, #172]	@ (8006338 <HAL_GPIO_Init+0x238>)
 800628a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006296:	4a29      	ldr	r2, [pc, #164]	@ (800633c <HAL_GPIO_Init+0x23c>)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	3302      	adds	r3, #2
 800629e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	220f      	movs	r2, #15
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4013      	ands	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a20      	ldr	r2, [pc, #128]	@ (8006340 <HAL_GPIO_Init+0x240>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d052      	beq.n	8006368 <HAL_GPIO_Init+0x268>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_GPIO_Init+0x244>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d031      	beq.n	800632e <HAL_GPIO_Init+0x22e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006348 <HAL_GPIO_Init+0x248>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02b      	beq.n	800632a <HAL_GPIO_Init+0x22a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1d      	ldr	r2, [pc, #116]	@ (800634c <HAL_GPIO_Init+0x24c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d025      	beq.n	8006326 <HAL_GPIO_Init+0x226>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006350 <HAL_GPIO_Init+0x250>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d01f      	beq.n	8006322 <HAL_GPIO_Init+0x222>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006354 <HAL_GPIO_Init+0x254>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d019      	beq.n	800631e <HAL_GPIO_Init+0x21e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006358 <HAL_GPIO_Init+0x258>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_GPIO_Init+0x21a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a19      	ldr	r2, [pc, #100]	@ (800635c <HAL_GPIO_Init+0x25c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00d      	beq.n	8006316 <HAL_GPIO_Init+0x216>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a18      	ldr	r2, [pc, #96]	@ (8006360 <HAL_GPIO_Init+0x260>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d007      	beq.n	8006312 <HAL_GPIO_Init+0x212>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a17      	ldr	r2, [pc, #92]	@ (8006364 <HAL_GPIO_Init+0x264>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d101      	bne.n	800630e <HAL_GPIO_Init+0x20e>
 800630a:	2309      	movs	r3, #9
 800630c:	e02d      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800630e:	230a      	movs	r3, #10
 8006310:	e02b      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006312:	2308      	movs	r3, #8
 8006314:	e029      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006316:	2307      	movs	r3, #7
 8006318:	e027      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800631a:	2306      	movs	r3, #6
 800631c:	e025      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800631e:	2305      	movs	r3, #5
 8006320:	e023      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006322:	2304      	movs	r3, #4
 8006324:	e021      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006326:	2303      	movs	r3, #3
 8006328:	e01f      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800632a:	2302      	movs	r3, #2
 800632c:	e01d      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800632e:	2301      	movs	r3, #1
 8006330:	e01b      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006332:	bf00      	nop
 8006334:	58000080 	.word	0x58000080
 8006338:	58024400 	.word	0x58024400
 800633c:	58000400 	.word	0x58000400
 8006340:	58020000 	.word	0x58020000
 8006344:	58020400 	.word	0x58020400
 8006348:	58020800 	.word	0x58020800
 800634c:	58020c00 	.word	0x58020c00
 8006350:	58021000 	.word	0x58021000
 8006354:	58021400 	.word	0x58021400
 8006358:	58021800 	.word	0x58021800
 800635c:	58021c00 	.word	0x58021c00
 8006360:	58022000 	.word	0x58022000
 8006364:	58022400 	.word	0x58022400
 8006368:	2300      	movs	r3, #0
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	f002 0203 	and.w	r2, r2, #3
 8006370:	0092      	lsls	r2, r2, #2
 8006372:	4093      	lsls	r3, r2
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800637a:	4938      	ldr	r1, [pc, #224]	@ (800645c <HAL_GPIO_Init+0x35c>)
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	089b      	lsrs	r3, r3, #2
 8006380:	3302      	adds	r3, #2
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80063ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4013      	ands	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80063dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	43db      	mvns	r3, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4013      	ands	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	fa22 f303 	lsr.w	r3, r2, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f ae63 	bne.w	8006114 <HAL_GPIO_Init+0x14>
  }
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	3724      	adds	r7, #36	@ 0x24
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	58000400 	.word	0x58000400

08006460 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a04      	ldr	r2, [pc, #16]	@ (800647c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800646a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800646e:	6013      	str	r3, [r2, #0]
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	58024800 	.word	0x58024800

08006480 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006488:	4b29      	ldr	r3, [pc, #164]	@ (8006530 <HAL_PWREx_ConfigSupply+0xb0>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	2b06      	cmp	r3, #6
 8006492:	d00a      	beq.n	80064aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006494:	4b26      	ldr	r3, [pc, #152]	@ (8006530 <HAL_PWREx_ConfigSupply+0xb0>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d001      	beq.n	80064a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e040      	b.n	8006528 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e03e      	b.n	8006528 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064aa:	4b21      	ldr	r3, [pc, #132]	@ (8006530 <HAL_PWREx_ConfigSupply+0xb0>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80064b2:	491f      	ldr	r1, [pc, #124]	@ (8006530 <HAL_PWREx_ConfigSupply+0xb0>)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064ba:	f7fa fe95 	bl	80011e8 <HAL_GetTick>
 80064be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064c0:	e009      	b.n	80064d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064c2:	f7fa fe91 	bl	80011e8 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064d0:	d901      	bls.n	80064d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e028      	b.n	8006528 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064d6:	4b16      	ldr	r3, [pc, #88]	@ (8006530 <HAL_PWREx_ConfigSupply+0xb0>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e2:	d1ee      	bne.n	80064c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b1e      	cmp	r3, #30
 80064e8:	d008      	beq.n	80064fc <HAL_PWREx_ConfigSupply+0x7c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80064ee:	d005      	beq.n	80064fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b1d      	cmp	r3, #29
 80064f4:	d002      	beq.n	80064fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80064fa:	d114      	bne.n	8006526 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80064fc:	f7fa fe74 	bl	80011e8 <HAL_GetTick>
 8006500:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006502:	e009      	b.n	8006518 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006504:	f7fa fe70 	bl	80011e8 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006512:	d901      	bls.n	8006518 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e007      	b.n	8006528 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <HAL_PWREx_ConfigSupply+0xb0>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006524:	d1ee      	bne.n	8006504 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	58024800 	.word	0x58024800

08006534 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08c      	sub	sp, #48	@ 0x30
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d102      	bne.n	8006548 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f000 bc1f 	b.w	8006d86 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80b3 	beq.w	80066bc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006556:	4b95      	ldr	r3, [pc, #596]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800655e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006560:	4b92      	ldr	r3, [pc, #584]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006568:	2b10      	cmp	r3, #16
 800656a:	d007      	beq.n	800657c <HAL_RCC_OscConfig+0x48>
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	2b18      	cmp	r3, #24
 8006570:	d112      	bne.n	8006598 <HAL_RCC_OscConfig+0x64>
 8006572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d10d      	bne.n	8006598 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800657c:	4b8b      	ldr	r3, [pc, #556]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8098 	beq.w	80066ba <HAL_RCC_OscConfig+0x186>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 8093 	bne.w	80066ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e3f6      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a0:	d106      	bne.n	80065b0 <HAL_RCC_OscConfig+0x7c>
 80065a2:	4b82      	ldr	r3, [pc, #520]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a81      	ldr	r2, [pc, #516]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e058      	b.n	8006662 <HAL_RCC_OscConfig+0x12e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d112      	bne.n	80065de <HAL_RCC_OscConfig+0xaa>
 80065b8:	4b7c      	ldr	r3, [pc, #496]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a7b      	ldr	r2, [pc, #492]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	4b79      	ldr	r3, [pc, #484]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a78      	ldr	r2, [pc, #480]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065ca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	4b76      	ldr	r3, [pc, #472]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a75      	ldr	r2, [pc, #468]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	e041      	b.n	8006662 <HAL_RCC_OscConfig+0x12e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065e6:	d112      	bne.n	800660e <HAL_RCC_OscConfig+0xda>
 80065e8:	4b70      	ldr	r3, [pc, #448]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6f      	ldr	r2, [pc, #444]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4b6d      	ldr	r3, [pc, #436]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a6c      	ldr	r2, [pc, #432]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80065fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	4b6a      	ldr	r3, [pc, #424]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a69      	ldr	r2, [pc, #420]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	e029      	b.n	8006662 <HAL_RCC_OscConfig+0x12e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006616:	d112      	bne.n	800663e <HAL_RCC_OscConfig+0x10a>
 8006618:	4b64      	ldr	r3, [pc, #400]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a63      	ldr	r2, [pc, #396]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800661e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	4b61      	ldr	r3, [pc, #388]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a60      	ldr	r2, [pc, #384]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800662a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	4b5e      	ldr	r3, [pc, #376]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a5d      	ldr	r2, [pc, #372]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	e011      	b.n	8006662 <HAL_RCC_OscConfig+0x12e>
 800663e:	4b5b      	ldr	r3, [pc, #364]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a5a      	ldr	r2, [pc, #360]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	4b58      	ldr	r3, [pc, #352]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a57      	ldr	r2, [pc, #348]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006650:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	4b55      	ldr	r3, [pc, #340]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a54      	ldr	r2, [pc, #336]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800665c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006660:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d013      	beq.n	8006692 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666a:	f7fa fdbd 	bl	80011e8 <HAL_GetTick>
 800666e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006672:	f7fa fdb9 	bl	80011e8 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b64      	cmp	r3, #100	@ 0x64
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e380      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006684:	4b49      	ldr	r3, [pc, #292]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x13e>
 8006690:	e014      	b.n	80066bc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fa fda9 	bl	80011e8 <HAL_GetTick>
 8006696:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800669a:	f7fa fda5 	bl	80011e8 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b64      	cmp	r3, #100	@ 0x64
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e36c      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066ac:	4b3f      	ldr	r3, [pc, #252]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f0      	bne.n	800669a <HAL_RCC_OscConfig+0x166>
 80066b8:	e000      	b.n	80066bc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 808c 	beq.w	80067e2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ca:	4b38      	ldr	r3, [pc, #224]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066d4:	4b35      	ldr	r3, [pc, #212]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80066d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <HAL_RCC_OscConfig+0x1bc>
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2b18      	cmp	r3, #24
 80066e4:	d137      	bne.n	8006756 <HAL_RCC_OscConfig+0x222>
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d132      	bne.n	8006756 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066f0:	4b2e      	ldr	r3, [pc, #184]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_OscConfig+0x1d4>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e33e      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006708:	4b28      	ldr	r3, [pc, #160]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f023 0219 	bic.w	r2, r3, #25
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4925      	ldr	r1, [pc, #148]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671a:	f7fa fd65 	bl	80011e8 <HAL_GetTick>
 800671e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006722:	f7fa fd61 	bl	80011e8 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e328      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006734:	4b1d      	ldr	r3, [pc, #116]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006740:	4b1a      	ldr	r3, [pc, #104]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	4917      	ldr	r1, [pc, #92]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006750:	4313      	orrs	r3, r2
 8006752:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006754:	e045      	b.n	80067e2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d028      	beq.n	80067b0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800675e:	4b13      	ldr	r3, [pc, #76]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f023 0219 	bic.w	r2, r3, #25
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	4910      	ldr	r1, [pc, #64]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800676c:	4313      	orrs	r3, r2
 800676e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fa fd3a 	bl	80011e8 <HAL_GetTick>
 8006774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006778:	f7fa fd36 	bl	80011e8 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e2fd      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800678a:	4b08      	ldr	r3, [pc, #32]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006796:	4b05      	ldr	r3, [pc, #20]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	061b      	lsls	r3, r3, #24
 80067a4:	4901      	ldr	r1, [pc, #4]	@ (80067ac <HAL_RCC_OscConfig+0x278>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	604b      	str	r3, [r1, #4]
 80067aa:	e01a      	b.n	80067e2 <HAL_RCC_OscConfig+0x2ae>
 80067ac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067b0:	4b97      	ldr	r3, [pc, #604]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a96      	ldr	r2, [pc, #600]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80067b6:	f023 0301 	bic.w	r3, r3, #1
 80067ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067bc:	f7fa fd14 	bl	80011e8 <HAL_GetTick>
 80067c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c4:	f7fa fd10 	bl	80011e8 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e2d7      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067d6:	4b8e      	ldr	r3, [pc, #568]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f0      	bne.n	80067c4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0310 	and.w	r3, r3, #16
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d06a      	beq.n	80068c4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ee:	4b88      	ldr	r3, [pc, #544]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067f8:	4b85      	ldr	r3, [pc, #532]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d007      	beq.n	8006814 <HAL_RCC_OscConfig+0x2e0>
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b18      	cmp	r3, #24
 8006808:	d11b      	bne.n	8006842 <HAL_RCC_OscConfig+0x30e>
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d116      	bne.n	8006842 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006814:	4b7e      	ldr	r3, [pc, #504]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <HAL_RCC_OscConfig+0x2f8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	2b80      	cmp	r3, #128	@ 0x80
 8006826:	d001      	beq.n	800682c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e2ac      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800682c:	4b78      	ldr	r3, [pc, #480]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	061b      	lsls	r3, r3, #24
 800683a:	4975      	ldr	r1, [pc, #468]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 800683c:	4313      	orrs	r3, r2
 800683e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006840:	e040      	b.n	80068c4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d023      	beq.n	8006892 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800684a:	4b71      	ldr	r3, [pc, #452]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a70      	ldr	r2, [pc, #448]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006856:	f7fa fcc7 	bl	80011e8 <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800685e:	f7fa fcc3 	bl	80011e8 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e28a      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006870:	4b67      	ldr	r3, [pc, #412]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800687c:	4b64      	ldr	r3, [pc, #400]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	4961      	ldr	r1, [pc, #388]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 800688c:	4313      	orrs	r3, r2
 800688e:	60cb      	str	r3, [r1, #12]
 8006890:	e018      	b.n	80068c4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006892:	4b5f      	ldr	r3, [pc, #380]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a5e      	ldr	r2, [pc, #376]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800689c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689e:	f7fa fca3 	bl	80011e8 <HAL_GetTick>
 80068a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068a6:	f7fa fc9f 	bl	80011e8 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e266      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068b8:	4b55      	ldr	r3, [pc, #340]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f0      	bne.n	80068a6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d036      	beq.n	800693e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d019      	beq.n	800690c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80068da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068dc:	4a4c      	ldr	r2, [pc, #304]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e4:	f7fa fc80 	bl	80011e8 <HAL_GetTick>
 80068e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ec:	f7fa fc7c 	bl	80011e8 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e243      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068fe:	4b44      	ldr	r3, [pc, #272]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f0      	beq.n	80068ec <HAL_RCC_OscConfig+0x3b8>
 800690a:	e018      	b.n	800693e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800690c:	4b40      	ldr	r3, [pc, #256]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 800690e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006910:	4a3f      	ldr	r2, [pc, #252]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fa fc66 	bl	80011e8 <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006920:	f7fa fc62 	bl	80011e8 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e229      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006932:	4b37      	ldr	r3, [pc, #220]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f0      	bne.n	8006920 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d036      	beq.n	80069b8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d019      	beq.n	8006986 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006952:	4b2f      	ldr	r3, [pc, #188]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2e      	ldr	r2, [pc, #184]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006958:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800695c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800695e:	f7fa fc43 	bl	80011e8 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006966:	f7fa fc3f 	bl	80011e8 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e206      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006978:	4b25      	ldr	r3, [pc, #148]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCC_OscConfig+0x432>
 8006984:	e018      	b.n	80069b8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006986:	4b22      	ldr	r3, [pc, #136]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a21      	ldr	r2, [pc, #132]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 800698c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006990:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006992:	f7fa fc29 	bl	80011e8 <HAL_GetTick>
 8006996:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800699a:	f7fa fc25 	bl	80011e8 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e1ec      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069ac:	4b18      	ldr	r3, [pc, #96]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f0      	bne.n	800699a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 80af 	beq.w	8006b24 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069c6:	4b13      	ldr	r3, [pc, #76]	@ (8006a14 <HAL_RCC_OscConfig+0x4e0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a12      	ldr	r2, [pc, #72]	@ (8006a14 <HAL_RCC_OscConfig+0x4e0>)
 80069cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069d2:	f7fa fc09 	bl	80011e8 <HAL_GetTick>
 80069d6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069d8:	e008      	b.n	80069ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069da:	f7fa fc05 	bl	80011e8 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b64      	cmp	r3, #100	@ 0x64
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e1cc      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ec:	4b09      	ldr	r3, [pc, #36]	@ (8006a14 <HAL_RCC_OscConfig+0x4e0>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0f0      	beq.n	80069da <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10b      	bne.n	8006a18 <HAL_RCC_OscConfig+0x4e4>
 8006a00:	4b03      	ldr	r3, [pc, #12]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a04:	4a02      	ldr	r2, [pc, #8]	@ (8006a10 <HAL_RCC_OscConfig+0x4dc>)
 8006a06:	f043 0301 	orr.w	r3, r3, #1
 8006a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a0c:	e05b      	b.n	8006ac6 <HAL_RCC_OscConfig+0x592>
 8006a0e:	bf00      	nop
 8006a10:	58024400 	.word	0x58024400
 8006a14:	58024800 	.word	0x58024800
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d112      	bne.n	8006a46 <HAL_RCC_OscConfig+0x512>
 8006a20:	4b9d      	ldr	r3, [pc, #628]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a24:	4a9c      	ldr	r2, [pc, #624]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a2c:	4b9a      	ldr	r3, [pc, #616]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a30:	4a99      	ldr	r2, [pc, #612]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a38:	4b97      	ldr	r3, [pc, #604]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3c:	4a96      	ldr	r2, [pc, #600]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a3e:	f023 0304 	bic.w	r3, r3, #4
 8006a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a44:	e03f      	b.n	8006ac6 <HAL_RCC_OscConfig+0x592>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d112      	bne.n	8006a74 <HAL_RCC_OscConfig+0x540>
 8006a4e:	4b92      	ldr	r3, [pc, #584]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a52:	4a91      	ldr	r2, [pc, #580]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a54:	f043 0304 	orr.w	r3, r3, #4
 8006a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a5a:	4b8f      	ldr	r3, [pc, #572]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	4a8e      	ldr	r2, [pc, #568]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a66:	4b8c      	ldr	r3, [pc, #560]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6a:	4a8b      	ldr	r2, [pc, #556]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a72:	e028      	b.n	8006ac6 <HAL_RCC_OscConfig+0x592>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b85      	cmp	r3, #133	@ 0x85
 8006a7a:	d112      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x56e>
 8006a7c:	4b86      	ldr	r3, [pc, #536]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a80:	4a85      	ldr	r2, [pc, #532]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a82:	f043 0304 	orr.w	r3, r3, #4
 8006a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a88:	4b83      	ldr	r3, [pc, #524]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a8c:	4a82      	ldr	r2, [pc, #520]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a94:	4b80      	ldr	r3, [pc, #512]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a98:	4a7f      	ldr	r2, [pc, #508]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aa0:	e011      	b.n	8006ac6 <HAL_RCC_OscConfig+0x592>
 8006aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aae:	4b7a      	ldr	r3, [pc, #488]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab2:	4a79      	ldr	r2, [pc, #484]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006ab4:	f023 0304 	bic.w	r3, r3, #4
 8006ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aba:	4b77      	ldr	r3, [pc, #476]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006abe:	4a76      	ldr	r2, [pc, #472]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d015      	beq.n	8006afa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ace:	f7fa fb8b 	bl	80011e8 <HAL_GetTick>
 8006ad2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ad4:	e00a      	b.n	8006aec <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad6:	f7fa fb87 	bl	80011e8 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e14c      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aec:	4b6a      	ldr	r3, [pc, #424]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0ee      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x5a2>
 8006af8:	e014      	b.n	8006b24 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afa:	f7fa fb75 	bl	80011e8 <HAL_GetTick>
 8006afe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b00:	e00a      	b.n	8006b18 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b02:	f7fa fb71 	bl	80011e8 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e136      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b18:	4b5f      	ldr	r3, [pc, #380]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1ee      	bne.n	8006b02 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 812b 	beq.w	8006d84 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b36:	2b18      	cmp	r3, #24
 8006b38:	f000 80bb 	beq.w	8006cb2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	f040 8095 	bne.w	8006c70 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b46:	4b54      	ldr	r3, [pc, #336]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a53      	ldr	r2, [pc, #332]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b52:	f7fa fb49 	bl	80011e8 <HAL_GetTick>
 8006b56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b58:	e008      	b.n	8006b6c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5a:	f7fa fb45 	bl	80011e8 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e10c      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f0      	bne.n	8006b5a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b78:	4b47      	ldr	r3, [pc, #284]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006b7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b7c:	4b47      	ldr	r3, [pc, #284]	@ (8006c9c <HAL_RCC_OscConfig+0x768>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b88:	0112      	lsls	r2, r2, #4
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	4942      	ldr	r1, [pc, #264]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b96:	3b01      	subs	r3, #1
 8006b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	025b      	lsls	r3, r3, #9
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	3b01      	subs	r3, #1
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	061b      	lsls	r3, r3, #24
 8006bbe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bc2:	4935      	ldr	r1, [pc, #212]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006bc8:	4b33      	ldr	r3, [pc, #204]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	4a32      	ldr	r2, [pc, #200]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bd4:	4b30      	ldr	r3, [pc, #192]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bd8:	4b31      	ldr	r3, [pc, #196]	@ (8006ca0 <HAL_RCC_OscConfig+0x76c>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006be0:	00d2      	lsls	r2, r2, #3
 8006be2:	492d      	ldr	r1, [pc, #180]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006be8:	4b2b      	ldr	r3, [pc, #172]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	f023 020c 	bic.w	r2, r3, #12
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf4:	4928      	ldr	r1, [pc, #160]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bfa:	4b27      	ldr	r3, [pc, #156]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	f023 0202 	bic.w	r2, r3, #2
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c06:	4924      	ldr	r1, [pc, #144]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c0c:	4b22      	ldr	r3, [pc, #136]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	4a21      	ldr	r2, [pc, #132]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c18:	4b1f      	ldr	r3, [pc, #124]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c24:	4b1c      	ldr	r3, [pc, #112]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	4a1b      	ldr	r2, [pc, #108]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006c30:	4b19      	ldr	r3, [pc, #100]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	4a18      	ldr	r2, [pc, #96]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c3c:	4b16      	ldr	r3, [pc, #88]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a15      	ldr	r2, [pc, #84]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c48:	f7fa face 	bl	80011e8 <HAL_GetTick>
 8006c4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c50:	f7fa faca 	bl	80011e8 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e091      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c62:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0x71c>
 8006c6e:	e089      	b.n	8006d84 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c70:	4b09      	ldr	r3, [pc, #36]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a08      	ldr	r2, [pc, #32]	@ (8006c98 <HAL_RCC_OscConfig+0x764>)
 8006c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7c:	f7fa fab4 	bl	80011e8 <HAL_GetTick>
 8006c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c82:	e00f      	b.n	8006ca4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c84:	f7fa fab0 	bl	80011e8 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d908      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e077      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	fffffc0c 	.word	0xfffffc0c
 8006ca0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e9      	bne.n	8006c84 <HAL_RCC_OscConfig+0x750>
 8006cb0:	e068      	b.n	8006d84 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006cb2:	4b37      	ldr	r3, [pc, #220]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cb8:	4b35      	ldr	r3, [pc, #212]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d031      	beq.n	8006d2a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f003 0203 	and.w	r2, r3, #3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d12a      	bne.n	8006d2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	091b      	lsrs	r3, r3, #4
 8006cd8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d122      	bne.n	8006d2a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cee:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d11a      	bne.n	8006d2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	0a5b      	lsrs	r3, r3, #9
 8006cf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d00:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d111      	bne.n	8006d2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	0c1b      	lsrs	r3, r3, #16
 8006d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d108      	bne.n	8006d2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	0e1b      	lsrs	r3, r3, #24
 8006d1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d001      	beq.n	8006d2e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e02b      	b.n	8006d86 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d2e:	4b18      	ldr	r3, [pc, #96]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d32:	08db      	lsrs	r3, r3, #3
 8006d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d38:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d01f      	beq.n	8006d84 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006d44:	4b12      	ldr	r3, [pc, #72]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d50:	f7fa fa4a 	bl	80011e8 <HAL_GetTick>
 8006d54:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006d56:	bf00      	nop
 8006d58:	f7fa fa46 	bl	80011e8 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d0f9      	beq.n	8006d58 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d64:	4b0a      	ldr	r3, [pc, #40]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d68:	4b0a      	ldr	r3, [pc, #40]	@ (8006d94 <HAL_RCC_OscConfig+0x860>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006d70:	00d2      	lsls	r2, r2, #3
 8006d72:	4907      	ldr	r1, [pc, #28]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006d78:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	4a04      	ldr	r2, [pc, #16]	@ (8006d90 <HAL_RCC_OscConfig+0x85c>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3730      	adds	r7, #48	@ 0x30
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	ffff0007 	.word	0xffff0007

08006d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e19c      	b.n	80070e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dac:	4b8a      	ldr	r3, [pc, #552]	@ (8006fd8 <HAL_RCC_ClockConfig+0x240>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d910      	bls.n	8006ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dba:	4b87      	ldr	r3, [pc, #540]	@ (8006fd8 <HAL_RCC_ClockConfig+0x240>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f023 020f 	bic.w	r2, r3, #15
 8006dc2:	4985      	ldr	r1, [pc, #532]	@ (8006fd8 <HAL_RCC_ClockConfig+0x240>)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dca:	4b83      	ldr	r3, [pc, #524]	@ (8006fd8 <HAL_RCC_ClockConfig+0x240>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d001      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e184      	b.n	80070e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d010      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	4b7b      	ldr	r3, [pc, #492]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d908      	bls.n	8006e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006df8:	4b78      	ldr	r3, [pc, #480]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	4975      	ldr	r1, [pc, #468]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0308 	and.w	r3, r3, #8
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	4b70      	ldr	r3, [pc, #448]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d908      	bls.n	8006e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e26:	4b6d      	ldr	r3, [pc, #436]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	496a      	ldr	r1, [pc, #424]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d010      	beq.n	8006e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699a      	ldr	r2, [r3, #24]
 8006e48:	4b64      	ldr	r3, [pc, #400]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d908      	bls.n	8006e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e54:	4b61      	ldr	r3, [pc, #388]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	495e      	ldr	r1, [pc, #376]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d010      	beq.n	8006e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69da      	ldr	r2, [r3, #28]
 8006e76:	4b59      	ldr	r3, [pc, #356]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d908      	bls.n	8006e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e82:	4b56      	ldr	r3, [pc, #344]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	4953      	ldr	r1, [pc, #332]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d010      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d908      	bls.n	8006ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f023 020f 	bic.w	r2, r3, #15
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	4947      	ldr	r1, [pc, #284]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d055      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ece:	4b43      	ldr	r3, [pc, #268]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	4940      	ldr	r1, [pc, #256]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d107      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d121      	bne.n	8006f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e0f6      	b.n	80070e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d107      	bne.n	8006f10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f00:	4b36      	ldr	r3, [pc, #216]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d115      	bne.n	8006f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e0ea      	b.n	80070e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d107      	bne.n	8006f28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f18:	4b30      	ldr	r3, [pc, #192]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0de      	b.n	80070e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f28:	4b2c      	ldr	r3, [pc, #176]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e0d6      	b.n	80070e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f38:	4b28      	ldr	r3, [pc, #160]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f023 0207 	bic.w	r2, r3, #7
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4925      	ldr	r1, [pc, #148]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f4a:	f7fa f94d 	bl	80011e8 <HAL_GetTick>
 8006f4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f50:	e00a      	b.n	8006f68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f52:	f7fa f949 	bl	80011e8 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e0be      	b.n	80070e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f68:	4b1c      	ldr	r3, [pc, #112]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d1eb      	bne.n	8006f52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d010      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	4b14      	ldr	r3, [pc, #80]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d208      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f96:	4b11      	ldr	r3, [pc, #68]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f023 020f 	bic.w	r2, r3, #15
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	490e      	ldr	r1, [pc, #56]	@ (8006fdc <HAL_RCC_ClockConfig+0x244>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd8 <HAL_RCC_ClockConfig+0x240>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d214      	bcs.n	8006fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb6:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <HAL_RCC_ClockConfig+0x240>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 020f 	bic.w	r2, r3, #15
 8006fbe:	4906      	ldr	r1, [pc, #24]	@ (8006fd8 <HAL_RCC_ClockConfig+0x240>)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc6:	4b04      	ldr	r3, [pc, #16]	@ (8006fd8 <HAL_RCC_ClockConfig+0x240>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e086      	b.n	80070e6 <HAL_RCC_ClockConfig+0x34e>
 8006fd8:	52002000 	.word	0x52002000
 8006fdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d010      	beq.n	800700e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d208      	bcs.n	800700e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ffc:	4b3c      	ldr	r3, [pc, #240]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	4939      	ldr	r1, [pc, #228]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 800700a:	4313      	orrs	r3, r2
 800700c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b00      	cmp	r3, #0
 8007018:	d010      	beq.n	800703c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	4b34      	ldr	r3, [pc, #208]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007026:	429a      	cmp	r2, r3
 8007028:	d208      	bcs.n	800703c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800702a:	4b31      	ldr	r3, [pc, #196]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	492e      	ldr	r1, [pc, #184]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 8007038:	4313      	orrs	r3, r2
 800703a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	d010      	beq.n	800706a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699a      	ldr	r2, [r3, #24]
 800704c:	4b28      	ldr	r3, [pc, #160]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007054:	429a      	cmp	r2, r3
 8007056:	d208      	bcs.n	800706a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007058:	4b25      	ldr	r3, [pc, #148]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	4922      	ldr	r1, [pc, #136]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 8007066:	4313      	orrs	r3, r2
 8007068:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d010      	beq.n	8007098 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	4b1d      	ldr	r3, [pc, #116]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007082:	429a      	cmp	r2, r3
 8007084:	d208      	bcs.n	8007098 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007086:	4b1a      	ldr	r3, [pc, #104]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	4917      	ldr	r1, [pc, #92]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 8007094:	4313      	orrs	r3, r2
 8007096:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007098:	f000 f89e 	bl	80071d8 <HAL_RCC_GetSysClockFreq>
 800709c:	4602      	mov	r2, r0
 800709e:	4b14      	ldr	r3, [pc, #80]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	4912      	ldr	r1, [pc, #72]	@ (80070f4 <HAL_RCC_ClockConfig+0x35c>)
 80070aa:	5ccb      	ldrb	r3, [r1, r3]
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	fa22 f303 	lsr.w	r3, r2, r3
 80070b4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80070b6:	4b0e      	ldr	r3, [pc, #56]	@ (80070f0 <HAL_RCC_ClockConfig+0x358>)
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	4a0d      	ldr	r2, [pc, #52]	@ (80070f4 <HAL_RCC_ClockConfig+0x35c>)
 80070c0:	5cd3      	ldrb	r3, [r2, r3]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	4a0a      	ldr	r2, [pc, #40]	@ (80070f8 <HAL_RCC_ClockConfig+0x360>)
 80070ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070d0:	4a0a      	ldr	r2, [pc, #40]	@ (80070fc <HAL_RCC_ClockConfig+0x364>)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80070d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <HAL_RCC_ClockConfig+0x368>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fa f83a 	bl	8001154 <HAL_InitTick>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	58024400 	.word	0x58024400
 80070f4:	0800bae4 	.word	0x0800bae4
 80070f8:	24000004 	.word	0x24000004
 80070fc:	24000000 	.word	0x24000000
 8007100:	24000008 	.word	0x24000008

08007104 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08c      	sub	sp, #48	@ 0x30
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d12a      	bne.n	800716c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007116:	4b2d      	ldr	r3, [pc, #180]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 8007118:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800711c:	4a2b      	ldr	r2, [pc, #172]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007126:	4b29      	ldr	r3, [pc, #164]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 8007128:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007134:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713a:	2302      	movs	r3, #2
 800713c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713e:	2303      	movs	r3, #3
 8007140:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007142:	2300      	movs	r3, #0
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007146:	2300      	movs	r3, #0
 8007148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800714a:	f107 031c 	add.w	r3, r7, #28
 800714e:	4619      	mov	r1, r3
 8007150:	481f      	ldr	r0, [pc, #124]	@ (80071d0 <HAL_RCC_MCOConfig+0xcc>)
 8007152:	f7fe ffd5 	bl	8006100 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007156:	4b1d      	ldr	r3, [pc, #116]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	430b      	orrs	r3, r1
 8007164:	4919      	ldr	r1, [pc, #100]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 8007166:	4313      	orrs	r3, r2
 8007168:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800716a:	e02a      	b.n	80071c2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800716c:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 800716e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007172:	4a16      	ldr	r2, [pc, #88]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 8007174:	f043 0304 	orr.w	r3, r3, #4
 8007178:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800717c:	4b13      	ldr	r3, [pc, #76]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 800717e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800718a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800718e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007190:	2302      	movs	r3, #2
 8007192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007194:	2303      	movs	r3, #3
 8007196:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007198:	2300      	movs	r3, #0
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800719c:	2300      	movs	r3, #0
 800719e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80071a0:	f107 031c 	add.w	r3, r7, #28
 80071a4:	4619      	mov	r1, r3
 80071a6:	480b      	ldr	r0, [pc, #44]	@ (80071d4 <HAL_RCC_MCOConfig+0xd0>)
 80071a8:	f7fe ffaa 	bl	8006100 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80071ac:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	01d9      	lsls	r1, r3, #7
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	430b      	orrs	r3, r1
 80071bc:	4903      	ldr	r1, [pc, #12]	@ (80071cc <HAL_RCC_MCOConfig+0xc8>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	610b      	str	r3, [r1, #16]
}
 80071c2:	bf00      	nop
 80071c4:	3730      	adds	r7, #48	@ 0x30
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	58024400 	.word	0x58024400
 80071d0:	58020000 	.word	0x58020000
 80071d4:	58020800 	.word	0x58020800

080071d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	b089      	sub	sp, #36	@ 0x24
 80071dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071de:	4bb3      	ldr	r3, [pc, #716]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071e6:	2b18      	cmp	r3, #24
 80071e8:	f200 8155 	bhi.w	8007496 <HAL_RCC_GetSysClockFreq+0x2be>
 80071ec:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007259 	.word	0x08007259
 80071f8:	08007497 	.word	0x08007497
 80071fc:	08007497 	.word	0x08007497
 8007200:	08007497 	.word	0x08007497
 8007204:	08007497 	.word	0x08007497
 8007208:	08007497 	.word	0x08007497
 800720c:	08007497 	.word	0x08007497
 8007210:	08007497 	.word	0x08007497
 8007214:	0800727f 	.word	0x0800727f
 8007218:	08007497 	.word	0x08007497
 800721c:	08007497 	.word	0x08007497
 8007220:	08007497 	.word	0x08007497
 8007224:	08007497 	.word	0x08007497
 8007228:	08007497 	.word	0x08007497
 800722c:	08007497 	.word	0x08007497
 8007230:	08007497 	.word	0x08007497
 8007234:	08007285 	.word	0x08007285
 8007238:	08007497 	.word	0x08007497
 800723c:	08007497 	.word	0x08007497
 8007240:	08007497 	.word	0x08007497
 8007244:	08007497 	.word	0x08007497
 8007248:	08007497 	.word	0x08007497
 800724c:	08007497 	.word	0x08007497
 8007250:	08007497 	.word	0x08007497
 8007254:	0800728b 	.word	0x0800728b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007258:	4b94      	ldr	r3, [pc, #592]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007264:	4b91      	ldr	r3, [pc, #580]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	08db      	lsrs	r3, r3, #3
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	4a90      	ldr	r2, [pc, #576]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
 8007274:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007276:	e111      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007278:	4b8d      	ldr	r3, [pc, #564]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800727a:	61bb      	str	r3, [r7, #24]
      break;
 800727c:	e10e      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800727e:	4b8d      	ldr	r3, [pc, #564]	@ (80074b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007280:	61bb      	str	r3, [r7, #24]
      break;
 8007282:	e10b      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007284:	4b8c      	ldr	r3, [pc, #560]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007286:	61bb      	str	r3, [r7, #24]
      break;
 8007288:	e108      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800728a:	4b88      	ldr	r3, [pc, #544]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800728c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007294:	4b85      	ldr	r3, [pc, #532]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007298:	091b      	lsrs	r3, r3, #4
 800729a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800729e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80072a0:	4b82      	ldr	r3, [pc, #520]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80072aa:	4b80      	ldr	r3, [pc, #512]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ae:	08db      	lsrs	r3, r3, #3
 80072b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80e1 	beq.w	8007490 <HAL_RCC_GetSysClockFreq+0x2b8>
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	f000 8083 	beq.w	80073dc <HAL_RCC_GetSysClockFreq+0x204>
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	f200 80a1 	bhi.w	8007420 <HAL_RCC_GetSysClockFreq+0x248>
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <HAL_RCC_GetSysClockFreq+0x114>
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d056      	beq.n	8007398 <HAL_RCC_GetSysClockFreq+0x1c0>
 80072ea:	e099      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ec:	4b6f      	ldr	r3, [pc, #444]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d02d      	beq.n	8007354 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072f8:	4b6c      	ldr	r3, [pc, #432]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	08db      	lsrs	r3, r3, #3
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	4a6b      	ldr	r2, [pc, #428]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b62      	ldr	r3, [pc, #392]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a02 	vldr	s12, [r7, #8]
 8007336:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80074bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007352:	e087      	b.n	8007464 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80074c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b51      	ldr	r3, [pc, #324]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a02 	vldr	s12, [r7, #8]
 800737a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80074bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007396:	e065      	b.n	8007464 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80074c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b40      	ldr	r3, [pc, #256]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80073be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80074bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073da:	e043      	b.n	8007464 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80074c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b2f      	ldr	r3, [pc, #188]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007402:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80074bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800741e:	e021      	b.n	8007464 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80074c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b1e      	ldr	r3, [pc, #120]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a02 	vldr	s12, [r7, #8]
 8007446:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80074bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007462:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007464:	4b11      	ldr	r3, [pc, #68]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007468:	0a5b      	lsrs	r3, r3, #9
 800746a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800746e:	3301      	adds	r3, #1
 8007470:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800747c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007488:	ee17 3a90 	vmov	r3, s15
 800748c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800748e:	e005      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	61bb      	str	r3, [r7, #24]
      break;
 8007494:	e002      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007496:	4b07      	ldr	r3, [pc, #28]	@ (80074b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007498:	61bb      	str	r3, [r7, #24]
      break;
 800749a:	bf00      	nop
  }

  return sysclockfreq;
 800749c:	69bb      	ldr	r3, [r7, #24]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3724      	adds	r7, #36	@ 0x24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	58024400 	.word	0x58024400
 80074b0:	03d09000 	.word	0x03d09000
 80074b4:	003d0900 	.word	0x003d0900
 80074b8:	007a1200 	.word	0x007a1200
 80074bc:	46000000 	.word	0x46000000
 80074c0:	4c742400 	.word	0x4c742400
 80074c4:	4a742400 	.word	0x4a742400
 80074c8:	4af42400 	.word	0x4af42400

080074cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80074d2:	f7ff fe81 	bl	80071d8 <HAL_RCC_GetSysClockFreq>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b10      	ldr	r3, [pc, #64]	@ (800751c <HAL_RCC_GetHCLKFreq+0x50>)
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	0a1b      	lsrs	r3, r3, #8
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	490f      	ldr	r1, [pc, #60]	@ (8007520 <HAL_RCC_GetHCLKFreq+0x54>)
 80074e4:	5ccb      	ldrb	r3, [r1, r3]
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	fa22 f303 	lsr.w	r3, r2, r3
 80074ee:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80074f0:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <HAL_RCC_GetHCLKFreq+0x50>)
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	4a09      	ldr	r2, [pc, #36]	@ (8007520 <HAL_RCC_GetHCLKFreq+0x54>)
 80074fa:	5cd3      	ldrb	r3, [r2, r3]
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	4a07      	ldr	r2, [pc, #28]	@ (8007524 <HAL_RCC_GetHCLKFreq+0x58>)
 8007508:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800750a:	4a07      	ldr	r2, [pc, #28]	@ (8007528 <HAL_RCC_GetHCLKFreq+0x5c>)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007510:	4b04      	ldr	r3, [pc, #16]	@ (8007524 <HAL_RCC_GetHCLKFreq+0x58>)
 8007512:	681b      	ldr	r3, [r3, #0]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	58024400 	.word	0x58024400
 8007520:	0800bae4 	.word	0x0800bae4
 8007524:	24000004 	.word	0x24000004
 8007528:	24000000 	.word	0x24000000

0800752c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007530:	f7ff ffcc 	bl	80074cc <HAL_RCC_GetHCLKFreq>
 8007534:	4602      	mov	r2, r0
 8007536:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	091b      	lsrs	r3, r3, #4
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	4904      	ldr	r1, [pc, #16]	@ (8007554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007542:	5ccb      	ldrb	r3, [r1, r3]
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800754c:	4618      	mov	r0, r3
 800754e:	bd80      	pop	{r7, pc}
 8007550:	58024400 	.word	0x58024400
 8007554:	0800bae4 	.word	0x0800bae4

08007558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800755c:	f7ff ffb6 	bl	80074cc <HAL_RCC_GetHCLKFreq>
 8007560:	4602      	mov	r2, r0
 8007562:	4b06      	ldr	r3, [pc, #24]	@ (800757c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	0a1b      	lsrs	r3, r3, #8
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	4904      	ldr	r1, [pc, #16]	@ (8007580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800756e:	5ccb      	ldrb	r3, [r1, r3]
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007578:	4618      	mov	r0, r3
 800757a:	bd80      	pop	{r7, pc}
 800757c:	58024400 	.word	0x58024400
 8007580:	0800bae4 	.word	0x0800bae4

08007584 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007588:	b0c8      	sub	sp, #288	@ 0x120
 800758a:	af00      	add	r7, sp, #0
 800758c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007590:	2300      	movs	r3, #0
 8007592:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007596:	2300      	movs	r3, #0
 8007598:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800759c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80075a8:	2500      	movs	r5, #0
 80075aa:	ea54 0305 	orrs.w	r3, r4, r5
 80075ae:	d049      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80075b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075ba:	d02f      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80075bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075c0:	d828      	bhi.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80075c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075c6:	d01a      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80075c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075cc:	d822      	bhi.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80075d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075d6:	d007      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075d8:	e01c      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075da:	4ba7      	ldr	r3, [pc, #668]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	4aa6      	ldr	r2, [pc, #664]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075e6:	e01a      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ec:	3308      	adds	r3, #8
 80075ee:	2102      	movs	r1, #2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f002 fac3 	bl	8009b7c <RCCEx_PLL2_Config>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075fc:	e00f      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007602:	3328      	adds	r3, #40	@ 0x28
 8007604:	2102      	movs	r1, #2
 8007606:	4618      	mov	r0, r3
 8007608:	f002 fb6a 	bl	8009ce0 <RCCEx_PLL3_Config>
 800760c:	4603      	mov	r3, r0
 800760e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007612:	e004      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800761a:	e000      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800761c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007626:	4b94      	ldr	r3, [pc, #592]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800762a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800762e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007634:	4a90      	ldr	r2, [pc, #576]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007636:	430b      	orrs	r3, r1
 8007638:	6513      	str	r3, [r2, #80]	@ 0x50
 800763a:	e003      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007640:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007650:	f04f 0900 	mov.w	r9, #0
 8007654:	ea58 0309 	orrs.w	r3, r8, r9
 8007658:	d047      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800765a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800765e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007660:	2b04      	cmp	r3, #4
 8007662:	d82a      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007664:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	08007681 	.word	0x08007681
 8007670:	0800768f 	.word	0x0800768f
 8007674:	080076a5 	.word	0x080076a5
 8007678:	080076c3 	.word	0x080076c3
 800767c:	080076c3 	.word	0x080076c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007680:	4b7d      	ldr	r3, [pc, #500]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007684:	4a7c      	ldr	r2, [pc, #496]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800768a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800768c:	e01a      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007692:	3308      	adds	r3, #8
 8007694:	2100      	movs	r1, #0
 8007696:	4618      	mov	r0, r3
 8007698:	f002 fa70 	bl	8009b7c <RCCEx_PLL2_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076a2:	e00f      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a8:	3328      	adds	r3, #40	@ 0x28
 80076aa:	2100      	movs	r1, #0
 80076ac:	4618      	mov	r0, r3
 80076ae:	f002 fb17 	bl	8009ce0 <RCCEx_PLL3_Config>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076b8:	e004      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076c0:	e000      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80076c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076cc:	4b6a      	ldr	r3, [pc, #424]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d0:	f023 0107 	bic.w	r1, r3, #7
 80076d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076da:	4a67      	ldr	r2, [pc, #412]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	6513      	str	r3, [r2, #80]	@ 0x50
 80076e0:	e003      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80076ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80076f6:	f04f 0b00 	mov.w	fp, #0
 80076fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80076fe:	d054      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007706:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800770a:	d036      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800770c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007710:	d82f      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007716:	d032      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800771c:	d829      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800771e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007720:	d02f      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007722:	2bc0      	cmp	r3, #192	@ 0xc0
 8007724:	d825      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007726:	2b80      	cmp	r3, #128	@ 0x80
 8007728:	d018      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800772a:	2b80      	cmp	r3, #128	@ 0x80
 800772c:	d821      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007732:	2b40      	cmp	r3, #64	@ 0x40
 8007734:	d007      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007736:	e01c      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007738:	4b4f      	ldr	r3, [pc, #316]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	4a4e      	ldr	r2, [pc, #312]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800773e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007744:	e01e      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800774a:	3308      	adds	r3, #8
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f002 fa14 	bl	8009b7c <RCCEx_PLL2_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800775a:	e013      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800775c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007760:	3328      	adds	r3, #40	@ 0x28
 8007762:	2100      	movs	r1, #0
 8007764:	4618      	mov	r0, r3
 8007766:	f002 fabb 	bl	8009ce0 <RCCEx_PLL3_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007770:	e008      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007778:	e004      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800777a:	bf00      	nop
 800777c:	e002      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800777e:	bf00      	nop
 8007780:	e000      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007784:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800778c:	4b3a      	ldr	r3, [pc, #232]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800778e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007790:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800779a:	4a37      	ldr	r2, [pc, #220]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800779c:	430b      	orrs	r3, r1
 800779e:	6513      	str	r3, [r2, #80]	@ 0x50
 80077a0:	e003      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80077aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80077b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077ba:	2300      	movs	r3, #0
 80077bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80077c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80077c4:	460b      	mov	r3, r1
 80077c6:	4313      	orrs	r3, r2
 80077c8:	d05c      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80077ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80077d4:	d03b      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80077d6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80077da:	d834      	bhi.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80077dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e0:	d037      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80077e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e6:	d82e      	bhi.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80077e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80077ec:	d033      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80077f2:	d828      	bhi.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80077f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f8:	d01a      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80077fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077fe:	d822      	bhi.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007808:	d007      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800780a:	e01c      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800780c:	4b1a      	ldr	r3, [pc, #104]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800780e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007810:	4a19      	ldr	r2, [pc, #100]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007818:	e01e      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800781a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800781e:	3308      	adds	r3, #8
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f002 f9aa 	bl	8009b7c <RCCEx_PLL2_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800782e:	e013      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007834:	3328      	adds	r3, #40	@ 0x28
 8007836:	2100      	movs	r1, #0
 8007838:	4618      	mov	r0, r3
 800783a:	f002 fa51 	bl	8009ce0 <RCCEx_PLL3_Config>
 800783e:	4603      	mov	r3, r0
 8007840:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007844:	e008      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800784c:	e004      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800784e:	bf00      	nop
 8007850:	e002      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007852:	bf00      	nop
 8007854:	e000      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10d      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007860:	4b05      	ldr	r3, [pc, #20]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007864:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800786c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800786e:	4a02      	ldr	r2, [pc, #8]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007870:	430b      	orrs	r3, r1
 8007872:	6513      	str	r3, [r2, #80]	@ 0x50
 8007874:	e006      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007876:	bf00      	nop
 8007878:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007880:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007890:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007894:	2300      	movs	r3, #0
 8007896:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800789a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800789e:	460b      	mov	r3, r1
 80078a0:	4313      	orrs	r3, r2
 80078a2:	d03a      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80078a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078aa:	2b30      	cmp	r3, #48	@ 0x30
 80078ac:	d01f      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80078ae:	2b30      	cmp	r3, #48	@ 0x30
 80078b0:	d819      	bhi.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d00c      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	d815      	bhi.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d019      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d111      	bne.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c2:	4bae      	ldr	r3, [pc, #696]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	4aad      	ldr	r2, [pc, #692]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80078ce:	e011      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078d4:	3308      	adds	r3, #8
 80078d6:	2102      	movs	r1, #2
 80078d8:	4618      	mov	r0, r3
 80078da:	f002 f94f 	bl	8009b7c <RCCEx_PLL2_Config>
 80078de:	4603      	mov	r3, r0
 80078e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80078e4:	e006      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078ec:	e002      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80078f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80078fc:	4b9f      	ldr	r3, [pc, #636]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007900:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800790a:	4a9c      	ldr	r2, [pc, #624]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800790c:	430b      	orrs	r3, r1
 800790e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007910:	e003      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007912:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007916:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800791a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007926:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800792a:	2300      	movs	r3, #0
 800792c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007930:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007934:	460b      	mov	r3, r1
 8007936:	4313      	orrs	r3, r2
 8007938:	d051      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800793a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800793e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007944:	d035      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800794a:	d82e      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800794c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007950:	d031      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007952:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007956:	d828      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800795c:	d01a      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800795e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007962:	d822      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800796c:	d007      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800796e:	e01c      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007970:	4b82      	ldr	r3, [pc, #520]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	4a81      	ldr	r2, [pc, #516]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800797a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800797c:	e01c      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007982:	3308      	adds	r3, #8
 8007984:	2100      	movs	r1, #0
 8007986:	4618      	mov	r0, r3
 8007988:	f002 f8f8 	bl	8009b7c <RCCEx_PLL2_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007992:	e011      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007998:	3328      	adds	r3, #40	@ 0x28
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f002 f99f 	bl	8009ce0 <RCCEx_PLL3_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079a8:	e006      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079b0:	e002      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80079b2:	bf00      	nop
 80079b4:	e000      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80079b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079c0:	4b6e      	ldr	r3, [pc, #440]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80079c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079ce:	4a6b      	ldr	r2, [pc, #428]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079d0:	430b      	orrs	r3, r1
 80079d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80079d4:	e003      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80079de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80079ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079ee:	2300      	movs	r3, #0
 80079f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80079f8:	460b      	mov	r3, r1
 80079fa:	4313      	orrs	r3, r2
 80079fc:	d053      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80079fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a08:	d033      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007a0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a0e:	d82c      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a14:	d02f      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007a16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a1a:	d826      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a20:	d02b      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007a22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a26:	d820      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a2c:	d012      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a32:	d81a      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d022      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a3c:	d115      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a42:	3308      	adds	r3, #8
 8007a44:	2101      	movs	r1, #1
 8007a46:	4618      	mov	r0, r3
 8007a48:	f002 f898 	bl	8009b7c <RCCEx_PLL2_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a52:	e015      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a58:	3328      	adds	r3, #40	@ 0x28
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f002 f93f 	bl	8009ce0 <RCCEx_PLL3_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a68:	e00a      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a70:	e006      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007a72:	bf00      	nop
 8007a74:	e004      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007a76:	bf00      	nop
 8007a78:	e002      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a88:	4b3c      	ldr	r3, [pc, #240]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a96:	4a39      	ldr	r2, [pc, #228]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a9c:	e003      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007aa2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007ab2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007abc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	d060      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ace:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007ad2:	d039      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007ad4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007ad8:	d832      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ade:	d035      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ae4:	d82c      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aea:	d031      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af0:	d826      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007af2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007af6:	d02d      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007af8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007afc:	d820      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b02:	d012      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b08:	d81a      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d024      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b12:	d115      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b18:	3308      	adds	r3, #8
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f002 f82d 	bl	8009b7c <RCCEx_PLL2_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b28:	e017      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b2e:	3328      	adds	r3, #40	@ 0x28
 8007b30:	2101      	movs	r1, #1
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 f8d4 	bl	8009ce0 <RCCEx_PLL3_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b3e:	e00c      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b46:	e008      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b48:	bf00      	nop
 8007b4a:	e006      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b4c:	bf00      	nop
 8007b4e:	e004      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b50:	bf00      	nop
 8007b52:	e002      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b54:	bf00      	nop
 8007b56:	e000      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10e      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b62:	4b06      	ldr	r3, [pc, #24]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b72:	4a02      	ldr	r2, [pc, #8]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b74:	430b      	orrs	r3, r1
 8007b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b78:	e006      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007b7a:	bf00      	nop
 8007b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007b94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	d037      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb8:	d816      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d018      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007bbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bc2:	d111      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc4:	4bc4      	ldr	r3, [pc, #784]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	4ac3      	ldr	r2, [pc, #780]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bd0:	e00f      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	2101      	movs	r1, #1
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 ffce 	bl	8009b7c <RCCEx_PLL2_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007be6:	e004      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007bee:	e000      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10a      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bfa:	4bb7      	ldr	r3, [pc, #732]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c08:	4ab3      	ldr	r2, [pc, #716]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c0e:	e003      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4313      	orrs	r3, r2
 8007c36:	d039      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d81c      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007c42:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c48:	08007c85 	.word	0x08007c85
 8007c4c:	08007c59 	.word	0x08007c59
 8007c50:	08007c67 	.word	0x08007c67
 8007c54:	08007c85 	.word	0x08007c85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c58:	4b9f      	ldr	r3, [pc, #636]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	4a9e      	ldr	r2, [pc, #632]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c64:	e00f      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 ff84 	bl	8009b7c <RCCEx_PLL2_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c7a:	e004      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c82:	e000      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c8e:	4b92      	ldr	r3, [pc, #584]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c92:	f023 0103 	bic.w	r1, r3, #3
 8007c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ca8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f000 8099 	beq.w	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cce:	4b83      	ldr	r3, [pc, #524]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a82      	ldr	r2, [pc, #520]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cda:	f7f9 fa85 	bl	80011e8 <HAL_GetTick>
 8007cde:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ce2:	e00b      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ce4:	f7f9 fa80 	bl	80011e8 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b64      	cmp	r3, #100	@ 0x64
 8007cf2:	d903      	bls.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cfa:	e005      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cfc:	4b77      	ldr	r3, [pc, #476]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0ed      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007d08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d173      	bne.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d10:	4b71      	ldr	r3, [pc, #452]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d1c:	4053      	eors	r3, r2
 8007d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d015      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d26:	4b6c      	ldr	r3, [pc, #432]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d32:	4b69      	ldr	r3, [pc, #420]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d36:	4a68      	ldr	r2, [pc, #416]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d3e:	4b66      	ldr	r3, [pc, #408]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d42:	4a65      	ldr	r2, [pc, #404]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d4a:	4a63      	ldr	r2, [pc, #396]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d5e:	d118      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d60:	f7f9 fa42 	bl	80011e8 <HAL_GetTick>
 8007d64:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d68:	e00d      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d6a:	f7f9 fa3d 	bl	80011e8 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007d74:	1ad2      	subs	r2, r2, r3
 8007d76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d903      	bls.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007d84:	e005      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d86:	4b54      	ldr	r3, [pc, #336]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0eb      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007d92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d129      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007daa:	d10e      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007dac:	4b4a      	ldr	r3, [pc, #296]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dbc:	091a      	lsrs	r2, r3, #4
 8007dbe:	4b48      	ldr	r3, [pc, #288]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	4a45      	ldr	r2, [pc, #276]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	6113      	str	r3, [r2, #16]
 8007dc8:	e005      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007dca:	4b43      	ldr	r3, [pc, #268]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	4a42      	ldr	r2, [pc, #264]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007dd4:	6113      	str	r3, [r2, #16]
 8007dd6:	4b40      	ldr	r3, [pc, #256]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dd8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de6:	4a3c      	ldr	r2, [pc, #240]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dec:	e008      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007df2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007df6:	e003      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	f002 0301 	and.w	r3, r2, #1
 8007e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e10:	2300      	movs	r3, #0
 8007e12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	f000 8090 	beq.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e2a:	2b28      	cmp	r3, #40	@ 0x28
 8007e2c:	d870      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007f19 	.word	0x08007f19
 8007e38:	08007f11 	.word	0x08007f11
 8007e3c:	08007f11 	.word	0x08007f11
 8007e40:	08007f11 	.word	0x08007f11
 8007e44:	08007f11 	.word	0x08007f11
 8007e48:	08007f11 	.word	0x08007f11
 8007e4c:	08007f11 	.word	0x08007f11
 8007e50:	08007f11 	.word	0x08007f11
 8007e54:	08007ee5 	.word	0x08007ee5
 8007e58:	08007f11 	.word	0x08007f11
 8007e5c:	08007f11 	.word	0x08007f11
 8007e60:	08007f11 	.word	0x08007f11
 8007e64:	08007f11 	.word	0x08007f11
 8007e68:	08007f11 	.word	0x08007f11
 8007e6c:	08007f11 	.word	0x08007f11
 8007e70:	08007f11 	.word	0x08007f11
 8007e74:	08007efb 	.word	0x08007efb
 8007e78:	08007f11 	.word	0x08007f11
 8007e7c:	08007f11 	.word	0x08007f11
 8007e80:	08007f11 	.word	0x08007f11
 8007e84:	08007f11 	.word	0x08007f11
 8007e88:	08007f11 	.word	0x08007f11
 8007e8c:	08007f11 	.word	0x08007f11
 8007e90:	08007f11 	.word	0x08007f11
 8007e94:	08007f19 	.word	0x08007f19
 8007e98:	08007f11 	.word	0x08007f11
 8007e9c:	08007f11 	.word	0x08007f11
 8007ea0:	08007f11 	.word	0x08007f11
 8007ea4:	08007f11 	.word	0x08007f11
 8007ea8:	08007f11 	.word	0x08007f11
 8007eac:	08007f11 	.word	0x08007f11
 8007eb0:	08007f11 	.word	0x08007f11
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007f11 	.word	0x08007f11
 8007ebc:	08007f11 	.word	0x08007f11
 8007ec0:	08007f11 	.word	0x08007f11
 8007ec4:	08007f11 	.word	0x08007f11
 8007ec8:	08007f11 	.word	0x08007f11
 8007ecc:	08007f11 	.word	0x08007f11
 8007ed0:	08007f11 	.word	0x08007f11
 8007ed4:	08007f19 	.word	0x08007f19
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	58024800 	.word	0x58024800
 8007ee0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee8:	3308      	adds	r3, #8
 8007eea:	2101      	movs	r1, #1
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fe45 	bl	8009b7c <RCCEx_PLL2_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ef8:	e00f      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efe:	3328      	adds	r3, #40	@ 0x28
 8007f00:	2101      	movs	r1, #1
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 feec 	bl	8009ce0 <RCCEx_PLL3_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f0e:	e004      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f16:	e000      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10b      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f22:	4bc0      	ldr	r3, [pc, #768]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f32:	4abc      	ldr	r2, [pc, #752]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f34:	430b      	orrs	r3, r1
 8007f36:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f38:	e003      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f002 0302 	and.w	r3, r2, #2
 8007f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f52:	2300      	movs	r3, #0
 8007f54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f58:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	d043      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	d824      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f74 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007fc1 	.word	0x08007fc1
 8007f78:	08007f8d 	.word	0x08007f8d
 8007f7c:	08007fa3 	.word	0x08007fa3
 8007f80:	08007fc1 	.word	0x08007fc1
 8007f84:	08007fc1 	.word	0x08007fc1
 8007f88:	08007fc1 	.word	0x08007fc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f90:	3308      	adds	r3, #8
 8007f92:	2101      	movs	r1, #1
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 fdf1 	bl	8009b7c <RCCEx_PLL2_Config>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fa0:	e00f      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa6:	3328      	adds	r3, #40	@ 0x28
 8007fa8:	2101      	movs	r1, #1
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 fe98 	bl	8009ce0 <RCCEx_PLL3_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fb6:	e004      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fbe:	e000      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10b      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fca:	4b96      	ldr	r3, [pc, #600]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fce:	f023 0107 	bic.w	r1, r3, #7
 8007fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fda:	4a92      	ldr	r2, [pc, #584]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fe0:	e003      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fe6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f002 0304 	and.w	r3, r2, #4
 8007ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008000:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008004:	460b      	mov	r3, r1
 8008006:	4313      	orrs	r3, r2
 8008008:	d043      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800800a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800800e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008012:	2b05      	cmp	r3, #5
 8008014:	d824      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008016:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008069 	.word	0x08008069
 8008020:	08008035 	.word	0x08008035
 8008024:	0800804b 	.word	0x0800804b
 8008028:	08008069 	.word	0x08008069
 800802c:	08008069 	.word	0x08008069
 8008030:	08008069 	.word	0x08008069
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008038:	3308      	adds	r3, #8
 800803a:	2101      	movs	r1, #1
 800803c:	4618      	mov	r0, r3
 800803e:	f001 fd9d 	bl	8009b7c <RCCEx_PLL2_Config>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008048:	e00f      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800804a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800804e:	3328      	adds	r3, #40	@ 0x28
 8008050:	2101      	movs	r1, #1
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fe44 	bl	8009ce0 <RCCEx_PLL3_Config>
 8008058:	4603      	mov	r3, r0
 800805a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800805e:	e004      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008066:	e000      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800806a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10b      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008072:	4b6c      	ldr	r3, [pc, #432]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008076:	f023 0107 	bic.w	r1, r3, #7
 800807a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800807e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008082:	4a68      	ldr	r2, [pc, #416]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008084:	430b      	orrs	r3, r1
 8008086:	6593      	str	r3, [r2, #88]	@ 0x58
 8008088:	e003      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800808e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f002 0320 	and.w	r3, r2, #32
 800809e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080a2:	2300      	movs	r3, #0
 80080a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080ac:	460b      	mov	r3, r1
 80080ae:	4313      	orrs	r3, r2
 80080b0:	d055      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080be:	d033      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80080c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080c4:	d82c      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80080c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ca:	d02f      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80080cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d0:	d826      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80080d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080d6:	d02b      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80080d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080dc:	d820      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80080de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e2:	d012      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80080e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e8:	d81a      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d022      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80080ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080f2:	d115      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f8:	3308      	adds	r3, #8
 80080fa:	2100      	movs	r1, #0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 fd3d 	bl	8009b7c <RCCEx_PLL2_Config>
 8008102:	4603      	mov	r3, r0
 8008104:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008108:	e015      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800810a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800810e:	3328      	adds	r3, #40	@ 0x28
 8008110:	2102      	movs	r1, #2
 8008112:	4618      	mov	r0, r3
 8008114:	f001 fde4 	bl	8009ce0 <RCCEx_PLL3_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800811e:	e00a      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008126:	e006      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008128:	bf00      	nop
 800812a:	e004      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800812c:	bf00      	nop
 800812e:	e002      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008130:	bf00      	nop
 8008132:	e000      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008136:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10b      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800813e:	4b39      	ldr	r3, [pc, #228]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008142:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800814a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800814e:	4a35      	ldr	r2, [pc, #212]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008150:	430b      	orrs	r3, r1
 8008152:	6553      	str	r3, [r2, #84]	@ 0x54
 8008154:	e003      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008156:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800815a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800816a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800816e:	2300      	movs	r3, #0
 8008170:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008174:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008178:	460b      	mov	r3, r1
 800817a:	4313      	orrs	r3, r2
 800817c:	d058      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800817e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008186:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800818a:	d033      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800818c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008190:	d82c      	bhi.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008196:	d02f      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800819c:	d826      	bhi.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800819e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081a2:	d02b      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80081a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081a8:	d820      	bhi.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80081aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ae:	d012      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80081b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081b4:	d81a      	bhi.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d022      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80081ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081be:	d115      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c4:	3308      	adds	r3, #8
 80081c6:	2100      	movs	r1, #0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f001 fcd7 	bl	8009b7c <RCCEx_PLL2_Config>
 80081ce:	4603      	mov	r3, r0
 80081d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081d4:	e015      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081da:	3328      	adds	r3, #40	@ 0x28
 80081dc:	2102      	movs	r1, #2
 80081de:	4618      	mov	r0, r3
 80081e0:	f001 fd7e 	bl	8009ce0 <RCCEx_PLL3_Config>
 80081e4:	4603      	mov	r3, r0
 80081e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081ea:	e00a      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081f2:	e006      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80081f4:	bf00      	nop
 80081f6:	e004      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80081f8:	bf00      	nop
 80081fa:	e002      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80081fc:	bf00      	nop
 80081fe:	e000      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008202:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10e      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800820a:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800820c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800820e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008216:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800821a:	4a02      	ldr	r2, [pc, #8]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800821c:	430b      	orrs	r3, r1
 800821e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008220:	e006      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008222:	bf00      	nop
 8008224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008228:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800822c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800823c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008240:	2300      	movs	r3, #0
 8008242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008246:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800824a:	460b      	mov	r3, r1
 800824c:	4313      	orrs	r3, r2
 800824e:	d055      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008254:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008258:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800825c:	d033      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800825e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008262:	d82c      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008268:	d02f      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800826a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800826e:	d826      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008270:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008274:	d02b      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008276:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800827a:	d820      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800827c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008280:	d012      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008282:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008286:	d81a      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d022      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800828c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008290:	d115      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008296:	3308      	adds	r3, #8
 8008298:	2100      	movs	r1, #0
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fc6e 	bl	8009b7c <RCCEx_PLL2_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082a6:	e015      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ac:	3328      	adds	r3, #40	@ 0x28
 80082ae:	2102      	movs	r1, #2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fd15 	bl	8009ce0 <RCCEx_PLL3_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082bc:	e00a      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082c4:	e006      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80082c6:	bf00      	nop
 80082c8:	e004      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80082ca:	bf00      	nop
 80082cc:	e002      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80082ce:	bf00      	nop
 80082d0:	e000      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80082d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10b      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082dc:	4ba1      	ldr	r3, [pc, #644]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80082e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80082ec:	4a9d      	ldr	r2, [pc, #628]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082ee:	430b      	orrs	r3, r1
 80082f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80082f2:	e003      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f002 0308 	and.w	r3, r2, #8
 8008308:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800830c:	2300      	movs	r3, #0
 800830e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008312:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008316:	460b      	mov	r3, r1
 8008318:	4313      	orrs	r3, r2
 800831a:	d01e      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800831c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008328:	d10c      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800832a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832e:	3328      	adds	r3, #40	@ 0x28
 8008330:	2102      	movs	r1, #2
 8008332:	4618      	mov	r0, r3
 8008334:	f001 fcd4 	bl	8009ce0 <RCCEx_PLL3_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008344:	4b87      	ldr	r3, [pc, #540]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008348:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800834c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008354:	4a83      	ldr	r2, [pc, #524]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008356:	430b      	orrs	r3, r1
 8008358:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800835a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f002 0310 	and.w	r3, r2, #16
 8008366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800836a:	2300      	movs	r3, #0
 800836c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008370:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008374:	460b      	mov	r3, r1
 8008376:	4313      	orrs	r3, r2
 8008378:	d01e      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800837a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008386:	d10c      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800838c:	3328      	adds	r3, #40	@ 0x28
 800838e:	2102      	movs	r1, #2
 8008390:	4618      	mov	r0, r3
 8008392:	f001 fca5 	bl	8009ce0 <RCCEx_PLL3_Config>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083a2:	4b70      	ldr	r3, [pc, #448]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80083a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083b2:	4a6c      	ldr	r2, [pc, #432]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80083b4:	430b      	orrs	r3, r1
 80083b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083c8:	2300      	movs	r3, #0
 80083ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80083d2:	460b      	mov	r3, r1
 80083d4:	4313      	orrs	r3, r2
 80083d6:	d03e      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80083d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80083e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083e4:	d022      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80083e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ea:	d81b      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80083f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f4:	d00b      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80083f6:	e015      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083fc:	3308      	adds	r3, #8
 80083fe:	2100      	movs	r1, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f001 fbbb 	bl	8009b7c <RCCEx_PLL2_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800840c:	e00f      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800840e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008412:	3328      	adds	r3, #40	@ 0x28
 8008414:	2102      	movs	r1, #2
 8008416:	4618      	mov	r0, r3
 8008418:	f001 fc62 	bl	8009ce0 <RCCEx_PLL3_Config>
 800841c:	4603      	mov	r3, r0
 800841e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008422:	e004      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800842a:	e000      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800842c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800842e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008436:	4b4b      	ldr	r3, [pc, #300]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800843a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800843e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008446:	4a47      	ldr	r2, [pc, #284]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008448:	430b      	orrs	r3, r1
 800844a:	6593      	str	r3, [r2, #88]	@ 0x58
 800844c:	e003      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008452:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008462:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008464:	2300      	movs	r3, #0
 8008466:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008468:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800846c:	460b      	mov	r3, r1
 800846e:	4313      	orrs	r3, r2
 8008470:	d03b      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800847a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800847e:	d01f      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008480:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008484:	d818      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800848a:	d003      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800848c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008490:	d007      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008492:	e011      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008494:	4b33      	ldr	r3, [pc, #204]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008498:	4a32      	ldr	r2, [pc, #200]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800849a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800849e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084a0:	e00f      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a6:	3328      	adds	r3, #40	@ 0x28
 80084a8:	2101      	movs	r1, #1
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fc18 	bl	8009ce0 <RCCEx_PLL3_Config>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80084b6:	e004      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084be:	e000      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80084c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084ca:	4b26      	ldr	r3, [pc, #152]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80084cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084da:	4a22      	ldr	r2, [pc, #136]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80084dc:	430b      	orrs	r3, r1
 80084de:	6553      	str	r3, [r2, #84]	@ 0x54
 80084e0:	e003      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80084f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80084f8:	2300      	movs	r3, #0
 80084fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80084fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008500:	460b      	mov	r3, r1
 8008502:	4313      	orrs	r3, r2
 8008504:	d034      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008514:	d007      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008516:	e011      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008518:	4b12      	ldr	r3, [pc, #72]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800851a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851c:	4a11      	ldr	r2, [pc, #68]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800851e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008524:	e00e      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800852a:	3308      	adds	r3, #8
 800852c:	2102      	movs	r1, #2
 800852e:	4618      	mov	r0, r3
 8008530:	f001 fb24 	bl	8009b7c <RCCEx_PLL2_Config>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800853a:	e003      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008544:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10d      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800854c:	4b05      	ldr	r3, [pc, #20]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800854e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008550:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800855a:	4a02      	ldr	r2, [pc, #8]	@ (8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800855c:	430b      	orrs	r3, r1
 800855e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008560:	e006      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008562:	bf00      	nop
 8008564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800856c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800857c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800857e:	2300      	movs	r3, #0
 8008580:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008582:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008586:	460b      	mov	r3, r1
 8008588:	4313      	orrs	r3, r2
 800858a:	d00c      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800858c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008590:	3328      	adds	r3, #40	@ 0x28
 8008592:	2102      	movs	r1, #2
 8008594:	4618      	mov	r0, r3
 8008596:	f001 fba3 	bl	8009ce0 <RCCEx_PLL3_Config>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80085b4:	2300      	movs	r3, #0
 80085b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80085b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80085bc:	460b      	mov	r3, r1
 80085be:	4313      	orrs	r3, r2
 80085c0:	d038      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085ce:	d018      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80085d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085d4:	d811      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80085d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085da:	d014      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80085dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e0:	d80b      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d011      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80085e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ea:	d106      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085ec:	4bc3      	ldr	r3, [pc, #780]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80085ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f0:	4ac2      	ldr	r2, [pc, #776]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80085f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80085f8:	e008      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008600:	e004      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008602:	bf00      	nop
 8008604:	e002      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008606:	bf00      	nop
 8008608:	e000      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800860a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800860c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10b      	bne.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008614:	4bb9      	ldr	r3, [pc, #740]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008618:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800861c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008624:	4ab5      	ldr	r2, [pc, #724]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008626:	430b      	orrs	r3, r1
 8008628:	6553      	str	r3, [r2, #84]	@ 0x54
 800862a:	e003      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008630:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008642:	2300      	movs	r3, #0
 8008644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008646:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800864a:	460b      	mov	r3, r1
 800864c:	4313      	orrs	r3, r2
 800864e:	d009      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008650:	4baa      	ldr	r3, [pc, #680]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008654:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800865c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800865e:	4aa7      	ldr	r2, [pc, #668]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008660:	430b      	orrs	r3, r1
 8008662:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008670:	653b      	str	r3, [r7, #80]	@ 0x50
 8008672:	2300      	movs	r3, #0
 8008674:	657b      	str	r3, [r7, #84]	@ 0x54
 8008676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800867a:	460b      	mov	r3, r1
 800867c:	4313      	orrs	r3, r2
 800867e:	d009      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008680:	4b9e      	ldr	r3, [pc, #632]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008684:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800868c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868e:	4a9b      	ldr	r2, [pc, #620]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008690:	430b      	orrs	r3, r1
 8008692:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80086a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086a2:	2300      	movs	r3, #0
 80086a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086aa:	460b      	mov	r3, r1
 80086ac:	4313      	orrs	r3, r2
 80086ae:	d009      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80086b0:	4b92      	ldr	r3, [pc, #584]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80086b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086be:	4a8f      	ldr	r2, [pc, #572]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086c0:	430b      	orrs	r3, r1
 80086c2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80086d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80086d2:	2300      	movs	r3, #0
 80086d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80086da:	460b      	mov	r3, r1
 80086dc:	4313      	orrs	r3, r2
 80086de:	d00e      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086e0:	4b86      	ldr	r3, [pc, #536]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	4a85      	ldr	r2, [pc, #532]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086ea:	6113      	str	r3, [r2, #16]
 80086ec:	4b83      	ldr	r3, [pc, #524]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086ee:	6919      	ldr	r1, [r3, #16]
 80086f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086f8:	4a80      	ldr	r2, [pc, #512]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086fa:	430b      	orrs	r3, r1
 80086fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800870a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800870c:	2300      	movs	r3, #0
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008710:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008714:	460b      	mov	r3, r1
 8008716:	4313      	orrs	r3, r2
 8008718:	d009      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800871a:	4b78      	ldr	r3, [pc, #480]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800871c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800871e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008728:	4a74      	ldr	r2, [pc, #464]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800872a:	430b      	orrs	r3, r1
 800872c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800872e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800873a:	633b      	str	r3, [r7, #48]	@ 0x30
 800873c:	2300      	movs	r3, #0
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008740:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008744:	460b      	mov	r3, r1
 8008746:	4313      	orrs	r3, r2
 8008748:	d00a      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800874a:	4b6c      	ldr	r3, [pc, #432]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800874c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800875a:	4a68      	ldr	r2, [pc, #416]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800875c:	430b      	orrs	r3, r1
 800875e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	2100      	movs	r1, #0
 800876a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008772:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008776:	460b      	mov	r3, r1
 8008778:	4313      	orrs	r3, r2
 800877a:	d011      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800877c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008780:	3308      	adds	r3, #8
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f001 f9f9 	bl	8009b7c <RCCEx_PLL2_Config>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008798:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800879c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	2100      	movs	r1, #0
 80087aa:	6239      	str	r1, [r7, #32]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80087b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087b6:	460b      	mov	r3, r1
 80087b8:	4313      	orrs	r3, r2
 80087ba:	d011      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c0:	3308      	adds	r3, #8
 80087c2:	2101      	movs	r1, #1
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 f9d9 	bl	8009b7c <RCCEx_PLL2_Config>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80087d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80087e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	2100      	movs	r1, #0
 80087ea:	61b9      	str	r1, [r7, #24]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	61fb      	str	r3, [r7, #28]
 80087f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80087f6:	460b      	mov	r3, r1
 80087f8:	4313      	orrs	r3, r2
 80087fa:	d011      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008800:	3308      	adds	r3, #8
 8008802:	2102      	movs	r1, #2
 8008804:	4618      	mov	r0, r3
 8008806:	f001 f9b9 	bl	8009b7c <RCCEx_PLL2_Config>
 800880a:	4603      	mov	r3, r0
 800880c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800881c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	2100      	movs	r1, #0
 800882a:	6139      	str	r1, [r7, #16]
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008836:	460b      	mov	r3, r1
 8008838:	4313      	orrs	r3, r2
 800883a:	d011      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800883c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008840:	3328      	adds	r3, #40	@ 0x28
 8008842:	2100      	movs	r1, #0
 8008844:	4618      	mov	r0, r3
 8008846:	f001 fa4b 	bl	8009ce0 <RCCEx_PLL3_Config>
 800884a:	4603      	mov	r3, r0
 800884c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008850:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800885c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	2100      	movs	r1, #0
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008876:	460b      	mov	r3, r1
 8008878:	4313      	orrs	r3, r2
 800887a:	d011      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800887c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008880:	3328      	adds	r3, #40	@ 0x28
 8008882:	2101      	movs	r1, #1
 8008884:	4618      	mov	r0, r3
 8008886:	f001 fa2b 	bl	8009ce0 <RCCEx_PLL3_Config>
 800888a:	4603      	mov	r3, r0
 800888c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008890:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800889c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	2100      	movs	r1, #0
 80088aa:	6039      	str	r1, [r7, #0]
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	607b      	str	r3, [r7, #4]
 80088b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088b6:	460b      	mov	r3, r1
 80088b8:	4313      	orrs	r3, r2
 80088ba:	d011      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088c0:	3328      	adds	r3, #40	@ 0x28
 80088c2:	2102      	movs	r1, #2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fa0b 	bl	8009ce0 <RCCEx_PLL3_Config>
 80088ca:	4603      	mov	r3, r0
 80088cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80088d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80088e0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e000      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80088f4:	46bd      	mov	sp, r7
 80088f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088fa:	bf00      	nop
 80088fc:	58024400 	.word	0x58024400

08008900 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b090      	sub	sp, #64	@ 0x40
 8008904:	af00      	add	r7, sp, #0
 8008906:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800890a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008912:	430b      	orrs	r3, r1
 8008914:	f040 8094 	bne.w	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008918:	4b97      	ldr	r3, [pc, #604]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800891a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	2b04      	cmp	r3, #4
 8008926:	f200 8087 	bhi.w	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800892a:	a201      	add	r2, pc, #4	@ (adr r2, 8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008945 	.word	0x08008945
 8008934:	0800896d 	.word	0x0800896d
 8008938:	08008995 	.word	0x08008995
 800893c:	08008a31 	.word	0x08008a31
 8008940:	080089bd 	.word	0x080089bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008944:	4b8c      	ldr	r3, [pc, #560]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800894c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008950:	d108      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008956:	4618      	mov	r0, r3
 8008958:	f000 ff68 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008960:	f000 bc97 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	f000 bc93 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800896c:	4b82      	ldr	r3, [pc, #520]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008978:	d108      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897a:	f107 0318 	add.w	r3, r7, #24
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fcac 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008988:	f000 bc83 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008990:	f000 bc7f 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008994:	4b78      	ldr	r3, [pc, #480]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800899c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089a0:	d108      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a2:	f107 030c 	add.w	r3, r7, #12
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fdec 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089b0:	f000 bc6f 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b8:	f000 bc6b 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089bc:	4b6e      	ldr	r3, [pc, #440]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089c6:	4b6c      	ldr	r3, [pc, #432]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d10c      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80089d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089d8:	4b67      	ldr	r3, [pc, #412]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	08db      	lsrs	r3, r3, #3
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	4a66      	ldr	r2, [pc, #408]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089ea:	e01f      	b.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089ec:	4b62      	ldr	r3, [pc, #392]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f8:	d106      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80089fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a00:	d102      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a02:	4b5f      	ldr	r3, [pc, #380]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a06:	e011      	b.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a08:	4b5b      	ldr	r3, [pc, #364]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a14:	d106      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a1c:	d102      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a1e:	4b59      	ldr	r3, [pc, #356]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a22:	e003      	b.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a28:	f000 bc33 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008a2c:	f000 bc31 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a30:	4b55      	ldr	r3, [pc, #340]	@ (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a34:	f000 bc2d 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a3c:	f000 bc29 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a44:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	f040 809f 	bne.w	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8008a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a52:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008a56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a5e:	d04d      	beq.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a66:	f200 8084 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a6e:	d07d      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a74:	d87d      	bhi.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	2b80      	cmp	r3, #128	@ 0x80
 8008a7a:	d02d      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	2b80      	cmp	r3, #128	@ 0x80
 8008a80:	d877      	bhi.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d003      	beq.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8a:	2b40      	cmp	r3, #64	@ 0x40
 8008a8c:	d012      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008a8e:	e070      	b.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a90:	4b39      	ldr	r3, [pc, #228]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a9c:	d107      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 fec2 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aac:	e3f1      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab2:	e3ee      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ab4:	4b30      	ldr	r3, [pc, #192]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ac0:	d107      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ac2:	f107 0318 	add.w	r3, r7, #24
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fc08 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad0:	e3df      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad6:	e3dc      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ad8:	4b27      	ldr	r3, [pc, #156]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ae4:	d107      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae6:	f107 030c 	add.w	r3, r7, #12
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 fd4a 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af4:	e3cd      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afa:	e3ca      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008afc:	4b1e      	ldr	r3, [pc, #120]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b06:	4b1c      	ldr	r3, [pc, #112]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d10c      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b18:	4b17      	ldr	r3, [pc, #92]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	08db      	lsrs	r3, r3, #3
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	4a16      	ldr	r2, [pc, #88]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008b24:	fa22 f303 	lsr.w	r3, r2, r3
 8008b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b2a:	e01e      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b2c:	4b12      	ldr	r3, [pc, #72]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b38:	d106      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b40:	d102      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b42:	4b0f      	ldr	r3, [pc, #60]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b46:	e010      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b48:	4b0b      	ldr	r3, [pc, #44]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b54:	d106      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b5c:	d102      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b5e:	4b09      	ldr	r3, [pc, #36]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b62:	e002      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b68:	e393      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008b6a:	e392      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b6c:	4b06      	ldr	r3, [pc, #24]	@ (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b70:	e38f      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b76:	e38c      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008b78:	58024400 	.word	0x58024400
 8008b7c:	03d09000 	.word	0x03d09000
 8008b80:	003d0900 	.word	0x003d0900
 8008b84:	007a1200 	.word	0x007a1200
 8008b88:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b90:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008b94:	430b      	orrs	r3, r1
 8008b96:	f040 809c 	bne.w	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008b9a:	4b9e      	ldr	r3, [pc, #632]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b9e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008ba2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008baa:	d054      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bb2:	f200 808b 	bhi.w	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008bbc:	f000 8083 	beq.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008bc6:	f200 8081 	bhi.w	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd0:	d02f      	beq.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd8:	d878      	bhi.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d004      	beq.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be6:	d012      	beq.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008be8:	e070      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bea:	4b8a      	ldr	r3, [pc, #552]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fe15 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c06:	e344      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e341      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c0e:	4b81      	ldr	r3, [pc, #516]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1a:	d107      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c1c:	f107 0318 	add.w	r3, r7, #24
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 fb5b 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c2a:	e332      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c30:	e32f      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c32:	4b78      	ldr	r3, [pc, #480]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c3e:	d107      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c40:	f107 030c 	add.w	r3, r7, #12
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fc9d 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c4e:	e320      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c54:	e31d      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c56:	4b6f      	ldr	r3, [pc, #444]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c60:	4b6c      	ldr	r3, [pc, #432]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d10c      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d109      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c72:	4b68      	ldr	r3, [pc, #416]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	08db      	lsrs	r3, r3, #3
 8008c78:	f003 0303 	and.w	r3, r3, #3
 8008c7c:	4a66      	ldr	r2, [pc, #408]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c84:	e01e      	b.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c86:	4b63      	ldr	r3, [pc, #396]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c92:	d106      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ca0:	e010      	b.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008caa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cae:	d106      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb6:	d102      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008cb8:	4b59      	ldr	r3, [pc, #356]	@ (8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cbc:	e002      	b.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8008cc2:	e2e6      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008cc4:	e2e5      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cc6:	4b57      	ldr	r3, [pc, #348]	@ (8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cca:	e2e2      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd0:	e2df      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	f040 80a7 	bne.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ce4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008ce8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cf0:	d055      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cf8:	f200 8096 	bhi.w	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d02:	f000 8084 	beq.w	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d0c:	f200 808c 	bhi.w	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d16:	d030      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d1e:	f200 8083 	bhi.w	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d2e:	d012      	beq.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008d30:	e07a      	b.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d32:	4b38      	ldr	r3, [pc, #224]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fd71 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d4e:	e2a0      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	e29d      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d56:	4b2f      	ldr	r3, [pc, #188]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d62:	d107      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d64:	f107 0318 	add.w	r3, r7, #24
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 fab7 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d72:	e28e      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d78:	e28b      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d7a:	4b26      	ldr	r3, [pc, #152]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d86:	d107      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d88:	f107 030c 	add.w	r3, r7, #12
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fbf9 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d96:	e27c      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9c:	e279      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008da8:	4b1a      	ldr	r3, [pc, #104]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d10c      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dba:	4b16      	ldr	r3, [pc, #88]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	08db      	lsrs	r3, r3, #3
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	4a14      	ldr	r2, [pc, #80]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dcc:	e01e      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dce:	4b11      	ldr	r3, [pc, #68]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dda:	d106      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008de2:	d102      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008de4:	4b0d      	ldr	r3, [pc, #52]	@ (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008de8:	e010      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dea:	4b0a      	ldr	r3, [pc, #40]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008df6:	d106      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dfe:	d102      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e00:	4b07      	ldr	r3, [pc, #28]	@ (8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e04:	e002      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e0a:	e242      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008e0c:	e241      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e0e:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e12:	e23e      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008e14:	58024400 	.word	0x58024400
 8008e18:	03d09000 	.word	0x03d09000
 8008e1c:	003d0900 	.word	0x003d0900
 8008e20:	007a1200 	.word	0x007a1200
 8008e24:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e2c:	e231      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e32:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008e36:	430b      	orrs	r3, r1
 8008e38:	f040 8085 	bne.w	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e40:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008e44:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e4c:	d06b      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e54:	d874      	bhi.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e5c:	d056      	beq.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e64:	d86c      	bhi.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e6c:	d03b      	beq.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e74:	d864      	bhi.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e7c:	d021      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e84:	d85c      	bhi.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e92:	d004      	beq.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008e94:	e054      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e96:	f7fe fb49 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 8008e9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e9c:	e1f9      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e9e:	4b84      	ldr	r3, [pc, #528]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eac:	f107 0318 	add.w	r3, r7, #24
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fa13 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eba:	e1ea      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec0:	e1e7      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ece:	d107      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed0:	f107 030c 	add.w	r3, r7, #12
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fb55 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ede:	e1d8      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee4:	e1d5      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ee6:	4b72      	ldr	r3, [pc, #456]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d109      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	08db      	lsrs	r3, r3, #3
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	4a6d      	ldr	r2, [pc, #436]	@ (80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008efe:	fa22 f303 	lsr.w	r3, r2, r3
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f04:	e1c5      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0a:	e1c2      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f0c:	4b68      	ldr	r3, [pc, #416]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f18:	d102      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8008f1a:	4b67      	ldr	r3, [pc, #412]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f1e:	e1b8      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f24:	e1b5      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f26:	4b62      	ldr	r3, [pc, #392]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f32:	d102      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8008f34:	4b61      	ldr	r3, [pc, #388]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f38:	e1ab      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f3e:	e1a8      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f44:	e1a5      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	d173      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f52:	4b57      	ldr	r3, [pc, #348]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f5a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f62:	d02f      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f6a:	d863      	bhi.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d004      	beq.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f78:	d012      	beq.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008f7a:	e05b      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f88:	d107      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f8a:	f107 0318 	add.w	r3, r7, #24
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f9a4 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f98:	e17b      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f9e:	e178      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fa0:	4b43      	ldr	r3, [pc, #268]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fac:	d107      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fae:	f107 030c 	add.w	r3, r7, #12
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fae6 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fbc:	e169      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc2:	e166      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fce:	4b38      	ldr	r3, [pc, #224]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d10c      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8008fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fe0:	4b33      	ldr	r3, [pc, #204]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	08db      	lsrs	r3, r3, #3
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	4a32      	ldr	r2, [pc, #200]	@ (80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008fec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ff2:	e01e      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009000:	d106      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8009002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009008:	d102      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800900a:	4b2b      	ldr	r3, [pc, #172]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800900c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800900e:	e010      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009010:	4b27      	ldr	r3, [pc, #156]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800901c:	d106      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800901e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009024:	d102      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009026:	4b25      	ldr	r3, [pc, #148]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800902a:	e002      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009030:	e12f      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009032:	e12e      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009038:	e12b      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800903a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800903e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009042:	430b      	orrs	r3, r1
 8009044:	d13c      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009046:	4b1a      	ldr	r3, [pc, #104]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800904a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800904e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009052:	2b00      	cmp	r3, #0
 8009054:	d004      	beq.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800905c:	d012      	beq.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800905e:	e023      	b.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009060:	4b13      	ldr	r3, [pc, #76]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800906c:	d107      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800906e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fbda 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800907c:	e109      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009082:	e106      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009084:	4b0a      	ldr	r3, [pc, #40]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800908c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009090:	d107      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009092:	f107 0318 	add.w	r3, r7, #24
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f920 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090a0:	e0f7      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a6:	e0f4      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ac:	e0f1      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80090ae:	bf00      	nop
 80090b0:	58024400 	.word	0x58024400
 80090b4:	03d09000 	.word	0x03d09000
 80090b8:	003d0900 	.word	0x003d0900
 80090bc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80090c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80090c8:	430b      	orrs	r3, r1
 80090ca:	f040 8091 	bne.w	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80090ce:	4b73      	ldr	r3, [pc, #460]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80090d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80090de:	f000 8081 	beq.w	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80090e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80090e8:	d87f      	bhi.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80090ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090f0:	d06b      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80090f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090f8:	d877      	bhi.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80090fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009100:	d056      	beq.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009108:	d86f      	bhi.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800910a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009110:	d03b      	beq.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009118:	d867      	bhi.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800911a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009120:	d021      	beq.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009128:	d85f      	bhi.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009136:	d004      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009138:	e057      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800913a:	f000 f8b9 	bl	80092b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800913e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009140:	e0a7      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009142:	4b56      	ldr	r3, [pc, #344]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800914a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800914e:	d107      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009150:	f107 0318 	add.w	r3, r7, #24
 8009154:	4618      	mov	r0, r3
 8009156:	f000 f8c1 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800915e:	e098      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009164:	e095      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009166:	4b4d      	ldr	r3, [pc, #308]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800916e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009172:	d107      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009174:	f107 030c 	add.w	r3, r7, #12
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fa03 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009182:	e086      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009188:	e083      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800918a:	4b44      	ldr	r3, [pc, #272]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0304 	and.w	r3, r3, #4
 8009192:	2b04      	cmp	r3, #4
 8009194:	d109      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009196:	4b41      	ldr	r3, [pc, #260]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	08db      	lsrs	r3, r3, #3
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	4a3f      	ldr	r2, [pc, #252]	@ (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80091a2:	fa22 f303 	lsr.w	r3, r2, r3
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a8:	e073      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ae:	e070      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80091b0:	4b3a      	ldr	r3, [pc, #232]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091bc:	d102      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80091be:	4b39      	ldr	r3, [pc, #228]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80091c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c2:	e066      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c8:	e063      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091ca:	4b34      	ldr	r3, [pc, #208]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091d6:	d102      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80091d8:	4b33      	ldr	r3, [pc, #204]	@ (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091dc:	e059      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e2:	e056      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091e4:	4b31      	ldr	r3, [pc, #196]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e8:	e053      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ee:	e050      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80091f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80091f8:	430b      	orrs	r3, r1
 80091fa:	d148      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80091fc:	4b27      	ldr	r3, [pc, #156]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80091fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009200:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009204:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800920c:	d02a      	beq.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009214:	d838      	bhi.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	2b00      	cmp	r3, #0
 800921a:	d004      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009222:	d00d      	beq.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009224:	e030      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009226:	4b1d      	ldr	r3, [pc, #116]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800922e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009232:	d102      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009234:	4b1c      	ldr	r3, [pc, #112]	@ (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009238:	e02b      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923e:	e028      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009240:	4b16      	ldr	r3, [pc, #88]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009248:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800924c:	d107      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800924e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009252:	4618      	mov	r0, r3
 8009254:	f000 faea 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800925c:	e019      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009262:	e016      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009264:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800926c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009270:	d107      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009272:	f107 0318 	add.w	r3, r7, #24
 8009276:	4618      	mov	r0, r3
 8009278:	f000 f830 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009280:	e007      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009286:	e004      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928c:	e001      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009294:	4618      	mov	r0, r3
 8009296:	3740      	adds	r7, #64	@ 0x40
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	58024400 	.word	0x58024400
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	003d0900 	.word	0x003d0900
 80092a8:	007a1200 	.word	0x007a1200
 80092ac:	00bb8000 	.word	0x00bb8000

080092b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80092b4:	f7fe f90a 	bl	80074cc <HAL_RCC_GetHCLKFreq>
 80092b8:	4602      	mov	r2, r0
 80092ba:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	4904      	ldr	r1, [pc, #16]	@ (80092d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80092c6:	5ccb      	ldrb	r3, [r1, r3]
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58024400 	.word	0x58024400
 80092d8:	0800bae4 	.word	0x0800bae4

080092dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80092dc:	b480      	push	{r7}
 80092de:	b089      	sub	sp, #36	@ 0x24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092e4:	4ba1      	ldr	r3, [pc, #644]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80092ee:	4b9f      	ldr	r3, [pc, #636]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f2:	0b1b      	lsrs	r3, r3, #12
 80092f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092fa:	4b9c      	ldr	r3, [pc, #624]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	091b      	lsrs	r3, r3, #4
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009306:	4b99      	ldr	r3, [pc, #612]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930a:	08db      	lsrs	r3, r3, #3
 800930c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	fb02 f303 	mul.w	r3, r2, r3
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8111 	beq.w	800954c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b02      	cmp	r3, #2
 800932e:	f000 8083 	beq.w	8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b02      	cmp	r3, #2
 8009336:	f200 80a1 	bhi.w	800947c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d056      	beq.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009346:	e099      	b.n	800947c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009348:	4b88      	ldr	r3, [pc, #544]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0320 	and.w	r3, r3, #32
 8009350:	2b00      	cmp	r3, #0
 8009352:	d02d      	beq.n	80093b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009354:	4b85      	ldr	r3, [pc, #532]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	08db      	lsrs	r3, r3, #3
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	4a84      	ldr	r2, [pc, #528]	@ (8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009360:	fa22 f303 	lsr.w	r3, r2, r3
 8009364:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	ee07 3a90 	vmov	s15, r3
 800936c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937e:	4b7b      	ldr	r3, [pc, #492]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009392:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093ae:	e087      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80093be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c2:	4b6a      	ldr	r3, [pc, #424]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f2:	e065      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009406:	4b59      	ldr	r3, [pc, #356]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009416:	ed97 6a03 	vldr	s12, [r7, #12]
 800941a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800941e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009436:	e043      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009442:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009580 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944a:	4b48      	ldr	r3, [pc, #288]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800944c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945a:	ed97 6a03 	vldr	s12, [r7, #12]
 800945e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800946e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800947a:	e021      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800948a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948e:	4b37      	ldr	r3, [pc, #220]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949e:	ed97 6a03 	vldr	s12, [r7, #12]
 80094a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80094c0:	4b2a      	ldr	r3, [pc, #168]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c4:	0a5b      	lsrs	r3, r3, #9
 80094c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094da:	edd7 6a07 	vldr	s13, [r7, #28]
 80094de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e6:	ee17 2a90 	vmov	r2, s15
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80094ee:	4b1f      	ldr	r3, [pc, #124]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009508:	edd7 6a07 	vldr	s13, [r7, #28]
 800950c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009514:	ee17 2a90 	vmov	r2, s15
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800951c:	4b13      	ldr	r3, [pc, #76]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800951e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009520:	0e1b      	lsrs	r3, r3, #24
 8009522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009536:	edd7 6a07 	vldr	s13, [r7, #28]
 800953a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800953e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009542:	ee17 2a90 	vmov	r2, s15
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800954a:	e008      	b.n	800955e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	609a      	str	r2, [r3, #8]
}
 800955e:	bf00      	nop
 8009560:	3724      	adds	r7, #36	@ 0x24
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	58024400 	.word	0x58024400
 8009570:	03d09000 	.word	0x03d09000
 8009574:	46000000 	.word	0x46000000
 8009578:	4c742400 	.word	0x4c742400
 800957c:	4a742400 	.word	0x4a742400
 8009580:	4af42400 	.word	0x4af42400

08009584 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009584:	b480      	push	{r7}
 8009586:	b089      	sub	sp, #36	@ 0x24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800958c:	4ba1      	ldr	r3, [pc, #644]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009596:	4b9f      	ldr	r3, [pc, #636]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959a:	0d1b      	lsrs	r3, r3, #20
 800959c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80095a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80095ae:	4b99      	ldr	r3, [pc, #612]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b2:	08db      	lsrs	r3, r3, #3
 80095b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	fb02 f303 	mul.w	r3, r2, r3
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 8111 	beq.w	80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	f000 8083 	beq.w	80096e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	f200 80a1 	bhi.w	8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d056      	beq.n	800969c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80095ee:	e099      	b.n	8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f0:	4b88      	ldr	r3, [pc, #544]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d02d      	beq.n	8009658 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095fc:	4b85      	ldr	r3, [pc, #532]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	08db      	lsrs	r3, r3, #3
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	4a84      	ldr	r2, [pc, #528]	@ (8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
 800960c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009626:	4b7b      	ldr	r3, [pc, #492]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009636:	ed97 6a03 	vldr	s12, [r7, #12]
 800963a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800963e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800964a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009656:	e087      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966a:	4b6a      	ldr	r3, [pc, #424]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967a:	ed97 6a03 	vldr	s12, [r7, #12]
 800967e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800969a:	e065      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ae:	4b59      	ldr	r3, [pc, #356]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b6:	ee07 3a90 	vmov	s15, r3
 80096ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096be:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096de:	e043      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80096ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f2:	4b48      	ldr	r3, [pc, #288]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fa:	ee07 3a90 	vmov	s15, r3
 80096fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009702:	ed97 6a03 	vldr	s12, [r7, #12]
 8009706:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800970a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009722:	e021      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009736:	4b37      	ldr	r3, [pc, #220]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973e:	ee07 3a90 	vmov	s15, r3
 8009742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009746:	ed97 6a03 	vldr	s12, [r7, #12]
 800974a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800974e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800975a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009766:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009768:	4b2a      	ldr	r3, [pc, #168]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800976a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976c:	0a5b      	lsrs	r3, r3, #9
 800976e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800977e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009782:	edd7 6a07 	vldr	s13, [r7, #28]
 8009786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800978e:	ee17 2a90 	vmov	r2, s15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009796:	4b1f      	ldr	r3, [pc, #124]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800979a:	0c1b      	lsrs	r3, r3, #16
 800979c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a0:	ee07 3a90 	vmov	s15, r3
 80097a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097bc:	ee17 2a90 	vmov	r2, s15
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80097c4:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c8:	0e1b      	lsrs	r3, r3, #24
 80097ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097de:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ea:	ee17 2a90 	vmov	r2, s15
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097f2:	e008      	b.n	8009806 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	609a      	str	r2, [r3, #8]
}
 8009806:	bf00      	nop
 8009808:	3724      	adds	r7, #36	@ 0x24
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	58024400 	.word	0x58024400
 8009818:	03d09000 	.word	0x03d09000
 800981c:	46000000 	.word	0x46000000
 8009820:	4c742400 	.word	0x4c742400
 8009824:	4a742400 	.word	0x4a742400
 8009828:	4af42400 	.word	0x4af42400

0800982c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800982c:	b480      	push	{r7}
 800982e:	b089      	sub	sp, #36	@ 0x24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009834:	4ba0      	ldr	r3, [pc, #640]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009838:	f003 0303 	and.w	r3, r3, #3
 800983c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800983e:	4b9e      	ldr	r3, [pc, #632]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009842:	091b      	lsrs	r3, r3, #4
 8009844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009848:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800984a:	4b9b      	ldr	r3, [pc, #620]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800984c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009854:	4b98      	ldr	r3, [pc, #608]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009858:	08db      	lsrs	r3, r3, #3
 800985a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	fb02 f303 	mul.w	r3, r2, r3
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 8111 	beq.w	8009a9a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	2b02      	cmp	r3, #2
 800987c:	f000 8083 	beq.w	8009986 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	2b02      	cmp	r3, #2
 8009884:	f200 80a1 	bhi.w	80099ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d056      	beq.n	8009942 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009894:	e099      	b.n	80099ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009896:	4b88      	ldr	r3, [pc, #544]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0320 	and.w	r3, r3, #32
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d02d      	beq.n	80098fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098a2:	4b85      	ldr	r3, [pc, #532]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	08db      	lsrs	r3, r3, #3
 80098a8:	f003 0303 	and.w	r3, r3, #3
 80098ac:	4a83      	ldr	r2, [pc, #524]	@ (8009abc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80098ae:	fa22 f303 	lsr.w	r3, r2, r3
 80098b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	ee07 3a90 	vmov	s15, r3
 80098c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098cc:	4b7a      	ldr	r3, [pc, #488]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d4:	ee07 3a90 	vmov	s15, r3
 80098d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80098e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098fc:	e087      	b.n	8009a0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	ee07 3a90 	vmov	s15, r3
 8009904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009908:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800990c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009910:	4b69      	ldr	r3, [pc, #420]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009918:	ee07 3a90 	vmov	s15, r3
 800991c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009920:	ed97 6a03 	vldr	s12, [r7, #12]
 8009924:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009930:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009940:	e065      	b.n	8009a0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	ee07 3a90 	vmov	s15, r3
 8009948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009954:	4b58      	ldr	r3, [pc, #352]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995c:	ee07 3a90 	vmov	s15, r3
 8009960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009964:	ed97 6a03 	vldr	s12, [r7, #12]
 8009968:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800996c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009974:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009980:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009984:	e043      	b.n	8009a0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	ee07 3a90 	vmov	s15, r3
 800998c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009990:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009acc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009998:	4b47      	ldr	r3, [pc, #284]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800999a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a0:	ee07 3a90 	vmov	s15, r3
 80099a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099c8:	e021      	b.n	8009a0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	ee07 3a90 	vmov	s15, r3
 80099d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80099d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099dc:	4b36      	ldr	r3, [pc, #216]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e4:	ee07 3a90 	vmov	s15, r3
 80099e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80099f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a0c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a12:	0a5b      	lsrs	r3, r3, #9
 8009a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a18:	ee07 3a90 	vmov	s15, r3
 8009a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a34:	ee17 2a90 	vmov	r2, s15
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a40:	0c1b      	lsrs	r3, r3, #16
 8009a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a62:	ee17 2a90 	vmov	r2, s15
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009a6a:	4b13      	ldr	r3, [pc, #76]	@ (8009ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a6e:	0e1b      	lsrs	r3, r3, #24
 8009a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a74:	ee07 3a90 	vmov	s15, r3
 8009a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a90:	ee17 2a90 	vmov	r2, s15
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a98:	e008      	b.n	8009aac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	609a      	str	r2, [r3, #8]
}
 8009aac:	bf00      	nop
 8009aae:	3724      	adds	r7, #36	@ 0x24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	58024400 	.word	0x58024400
 8009abc:	03d09000 	.word	0x03d09000
 8009ac0:	46000000 	.word	0x46000000
 8009ac4:	4c742400 	.word	0x4c742400
 8009ac8:	4a742400 	.word	0x4a742400
 8009acc:	4af42400 	.word	0x4af42400

08009ad0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009ad8:	4b26      	ldr	r3, [pc, #152]	@ (8009b74 <HAL_RCCEx_CRSConfig+0xa4>)
 8009ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ade:	4a25      	ldr	r2, [pc, #148]	@ (8009b74 <HAL_RCCEx_CRSConfig+0xa4>)
 8009ae0:	f043 0302 	orr.w	r3, r3, #2
 8009ae4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8009ae8:	4b22      	ldr	r3, [pc, #136]	@ (8009b74 <HAL_RCCEx_CRSConfig+0xa4>)
 8009aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aee:	4a21      	ldr	r2, [pc, #132]	@ (8009b74 <HAL_RCCEx_CRSConfig+0xa4>)
 8009af0:	f023 0302 	bic.w	r3, r3, #2
 8009af4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8009af8:	f7f7 fb82 	bl	8001200 <HAL_GetREVID>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d80b      	bhi.n	8009b1e <HAL_RCCEx_CRSConfig+0x4e>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b0e:	d106      	bne.n	8009b1e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	e008      	b.n	8009b30 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	431a      	orrs	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	041b      	lsls	r3, r3, #16
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8009b46:	4a0c      	ldr	r2, [pc, #48]	@ (8009b78 <HAL_RCCEx_CRSConfig+0xa8>)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b78 <HAL_RCCEx_CRSConfig+0xa8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	021b      	lsls	r3, r3, #8
 8009b5a:	4907      	ldr	r1, [pc, #28]	@ (8009b78 <HAL_RCCEx_CRSConfig+0xa8>)
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009b60:	4b05      	ldr	r3, [pc, #20]	@ (8009b78 <HAL_RCCEx_CRSConfig+0xa8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a04      	ldr	r2, [pc, #16]	@ (8009b78 <HAL_RCCEx_CRSConfig+0xa8>)
 8009b66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009b6a:	6013      	str	r3, [r2, #0]
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	58024400 	.word	0x58024400
 8009b78:	40008400 	.word	0x40008400

08009b7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b8a:	4b53      	ldr	r3, [pc, #332]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8e:	f003 0303 	and.w	r3, r3, #3
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d101      	bne.n	8009b9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e099      	b.n	8009cce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a4e      	ldr	r2, [pc, #312]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009ba0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ba6:	f7f7 fb1f 	bl	80011e8 <HAL_GetTick>
 8009baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bac:	e008      	b.n	8009bc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bae:	f7f7 fb1b 	bl	80011e8 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d901      	bls.n	8009bc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e086      	b.n	8009cce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bc0:	4b45      	ldr	r3, [pc, #276]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1f0      	bne.n	8009bae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009bcc:	4b42      	ldr	r3, [pc, #264]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	031b      	lsls	r3, r3, #12
 8009bda:	493f      	ldr	r1, [pc, #252]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	628b      	str	r3, [r1, #40]	@ 0x28
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	025b      	lsls	r3, r3, #9
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	041b      	lsls	r3, r3, #16
 8009bfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	061b      	lsls	r3, r3, #24
 8009c0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c10:	4931      	ldr	r1, [pc, #196]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c16:	4b30      	ldr	r3, [pc, #192]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	492d      	ldr	r1, [pc, #180]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c28:	4b2b      	ldr	r3, [pc, #172]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2c:	f023 0220 	bic.w	r2, r3, #32
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	4928      	ldr	r1, [pc, #160]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c3a:	4b27      	ldr	r3, [pc, #156]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3e:	4a26      	ldr	r2, [pc, #152]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c40:	f023 0310 	bic.w	r3, r3, #16
 8009c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c46:	4b24      	ldr	r3, [pc, #144]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c4a:	4b24      	ldr	r3, [pc, #144]	@ (8009cdc <RCCEx_PLL2_Config+0x160>)
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	69d2      	ldr	r2, [r2, #28]
 8009c52:	00d2      	lsls	r2, r2, #3
 8009c54:	4920      	ldr	r1, [pc, #128]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c60:	f043 0310 	orr.w	r3, r3, #16
 8009c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d106      	bne.n	8009c7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c70:	4a19      	ldr	r2, [pc, #100]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c78:	e00f      	b.n	8009c9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d106      	bne.n	8009c8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c80:	4b15      	ldr	r3, [pc, #84]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c84:	4a14      	ldr	r2, [pc, #80]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c8c:	e005      	b.n	8009c9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c8e:	4b12      	ldr	r3, [pc, #72]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c92:	4a11      	ldr	r2, [pc, #68]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009ca0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ca6:	f7f7 fa9f 	bl	80011e8 <HAL_GetTick>
 8009caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cac:	e008      	b.n	8009cc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009cae:	f7f7 fa9b 	bl	80011e8 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d901      	bls.n	8009cc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e006      	b.n	8009cce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cc0:	4b05      	ldr	r3, [pc, #20]	@ (8009cd8 <RCCEx_PLL2_Config+0x15c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d0f0      	beq.n	8009cae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	58024400 	.word	0x58024400
 8009cdc:	ffff0007 	.word	0xffff0007

08009ce0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cee:	4b53      	ldr	r3, [pc, #332]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d101      	bne.n	8009cfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e099      	b.n	8009e32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a4e      	ldr	r2, [pc, #312]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d0a:	f7f7 fa6d 	bl	80011e8 <HAL_GetTick>
 8009d0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d10:	e008      	b.n	8009d24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d12:	f7f7 fa69 	bl	80011e8 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d901      	bls.n	8009d24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e086      	b.n	8009e32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d24:	4b45      	ldr	r3, [pc, #276]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1f0      	bne.n	8009d12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d30:	4b42      	ldr	r3, [pc, #264]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	051b      	lsls	r3, r3, #20
 8009d3e:	493f      	ldr	r1, [pc, #252]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	628b      	str	r3, [r1, #40]	@ 0x28
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	025b      	lsls	r3, r3, #9
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	041b      	lsls	r3, r3, #16
 8009d62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	061b      	lsls	r3, r3, #24
 8009d70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d74:	4931      	ldr	r1, [pc, #196]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d7a:	4b30      	ldr	r3, [pc, #192]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	492d      	ldr	r1, [pc, #180]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	4928      	ldr	r1, [pc, #160]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d9e:	4b27      	ldr	r3, [pc, #156]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da2:	4a26      	ldr	r2, [pc, #152]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009daa:	4b24      	ldr	r3, [pc, #144]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dae:	4b24      	ldr	r3, [pc, #144]	@ (8009e40 <RCCEx_PLL3_Config+0x160>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	69d2      	ldr	r2, [r2, #28]
 8009db6:	00d2      	lsls	r2, r2, #3
 8009db8:	4920      	ldr	r1, [pc, #128]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d106      	bne.n	8009dde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd4:	4a19      	ldr	r2, [pc, #100]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009dd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009dda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009ddc:	e00f      	b.n	8009dfe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d106      	bne.n	8009df2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009de4:	4b15      	ldr	r3, [pc, #84]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de8:	4a14      	ldr	r2, [pc, #80]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009dea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009dee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009df0:	e005      	b.n	8009dfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009df2:	4b12      	ldr	r3, [pc, #72]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df6:	4a11      	ldr	r2, [pc, #68]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009df8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a0e      	ldr	r2, [pc, #56]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e0a:	f7f7 f9ed 	bl	80011e8 <HAL_GetTick>
 8009e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e10:	e008      	b.n	8009e24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e12:	f7f7 f9e9 	bl	80011e8 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d901      	bls.n	8009e24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e006      	b.n	8009e32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e24:	4b05      	ldr	r3, [pc, #20]	@ (8009e3c <RCCEx_PLL3_Config+0x15c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d0f0      	beq.n	8009e12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	ffff0007 	.word	0xffff0007

08009e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e042      	b.n	8009edc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d106      	bne.n	8009e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7f6 ffd1 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2224      	movs	r2, #36	@ 0x24
 8009e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f022 0201 	bic.w	r2, r2, #1
 8009e84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 fa6e 	bl	800b370 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fbff 	bl	800a698 <UART_SetConfig>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d101      	bne.n	8009ea4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e01b      	b.n	8009edc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685a      	ldr	r2, [r3, #4]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0201 	orr.w	r2, r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 faed 	bl	800b4b4 <UART_CheckIdleState>
 8009eda:	4603      	mov	r3, r0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b0ba      	sub	sp, #232	@ 0xe8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009f0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009f12:	4013      	ands	r3, r2
 8009f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d11b      	bne.n	8009f58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f24:	f003 0320 	and.w	r3, r3, #32
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d015      	beq.n	8009f58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d105      	bne.n	8009f44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d009      	beq.n	8009f58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 8377 	beq.w	800a63c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	4798      	blx	r3
      }
      return;
 8009f56:	e371      	b.n	800a63c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 8123 	beq.w	800a1a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f66:	4b8d      	ldr	r3, [pc, #564]	@ (800a19c <HAL_UART_IRQHandler+0x2b8>)
 8009f68:	4013      	ands	r3, r2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009f72:	4b8b      	ldr	r3, [pc, #556]	@ (800a1a0 <HAL_UART_IRQHandler+0x2bc>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 8116 	beq.w	800a1a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d011      	beq.n	8009fac <HAL_UART_IRQHandler+0xc8>
 8009f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00b      	beq.n	8009fac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fa2:	f043 0201 	orr.w	r2, r3, #1
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d011      	beq.n	8009fdc <HAL_UART_IRQHandler+0xf8>
 8009fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00b      	beq.n	8009fdc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd2:	f043 0204 	orr.w	r2, r3, #4
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe0:	f003 0304 	and.w	r3, r3, #4
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d011      	beq.n	800a00c <HAL_UART_IRQHandler+0x128>
 8009fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00b      	beq.n	800a00c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2204      	movs	r2, #4
 8009ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a002:	f043 0202 	orr.w	r2, r3, #2
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b00      	cmp	r3, #0
 800a016:	d017      	beq.n	800a048 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a01c:	f003 0320 	and.w	r3, r3, #32
 800a020:	2b00      	cmp	r3, #0
 800a022:	d105      	bne.n	800a030 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a024:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a028:	4b5c      	ldr	r3, [pc, #368]	@ (800a19c <HAL_UART_IRQHandler+0x2b8>)
 800a02a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00b      	beq.n	800a048 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2208      	movs	r2, #8
 800a036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a03e:	f043 0208 	orr.w	r2, r3, #8
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a04c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a050:	2b00      	cmp	r3, #0
 800a052:	d012      	beq.n	800a07a <HAL_UART_IRQHandler+0x196>
 800a054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a058:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00c      	beq.n	800a07a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a070:	f043 0220 	orr.w	r2, r3, #32
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 82dd 	beq.w	800a640 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a08a:	f003 0320 	and.w	r3, r3, #32
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d013      	beq.n	800a0ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a096:	f003 0320 	and.w	r3, r3, #32
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d105      	bne.n	800a0aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a09e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d007      	beq.n	800a0ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ce:	2b40      	cmp	r3, #64	@ 0x40
 800a0d0:	d005      	beq.n	800a0de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d054      	beq.n	800a188 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 fb00 	bl	800b6e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ee:	2b40      	cmp	r3, #64	@ 0x40
 800a0f0:	d146      	bne.n	800a180 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a10c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3308      	adds	r3, #8
 800a11a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a11e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a12a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1d9      	bne.n	800a0f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a144:	2b00      	cmp	r3, #0
 800a146:	d017      	beq.n	800a178 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a14e:	4a15      	ldr	r2, [pc, #84]	@ (800a1a4 <HAL_UART_IRQHandler+0x2c0>)
 800a150:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fa fa09 	bl	8004570 <HAL_DMA_Abort_IT>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d019      	beq.n	800a198 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a16a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a172:	4610      	mov	r0, r2
 800a174:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a176:	e00f      	b.n	800a198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fa77 	bl	800a66c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a17e:	e00b      	b.n	800a198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fa73 	bl	800a66c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a186:	e007      	b.n	800a198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fa6f 	bl	800a66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a196:	e253      	b.n	800a640 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a198:	bf00      	nop
    return;
 800a19a:	e251      	b.n	800a640 <HAL_UART_IRQHandler+0x75c>
 800a19c:	10000001 	.word	0x10000001
 800a1a0:	04000120 	.word	0x04000120
 800a1a4:	0800b7b1 	.word	0x0800b7b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	f040 81e7 	bne.w	800a580 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b6:	f003 0310 	and.w	r3, r3, #16
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 81e0 	beq.w	800a580 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c4:	f003 0310 	and.w	r3, r3, #16
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 81d9 	beq.w	800a580 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2210      	movs	r2, #16
 800a1d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e0:	2b40      	cmp	r3, #64	@ 0x40
 800a1e2:	f040 8151 	bne.w	800a488 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a96      	ldr	r2, [pc, #600]	@ (800a448 <HAL_UART_IRQHandler+0x564>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d068      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a93      	ldr	r2, [pc, #588]	@ (800a44c <HAL_UART_IRQHandler+0x568>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d061      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a91      	ldr	r2, [pc, #580]	@ (800a450 <HAL_UART_IRQHandler+0x56c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d05a      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a8e      	ldr	r2, [pc, #568]	@ (800a454 <HAL_UART_IRQHandler+0x570>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d053      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a8c      	ldr	r2, [pc, #560]	@ (800a458 <HAL_UART_IRQHandler+0x574>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d04c      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a89      	ldr	r2, [pc, #548]	@ (800a45c <HAL_UART_IRQHandler+0x578>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d045      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a87      	ldr	r2, [pc, #540]	@ (800a460 <HAL_UART_IRQHandler+0x57c>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d03e      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a84      	ldr	r2, [pc, #528]	@ (800a464 <HAL_UART_IRQHandler+0x580>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d037      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a82      	ldr	r2, [pc, #520]	@ (800a468 <HAL_UART_IRQHandler+0x584>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d030      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a7f      	ldr	r2, [pc, #508]	@ (800a46c <HAL_UART_IRQHandler+0x588>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d029      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a7d      	ldr	r2, [pc, #500]	@ (800a470 <HAL_UART_IRQHandler+0x58c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d022      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a7a      	ldr	r2, [pc, #488]	@ (800a474 <HAL_UART_IRQHandler+0x590>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d01b      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a78      	ldr	r2, [pc, #480]	@ (800a478 <HAL_UART_IRQHandler+0x594>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d014      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a75      	ldr	r2, [pc, #468]	@ (800a47c <HAL_UART_IRQHandler+0x598>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d00d      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a73      	ldr	r2, [pc, #460]	@ (800a480 <HAL_UART_IRQHandler+0x59c>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d006      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x3e2>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a70      	ldr	r2, [pc, #448]	@ (800a484 <HAL_UART_IRQHandler+0x5a0>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d106      	bne.n	800a2d4 <HAL_UART_IRQHandler+0x3f0>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	e005      	b.n	800a2e0 <HAL_UART_IRQHandler+0x3fc>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 81ab 	beq.w	800a644 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	f080 81a3 	bcs.w	800a644 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a314:	f000 8087 	beq.w	800a426 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a32c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	461a      	mov	r2, r3
 800a33e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a346:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a34e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1da      	bne.n	800a318 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3308      	adds	r3, #8
 800a368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a36c:	e853 3f00 	ldrex	r3, [r3]
 800a370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a374:	f023 0301 	bic.w	r3, r3, #1
 800a378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3308      	adds	r3, #8
 800a382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a38a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a38e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1e1      	bne.n	800a362 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a3ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3308      	adds	r3, #8
 800a3be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a3c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e3      	bne.n	800a39e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3f4:	f023 0310 	bic.w	r3, r3, #16
 800a3f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	461a      	mov	r2, r3
 800a402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a406:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a408:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a40c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e4      	bne.n	800a3e4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a420:	4618      	mov	r0, r3
 800a422:	f7f9 fd87 	bl	8003f34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2202      	movs	r2, #2
 800a42a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a438:	b29b      	uxth	r3, r3
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f91d 	bl	800a680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a446:	e0fd      	b.n	800a644 <HAL_UART_IRQHandler+0x760>
 800a448:	40020010 	.word	0x40020010
 800a44c:	40020028 	.word	0x40020028
 800a450:	40020040 	.word	0x40020040
 800a454:	40020058 	.word	0x40020058
 800a458:	40020070 	.word	0x40020070
 800a45c:	40020088 	.word	0x40020088
 800a460:	400200a0 	.word	0x400200a0
 800a464:	400200b8 	.word	0x400200b8
 800a468:	40020410 	.word	0x40020410
 800a46c:	40020428 	.word	0x40020428
 800a470:	40020440 	.word	0x40020440
 800a474:	40020458 	.word	0x40020458
 800a478:	40020470 	.word	0x40020470
 800a47c:	40020488 	.word	0x40020488
 800a480:	400204a0 	.word	0x400204a0
 800a484:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a494:	b29b      	uxth	r3, r3
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80cf 	beq.w	800a648 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a4aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 80ca 	beq.w	800a648 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a4d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e4      	bne.n	800a4b4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	e853 3f00 	ldrex	r3, [r3]
 800a4f8:	623b      	str	r3, [r7, #32]
   return(result);
 800a4fa:	6a3a      	ldr	r2, [r7, #32]
 800a4fc:	4b55      	ldr	r3, [pc, #340]	@ (800a654 <HAL_UART_IRQHandler+0x770>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3308      	adds	r3, #8
 800a50a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a50e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e3      	bne.n	800a4ea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	60fb      	str	r3, [r7, #12]
   return(result);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0310 	bic.w	r3, r3, #16
 800a54a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a558:	61fb      	str	r3, [r7, #28]
 800a55a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55c:	69b9      	ldr	r1, [r7, #24]
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	e841 2300 	strex	r3, r2, [r1]
 800a564:	617b      	str	r3, [r7, #20]
   return(result);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e4      	bne.n	800a536 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f881 	bl	800a680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a57e:	e063      	b.n	800a648 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00e      	beq.n	800a5aa <HAL_UART_IRQHandler+0x6c6>
 800a58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d008      	beq.n	800a5aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a5a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f001 f945 	bl	800b832 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5a8:	e051      	b.n	800a64e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d014      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d105      	bne.n	800a5ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d008      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d03a      	beq.n	800a64c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
    }
    return;
 800a5de:	e035      	b.n	800a64c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d009      	beq.n	800a600 <HAL_UART_IRQHandler+0x71c>
 800a5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 f8ef 	bl	800b7dc <UART_EndTransmit_IT>
    return;
 800a5fe:	e026      	b.n	800a64e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d009      	beq.n	800a620 <HAL_UART_IRQHandler+0x73c>
 800a60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a610:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d003      	beq.n	800a620 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 f91e 	bl	800b85a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a61e:	e016      	b.n	800a64e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d010      	beq.n	800a64e <HAL_UART_IRQHandler+0x76a>
 800a62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a630:	2b00      	cmp	r3, #0
 800a632:	da0c      	bge.n	800a64e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 f906 	bl	800b846 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a63a:	e008      	b.n	800a64e <HAL_UART_IRQHandler+0x76a>
      return;
 800a63c:	bf00      	nop
 800a63e:	e006      	b.n	800a64e <HAL_UART_IRQHandler+0x76a>
    return;
 800a640:	bf00      	nop
 800a642:	e004      	b.n	800a64e <HAL_UART_IRQHandler+0x76a>
      return;
 800a644:	bf00      	nop
 800a646:	e002      	b.n	800a64e <HAL_UART_IRQHandler+0x76a>
      return;
 800a648:	bf00      	nop
 800a64a:	e000      	b.n	800a64e <HAL_UART_IRQHandler+0x76a>
    return;
 800a64c:	bf00      	nop
  }
}
 800a64e:	37e8      	adds	r7, #232	@ 0xe8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	effffffe 	.word	0xeffffffe

0800a658 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a69c:	b092      	sub	sp, #72	@ 0x48
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	689a      	ldr	r2, [r3, #8]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	4bbe      	ldr	r3, [pc, #760]	@ (800a9c0 <UART_SetConfig+0x328>)
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	6812      	ldr	r2, [r2, #0]
 800a6ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	68da      	ldr	r2, [r3, #12]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	699b      	ldr	r3, [r3, #24]
 800a6ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4ab3      	ldr	r2, [pc, #716]	@ (800a9c4 <UART_SetConfig+0x32c>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d004      	beq.n	800a704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a700:	4313      	orrs	r3, r2
 800a702:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	4baf      	ldr	r3, [pc, #700]	@ (800a9c8 <UART_SetConfig+0x330>)
 800a70c:	4013      	ands	r3, r2
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a714:	430b      	orrs	r3, r1
 800a716:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71e:	f023 010f 	bic.w	r1, r3, #15
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4aa6      	ldr	r2, [pc, #664]	@ (800a9cc <UART_SetConfig+0x334>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d177      	bne.n	800a828 <UART_SetConfig+0x190>
 800a738:	4ba5      	ldr	r3, [pc, #660]	@ (800a9d0 <UART_SetConfig+0x338>)
 800a73a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a73c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a740:	2b28      	cmp	r3, #40	@ 0x28
 800a742:	d86d      	bhi.n	800a820 <UART_SetConfig+0x188>
 800a744:	a201      	add	r2, pc, #4	@ (adr r2, 800a74c <UART_SetConfig+0xb4>)
 800a746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74a:	bf00      	nop
 800a74c:	0800a7f1 	.word	0x0800a7f1
 800a750:	0800a821 	.word	0x0800a821
 800a754:	0800a821 	.word	0x0800a821
 800a758:	0800a821 	.word	0x0800a821
 800a75c:	0800a821 	.word	0x0800a821
 800a760:	0800a821 	.word	0x0800a821
 800a764:	0800a821 	.word	0x0800a821
 800a768:	0800a821 	.word	0x0800a821
 800a76c:	0800a7f9 	.word	0x0800a7f9
 800a770:	0800a821 	.word	0x0800a821
 800a774:	0800a821 	.word	0x0800a821
 800a778:	0800a821 	.word	0x0800a821
 800a77c:	0800a821 	.word	0x0800a821
 800a780:	0800a821 	.word	0x0800a821
 800a784:	0800a821 	.word	0x0800a821
 800a788:	0800a821 	.word	0x0800a821
 800a78c:	0800a801 	.word	0x0800a801
 800a790:	0800a821 	.word	0x0800a821
 800a794:	0800a821 	.word	0x0800a821
 800a798:	0800a821 	.word	0x0800a821
 800a79c:	0800a821 	.word	0x0800a821
 800a7a0:	0800a821 	.word	0x0800a821
 800a7a4:	0800a821 	.word	0x0800a821
 800a7a8:	0800a821 	.word	0x0800a821
 800a7ac:	0800a809 	.word	0x0800a809
 800a7b0:	0800a821 	.word	0x0800a821
 800a7b4:	0800a821 	.word	0x0800a821
 800a7b8:	0800a821 	.word	0x0800a821
 800a7bc:	0800a821 	.word	0x0800a821
 800a7c0:	0800a821 	.word	0x0800a821
 800a7c4:	0800a821 	.word	0x0800a821
 800a7c8:	0800a821 	.word	0x0800a821
 800a7cc:	0800a811 	.word	0x0800a811
 800a7d0:	0800a821 	.word	0x0800a821
 800a7d4:	0800a821 	.word	0x0800a821
 800a7d8:	0800a821 	.word	0x0800a821
 800a7dc:	0800a821 	.word	0x0800a821
 800a7e0:	0800a821 	.word	0x0800a821
 800a7e4:	0800a821 	.word	0x0800a821
 800a7e8:	0800a821 	.word	0x0800a821
 800a7ec:	0800a819 	.word	0x0800a819
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e326      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a7f8:	2304      	movs	r3, #4
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e322      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a800:	2308      	movs	r3, #8
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a806:	e31e      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a808:	2310      	movs	r3, #16
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e31a      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a810:	2320      	movs	r3, #32
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e316      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a818:	2340      	movs	r3, #64	@ 0x40
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e312      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a820:	2380      	movs	r3, #128	@ 0x80
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e30e      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a69      	ldr	r2, [pc, #420]	@ (800a9d4 <UART_SetConfig+0x33c>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d130      	bne.n	800a894 <UART_SetConfig+0x1fc>
 800a832:	4b67      	ldr	r3, [pc, #412]	@ (800a9d0 <UART_SetConfig+0x338>)
 800a834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a836:	f003 0307 	and.w	r3, r3, #7
 800a83a:	2b05      	cmp	r3, #5
 800a83c:	d826      	bhi.n	800a88c <UART_SetConfig+0x1f4>
 800a83e:	a201      	add	r2, pc, #4	@ (adr r2, 800a844 <UART_SetConfig+0x1ac>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a85d 	.word	0x0800a85d
 800a848:	0800a865 	.word	0x0800a865
 800a84c:	0800a86d 	.word	0x0800a86d
 800a850:	0800a875 	.word	0x0800a875
 800a854:	0800a87d 	.word	0x0800a87d
 800a858:	0800a885 	.word	0x0800a885
 800a85c:	2300      	movs	r3, #0
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e2f0      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a864:	2304      	movs	r3, #4
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e2ec      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a86c:	2308      	movs	r3, #8
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a872:	e2e8      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a874:	2310      	movs	r3, #16
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87a:	e2e4      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a87c:	2320      	movs	r3, #32
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e2e0      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a884:	2340      	movs	r3, #64	@ 0x40
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88a:	e2dc      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a88c:	2380      	movs	r3, #128	@ 0x80
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a892:	e2d8      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a4f      	ldr	r2, [pc, #316]	@ (800a9d8 <UART_SetConfig+0x340>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d130      	bne.n	800a900 <UART_SetConfig+0x268>
 800a89e:	4b4c      	ldr	r3, [pc, #304]	@ (800a9d0 <UART_SetConfig+0x338>)
 800a8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8a2:	f003 0307 	and.w	r3, r3, #7
 800a8a6:	2b05      	cmp	r3, #5
 800a8a8:	d826      	bhi.n	800a8f8 <UART_SetConfig+0x260>
 800a8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b0 <UART_SetConfig+0x218>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a8c9 	.word	0x0800a8c9
 800a8b4:	0800a8d1 	.word	0x0800a8d1
 800a8b8:	0800a8d9 	.word	0x0800a8d9
 800a8bc:	0800a8e1 	.word	0x0800a8e1
 800a8c0:	0800a8e9 	.word	0x0800a8e9
 800a8c4:	0800a8f1 	.word	0x0800a8f1
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ce:	e2ba      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a8d0:	2304      	movs	r3, #4
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d6:	e2b6      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a8d8:	2308      	movs	r3, #8
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8de:	e2b2      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a8e0:	2310      	movs	r3, #16
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e6:	e2ae      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a8e8:	2320      	movs	r3, #32
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ee:	e2aa      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a8f0:	2340      	movs	r3, #64	@ 0x40
 800a8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f6:	e2a6      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a8f8:	2380      	movs	r3, #128	@ 0x80
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fe:	e2a2      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a35      	ldr	r2, [pc, #212]	@ (800a9dc <UART_SetConfig+0x344>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d130      	bne.n	800a96c <UART_SetConfig+0x2d4>
 800a90a:	4b31      	ldr	r3, [pc, #196]	@ (800a9d0 <UART_SetConfig+0x338>)
 800a90c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a90e:	f003 0307 	and.w	r3, r3, #7
 800a912:	2b05      	cmp	r3, #5
 800a914:	d826      	bhi.n	800a964 <UART_SetConfig+0x2cc>
 800a916:	a201      	add	r2, pc, #4	@ (adr r2, 800a91c <UART_SetConfig+0x284>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a935 	.word	0x0800a935
 800a920:	0800a93d 	.word	0x0800a93d
 800a924:	0800a945 	.word	0x0800a945
 800a928:	0800a94d 	.word	0x0800a94d
 800a92c:	0800a955 	.word	0x0800a955
 800a930:	0800a95d 	.word	0x0800a95d
 800a934:	2300      	movs	r3, #0
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93a:	e284      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a93c:	2304      	movs	r3, #4
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	e280      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a944:	2308      	movs	r3, #8
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94a:	e27c      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a94c:	2310      	movs	r3, #16
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a952:	e278      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a954:	2320      	movs	r3, #32
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95a:	e274      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a95c:	2340      	movs	r3, #64	@ 0x40
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a962:	e270      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a964:	2380      	movs	r3, #128	@ 0x80
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96a:	e26c      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a1b      	ldr	r2, [pc, #108]	@ (800a9e0 <UART_SetConfig+0x348>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d142      	bne.n	800a9fc <UART_SetConfig+0x364>
 800a976:	4b16      	ldr	r3, [pc, #88]	@ (800a9d0 <UART_SetConfig+0x338>)
 800a978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	2b05      	cmp	r3, #5
 800a980:	d838      	bhi.n	800a9f4 <UART_SetConfig+0x35c>
 800a982:	a201      	add	r2, pc, #4	@ (adr r2, 800a988 <UART_SetConfig+0x2f0>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800a9a1 	.word	0x0800a9a1
 800a98c:	0800a9a9 	.word	0x0800a9a9
 800a990:	0800a9b1 	.word	0x0800a9b1
 800a994:	0800a9b9 	.word	0x0800a9b9
 800a998:	0800a9e5 	.word	0x0800a9e5
 800a99c:	0800a9ed 	.word	0x0800a9ed
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	e24e      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a9a8:	2304      	movs	r3, #4
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ae:	e24a      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a9b0:	2308      	movs	r3, #8
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b6:	e246      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a9b8:	2310      	movs	r3, #16
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9be:	e242      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a9c0:	cfff69f3 	.word	0xcfff69f3
 800a9c4:	58000c00 	.word	0x58000c00
 800a9c8:	11fff4ff 	.word	0x11fff4ff
 800a9cc:	40011000 	.word	0x40011000
 800a9d0:	58024400 	.word	0x58024400
 800a9d4:	40004400 	.word	0x40004400
 800a9d8:	40004800 	.word	0x40004800
 800a9dc:	40004c00 	.word	0x40004c00
 800a9e0:	40005000 	.word	0x40005000
 800a9e4:	2320      	movs	r3, #32
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ea:	e22c      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a9ec:	2340      	movs	r3, #64	@ 0x40
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f2:	e228      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a9f4:	2380      	movs	r3, #128	@ 0x80
 800a9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fa:	e224      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4ab1      	ldr	r2, [pc, #708]	@ (800acc8 <UART_SetConfig+0x630>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d176      	bne.n	800aaf4 <UART_SetConfig+0x45c>
 800aa06:	4bb1      	ldr	r3, [pc, #708]	@ (800accc <UART_SetConfig+0x634>)
 800aa08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa0e:	2b28      	cmp	r3, #40	@ 0x28
 800aa10:	d86c      	bhi.n	800aaec <UART_SetConfig+0x454>
 800aa12:	a201      	add	r2, pc, #4	@ (adr r2, 800aa18 <UART_SetConfig+0x380>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aabd 	.word	0x0800aabd
 800aa1c:	0800aaed 	.word	0x0800aaed
 800aa20:	0800aaed 	.word	0x0800aaed
 800aa24:	0800aaed 	.word	0x0800aaed
 800aa28:	0800aaed 	.word	0x0800aaed
 800aa2c:	0800aaed 	.word	0x0800aaed
 800aa30:	0800aaed 	.word	0x0800aaed
 800aa34:	0800aaed 	.word	0x0800aaed
 800aa38:	0800aac5 	.word	0x0800aac5
 800aa3c:	0800aaed 	.word	0x0800aaed
 800aa40:	0800aaed 	.word	0x0800aaed
 800aa44:	0800aaed 	.word	0x0800aaed
 800aa48:	0800aaed 	.word	0x0800aaed
 800aa4c:	0800aaed 	.word	0x0800aaed
 800aa50:	0800aaed 	.word	0x0800aaed
 800aa54:	0800aaed 	.word	0x0800aaed
 800aa58:	0800aacd 	.word	0x0800aacd
 800aa5c:	0800aaed 	.word	0x0800aaed
 800aa60:	0800aaed 	.word	0x0800aaed
 800aa64:	0800aaed 	.word	0x0800aaed
 800aa68:	0800aaed 	.word	0x0800aaed
 800aa6c:	0800aaed 	.word	0x0800aaed
 800aa70:	0800aaed 	.word	0x0800aaed
 800aa74:	0800aaed 	.word	0x0800aaed
 800aa78:	0800aad5 	.word	0x0800aad5
 800aa7c:	0800aaed 	.word	0x0800aaed
 800aa80:	0800aaed 	.word	0x0800aaed
 800aa84:	0800aaed 	.word	0x0800aaed
 800aa88:	0800aaed 	.word	0x0800aaed
 800aa8c:	0800aaed 	.word	0x0800aaed
 800aa90:	0800aaed 	.word	0x0800aaed
 800aa94:	0800aaed 	.word	0x0800aaed
 800aa98:	0800aadd 	.word	0x0800aadd
 800aa9c:	0800aaed 	.word	0x0800aaed
 800aaa0:	0800aaed 	.word	0x0800aaed
 800aaa4:	0800aaed 	.word	0x0800aaed
 800aaa8:	0800aaed 	.word	0x0800aaed
 800aaac:	0800aaed 	.word	0x0800aaed
 800aab0:	0800aaed 	.word	0x0800aaed
 800aab4:	0800aaed 	.word	0x0800aaed
 800aab8:	0800aae5 	.word	0x0800aae5
 800aabc:	2301      	movs	r3, #1
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac2:	e1c0      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aac4:	2304      	movs	r3, #4
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaca:	e1bc      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aacc:	2308      	movs	r3, #8
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad2:	e1b8      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aad4:	2310      	movs	r3, #16
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aada:	e1b4      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aadc:	2320      	movs	r3, #32
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae2:	e1b0      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aae4:	2340      	movs	r3, #64	@ 0x40
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaea:	e1ac      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aaec:	2380      	movs	r3, #128	@ 0x80
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf2:	e1a8      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a75      	ldr	r2, [pc, #468]	@ (800acd0 <UART_SetConfig+0x638>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d130      	bne.n	800ab60 <UART_SetConfig+0x4c8>
 800aafe:	4b73      	ldr	r3, [pc, #460]	@ (800accc <UART_SetConfig+0x634>)
 800ab00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	2b05      	cmp	r3, #5
 800ab08:	d826      	bhi.n	800ab58 <UART_SetConfig+0x4c0>
 800ab0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab10 <UART_SetConfig+0x478>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab29 	.word	0x0800ab29
 800ab14:	0800ab31 	.word	0x0800ab31
 800ab18:	0800ab39 	.word	0x0800ab39
 800ab1c:	0800ab41 	.word	0x0800ab41
 800ab20:	0800ab49 	.word	0x0800ab49
 800ab24:	0800ab51 	.word	0x0800ab51
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2e:	e18a      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ab30:	2304      	movs	r3, #4
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab36:	e186      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ab38:	2308      	movs	r3, #8
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e182      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ab40:	2310      	movs	r3, #16
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e17e      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ab48:	2320      	movs	r3, #32
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4e:	e17a      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ab50:	2340      	movs	r3, #64	@ 0x40
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab56:	e176      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ab58:	2380      	movs	r3, #128	@ 0x80
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5e:	e172      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a5b      	ldr	r2, [pc, #364]	@ (800acd4 <UART_SetConfig+0x63c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d130      	bne.n	800abcc <UART_SetConfig+0x534>
 800ab6a:	4b58      	ldr	r3, [pc, #352]	@ (800accc <UART_SetConfig+0x634>)
 800ab6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab6e:	f003 0307 	and.w	r3, r3, #7
 800ab72:	2b05      	cmp	r3, #5
 800ab74:	d826      	bhi.n	800abc4 <UART_SetConfig+0x52c>
 800ab76:	a201      	add	r2, pc, #4	@ (adr r2, 800ab7c <UART_SetConfig+0x4e4>)
 800ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7c:	0800ab95 	.word	0x0800ab95
 800ab80:	0800ab9d 	.word	0x0800ab9d
 800ab84:	0800aba5 	.word	0x0800aba5
 800ab88:	0800abad 	.word	0x0800abad
 800ab8c:	0800abb5 	.word	0x0800abb5
 800ab90:	0800abbd 	.word	0x0800abbd
 800ab94:	2300      	movs	r3, #0
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9a:	e154      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba2:	e150      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aba4:	2308      	movs	r3, #8
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abaa:	e14c      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800abac:	2310      	movs	r3, #16
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb2:	e148      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800abb4:	2320      	movs	r3, #32
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e144      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800abbc:	2340      	movs	r3, #64	@ 0x40
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc2:	e140      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800abc4:	2380      	movs	r3, #128	@ 0x80
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e13c      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a41      	ldr	r2, [pc, #260]	@ (800acd8 <UART_SetConfig+0x640>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	f040 8082 	bne.w	800acdc <UART_SetConfig+0x644>
 800abd8:	4b3c      	ldr	r3, [pc, #240]	@ (800accc <UART_SetConfig+0x634>)
 800abda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abe0:	2b28      	cmp	r3, #40	@ 0x28
 800abe2:	d86d      	bhi.n	800acc0 <UART_SetConfig+0x628>
 800abe4:	a201      	add	r2, pc, #4	@ (adr r2, 800abec <UART_SetConfig+0x554>)
 800abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abea:	bf00      	nop
 800abec:	0800ac91 	.word	0x0800ac91
 800abf0:	0800acc1 	.word	0x0800acc1
 800abf4:	0800acc1 	.word	0x0800acc1
 800abf8:	0800acc1 	.word	0x0800acc1
 800abfc:	0800acc1 	.word	0x0800acc1
 800ac00:	0800acc1 	.word	0x0800acc1
 800ac04:	0800acc1 	.word	0x0800acc1
 800ac08:	0800acc1 	.word	0x0800acc1
 800ac0c:	0800ac99 	.word	0x0800ac99
 800ac10:	0800acc1 	.word	0x0800acc1
 800ac14:	0800acc1 	.word	0x0800acc1
 800ac18:	0800acc1 	.word	0x0800acc1
 800ac1c:	0800acc1 	.word	0x0800acc1
 800ac20:	0800acc1 	.word	0x0800acc1
 800ac24:	0800acc1 	.word	0x0800acc1
 800ac28:	0800acc1 	.word	0x0800acc1
 800ac2c:	0800aca1 	.word	0x0800aca1
 800ac30:	0800acc1 	.word	0x0800acc1
 800ac34:	0800acc1 	.word	0x0800acc1
 800ac38:	0800acc1 	.word	0x0800acc1
 800ac3c:	0800acc1 	.word	0x0800acc1
 800ac40:	0800acc1 	.word	0x0800acc1
 800ac44:	0800acc1 	.word	0x0800acc1
 800ac48:	0800acc1 	.word	0x0800acc1
 800ac4c:	0800aca9 	.word	0x0800aca9
 800ac50:	0800acc1 	.word	0x0800acc1
 800ac54:	0800acc1 	.word	0x0800acc1
 800ac58:	0800acc1 	.word	0x0800acc1
 800ac5c:	0800acc1 	.word	0x0800acc1
 800ac60:	0800acc1 	.word	0x0800acc1
 800ac64:	0800acc1 	.word	0x0800acc1
 800ac68:	0800acc1 	.word	0x0800acc1
 800ac6c:	0800acb1 	.word	0x0800acb1
 800ac70:	0800acc1 	.word	0x0800acc1
 800ac74:	0800acc1 	.word	0x0800acc1
 800ac78:	0800acc1 	.word	0x0800acc1
 800ac7c:	0800acc1 	.word	0x0800acc1
 800ac80:	0800acc1 	.word	0x0800acc1
 800ac84:	0800acc1 	.word	0x0800acc1
 800ac88:	0800acc1 	.word	0x0800acc1
 800ac8c:	0800acb9 	.word	0x0800acb9
 800ac90:	2301      	movs	r3, #1
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac96:	e0d6      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ac98:	2304      	movs	r3, #4
 800ac9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9e:	e0d2      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aca0:	2308      	movs	r3, #8
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca6:	e0ce      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800aca8:	2310      	movs	r3, #16
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acae:	e0ca      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800acb0:	2320      	movs	r3, #32
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e0c6      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800acb8:	2340      	movs	r3, #64	@ 0x40
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e0c2      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800acc0:	2380      	movs	r3, #128	@ 0x80
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e0be      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800acc8:	40011400 	.word	0x40011400
 800accc:	58024400 	.word	0x58024400
 800acd0:	40007800 	.word	0x40007800
 800acd4:	40007c00 	.word	0x40007c00
 800acd8:	40011800 	.word	0x40011800
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4aad      	ldr	r2, [pc, #692]	@ (800af98 <UART_SetConfig+0x900>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d176      	bne.n	800add4 <UART_SetConfig+0x73c>
 800ace6:	4bad      	ldr	r3, [pc, #692]	@ (800af9c <UART_SetConfig+0x904>)
 800ace8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acee:	2b28      	cmp	r3, #40	@ 0x28
 800acf0:	d86c      	bhi.n	800adcc <UART_SetConfig+0x734>
 800acf2:	a201      	add	r2, pc, #4	@ (adr r2, 800acf8 <UART_SetConfig+0x660>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad9d 	.word	0x0800ad9d
 800acfc:	0800adcd 	.word	0x0800adcd
 800ad00:	0800adcd 	.word	0x0800adcd
 800ad04:	0800adcd 	.word	0x0800adcd
 800ad08:	0800adcd 	.word	0x0800adcd
 800ad0c:	0800adcd 	.word	0x0800adcd
 800ad10:	0800adcd 	.word	0x0800adcd
 800ad14:	0800adcd 	.word	0x0800adcd
 800ad18:	0800ada5 	.word	0x0800ada5
 800ad1c:	0800adcd 	.word	0x0800adcd
 800ad20:	0800adcd 	.word	0x0800adcd
 800ad24:	0800adcd 	.word	0x0800adcd
 800ad28:	0800adcd 	.word	0x0800adcd
 800ad2c:	0800adcd 	.word	0x0800adcd
 800ad30:	0800adcd 	.word	0x0800adcd
 800ad34:	0800adcd 	.word	0x0800adcd
 800ad38:	0800adad 	.word	0x0800adad
 800ad3c:	0800adcd 	.word	0x0800adcd
 800ad40:	0800adcd 	.word	0x0800adcd
 800ad44:	0800adcd 	.word	0x0800adcd
 800ad48:	0800adcd 	.word	0x0800adcd
 800ad4c:	0800adcd 	.word	0x0800adcd
 800ad50:	0800adcd 	.word	0x0800adcd
 800ad54:	0800adcd 	.word	0x0800adcd
 800ad58:	0800adb5 	.word	0x0800adb5
 800ad5c:	0800adcd 	.word	0x0800adcd
 800ad60:	0800adcd 	.word	0x0800adcd
 800ad64:	0800adcd 	.word	0x0800adcd
 800ad68:	0800adcd 	.word	0x0800adcd
 800ad6c:	0800adcd 	.word	0x0800adcd
 800ad70:	0800adcd 	.word	0x0800adcd
 800ad74:	0800adcd 	.word	0x0800adcd
 800ad78:	0800adbd 	.word	0x0800adbd
 800ad7c:	0800adcd 	.word	0x0800adcd
 800ad80:	0800adcd 	.word	0x0800adcd
 800ad84:	0800adcd 	.word	0x0800adcd
 800ad88:	0800adcd 	.word	0x0800adcd
 800ad8c:	0800adcd 	.word	0x0800adcd
 800ad90:	0800adcd 	.word	0x0800adcd
 800ad94:	0800adcd 	.word	0x0800adcd
 800ad98:	0800adc5 	.word	0x0800adc5
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada2:	e050      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ada4:	2304      	movs	r3, #4
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adaa:	e04c      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800adac:	2308      	movs	r3, #8
 800adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb2:	e048      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800adb4:	2310      	movs	r3, #16
 800adb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adba:	e044      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800adbc:	2320      	movs	r3, #32
 800adbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adc2:	e040      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800adc4:	2340      	movs	r3, #64	@ 0x40
 800adc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adca:	e03c      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800adcc:	2380      	movs	r3, #128	@ 0x80
 800adce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add2:	e038      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a71      	ldr	r2, [pc, #452]	@ (800afa0 <UART_SetConfig+0x908>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d130      	bne.n	800ae40 <UART_SetConfig+0x7a8>
 800adde:	4b6f      	ldr	r3, [pc, #444]	@ (800af9c <UART_SetConfig+0x904>)
 800ade0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	2b05      	cmp	r3, #5
 800ade8:	d826      	bhi.n	800ae38 <UART_SetConfig+0x7a0>
 800adea:	a201      	add	r2, pc, #4	@ (adr r2, 800adf0 <UART_SetConfig+0x758>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae09 	.word	0x0800ae09
 800adf4:	0800ae11 	.word	0x0800ae11
 800adf8:	0800ae19 	.word	0x0800ae19
 800adfc:	0800ae21 	.word	0x0800ae21
 800ae00:	0800ae29 	.word	0x0800ae29
 800ae04:	0800ae31 	.word	0x0800ae31
 800ae08:	2302      	movs	r3, #2
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0e:	e01a      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ae10:	2304      	movs	r3, #4
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae16:	e016      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ae18:	2308      	movs	r3, #8
 800ae1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1e:	e012      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ae20:	2310      	movs	r3, #16
 800ae22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae26:	e00e      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ae28:	2320      	movs	r3, #32
 800ae2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2e:	e00a      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ae30:	2340      	movs	r3, #64	@ 0x40
 800ae32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae36:	e006      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ae38:	2380      	movs	r3, #128	@ 0x80
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3e:	e002      	b.n	800ae46 <UART_SetConfig+0x7ae>
 800ae40:	2380      	movs	r3, #128	@ 0x80
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a55      	ldr	r2, [pc, #340]	@ (800afa0 <UART_SetConfig+0x908>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	f040 80f8 	bne.w	800b042 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	dc46      	bgt.n	800aee8 <UART_SetConfig+0x850>
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	db75      	blt.n	800af4a <UART_SetConfig+0x8b2>
 800ae5e:	3b02      	subs	r3, #2
 800ae60:	2b1e      	cmp	r3, #30
 800ae62:	d872      	bhi.n	800af4a <UART_SetConfig+0x8b2>
 800ae64:	a201      	add	r2, pc, #4	@ (adr r2, 800ae6c <UART_SetConfig+0x7d4>)
 800ae66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6a:	bf00      	nop
 800ae6c:	0800aeef 	.word	0x0800aeef
 800ae70:	0800af4b 	.word	0x0800af4b
 800ae74:	0800aef7 	.word	0x0800aef7
 800ae78:	0800af4b 	.word	0x0800af4b
 800ae7c:	0800af4b 	.word	0x0800af4b
 800ae80:	0800af4b 	.word	0x0800af4b
 800ae84:	0800af07 	.word	0x0800af07
 800ae88:	0800af4b 	.word	0x0800af4b
 800ae8c:	0800af4b 	.word	0x0800af4b
 800ae90:	0800af4b 	.word	0x0800af4b
 800ae94:	0800af4b 	.word	0x0800af4b
 800ae98:	0800af4b 	.word	0x0800af4b
 800ae9c:	0800af4b 	.word	0x0800af4b
 800aea0:	0800af4b 	.word	0x0800af4b
 800aea4:	0800af17 	.word	0x0800af17
 800aea8:	0800af4b 	.word	0x0800af4b
 800aeac:	0800af4b 	.word	0x0800af4b
 800aeb0:	0800af4b 	.word	0x0800af4b
 800aeb4:	0800af4b 	.word	0x0800af4b
 800aeb8:	0800af4b 	.word	0x0800af4b
 800aebc:	0800af4b 	.word	0x0800af4b
 800aec0:	0800af4b 	.word	0x0800af4b
 800aec4:	0800af4b 	.word	0x0800af4b
 800aec8:	0800af4b 	.word	0x0800af4b
 800aecc:	0800af4b 	.word	0x0800af4b
 800aed0:	0800af4b 	.word	0x0800af4b
 800aed4:	0800af4b 	.word	0x0800af4b
 800aed8:	0800af4b 	.word	0x0800af4b
 800aedc:	0800af4b 	.word	0x0800af4b
 800aee0:	0800af4b 	.word	0x0800af4b
 800aee4:	0800af3d 	.word	0x0800af3d
 800aee8:	2b40      	cmp	r3, #64	@ 0x40
 800aeea:	d02a      	beq.n	800af42 <UART_SetConfig+0x8aa>
 800aeec:	e02d      	b.n	800af4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aeee:	f7fe f9df 	bl	80092b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800aef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aef4:	e02f      	b.n	800af56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe f9ee 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af04:	e027      	b.n	800af56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af06:	f107 0318 	add.w	r3, r7, #24
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fe fb3a 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af14:	e01f      	b.n	800af56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af16:	4b21      	ldr	r3, [pc, #132]	@ (800af9c <UART_SetConfig+0x904>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0320 	and.w	r3, r3, #32
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d009      	beq.n	800af36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af22:	4b1e      	ldr	r3, [pc, #120]	@ (800af9c <UART_SetConfig+0x904>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	08db      	lsrs	r3, r3, #3
 800af28:	f003 0303 	and.w	r3, r3, #3
 800af2c:	4a1d      	ldr	r2, [pc, #116]	@ (800afa4 <UART_SetConfig+0x90c>)
 800af2e:	fa22 f303 	lsr.w	r3, r2, r3
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af34:	e00f      	b.n	800af56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800af36:	4b1b      	ldr	r3, [pc, #108]	@ (800afa4 <UART_SetConfig+0x90c>)
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af3a:	e00c      	b.n	800af56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af3c:	4b1a      	ldr	r3, [pc, #104]	@ (800afa8 <UART_SetConfig+0x910>)
 800af3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af40:	e009      	b.n	800af56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af48:	e005      	b.n	800af56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 81ee 	beq.w	800b33a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af62:	4a12      	ldr	r2, [pc, #72]	@ (800afac <UART_SetConfig+0x914>)
 800af64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af68:	461a      	mov	r2, r3
 800af6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af70:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	4613      	mov	r3, r2
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	4413      	add	r3, r2
 800af7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af7e:	429a      	cmp	r2, r3
 800af80:	d305      	bcc.n	800af8e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d910      	bls.n	800afb0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af94:	e1d1      	b.n	800b33a <UART_SetConfig+0xca2>
 800af96:	bf00      	nop
 800af98:	40011c00 	.word	0x40011c00
 800af9c:	58024400 	.word	0x58024400
 800afa0:	58000c00 	.word	0x58000c00
 800afa4:	03d09000 	.word	0x03d09000
 800afa8:	003d0900 	.word	0x003d0900
 800afac:	0800bafc 	.word	0x0800bafc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb2:	2200      	movs	r2, #0
 800afb4:	60bb      	str	r3, [r7, #8]
 800afb6:	60fa      	str	r2, [r7, #12]
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afbc:	4ac0      	ldr	r2, [pc, #768]	@ (800b2c0 <UART_SetConfig+0xc28>)
 800afbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	2200      	movs	r2, #0
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	607a      	str	r2, [r7, #4]
 800afca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afd2:	f7f5 f98b 	bl	80002ec <__aeabi_uldivmod>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4610      	mov	r0, r2
 800afdc:	4619      	mov	r1, r3
 800afde:	f04f 0200 	mov.w	r2, #0
 800afe2:	f04f 0300 	mov.w	r3, #0
 800afe6:	020b      	lsls	r3, r1, #8
 800afe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afec:	0202      	lsls	r2, r0, #8
 800afee:	6979      	ldr	r1, [r7, #20]
 800aff0:	6849      	ldr	r1, [r1, #4]
 800aff2:	0849      	lsrs	r1, r1, #1
 800aff4:	2000      	movs	r0, #0
 800aff6:	460c      	mov	r4, r1
 800aff8:	4605      	mov	r5, r0
 800affa:	eb12 0804 	adds.w	r8, r2, r4
 800affe:	eb43 0905 	adc.w	r9, r3, r5
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	469a      	mov	sl, r3
 800b00a:	4693      	mov	fp, r2
 800b00c:	4652      	mov	r2, sl
 800b00e:	465b      	mov	r3, fp
 800b010:	4640      	mov	r0, r8
 800b012:	4649      	mov	r1, r9
 800b014:	f7f5 f96a 	bl	80002ec <__aeabi_uldivmod>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4613      	mov	r3, r2
 800b01e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b026:	d308      	bcc.n	800b03a <UART_SetConfig+0x9a2>
 800b028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b02e:	d204      	bcs.n	800b03a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b036:	60da      	str	r2, [r3, #12]
 800b038:	e17f      	b.n	800b33a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b040:	e17b      	b.n	800b33a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b04a:	f040 80bd 	bne.w	800b1c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b04e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b052:	2b20      	cmp	r3, #32
 800b054:	dc48      	bgt.n	800b0e8 <UART_SetConfig+0xa50>
 800b056:	2b00      	cmp	r3, #0
 800b058:	db7b      	blt.n	800b152 <UART_SetConfig+0xaba>
 800b05a:	2b20      	cmp	r3, #32
 800b05c:	d879      	bhi.n	800b152 <UART_SetConfig+0xaba>
 800b05e:	a201      	add	r2, pc, #4	@ (adr r2, 800b064 <UART_SetConfig+0x9cc>)
 800b060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b064:	0800b0ef 	.word	0x0800b0ef
 800b068:	0800b0f7 	.word	0x0800b0f7
 800b06c:	0800b153 	.word	0x0800b153
 800b070:	0800b153 	.word	0x0800b153
 800b074:	0800b0ff 	.word	0x0800b0ff
 800b078:	0800b153 	.word	0x0800b153
 800b07c:	0800b153 	.word	0x0800b153
 800b080:	0800b153 	.word	0x0800b153
 800b084:	0800b10f 	.word	0x0800b10f
 800b088:	0800b153 	.word	0x0800b153
 800b08c:	0800b153 	.word	0x0800b153
 800b090:	0800b153 	.word	0x0800b153
 800b094:	0800b153 	.word	0x0800b153
 800b098:	0800b153 	.word	0x0800b153
 800b09c:	0800b153 	.word	0x0800b153
 800b0a0:	0800b153 	.word	0x0800b153
 800b0a4:	0800b11f 	.word	0x0800b11f
 800b0a8:	0800b153 	.word	0x0800b153
 800b0ac:	0800b153 	.word	0x0800b153
 800b0b0:	0800b153 	.word	0x0800b153
 800b0b4:	0800b153 	.word	0x0800b153
 800b0b8:	0800b153 	.word	0x0800b153
 800b0bc:	0800b153 	.word	0x0800b153
 800b0c0:	0800b153 	.word	0x0800b153
 800b0c4:	0800b153 	.word	0x0800b153
 800b0c8:	0800b153 	.word	0x0800b153
 800b0cc:	0800b153 	.word	0x0800b153
 800b0d0:	0800b153 	.word	0x0800b153
 800b0d4:	0800b153 	.word	0x0800b153
 800b0d8:	0800b153 	.word	0x0800b153
 800b0dc:	0800b153 	.word	0x0800b153
 800b0e0:	0800b153 	.word	0x0800b153
 800b0e4:	0800b145 	.word	0x0800b145
 800b0e8:	2b40      	cmp	r3, #64	@ 0x40
 800b0ea:	d02e      	beq.n	800b14a <UART_SetConfig+0xab2>
 800b0ec:	e031      	b.n	800b152 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0ee:	f7fc fa1d 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 800b0f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0f4:	e033      	b.n	800b15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0f6:	f7fc fa2f 	bl	8007558 <HAL_RCC_GetPCLK2Freq>
 800b0fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0fc:	e02f      	b.n	800b15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b102:	4618      	mov	r0, r3
 800b104:	f7fe f8ea 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b10c:	e027      	b.n	800b15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b10e:	f107 0318 	add.w	r3, r7, #24
 800b112:	4618      	mov	r0, r3
 800b114:	f7fe fa36 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b11c:	e01f      	b.n	800b15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b11e:	4b69      	ldr	r3, [pc, #420]	@ (800b2c4 <UART_SetConfig+0xc2c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b00      	cmp	r3, #0
 800b128:	d009      	beq.n	800b13e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b12a:	4b66      	ldr	r3, [pc, #408]	@ (800b2c4 <UART_SetConfig+0xc2c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	08db      	lsrs	r3, r3, #3
 800b130:	f003 0303 	and.w	r3, r3, #3
 800b134:	4a64      	ldr	r2, [pc, #400]	@ (800b2c8 <UART_SetConfig+0xc30>)
 800b136:	fa22 f303 	lsr.w	r3, r2, r3
 800b13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b13c:	e00f      	b.n	800b15e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b13e:	4b62      	ldr	r3, [pc, #392]	@ (800b2c8 <UART_SetConfig+0xc30>)
 800b140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b142:	e00c      	b.n	800b15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b144:	4b61      	ldr	r3, [pc, #388]	@ (800b2cc <UART_SetConfig+0xc34>)
 800b146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b148:	e009      	b.n	800b15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b14a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b150:	e005      	b.n	800b15e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b15c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 80ea 	beq.w	800b33a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16a:	4a55      	ldr	r2, [pc, #340]	@ (800b2c0 <UART_SetConfig+0xc28>)
 800b16c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b170:	461a      	mov	r2, r3
 800b172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b174:	fbb3 f3f2 	udiv	r3, r3, r2
 800b178:	005a      	lsls	r2, r3, #1
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	441a      	add	r2, r3
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18e:	2b0f      	cmp	r3, #15
 800b190:	d916      	bls.n	800b1c0 <UART_SetConfig+0xb28>
 800b192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b198:	d212      	bcs.n	800b1c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	f023 030f 	bic.w	r3, r3, #15
 800b1a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a6:	085b      	lsrs	r3, r3, #1
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	f003 0307 	and.w	r3, r3, #7
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b1bc:	60da      	str	r2, [r3, #12]
 800b1be:	e0bc      	b.n	800b33a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1c6:	e0b8      	b.n	800b33a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1cc:	2b20      	cmp	r3, #32
 800b1ce:	dc4b      	bgt.n	800b268 <UART_SetConfig+0xbd0>
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f2c0 8087 	blt.w	800b2e4 <UART_SetConfig+0xc4c>
 800b1d6:	2b20      	cmp	r3, #32
 800b1d8:	f200 8084 	bhi.w	800b2e4 <UART_SetConfig+0xc4c>
 800b1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e4 <UART_SetConfig+0xb4c>)
 800b1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e2:	bf00      	nop
 800b1e4:	0800b26f 	.word	0x0800b26f
 800b1e8:	0800b277 	.word	0x0800b277
 800b1ec:	0800b2e5 	.word	0x0800b2e5
 800b1f0:	0800b2e5 	.word	0x0800b2e5
 800b1f4:	0800b27f 	.word	0x0800b27f
 800b1f8:	0800b2e5 	.word	0x0800b2e5
 800b1fc:	0800b2e5 	.word	0x0800b2e5
 800b200:	0800b2e5 	.word	0x0800b2e5
 800b204:	0800b28f 	.word	0x0800b28f
 800b208:	0800b2e5 	.word	0x0800b2e5
 800b20c:	0800b2e5 	.word	0x0800b2e5
 800b210:	0800b2e5 	.word	0x0800b2e5
 800b214:	0800b2e5 	.word	0x0800b2e5
 800b218:	0800b2e5 	.word	0x0800b2e5
 800b21c:	0800b2e5 	.word	0x0800b2e5
 800b220:	0800b2e5 	.word	0x0800b2e5
 800b224:	0800b29f 	.word	0x0800b29f
 800b228:	0800b2e5 	.word	0x0800b2e5
 800b22c:	0800b2e5 	.word	0x0800b2e5
 800b230:	0800b2e5 	.word	0x0800b2e5
 800b234:	0800b2e5 	.word	0x0800b2e5
 800b238:	0800b2e5 	.word	0x0800b2e5
 800b23c:	0800b2e5 	.word	0x0800b2e5
 800b240:	0800b2e5 	.word	0x0800b2e5
 800b244:	0800b2e5 	.word	0x0800b2e5
 800b248:	0800b2e5 	.word	0x0800b2e5
 800b24c:	0800b2e5 	.word	0x0800b2e5
 800b250:	0800b2e5 	.word	0x0800b2e5
 800b254:	0800b2e5 	.word	0x0800b2e5
 800b258:	0800b2e5 	.word	0x0800b2e5
 800b25c:	0800b2e5 	.word	0x0800b2e5
 800b260:	0800b2e5 	.word	0x0800b2e5
 800b264:	0800b2d7 	.word	0x0800b2d7
 800b268:	2b40      	cmp	r3, #64	@ 0x40
 800b26a:	d037      	beq.n	800b2dc <UART_SetConfig+0xc44>
 800b26c:	e03a      	b.n	800b2e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b26e:	f7fc f95d 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 800b272:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b274:	e03c      	b.n	800b2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b276:	f7fc f96f 	bl	8007558 <HAL_RCC_GetPCLK2Freq>
 800b27a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b27c:	e038      	b.n	800b2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b27e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe f82a 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b28c:	e030      	b.n	800b2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b28e:	f107 0318 	add.w	r3, r7, #24
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe f976 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b29c:	e028      	b.n	800b2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b29e:	4b09      	ldr	r3, [pc, #36]	@ (800b2c4 <UART_SetConfig+0xc2c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0320 	and.w	r3, r3, #32
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d012      	beq.n	800b2d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2aa:	4b06      	ldr	r3, [pc, #24]	@ (800b2c4 <UART_SetConfig+0xc2c>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	08db      	lsrs	r3, r3, #3
 800b2b0:	f003 0303 	and.w	r3, r3, #3
 800b2b4:	4a04      	ldr	r2, [pc, #16]	@ (800b2c8 <UART_SetConfig+0xc30>)
 800b2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2bc:	e018      	b.n	800b2f0 <UART_SetConfig+0xc58>
 800b2be:	bf00      	nop
 800b2c0:	0800bafc 	.word	0x0800bafc
 800b2c4:	58024400 	.word	0x58024400
 800b2c8:	03d09000 	.word	0x03d09000
 800b2cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b2d0:	4b24      	ldr	r3, [pc, #144]	@ (800b364 <UART_SetConfig+0xccc>)
 800b2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d4:	e00c      	b.n	800b2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2d6:	4b24      	ldr	r3, [pc, #144]	@ (800b368 <UART_SetConfig+0xcd0>)
 800b2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2da:	e009      	b.n	800b2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2e2:	e005      	b.n	800b2f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2ee:	bf00      	nop
    }

    if (pclk != 0U)
 800b2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d021      	beq.n	800b33a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fa:	4a1c      	ldr	r2, [pc, #112]	@ (800b36c <UART_SetConfig+0xcd4>)
 800b2fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b300:	461a      	mov	r2, r3
 800b302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b304:	fbb3 f2f2 	udiv	r2, r3, r2
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	085b      	lsrs	r3, r3, #1
 800b30e:	441a      	add	r2, r3
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	fbb2 f3f3 	udiv	r3, r2, r3
 800b318:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31c:	2b0f      	cmp	r3, #15
 800b31e:	d909      	bls.n	800b334 <UART_SetConfig+0xc9c>
 800b320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b326:	d205      	bcs.n	800b334 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	60da      	str	r2, [r3, #12]
 800b332:	e002      	b.n	800b33a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	2201      	movs	r2, #1
 800b346:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2200      	movs	r2, #0
 800b34e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2200      	movs	r2, #0
 800b354:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b356:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3748      	adds	r7, #72	@ 0x48
 800b35e:	46bd      	mov	sp, r7
 800b360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b364:	03d09000 	.word	0x03d09000
 800b368:	003d0900 	.word	0x003d0900
 800b36c:	0800bafc 	.word	0x0800bafc

0800b370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b37c:	f003 0308 	and.w	r3, r3, #8
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c0:	f003 0302 	and.w	r3, r3, #2
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00a      	beq.n	800b3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e2:	f003 0304 	and.w	r3, r3, #4
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b404:	f003 0310 	and.w	r3, r3, #16
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00a      	beq.n	800b422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	430a      	orrs	r2, r1
 800b420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b426:	f003 0320 	and.w	r3, r3, #32
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01a      	beq.n	800b486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	430a      	orrs	r2, r1
 800b464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b46a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b46e:	d10a      	bne.n	800b486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00a      	beq.n	800b4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	605a      	str	r2, [r3, #4]
  }
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b098      	sub	sp, #96	@ 0x60
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4c4:	f7f5 fe90 	bl	80011e8 <HAL_GetTick>
 800b4c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d12f      	bne.n	800b538 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f88e 	bl	800b608 <UART_WaitOnFlagUntilTimeout>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d022      	beq.n	800b538 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fa:	e853 3f00 	ldrex	r3, [r3]
 800b4fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b506:	653b      	str	r3, [r7, #80]	@ 0x50
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	461a      	mov	r2, r3
 800b50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b510:	647b      	str	r3, [r7, #68]	@ 0x44
 800b512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e6      	bne.n	800b4f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2220      	movs	r2, #32
 800b528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e063      	b.n	800b600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0304 	and.w	r3, r3, #4
 800b542:	2b04      	cmp	r3, #4
 800b544:	d149      	bne.n	800b5da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b546:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b54e:	2200      	movs	r2, #0
 800b550:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f857 	bl	800b608 <UART_WaitOnFlagUntilTimeout>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d03c      	beq.n	800b5da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	623b      	str	r3, [r7, #32]
   return(result);
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b57e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b580:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e6      	bne.n	800b560 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3308      	adds	r3, #8
 800b598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f023 0301 	bic.w	r3, r3, #1
 800b5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3308      	adds	r3, #8
 800b5b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5b2:	61fa      	str	r2, [r7, #28]
 800b5b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b6:	69b9      	ldr	r1, [r7, #24]
 800b5b8:	69fa      	ldr	r2, [r7, #28]
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	617b      	str	r3, [r7, #20]
   return(result);
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e5      	bne.n	800b592 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e012      	b.n	800b600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2220      	movs	r2, #32
 800b5de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2220      	movs	r2, #32
 800b5e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3758      	adds	r7, #88	@ 0x58
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	603b      	str	r3, [r7, #0]
 800b614:	4613      	mov	r3, r2
 800b616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b618:	e04f      	b.n	800b6ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b620:	d04b      	beq.n	800b6ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b622:	f7f5 fde1 	bl	80011e8 <HAL_GetTick>
 800b626:	4602      	mov	r2, r0
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d302      	bcc.n	800b638 <UART_WaitOnFlagUntilTimeout+0x30>
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e04e      	b.n	800b6da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 0304 	and.w	r3, r3, #4
 800b646:	2b00      	cmp	r3, #0
 800b648:	d037      	beq.n	800b6ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	2b80      	cmp	r3, #128	@ 0x80
 800b64e:	d034      	beq.n	800b6ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b40      	cmp	r3, #64	@ 0x40
 800b654:	d031      	beq.n	800b6ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	69db      	ldr	r3, [r3, #28]
 800b65c:	f003 0308 	and.w	r3, r3, #8
 800b660:	2b08      	cmp	r3, #8
 800b662:	d110      	bne.n	800b686 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2208      	movs	r2, #8
 800b66a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f000 f839 	bl	800b6e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2208      	movs	r2, #8
 800b676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e029      	b.n	800b6da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b694:	d111      	bne.n	800b6ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b69e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 f81f 	bl	800b6e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e00f      	b.n	800b6da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	69da      	ldr	r2, [r3, #28]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	bf0c      	ite	eq
 800b6ca:	2301      	moveq	r3, #1
 800b6cc:	2300      	movne	r3, #0
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	79fb      	ldrb	r3, [r7, #7]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d0a0      	beq.n	800b61a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
	...

0800b6e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b095      	sub	sp, #84	@ 0x54
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f4:	e853 3f00 	ldrex	r3, [r3]
 800b6f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b70c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b710:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b712:	e841 2300 	strex	r3, r2, [r1]
 800b716:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1e6      	bne.n	800b6ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	e853 3f00 	ldrex	r3, [r3]
 800b72c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b72e:	69fa      	ldr	r2, [r7, #28]
 800b730:	4b1e      	ldr	r3, [pc, #120]	@ (800b7ac <UART_EndRxTransfer+0xc8>)
 800b732:	4013      	ands	r3, r2
 800b734:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3308      	adds	r3, #8
 800b73c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b73e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b740:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b746:	e841 2300 	strex	r3, r2, [r1]
 800b74a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1e5      	bne.n	800b71e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b756:	2b01      	cmp	r3, #1
 800b758:	d118      	bne.n	800b78c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	e853 3f00 	ldrex	r3, [r3]
 800b766:	60bb      	str	r3, [r7, #8]
   return(result);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f023 0310 	bic.w	r3, r3, #16
 800b76e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	461a      	mov	r2, r3
 800b776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b778:	61bb      	str	r3, [r7, #24]
 800b77a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77c:	6979      	ldr	r1, [r7, #20]
 800b77e:	69ba      	ldr	r2, [r7, #24]
 800b780:	e841 2300 	strex	r3, r2, [r1]
 800b784:	613b      	str	r3, [r7, #16]
   return(result);
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e6      	bne.n	800b75a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2220      	movs	r2, #32
 800b790:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7a0:	bf00      	nop
 800b7a2:	3754      	adds	r7, #84	@ 0x54
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	effffffe 	.word	0xeffffffe

0800b7b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f7fe ff4c 	bl	800a66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	61bb      	str	r3, [r7, #24]
 800b804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b806:	6979      	ldr	r1, [r7, #20]
 800b808:	69ba      	ldr	r2, [r7, #24]
 800b80a:	e841 2300 	strex	r3, r2, [r1]
 800b80e:	613b      	str	r3, [r7, #16]
   return(result);
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1e6      	bne.n	800b7e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2220      	movs	r2, #32
 800b81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7fe ff17 	bl	800a658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b82a:	bf00      	nop
 800b82c:	3720      	adds	r7, #32
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b862:	bf00      	nop
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b86e:	b480      	push	{r7}
 800b870:	b085      	sub	sp, #20
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d101      	bne.n	800b884 <HAL_UARTEx_DisableFifoMode+0x16>
 800b880:	2302      	movs	r3, #2
 800b882:	e027      	b.n	800b8d4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2224      	movs	r2, #36	@ 0x24
 800b890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f022 0201 	bic.w	r2, r2, #1
 800b8aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d101      	bne.n	800b8f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	e02d      	b.n	800b954 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2224      	movs	r2, #36	@ 0x24
 800b904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f022 0201 	bic.w	r2, r2, #1
 800b91e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	430a      	orrs	r2, r1
 800b932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f84f 	bl	800b9d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2220      	movs	r2, #32
 800b946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d101      	bne.n	800b974 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b970:	2302      	movs	r3, #2
 800b972:	e02d      	b.n	800b9d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2224      	movs	r2, #36	@ 0x24
 800b980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f022 0201 	bic.w	r2, r2, #1
 800b99a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f811 	bl	800b9d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2220      	movs	r2, #32
 800b9c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d108      	bne.n	800b9fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9f8:	e031      	b.n	800ba5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9fa:	2310      	movs	r3, #16
 800b9fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9fe:	2310      	movs	r3, #16
 800ba00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	0e5b      	lsrs	r3, r3, #25
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	f003 0307 	and.w	r3, r3, #7
 800ba10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	0f5b      	lsrs	r3, r3, #29
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	f003 0307 	and.w	r3, r3, #7
 800ba20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	7b3a      	ldrb	r2, [r7, #12]
 800ba26:	4911      	ldr	r1, [pc, #68]	@ (800ba6c <UARTEx_SetNbDataToProcess+0x94>)
 800ba28:	5c8a      	ldrb	r2, [r1, r2]
 800ba2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba2e:	7b3a      	ldrb	r2, [r7, #12]
 800ba30:	490f      	ldr	r1, [pc, #60]	@ (800ba70 <UARTEx_SetNbDataToProcess+0x98>)
 800ba32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba34:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
 800ba42:	7b7a      	ldrb	r2, [r7, #13]
 800ba44:	4909      	ldr	r1, [pc, #36]	@ (800ba6c <UARTEx_SetNbDataToProcess+0x94>)
 800ba46:	5c8a      	ldrb	r2, [r1, r2]
 800ba48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba4c:	7b7a      	ldrb	r2, [r7, #13]
 800ba4e:	4908      	ldr	r1, [pc, #32]	@ (800ba70 <UARTEx_SetNbDataToProcess+0x98>)
 800ba50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba52:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba5e:	bf00      	nop
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	0800bb14 	.word	0x0800bb14
 800ba70:	0800bb1c 	.word	0x0800bb1c

0800ba74 <memset>:
 800ba74:	4402      	add	r2, r0
 800ba76:	4603      	mov	r3, r0
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d100      	bne.n	800ba7e <memset+0xa>
 800ba7c:	4770      	bx	lr
 800ba7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba82:	e7f9      	b.n	800ba78 <memset+0x4>

0800ba84 <__libc_init_array>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	4d0d      	ldr	r5, [pc, #52]	@ (800babc <__libc_init_array+0x38>)
 800ba88:	4c0d      	ldr	r4, [pc, #52]	@ (800bac0 <__libc_init_array+0x3c>)
 800ba8a:	1b64      	subs	r4, r4, r5
 800ba8c:	10a4      	asrs	r4, r4, #2
 800ba8e:	2600      	movs	r6, #0
 800ba90:	42a6      	cmp	r6, r4
 800ba92:	d109      	bne.n	800baa8 <__libc_init_array+0x24>
 800ba94:	4d0b      	ldr	r5, [pc, #44]	@ (800bac4 <__libc_init_array+0x40>)
 800ba96:	4c0c      	ldr	r4, [pc, #48]	@ (800bac8 <__libc_init_array+0x44>)
 800ba98:	f000 f818 	bl	800bacc <_init>
 800ba9c:	1b64      	subs	r4, r4, r5
 800ba9e:	10a4      	asrs	r4, r4, #2
 800baa0:	2600      	movs	r6, #0
 800baa2:	42a6      	cmp	r6, r4
 800baa4:	d105      	bne.n	800bab2 <__libc_init_array+0x2e>
 800baa6:	bd70      	pop	{r4, r5, r6, pc}
 800baa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800baac:	4798      	blx	r3
 800baae:	3601      	adds	r6, #1
 800bab0:	e7ee      	b.n	800ba90 <__libc_init_array+0xc>
 800bab2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bab6:	4798      	blx	r3
 800bab8:	3601      	adds	r6, #1
 800baba:	e7f2      	b.n	800baa2 <__libc_init_array+0x1e>
 800babc:	0800bb2c 	.word	0x0800bb2c
 800bac0:	0800bb2c 	.word	0x0800bb2c
 800bac4:	0800bb2c 	.word	0x0800bb2c
 800bac8:	0800bb30 	.word	0x0800bb30

0800bacc <_init>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	bf00      	nop
 800bad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad2:	bc08      	pop	{r3}
 800bad4:	469e      	mov	lr, r3
 800bad6:	4770      	bx	lr

0800bad8 <_fini>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	bf00      	nop
 800badc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bade:	bc08      	pop	{r3}
 800bae0:	469e      	mov	lr, r3
 800bae2:	4770      	bx	lr
