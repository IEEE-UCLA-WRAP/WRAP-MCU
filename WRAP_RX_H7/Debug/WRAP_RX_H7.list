
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6b0  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800d960  0800d960  0000e960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db88  0800db88  0000eb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db90  0800db90  0000eb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800db94  0800db94  0000eb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000464  24000000  0800db98  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001ae0c  24000464  0800dffc  0000f464  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2401b270  0800dffc  00010270  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f464  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c31e  00000000  00000000  0000f492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003165  00000000  00000000  0002b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015c8  00000000  00000000  0002e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010f1  00000000  00000000  0002fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d1c  00000000  00000000  00030fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d528  00000000  00000000  00063ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001549e1  00000000  00000000  00081215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001d5bf6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006244  00000000  00000000  001d5cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001dbef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00001363  00000000  00000000  001dbf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000010  00000000  00000000  001dd2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000464 	.word	0x24000464
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d948 	.word	0x0800d948

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000468 	.word	0x24000468
 80002ec:	0800d948 	.word	0x0800d948

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e6:	f000 fde9 	bl	80011bc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 f91f 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f879 	bl	80006e4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f2:	f000 f939 	bl	8000868 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 faff 	bl	8000bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 fadd 	bl	8000bb8 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fe:	f000 f963 	bl	80008c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000602:	f000 f9df 	bl	80009c4 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fa8b 	bl	8000b20 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800060a:	f000 fa3b 	bl	8000a84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
  HAL_ADC_Start(&hadc2);
 800060e:	4827      	ldr	r0, [pc, #156]	@ (80006ac <main+0xcc>)
 8000610:	f001 fcfa 	bl	8002008 <HAL_ADC_Start>

  // Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000614:	f241 1294 	movw	r2, #4500	@ 0x1194
 8000618:	4925      	ldr	r1, [pc, #148]	@ (80006b0 <main+0xd0>)
 800061a:	4826      	ldr	r0, [pc, #152]	@ (80006b4 <main+0xd4>)
 800061c:	f002 fce0 	bl	8002fe0 <HAL_ADCEx_MultiModeStart_DMA>
  // NATHAN CHANGE: Changed samples to be a regular array
  uint16_t * samples;
  uint8_t packet_found;

  // setup params
  params_r params = {.CL_phase = 0,
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <main+0xd8>)
 800063a:	617b      	str	r3, [r7, #20]
//	buff_flag_2 = RESET;

	// TODO: Bring back Demod code
	// execute one buffer at a time. Look at SWV console to see if computation time is too long
	// alias buffer for ease
	if (buff_flag_1) {
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <main+0xdc>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <main+0x6a>
	  samples = buffer_1;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <main+0xe0>)
 8000648:	61fb      	str	r3, [r7, #28]
	}
	if (buff_flag_2) {
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <main+0xe4>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <main+0x78>
	  samples = buffer_2;
 8000654:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <main+0xe8>)
 8000656:	61fb      	str	r3, [r7, #28]
	}

	if (buff_flag_1 || buff_flag_2) {
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <main+0xdc>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d104      	bne.n	800066c <main+0x8c>
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <main+0xe4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0e7      	beq.n	800063c <main+0x5c>
	  packet_found = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	76fb      	strb	r3, [r7, #27]
	  // demodulate buffer
	  start = __HAL_TIM_GET_COUNTER(&htim2);
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <main+0xec>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <main+0xf0>)
 8000678:	6013      	str	r3, [r2, #0]
	  num_symbs = demodulate(buffer_1, temp_symbs, &params);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	461a      	mov	r2, r3
 800067e:	4915      	ldr	r1, [pc, #84]	@ (80006d4 <main+0xf4>)
 8000680:	480f      	ldr	r0, [pc, #60]	@ (80006c0 <main+0xe0>)
 8000682:	f000 fbd3 	bl	8000e2c <demodulate>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <main+0xf8>)
 800068c:	601a      	str	r2, [r3, #0]
	  end = __HAL_TIM_GET_COUNTER(&htim2);
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <main+0xec>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000694:	4a11      	ldr	r2, [pc, #68]	@ (80006dc <main+0xfc>)
 8000696:	6013      	str	r3, [r2, #0]
//				HAL_UART_Transmit(&huart3, (uint8_t *)t_str, sizeof(t_str), 100);
//			}
//
//			total_symbs = 0;
//	  }
	  buff_process = RESET;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <main+0x100>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 800069e:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <main+0xdc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <main+0xe4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	if (buff_flag_1) {
 80006aa:	e7c7      	b.n	800063c <main+0x5c>
 80006ac:	240004e4 	.word	0x240004e4
 80006b0:	240006a0 	.word	0x240006a0
 80006b4:	24000480 	.word	0x24000480
 80006b8:	42c80000 	.word	0x42c80000
 80006bc:	240093f8 	.word	0x240093f8
 80006c0:	24004cf0 	.word	0x24004cf0
 80006c4:	240093f9 	.word	0x240093f9
 80006c8:	24007018 	.word	0x24007018
 80006cc:	240005c0 	.word	0x240005c0
 80006d0:	240093fc 	.word	0x240093fc
 80006d4:	24009340 	.word	0x24009340
 80006d8:	24009404 	.word	0x24009404
 80006dc:	24009400 	.word	0x24009400
 80006e0:	240093fa 	.word	0x240093fa

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0a4      	sub	sp, #144	@ 0x90
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006ee:	224c      	movs	r2, #76	@ 0x4c
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00c f908 	bl	800c908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fc:	2220      	movs	r2, #32
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f00c f901 	bl	800c908 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
 8000716:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000718:	4b51      	ldr	r3, [pc, #324]	@ (8000860 <SystemClock_Config+0x17c>)
 800071a:	f04f 32ff 	mov.w	r2, #4294967295
 800071e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000722:	2004      	movs	r0, #4
 8000724:	f006 f83a 	bl	800679c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b4d      	ldr	r3, [pc, #308]	@ (8000864 <SystemClock_Config+0x180>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a4c      	ldr	r2, [pc, #304]	@ (8000864 <SystemClock_Config+0x180>)
 8000732:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b4a      	ldr	r3, [pc, #296]	@ (8000864 <SystemClock_Config+0x180>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000744:	bf00      	nop
 8000746:	4b47      	ldr	r3, [pc, #284]	@ (8000864 <SystemClock_Config+0x180>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800074e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000752:	d1f8      	bne.n	8000746 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000754:	f006 f812 	bl	800677c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000758:	4b41      	ldr	r3, [pc, #260]	@ (8000860 <SystemClock_Config+0x17c>)
 800075a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800075c:	4a40      	ldr	r2, [pc, #256]	@ (8000860 <SystemClock_Config+0x17c>)
 800075e:	f023 0318 	bic.w	r3, r3, #24
 8000762:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000764:	2327      	movs	r3, #39	@ 0x27
 8000766:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000772:	2301      	movs	r3, #1
 8000774:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000776:	2340      	movs	r3, #64	@ 0x40
 8000778:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800077a:	2301      	movs	r3, #1
 800077c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	2302      	movs	r3, #2
 8000784:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 800078a:	2346      	movs	r3, #70	@ 0x46
 800078c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000792:	2304      	movs	r3, #4
 8000794:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079c:	230c      	movs	r3, #12
 800079e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 f84c 	bl	8006850 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80007be:	f000 fd29 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	233f      	movs	r3, #63	@ 0x3f
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d2:	2340      	movs	r3, #64	@ 0x40
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d6:	2340      	movs	r3, #64	@ 0x40
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e0:	2340      	movs	r3, #64	@ 0x40
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e8:	2106      	movs	r1, #6
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 fc62 	bl	80070b4 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x116>
  {
    Error_Handler();
 80007f6:	f000 fd0d 	bl	8001214 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007fe:	2100      	movs	r1, #0
 8000800:	2000      	movs	r0, #0
 8000802:	f006 fe0d 	bl	8007420 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000806:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800080a:	2100      	movs	r1, #0
 800080c:	2001      	movs	r0, #1
 800080e:	f006 fe07 	bl	8007420 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <SystemClock_Config+0x17c>)
 8000814:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000818:	4a11      	ldr	r2, [pc, #68]	@ (8000860 <SystemClock_Config+0x17c>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <SystemClock_Config+0x17c>)
 8000824:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000834:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000838:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800083e:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000844:	2322      	movs	r3, #34	@ 0x22
 8000846:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000848:	2320      	movs	r3, #32
 800084a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4618      	mov	r0, r3
 8000852:	f009 facb 	bl	8009dec <HAL_RCCEx_CRSConfig>
}
 8000856:	bf00      	nop
 8000858:	3790      	adds	r7, #144	@ 0x90
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	58024400 	.word	0x58024400
 8000864:	58024800 	.word	0x58024800

08000868 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0b0      	sub	sp, #192	@ 0xc0
 800086c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f00c f847 	bl	800c908 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800087a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 800088a:	2312      	movs	r3, #18
 800088c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800088e:	2303      	movs	r3, #3
 8000890:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800089a:	23c0      	movs	r3, #192	@ 0xc0
 800089c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80008a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4618      	mov	r0, r3
 80008b2:	f006 fff5 	bl	80078a0 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80008bc:	f000 fcaa 	bl	8001214 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	37c0      	adds	r7, #192	@ 0xc0
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	@ 0x28
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
 80008e8:	615a      	str	r2, [r3, #20]
 80008ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ec:	4b32      	ldr	r3, [pc, #200]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 80008ee:	4a33      	ldr	r2, [pc, #204]	@ (80009bc <MX_ADC1_Init+0xf4>)
 80008f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f2:	4b31      	ldr	r3, [pc, #196]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fe:	4b2e      	ldr	r3, [pc, #184]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000904:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000906:	2204      	movs	r2, #4
 8000908:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 800090c:	2200      	movs	r2, #0
 800090e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000910:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000912:	2201      	movs	r2, #1
 8000914:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000916:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000918:	2201      	movs	r2, #1
 800091a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091c:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 800091e:	2200      	movs	r2, #0
 8000920:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000922:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000928:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800092e:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000930:	2203      	movs	r2, #3
 8000932:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000934:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 800093c:	2200      	movs	r2, #0
 800093e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000940:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000948:	481b      	ldr	r0, [pc, #108]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 800094a:	f001 fa03 	bl	8001d54 <HAL_ADC_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000954:	f000 fc5e 	bl	8001214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000958:	2307      	movs	r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 800095c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000960:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 8000962:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4812      	ldr	r0, [pc, #72]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 8000970:	f002 fc38 	bl	80031e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800097a:	f000 fc4b 	bl	8001214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_ADC1_Init+0xf8>)
 8000980:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000982:	2306      	movs	r3, #6
 8000984:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800098a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800098e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000990:	2304      	movs	r3, #4
 8000992:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_ADC1_Init+0xf0>)
 80009a2:	f001 fe19 	bl	80025d8 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80009ac:	f000 fc32 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	@ 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	24000480 	.word	0x24000480
 80009bc:	40022000 	.word	0x40022000
 80009c0:	0c900008 	.word	0x0c900008

080009c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009dc:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 80009de:	4a27      	ldr	r2, [pc, #156]	@ (8000a7c <MX_ADC2_Init+0xb8>)
 80009e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009e2:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009e8:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a2c:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a2e:	f001 f991 	bl	8001d54 <HAL_ADC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000a38:	f000 fbec 	bl	8001214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_ADC2_Init+0xbc>)
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a40:	2306      	movs	r3, #6
 8000a42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a48:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <MX_ADC2_Init+0xb4>)
 8000a60:	f001 fdba 	bl	80025d8 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000a6a:	f000 fbd3 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	240004e4 	.word	0x240004e4
 8000a7c:	40022100 	.word	0x40022100
 8000a80:	0c900008 	.word	0x0c900008

08000a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000aac:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000ab0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000aba:	f04f 32ff 	mov.w	r2, #4294967295
 8000abe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000acc:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ace:	f009 fb47 	bl	800a160 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ad8:	f000 fb9c 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000aea:	f009 fb91 	bl	800a210 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000af4:	f000 fb8e 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000b06:	f009 fdbf 	bl	800a688 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b10:	f000 fb80 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	240005c0 	.word	0x240005c0

08000b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b24:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b26:	4a23      	ldr	r2, [pc, #140]	@ (8000bb4 <MX_USART3_UART_Init+0x94>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b62:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b68:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b6a:	f009 fe1b 	bl	800a7a4 <HAL_UART_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b74:	f000 fb4e 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b7c:	f00b fb60 	bl	800c240 <HAL_UARTEx_SetTxFifoThreshold>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b86:	f000 fb45 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f00b fb95 	bl	800c2bc <HAL_UARTEx_SetRxFifoThreshold>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b98:	f000 fb3c 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b9e:	f00b fb16 	bl	800c1ce <HAL_UARTEx_DisableFifoMode>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba8:	f000 fb34 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2400060c 	.word	0x2400060c
 8000bb4:	40004800 	.word	0x40004800

08000bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_DMA_Init+0x3c>)
 8000bc0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <MX_DMA_Init+0x3c>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_DMA_Init+0x3c>)
 8000bd0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	200b      	movs	r0, #11
 8000be2:	f002 fc76 	bl	80034d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000be6:	200b      	movs	r0, #11
 8000be8:	f002 fc8d 	bl	8003506 <HAL_NVIC_EnableIRQ>

}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c14:	4a38      	ldr	r2, [pc, #224]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c1e:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2c:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c32:	4a31      	ldr	r2, [pc, #196]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c38:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c50:	4a29      	ldr	r2, [pc, #164]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c5a:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c6e:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_GPIO_Init+0x100>)
 8000c7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	481c      	ldr	r0, [pc, #112]	@ (8000cfc <MX_GPIO_Init+0x104>)
 8000c8c:	f005 fd5c 	bl	8006748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c90:	2320      	movs	r3, #32
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4815      	ldr	r0, [pc, #84]	@ (8000cfc <MX_GPIO_Init+0x104>)
 8000ca8:	f005 fb9e 	bl	80063e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_GPIO_Init+0x108>)
 8000cca:	f005 fb8d 	bl	80063e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_GPIO_Init+0x104>)
 8000cec:	f005 fb7c 	bl	80063e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	@ 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020000 	.word	0x58020000
 8000d00:	58020800 	.word	0x58020800

08000d04 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2120      	movs	r1, #32
 8000d10:	481a      	ldr	r0, [pc, #104]	@ (8000d7c <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000d12:	f005 fd19 	bl	8006748 <HAL_GPIO_WritePin>

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d129      	bne.n	8000d74 <HAL_ADC_ConvHalfCpltCallback+0x70>
	  buff_process = SET;
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = SET;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e018      	b.n	8000d6a <HAL_ADC_ConvHalfCpltCallback+0x66>
	  {
		  buffer_1[2*j] = (uint16_t)(adc_buf[j]&0x0000FFFF);
 8000d38:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	b291      	uxth	r1, r2
 8000d46:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000d48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_1[2*j+1] = (uint16_t)(adc_buf[j]>>16);
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d8c <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	0c1a      	lsrs	r2, r3, #16
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b291      	uxth	r1, r2
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000d60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3301      	adds	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8000d70:	4293      	cmp	r3, r2
 8000d72:	dde1      	ble.n	8000d38 <HAL_ADC_ConvHalfCpltCallback+0x34>
	  }
  }
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58020000 	.word	0x58020000
 8000d80:	240093fa 	.word	0x240093fa
 8000d84:	240093f8 	.word	0x240093f8
 8000d88:	240093f9 	.word	0x240093f9
 8000d8c:	240006a0 	.word	0x240006a0
 8000d90:	24004cf0 	.word	0x24004cf0

08000d94 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2120      	movs	r1, #32
 8000da0:	481c      	ldr	r0, [pc, #112]	@ (8000e14 <HAL_ADC_ConvCpltCallback+0x80>)
 8000da2:	f005 fcd1 	bl	8006748 <HAL_GPIO_WritePin>

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000da6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <HAL_ADC_ConvCpltCallback+0x84>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d12d      	bne.n	8000e0c <HAL_ADC_ConvCpltCallback+0x78>
	  buff_process = SET;
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_ADC_ConvCpltCallback+0x84>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = SET;
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_ADC_ConvCpltCallback+0x88>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	e01c      	b.n	8000e02 <HAL_ADC_ConvCpltCallback+0x6e>
		  buffer_2[2*j] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]&0x0000FFFF);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f603 03ca 	addw	r3, r3, #2250	@ 0x8ca
 8000dce:	4a15      	ldr	r2, [pc, #84]	@ (8000e24 <HAL_ADC_ConvCpltCallback+0x90>)
 8000dd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	b291      	uxth	r1, r2
 8000dda:	4a13      	ldr	r2, [pc, #76]	@ (8000e28 <HAL_ADC_ConvCpltCallback+0x94>)
 8000ddc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_2[2*j+1] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]>>16);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f603 03ca 	addw	r3, r3, #2250	@ 0x8ca
 8000de6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <HAL_ADC_ConvCpltCallback+0x90>)
 8000de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dec:	0c1a      	lsrs	r2, r3, #16
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	3301      	adds	r3, #1
 8000df4:	b291      	uxth	r1, r2
 8000df6:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <HAL_ADC_ConvCpltCallback+0x94>)
 8000df8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	dddd      	ble.n	8000dc8 <HAL_ADC_ConvCpltCallback+0x34>
	  }
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	58020000 	.word	0x58020000
 8000e18:	240093fa 	.word	0x240093fa
 8000e1c:	240093f9 	.word	0x240093f9
 8000e20:	240093f8 	.word	0x240093f8
 8000e24:	240006a0 	.word	0x240006a0
 8000e28:	24007018 	.word	0x24007018

08000e2c <demodulate>:
// TODO: Bring back these
int demodulate(const uint16_t * samples, int * symbs, params_r * params) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]

    normalize(samples, norm_samples);
 8000e38:	4925      	ldr	r1, [pc, #148]	@ (8000ed0 <demodulate+0xa4>)
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f000 f9f0 	bl	8001220 <normalize>

//     Costas Loop
    costas_loop(norm_samples, samples_d, params);
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4924      	ldr	r1, [pc, #144]	@ (8000ed4 <demodulate+0xa8>)
 8000e44:	4822      	ldr	r0, [pc, #136]	@ (8000ed0 <demodulate+0xa4>)
 8000e46:	f000 f84f 	bl	8000ee8 <costas_loop>
    // filter w SRRC
    arm_conv_f32(samples_d, ADC_BUF_LEN, RRC, RRC_LEN, filtered_samps);
 8000e4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <demodulate+0xac>)
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	23fb      	movs	r3, #251	@ 0xfb
 8000e50:	4a22      	ldr	r2, [pc, #136]	@ (8000edc <demodulate+0xb0>)
 8000e52:	f241 1194 	movw	r1, #4500	@ 0x1194
 8000e56:	481f      	ldr	r0, [pc, #124]	@ (8000ed4 <demodulate+0xa8>)
 8000e58:	f00b fabc 	bl	800c3d4 <arm_conv_f32>
    // readjust window
    float shift = RRC_LEN/2. - 0.5;
 8000e5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <demodulate+0xb4>)
 8000e5e:	61bb      	str	r3, [r7, #24]
    int k;
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 8000e60:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e68:	ee17 3a90 	vmov	r3, s15
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e01a      	b.n	8000ea6 <demodulate+0x7a>
        k = i - shift;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e86:	ee17 3a90 	vmov	r3, s15
 8000e8a:	617b      	str	r3, [r7, #20]
        filtered_samps[k] = filtered_samps[i];
 8000e8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <demodulate+0xac>)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4910      	ldr	r1, [pc, #64]	@ (8000ed8 <demodulate+0xac>)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	601a      	str	r2, [r3, #0]
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb0:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000ee4 <demodulate+0xb8>
 8000eb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	d4d4      	bmi.n	8000e70 <demodulate+0x44>
//    // timing recovery
//    int bit_len = timing_recovery(filtered_samps, symbs, params);
//
//    return bit_len;
    // TODO: Delete this
    return 0;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	24009408 	.word	0x24009408
 8000ed4:	2400da58 	.word	0x2400da58
 8000ed8:	240166f8 	.word	0x240166f8
 8000edc:	24000000 	.word	0x24000000
 8000ee0:	42fa0000 	.word	0x42fa0000
 8000ee4:	45947000 	.word	0x45947000

08000ee8 <costas_loop>:

void costas_loop(float * norm_samples, float * samples_d, params_r * params) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	ed2d 8b02 	vpush	{d8}
 8000eee:	b0b2      	sub	sp, #200	@ 0xc8
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
    float phase = params->CL_phase;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    float inph[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8000f00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f04:	222c      	movs	r2, #44	@ 0x2c
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00b fcfd 	bl	800c908 <memset>
    float quad[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8000f0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f12:	222c      	movs	r2, #44	@ 0x2c
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00b fcf6 	bl	800c908 <memset>
    float inph_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 8000f1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
    float quad_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	615a      	str	r2, [r3, #20]
    double error = 0;
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    float integrator = 0; //params->CL_integrator;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    float kp = 8.5;
 8000f54:	4b94      	ldr	r3, [pc, #592]	@ (80011a8 <costas_loop+0x2c0>)
 8000f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    float ki = 0.1;
 8000f5a:	4b94      	ldr	r3, [pc, #592]	@ (80011ac <costas_loop+0x2c4>)
 8000f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float dt = (float)FC / (float)FS;
 8000f60:	4b93      	ldr	r3, [pc, #588]	@ (80011b0 <costas_loop+0x2c8>)
 8000f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 8000f66:	2305      	movs	r3, #5
 8000f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000f6c:	e0e7      	b.n	800113e <costas_loop+0x256>
        // define t from microcontroller
        int k = i - ORDER;
 8000f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f72:	3b05      	subs	r3, #5
 8000f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        inph_[ORDER] = norm_samples[k]*2*cos(2*M_PI*dt*k + phase);
 8000f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f8a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000f8e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8000f92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f96:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 80011a0 <costas_loop+0x2b8>
 8000f9a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000faa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fae:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8000fb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fba:	eeb0 0b47 	vmov.f64	d0, d7
 8000fbe:	f00b fd17 	bl	800c9f0 <cos>
 8000fc2:	eeb0 7b40 	vmov.f64	d7, d0
 8000fc6:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000fca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fce:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        quad_[ORDER] = norm_samples[k]*-2*sin(2*M_PI*dt*k + phase);
 8000fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8000fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000fec:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8000ff0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff4:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 80011a0 <costas_loop+0x2b8>
 8000ff8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001008:	ee26 6b07 	vmul.f64	d6, d6, d7
 800100c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001014:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001018:	eeb0 0b47 	vmov.f64	d0, d7
 800101c:	f00b fd34 	bl	800ca88 <sin>
 8001020:	eeb0 7b40 	vmov.f64	d7, d0
 8001024:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001028:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800102c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        arm_conv_f32(inph_, ORDER+1, lp, ORDER+1, inph);
 8001030:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001034:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2306      	movs	r3, #6
 800103c:	4a5d      	ldr	r2, [pc, #372]	@ (80011b4 <costas_loop+0x2cc>)
 800103e:	2106      	movs	r1, #6
 8001040:	f00b f9c8 	bl	800c3d4 <arm_conv_f32>
        arm_conv_f32(quad_, ORDER+1, lp, ORDER+1, quad);
 8001044:	f107 0010 	add.w	r0, r7, #16
 8001048:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2306      	movs	r3, #6
 8001050:	4a58      	ldr	r2, [pc, #352]	@ (80011b4 <costas_loop+0x2cc>)
 8001052:	2106      	movs	r1, #6
 8001054:	f00b f9be 	bl	800c3d4 <arm_conv_f32>

        samples_d[k] = inph[ORDER];
 8001058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	4413      	add	r3, r2
 8001062:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001066:	601a      	str	r2, [r3, #0]
        Quad[k] = quad[ORDER];
 8001068:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800106a:	4953      	ldr	r1, [pc, #332]	@ (80011b8 <costas_loop+0x2d0>)
 800106c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	601a      	str	r2, [r3, #0]

        error = inph[ORDER] * quad[ORDER];
 8001076:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800107a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800107e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001082:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001086:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
        integrator += ki*error;
 800108a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800108e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001092:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001096:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800109a:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 800109e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010aa:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
        phase = phase + kp*error + integrator;
 80010ae:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80010b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010b6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80010ba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80010be:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 80010c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010ca:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80010ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010da:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

        // shift the values of inph_ and quad_
        for (int jx = 1; jx < ORDER+1; jx++) {
 80010de:	2301      	movs	r3, #1
 80010e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80010e4:	e022      	b.n	800112c <costas_loop+0x244>
            inph_[jx-1] = inph_[jx];
 80010e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	32c0      	adds	r2, #192	@ 0xc0
 80010f4:	443a      	add	r2, r7
 80010f6:	3a98      	subs	r2, #152	@ 0x98
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	33c0      	adds	r3, #192	@ 0xc0
 80010fe:	443b      	add	r3, r7
 8001100:	3b98      	subs	r3, #152	@ 0x98
 8001102:	601a      	str	r2, [r3, #0]
            quad_[jx-1] = quad_[jx];
 8001104:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001108:	3b01      	subs	r3, #1
 800110a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	32c0      	adds	r2, #192	@ 0xc0
 8001112:	443a      	add	r2, r7
 8001114:	3ab0      	subs	r2, #176	@ 0xb0
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	33c0      	adds	r3, #192	@ 0xc0
 800111c:	443b      	add	r3, r7
 800111e:	3bb0      	subs	r3, #176	@ 0xb0
 8001120:	601a      	str	r2, [r3, #0]
        for (int jx = 1; jx < ORDER+1; jx++) {
 8001122:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001126:	3301      	adds	r3, #1
 8001128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800112c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001130:	2b05      	cmp	r3, #5
 8001132:	ddd8      	ble.n	80010e6 <costas_loop+0x1fe>
    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 8001134:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001138:	3301      	adds	r3, #1
 800113a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800113e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001142:	f241 1298 	movw	r2, #4504	@ 0x1198
 8001146:	4293      	cmp	r3, r2
 8001148:	f77f af11 	ble.w	8000f6e <costas_loop+0x86>
        }
    }
    params->CL_phase = remainder(phase, 2*M_PI);
 800114c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001150:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001154:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 80011a0 <costas_loop+0x2b8>
 8001158:	eeb0 0b47 	vmov.f64	d0, d7
 800115c:	f00b fc08 	bl	800c970 <remainder>
 8001160:	eeb0 7b40 	vmov.f64	d7, d0
 8001164:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edc3 7a01 	vstr	s15, [r3, #4]
    params->CL_integrator = remainder(integrator, 2*M_PI);
 800116e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001172:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001176:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 80011a0 <costas_loop+0x2b8>
 800117a:	eeb0 0b47 	vmov.f64	d0, d7
 800117e:	f00b fbf7 	bl	800c970 <remainder>
 8001182:	eeb0 7b40 	vmov.f64	d7, d0
 8001186:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	edc3 7a00 	vstr	s15, [r3]
}
 8001190:	bf00      	nop
 8001192:	37c0      	adds	r7, #192	@ 0xc0
 8001194:	46bd      	mov	sp, r7
 8001196:	ecbd 8b02 	vpop	{d8}
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f3af 8000 	nop.w
 80011a0:	54442d18 	.word	0x54442d18
 80011a4:	401921fb 	.word	0x401921fb
 80011a8:	41080000 	.word	0x41080000
 80011ac:	3dcccccd 	.word	0x3dcccccd
 80011b0:	3e408312 	.word	0x3e408312
 80011b4:	240003ec 	.word	0x240003ec
 80011b8:	240120a8 	.word	0x240120a8

080011bc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011ce:	f002 f9b5 	bl	800353c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011de:	231f      	movs	r3, #31
 80011e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011e2:	2387      	movs	r3, #135	@ 0x87
 80011e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011ea:	2300      	movs	r3, #0
 80011ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011fe:	463b      	mov	r3, r7
 8001200:	4618      	mov	r0, r3
 8001202:	f002 f9d3 	bl	80035ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001206:	2004      	movs	r0, #4
 8001208:	f002 f9b0 	bl	800356c <HAL_MPU_Enable>

}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <normalize>:
params: parameters that need to be stored intermediately
returns length of symbs array. symbs array must be
allocated for longer than samples/sps + some margin
*/

void normalize(const uint16_t * samples, float * norm_samples) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
        // Normalize signal
    float var = 0, mean = 0;
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
    // find mean
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	e011      	b.n	8001260 <normalize+0x40>
        mean += (float)samples[i];
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001266:	4293      	cmp	r3, r2
 8001268:	dde8      	ble.n	800123c <normalize+0x1c>
    }
    mean /= ADC_BUF_LEN;
 800126a:	ed97 7a06 	vldr	s14, [r7, #24]
 800126e:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001344 <normalize+0x124>
 8001272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001276:	edc7 7a06 	vstr	s15, [r7, #24]
    // find sample variance
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	e01b      	b.n	80012b8 <normalize+0x98>
        float temp = (float)samples[i]-mean;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001292:	edd7 7a06 	vldr	s15, [r7, #24]
 8001296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129a:	edc7 7a02 	vstr	s15, [r7, #8]
        var += temp * temp;
 800129e:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	3301      	adds	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f241 1293 	movw	r2, #4499	@ 0x1193
 80012be:	4293      	cmp	r3, r2
 80012c0:	ddde      	ble.n	8001280 <normalize+0x60>
    }
    var = var / (ADC_BUF_LEN-1);
 80012c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80012c6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001348 <normalize+0x128>
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	edc7 7a07 	vstr	s15, [r7, #28]
    var = sqrt(var)*25;
 80012d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012da:	eeb0 0b47 	vmov.f64	d0, d7
 80012de:	f00b fb67 	bl	800c9b0 <sqrt>
 80012e2:	eeb0 7b40 	vmov.f64	d7, d0
 80012e6:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 80012ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012f2:	edc7 7a07 	vstr	s15, [r7, #28]

    // normalize
    // divide by 60 arbitrary, just done to get to an ampltiude I used to tune gain values
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	e019      	b.n	8001330 <normalize+0x110>
        norm_samples[i] = (((float)samples[i]) - mean)/var;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800130e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001312:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001326:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001336:	4293      	cmp	r3, r2
 8001338:	dde0      	ble.n	80012fc <normalize+0xdc>
    }
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	458ca000 	.word	0x458ca000
 8001348:	458c9800 	.word	0x458c9800

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_MspInit+0x30>)
 8001354:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001358:	4a08      	ldr	r2, [pc, #32]	@ (800137c <HAL_MspInit+0x30>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_MspInit+0x30>)
 8001364:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	58024400 	.word	0x58024400

08001380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a59      	ldr	r2, [pc, #356]	@ (8001504 <HAL_ADC_MspInit+0x184>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d16c      	bne.n	800147c <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013a2:	4b59      	ldr	r3, [pc, #356]	@ (8001508 <HAL_ADC_MspInit+0x188>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a57      	ldr	r2, [pc, #348]	@ (8001508 <HAL_ADC_MspInit+0x188>)
 80013aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ac:	4b56      	ldr	r3, [pc, #344]	@ (8001508 <HAL_ADC_MspInit+0x188>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10e      	bne.n	80013d2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013b4:	4b55      	ldr	r3, [pc, #340]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80013b6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013ba:	4a54      	ldr	r2, [pc, #336]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80013bc:	f043 0320 	orr.w	r3, r3, #32
 80013c0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80013c4:	4b51      	ldr	r3, [pc, #324]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80013c6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b4e      	ldr	r3, [pc, #312]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80013d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013d8:	4a4c      	ldr	r2, [pc, #304]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013e2:	4b4a      	ldr	r3, [pc, #296]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80013e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f0:	2340      	movs	r3, #64	@ 0x40
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2303      	movs	r3, #3
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4843      	ldr	r0, [pc, #268]	@ (8001510 <HAL_ADC_MspInit+0x190>)
 8001404:	f004 fff0 	bl	80063e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001408:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 800140a:	4a43      	ldr	r2, [pc, #268]	@ (8001518 <HAL_ADC_MspInit+0x198>)
 800140c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800140e:	4b41      	ldr	r3, [pc, #260]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 8001410:	2209      	movs	r2, #9
 8001412:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001414:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800141a:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001420:	4b3c      	ldr	r3, [pc, #240]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 8001422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001426:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001428:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 800142a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800142e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001430:	4b38      	ldr	r3, [pc, #224]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 8001432:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001436:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001438:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 800143a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 8001442:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001446:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001448:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800144e:	4831      	ldr	r0, [pc, #196]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 8001450:	f002 f8ec 	bl	800362c <HAL_DMA_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 800145a:	f7ff fedb 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a2c      	ldr	r2, [pc, #176]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 8001462:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001464:	4a2b      	ldr	r2, [pc, #172]	@ (8001514 <HAL_ADC_MspInit+0x194>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2012      	movs	r0, #18
 8001470:	f002 f82f 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001474:	2012      	movs	r0, #18
 8001476:	f002 f846 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800147a:	e03f      	b.n	80014fc <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a26      	ldr	r2, [pc, #152]	@ (800151c <HAL_ADC_MspInit+0x19c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d13a      	bne.n	80014fc <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <HAL_ADC_MspInit+0x188>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <HAL_ADC_MspInit+0x188>)
 800148e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <HAL_ADC_MspInit+0x188>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d10e      	bne.n	80014b6 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 800149a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800149e:	4a1b      	ldr	r2, [pc, #108]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80014aa:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80014b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014bc:	4a13      	ldr	r2, [pc, #76]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_ADC_MspInit+0x18c>)
 80014c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014d4:	2340      	movs	r3, #64	@ 0x40
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	480a      	ldr	r0, [pc, #40]	@ (8001510 <HAL_ADC_MspInit+0x190>)
 80014e8:	f004 ff7e 	bl	80063e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2012      	movs	r0, #18
 80014f2:	f001 ffee 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014f6:	2012      	movs	r0, #18
 80014f8:	f002 f805 	bl	8003506 <HAL_NVIC_EnableIRQ>
}
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	@ 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40022000 	.word	0x40022000
 8001508:	2401b130 	.word	0x2401b130
 800150c:	58024400 	.word	0x58024400
 8001510:	58020000 	.word	0x58020000
 8001514:	24000548 	.word	0x24000548
 8001518:	40020010 	.word	0x40020010
 800151c:	40022100 	.word	0x40022100

08001520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001530:	d10e      	bne.n	8001550 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_TIM_Base_MspInit+0x3c>)
 8001534:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001538:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_TIM_Base_MspInit+0x3c>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_TIM_Base_MspInit+0x3c>)
 8001544:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	58024400 	.word	0x58024400

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ba      	sub	sp, #232	@ 0xe8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	22c0      	movs	r2, #192	@ 0xc0
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00b f9c1 	bl	800c908 <memset>
  if(huart->Instance==USART3)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a2b      	ldr	r2, [pc, #172]	@ (8001638 <HAL_UART_MspInit+0xd8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d14e      	bne.n	800162e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001590:	f04f 0202 	mov.w	r2, #2
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 f97a 	bl	80078a0 <HAL_RCCEx_PeriphCLKConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015b2:	f7ff fe2f 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b6:	4b21      	ldr	r3, [pc, #132]	@ (800163c <HAL_UART_MspInit+0xdc>)
 80015b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015bc:	4a1f      	ldr	r2, [pc, #124]	@ (800163c <HAL_UART_MspInit+0xdc>)
 80015be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80015c6:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <HAL_UART_MspInit+0xdc>)
 80015c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_UART_MspInit+0xdc>)
 80015d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015da:	4a18      	ldr	r2, [pc, #96]	@ (800163c <HAL_UART_MspInit+0xdc>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_UART_MspInit+0xdc>)
 80015e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800160c:	2307      	movs	r3, #7
 800160e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001616:	4619      	mov	r1, r3
 8001618:	4809      	ldr	r0, [pc, #36]	@ (8001640 <HAL_UART_MspInit+0xe0>)
 800161a:	f004 fee5 	bl	80063e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2027      	movs	r0, #39	@ 0x27
 8001624:	f001 ff55 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001628:	2027      	movs	r0, #39	@ 0x27
 800162a:	f001 ff6c 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	37e8      	adds	r7, #232	@ 0xe8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40004800 	.word	0x40004800
 800163c:	58024400 	.word	0x58024400
 8001640:	58020c00 	.word	0x58020c00

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169a:	f000 f939 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <DMA1_Stream0_IRQHandler+0x10>)
 80016aa:	f003 fb1b 	bl	8004ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000548 	.word	0x24000548

080016b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016bc:	4803      	ldr	r0, [pc, #12]	@ (80016cc <ADC_IRQHandler+0x14>)
 80016be:	f000 fd5d 	bl	800217c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80016c2:	4803      	ldr	r0, [pc, #12]	@ (80016d0 <ADC_IRQHandler+0x18>)
 80016c4:	f000 fd5a 	bl	800217c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	24000480 	.word	0x24000480
 80016d0:	240004e4 	.word	0x240004e4

080016d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <USART3_IRQHandler+0x10>)
 80016da:	f009 f8b3 	bl	800a844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2400060c 	.word	0x2400060c

080016e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016ec:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <SystemInit+0xd0>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f2:	4a31      	ldr	r2, [pc, #196]	@ (80017b8 <SystemInit+0xd0>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016fc:	4b2f      	ldr	r3, [pc, #188]	@ (80017bc <SystemInit+0xd4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	2b02      	cmp	r3, #2
 8001706:	d807      	bhi.n	8001718 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001708:	4b2c      	ldr	r3, [pc, #176]	@ (80017bc <SystemInit+0xd4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 030f 	bic.w	r3, r3, #15
 8001710:	4a2a      	ldr	r2, [pc, #168]	@ (80017bc <SystemInit+0xd4>)
 8001712:	f043 0303 	orr.w	r3, r3, #3
 8001716:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001718:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <SystemInit+0xd8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a28      	ldr	r2, [pc, #160]	@ (80017c0 <SystemInit+0xd8>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <SystemInit+0xd8>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800172a:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <SystemInit+0xd8>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4924      	ldr	r1, [pc, #144]	@ (80017c0 <SystemInit+0xd8>)
 8001730:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <SystemInit+0xdc>)
 8001732:	4013      	ands	r3, r2
 8001734:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001736:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <SystemInit+0xd4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001742:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <SystemInit+0xd4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 030f 	bic.w	r3, r3, #15
 800174a:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <SystemInit+0xd4>)
 800174c:	f043 0303 	orr.w	r3, r3, #3
 8001750:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001752:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <SystemInit+0xd8>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <SystemInit+0xd8>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <SystemInit+0xd8>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <SystemInit+0xd8>)
 8001766:	4a18      	ldr	r2, [pc, #96]	@ (80017c8 <SystemInit+0xe0>)
 8001768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <SystemInit+0xd8>)
 800176c:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <SystemInit+0xe4>)
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <SystemInit+0xd8>)
 8001772:	4a17      	ldr	r2, [pc, #92]	@ (80017d0 <SystemInit+0xe8>)
 8001774:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <SystemInit+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800177c:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <SystemInit+0xd8>)
 800177e:	4a14      	ldr	r2, [pc, #80]	@ (80017d0 <SystemInit+0xe8>)
 8001780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001782:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <SystemInit+0xd8>)
 8001784:	2200      	movs	r2, #0
 8001786:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <SystemInit+0xd8>)
 800178a:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <SystemInit+0xe8>)
 800178c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <SystemInit+0xd8>)
 8001790:	2200      	movs	r2, #0
 8001792:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001794:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <SystemInit+0xd8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a09      	ldr	r2, [pc, #36]	@ (80017c0 <SystemInit+0xd8>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800179e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017a0:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <SystemInit+0xd8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <SystemInit+0xec>)
 80017a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	52002000 	.word	0x52002000
 80017c0:	58024400 	.word	0x58024400
 80017c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017c8:	02020200 	.word	0x02020200
 80017cc:	01ff0000 	.word	0x01ff0000
 80017d0:	01010280 	.word	0x01010280
 80017d4:	52004000 	.word	0x52004000

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017dc:	f7ff ff84 	bl	80016e8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001806:	f00b f88d 	bl	800c924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7fe fee9 	bl	80005e0 <main>
  bx  lr
 800180e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001814:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001818:	24000464 	.word	0x24000464
  ldr r2, =_sidata
 800181c:	0800db98 	.word	0x0800db98
  ldr r2, =_sbss
 8001820:	24000464 	.word	0x24000464
  ldr r4, =_ebss
 8001824:	2401b270 	.word	0x2401b270

08001828 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <BDMA1_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001832:	2003      	movs	r0, #3
 8001834:	f001 fe42 	bl	80034bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001838:	f005 fe5c 	bl	80074f4 <HAL_RCC_GetSysClockFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_Init+0x68>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	4913      	ldr	r1, [pc, #76]	@ (8001898 <HAL_Init+0x6c>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_Init+0x68>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	4a0e      	ldr	r2, [pc, #56]	@ (8001898 <HAL_Init+0x6c>)
 8001860:	5cd3      	ldrb	r3, [r2, r3]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <HAL_Init+0x70>)
 800186e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001870:	4a0b      	ldr	r2, [pc, #44]	@ (80018a0 <HAL_Init+0x74>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001876:	200f      	movs	r0, #15
 8001878:	f000 f814 	bl	80018a4 <HAL_InitTick>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e002      	b.n	800188c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001886:	f7ff fd61 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	58024400 	.word	0x58024400
 8001898:	0800d960 	.word	0x0800d960
 800189c:	24000408 	.word	0x24000408
 80018a0:	24000404 	.word	0x24000404

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_InitTick+0x60>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e021      	b.n	80018fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_InitTick+0x64>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_InitTick+0x60>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fe27 	bl	8003522 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f001 fdf1 	bl	80034d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	@ (800190c <HAL_InitTick+0x68>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	24000410 	.word	0x24000410
 8001908:	24000404 	.word	0x24000404
 800190c:	2400040c 	.word	0x2400040c

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	24000410 	.word	0x24000410
 8001934:	2401b134 	.word	0x2401b134

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2401b134 	.word	0x2401b134

08001950 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <HAL_GetREVID+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0c1b      	lsrs	r3, r3, #16
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	5c001000 	.word	0x5c001000

08001968 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	609a      	str	r2, [r3, #8]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3360      	adds	r3, #96	@ 0x60
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	611a      	str	r2, [r3, #16]
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b087      	sub	sp, #28
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3360      	adds	r3, #96	@ 0x60
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b087      	sub	sp, #28
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3330      	adds	r3, #48	@ 0x30
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	4413      	add	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	211f      	movs	r1, #31
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0e9b      	lsrs	r3, r3, #26
 8001ad6:	f003 011f 	and.w	r1, r3, #31
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aea:	bf00      	nop
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3314      	adds	r3, #20
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	0e5b      	lsrs	r3, r3, #25
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	0d1b      	lsrs	r3, r3, #20
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2107      	movs	r1, #7
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	401a      	ands	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	0d1b      	lsrs	r3, r3, #20
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0318 	and.w	r3, r3, #24
 8001b96:	4908      	ldr	r1, [pc, #32]	@ (8001bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b98:	40d9      	lsrs	r1, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	000fffff 	.word	0x000fffff

08001bbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6093      	str	r3, [r2, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	5fffffc0 	.word	0x5fffffc0

08001c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	6fffffc0 	.word	0x6fffffc0

08001c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <LL_ADC_Enable+0x24>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	f043 0201 	orr.w	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	7fffffc0 	.word	0x7fffffc0

08001cb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <LL_ADC_IsEnabled+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_ADC_IsEnabled+0x1a>
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <LL_ADC_REG_StartConversion+0x24>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	f043 0204 	orr.w	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	7fffffc0 	.word	0x7fffffc0

08001d08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d101      	bne.n	8001d20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d101      	bne.n	8001d46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e138      	b.n	8001fe0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff faff 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff3f 	bl	8001c18 <LL_ADC_IsDeepPowerDownEnabled>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d004      	beq.n	8001daa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff25 	bl	8001bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff5a 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d114      	bne.n	8001de4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff3e 	bl	8001c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc4:	4b88      	ldr	r3, [pc, #544]	@ (8001fe8 <HAL_ADC_Init+0x294>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	4a88      	ldr	r2, [pc, #544]	@ (8001fec <HAL_ADC_Init+0x298>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dd6:	e002      	b.n	8001dde <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff3d 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10d      	bne.n	8001e10 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff77 	bl	8001d08 <LL_ADC_REG_IsConversionOngoing>
 8001e1a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 80d2 	bne.w	8001fce <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 80ce 	bne.w	8001fce <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e36:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e3a:	f043 0202 	orr.w	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff36 	bl	8001cb8 <LL_ADC_IsEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d110      	bne.n	8001e74 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e52:	4867      	ldr	r0, [pc, #412]	@ (8001ff0 <HAL_ADC_Init+0x29c>)
 8001e54:	f7ff ff30 	bl	8001cb8 <LL_ADC_IsEnabled>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	4866      	ldr	r0, [pc, #408]	@ (8001ff4 <HAL_ADC_Init+0x2a0>)
 8001e5c:	f7ff ff2c 	bl	8001cb8 <LL_ADC_IsEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4323      	orrs	r3, r4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4862      	ldr	r0, [pc, #392]	@ (8001ff8 <HAL_ADC_Init+0x2a4>)
 8001e70:	f7ff fd7a 	bl	8001968 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7d5b      	ldrb	r3, [r3, #21]
 8001e78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e7e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001e84:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7f1b      	ldrb	r3, [r3, #28]
 8001e8a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7f1b      	ldrb	r3, [r3, #28]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	045b      	lsls	r3, r3, #17
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	@ (8001ffc <HAL_ADC_Init+0x2a8>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	69b9      	ldr	r1, [r7, #24]
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff14 	bl	8001d08 <LL_ADC_REG_IsConversionOngoing>
 8001ee0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff21 	bl	8001d2e <LL_ADC_INJ_IsConversionOngoing>
 8001eec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d14a      	bne.n	8001f8a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d147      	bne.n	8001f8a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7d1b      	ldrb	r3, [r3, #20]
 8001efe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002000 <HAL_ADC_Init+0x2ac>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	69b9      	ldr	r1, [r7, #24]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d11b      	bne.n	8001f5e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	4b34      	ldr	r3, [pc, #208]	@ (8002004 <HAL_ADC_Init+0x2b0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	0411      	lsls	r1, r2, #16
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	e007      	b.n	8001f6e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 ff21 	bl	8002dcc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10c      	bne.n	8001fac <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	f023 010f 	bic.w	r1, r3, #15
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001faa:	e007      	b.n	8001fbc <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 020f 	bic.w	r2, r2, #15
 8001fba:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f023 0303 	bic.w	r3, r3, #3
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fcc:	e007      	b.n	8001fde <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3724      	adds	r7, #36	@ 0x24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd90      	pop	{r4, r7, pc}
 8001fe8:	24000404 	.word	0x24000404
 8001fec:	053e2d63 	.word	0x053e2d63
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40022100 	.word	0x40022100
 8001ff8:	40022300 	.word	0x40022300
 8001ffc:	fff0c003 	.word	0xfff0c003
 8002000:	ffffbffc 	.word	0xffffbffc
 8002004:	fc00f81e 	.word	0xfc00f81e

08002008 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002010:	4856      	ldr	r0, [pc, #344]	@ (800216c <HAL_ADC_Start+0x164>)
 8002012:	f7ff fdd3 	bl	8001bbc <LL_ADC_GetMultimode>
 8002016:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fe73 	bl	8001d08 <LL_ADC_REG_IsConversionOngoing>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 809a 	bne.w	800215e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADC_Start+0x30>
 8002034:	2302      	movs	r3, #2
 8002036:	e095      	b.n	8002164 <HAL_ADC_Start+0x15c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fdb3 	bl	8002bac <ADC_Enable>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 8081 	bne.w	8002154 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002056:	4b46      	ldr	r3, [pc, #280]	@ (8002170 <HAL_ADC_Start+0x168>)
 8002058:	4013      	ands	r3, r2
 800205a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a43      	ldr	r2, [pc, #268]	@ (8002174 <HAL_ADC_Start+0x16c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d002      	beq.n	8002072 <HAL_ADC_Start+0x6a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	e000      	b.n	8002074 <HAL_ADC_Start+0x6c>
 8002072:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HAL_ADC_Start+0x170>)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4293      	cmp	r3, r2
 800207a:	d002      	beq.n	8002082 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002086:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800209a:	d106      	bne.n	80020aa <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	f023 0206 	bic.w	r2, r3, #6
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	221c      	movs	r2, #28
 80020b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <HAL_ADC_Start+0x16c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d002      	beq.n	80020d0 <HAL_ADC_Start+0xc8>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	e000      	b.n	80020d2 <HAL_ADC_Start+0xca>
 80020d0:	4b29      	ldr	r3, [pc, #164]	@ (8002178 <HAL_ADC_Start+0x170>)
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d008      	beq.n	80020ec <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d002      	beq.n	80020ec <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	d114      	bne.n	8002116 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002102:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fde6 	bl	8001ce0 <LL_ADC_REG_StartConversion>
 8002114:	e025      	b.n	8002162 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a13      	ldr	r2, [pc, #76]	@ (8002174 <HAL_ADC_Start+0x16c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d002      	beq.n	8002132 <HAL_ADC_Start+0x12a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	e000      	b.n	8002134 <HAL_ADC_Start+0x12c>
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_ADC_Start+0x170>)
 8002134:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00f      	beq.n	8002162 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002146:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800214a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54
 8002152:	e006      	b.n	8002162 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800215c:	e001      	b.n	8002162 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002162:	7dfb      	ldrb	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40022300 	.word	0x40022300
 8002170:	fffff0fe 	.word	0xfffff0fe
 8002174:	40022100 	.word	0x40022100
 8002178:	40022000 	.word	0x40022000

0800217c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	@ 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002198:	4882      	ldr	r0, [pc, #520]	@ (80023a4 <HAL_ADC_IRQHandler+0x228>)
 800219a:	f7ff fd0f 	bl	8001bbc <LL_ADC_GetMultimode>
 800219e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d017      	beq.n	80021da <HAL_ADC_IRQHandler+0x5e>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d012      	beq.n	80021da <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 ffff 	bl	80031d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <HAL_ADC_IRQHandler+0x72>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8083 	beq.w	8002300 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d07d      	beq.n	8002300 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fc29 	bl	8001a78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d062      	beq.n	80022f2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a5d      	ldr	r2, [pc, #372]	@ (80023a8 <HAL_ADC_IRQHandler+0x22c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d002      	beq.n	800223c <HAL_ADC_IRQHandler+0xc0>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e000      	b.n	800223e <HAL_ADC_IRQHandler+0xc2>
 800223c:	4b5b      	ldr	r3, [pc, #364]	@ (80023ac <HAL_ADC_IRQHandler+0x230>)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	4293      	cmp	r3, r2
 8002244:	d008      	beq.n	8002258 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d002      	beq.n	8002258 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b09      	cmp	r3, #9
 8002256:	d104      	bne.n	8002262 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	e00c      	b.n	800227c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a50      	ldr	r2, [pc, #320]	@ (80023a8 <HAL_ADC_IRQHandler+0x22c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d002      	beq.n	8002272 <HAL_ADC_IRQHandler+0xf6>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	e000      	b.n	8002274 <HAL_ADC_IRQHandler+0xf8>
 8002272:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_ADC_IRQHandler+0x230>)
 8002274:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d135      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d12e      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fd35 	bl	8001d08 <LL_ADC_REG_IsConversionOngoing>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11a      	bne.n	80022da <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 020c 	bic.w	r2, r2, #12
 80022b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d112      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80022d8:	e00b      	b.n	80022f2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fd4e 	bl	8000d94 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	220c      	movs	r2, #12
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <HAL_ADC_IRQHandler+0x198>
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 809f 	beq.w	800245e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8099 	beq.w	800245e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fbd4 	bl	8001af6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800234e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fb8f 	bl	8001a78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800235a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a11      	ldr	r2, [pc, #68]	@ (80023a8 <HAL_ADC_IRQHandler+0x22c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d002      	beq.n	800236c <HAL_ADC_IRQHandler+0x1f0>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	e000      	b.n	800236e <HAL_ADC_IRQHandler+0x1f2>
 800236c:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_ADC_IRQHandler+0x230>)
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4293      	cmp	r3, r2
 8002374:	d008      	beq.n	8002388 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b06      	cmp	r3, #6
 8002380:	d002      	beq.n	8002388 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b07      	cmp	r3, #7
 8002386:	d104      	bne.n	8002392 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	623b      	str	r3, [r7, #32]
 8002390:	e013      	b.n	80023ba <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <HAL_ADC_IRQHandler+0x22c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_ADC_IRQHandler+0x234>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	e007      	b.n	80023b2 <HAL_ADC_IRQHandler+0x236>
 80023a2:	bf00      	nop
 80023a4:	40022300 	.word	0x40022300
 80023a8:	40022100 	.word	0x40022100
 80023ac:	40022000 	.word	0x40022000
 80023b0:	4b7d      	ldr	r3, [pc, #500]	@ (80025a8 <HAL_ADC_IRQHandler+0x42c>)
 80023b2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d047      	beq.n	8002450 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_ADC_IRQHandler+0x25e>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03f      	beq.n	8002450 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d13a      	bne.n	8002450 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d133      	bne.n	8002450 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d12e      	bne.n	8002450 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fc99 	bl	8001d2e <LL_ADC_INJ_IsConversionOngoing>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11a      	bne.n	8002438 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002410:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d112      	bne.n	8002450 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54
 8002436:	e00b      	b.n	8002450 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	f043 0210 	orr.w	r2, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fe95 	bl	8003180 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2260      	movs	r2, #96	@ 0x60
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d011      	beq.n	800248c <HAL_ADC_IRQHandler+0x310>
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00c      	beq.n	800248c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002476:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f896 	bl	80025b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <HAL_ADC_IRQHandler+0x340>
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fe7b 	bl	80031a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d012      	beq.n	80024ec <HAL_ADC_IRQHandler+0x370>
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00d      	beq.n	80024ec <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fe6d 	bl	80031bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d036      	beq.n	8002564 <HAL_ADC_IRQHandler+0x3e8>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d031      	beq.n	8002564 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002508:	2301      	movs	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
 800250c:	e014      	b.n	8002538 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002514:	4825      	ldr	r0, [pc, #148]	@ (80025ac <HAL_ADC_IRQHandler+0x430>)
 8002516:	f7ff fb5f 	bl	8001bd8 <LL_ADC_GetMultiDMATransfer>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002520:	2301      	movs	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
 8002524:	e008      	b.n	8002538 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002534:	2301      	movs	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10e      	bne.n	800255c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f834 	bl	80025c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2210      	movs	r2, #16
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256a:	2b00      	cmp	r3, #0
 800256c:	d018      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x424>
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	f043 0208 	orr.w	r2, r3, #8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002598:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fdfa 	bl	8003194 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025a0:	bf00      	nop
 80025a2:	3728      	adds	r7, #40	@ 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40022300 	.word	0x40022300

080025b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b0a1      	sub	sp, #132	@ 0x84
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a95      	ldr	r2, [pc, #596]	@ (8002848 <HAL_ADC_ConfigChannel+0x270>)
 80025f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x2a>
 80025fe:	2302      	movs	r3, #2
 8002600:	e2c0      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x5ac>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fb7a 	bl	8001d08 <LL_ADC_REG_IsConversionOngoing>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 82a5 	bne.w	8002b66 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db2c      	blt.n	800267e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x6a>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2201      	movs	r2, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	e016      	b.n	8002670 <HAL_ADC_ConfigChannel+0x98>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002652:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e003      	b.n	8002666 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800265e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2201      	movs	r2, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	69d1      	ldr	r1, [r2, #28]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	430b      	orrs	r3, r1
 800267c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	f7ff fa07 	bl	8001a9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fb37 	bl	8001d08 <LL_ADC_REG_IsConversionOngoing>
 800269a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fb44 	bl	8001d2e <LL_ADC_INJ_IsConversionOngoing>
 80026a6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 80a0 	bne.w	80027f0 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 809c 	bne.w	80027f0 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7ff fa29 	bl	8001b1c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x118>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	e00a      	b.n	8002706 <HAL_ADC_ConfigChannel+0x12e>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d027      	beq.n	8002760 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6919      	ldr	r1, [r3, #16]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800271e:	f7ff f957 	bl	80019d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	7e5b      	ldrb	r3, [r3, #25]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x160>
 8002732:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002736:	e000      	b.n	800273a <HAL_ADC_ConfigChannel+0x162>
 8002738:	2300      	movs	r3, #0
 800273a:	461a      	mov	r2, r3
 800273c:	f7ff f981 	bl	8001a42 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6919      	ldr	r1, [r3, #16]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	7e1b      	ldrb	r3, [r3, #24]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d102      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x17e>
 8002750:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002754:	e000      	b.n	8002758 <HAL_ADC_ConfigChannel+0x180>
 8002756:	2300      	movs	r3, #0
 8002758:	461a      	mov	r2, r3
 800275a:	f7ff f959 	bl	8001a10 <LL_ADC_SetDataRightShift>
 800275e:	e047      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	069b      	lsls	r3, r3, #26
 8002770:	429a      	cmp	r2, r3
 8002772:	d107      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002782:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800278a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	069b      	lsls	r3, r3, #26
 8002794:	429a      	cmp	r2, r3
 8002796:	d107      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027a6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	069b      	lsls	r3, r3, #26
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d107      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027ca:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	069b      	lsls	r3, r3, #26
 80027dc:	429a      	cmp	r2, r3
 80027de:	d107      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027ee:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fa5f 	bl	8001cb8 <LL_ADC_IsEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 81bb 	bne.w	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f7ff f9b0 	bl	8001b74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_ADC_ConfigChannel+0x270>)
 800281a:	4293      	cmp	r3, r2
 800281c:	f040 8130 	bne.w	8002a80 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_ADC_ConfigChannel+0x274>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	3301      	adds	r3, #1
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2b09      	cmp	r3, #9
 800283e:	bf94      	ite	ls
 8002840:	2301      	movls	r3, #1
 8002842:	2300      	movhi	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e01b      	b.n	8002880 <HAL_ADC_ConfigChannel+0x2a8>
 8002848:	47ff0000 	.word	0x47ff0000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800285a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800285c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800285e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e003      	b.n	8002870 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2b09      	cmp	r3, #9
 8002878:	bf94      	ite	ls
 800287a:	2301      	movls	r3, #1
 800287c:	2300      	movhi	r3, #0
 800287e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002880:	2b00      	cmp	r3, #0
 8002882:	d079      	beq.n	8002978 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x2c8>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	3301      	adds	r3, #1
 8002898:	069b      	lsls	r3, r3, #26
 800289a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800289e:	e015      	b.n	80028cc <HAL_ADC_ConfigChannel+0x2f4>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 80028b8:	2320      	movs	r3, #32
 80028ba:	e003      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 80028bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	069b      	lsls	r3, r3, #26
 80028c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x314>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	3301      	adds	r3, #1
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	e017      	b.n	800291c <HAL_ADC_ConfigChannel+0x344>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	ea42 0103 	orr.w	r1, r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x36a>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	3301      	adds	r3, #1
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	051b      	lsls	r3, r3, #20
 8002940:	e018      	b.n	8002974 <HAL_ADC_ConfigChannel+0x39c>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e003      	b.n	8002966 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800295e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f003 021f 	and.w	r2, r3, #31
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002974:	430b      	orrs	r3, r1
 8002976:	e07e      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x3bc>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	3301      	adds	r3, #1
 800298c:	069b      	lsls	r3, r3, #26
 800298e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002992:	e015      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x3e8>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80029a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e003      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 80029b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x408>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	3301      	adds	r3, #1
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	e017      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x438>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	61bb      	str	r3, [r7, #24]
  return result;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e003      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	ea42 0103 	orr.w	r1, r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x464>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	051b      	lsls	r3, r3, #20
 8002a36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	e01b      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x49c>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	60fb      	str	r3, [r7, #12]
  return result;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e003      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f003 021f 	and.w	r2, r3, #31
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b1e      	subs	r3, #30
 8002a6e:	051b      	lsls	r3, r3, #20
 8002a70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a74:	430b      	orrs	r3, r1
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	6892      	ldr	r2, [r2, #8]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7ff f84e 	bl	8001b1c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da77      	bge.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a88:	4840      	ldr	r0, [pc, #256]	@ (8002b8c <HAL_ADC_ConfigChannel+0x5b4>)
 8002a8a:	f7fe ff93 	bl	80019b4 <LL_ADC_GetCommonPathInternalCh>
 8002a8e:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a90:	483f      	ldr	r0, [pc, #252]	@ (8002b90 <HAL_ADC_ConfigChannel+0x5b8>)
 8002a92:	f7ff f911 	bl	8001cb8 <LL_ADC_IsEnabled>
 8002a96:	4604      	mov	r4, r0
 8002a98:	483e      	ldr	r0, [pc, #248]	@ (8002b94 <HAL_ADC_ConfigChannel+0x5bc>)
 8002a9a:	f7ff f90d 	bl	8001cb8 <LL_ADC_IsEnabled>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4323      	orrs	r3, r4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d155      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8002b98 <HAL_ADC_ConfigChannel+0x5c0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d122      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x51e>
 8002ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11d      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a35      	ldr	r2, [pc, #212]	@ (8002b94 <HAL_ADC_ConfigChannel+0x5bc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d159      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002aca:	4619      	mov	r1, r3
 8002acc:	482f      	ldr	r0, [pc, #188]	@ (8002b8c <HAL_ADC_ConfigChannel+0x5b4>)
 8002ace:	f7fe ff5e 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ad2:	4b32      	ldr	r3, [pc, #200]	@ (8002b9c <HAL_ADC_ConfigChannel+0x5c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	4a31      	ldr	r2, [pc, #196]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ae6:	e002      	b.n	8002aee <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af4:	e040      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x54c>
 8002b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a21      	ldr	r2, [pc, #132]	@ (8002b94 <HAL_ADC_ConfigChannel+0x5bc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d131      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	481b      	ldr	r0, [pc, #108]	@ (8002b8c <HAL_ADC_ConfigChannel+0x5b4>)
 8002b1e:	f7fe ff36 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b22:	e029      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d124      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
 8002b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d11f      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a15      	ldr	r2, [pc, #84]	@ (8002b94 <HAL_ADC_ConfigChannel+0x5bc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d11a      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4810      	ldr	r0, [pc, #64]	@ (8002b8c <HAL_ADC_ConfigChannel+0x5b4>)
 8002b4c:	f7fe ff1f 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
 8002b50:	e012      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b56:	f043 0220 	orr.w	r2, r3, #32
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b64:	e008      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b80:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3784      	adds	r7, #132	@ 0x84
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	40022300 	.word	0x40022300
 8002b90:	40022000 	.word	0x40022000
 8002b94:	40022100 	.word	0x40022100
 8002b98:	cb840000 	.word	0xcb840000
 8002b9c:	24000404 	.word	0x24000404
 8002ba0:	053e2d63 	.word	0x053e2d63
 8002ba4:	bac04000 	.word	0xbac04000
 8002ba8:	cfb80000 	.word	0xcfb80000

08002bac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f87d 	bl	8001cb8 <LL_ADC_IsEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d161      	bne.n	8002c88 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	4b32      	ldr	r3, [pc, #200]	@ (8002c94 <ADC_Enable+0xe8>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e04d      	b.n	8002c8a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f84c 	bl	8001c90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fe9e 	bl	8001938 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bfe:	4826      	ldr	r0, [pc, #152]	@ (8002c98 <ADC_Enable+0xec>)
 8002c00:	f7fe ffdc 	bl	8001bbc <LL_ADC_GetMultimode>
 8002c04:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	@ (8002c9c <ADC_Enable+0xf0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d002      	beq.n	8002c16 <ADC_Enable+0x6a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	e000      	b.n	8002c18 <ADC_Enable+0x6c>
 8002c16:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <ADC_Enable+0xf4>)
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d02c      	beq.n	8002c7a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d130      	bne.n	8002c88 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c26:	e028      	b.n	8002c7a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f843 	bl	8001cb8 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f827 	bl	8001c90 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c42:	f7fe fe79 	bl	8001938 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d914      	bls.n	8002c7a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d00d      	beq.n	8002c7a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e007      	b.n	8002c8a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d1cf      	bne.n	8002c28 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	8000003f 	.word	0x8000003f
 8002c98:	40022300 	.word	0x40022300
 8002c9c:	40022100 	.word	0x40022100
 8002ca0:	40022000 	.word	0x40022000

08002ca4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d14b      	bne.n	8002d56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d021      	beq.n	8002d1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe fecb 	bl	8001a78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d032      	beq.n	8002d4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d12b      	bne.n	8002d4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11f      	bne.n	8002d4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d1a:	e018      	b.n	8002d4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d111      	bne.n	8002d4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7fe f820 	bl	8000d94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d54:	e00e      	b.n	8002d74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff fc2e 	bl	80025c4 <HAL_ADC_ErrorCallback>
}
 8002d68:	e004      	b.n	8002d74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f7fd ffba 	bl	8000d04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	f043 0204 	orr.w	r2, r3, #4
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fc00 	bl	80025c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002dd4:	4b60      	ldr	r3, [pc, #384]	@ (8002f58 <ADC_ConfigureBoostMode+0x18c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01c      	beq.n	8002e1a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002de0:	f004 fd02 	bl	80077e8 <HAL_RCC_GetHCLKFreq>
 8002de4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dee:	d010      	beq.n	8002e12 <ADC_ConfigureBoostMode+0x46>
 8002df0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002df4:	d873      	bhi.n	8002ede <ADC_ConfigureBoostMode+0x112>
 8002df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dfa:	d002      	beq.n	8002e02 <ADC_ConfigureBoostMode+0x36>
 8002dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e00:	d16d      	bne.n	8002ede <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	0c1b      	lsrs	r3, r3, #16
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	60fb      	str	r3, [r7, #12]
        break;
 8002e10:	e068      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	60fb      	str	r3, [r7, #12]
        break;
 8002e18:	e064      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e1a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	f005 fefb 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002e26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e30:	d051      	beq.n	8002ed6 <ADC_ConfigureBoostMode+0x10a>
 8002e32:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e36:	d854      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e38:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e3c:	d047      	beq.n	8002ece <ADC_ConfigureBoostMode+0x102>
 8002e3e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e42:	d84e      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e44:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e48:	d03d      	beq.n	8002ec6 <ADC_ConfigureBoostMode+0xfa>
 8002e4a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e4e:	d848      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e54:	d033      	beq.n	8002ebe <ADC_ConfigureBoostMode+0xf2>
 8002e56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e5a:	d842      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e5c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e60:	d029      	beq.n	8002eb6 <ADC_ConfigureBoostMode+0xea>
 8002e62:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e66:	d83c      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e68:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e6c:	d01a      	beq.n	8002ea4 <ADC_ConfigureBoostMode+0xd8>
 8002e6e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e72:	d836      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e74:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e78:	d014      	beq.n	8002ea4 <ADC_ConfigureBoostMode+0xd8>
 8002e7a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e7e:	d830      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e84:	d00e      	beq.n	8002ea4 <ADC_ConfigureBoostMode+0xd8>
 8002e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e8a:	d82a      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e90:	d008      	beq.n	8002ea4 <ADC_ConfigureBoostMode+0xd8>
 8002e92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e96:	d824      	bhi.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
 8002e98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e9c:	d002      	beq.n	8002ea4 <ADC_ConfigureBoostMode+0xd8>
 8002e9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ea2:	d11e      	bne.n	8002ee2 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0c9b      	lsrs	r3, r3, #18
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	60fb      	str	r3, [r7, #12]
        break;
 8002eb4:	e016      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
        break;
 8002ebc:	e012      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	60fb      	str	r3, [r7, #12]
        break;
 8002ec4:	e00e      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	60fb      	str	r3, [r7, #12]
        break;
 8002ecc:	e00a      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	09db      	lsrs	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]
        break;
 8002ed4:	e006      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	60fb      	str	r3, [r7, #12]
        break;
 8002edc:	e002      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
        break;
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002ee2:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a1b      	ldr	r2, [pc, #108]	@ (8002f5c <ADC_ConfigureBoostMode+0x190>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d808      	bhi.n	8002f04 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f00:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f02:	e025      	b.n	8002f50 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a16      	ldr	r2, [pc, #88]	@ (8002f60 <ADC_ConfigureBoostMode+0x194>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d80a      	bhi.n	8002f22 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	e016      	b.n	8002f50 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a0f      	ldr	r2, [pc, #60]	@ (8002f64 <ADC_ConfigureBoostMode+0x198>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d80a      	bhi.n	8002f40 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3c:	609a      	str	r2, [r3, #8]
}
 8002f3e:	e007      	b.n	8002f50 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f4e:	609a      	str	r2, [r3, #8]
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40022300 	.word	0x40022300
 8002f5c:	005f5e10 	.word	0x005f5e10
 8002f60:	00bebc20 	.word	0x00bebc20
 8002f64:	017d7840 	.word	0x017d7840

08002f68 <LL_ADC_IsEnabled>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <LL_ADC_IsEnabled+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_ADC_IsEnabled+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <LL_ADC_REG_StartConversion>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <LL_ADC_REG_StartConversion+0x24>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	7fffffc0 	.word	0x7fffffc0

08002fb8 <LL_ADC_REG_IsConversionOngoing>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d101      	bne.n	8002fd0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0a0      	sub	sp, #128	@ 0x80
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ffe1 	bl	8002fb8 <LL_ADC_REG_IsConversionOngoing>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0ad      	b.n	800315c <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800300a:	2302      	movs	r3, #2
 800300c:	e0a6      	b.n	800315c <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a52      	ldr	r2, [pc, #328]	@ (8003164 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d002      	beq.n	8003026 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	e000      	b.n	8003028 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 8003026:	4b50      	ldr	r3, [pc, #320]	@ (8003168 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4293      	cmp	r3, r2
 800302e:	d006      	beq.n	800303e <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fdbb 	bl	8002bac <ADC_Enable>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800303c:	e02e      	b.n	800309c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003042:	2300      	movs	r3, #0
 8003044:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a47      	ldr	r2, [pc, #284]	@ (8003168 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d102      	bne.n	8003056 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 8003050:	4b44      	ldr	r3, [pc, #272]	@ (8003164 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e001      	b.n	800305a <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e071      	b.n	800315c <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff fd97 	bl	8002bac <ADC_Enable>
 800307e:	4603      	mov	r3, r0
 8003080:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 8003084:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fd8b 	bl	8002bac <ADC_Enable>
 8003096:	4603      	mov	r3, r0
 8003098:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 800309c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d155      	bne.n	8003150 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030a8:	4b30      	ldr	r3, [pc, #192]	@ (800316c <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030be:	4a2c      	ldr	r2, [pc, #176]	@ (8003170 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 80030c0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003174 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003178 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 80030d0:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	221c      	movs	r2, #28
 80030d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0210 	orr.w	r2, r2, #16
 80030f0:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d002      	beq.n	8003102 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	e000      	b.n	8003104 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8003102:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	4293      	cmp	r3, r2
 800310a:	d00d      	beq.n	8003128 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3340      	adds	r3, #64	@ 0x40
 8003116:	4619      	mov	r1, r3
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f000 fe14 	bl	8003d48 <HAL_DMA_Start_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003126:	e017      	b.n	8003158 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003128:	4b14      	ldr	r3, [pc, #80]	@ (800317c <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 800312a:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003132:	330c      	adds	r3, #12
 8003134:	4619      	mov	r1, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f000 fe05 	bl	8003d48 <HAL_DMA_Start_IT>
 800313e:	4603      	mov	r3, r0
 8003140:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff21 	bl	8002f90 <LL_ADC_REG_StartConversion>
 800314e:	e003      	b.n	8003158 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8003158:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	3780      	adds	r7, #128	@ 0x80
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40022100 	.word	0x40022100
 8003168:	40022000 	.word	0x40022000
 800316c:	fffff0fe 	.word	0xfffff0fe
 8003170:	08002ca5 	.word	0x08002ca5
 8003174:	08002d7d 	.word	0x08002d7d
 8003178:	08002d99 	.word	0x08002d99
 800317c:	40022300 	.word	0x40022300

08003180 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b09f      	sub	sp, #124	@ 0x7c
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031fe:	2302      	movs	r3, #2
 8003200:	e080      	b.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800320e:	2300      	movs	r3, #0
 8003210:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a3d      	ldr	r2, [pc, #244]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d102      	bne.n	8003222 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800321c:	4b3c      	ldr	r3, [pc, #240]	@ (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	e001      	b.n	8003226 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e05f      	b.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff feb6 	bl	8002fb8 <LL_ADC_REG_IsConversionOngoing>
 800324c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff feb0 	bl	8002fb8 <LL_ADC_REG_IsConversionOngoing>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d141      	bne.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800325e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003260:	2b00      	cmp	r3, #0
 8003262:	d13e      	bne.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003266:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003280:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003282:	4822      	ldr	r0, [pc, #136]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003284:	f7ff fe70 	bl	8002f68 <LL_ADC_IsEnabled>
 8003288:	4604      	mov	r4, r0
 800328a:	4821      	ldr	r0, [pc, #132]	@ (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800328c:	f7ff fe6c 	bl	8002f68 <LL_ADC_IsEnabled>
 8003290:	4603      	mov	r3, r0
 8003292:	4323      	orrs	r3, r4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d12e      	bne.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800329e:	4013      	ands	r3, r2
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	6811      	ldr	r1, [r2, #0]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	6892      	ldr	r2, [r2, #8]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	e021      	b.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032be:	4813      	ldr	r0, [pc, #76]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80032c0:	f7ff fe52 	bl	8002f68 <LL_ADC_IsEnabled>
 80032c4:	4604      	mov	r4, r0
 80032c6:	4812      	ldr	r0, [pc, #72]	@ (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80032c8:	f7ff fe4e 	bl	8002f68 <LL_ADC_IsEnabled>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4323      	orrs	r3, r4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d110      	bne.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80032da:	4013      	ands	r3, r2
 80032dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032de:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032e0:	e009      	b.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80032f4:	e000      	b.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003300:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003304:	4618      	mov	r0, r3
 8003306:	377c      	adds	r7, #124	@ 0x7c
 8003308:	46bd      	mov	sp, r7
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	40022000 	.word	0x40022000
 8003310:	40022100 	.word	0x40022100
 8003314:	40022300 	.word	0x40022300
 8003318:	fffff0e0 	.word	0xfffff0e0

0800331c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <__NVIC_SetPriorityGrouping+0x40>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003338:	4013      	ands	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <__NVIC_SetPriorityGrouping+0x44>)
 8003346:	4313      	orrs	r3, r2
 8003348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334a:	4a04      	ldr	r2, [pc, #16]	@ (800335c <__NVIC_SetPriorityGrouping+0x40>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60d3      	str	r3, [r2, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00
 8003360:	05fa0000 	.word	0x05fa0000

08003364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003368:	4b04      	ldr	r3, [pc, #16]	@ (800337c <__NVIC_GetPriorityGrouping+0x18>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 0307 	and.w	r3, r3, #7
}
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800338a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	db0b      	blt.n	80033aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	f003 021f 	and.w	r2, r3, #31
 8003398:	4907      	ldr	r1, [pc, #28]	@ (80033b8 <__NVIC_EnableIRQ+0x38>)
 800339a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2001      	movs	r0, #1
 80033a2:	fa00 f202 	lsl.w	r2, r0, r2
 80033a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000e100 	.word	0xe000e100

080033bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	db0a      	blt.n	80033e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	490c      	ldr	r1, [pc, #48]	@ (8003408 <__NVIC_SetPriority+0x4c>)
 80033d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033da:	0112      	lsls	r2, r2, #4
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	440b      	add	r3, r1
 80033e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e4:	e00a      	b.n	80033fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4908      	ldr	r1, [pc, #32]	@ (800340c <__NVIC_SetPriority+0x50>)
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	3b04      	subs	r3, #4
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	440b      	add	r3, r1
 80033fa:	761a      	strb	r2, [r3, #24]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000e100 	.word	0xe000e100
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	@ 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f1c3 0307 	rsb	r3, r3, #7
 800342a:	2b04      	cmp	r3, #4
 800342c:	bf28      	it	cs
 800342e:	2304      	movcs	r3, #4
 8003430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3304      	adds	r3, #4
 8003436:	2b06      	cmp	r3, #6
 8003438:	d902      	bls.n	8003440 <NVIC_EncodePriority+0x30>
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3b03      	subs	r3, #3
 800343e:	e000      	b.n	8003442 <NVIC_EncodePriority+0x32>
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	f04f 32ff 	mov.w	r2, #4294967295
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	401a      	ands	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003458:	f04f 31ff 	mov.w	r1, #4294967295
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43d9      	mvns	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	4313      	orrs	r3, r2
         );
}
 800346a:	4618      	mov	r0, r3
 800346c:	3724      	adds	r7, #36	@ 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003488:	d301      	bcc.n	800348e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348a:	2301      	movs	r3, #1
 800348c:	e00f      	b.n	80034ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <SysTick_Config+0x40>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003496:	210f      	movs	r1, #15
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	f7ff ff8e 	bl	80033bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <SysTick_Config+0x40>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a6:	4b04      	ldr	r3, [pc, #16]	@ (80034b8 <SysTick_Config+0x40>)
 80034a8:	2207      	movs	r2, #7
 80034aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	e000e010 	.word	0xe000e010

080034bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff29 	bl	800331c <__NVIC_SetPriorityGrouping>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034e0:	f7ff ff40 	bl	8003364 <__NVIC_GetPriorityGrouping>
 80034e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7ff ff90 	bl	8003410 <NVIC_EncodePriority>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff5f 	bl	80033bc <__NVIC_SetPriority>
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff33 	bl	8003380 <__NVIC_EnableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffa4 	bl	8003478 <SysTick_Config>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003540:	f3bf 8f5f 	dmb	sy
}
 8003544:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003546:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <HAL_MPU_Disable+0x28>)
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	4a06      	ldr	r2, [pc, #24]	@ (8003564 <HAL_MPU_Disable+0x28>)
 800354c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003550:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003552:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_MPU_Disable+0x2c>)
 8003554:	2200      	movs	r2, #0
 8003556:	605a      	str	r2, [r3, #4]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	e000ed00 	.word	0xe000ed00
 8003568:	e000ed90 	.word	0xe000ed90

0800356c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003574:	4a0b      	ldr	r2, [pc, #44]	@ (80035a4 <HAL_MPU_Enable+0x38>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <HAL_MPU_Enable+0x3c>)
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	4a09      	ldr	r2, [pc, #36]	@ (80035a8 <HAL_MPU_Enable+0x3c>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003588:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800358a:	f3bf 8f4f 	dsb	sy
}
 800358e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003590:	f3bf 8f6f 	isb	sy
}
 8003594:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed90 	.word	0xe000ed90
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	785a      	ldrb	r2, [r3, #1]
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_MPU_ConfigRegion+0x7c>)
 80035ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80035bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <HAL_MPU_ConfigRegion+0x7c>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4a19      	ldr	r2, [pc, #100]	@ (8003628 <HAL_MPU_ConfigRegion+0x7c>)
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <HAL_MPU_ConfigRegion+0x7c>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7b1b      	ldrb	r3, [r3, #12]
 80035d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7adb      	ldrb	r3, [r3, #11]
 80035da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7a9b      	ldrb	r3, [r3, #10]
 80035e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7b5b      	ldrb	r3, [r3, #13]
 80035ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7b9b      	ldrb	r3, [r3, #14]
 80035f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7bdb      	ldrb	r3, [r3, #15]
 80035fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7a5b      	ldrb	r3, [r3, #9]
 8003602:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003604:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	7a1b      	ldrb	r3, [r3, #8]
 800360a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800360c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003614:	4a04      	ldr	r2, [pc, #16]	@ (8003628 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003616:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003618:	6113      	str	r3, [r2, #16]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000ed90 	.word	0xe000ed90

0800362c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7fe f980 	bl	8001938 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e37d      	b.n	8003d40 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a66      	ldr	r2, [pc, #408]	@ (80037e4 <HAL_DMA_Init+0x1b8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d04a      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a65      	ldr	r2, [pc, #404]	@ (80037e8 <HAL_DMA_Init+0x1bc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d045      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a63      	ldr	r2, [pc, #396]	@ (80037ec <HAL_DMA_Init+0x1c0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d040      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a62      	ldr	r2, [pc, #392]	@ (80037f0 <HAL_DMA_Init+0x1c4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d03b      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a60      	ldr	r2, [pc, #384]	@ (80037f4 <HAL_DMA_Init+0x1c8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d036      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5f      	ldr	r2, [pc, #380]	@ (80037f8 <HAL_DMA_Init+0x1cc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d031      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a5d      	ldr	r2, [pc, #372]	@ (80037fc <HAL_DMA_Init+0x1d0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d02c      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5c      	ldr	r2, [pc, #368]	@ (8003800 <HAL_DMA_Init+0x1d4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d027      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5a      	ldr	r2, [pc, #360]	@ (8003804 <HAL_DMA_Init+0x1d8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d022      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a59      	ldr	r2, [pc, #356]	@ (8003808 <HAL_DMA_Init+0x1dc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d01d      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a57      	ldr	r2, [pc, #348]	@ (800380c <HAL_DMA_Init+0x1e0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_DMA_Init+0x1e4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a54      	ldr	r2, [pc, #336]	@ (8003814 <HAL_DMA_Init+0x1e8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a53      	ldr	r2, [pc, #332]	@ (8003818 <HAL_DMA_Init+0x1ec>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a51      	ldr	r2, [pc, #324]	@ (800381c <HAL_DMA_Init+0x1f0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_Init+0xb8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a50      	ldr	r2, [pc, #320]	@ (8003820 <HAL_DMA_Init+0x1f4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_DMA_Init+0xbc>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_DMA_Init+0xbe>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 813c 	beq.w	8003968 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a37      	ldr	r2, [pc, #220]	@ (80037e4 <HAL_DMA_Init+0x1b8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d04a      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a36      	ldr	r2, [pc, #216]	@ (80037e8 <HAL_DMA_Init+0x1bc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d045      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a34      	ldr	r2, [pc, #208]	@ (80037ec <HAL_DMA_Init+0x1c0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d040      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a33      	ldr	r2, [pc, #204]	@ (80037f0 <HAL_DMA_Init+0x1c4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d03b      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a31      	ldr	r2, [pc, #196]	@ (80037f4 <HAL_DMA_Init+0x1c8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d036      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a30      	ldr	r2, [pc, #192]	@ (80037f8 <HAL_DMA_Init+0x1cc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d031      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2e      	ldr	r2, [pc, #184]	@ (80037fc <HAL_DMA_Init+0x1d0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d02c      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2d      	ldr	r2, [pc, #180]	@ (8003800 <HAL_DMA_Init+0x1d4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d027      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2b      	ldr	r2, [pc, #172]	@ (8003804 <HAL_DMA_Init+0x1d8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d022      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2a      	ldr	r2, [pc, #168]	@ (8003808 <HAL_DMA_Init+0x1dc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d01d      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a28      	ldr	r2, [pc, #160]	@ (800380c <HAL_DMA_Init+0x1e0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a27      	ldr	r2, [pc, #156]	@ (8003810 <HAL_DMA_Init+0x1e4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a25      	ldr	r2, [pc, #148]	@ (8003814 <HAL_DMA_Init+0x1e8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a24      	ldr	r2, [pc, #144]	@ (8003818 <HAL_DMA_Init+0x1ec>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	@ (800381c <HAL_DMA_Init+0x1f0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_DMA_Init+0x174>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	@ (8003820 <HAL_DMA_Init+0x1f4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <HAL_DMA_Init+0x186>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e007      	b.n	80037c2 <HAL_DMA_Init+0x196>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037c2:	e02f      	b.n	8003824 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c4:	f7fe f8b8 	bl	8001938 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d928      	bls.n	8003824 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2203      	movs	r2, #3
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e2ad      	b.n	8003d40 <HAL_DMA_Init+0x714>
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1c8      	bne.n	80037c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4b73      	ldr	r3, [pc, #460]	@ (8003a0c <HAL_DMA_Init+0x3e0>)
 800383e:	4013      	ands	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800384a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003856:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003862:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	2b04      	cmp	r3, #4
 8003876:	d107      	bne.n	8003888 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	4313      	orrs	r3, r2
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b28      	cmp	r3, #40	@ 0x28
 800388e:	d903      	bls.n	8003898 <HAL_DMA_Init+0x26c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b2e      	cmp	r3, #46	@ 0x2e
 8003896:	d91f      	bls.n	80038d8 <HAL_DMA_Init+0x2ac>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b3e      	cmp	r3, #62	@ 0x3e
 800389e:	d903      	bls.n	80038a8 <HAL_DMA_Init+0x27c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b42      	cmp	r3, #66	@ 0x42
 80038a6:	d917      	bls.n	80038d8 <HAL_DMA_Init+0x2ac>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b46      	cmp	r3, #70	@ 0x46
 80038ae:	d903      	bls.n	80038b8 <HAL_DMA_Init+0x28c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b48      	cmp	r3, #72	@ 0x48
 80038b6:	d90f      	bls.n	80038d8 <HAL_DMA_Init+0x2ac>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80038be:	d903      	bls.n	80038c8 <HAL_DMA_Init+0x29c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b52      	cmp	r3, #82	@ 0x52
 80038c6:	d907      	bls.n	80038d8 <HAL_DMA_Init+0x2ac>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b73      	cmp	r3, #115	@ 0x73
 80038ce:	d905      	bls.n	80038dc <HAL_DMA_Init+0x2b0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b77      	cmp	r3, #119	@ 0x77
 80038d6:	d801      	bhi.n	80038dc <HAL_DMA_Init+0x2b0>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_DMA_Init+0x2b2>
 80038dc:	2300      	movs	r3, #0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0307 	bic.w	r3, r3, #7
 8003900:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	2b04      	cmp	r3, #4
 8003912:	d117      	bne.n	8003944 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00e      	beq.n	8003944 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f002 fbd4 	bl	80060d4 <DMA_CheckFifoParam>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2240      	movs	r2, #64	@ 0x40
 8003936:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e1fd      	b.n	8003d40 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f002 fb0f 	bl	8005f70 <DMA_CalcBaseAndBitshift>
 8003952:	4603      	mov	r3, r0
 8003954:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	223f      	movs	r2, #63	@ 0x3f
 8003960:	409a      	lsls	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	e0fd      	b.n	8003b64 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a28      	ldr	r2, [pc, #160]	@ (8003a10 <HAL_DMA_Init+0x3e4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d04a      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a27      	ldr	r2, [pc, #156]	@ (8003a14 <HAL_DMA_Init+0x3e8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d045      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a25      	ldr	r2, [pc, #148]	@ (8003a18 <HAL_DMA_Init+0x3ec>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d040      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a24      	ldr	r2, [pc, #144]	@ (8003a1c <HAL_DMA_Init+0x3f0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d03b      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a22      	ldr	r2, [pc, #136]	@ (8003a20 <HAL_DMA_Init+0x3f4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d036      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a21      	ldr	r2, [pc, #132]	@ (8003a24 <HAL_DMA_Init+0x3f8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d031      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a28 <HAL_DMA_Init+0x3fc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02c      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a2c <HAL_DMA_Init+0x400>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d027      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003a30 <HAL_DMA_Init+0x404>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <HAL_DMA_Init+0x408>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d01d      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a19      	ldr	r2, [pc, #100]	@ (8003a38 <HAL_DMA_Init+0x40c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a18      	ldr	r2, [pc, #96]	@ (8003a3c <HAL_DMA_Init+0x410>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	@ (8003a40 <HAL_DMA_Init+0x414>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <HAL_DMA_Init+0x418>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a13      	ldr	r2, [pc, #76]	@ (8003a48 <HAL_DMA_Init+0x41c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_DMA_Init+0x3dc>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <HAL_DMA_Init+0x420>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d123      	bne.n	8003a50 <HAL_DMA_Init+0x424>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e022      	b.n	8003a52 <HAL_DMA_Init+0x426>
 8003a0c:	fe10803f 	.word	0xfe10803f
 8003a10:	48022c08 	.word	0x48022c08
 8003a14:	48022c1c 	.word	0x48022c1c
 8003a18:	48022c30 	.word	0x48022c30
 8003a1c:	48022c44 	.word	0x48022c44
 8003a20:	48022c58 	.word	0x48022c58
 8003a24:	48022c6c 	.word	0x48022c6c
 8003a28:	48022c80 	.word	0x48022c80
 8003a2c:	48022c94 	.word	0x48022c94
 8003a30:	58025408 	.word	0x58025408
 8003a34:	5802541c 	.word	0x5802541c
 8003a38:	58025430 	.word	0x58025430
 8003a3c:	58025444 	.word	0x58025444
 8003a40:	58025458 	.word	0x58025458
 8003a44:	5802546c 	.word	0x5802546c
 8003a48:	58025480 	.word	0x58025480
 8003a4c:	58025494 	.word	0x58025494
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d07d      	beq.n	8003b52 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7f      	ldr	r2, [pc, #508]	@ (8003c58 <HAL_DMA_Init+0x62c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d021      	beq.n	8003aa4 <HAL_DMA_Init+0x478>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a7d      	ldr	r2, [pc, #500]	@ (8003c5c <HAL_DMA_Init+0x630>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01c      	beq.n	8003aa4 <HAL_DMA_Init+0x478>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c60 <HAL_DMA_Init+0x634>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d017      	beq.n	8003aa4 <HAL_DMA_Init+0x478>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a7a      	ldr	r2, [pc, #488]	@ (8003c64 <HAL_DMA_Init+0x638>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d012      	beq.n	8003aa4 <HAL_DMA_Init+0x478>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a79      	ldr	r2, [pc, #484]	@ (8003c68 <HAL_DMA_Init+0x63c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00d      	beq.n	8003aa4 <HAL_DMA_Init+0x478>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a77      	ldr	r2, [pc, #476]	@ (8003c6c <HAL_DMA_Init+0x640>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d008      	beq.n	8003aa4 <HAL_DMA_Init+0x478>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a76      	ldr	r2, [pc, #472]	@ (8003c70 <HAL_DMA_Init+0x644>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <HAL_DMA_Init+0x478>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a74      	ldr	r2, [pc, #464]	@ (8003c74 <HAL_DMA_Init+0x648>)
 8003aa2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4b6e      	ldr	r3, [pc, #440]	@ (8003c78 <HAL_DMA_Init+0x64c>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b40      	cmp	r3, #64	@ 0x40
 8003aca:	d008      	beq.n	8003ade <HAL_DMA_Init+0x4b2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b80      	cmp	r3, #128	@ 0x80
 8003ad2:	d102      	bne.n	8003ada <HAL_DMA_Init+0x4ae>
 8003ad4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ad8:	e002      	b.n	8003ae0 <HAL_DMA_Init+0x4b4>
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_DMA_Init+0x4b4>
 8003ade:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68d2      	ldr	r2, [r2, #12]
 8003ae4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ae6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003aee:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003af6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003afe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b06:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b0e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b55      	ldr	r3, [pc, #340]	@ (8003c7c <HAL_DMA_Init+0x650>)
 8003b26:	4413      	add	r3, r2
 8003b28:	4a55      	ldr	r2, [pc, #340]	@ (8003c80 <HAL_DMA_Init+0x654>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	009a      	lsls	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f002 fa1a 	bl	8005f70 <DMA_CalcBaseAndBitshift>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	2201      	movs	r2, #1
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	e008      	b.n	8003b64 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2240      	movs	r2, #64	@ 0x40
 8003b56:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0ed      	b.n	8003d40 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a46      	ldr	r2, [pc, #280]	@ (8003c84 <HAL_DMA_Init+0x658>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d072      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a45      	ldr	r2, [pc, #276]	@ (8003c88 <HAL_DMA_Init+0x65c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d06d      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a43      	ldr	r2, [pc, #268]	@ (8003c8c <HAL_DMA_Init+0x660>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d068      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a42      	ldr	r2, [pc, #264]	@ (8003c90 <HAL_DMA_Init+0x664>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d063      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a40      	ldr	r2, [pc, #256]	@ (8003c94 <HAL_DMA_Init+0x668>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d05e      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c98 <HAL_DMA_Init+0x66c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d059      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8003c9c <HAL_DMA_Init+0x670>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d054      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca0 <HAL_DMA_Init+0x674>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d04f      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca4 <HAL_DMA_Init+0x678>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04a      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a39      	ldr	r2, [pc, #228]	@ (8003ca8 <HAL_DMA_Init+0x67c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d045      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a37      	ldr	r2, [pc, #220]	@ (8003cac <HAL_DMA_Init+0x680>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d040      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a36      	ldr	r2, [pc, #216]	@ (8003cb0 <HAL_DMA_Init+0x684>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d03b      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a34      	ldr	r2, [pc, #208]	@ (8003cb4 <HAL_DMA_Init+0x688>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d036      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a33      	ldr	r2, [pc, #204]	@ (8003cb8 <HAL_DMA_Init+0x68c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d031      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a31      	ldr	r2, [pc, #196]	@ (8003cbc <HAL_DMA_Init+0x690>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02c      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a30      	ldr	r2, [pc, #192]	@ (8003cc0 <HAL_DMA_Init+0x694>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d027      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <HAL_DMA_Init+0x62c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d022      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a12      	ldr	r2, [pc, #72]	@ (8003c5c <HAL_DMA_Init+0x630>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d01d      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a10      	ldr	r2, [pc, #64]	@ (8003c60 <HAL_DMA_Init+0x634>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a0f      	ldr	r2, [pc, #60]	@ (8003c64 <HAL_DMA_Init+0x638>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0d      	ldr	r2, [pc, #52]	@ (8003c68 <HAL_DMA_Init+0x63c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00e      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <HAL_DMA_Init+0x640>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0a      	ldr	r2, [pc, #40]	@ (8003c70 <HAL_DMA_Init+0x644>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_DMA_Init+0x628>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a09      	ldr	r2, [pc, #36]	@ (8003c74 <HAL_DMA_Init+0x648>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d137      	bne.n	8003cc4 <HAL_DMA_Init+0x698>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e036      	b.n	8003cc6 <HAL_DMA_Init+0x69a>
 8003c58:	58025408 	.word	0x58025408
 8003c5c:	5802541c 	.word	0x5802541c
 8003c60:	58025430 	.word	0x58025430
 8003c64:	58025444 	.word	0x58025444
 8003c68:	58025458 	.word	0x58025458
 8003c6c:	5802546c 	.word	0x5802546c
 8003c70:	58025480 	.word	0x58025480
 8003c74:	58025494 	.word	0x58025494
 8003c78:	fffe000f 	.word	0xfffe000f
 8003c7c:	a7fdabf8 	.word	0xa7fdabf8
 8003c80:	cccccccd 	.word	0xcccccccd
 8003c84:	40020010 	.word	0x40020010
 8003c88:	40020028 	.word	0x40020028
 8003c8c:	40020040 	.word	0x40020040
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020070 	.word	0x40020070
 8003c98:	40020088 	.word	0x40020088
 8003c9c:	400200a0 	.word	0x400200a0
 8003ca0:	400200b8 	.word	0x400200b8
 8003ca4:	40020410 	.word	0x40020410
 8003ca8:	40020428 	.word	0x40020428
 8003cac:	40020440 	.word	0x40020440
 8003cb0:	40020458 	.word	0x40020458
 8003cb4:	40020470 	.word	0x40020470
 8003cb8:	40020488 	.word	0x40020488
 8003cbc:	400204a0 	.word	0x400204a0
 8003cc0:	400204b8 	.word	0x400204b8
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d032      	beq.n	8003d30 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f002 fa7e 	bl	80061cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b80      	cmp	r3, #128	@ 0x80
 8003cd6:	d102      	bne.n	8003cde <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cf2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <HAL_DMA_Init+0x6f2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d80c      	bhi.n	8003d1e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f002 fafb 	bl	8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	e008      	b.n	8003d30 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e226      	b.n	80041b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_DMA_Start_IT+0x2a>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e21f      	b.n	80041b2 <HAL_DMA_Start_IT+0x46a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	f040 820a 	bne.w	800419c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a68      	ldr	r2, [pc, #416]	@ (8003f3c <HAL_DMA_Start_IT+0x1f4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d04a      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a66      	ldr	r2, [pc, #408]	@ (8003f40 <HAL_DMA_Start_IT+0x1f8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d045      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a65      	ldr	r2, [pc, #404]	@ (8003f44 <HAL_DMA_Start_IT+0x1fc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d040      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a63      	ldr	r2, [pc, #396]	@ (8003f48 <HAL_DMA_Start_IT+0x200>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d03b      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a62      	ldr	r2, [pc, #392]	@ (8003f4c <HAL_DMA_Start_IT+0x204>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d036      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a60      	ldr	r2, [pc, #384]	@ (8003f50 <HAL_DMA_Start_IT+0x208>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d031      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f54 <HAL_DMA_Start_IT+0x20c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d02c      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f58 <HAL_DMA_Start_IT+0x210>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d027      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a5c      	ldr	r2, [pc, #368]	@ (8003f5c <HAL_DMA_Start_IT+0x214>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d022      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f60 <HAL_DMA_Start_IT+0x218>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01d      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a59      	ldr	r2, [pc, #356]	@ (8003f64 <HAL_DMA_Start_IT+0x21c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a57      	ldr	r2, [pc, #348]	@ (8003f68 <HAL_DMA_Start_IT+0x220>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a56      	ldr	r2, [pc, #344]	@ (8003f6c <HAL_DMA_Start_IT+0x224>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a54      	ldr	r2, [pc, #336]	@ (8003f70 <HAL_DMA_Start_IT+0x228>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a53      	ldr	r2, [pc, #332]	@ (8003f74 <HAL_DMA_Start_IT+0x22c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_DMA_Start_IT+0xee>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a51      	ldr	r2, [pc, #324]	@ (8003f78 <HAL_DMA_Start_IT+0x230>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d108      	bne.n	8003e48 <HAL_DMA_Start_IT+0x100>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e007      	b.n	8003e58 <HAL_DMA_Start_IT+0x110>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f001 fea2 	bl	8005ba8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a34      	ldr	r2, [pc, #208]	@ (8003f3c <HAL_DMA_Start_IT+0x1f4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d04a      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a33      	ldr	r2, [pc, #204]	@ (8003f40 <HAL_DMA_Start_IT+0x1f8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d045      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a31      	ldr	r2, [pc, #196]	@ (8003f44 <HAL_DMA_Start_IT+0x1fc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d040      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <HAL_DMA_Start_IT+0x200>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d03b      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2e      	ldr	r2, [pc, #184]	@ (8003f4c <HAL_DMA_Start_IT+0x204>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d036      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f50 <HAL_DMA_Start_IT+0x208>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d031      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f54 <HAL_DMA_Start_IT+0x20c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d02c      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2a      	ldr	r2, [pc, #168]	@ (8003f58 <HAL_DMA_Start_IT+0x210>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d027      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a28      	ldr	r2, [pc, #160]	@ (8003f5c <HAL_DMA_Start_IT+0x214>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a27      	ldr	r2, [pc, #156]	@ (8003f60 <HAL_DMA_Start_IT+0x218>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d01d      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a25      	ldr	r2, [pc, #148]	@ (8003f64 <HAL_DMA_Start_IT+0x21c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a24      	ldr	r2, [pc, #144]	@ (8003f68 <HAL_DMA_Start_IT+0x220>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	@ (8003f6c <HAL_DMA_Start_IT+0x224>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a21      	ldr	r2, [pc, #132]	@ (8003f70 <HAL_DMA_Start_IT+0x228>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f74 <HAL_DMA_Start_IT+0x22c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_DMA_Start_IT+0x1bc>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f78 <HAL_DMA_Start_IT+0x230>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_DMA_Start_IT+0x1c0>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <HAL_DMA_Start_IT+0x1c2>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d036      	beq.n	8003f7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 021e 	bic.w	r2, r3, #30
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0216 	orr.w	r2, r2, #22
 8003f20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d03e      	beq.n	8003fa8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0208 	orr.w	r2, r2, #8
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e035      	b.n	8003fa8 <HAL_DMA_Start_IT+0x260>
 8003f3c:	40020010 	.word	0x40020010
 8003f40:	40020028 	.word	0x40020028
 8003f44:	40020040 	.word	0x40020040
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	40020070 	.word	0x40020070
 8003f50:	40020088 	.word	0x40020088
 8003f54:	400200a0 	.word	0x400200a0
 8003f58:	400200b8 	.word	0x400200b8
 8003f5c:	40020410 	.word	0x40020410
 8003f60:	40020428 	.word	0x40020428
 8003f64:	40020440 	.word	0x40020440
 8003f68:	40020458 	.word	0x40020458
 8003f6c:	40020470 	.word	0x40020470
 8003f70:	40020488 	.word	0x40020488
 8003f74:	400204a0 	.word	0x400204a0
 8003f78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 020e 	bic.w	r2, r3, #14
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 020a 	orr.w	r2, r2, #10
 8003f8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0204 	orr.w	r2, r2, #4
 8003fa6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a83      	ldr	r2, [pc, #524]	@ (80041bc <HAL_DMA_Start_IT+0x474>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d072      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a82      	ldr	r2, [pc, #520]	@ (80041c0 <HAL_DMA_Start_IT+0x478>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d06d      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a80      	ldr	r2, [pc, #512]	@ (80041c4 <HAL_DMA_Start_IT+0x47c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d068      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7f      	ldr	r2, [pc, #508]	@ (80041c8 <HAL_DMA_Start_IT+0x480>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d063      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a7d      	ldr	r2, [pc, #500]	@ (80041cc <HAL_DMA_Start_IT+0x484>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d05e      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7c      	ldr	r2, [pc, #496]	@ (80041d0 <HAL_DMA_Start_IT+0x488>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d059      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a7a      	ldr	r2, [pc, #488]	@ (80041d4 <HAL_DMA_Start_IT+0x48c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d054      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a79      	ldr	r2, [pc, #484]	@ (80041d8 <HAL_DMA_Start_IT+0x490>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d04f      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a77      	ldr	r2, [pc, #476]	@ (80041dc <HAL_DMA_Start_IT+0x494>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d04a      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a76      	ldr	r2, [pc, #472]	@ (80041e0 <HAL_DMA_Start_IT+0x498>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d045      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a74      	ldr	r2, [pc, #464]	@ (80041e4 <HAL_DMA_Start_IT+0x49c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d040      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a73      	ldr	r2, [pc, #460]	@ (80041e8 <HAL_DMA_Start_IT+0x4a0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d03b      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a71      	ldr	r2, [pc, #452]	@ (80041ec <HAL_DMA_Start_IT+0x4a4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d036      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a70      	ldr	r2, [pc, #448]	@ (80041f0 <HAL_DMA_Start_IT+0x4a8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d031      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a6e      	ldr	r2, [pc, #440]	@ (80041f4 <HAL_DMA_Start_IT+0x4ac>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02c      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6d      	ldr	r2, [pc, #436]	@ (80041f8 <HAL_DMA_Start_IT+0x4b0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d027      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6b      	ldr	r2, [pc, #428]	@ (80041fc <HAL_DMA_Start_IT+0x4b4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d022      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6a      	ldr	r2, [pc, #424]	@ (8004200 <HAL_DMA_Start_IT+0x4b8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d01d      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a68      	ldr	r2, [pc, #416]	@ (8004204 <HAL_DMA_Start_IT+0x4bc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d018      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a67      	ldr	r2, [pc, #412]	@ (8004208 <HAL_DMA_Start_IT+0x4c0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a65      	ldr	r2, [pc, #404]	@ (800420c <HAL_DMA_Start_IT+0x4c4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a64      	ldr	r2, [pc, #400]	@ (8004210 <HAL_DMA_Start_IT+0x4c8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a62      	ldr	r2, [pc, #392]	@ (8004214 <HAL_DMA_Start_IT+0x4cc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_DMA_Start_IT+0x350>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a61      	ldr	r2, [pc, #388]	@ (8004218 <HAL_DMA_Start_IT+0x4d0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d101      	bne.n	800409c <HAL_DMA_Start_IT+0x354>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_DMA_Start_IT+0x356>
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01a      	beq.n	80040d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a37      	ldr	r2, [pc, #220]	@ (80041bc <HAL_DMA_Start_IT+0x474>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d04a      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a36      	ldr	r2, [pc, #216]	@ (80041c0 <HAL_DMA_Start_IT+0x478>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d045      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a34      	ldr	r2, [pc, #208]	@ (80041c4 <HAL_DMA_Start_IT+0x47c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d040      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a33      	ldr	r2, [pc, #204]	@ (80041c8 <HAL_DMA_Start_IT+0x480>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d03b      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a31      	ldr	r2, [pc, #196]	@ (80041cc <HAL_DMA_Start_IT+0x484>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d036      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a30      	ldr	r2, [pc, #192]	@ (80041d0 <HAL_DMA_Start_IT+0x488>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d031      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2e      	ldr	r2, [pc, #184]	@ (80041d4 <HAL_DMA_Start_IT+0x48c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02c      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2d      	ldr	r2, [pc, #180]	@ (80041d8 <HAL_DMA_Start_IT+0x490>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d027      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2b      	ldr	r2, [pc, #172]	@ (80041dc <HAL_DMA_Start_IT+0x494>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2a      	ldr	r2, [pc, #168]	@ (80041e0 <HAL_DMA_Start_IT+0x498>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d01d      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a28      	ldr	r2, [pc, #160]	@ (80041e4 <HAL_DMA_Start_IT+0x49c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a27      	ldr	r2, [pc, #156]	@ (80041e8 <HAL_DMA_Start_IT+0x4a0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a25      	ldr	r2, [pc, #148]	@ (80041ec <HAL_DMA_Start_IT+0x4a4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a24      	ldr	r2, [pc, #144]	@ (80041f0 <HAL_DMA_Start_IT+0x4a8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a22      	ldr	r2, [pc, #136]	@ (80041f4 <HAL_DMA_Start_IT+0x4ac>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_DMA_Start_IT+0x430>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a21      	ldr	r2, [pc, #132]	@ (80041f8 <HAL_DMA_Start_IT+0x4b0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d108      	bne.n	800418a <HAL_DMA_Start_IT+0x442>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e012      	b.n	80041b0 <HAL_DMA_Start_IT+0x468>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e009      	b.n	80041b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40020010 	.word	0x40020010
 80041c0:	40020028 	.word	0x40020028
 80041c4:	40020040 	.word	0x40020040
 80041c8:	40020058 	.word	0x40020058
 80041cc:	40020070 	.word	0x40020070
 80041d0:	40020088 	.word	0x40020088
 80041d4:	400200a0 	.word	0x400200a0
 80041d8:	400200b8 	.word	0x400200b8
 80041dc:	40020410 	.word	0x40020410
 80041e0:	40020428 	.word	0x40020428
 80041e4:	40020440 	.word	0x40020440
 80041e8:	40020458 	.word	0x40020458
 80041ec:	40020470 	.word	0x40020470
 80041f0:	40020488 	.word	0x40020488
 80041f4:	400204a0 	.word	0x400204a0
 80041f8:	400204b8 	.word	0x400204b8
 80041fc:	58025408 	.word	0x58025408
 8004200:	5802541c 	.word	0x5802541c
 8004204:	58025430 	.word	0x58025430
 8004208:	58025444 	.word	0x58025444
 800420c:	58025458 	.word	0x58025458
 8004210:	5802546c 	.word	0x5802546c
 8004214:	58025480 	.word	0x58025480
 8004218:	58025494 	.word	0x58025494

0800421c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004224:	f7fd fb88 	bl	8001938 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e2dc      	b.n	80047ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d008      	beq.n	8004252 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2280      	movs	r2, #128	@ 0x80
 8004244:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e2cd      	b.n	80047ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a76      	ldr	r2, [pc, #472]	@ (8004430 <HAL_DMA_Abort+0x214>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d04a      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a74      	ldr	r2, [pc, #464]	@ (8004434 <HAL_DMA_Abort+0x218>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d045      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a73      	ldr	r2, [pc, #460]	@ (8004438 <HAL_DMA_Abort+0x21c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d040      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a71      	ldr	r2, [pc, #452]	@ (800443c <HAL_DMA_Abort+0x220>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d03b      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a70      	ldr	r2, [pc, #448]	@ (8004440 <HAL_DMA_Abort+0x224>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d036      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a6e      	ldr	r2, [pc, #440]	@ (8004444 <HAL_DMA_Abort+0x228>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d031      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a6d      	ldr	r2, [pc, #436]	@ (8004448 <HAL_DMA_Abort+0x22c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d02c      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6b      	ldr	r2, [pc, #428]	@ (800444c <HAL_DMA_Abort+0x230>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d027      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004450 <HAL_DMA_Abort+0x234>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d022      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a68      	ldr	r2, [pc, #416]	@ (8004454 <HAL_DMA_Abort+0x238>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01d      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a67      	ldr	r2, [pc, #412]	@ (8004458 <HAL_DMA_Abort+0x23c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a65      	ldr	r2, [pc, #404]	@ (800445c <HAL_DMA_Abort+0x240>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a64      	ldr	r2, [pc, #400]	@ (8004460 <HAL_DMA_Abort+0x244>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a62      	ldr	r2, [pc, #392]	@ (8004464 <HAL_DMA_Abort+0x248>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a61      	ldr	r2, [pc, #388]	@ (8004468 <HAL_DMA_Abort+0x24c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_DMA_Abort+0xd6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5f      	ldr	r2, [pc, #380]	@ (800446c <HAL_DMA_Abort+0x250>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <HAL_DMA_Abort+0xda>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_DMA_Abort+0xdc>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 021e 	bic.w	r2, r2, #30
 800430a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800431a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e00a      	b.n	800433a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 020e 	bic.w	r2, r2, #14
 8004332:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a3c      	ldr	r2, [pc, #240]	@ (8004430 <HAL_DMA_Abort+0x214>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d072      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3a      	ldr	r2, [pc, #232]	@ (8004434 <HAL_DMA_Abort+0x218>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d06d      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a39      	ldr	r2, [pc, #228]	@ (8004438 <HAL_DMA_Abort+0x21c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d068      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a37      	ldr	r2, [pc, #220]	@ (800443c <HAL_DMA_Abort+0x220>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d063      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a36      	ldr	r2, [pc, #216]	@ (8004440 <HAL_DMA_Abort+0x224>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d05e      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a34      	ldr	r2, [pc, #208]	@ (8004444 <HAL_DMA_Abort+0x228>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d059      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a33      	ldr	r2, [pc, #204]	@ (8004448 <HAL_DMA_Abort+0x22c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d054      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a31      	ldr	r2, [pc, #196]	@ (800444c <HAL_DMA_Abort+0x230>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d04f      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a30      	ldr	r2, [pc, #192]	@ (8004450 <HAL_DMA_Abort+0x234>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d04a      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2e      	ldr	r2, [pc, #184]	@ (8004454 <HAL_DMA_Abort+0x238>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d045      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004458 <HAL_DMA_Abort+0x23c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d040      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2b      	ldr	r2, [pc, #172]	@ (800445c <HAL_DMA_Abort+0x240>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d03b      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004460 <HAL_DMA_Abort+0x244>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d036      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a28      	ldr	r2, [pc, #160]	@ (8004464 <HAL_DMA_Abort+0x248>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d031      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a27      	ldr	r2, [pc, #156]	@ (8004468 <HAL_DMA_Abort+0x24c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d02c      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a25      	ldr	r2, [pc, #148]	@ (800446c <HAL_DMA_Abort+0x250>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d027      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a24      	ldr	r2, [pc, #144]	@ (8004470 <HAL_DMA_Abort+0x254>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a22      	ldr	r2, [pc, #136]	@ (8004474 <HAL_DMA_Abort+0x258>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a21      	ldr	r2, [pc, #132]	@ (8004478 <HAL_DMA_Abort+0x25c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <HAL_DMA_Abort+0x260>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <HAL_DMA_Abort+0x264>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1c      	ldr	r2, [pc, #112]	@ (8004484 <HAL_DMA_Abort+0x268>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1b      	ldr	r2, [pc, #108]	@ (8004488 <HAL_DMA_Abort+0x26c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_DMA_Abort+0x20e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a19      	ldr	r2, [pc, #100]	@ (800448c <HAL_DMA_Abort+0x270>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d132      	bne.n	8004490 <HAL_DMA_Abort+0x274>
 800442a:	2301      	movs	r3, #1
 800442c:	e031      	b.n	8004492 <HAL_DMA_Abort+0x276>
 800442e:	bf00      	nop
 8004430:	40020010 	.word	0x40020010
 8004434:	40020028 	.word	0x40020028
 8004438:	40020040 	.word	0x40020040
 800443c:	40020058 	.word	0x40020058
 8004440:	40020070 	.word	0x40020070
 8004444:	40020088 	.word	0x40020088
 8004448:	400200a0 	.word	0x400200a0
 800444c:	400200b8 	.word	0x400200b8
 8004450:	40020410 	.word	0x40020410
 8004454:	40020428 	.word	0x40020428
 8004458:	40020440 	.word	0x40020440
 800445c:	40020458 	.word	0x40020458
 8004460:	40020470 	.word	0x40020470
 8004464:	40020488 	.word	0x40020488
 8004468:	400204a0 	.word	0x400204a0
 800446c:	400204b8 	.word	0x400204b8
 8004470:	58025408 	.word	0x58025408
 8004474:	5802541c 	.word	0x5802541c
 8004478:	58025430 	.word	0x58025430
 800447c:	58025444 	.word	0x58025444
 8004480:	58025458 	.word	0x58025458
 8004484:	5802546c 	.word	0x5802546c
 8004488:	58025480 	.word	0x58025480
 800448c:	58025494 	.word	0x58025494
 8004490:	2300      	movs	r3, #0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004660 <HAL_DMA_Abort+0x444>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d04a      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004664 <HAL_DMA_Abort+0x448>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d045      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6a      	ldr	r2, [pc, #424]	@ (8004668 <HAL_DMA_Abort+0x44c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d040      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a68      	ldr	r2, [pc, #416]	@ (800466c <HAL_DMA_Abort+0x450>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d03b      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a67      	ldr	r2, [pc, #412]	@ (8004670 <HAL_DMA_Abort+0x454>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d036      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a65      	ldr	r2, [pc, #404]	@ (8004674 <HAL_DMA_Abort+0x458>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d031      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a64      	ldr	r2, [pc, #400]	@ (8004678 <HAL_DMA_Abort+0x45c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d02c      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a62      	ldr	r2, [pc, #392]	@ (800467c <HAL_DMA_Abort+0x460>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d027      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a61      	ldr	r2, [pc, #388]	@ (8004680 <HAL_DMA_Abort+0x464>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5f      	ldr	r2, [pc, #380]	@ (8004684 <HAL_DMA_Abort+0x468>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5e      	ldr	r2, [pc, #376]	@ (8004688 <HAL_DMA_Abort+0x46c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5c      	ldr	r2, [pc, #368]	@ (800468c <HAL_DMA_Abort+0x470>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5b      	ldr	r2, [pc, #364]	@ (8004690 <HAL_DMA_Abort+0x474>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a59      	ldr	r2, [pc, #356]	@ (8004694 <HAL_DMA_Abort+0x478>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a58      	ldr	r2, [pc, #352]	@ (8004698 <HAL_DMA_Abort+0x47c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_DMA_Abort+0x32a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a56      	ldr	r2, [pc, #344]	@ (800469c <HAL_DMA_Abort+0x480>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <HAL_DMA_Abort+0x33c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e007      	b.n	8004568 <HAL_DMA_Abort+0x34c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004568:	e013      	b.n	8004592 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800456a:	f7fd f9e5 	bl	8001938 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b05      	cmp	r3, #5
 8004576:	d90c      	bls.n	8004592 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2203      	movs	r2, #3
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e12d      	b.n	80047ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e5      	bne.n	800456a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004660 <HAL_DMA_Abort+0x444>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d04a      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004664 <HAL_DMA_Abort+0x448>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d045      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004668 <HAL_DMA_Abort+0x44c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d040      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2a      	ldr	r2, [pc, #168]	@ (800466c <HAL_DMA_Abort+0x450>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d03b      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a29      	ldr	r2, [pc, #164]	@ (8004670 <HAL_DMA_Abort+0x454>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d036      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a27      	ldr	r2, [pc, #156]	@ (8004674 <HAL_DMA_Abort+0x458>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <HAL_DMA_Abort+0x45c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02c      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a24      	ldr	r2, [pc, #144]	@ (800467c <HAL_DMA_Abort+0x460>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d027      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a23      	ldr	r2, [pc, #140]	@ (8004680 <HAL_DMA_Abort+0x464>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_DMA_Abort+0x422>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a21      	ldr	r2, [pc, #132]	@ (8004684 <HAL_DMA_Abort+0x468>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01d      	beq.n	800463e <HAL_DMA_Abort+0x422>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a20      	ldr	r2, [pc, #128]	@ (8004688 <HAL_DMA_Abort+0x46c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <HAL_DMA_Abort+0x422>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1e      	ldr	r2, [pc, #120]	@ (800468c <HAL_DMA_Abort+0x470>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <HAL_DMA_Abort+0x422>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1d      	ldr	r2, [pc, #116]	@ (8004690 <HAL_DMA_Abort+0x474>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_DMA_Abort+0x422>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <HAL_DMA_Abort+0x478>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_DMA_Abort+0x422>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1a      	ldr	r2, [pc, #104]	@ (8004698 <HAL_DMA_Abort+0x47c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_DMA_Abort+0x422>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a18      	ldr	r2, [pc, #96]	@ (800469c <HAL_DMA_Abort+0x480>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_DMA_Abort+0x426>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_DMA_Abort+0x428>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02b      	beq.n	80046a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	223f      	movs	r2, #63	@ 0x3f
 8004658:	409a      	lsls	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	e02a      	b.n	80046b6 <HAL_DMA_Abort+0x49a>
 8004660:	40020010 	.word	0x40020010
 8004664:	40020028 	.word	0x40020028
 8004668:	40020040 	.word	0x40020040
 800466c:	40020058 	.word	0x40020058
 8004670:	40020070 	.word	0x40020070
 8004674:	40020088 	.word	0x40020088
 8004678:	400200a0 	.word	0x400200a0
 800467c:	400200b8 	.word	0x400200b8
 8004680:	40020410 	.word	0x40020410
 8004684:	40020428 	.word	0x40020428
 8004688:	40020440 	.word	0x40020440
 800468c:	40020458 	.word	0x40020458
 8004690:	40020470 	.word	0x40020470
 8004694:	40020488 	.word	0x40020488
 8004698:	400204a0 	.word	0x400204a0
 800469c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2201      	movs	r2, #1
 80046b0:	409a      	lsls	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a4f      	ldr	r2, [pc, #316]	@ (80047f8 <HAL_DMA_Abort+0x5dc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d072      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a4d      	ldr	r2, [pc, #308]	@ (80047fc <HAL_DMA_Abort+0x5e0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d06d      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004800 <HAL_DMA_Abort+0x5e4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d068      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004804 <HAL_DMA_Abort+0x5e8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d063      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a49      	ldr	r2, [pc, #292]	@ (8004808 <HAL_DMA_Abort+0x5ec>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d05e      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a47      	ldr	r2, [pc, #284]	@ (800480c <HAL_DMA_Abort+0x5f0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d059      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a46      	ldr	r2, [pc, #280]	@ (8004810 <HAL_DMA_Abort+0x5f4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d054      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a44      	ldr	r2, [pc, #272]	@ (8004814 <HAL_DMA_Abort+0x5f8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d04f      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a43      	ldr	r2, [pc, #268]	@ (8004818 <HAL_DMA_Abort+0x5fc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d04a      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a41      	ldr	r2, [pc, #260]	@ (800481c <HAL_DMA_Abort+0x600>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d045      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a40      	ldr	r2, [pc, #256]	@ (8004820 <HAL_DMA_Abort+0x604>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d040      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a3e      	ldr	r2, [pc, #248]	@ (8004824 <HAL_DMA_Abort+0x608>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d03b      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a3d      	ldr	r2, [pc, #244]	@ (8004828 <HAL_DMA_Abort+0x60c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d036      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3b      	ldr	r2, [pc, #236]	@ (800482c <HAL_DMA_Abort+0x610>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d031      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3a      	ldr	r2, [pc, #232]	@ (8004830 <HAL_DMA_Abort+0x614>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d02c      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a38      	ldr	r2, [pc, #224]	@ (8004834 <HAL_DMA_Abort+0x618>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d027      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a37      	ldr	r2, [pc, #220]	@ (8004838 <HAL_DMA_Abort+0x61c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a35      	ldr	r2, [pc, #212]	@ (800483c <HAL_DMA_Abort+0x620>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01d      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a34      	ldr	r2, [pc, #208]	@ (8004840 <HAL_DMA_Abort+0x624>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d018      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a32      	ldr	r2, [pc, #200]	@ (8004844 <HAL_DMA_Abort+0x628>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a31      	ldr	r2, [pc, #196]	@ (8004848 <HAL_DMA_Abort+0x62c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a2f      	ldr	r2, [pc, #188]	@ (800484c <HAL_DMA_Abort+0x630>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a2e      	ldr	r2, [pc, #184]	@ (8004850 <HAL_DMA_Abort+0x634>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_DMA_Abort+0x58a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004854 <HAL_DMA_Abort+0x638>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_DMA_Abort+0x58e>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_DMA_Abort+0x590>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d015      	beq.n	80047dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80047b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80047da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40020010 	.word	0x40020010
 80047fc:	40020028 	.word	0x40020028
 8004800:	40020040 	.word	0x40020040
 8004804:	40020058 	.word	0x40020058
 8004808:	40020070 	.word	0x40020070
 800480c:	40020088 	.word	0x40020088
 8004810:	400200a0 	.word	0x400200a0
 8004814:	400200b8 	.word	0x400200b8
 8004818:	40020410 	.word	0x40020410
 800481c:	40020428 	.word	0x40020428
 8004820:	40020440 	.word	0x40020440
 8004824:	40020458 	.word	0x40020458
 8004828:	40020470 	.word	0x40020470
 800482c:	40020488 	.word	0x40020488
 8004830:	400204a0 	.word	0x400204a0
 8004834:	400204b8 	.word	0x400204b8
 8004838:	58025408 	.word	0x58025408
 800483c:	5802541c 	.word	0x5802541c
 8004840:	58025430 	.word	0x58025430
 8004844:	58025444 	.word	0x58025444
 8004848:	58025458 	.word	0x58025458
 800484c:	5802546c 	.word	0x5802546c
 8004850:	58025480 	.word	0x58025480
 8004854:	58025494 	.word	0x58025494

08004858 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e237      	b.n	8004cda <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d004      	beq.n	8004880 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2280      	movs	r2, #128	@ 0x80
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e22c      	b.n	8004cda <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a5c      	ldr	r2, [pc, #368]	@ (80049f8 <HAL_DMA_Abort_IT+0x1a0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d04a      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a5b      	ldr	r2, [pc, #364]	@ (80049fc <HAL_DMA_Abort_IT+0x1a4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d045      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a59      	ldr	r2, [pc, #356]	@ (8004a00 <HAL_DMA_Abort_IT+0x1a8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d040      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a58      	ldr	r2, [pc, #352]	@ (8004a04 <HAL_DMA_Abort_IT+0x1ac>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d03b      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a56      	ldr	r2, [pc, #344]	@ (8004a08 <HAL_DMA_Abort_IT+0x1b0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d036      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a55      	ldr	r2, [pc, #340]	@ (8004a0c <HAL_DMA_Abort_IT+0x1b4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d031      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a53      	ldr	r2, [pc, #332]	@ (8004a10 <HAL_DMA_Abort_IT+0x1b8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02c      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a52      	ldr	r2, [pc, #328]	@ (8004a14 <HAL_DMA_Abort_IT+0x1bc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d027      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a50      	ldr	r2, [pc, #320]	@ (8004a18 <HAL_DMA_Abort_IT+0x1c0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d022      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a4f      	ldr	r2, [pc, #316]	@ (8004a1c <HAL_DMA_Abort_IT+0x1c4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d01d      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004a20 <HAL_DMA_Abort_IT+0x1c8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d018      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4c      	ldr	r2, [pc, #304]	@ (8004a24 <HAL_DMA_Abort_IT+0x1cc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004a28 <HAL_DMA_Abort_IT+0x1d0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a49      	ldr	r2, [pc, #292]	@ (8004a2c <HAL_DMA_Abort_IT+0x1d4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a47      	ldr	r2, [pc, #284]	@ (8004a30 <HAL_DMA_Abort_IT+0x1d8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_DMA_Abort_IT+0xc8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a46      	ldr	r2, [pc, #280]	@ (8004a34 <HAL_DMA_Abort_IT+0x1dc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_DMA_Abort_IT+0xcc>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_DMA_Abort_IT+0xce>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8086 	beq.w	8004a38 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2204      	movs	r2, #4
 8004930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2f      	ldr	r2, [pc, #188]	@ (80049f8 <HAL_DMA_Abort_IT+0x1a0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d04a      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2e      	ldr	r2, [pc, #184]	@ (80049fc <HAL_DMA_Abort_IT+0x1a4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d045      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a00 <HAL_DMA_Abort_IT+0x1a8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d040      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	@ (8004a04 <HAL_DMA_Abort_IT+0x1ac>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d03b      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a29      	ldr	r2, [pc, #164]	@ (8004a08 <HAL_DMA_Abort_IT+0x1b0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d036      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a28      	ldr	r2, [pc, #160]	@ (8004a0c <HAL_DMA_Abort_IT+0x1b4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d031      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a26      	ldr	r2, [pc, #152]	@ (8004a10 <HAL_DMA_Abort_IT+0x1b8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d02c      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a25      	ldr	r2, [pc, #148]	@ (8004a14 <HAL_DMA_Abort_IT+0x1bc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d027      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a23      	ldr	r2, [pc, #140]	@ (8004a18 <HAL_DMA_Abort_IT+0x1c0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d022      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a22      	ldr	r2, [pc, #136]	@ (8004a1c <HAL_DMA_Abort_IT+0x1c4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d01d      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a20      	ldr	r2, [pc, #128]	@ (8004a20 <HAL_DMA_Abort_IT+0x1c8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d018      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a24 <HAL_DMA_Abort_IT+0x1cc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a28 <HAL_DMA_Abort_IT+0x1d0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00e      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1c      	ldr	r2, [pc, #112]	@ (8004a2c <HAL_DMA_Abort_IT+0x1d4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d009      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a30 <HAL_DMA_Abort_IT+0x1d8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x17c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a19      	ldr	r2, [pc, #100]	@ (8004a34 <HAL_DMA_Abort_IT+0x1dc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d108      	bne.n	80049e6 <HAL_DMA_Abort_IT+0x18e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	e178      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x480>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e16f      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x480>
 80049f8:	40020010 	.word	0x40020010
 80049fc:	40020028 	.word	0x40020028
 8004a00:	40020040 	.word	0x40020040
 8004a04:	40020058 	.word	0x40020058
 8004a08:	40020070 	.word	0x40020070
 8004a0c:	40020088 	.word	0x40020088
 8004a10:	400200a0 	.word	0x400200a0
 8004a14:	400200b8 	.word	0x400200b8
 8004a18:	40020410 	.word	0x40020410
 8004a1c:	40020428 	.word	0x40020428
 8004a20:	40020440 	.word	0x40020440
 8004a24:	40020458 	.word	0x40020458
 8004a28:	40020470 	.word	0x40020470
 8004a2c:	40020488 	.word	0x40020488
 8004a30:	400204a0 	.word	0x400204a0
 8004a34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 020e 	bic.w	r2, r2, #14
 8004a46:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a6c      	ldr	r2, [pc, #432]	@ (8004c00 <HAL_DMA_Abort_IT+0x3a8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d04a      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6b      	ldr	r2, [pc, #428]	@ (8004c04 <HAL_DMA_Abort_IT+0x3ac>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d045      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a69      	ldr	r2, [pc, #420]	@ (8004c08 <HAL_DMA_Abort_IT+0x3b0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d040      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a68      	ldr	r2, [pc, #416]	@ (8004c0c <HAL_DMA_Abort_IT+0x3b4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d03b      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a66      	ldr	r2, [pc, #408]	@ (8004c10 <HAL_DMA_Abort_IT+0x3b8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d036      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a65      	ldr	r2, [pc, #404]	@ (8004c14 <HAL_DMA_Abort_IT+0x3bc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d031      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a63      	ldr	r2, [pc, #396]	@ (8004c18 <HAL_DMA_Abort_IT+0x3c0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d02c      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a62      	ldr	r2, [pc, #392]	@ (8004c1c <HAL_DMA_Abort_IT+0x3c4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d027      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a60      	ldr	r2, [pc, #384]	@ (8004c20 <HAL_DMA_Abort_IT+0x3c8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8004c24 <HAL_DMA_Abort_IT+0x3cc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d01d      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c28 <HAL_DMA_Abort_IT+0x3d0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d018      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a5c      	ldr	r2, [pc, #368]	@ (8004c2c <HAL_DMA_Abort_IT+0x3d4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a5a      	ldr	r2, [pc, #360]	@ (8004c30 <HAL_DMA_Abort_IT+0x3d8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a59      	ldr	r2, [pc, #356]	@ (8004c34 <HAL_DMA_Abort_IT+0x3dc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a57      	ldr	r2, [pc, #348]	@ (8004c38 <HAL_DMA_Abort_IT+0x3e0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x290>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a56      	ldr	r2, [pc, #344]	@ (8004c3c <HAL_DMA_Abort_IT+0x3e4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d108      	bne.n	8004afa <HAL_DMA_Abort_IT+0x2a2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e007      	b.n	8004b0a <HAL_DMA_Abort_IT+0x2b2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0201 	bic.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c00 <HAL_DMA_Abort_IT+0x3a8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d072      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3a      	ldr	r2, [pc, #232]	@ (8004c04 <HAL_DMA_Abort_IT+0x3ac>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d06d      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a39      	ldr	r2, [pc, #228]	@ (8004c08 <HAL_DMA_Abort_IT+0x3b0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d068      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a37      	ldr	r2, [pc, #220]	@ (8004c0c <HAL_DMA_Abort_IT+0x3b4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d063      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a36      	ldr	r2, [pc, #216]	@ (8004c10 <HAL_DMA_Abort_IT+0x3b8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d05e      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a34      	ldr	r2, [pc, #208]	@ (8004c14 <HAL_DMA_Abort_IT+0x3bc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d059      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a33      	ldr	r2, [pc, #204]	@ (8004c18 <HAL_DMA_Abort_IT+0x3c0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d054      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a31      	ldr	r2, [pc, #196]	@ (8004c1c <HAL_DMA_Abort_IT+0x3c4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d04f      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a30      	ldr	r2, [pc, #192]	@ (8004c20 <HAL_DMA_Abort_IT+0x3c8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d04a      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2e      	ldr	r2, [pc, #184]	@ (8004c24 <HAL_DMA_Abort_IT+0x3cc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d045      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a2d      	ldr	r2, [pc, #180]	@ (8004c28 <HAL_DMA_Abort_IT+0x3d0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d040      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c2c <HAL_DMA_Abort_IT+0x3d4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d03b      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2a      	ldr	r2, [pc, #168]	@ (8004c30 <HAL_DMA_Abort_IT+0x3d8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d036      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a28      	ldr	r2, [pc, #160]	@ (8004c34 <HAL_DMA_Abort_IT+0x3dc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d031      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a27      	ldr	r2, [pc, #156]	@ (8004c38 <HAL_DMA_Abort_IT+0x3e0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d02c      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a25      	ldr	r2, [pc, #148]	@ (8004c3c <HAL_DMA_Abort_IT+0x3e4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d027      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a24      	ldr	r2, [pc, #144]	@ (8004c40 <HAL_DMA_Abort_IT+0x3e8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a22      	ldr	r2, [pc, #136]	@ (8004c44 <HAL_DMA_Abort_IT+0x3ec>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a21      	ldr	r2, [pc, #132]	@ (8004c48 <HAL_DMA_Abort_IT+0x3f0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c4c <HAL_DMA_Abort_IT+0x3f4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c50 <HAL_DMA_Abort_IT+0x3f8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c54 <HAL_DMA_Abort_IT+0x3fc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_DMA_Abort_IT+0x400>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x3a2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	@ (8004c5c <HAL_DMA_Abort_IT+0x404>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d132      	bne.n	8004c60 <HAL_DMA_Abort_IT+0x408>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e031      	b.n	8004c62 <HAL_DMA_Abort_IT+0x40a>
 8004bfe:	bf00      	nop
 8004c00:	40020010 	.word	0x40020010
 8004c04:	40020028 	.word	0x40020028
 8004c08:	40020040 	.word	0x40020040
 8004c0c:	40020058 	.word	0x40020058
 8004c10:	40020070 	.word	0x40020070
 8004c14:	40020088 	.word	0x40020088
 8004c18:	400200a0 	.word	0x400200a0
 8004c1c:	400200b8 	.word	0x400200b8
 8004c20:	40020410 	.word	0x40020410
 8004c24:	40020428 	.word	0x40020428
 8004c28:	40020440 	.word	0x40020440
 8004c2c:	40020458 	.word	0x40020458
 8004c30:	40020470 	.word	0x40020470
 8004c34:	40020488 	.word	0x40020488
 8004c38:	400204a0 	.word	0x400204a0
 8004c3c:	400204b8 	.word	0x400204b8
 8004c40:	58025408 	.word	0x58025408
 8004c44:	5802541c 	.word	0x5802541c
 8004c48:	58025430 	.word	0x58025430
 8004c4c:	58025444 	.word	0x58025444
 8004c50:	58025458 	.word	0x58025458
 8004c54:	5802546c 	.word	0x5802546c
 8004c58:	58025480 	.word	0x58025480
 8004c5c:	58025494 	.word	0x58025494
 8004c60:	2300      	movs	r3, #0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d028      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ca8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cb6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop

08004ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	@ 0x28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cf0:	4b67      	ldr	r3, [pc, #412]	@ (8004e90 <HAL_DMA_IRQHandler+0x1ac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a67      	ldr	r2, [pc, #412]	@ (8004e94 <HAL_DMA_IRQHandler+0x1b0>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a5f      	ldr	r2, [pc, #380]	@ (8004e98 <HAL_DMA_IRQHandler+0x1b4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d04a      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5d      	ldr	r2, [pc, #372]	@ (8004e9c <HAL_DMA_IRQHandler+0x1b8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d045      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ea0 <HAL_DMA_IRQHandler+0x1bc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d040      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a5a      	ldr	r2, [pc, #360]	@ (8004ea4 <HAL_DMA_IRQHandler+0x1c0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d03b      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a59      	ldr	r2, [pc, #356]	@ (8004ea8 <HAL_DMA_IRQHandler+0x1c4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d036      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a57      	ldr	r2, [pc, #348]	@ (8004eac <HAL_DMA_IRQHandler+0x1c8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d031      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a56      	ldr	r2, [pc, #344]	@ (8004eb0 <HAL_DMA_IRQHandler+0x1cc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d02c      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a54      	ldr	r2, [pc, #336]	@ (8004eb4 <HAL_DMA_IRQHandler+0x1d0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d027      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a53      	ldr	r2, [pc, #332]	@ (8004eb8 <HAL_DMA_IRQHandler+0x1d4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d022      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a51      	ldr	r2, [pc, #324]	@ (8004ebc <HAL_DMA_IRQHandler+0x1d8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01d      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a50      	ldr	r2, [pc, #320]	@ (8004ec0 <HAL_DMA_IRQHandler+0x1dc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d018      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a4e      	ldr	r2, [pc, #312]	@ (8004ec4 <HAL_DMA_IRQHandler+0x1e0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a4d      	ldr	r2, [pc, #308]	@ (8004ec8 <HAL_DMA_IRQHandler+0x1e4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004ecc <HAL_DMA_IRQHandler+0x1e8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed0 <HAL_DMA_IRQHandler+0x1ec>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xd2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a48      	ldr	r2, [pc, #288]	@ (8004ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <HAL_DMA_IRQHandler+0xd6>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_DMA_IRQHandler+0xd8>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 842b 	beq.w	8005618 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	2208      	movs	r2, #8
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80a2 	beq.w	8004f1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8004e98 <HAL_DMA_IRQHandler+0x1b4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d04a      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e9c <HAL_DMA_IRQHandler+0x1b8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d045      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <HAL_DMA_IRQHandler+0x1bc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d040      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea4 <HAL_DMA_IRQHandler+0x1c0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d03b      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a28      	ldr	r2, [pc, #160]	@ (8004ea8 <HAL_DMA_IRQHandler+0x1c4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d036      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a27      	ldr	r2, [pc, #156]	@ (8004eac <HAL_DMA_IRQHandler+0x1c8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d031      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a25      	ldr	r2, [pc, #148]	@ (8004eb0 <HAL_DMA_IRQHandler+0x1cc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d02c      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a24      	ldr	r2, [pc, #144]	@ (8004eb4 <HAL_DMA_IRQHandler+0x1d0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d027      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a22      	ldr	r2, [pc, #136]	@ (8004eb8 <HAL_DMA_IRQHandler+0x1d4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d022      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a21      	ldr	r2, [pc, #132]	@ (8004ebc <HAL_DMA_IRQHandler+0x1d8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d01d      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec0 <HAL_DMA_IRQHandler+0x1dc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d018      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec4 <HAL_DMA_IRQHandler+0x1e0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec8 <HAL_DMA_IRQHandler+0x1e4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00e      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004ecc <HAL_DMA_IRQHandler+0x1e8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d009      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a19      	ldr	r2, [pc, #100]	@ (8004ed0 <HAL_DMA_IRQHandler+0x1ec>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x194>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d12f      	bne.n	8004ed8 <HAL_DMA_IRQHandler+0x1f4>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	e02e      	b.n	8004eec <HAL_DMA_IRQHandler+0x208>
 8004e8e:	bf00      	nop
 8004e90:	24000404 	.word	0x24000404
 8004e94:	1b4e81b5 	.word	0x1b4e81b5
 8004e98:	40020010 	.word	0x40020010
 8004e9c:	40020028 	.word	0x40020028
 8004ea0:	40020040 	.word	0x40020040
 8004ea4:	40020058 	.word	0x40020058
 8004ea8:	40020070 	.word	0x40020070
 8004eac:	40020088 	.word	0x40020088
 8004eb0:	400200a0 	.word	0x400200a0
 8004eb4:	400200b8 	.word	0x400200b8
 8004eb8:	40020410 	.word	0x40020410
 8004ebc:	40020428 	.word	0x40020428
 8004ec0:	40020440 	.word	0x40020440
 8004ec4:	40020458 	.word	0x40020458
 8004ec8:	40020470 	.word	0x40020470
 8004ecc:	40020488 	.word	0x40020488
 8004ed0:	400204a0 	.word	0x400204a0
 8004ed4:	400204b8 	.word	0x400204b8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bf14      	ite	ne
 8004ee6:	2301      	movne	r3, #1
 8004ee8:	2300      	moveq	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0204 	bic.w	r2, r2, #4
 8004efe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2208      	movs	r2, #8
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	f043 0201 	orr.w	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d06e      	beq.n	8005010 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a69      	ldr	r2, [pc, #420]	@ (80050dc <HAL_DMA_IRQHandler+0x3f8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d04a      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a67      	ldr	r2, [pc, #412]	@ (80050e0 <HAL_DMA_IRQHandler+0x3fc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d045      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a66      	ldr	r2, [pc, #408]	@ (80050e4 <HAL_DMA_IRQHandler+0x400>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d040      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a64      	ldr	r2, [pc, #400]	@ (80050e8 <HAL_DMA_IRQHandler+0x404>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d03b      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a63      	ldr	r2, [pc, #396]	@ (80050ec <HAL_DMA_IRQHandler+0x408>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d036      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a61      	ldr	r2, [pc, #388]	@ (80050f0 <HAL_DMA_IRQHandler+0x40c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d031      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a60      	ldr	r2, [pc, #384]	@ (80050f4 <HAL_DMA_IRQHandler+0x410>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d02c      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a5e      	ldr	r2, [pc, #376]	@ (80050f8 <HAL_DMA_IRQHandler+0x414>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d027      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a5d      	ldr	r2, [pc, #372]	@ (80050fc <HAL_DMA_IRQHandler+0x418>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a5b      	ldr	r2, [pc, #364]	@ (8005100 <HAL_DMA_IRQHandler+0x41c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01d      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a5a      	ldr	r2, [pc, #360]	@ (8005104 <HAL_DMA_IRQHandler+0x420>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a58      	ldr	r2, [pc, #352]	@ (8005108 <HAL_DMA_IRQHandler+0x424>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a57      	ldr	r2, [pc, #348]	@ (800510c <HAL_DMA_IRQHandler+0x428>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a55      	ldr	r2, [pc, #340]	@ (8005110 <HAL_DMA_IRQHandler+0x42c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a54      	ldr	r2, [pc, #336]	@ (8005114 <HAL_DMA_IRQHandler+0x430>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2ee>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a52      	ldr	r2, [pc, #328]	@ (8005118 <HAL_DMA_IRQHandler+0x434>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10a      	bne.n	8004fe8 <HAL_DMA_IRQHandler+0x304>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	e003      	b.n	8004ff0 <HAL_DMA_IRQHandler+0x30c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00d      	beq.n	8005010 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	409a      	lsls	r2, r3
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005008:	f043 0202 	orr.w	r2, r3, #2
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	2204      	movs	r2, #4
 800501a:	409a      	lsls	r2, r3
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 808f 	beq.w	8005144 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2c      	ldr	r2, [pc, #176]	@ (80050dc <HAL_DMA_IRQHandler+0x3f8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d04a      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a2a      	ldr	r2, [pc, #168]	@ (80050e0 <HAL_DMA_IRQHandler+0x3fc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d045      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a29      	ldr	r2, [pc, #164]	@ (80050e4 <HAL_DMA_IRQHandler+0x400>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d040      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a27      	ldr	r2, [pc, #156]	@ (80050e8 <HAL_DMA_IRQHandler+0x404>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d03b      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a26      	ldr	r2, [pc, #152]	@ (80050ec <HAL_DMA_IRQHandler+0x408>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d036      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a24      	ldr	r2, [pc, #144]	@ (80050f0 <HAL_DMA_IRQHandler+0x40c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d031      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a23      	ldr	r2, [pc, #140]	@ (80050f4 <HAL_DMA_IRQHandler+0x410>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d02c      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a21      	ldr	r2, [pc, #132]	@ (80050f8 <HAL_DMA_IRQHandler+0x414>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d027      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a20      	ldr	r2, [pc, #128]	@ (80050fc <HAL_DMA_IRQHandler+0x418>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d022      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <HAL_DMA_IRQHandler+0x41c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01d      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <HAL_DMA_IRQHandler+0x420>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d018      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <HAL_DMA_IRQHandler+0x424>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1a      	ldr	r2, [pc, #104]	@ (800510c <HAL_DMA_IRQHandler+0x428>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a18      	ldr	r2, [pc, #96]	@ (8005110 <HAL_DMA_IRQHandler+0x42c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a17      	ldr	r2, [pc, #92]	@ (8005114 <HAL_DMA_IRQHandler+0x430>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3e2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a15      	ldr	r2, [pc, #84]	@ (8005118 <HAL_DMA_IRQHandler+0x434>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d12a      	bne.n	800511c <HAL_DMA_IRQHandler+0x438>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e023      	b.n	8005124 <HAL_DMA_IRQHandler+0x440>
 80050dc:	40020010 	.word	0x40020010
 80050e0:	40020028 	.word	0x40020028
 80050e4:	40020040 	.word	0x40020040
 80050e8:	40020058 	.word	0x40020058
 80050ec:	40020070 	.word	0x40020070
 80050f0:	40020088 	.word	0x40020088
 80050f4:	400200a0 	.word	0x400200a0
 80050f8:	400200b8 	.word	0x400200b8
 80050fc:	40020410 	.word	0x40020410
 8005100:	40020428 	.word	0x40020428
 8005104:	40020440 	.word	0x40020440
 8005108:	40020458 	.word	0x40020458
 800510c:	40020470 	.word	0x40020470
 8005110:	40020488 	.word	0x40020488
 8005114:	400204a0 	.word	0x400204a0
 8005118:	400204b8 	.word	0x400204b8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2204      	movs	r2, #4
 8005132:	409a      	lsls	r2, r3
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513c:	f043 0204 	orr.w	r2, r3, #4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2210      	movs	r2, #16
 800514e:	409a      	lsls	r2, r3
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80a6 	beq.w	80052a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a85      	ldr	r2, [pc, #532]	@ (8005374 <HAL_DMA_IRQHandler+0x690>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d04a      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a83      	ldr	r2, [pc, #524]	@ (8005378 <HAL_DMA_IRQHandler+0x694>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d045      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a82      	ldr	r2, [pc, #520]	@ (800537c <HAL_DMA_IRQHandler+0x698>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d040      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a80      	ldr	r2, [pc, #512]	@ (8005380 <HAL_DMA_IRQHandler+0x69c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d03b      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a7f      	ldr	r2, [pc, #508]	@ (8005384 <HAL_DMA_IRQHandler+0x6a0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d036      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a7d      	ldr	r2, [pc, #500]	@ (8005388 <HAL_DMA_IRQHandler+0x6a4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d031      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a7c      	ldr	r2, [pc, #496]	@ (800538c <HAL_DMA_IRQHandler+0x6a8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d02c      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a7a      	ldr	r2, [pc, #488]	@ (8005390 <HAL_DMA_IRQHandler+0x6ac>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d027      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a79      	ldr	r2, [pc, #484]	@ (8005394 <HAL_DMA_IRQHandler+0x6b0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a77      	ldr	r2, [pc, #476]	@ (8005398 <HAL_DMA_IRQHandler+0x6b4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a76      	ldr	r2, [pc, #472]	@ (800539c <HAL_DMA_IRQHandler+0x6b8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a74      	ldr	r2, [pc, #464]	@ (80053a0 <HAL_DMA_IRQHandler+0x6bc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a73      	ldr	r2, [pc, #460]	@ (80053a4 <HAL_DMA_IRQHandler+0x6c0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a71      	ldr	r2, [pc, #452]	@ (80053a8 <HAL_DMA_IRQHandler+0x6c4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a70      	ldr	r2, [pc, #448]	@ (80053ac <HAL_DMA_IRQHandler+0x6c8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_DMA_IRQHandler+0x516>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a6e      	ldr	r2, [pc, #440]	@ (80053b0 <HAL_DMA_IRQHandler+0x6cc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10a      	bne.n	8005210 <HAL_DMA_IRQHandler+0x52c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	e009      	b.n	8005224 <HAL_DMA_IRQHandler+0x540>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	bf14      	ite	ne
 800521e:	2301      	movne	r3, #1
 8005220:	2300      	moveq	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d03e      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2210      	movs	r2, #16
 8005232:	409a      	lsls	r2, r3
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d018      	beq.n	8005278 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d108      	bne.n	8005266 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d024      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3
 8005264:	e01f      	b.n	80052a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01b      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
 8005276:	e016      	b.n	80052a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d107      	bne.n	8005296 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0208 	bic.w	r2, r2, #8
 8005294:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2220      	movs	r2, #32
 80052b0:	409a      	lsls	r2, r3
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8110 	beq.w	80054dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005374 <HAL_DMA_IRQHandler+0x690>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d04a      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005378 <HAL_DMA_IRQHandler+0x694>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d045      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a29      	ldr	r2, [pc, #164]	@ (800537c <HAL_DMA_IRQHandler+0x698>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d040      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a28      	ldr	r2, [pc, #160]	@ (8005380 <HAL_DMA_IRQHandler+0x69c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d03b      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a26      	ldr	r2, [pc, #152]	@ (8005384 <HAL_DMA_IRQHandler+0x6a0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d036      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a25      	ldr	r2, [pc, #148]	@ (8005388 <HAL_DMA_IRQHandler+0x6a4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d031      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a23      	ldr	r2, [pc, #140]	@ (800538c <HAL_DMA_IRQHandler+0x6a8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02c      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <HAL_DMA_IRQHandler+0x6ac>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d027      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a20      	ldr	r2, [pc, #128]	@ (8005394 <HAL_DMA_IRQHandler+0x6b0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1f      	ldr	r2, [pc, #124]	@ (8005398 <HAL_DMA_IRQHandler+0x6b4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01d      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <HAL_DMA_IRQHandler+0x6b8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1c      	ldr	r2, [pc, #112]	@ (80053a0 <HAL_DMA_IRQHandler+0x6bc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1a      	ldr	r2, [pc, #104]	@ (80053a4 <HAL_DMA_IRQHandler+0x6c0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a19      	ldr	r2, [pc, #100]	@ (80053a8 <HAL_DMA_IRQHandler+0x6c4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a17      	ldr	r2, [pc, #92]	@ (80053ac <HAL_DMA_IRQHandler+0x6c8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_DMA_IRQHandler+0x678>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a16      	ldr	r2, [pc, #88]	@ (80053b0 <HAL_DMA_IRQHandler+0x6cc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d12b      	bne.n	80053b4 <HAL_DMA_IRQHandler+0x6d0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	bf14      	ite	ne
 800536a:	2301      	movne	r3, #1
 800536c:	2300      	moveq	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e02a      	b.n	80053c8 <HAL_DMA_IRQHandler+0x6e4>
 8005372:	bf00      	nop
 8005374:	40020010 	.word	0x40020010
 8005378:	40020028 	.word	0x40020028
 800537c:	40020040 	.word	0x40020040
 8005380:	40020058 	.word	0x40020058
 8005384:	40020070 	.word	0x40020070
 8005388:	40020088 	.word	0x40020088
 800538c:	400200a0 	.word	0x400200a0
 8005390:	400200b8 	.word	0x400200b8
 8005394:	40020410 	.word	0x40020410
 8005398:	40020428 	.word	0x40020428
 800539c:	40020440 	.word	0x40020440
 80053a0:	40020458 	.word	0x40020458
 80053a4:	40020470 	.word	0x40020470
 80053a8:	40020488 	.word	0x40020488
 80053ac:	400204a0 	.word	0x400204a0
 80053b0:	400204b8 	.word	0x400204b8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8087 	beq.w	80054dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	2220      	movs	r2, #32
 80053d8:	409a      	lsls	r2, r3
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d139      	bne.n	800545e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0216 	bic.w	r2, r2, #22
 80053f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005408:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <HAL_DMA_IRQHandler+0x736>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0208 	bic.w	r2, r2, #8
 8005428:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	223f      	movs	r2, #63	@ 0x3f
 8005434:	409a      	lsls	r2, r3
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8382 	beq.w	8005b58 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4798      	blx	r3
          }
          return;
 800545c:	e37c      	b.n	8005b58 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d018      	beq.n	800549e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d108      	bne.n	800548c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02c      	beq.n	80054dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
 800548a:	e027      	b.n	80054dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d023      	beq.n	80054dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
 800549c:	e01e      	b.n	80054dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10f      	bne.n	80054cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0210 	bic.w	r2, r2, #16
 80054ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 833e 	beq.w	8005b62 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8088 	beq.w	8005604 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2204      	movs	r2, #4
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a89      	ldr	r2, [pc, #548]	@ (8005728 <HAL_DMA_IRQHandler+0xa44>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d04a      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a88      	ldr	r2, [pc, #544]	@ (800572c <HAL_DMA_IRQHandler+0xa48>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d045      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a86      	ldr	r2, [pc, #536]	@ (8005730 <HAL_DMA_IRQHandler+0xa4c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d040      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a85      	ldr	r2, [pc, #532]	@ (8005734 <HAL_DMA_IRQHandler+0xa50>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d03b      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a83      	ldr	r2, [pc, #524]	@ (8005738 <HAL_DMA_IRQHandler+0xa54>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d036      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a82      	ldr	r2, [pc, #520]	@ (800573c <HAL_DMA_IRQHandler+0xa58>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d031      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a80      	ldr	r2, [pc, #512]	@ (8005740 <HAL_DMA_IRQHandler+0xa5c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d02c      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a7f      	ldr	r2, [pc, #508]	@ (8005744 <HAL_DMA_IRQHandler+0xa60>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d027      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a7d      	ldr	r2, [pc, #500]	@ (8005748 <HAL_DMA_IRQHandler+0xa64>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d022      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a7c      	ldr	r2, [pc, #496]	@ (800574c <HAL_DMA_IRQHandler+0xa68>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d01d      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a7a      	ldr	r2, [pc, #488]	@ (8005750 <HAL_DMA_IRQHandler+0xa6c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d018      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a79      	ldr	r2, [pc, #484]	@ (8005754 <HAL_DMA_IRQHandler+0xa70>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a77      	ldr	r2, [pc, #476]	@ (8005758 <HAL_DMA_IRQHandler+0xa74>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00e      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a76      	ldr	r2, [pc, #472]	@ (800575c <HAL_DMA_IRQHandler+0xa78>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d009      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a74      	ldr	r2, [pc, #464]	@ (8005760 <HAL_DMA_IRQHandler+0xa7c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_DMA_IRQHandler+0x8b8>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a73      	ldr	r2, [pc, #460]	@ (8005764 <HAL_DMA_IRQHandler+0xa80>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <HAL_DMA_IRQHandler+0x8ca>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e007      	b.n	80055be <HAL_DMA_IRQHandler+0x8da>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3301      	adds	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d307      	bcc.n	80055da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f2      	bne.n	80055be <HAL_DMA_IRQHandler+0x8da>
 80055d8:	e000      	b.n	80055dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80055da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2203      	movs	r2, #3
 80055ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80055f2:	e003      	b.n	80055fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 82aa 	beq.w	8005b62 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	e2a4      	b.n	8005b62 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a52      	ldr	r2, [pc, #328]	@ (8005768 <HAL_DMA_IRQHandler+0xa84>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04a      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a51      	ldr	r2, [pc, #324]	@ (800576c <HAL_DMA_IRQHandler+0xa88>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d045      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a4f      	ldr	r2, [pc, #316]	@ (8005770 <HAL_DMA_IRQHandler+0xa8c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a4e      	ldr	r2, [pc, #312]	@ (8005774 <HAL_DMA_IRQHandler+0xa90>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03b      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a4c      	ldr	r2, [pc, #304]	@ (8005778 <HAL_DMA_IRQHandler+0xa94>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d036      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a4b      	ldr	r2, [pc, #300]	@ (800577c <HAL_DMA_IRQHandler+0xa98>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d031      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a49      	ldr	r2, [pc, #292]	@ (8005780 <HAL_DMA_IRQHandler+0xa9c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02c      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a48      	ldr	r2, [pc, #288]	@ (8005784 <HAL_DMA_IRQHandler+0xaa0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d027      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a46      	ldr	r2, [pc, #280]	@ (8005788 <HAL_DMA_IRQHandler+0xaa4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a45      	ldr	r2, [pc, #276]	@ (800578c <HAL_DMA_IRQHandler+0xaa8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01d      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a43      	ldr	r2, [pc, #268]	@ (8005790 <HAL_DMA_IRQHandler+0xaac>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a42      	ldr	r2, [pc, #264]	@ (8005794 <HAL_DMA_IRQHandler+0xab0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a40      	ldr	r2, [pc, #256]	@ (8005798 <HAL_DMA_IRQHandler+0xab4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a3f      	ldr	r2, [pc, #252]	@ (800579c <HAL_DMA_IRQHandler+0xab8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3d      	ldr	r2, [pc, #244]	@ (80057a0 <HAL_DMA_IRQHandler+0xabc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x9d4>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a3c      	ldr	r2, [pc, #240]	@ (80057a4 <HAL_DMA_IRQHandler+0xac0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_DMA_IRQHandler+0x9d8>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_DMA_IRQHandler+0x9da>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 824f 	beq.w	8005b62 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	2204      	movs	r2, #4
 80056d6:	409a      	lsls	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80dd 	beq.w	800589c <HAL_DMA_IRQHandler+0xbb8>
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80d7 	beq.w	800589c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	2204      	movs	r2, #4
 80056f8:	409a      	lsls	r2, r3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d059      	beq.n	80057bc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d14a      	bne.n	80057a8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 8220 	beq.w	8005b5c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005724:	e21a      	b.n	8005b5c <HAL_DMA_IRQHandler+0xe78>
 8005726:	bf00      	nop
 8005728:	40020010 	.word	0x40020010
 800572c:	40020028 	.word	0x40020028
 8005730:	40020040 	.word	0x40020040
 8005734:	40020058 	.word	0x40020058
 8005738:	40020070 	.word	0x40020070
 800573c:	40020088 	.word	0x40020088
 8005740:	400200a0 	.word	0x400200a0
 8005744:	400200b8 	.word	0x400200b8
 8005748:	40020410 	.word	0x40020410
 800574c:	40020428 	.word	0x40020428
 8005750:	40020440 	.word	0x40020440
 8005754:	40020458 	.word	0x40020458
 8005758:	40020470 	.word	0x40020470
 800575c:	40020488 	.word	0x40020488
 8005760:	400204a0 	.word	0x400204a0
 8005764:	400204b8 	.word	0x400204b8
 8005768:	48022c08 	.word	0x48022c08
 800576c:	48022c1c 	.word	0x48022c1c
 8005770:	48022c30 	.word	0x48022c30
 8005774:	48022c44 	.word	0x48022c44
 8005778:	48022c58 	.word	0x48022c58
 800577c:	48022c6c 	.word	0x48022c6c
 8005780:	48022c80 	.word	0x48022c80
 8005784:	48022c94 	.word	0x48022c94
 8005788:	58025408 	.word	0x58025408
 800578c:	5802541c 	.word	0x5802541c
 8005790:	58025430 	.word	0x58025430
 8005794:	58025444 	.word	0x58025444
 8005798:	58025458 	.word	0x58025458
 800579c:	5802546c 	.word	0x5802546c
 80057a0:	58025480 	.word	0x58025480
 80057a4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 81d5 	beq.w	8005b5c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ba:	e1cf      	b.n	8005b5c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d160      	bne.n	8005888 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a7f      	ldr	r2, [pc, #508]	@ (80059c8 <HAL_DMA_IRQHandler+0xce4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d04a      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a7d      	ldr	r2, [pc, #500]	@ (80059cc <HAL_DMA_IRQHandler+0xce8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d045      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7c      	ldr	r2, [pc, #496]	@ (80059d0 <HAL_DMA_IRQHandler+0xcec>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d040      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a7a      	ldr	r2, [pc, #488]	@ (80059d4 <HAL_DMA_IRQHandler+0xcf0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d03b      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a79      	ldr	r2, [pc, #484]	@ (80059d8 <HAL_DMA_IRQHandler+0xcf4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d036      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a77      	ldr	r2, [pc, #476]	@ (80059dc <HAL_DMA_IRQHandler+0xcf8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d031      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a76      	ldr	r2, [pc, #472]	@ (80059e0 <HAL_DMA_IRQHandler+0xcfc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d02c      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a74      	ldr	r2, [pc, #464]	@ (80059e4 <HAL_DMA_IRQHandler+0xd00>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d027      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a73      	ldr	r2, [pc, #460]	@ (80059e8 <HAL_DMA_IRQHandler+0xd04>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d022      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a71      	ldr	r2, [pc, #452]	@ (80059ec <HAL_DMA_IRQHandler+0xd08>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01d      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a70      	ldr	r2, [pc, #448]	@ (80059f0 <HAL_DMA_IRQHandler+0xd0c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d018      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a6e      	ldr	r2, [pc, #440]	@ (80059f4 <HAL_DMA_IRQHandler+0xd10>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a6d      	ldr	r2, [pc, #436]	@ (80059f8 <HAL_DMA_IRQHandler+0xd14>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a6b      	ldr	r2, [pc, #428]	@ (80059fc <HAL_DMA_IRQHandler+0xd18>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a6a      	ldr	r2, [pc, #424]	@ (8005a00 <HAL_DMA_IRQHandler+0xd1c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_DMA_IRQHandler+0xb82>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a68      	ldr	r2, [pc, #416]	@ (8005a04 <HAL_DMA_IRQHandler+0xd20>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d108      	bne.n	8005878 <HAL_DMA_IRQHandler+0xb94>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0208 	bic.w	r2, r2, #8
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e007      	b.n	8005888 <HAL_DMA_IRQHandler+0xba4>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0204 	bic.w	r2, r2, #4
 8005886:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8165 	beq.w	8005b5c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800589a:	e15f      	b.n	8005b5c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2202      	movs	r2, #2
 80058a6:	409a      	lsls	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80c5 	beq.w	8005a3c <HAL_DMA_IRQHandler+0xd58>
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80bf 	beq.w	8005a3c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2202      	movs	r2, #2
 80058c8:	409a      	lsls	r2, r3
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d018      	beq.n	800590a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 813a 	beq.w	8005b60 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058f4:	e134      	b.n	8005b60 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8130 	beq.w	8005b60 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005908:	e12a      	b.n	8005b60 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 8089 	bne.w	8005a28 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2b      	ldr	r2, [pc, #172]	@ (80059c8 <HAL_DMA_IRQHandler+0xce4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d04a      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a29      	ldr	r2, [pc, #164]	@ (80059cc <HAL_DMA_IRQHandler+0xce8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d045      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a28      	ldr	r2, [pc, #160]	@ (80059d0 <HAL_DMA_IRQHandler+0xcec>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d040      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a26      	ldr	r2, [pc, #152]	@ (80059d4 <HAL_DMA_IRQHandler+0xcf0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d03b      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a25      	ldr	r2, [pc, #148]	@ (80059d8 <HAL_DMA_IRQHandler+0xcf4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d036      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a23      	ldr	r2, [pc, #140]	@ (80059dc <HAL_DMA_IRQHandler+0xcf8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d031      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a22      	ldr	r2, [pc, #136]	@ (80059e0 <HAL_DMA_IRQHandler+0xcfc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d02c      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a20      	ldr	r2, [pc, #128]	@ (80059e4 <HAL_DMA_IRQHandler+0xd00>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d027      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1f      	ldr	r2, [pc, #124]	@ (80059e8 <HAL_DMA_IRQHandler+0xd04>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d022      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1d      	ldr	r2, [pc, #116]	@ (80059ec <HAL_DMA_IRQHandler+0xd08>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01d      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <HAL_DMA_IRQHandler+0xd0c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d018      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1a      	ldr	r2, [pc, #104]	@ (80059f4 <HAL_DMA_IRQHandler+0xd10>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <HAL_DMA_IRQHandler+0xd14>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a17      	ldr	r2, [pc, #92]	@ (80059fc <HAL_DMA_IRQHandler+0xd18>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a16      	ldr	r2, [pc, #88]	@ (8005a00 <HAL_DMA_IRQHandler+0xd1c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xcd2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a14      	ldr	r2, [pc, #80]	@ (8005a04 <HAL_DMA_IRQHandler+0xd20>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d128      	bne.n	8005a08 <HAL_DMA_IRQHandler+0xd24>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0214 	bic.w	r2, r2, #20
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e027      	b.n	8005a18 <HAL_DMA_IRQHandler+0xd34>
 80059c8:	40020010 	.word	0x40020010
 80059cc:	40020028 	.word	0x40020028
 80059d0:	40020040 	.word	0x40020040
 80059d4:	40020058 	.word	0x40020058
 80059d8:	40020070 	.word	0x40020070
 80059dc:	40020088 	.word	0x40020088
 80059e0:	400200a0 	.word	0x400200a0
 80059e4:	400200b8 	.word	0x400200b8
 80059e8:	40020410 	.word	0x40020410
 80059ec:	40020428 	.word	0x40020428
 80059f0:	40020440 	.word	0x40020440
 80059f4:	40020458 	.word	0x40020458
 80059f8:	40020470 	.word	0x40020470
 80059fc:	40020488 	.word	0x40020488
 8005a00:	400204a0 	.word	0x400204a0
 8005a04:	400204b8 	.word	0x400204b8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 020a 	bic.w	r2, r2, #10
 8005a16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8097 	beq.w	8005b60 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a3a:	e091      	b.n	8005b60 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2208      	movs	r2, #8
 8005a46:	409a      	lsls	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8088 	beq.w	8005b62 <HAL_DMA_IRQHandler+0xe7e>
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8082 	beq.w	8005b62 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a41      	ldr	r2, [pc, #260]	@ (8005b68 <HAL_DMA_IRQHandler+0xe84>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d04a      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b6c <HAL_DMA_IRQHandler+0xe88>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d045      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a3e      	ldr	r2, [pc, #248]	@ (8005b70 <HAL_DMA_IRQHandler+0xe8c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d040      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a3c      	ldr	r2, [pc, #240]	@ (8005b74 <HAL_DMA_IRQHandler+0xe90>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d03b      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b78 <HAL_DMA_IRQHandler+0xe94>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d036      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a39      	ldr	r2, [pc, #228]	@ (8005b7c <HAL_DMA_IRQHandler+0xe98>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d031      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a38      	ldr	r2, [pc, #224]	@ (8005b80 <HAL_DMA_IRQHandler+0xe9c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d02c      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a36      	ldr	r2, [pc, #216]	@ (8005b84 <HAL_DMA_IRQHandler+0xea0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d027      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a35      	ldr	r2, [pc, #212]	@ (8005b88 <HAL_DMA_IRQHandler+0xea4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d022      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a33      	ldr	r2, [pc, #204]	@ (8005b8c <HAL_DMA_IRQHandler+0xea8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01d      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a32      	ldr	r2, [pc, #200]	@ (8005b90 <HAL_DMA_IRQHandler+0xeac>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d018      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a30      	ldr	r2, [pc, #192]	@ (8005b94 <HAL_DMA_IRQHandler+0xeb0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2f      	ldr	r2, [pc, #188]	@ (8005b98 <HAL_DMA_IRQHandler+0xeb4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00e      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b9c <HAL_DMA_IRQHandler+0xeb8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba0 <HAL_DMA_IRQHandler+0xebc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_DMA_IRQHandler+0xe1a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2a      	ldr	r2, [pc, #168]	@ (8005ba4 <HAL_DMA_IRQHandler+0xec0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d108      	bne.n	8005b10 <HAL_DMA_IRQHandler+0xe2c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 021c 	bic.w	r2, r2, #28
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e007      	b.n	8005b20 <HAL_DMA_IRQHandler+0xe3c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 020e 	bic.w	r2, r2, #14
 8005b1e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2201      	movs	r2, #1
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
 8005b56:	e004      	b.n	8005b62 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005b58:	bf00      	nop
 8005b5a:	e002      	b.n	8005b62 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b60:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b62:	3728      	adds	r7, #40	@ 0x28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40020010 	.word	0x40020010
 8005b6c:	40020028 	.word	0x40020028
 8005b70:	40020040 	.word	0x40020040
 8005b74:	40020058 	.word	0x40020058
 8005b78:	40020070 	.word	0x40020070
 8005b7c:	40020088 	.word	0x40020088
 8005b80:	400200a0 	.word	0x400200a0
 8005b84:	400200b8 	.word	0x400200b8
 8005b88:	40020410 	.word	0x40020410
 8005b8c:	40020428 	.word	0x40020428
 8005b90:	40020440 	.word	0x40020440
 8005b94:	40020458 	.word	0x40020458
 8005b98:	40020470 	.word	0x40020470
 8005b9c:	40020488 	.word	0x40020488
 8005ba0:	400204a0 	.word	0x400204a0
 8005ba4:	400204b8 	.word	0x400204b8

08005ba8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7f      	ldr	r2, [pc, #508]	@ (8005dc4 <DMA_SetConfig+0x21c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d072      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a7d      	ldr	r2, [pc, #500]	@ (8005dc8 <DMA_SetConfig+0x220>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d06d      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a7c      	ldr	r2, [pc, #496]	@ (8005dcc <DMA_SetConfig+0x224>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d068      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a7a      	ldr	r2, [pc, #488]	@ (8005dd0 <DMA_SetConfig+0x228>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d063      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a79      	ldr	r2, [pc, #484]	@ (8005dd4 <DMA_SetConfig+0x22c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d05e      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a77      	ldr	r2, [pc, #476]	@ (8005dd8 <DMA_SetConfig+0x230>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d059      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a76      	ldr	r2, [pc, #472]	@ (8005ddc <DMA_SetConfig+0x234>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d054      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a74      	ldr	r2, [pc, #464]	@ (8005de0 <DMA_SetConfig+0x238>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d04f      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a73      	ldr	r2, [pc, #460]	@ (8005de4 <DMA_SetConfig+0x23c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d04a      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a71      	ldr	r2, [pc, #452]	@ (8005de8 <DMA_SetConfig+0x240>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d045      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a70      	ldr	r2, [pc, #448]	@ (8005dec <DMA_SetConfig+0x244>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d040      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a6e      	ldr	r2, [pc, #440]	@ (8005df0 <DMA_SetConfig+0x248>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d03b      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8005df4 <DMA_SetConfig+0x24c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d036      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a6b      	ldr	r2, [pc, #428]	@ (8005df8 <DMA_SetConfig+0x250>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d031      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a6a      	ldr	r2, [pc, #424]	@ (8005dfc <DMA_SetConfig+0x254>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d02c      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a68      	ldr	r2, [pc, #416]	@ (8005e00 <DMA_SetConfig+0x258>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d027      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a67      	ldr	r2, [pc, #412]	@ (8005e04 <DMA_SetConfig+0x25c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a65      	ldr	r2, [pc, #404]	@ (8005e08 <DMA_SetConfig+0x260>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01d      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a64      	ldr	r2, [pc, #400]	@ (8005e0c <DMA_SetConfig+0x264>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a62      	ldr	r2, [pc, #392]	@ (8005e10 <DMA_SetConfig+0x268>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a61      	ldr	r2, [pc, #388]	@ (8005e14 <DMA_SetConfig+0x26c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a5f      	ldr	r2, [pc, #380]	@ (8005e18 <DMA_SetConfig+0x270>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e1c <DMA_SetConfig+0x274>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <DMA_SetConfig+0x10a>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a5c      	ldr	r2, [pc, #368]	@ (8005e20 <DMA_SetConfig+0x278>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <DMA_SetConfig+0x10e>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <DMA_SetConfig+0x110>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005cc4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005cd6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a39      	ldr	r2, [pc, #228]	@ (8005dc4 <DMA_SetConfig+0x21c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d04a      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a38      	ldr	r2, [pc, #224]	@ (8005dc8 <DMA_SetConfig+0x220>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d045      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a36      	ldr	r2, [pc, #216]	@ (8005dcc <DMA_SetConfig+0x224>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d040      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a35      	ldr	r2, [pc, #212]	@ (8005dd0 <DMA_SetConfig+0x228>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d03b      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a33      	ldr	r2, [pc, #204]	@ (8005dd4 <DMA_SetConfig+0x22c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d036      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a32      	ldr	r2, [pc, #200]	@ (8005dd8 <DMA_SetConfig+0x230>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d031      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a30      	ldr	r2, [pc, #192]	@ (8005ddc <DMA_SetConfig+0x234>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02c      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2f      	ldr	r2, [pc, #188]	@ (8005de0 <DMA_SetConfig+0x238>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d027      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005de4 <DMA_SetConfig+0x23c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2c      	ldr	r2, [pc, #176]	@ (8005de8 <DMA_SetConfig+0x240>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2a      	ldr	r2, [pc, #168]	@ (8005dec <DMA_SetConfig+0x244>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a29      	ldr	r2, [pc, #164]	@ (8005df0 <DMA_SetConfig+0x248>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a27      	ldr	r2, [pc, #156]	@ (8005df4 <DMA_SetConfig+0x24c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a26      	ldr	r2, [pc, #152]	@ (8005df8 <DMA_SetConfig+0x250>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a24      	ldr	r2, [pc, #144]	@ (8005dfc <DMA_SetConfig+0x254>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <DMA_SetConfig+0x1d0>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a23      	ldr	r2, [pc, #140]	@ (8005e00 <DMA_SetConfig+0x258>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <DMA_SetConfig+0x1d4>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <DMA_SetConfig+0x1d6>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d059      	beq.n	8005e36 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	223f      	movs	r2, #63	@ 0x3f
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005da0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2b40      	cmp	r3, #64	@ 0x40
 8005db0:	d138      	bne.n	8005e24 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005dc2:	e0ae      	b.n	8005f22 <DMA_SetConfig+0x37a>
 8005dc4:	40020010 	.word	0x40020010
 8005dc8:	40020028 	.word	0x40020028
 8005dcc:	40020040 	.word	0x40020040
 8005dd0:	40020058 	.word	0x40020058
 8005dd4:	40020070 	.word	0x40020070
 8005dd8:	40020088 	.word	0x40020088
 8005ddc:	400200a0 	.word	0x400200a0
 8005de0:	400200b8 	.word	0x400200b8
 8005de4:	40020410 	.word	0x40020410
 8005de8:	40020428 	.word	0x40020428
 8005dec:	40020440 	.word	0x40020440
 8005df0:	40020458 	.word	0x40020458
 8005df4:	40020470 	.word	0x40020470
 8005df8:	40020488 	.word	0x40020488
 8005dfc:	400204a0 	.word	0x400204a0
 8005e00:	400204b8 	.word	0x400204b8
 8005e04:	58025408 	.word	0x58025408
 8005e08:	5802541c 	.word	0x5802541c
 8005e0c:	58025430 	.word	0x58025430
 8005e10:	58025444 	.word	0x58025444
 8005e14:	58025458 	.word	0x58025458
 8005e18:	5802546c 	.word	0x5802546c
 8005e1c:	58025480 	.word	0x58025480
 8005e20:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]
}
 8005e34:	e075      	b.n	8005f22 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005f30 <DMA_SetConfig+0x388>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d04a      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3b      	ldr	r2, [pc, #236]	@ (8005f34 <DMA_SetConfig+0x38c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d045      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f38 <DMA_SetConfig+0x390>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d040      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a38      	ldr	r2, [pc, #224]	@ (8005f3c <DMA_SetConfig+0x394>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d03b      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a37      	ldr	r2, [pc, #220]	@ (8005f40 <DMA_SetConfig+0x398>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d036      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a35      	ldr	r2, [pc, #212]	@ (8005f44 <DMA_SetConfig+0x39c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d031      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a34      	ldr	r2, [pc, #208]	@ (8005f48 <DMA_SetConfig+0x3a0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d02c      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a32      	ldr	r2, [pc, #200]	@ (8005f4c <DMA_SetConfig+0x3a4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d027      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a31      	ldr	r2, [pc, #196]	@ (8005f50 <DMA_SetConfig+0x3a8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d022      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2f      	ldr	r2, [pc, #188]	@ (8005f54 <DMA_SetConfig+0x3ac>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01d      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8005f58 <DMA_SetConfig+0x3b0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d018      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8005f5c <DMA_SetConfig+0x3b4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8005f60 <DMA_SetConfig+0x3b8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a29      	ldr	r2, [pc, #164]	@ (8005f64 <DMA_SetConfig+0x3bc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a28      	ldr	r2, [pc, #160]	@ (8005f68 <DMA_SetConfig+0x3c0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <DMA_SetConfig+0x32e>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a26      	ldr	r2, [pc, #152]	@ (8005f6c <DMA_SetConfig+0x3c4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <DMA_SetConfig+0x332>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <DMA_SetConfig+0x334>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d020      	beq.n	8005f22 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	2201      	movs	r2, #1
 8005eea:	409a      	lsls	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b40      	cmp	r3, #64	@ 0x40
 8005efe:	d108      	bne.n	8005f12 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	60da      	str	r2, [r3, #12]
}
 8005f10:	e007      	b.n	8005f22 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	60da      	str	r2, [r3, #12]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	48022c08 	.word	0x48022c08
 8005f34:	48022c1c 	.word	0x48022c1c
 8005f38:	48022c30 	.word	0x48022c30
 8005f3c:	48022c44 	.word	0x48022c44
 8005f40:	48022c58 	.word	0x48022c58
 8005f44:	48022c6c 	.word	0x48022c6c
 8005f48:	48022c80 	.word	0x48022c80
 8005f4c:	48022c94 	.word	0x48022c94
 8005f50:	58025408 	.word	0x58025408
 8005f54:	5802541c 	.word	0x5802541c
 8005f58:	58025430 	.word	0x58025430
 8005f5c:	58025444 	.word	0x58025444
 8005f60:	58025458 	.word	0x58025458
 8005f64:	5802546c 	.word	0x5802546c
 8005f68:	58025480 	.word	0x58025480
 8005f6c:	58025494 	.word	0x58025494

08005f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a42      	ldr	r2, [pc, #264]	@ (8006088 <DMA_CalcBaseAndBitshift+0x118>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d04a      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a41      	ldr	r2, [pc, #260]	@ (800608c <DMA_CalcBaseAndBitshift+0x11c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d045      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a3f      	ldr	r2, [pc, #252]	@ (8006090 <DMA_CalcBaseAndBitshift+0x120>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d040      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8006094 <DMA_CalcBaseAndBitshift+0x124>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d03b      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8006098 <DMA_CalcBaseAndBitshift+0x128>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d036      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a3b      	ldr	r2, [pc, #236]	@ (800609c <DMA_CalcBaseAndBitshift+0x12c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d031      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a39      	ldr	r2, [pc, #228]	@ (80060a0 <DMA_CalcBaseAndBitshift+0x130>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d02c      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a38      	ldr	r2, [pc, #224]	@ (80060a4 <DMA_CalcBaseAndBitshift+0x134>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d027      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a36      	ldr	r2, [pc, #216]	@ (80060a8 <DMA_CalcBaseAndBitshift+0x138>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a35      	ldr	r2, [pc, #212]	@ (80060ac <DMA_CalcBaseAndBitshift+0x13c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01d      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a33      	ldr	r2, [pc, #204]	@ (80060b0 <DMA_CalcBaseAndBitshift+0x140>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a32      	ldr	r2, [pc, #200]	@ (80060b4 <DMA_CalcBaseAndBitshift+0x144>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a30      	ldr	r2, [pc, #192]	@ (80060b8 <DMA_CalcBaseAndBitshift+0x148>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80060bc <DMA_CalcBaseAndBitshift+0x14c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a2d      	ldr	r2, [pc, #180]	@ (80060c0 <DMA_CalcBaseAndBitshift+0x150>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <DMA_CalcBaseAndBitshift+0xa8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2c      	ldr	r2, [pc, #176]	@ (80060c4 <DMA_CalcBaseAndBitshift+0x154>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d101      	bne.n	800601c <DMA_CalcBaseAndBitshift+0xac>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <DMA_CalcBaseAndBitshift+0xae>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d024      	beq.n	800606c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	3b10      	subs	r3, #16
 800602a:	4a27      	ldr	r2, [pc, #156]	@ (80060c8 <DMA_CalcBaseAndBitshift+0x158>)
 800602c:	fba2 2303 	umull	r2, r3, r2, r3
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	4a24      	ldr	r2, [pc, #144]	@ (80060cc <DMA_CalcBaseAndBitshift+0x15c>)
 800603c:	5cd3      	ldrb	r3, [r2, r3]
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d908      	bls.n	800605c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	4b1f      	ldr	r3, [pc, #124]	@ (80060d0 <DMA_CalcBaseAndBitshift+0x160>)
 8006052:	4013      	ands	r3, r2
 8006054:	1d1a      	adds	r2, r3, #4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	659a      	str	r2, [r3, #88]	@ 0x58
 800605a:	e00d      	b.n	8006078 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	4b1b      	ldr	r3, [pc, #108]	@ (80060d0 <DMA_CalcBaseAndBitshift+0x160>)
 8006064:	4013      	ands	r3, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6593      	str	r3, [r2, #88]	@ 0x58
 800606a:	e005      	b.n	8006078 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40020010 	.word	0x40020010
 800608c:	40020028 	.word	0x40020028
 8006090:	40020040 	.word	0x40020040
 8006094:	40020058 	.word	0x40020058
 8006098:	40020070 	.word	0x40020070
 800609c:	40020088 	.word	0x40020088
 80060a0:	400200a0 	.word	0x400200a0
 80060a4:	400200b8 	.word	0x400200b8
 80060a8:	40020410 	.word	0x40020410
 80060ac:	40020428 	.word	0x40020428
 80060b0:	40020440 	.word	0x40020440
 80060b4:	40020458 	.word	0x40020458
 80060b8:	40020470 	.word	0x40020470
 80060bc:	40020488 	.word	0x40020488
 80060c0:	400204a0 	.word	0x400204a0
 80060c4:	400204b8 	.word	0x400204b8
 80060c8:	aaaaaaab 	.word	0xaaaaaaab
 80060cc:	0800d970 	.word	0x0800d970
 80060d0:	fffffc00 	.word	0xfffffc00

080060d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d120      	bne.n	800612a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d858      	bhi.n	80061a2 <DMA_CheckFifoParam+0xce>
 80060f0:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <DMA_CheckFifoParam+0x24>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	08006109 	.word	0x08006109
 80060fc:	0800611b 	.word	0x0800611b
 8006100:	08006109 	.word	0x08006109
 8006104:	080061a3 	.word	0x080061a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d048      	beq.n	80061a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006118:	e045      	b.n	80061a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006122:	d142      	bne.n	80061aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006128:	e03f      	b.n	80061aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006132:	d123      	bne.n	800617c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	2b03      	cmp	r3, #3
 800613a:	d838      	bhi.n	80061ae <DMA_CheckFifoParam+0xda>
 800613c:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <DMA_CheckFifoParam+0x70>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006155 	.word	0x08006155
 8006148:	0800615b 	.word	0x0800615b
 800614c:	08006155 	.word	0x08006155
 8006150:	0800616d 	.word	0x0800616d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
        break;
 8006158:	e030      	b.n	80061bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d025      	beq.n	80061b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800616a:	e022      	b.n	80061b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006174:	d11f      	bne.n	80061b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800617a:	e01c      	b.n	80061b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006180:	2b02      	cmp	r3, #2
 8006182:	d902      	bls.n	800618a <DMA_CheckFifoParam+0xb6>
 8006184:	2b03      	cmp	r3, #3
 8006186:	d003      	beq.n	8006190 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006188:	e018      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
        break;
 800618e:	e015      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00e      	beq.n	80061ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
    break;
 80061a0:	e00b      	b.n	80061ba <DMA_CheckFifoParam+0xe6>
        break;
 80061a2:	bf00      	nop
 80061a4:	e00a      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
        break;
 80061a6:	bf00      	nop
 80061a8:	e008      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
        break;
 80061aa:	bf00      	nop
 80061ac:	e006      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
        break;
 80061ae:	bf00      	nop
 80061b0:	e004      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
        break;
 80061b2:	bf00      	nop
 80061b4:	e002      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
        break;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
    break;
 80061ba:	bf00      	nop
    }
  }

  return status;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop

080061cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a38      	ldr	r2, [pc, #224]	@ (80062c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d022      	beq.n	800622a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a36      	ldr	r2, [pc, #216]	@ (80062c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01d      	beq.n	800622a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a35      	ldr	r2, [pc, #212]	@ (80062c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d018      	beq.n	800622a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a33      	ldr	r2, [pc, #204]	@ (80062cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a32      	ldr	r2, [pc, #200]	@ (80062d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00e      	beq.n	800622a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a30      	ldr	r2, [pc, #192]	@ (80062d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d009      	beq.n	800622a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2f      	ldr	r2, [pc, #188]	@ (80062d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d004      	beq.n	800622a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2d      	ldr	r2, [pc, #180]	@ (80062dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800622e:	2300      	movs	r3, #0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01a      	beq.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	3b08      	subs	r3, #8
 800623c:	4a28      	ldr	r2, [pc, #160]	@ (80062e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4b26      	ldr	r3, [pc, #152]	@ (80062e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a24      	ldr	r2, [pc, #144]	@ (80062e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006258:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	2201      	movs	r2, #1
 8006262:	409a      	lsls	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006268:	e024      	b.n	80062b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	3b10      	subs	r3, #16
 8006272:	4a1e      	ldr	r2, [pc, #120]	@ (80062ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006274:	fba2 2303 	umull	r2, r3, r2, r3
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a1c      	ldr	r2, [pc, #112]	@ (80062f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d806      	bhi.n	8006292 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a1b      	ldr	r2, [pc, #108]	@ (80062f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d902      	bls.n	8006292 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3308      	adds	r3, #8
 8006290:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4b18      	ldr	r3, [pc, #96]	@ (80062f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80062a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2201      	movs	r2, #1
 80062ae:	409a      	lsls	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	58025408 	.word	0x58025408
 80062c4:	5802541c 	.word	0x5802541c
 80062c8:	58025430 	.word	0x58025430
 80062cc:	58025444 	.word	0x58025444
 80062d0:	58025458 	.word	0x58025458
 80062d4:	5802546c 	.word	0x5802546c
 80062d8:	58025480 	.word	0x58025480
 80062dc:	58025494 	.word	0x58025494
 80062e0:	cccccccd 	.word	0xcccccccd
 80062e4:	16009600 	.word	0x16009600
 80062e8:	58025880 	.word	0x58025880
 80062ec:	aaaaaaab 	.word	0xaaaaaaab
 80062f0:	400204b8 	.word	0x400204b8
 80062f4:	4002040f 	.word	0x4002040f
 80062f8:	10008200 	.word	0x10008200
 80062fc:	40020880 	.word	0x40020880

08006300 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d04a      	beq.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d847      	bhi.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a25      	ldr	r2, [pc, #148]	@ (80063b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d022      	beq.n	800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a24      	ldr	r2, [pc, #144]	@ (80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d01d      	beq.n	800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a22      	ldr	r2, [pc, #136]	@ (80063c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d018      	beq.n	800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a21      	ldr	r2, [pc, #132]	@ (80063c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1f      	ldr	r2, [pc, #124]	@ (80063c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00e      	beq.n	800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1e      	ldr	r2, [pc, #120]	@ (80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d009      	beq.n	800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1c      	ldr	r2, [pc, #112]	@ (80063d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1b      	ldr	r2, [pc, #108]	@ (80063d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d101      	bne.n	8006370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006370:	2300      	movs	r3, #0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4b17      	ldr	r3, [pc, #92]	@ (80063d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	461a      	mov	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a15      	ldr	r2, [pc, #84]	@ (80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006388:	671a      	str	r2, [r3, #112]	@ 0x70
 800638a:	e009      	b.n	80063a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4b14      	ldr	r3, [pc, #80]	@ (80063e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	461a      	mov	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a11      	ldr	r2, [pc, #68]	@ (80063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800639e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	2201      	movs	r2, #1
 80063a6:	409a      	lsls	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80063ac:	bf00      	nop
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	58025408 	.word	0x58025408
 80063bc:	5802541c 	.word	0x5802541c
 80063c0:	58025430 	.word	0x58025430
 80063c4:	58025444 	.word	0x58025444
 80063c8:	58025458 	.word	0x58025458
 80063cc:	5802546c 	.word	0x5802546c
 80063d0:	58025480 	.word	0x58025480
 80063d4:	58025494 	.word	0x58025494
 80063d8:	1600963f 	.word	0x1600963f
 80063dc:	58025940 	.word	0x58025940
 80063e0:	1000823f 	.word	0x1000823f
 80063e4:	40020940 	.word	0x40020940

080063e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b089      	sub	sp, #36	@ 0x24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80063f6:	4b89      	ldr	r3, [pc, #548]	@ (800661c <HAL_GPIO_Init+0x234>)
 80063f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063fa:	e194      	b.n	8006726 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	2101      	movs	r1, #1
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	4013      	ands	r3, r2
 800640a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 8186 	beq.w	8006720 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d005      	beq.n	800642c <HAL_GPIO_Init+0x44>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d130      	bne.n	800648e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	2203      	movs	r2, #3
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	43db      	mvns	r3, r3
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	4013      	ands	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4313      	orrs	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006462:	2201      	movs	r2, #1
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	43db      	mvns	r3, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4013      	ands	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f003 0201 	and.w	r2, r3, #1
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4313      	orrs	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b03      	cmp	r3, #3
 8006498:	d017      	beq.n	80064ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	2203      	movs	r2, #3
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	43db      	mvns	r3, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	4013      	ands	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d123      	bne.n	800651e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	08da      	lsrs	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3208      	adds	r2, #8
 80064de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	220f      	movs	r2, #15
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	4313      	orrs	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	08da      	lsrs	r2, r3, #3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3208      	adds	r2, #8
 8006518:	69b9      	ldr	r1, [r7, #24]
 800651a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	2203      	movs	r2, #3
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	43db      	mvns	r3, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	4013      	ands	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f003 0203 	and.w	r2, r3, #3
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4313      	orrs	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80e0 	beq.w	8006720 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006560:	4b2f      	ldr	r3, [pc, #188]	@ (8006620 <HAL_GPIO_Init+0x238>)
 8006562:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006566:	4a2e      	ldr	r2, [pc, #184]	@ (8006620 <HAL_GPIO_Init+0x238>)
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006570:	4b2b      	ldr	r3, [pc, #172]	@ (8006620 <HAL_GPIO_Init+0x238>)
 8006572:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800657e:	4a29      	ldr	r2, [pc, #164]	@ (8006624 <HAL_GPIO_Init+0x23c>)
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	089b      	lsrs	r3, r3, #2
 8006584:	3302      	adds	r3, #2
 8006586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	220f      	movs	r2, #15
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a20      	ldr	r2, [pc, #128]	@ (8006628 <HAL_GPIO_Init+0x240>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d052      	beq.n	8006650 <HAL_GPIO_Init+0x268>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1f      	ldr	r2, [pc, #124]	@ (800662c <HAL_GPIO_Init+0x244>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d031      	beq.n	8006616 <HAL_GPIO_Init+0x22e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006630 <HAL_GPIO_Init+0x248>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d02b      	beq.n	8006612 <HAL_GPIO_Init+0x22a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006634 <HAL_GPIO_Init+0x24c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d025      	beq.n	800660e <HAL_GPIO_Init+0x226>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006638 <HAL_GPIO_Init+0x250>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01f      	beq.n	800660a <HAL_GPIO_Init+0x222>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a1b      	ldr	r2, [pc, #108]	@ (800663c <HAL_GPIO_Init+0x254>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d019      	beq.n	8006606 <HAL_GPIO_Init+0x21e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006640 <HAL_GPIO_Init+0x258>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <HAL_GPIO_Init+0x21a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a19      	ldr	r2, [pc, #100]	@ (8006644 <HAL_GPIO_Init+0x25c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00d      	beq.n	80065fe <HAL_GPIO_Init+0x216>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a18      	ldr	r2, [pc, #96]	@ (8006648 <HAL_GPIO_Init+0x260>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <HAL_GPIO_Init+0x212>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a17      	ldr	r2, [pc, #92]	@ (800664c <HAL_GPIO_Init+0x264>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d101      	bne.n	80065f6 <HAL_GPIO_Init+0x20e>
 80065f2:	2309      	movs	r3, #9
 80065f4:	e02d      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 80065f6:	230a      	movs	r3, #10
 80065f8:	e02b      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 80065fa:	2308      	movs	r3, #8
 80065fc:	e029      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 80065fe:	2307      	movs	r3, #7
 8006600:	e027      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 8006602:	2306      	movs	r3, #6
 8006604:	e025      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 8006606:	2305      	movs	r3, #5
 8006608:	e023      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 800660a:	2304      	movs	r3, #4
 800660c:	e021      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 800660e:	2303      	movs	r3, #3
 8006610:	e01f      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 8006612:	2302      	movs	r3, #2
 8006614:	e01d      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 8006616:	2301      	movs	r3, #1
 8006618:	e01b      	b.n	8006652 <HAL_GPIO_Init+0x26a>
 800661a:	bf00      	nop
 800661c:	58000080 	.word	0x58000080
 8006620:	58024400 	.word	0x58024400
 8006624:	58000400 	.word	0x58000400
 8006628:	58020000 	.word	0x58020000
 800662c:	58020400 	.word	0x58020400
 8006630:	58020800 	.word	0x58020800
 8006634:	58020c00 	.word	0x58020c00
 8006638:	58021000 	.word	0x58021000
 800663c:	58021400 	.word	0x58021400
 8006640:	58021800 	.word	0x58021800
 8006644:	58021c00 	.word	0x58021c00
 8006648:	58022000 	.word	0x58022000
 800664c:	58022400 	.word	0x58022400
 8006650:	2300      	movs	r3, #0
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	f002 0203 	and.w	r2, r2, #3
 8006658:	0092      	lsls	r2, r2, #2
 800665a:	4093      	lsls	r3, r2
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	4313      	orrs	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006662:	4938      	ldr	r1, [pc, #224]	@ (8006744 <HAL_GPIO_Init+0x35c>)
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	089b      	lsrs	r3, r3, #2
 8006668:	3302      	adds	r3, #2
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	43db      	mvns	r3, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800669e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	43db      	mvns	r3, r3
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	4013      	ands	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	43db      	mvns	r3, r3
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	4013      	ands	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	3301      	adds	r3, #1
 8006724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	f47f ae63 	bne.w	80063fc <HAL_GPIO_Init+0x14>
  }
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	3724      	adds	r7, #36	@ 0x24
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	58000400 	.word	0x58000400

08006748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	807b      	strh	r3, [r7, #2]
 8006754:	4613      	mov	r3, r2
 8006756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006758:	787b      	ldrb	r3, [r7, #1]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006764:	e003      	b.n	800676e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006766:	887b      	ldrh	r3, [r7, #2]
 8006768:	041a      	lsls	r2, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	619a      	str	r2, [r3, #24]
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a04      	ldr	r2, [pc, #16]	@ (8006798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800678a:	6013      	str	r3, [r2, #0]
}
 800678c:	bf00      	nop
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	58024800 	.word	0x58024800

0800679c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80067a4:	4b29      	ldr	r3, [pc, #164]	@ (800684c <HAL_PWREx_ConfigSupply+0xb0>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	2b06      	cmp	r3, #6
 80067ae:	d00a      	beq.n	80067c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067b0:	4b26      	ldr	r3, [pc, #152]	@ (800684c <HAL_PWREx_ConfigSupply+0xb0>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d001      	beq.n	80067c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e040      	b.n	8006844 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e03e      	b.n	8006844 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80067c6:	4b21      	ldr	r3, [pc, #132]	@ (800684c <HAL_PWREx_ConfigSupply+0xb0>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80067ce:	491f      	ldr	r1, [pc, #124]	@ (800684c <HAL_PWREx_ConfigSupply+0xb0>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80067d6:	f7fb f8af 	bl	8001938 <HAL_GetTick>
 80067da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067dc:	e009      	b.n	80067f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80067de:	f7fb f8ab 	bl	8001938 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067ec:	d901      	bls.n	80067f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e028      	b.n	8006844 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067f2:	4b16      	ldr	r3, [pc, #88]	@ (800684c <HAL_PWREx_ConfigSupply+0xb0>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067fe:	d1ee      	bne.n	80067de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b1e      	cmp	r3, #30
 8006804:	d008      	beq.n	8006818 <HAL_PWREx_ConfigSupply+0x7c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b2e      	cmp	r3, #46	@ 0x2e
 800680a:	d005      	beq.n	8006818 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b1d      	cmp	r3, #29
 8006810:	d002      	beq.n	8006818 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b2d      	cmp	r3, #45	@ 0x2d
 8006816:	d114      	bne.n	8006842 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006818:	f7fb f88e 	bl	8001938 <HAL_GetTick>
 800681c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800681e:	e009      	b.n	8006834 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006820:	f7fb f88a 	bl	8001938 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800682e:	d901      	bls.n	8006834 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e007      	b.n	8006844 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006834:	4b05      	ldr	r3, [pc, #20]	@ (800684c <HAL_PWREx_ConfigSupply+0xb0>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800683c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006840:	d1ee      	bne.n	8006820 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	58024800 	.word	0x58024800

08006850 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08c      	sub	sp, #48	@ 0x30
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d102      	bne.n	8006864 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f000 bc1f 	b.w	80070a2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80b3 	beq.w	80069d8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006872:	4b95      	ldr	r3, [pc, #596]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800687a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800687c:	4b92      	ldr	r3, [pc, #584]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 800687e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006880:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006884:	2b10      	cmp	r3, #16
 8006886:	d007      	beq.n	8006898 <HAL_RCC_OscConfig+0x48>
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688a:	2b18      	cmp	r3, #24
 800688c:	d112      	bne.n	80068b4 <HAL_RCC_OscConfig+0x64>
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d10d      	bne.n	80068b4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006898:	4b8b      	ldr	r3, [pc, #556]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8098 	beq.w	80069d6 <HAL_RCC_OscConfig+0x186>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 8093 	bne.w	80069d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e3f6      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068bc:	d106      	bne.n	80068cc <HAL_RCC_OscConfig+0x7c>
 80068be:	4b82      	ldr	r3, [pc, #520]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a81      	ldr	r2, [pc, #516]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e058      	b.n	800697e <HAL_RCC_OscConfig+0x12e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d112      	bne.n	80068fa <HAL_RCC_OscConfig+0xaa>
 80068d4:	4b7c      	ldr	r3, [pc, #496]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a7b      	ldr	r2, [pc, #492]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80068da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	4b79      	ldr	r3, [pc, #484]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a78      	ldr	r2, [pc, #480]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80068e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	4b76      	ldr	r3, [pc, #472]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a75      	ldr	r2, [pc, #468]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80068f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	e041      	b.n	800697e <HAL_RCC_OscConfig+0x12e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006902:	d112      	bne.n	800692a <HAL_RCC_OscConfig+0xda>
 8006904:	4b70      	ldr	r3, [pc, #448]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6f      	ldr	r2, [pc, #444]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 800690a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	4b6d      	ldr	r3, [pc, #436]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a6c      	ldr	r2, [pc, #432]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006916:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a69      	ldr	r2, [pc, #420]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	e029      	b.n	800697e <HAL_RCC_OscConfig+0x12e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006932:	d112      	bne.n	800695a <HAL_RCC_OscConfig+0x10a>
 8006934:	4b64      	ldr	r3, [pc, #400]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a63      	ldr	r2, [pc, #396]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 800693a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4b61      	ldr	r3, [pc, #388]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a60      	ldr	r2, [pc, #384]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a5d      	ldr	r2, [pc, #372]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e011      	b.n	800697e <HAL_RCC_OscConfig+0x12e>
 800695a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a5a      	ldr	r2, [pc, #360]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	4b58      	ldr	r3, [pc, #352]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a57      	ldr	r2, [pc, #348]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 800696c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	4b55      	ldr	r3, [pc, #340]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a54      	ldr	r2, [pc, #336]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006978:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800697c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d013      	beq.n	80069ae <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006986:	f7fa ffd7 	bl	8001938 <HAL_GetTick>
 800698a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800698e:	f7fa ffd3 	bl	8001938 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b64      	cmp	r3, #100	@ 0x64
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e380      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069a0:	4b49      	ldr	r3, [pc, #292]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCC_OscConfig+0x13e>
 80069ac:	e014      	b.n	80069d8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ae:	f7fa ffc3 	bl	8001938 <HAL_GetTick>
 80069b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069b4:	e008      	b.n	80069c8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069b6:	f7fa ffbf 	bl	8001938 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b64      	cmp	r3, #100	@ 0x64
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e36c      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069c8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f0      	bne.n	80069b6 <HAL_RCC_OscConfig+0x166>
 80069d4:	e000      	b.n	80069d8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 808c 	beq.w	8006afe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069e6:	4b38      	ldr	r3, [pc, #224]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069f0:	4b35      	ldr	r3, [pc, #212]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <HAL_RCC_OscConfig+0x1bc>
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	2b18      	cmp	r3, #24
 8006a00:	d137      	bne.n	8006a72 <HAL_RCC_OscConfig+0x222>
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d132      	bne.n	8006a72 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCC_OscConfig+0x1d4>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e33e      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a24:	4b28      	ldr	r3, [pc, #160]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f023 0219 	bic.w	r2, r3, #25
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	4925      	ldr	r1, [pc, #148]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a36:	f7fa ff7f 	bl	8001938 <HAL_GetTick>
 8006a3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a3e:	f7fa ff7b 	bl	8001938 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e328      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0f0      	beq.n	8006a3e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	061b      	lsls	r3, r3, #24
 8006a6a:	4917      	ldr	r1, [pc, #92]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a70:	e045      	b.n	8006afe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d028      	beq.n	8006acc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a7a:	4b13      	ldr	r3, [pc, #76]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f023 0219 	bic.w	r2, r3, #25
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	4910      	ldr	r1, [pc, #64]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fa ff54 	bl	8001938 <HAL_GetTick>
 8006a90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a94:	f7fa ff50 	bl	8001938 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e2fd      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aa6:	4b08      	ldr	r3, [pc, #32]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab2:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	061b      	lsls	r3, r3, #24
 8006ac0:	4901      	ldr	r1, [pc, #4]	@ (8006ac8 <HAL_RCC_OscConfig+0x278>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	604b      	str	r3, [r1, #4]
 8006ac6:	e01a      	b.n	8006afe <HAL_RCC_OscConfig+0x2ae>
 8006ac8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006acc:	4b97      	ldr	r3, [pc, #604]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a96      	ldr	r2, [pc, #600]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fa ff2e 	bl	8001938 <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae0:	f7fa ff2a 	bl	8001938 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e2d7      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006af2:	4b8e      	ldr	r3, [pc, #568]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d06a      	beq.n	8006be0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b0a:	4b88      	ldr	r3, [pc, #544]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b14:	4b85      	ldr	r3, [pc, #532]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d007      	beq.n	8006b30 <HAL_RCC_OscConfig+0x2e0>
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b18      	cmp	r3, #24
 8006b24:	d11b      	bne.n	8006b5e <HAL_RCC_OscConfig+0x30e>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d116      	bne.n	8006b5e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b30:	4b7e      	ldr	r3, [pc, #504]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_RCC_OscConfig+0x2f8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	2b80      	cmp	r3, #128	@ 0x80
 8006b42:	d001      	beq.n	8006b48 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e2ac      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b48:	4b78      	ldr	r3, [pc, #480]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	061b      	lsls	r3, r3, #24
 8006b56:	4975      	ldr	r1, [pc, #468]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b5c:	e040      	b.n	8006be0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d023      	beq.n	8006bae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b66:	4b71      	ldr	r3, [pc, #452]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a70      	ldr	r2, [pc, #448]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b72:	f7fa fee1 	bl	8001938 <HAL_GetTick>
 8006b76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b78:	e008      	b.n	8006b8c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b7a:	f7fa fedd 	bl	8001938 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e28a      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b8c:	4b67      	ldr	r3, [pc, #412]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f0      	beq.n	8006b7a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b98:	4b64      	ldr	r3, [pc, #400]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	4961      	ldr	r1, [pc, #388]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60cb      	str	r3, [r1, #12]
 8006bac:	e018      	b.n	8006be0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006bae:	4b5f      	ldr	r3, [pc, #380]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006bb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bba:	f7fa febd 	bl	8001938 <HAL_GetTick>
 8006bbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bc2:	f7fa feb9 	bl	8001938 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e266      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bd4:	4b55      	ldr	r3, [pc, #340]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f0      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d036      	beq.n	8006c5a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d019      	beq.n	8006c28 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c00:	f7fa fe9a 	bl	8001938 <HAL_GetTick>
 8006c04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c08:	f7fa fe96 	bl	8001938 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e243      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c1a:	4b44      	ldr	r3, [pc, #272]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x3b8>
 8006c26:	e018      	b.n	8006c5a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c28:	4b40      	ldr	r3, [pc, #256]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c34:	f7fa fe80 	bl	8001938 <HAL_GetTick>
 8006c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c3c:	f7fa fe7c 	bl	8001938 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e229      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c4e:	4b37      	ldr	r3, [pc, #220]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d036      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d019      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a2e      	ldr	r2, [pc, #184]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c7a:	f7fa fe5d 	bl	8001938 <HAL_GetTick>
 8006c7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c82:	f7fa fe59 	bl	8001938 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e206      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c94:	4b25      	ldr	r3, [pc, #148]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCC_OscConfig+0x432>
 8006ca0:	e018      	b.n	8006cd4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ca2:	4b22      	ldr	r3, [pc, #136]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a21      	ldr	r2, [pc, #132]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006ca8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cae:	f7fa fe43 	bl	8001938 <HAL_GetTick>
 8006cb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cb6:	f7fa fe3f 	bl	8001938 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e1ec      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cc8:	4b18      	ldr	r3, [pc, #96]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f0      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80af 	beq.w	8006e40 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ce2:	4b13      	ldr	r3, [pc, #76]	@ (8006d30 <HAL_RCC_OscConfig+0x4e0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a12      	ldr	r2, [pc, #72]	@ (8006d30 <HAL_RCC_OscConfig+0x4e0>)
 8006ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cee:	f7fa fe23 	bl	8001938 <HAL_GetTick>
 8006cf2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf6:	f7fa fe1f 	bl	8001938 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b64      	cmp	r3, #100	@ 0x64
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e1cc      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d08:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <HAL_RCC_OscConfig+0x4e0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d10b      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4e4>
 8006d1c:	4b03      	ldr	r3, [pc, #12]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d20:	4a02      	ldr	r2, [pc, #8]	@ (8006d2c <HAL_RCC_OscConfig+0x4dc>)
 8006d22:	f043 0301 	orr.w	r3, r3, #1
 8006d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d28:	e05b      	b.n	8006de2 <HAL_RCC_OscConfig+0x592>
 8006d2a:	bf00      	nop
 8006d2c:	58024400 	.word	0x58024400
 8006d30:	58024800 	.word	0x58024800
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d112      	bne.n	8006d62 <HAL_RCC_OscConfig+0x512>
 8006d3c:	4b9d      	ldr	r3, [pc, #628]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d40:	4a9c      	ldr	r2, [pc, #624]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d42:	f023 0301 	bic.w	r3, r3, #1
 8006d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d48:	4b9a      	ldr	r3, [pc, #616]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4c:	4a99      	ldr	r2, [pc, #612]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d54:	4b97      	ldr	r3, [pc, #604]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d58:	4a96      	ldr	r2, [pc, #600]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d5a:	f023 0304 	bic.w	r3, r3, #4
 8006d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d60:	e03f      	b.n	8006de2 <HAL_RCC_OscConfig+0x592>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d112      	bne.n	8006d90 <HAL_RCC_OscConfig+0x540>
 8006d6a:	4b92      	ldr	r3, [pc, #584]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6e:	4a91      	ldr	r2, [pc, #580]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d70:	f043 0304 	orr.w	r3, r3, #4
 8006d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d76:	4b8f      	ldr	r3, [pc, #572]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7a:	4a8e      	ldr	r2, [pc, #568]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d82:	4b8c      	ldr	r3, [pc, #560]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d86:	4a8b      	ldr	r2, [pc, #556]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d8e:	e028      	b.n	8006de2 <HAL_RCC_OscConfig+0x592>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b85      	cmp	r3, #133	@ 0x85
 8006d96:	d112      	bne.n	8006dbe <HAL_RCC_OscConfig+0x56e>
 8006d98:	4b86      	ldr	r3, [pc, #536]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d9c:	4a85      	ldr	r2, [pc, #532]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006d9e:	f043 0304 	orr.w	r3, r3, #4
 8006da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006da4:	4b83      	ldr	r3, [pc, #524]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da8:	4a82      	ldr	r2, [pc, #520]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8006db0:	4b80      	ldr	r3, [pc, #512]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db4:	4a7f      	ldr	r2, [pc, #508]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006db6:	f043 0301 	orr.w	r3, r3, #1
 8006dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dbc:	e011      	b.n	8006de2 <HAL_RCC_OscConfig+0x592>
 8006dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dca:	4b7a      	ldr	r3, [pc, #488]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dce:	4a79      	ldr	r2, [pc, #484]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006dd0:	f023 0304 	bic.w	r3, r3, #4
 8006dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd6:	4b77      	ldr	r3, [pc, #476]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dda:	4a76      	ldr	r2, [pc, #472]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006de0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d015      	beq.n	8006e16 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dea:	f7fa fda5 	bl	8001938 <HAL_GetTick>
 8006dee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006df0:	e00a      	b.n	8006e08 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df2:	f7fa fda1 	bl	8001938 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e14c      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e08:	4b6a      	ldr	r3, [pc, #424]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0ee      	beq.n	8006df2 <HAL_RCC_OscConfig+0x5a2>
 8006e14:	e014      	b.n	8006e40 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e16:	f7fa fd8f 	bl	8001938 <HAL_GetTick>
 8006e1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e1c:	e00a      	b.n	8006e34 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1e:	f7fa fd8b 	bl	8001938 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e136      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e34:	4b5f      	ldr	r3, [pc, #380]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1ee      	bne.n	8006e1e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 812b 	beq.w	80070a0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e52:	2b18      	cmp	r3, #24
 8006e54:	f000 80bb 	beq.w	8006fce <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	f040 8095 	bne.w	8006f8c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e62:	4b54      	ldr	r3, [pc, #336]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a53      	ldr	r2, [pc, #332]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6e:	f7fa fd63 	bl	8001938 <HAL_GetTick>
 8006e72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e76:	f7fa fd5f 	bl	8001938 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e10c      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e88:	4b4a      	ldr	r3, [pc, #296]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f0      	bne.n	8006e76 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e94:	4b47      	ldr	r3, [pc, #284]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e98:	4b47      	ldr	r3, [pc, #284]	@ (8006fb8 <HAL_RCC_OscConfig+0x768>)
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ea4:	0112      	lsls	r2, r2, #4
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	4942      	ldr	r1, [pc, #264]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	628b      	str	r3, [r1, #40]	@ 0x28
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	025b      	lsls	r3, r3, #9
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	061b      	lsls	r3, r3, #24
 8006eda:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ede:	4935      	ldr	r1, [pc, #212]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ee4:	4b33      	ldr	r3, [pc, #204]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	4a32      	ldr	r2, [pc, #200]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ef0:	4b30      	ldr	r3, [pc, #192]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef4:	4b31      	ldr	r3, [pc, #196]	@ (8006fbc <HAL_RCC_OscConfig+0x76c>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006efc:	00d2      	lsls	r2, r2, #3
 8006efe:	492d      	ldr	r1, [pc, #180]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f04:	4b2b      	ldr	r3, [pc, #172]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	f023 020c 	bic.w	r2, r3, #12
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f10:	4928      	ldr	r1, [pc, #160]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f16:	4b27      	ldr	r3, [pc, #156]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	f023 0202 	bic.w	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f22:	4924      	ldr	r1, [pc, #144]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f28:	4b22      	ldr	r3, [pc, #136]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2c:	4a21      	ldr	r2, [pc, #132]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f34:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f38:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f40:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f4c:	4b19      	ldr	r3, [pc, #100]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f50:	4a18      	ldr	r2, [pc, #96]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f58:	4b16      	ldr	r3, [pc, #88]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a15      	ldr	r2, [pc, #84]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f64:	f7fa fce8 	bl	8001938 <HAL_GetTick>
 8006f68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f6c:	f7fa fce4 	bl	8001938 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e091      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x71c>
 8006f8a:	e089      	b.n	80070a0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f8c:	4b09      	ldr	r3, [pc, #36]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a08      	ldr	r2, [pc, #32]	@ (8006fb4 <HAL_RCC_OscConfig+0x764>)
 8006f92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f98:	f7fa fcce 	bl	8001938 <HAL_GetTick>
 8006f9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f9e:	e00f      	b.n	8006fc0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa0:	f7fa fcca 	bl	8001938 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d908      	bls.n	8006fc0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e077      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
 8006fb2:	bf00      	nop
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	fffffc0c 	.word	0xfffffc0c
 8006fbc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e9      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x750>
 8006fcc:	e068      	b.n	80070a0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006fce:	4b37      	ldr	r3, [pc, #220]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006fd4:	4b35      	ldr	r3, [pc, #212]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d031      	beq.n	8007046 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f003 0203 	and.w	r2, r3, #3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d12a      	bne.n	8007046 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	091b      	lsrs	r3, r3, #4
 8006ff4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d122      	bne.n	8007046 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800700c:	429a      	cmp	r2, r3
 800700e:	d11a      	bne.n	8007046 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	0a5b      	lsrs	r3, r3, #9
 8007014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800701e:	429a      	cmp	r2, r3
 8007020:	d111      	bne.n	8007046 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007030:	429a      	cmp	r2, r3
 8007032:	d108      	bne.n	8007046 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	0e1b      	lsrs	r3, r3, #24
 8007038:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007040:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d001      	beq.n	800704a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e02b      	b.n	80070a2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800704a:	4b18      	ldr	r3, [pc, #96]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 800704c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800704e:	08db      	lsrs	r3, r3, #3
 8007050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007054:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	429a      	cmp	r2, r3
 800705e:	d01f      	beq.n	80070a0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007060:	4b12      	ldr	r3, [pc, #72]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 8007062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007064:	4a11      	ldr	r2, [pc, #68]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800706c:	f7fa fc64 	bl	8001938 <HAL_GetTick>
 8007070:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007072:	bf00      	nop
 8007074:	f7fa fc60 	bl	8001938 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	4293      	cmp	r3, r2
 800707e:	d0f9      	beq.n	8007074 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007080:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 8007082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007084:	4b0a      	ldr	r3, [pc, #40]	@ (80070b0 <HAL_RCC_OscConfig+0x860>)
 8007086:	4013      	ands	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800708c:	00d2      	lsls	r2, r2, #3
 800708e:	4907      	ldr	r1, [pc, #28]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 8007090:	4313      	orrs	r3, r2
 8007092:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007094:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 8007096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007098:	4a04      	ldr	r2, [pc, #16]	@ (80070ac <HAL_RCC_OscConfig+0x85c>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3730      	adds	r7, #48	@ 0x30
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
 80070b0:	ffff0007 	.word	0xffff0007

080070b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e19c      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070c8:	4b8a      	ldr	r3, [pc, #552]	@ (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d910      	bls.n	80070f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d6:	4b87      	ldr	r3, [pc, #540]	@ (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f023 020f 	bic.w	r2, r3, #15
 80070de:	4985      	ldr	r1, [pc, #532]	@ (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b83      	ldr	r3, [pc, #524]	@ (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e184      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d010      	beq.n	8007126 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	4b7b      	ldr	r3, [pc, #492]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007110:	429a      	cmp	r2, r3
 8007112:	d908      	bls.n	8007126 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007114:	4b78      	ldr	r3, [pc, #480]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	4975      	ldr	r1, [pc, #468]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007122:	4313      	orrs	r3, r2
 8007124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d010      	beq.n	8007154 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695a      	ldr	r2, [r3, #20]
 8007136:	4b70      	ldr	r3, [pc, #448]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800713e:	429a      	cmp	r2, r3
 8007140:	d908      	bls.n	8007154 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007142:	4b6d      	ldr	r3, [pc, #436]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	496a      	ldr	r1, [pc, #424]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007150:	4313      	orrs	r3, r2
 8007152:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b00      	cmp	r3, #0
 800715e:	d010      	beq.n	8007182 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699a      	ldr	r2, [r3, #24]
 8007164:	4b64      	ldr	r3, [pc, #400]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800716c:	429a      	cmp	r2, r3
 800716e:	d908      	bls.n	8007182 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007170:	4b61      	ldr	r3, [pc, #388]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	495e      	ldr	r1, [pc, #376]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 800717e:	4313      	orrs	r3, r2
 8007180:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69da      	ldr	r2, [r3, #28]
 8007192:	4b59      	ldr	r3, [pc, #356]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800719a:	429a      	cmp	r2, r3
 800719c:	d908      	bls.n	80071b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800719e:	4b56      	ldr	r3, [pc, #344]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	4953      	ldr	r1, [pc, #332]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	4b4d      	ldr	r3, [pc, #308]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f003 030f 	and.w	r3, r3, #15
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d908      	bls.n	80071de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071cc:	4b4a      	ldr	r3, [pc, #296]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f023 020f 	bic.w	r2, r3, #15
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4947      	ldr	r1, [pc, #284]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d055      	beq.n	8007296 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071ea:	4b43      	ldr	r3, [pc, #268]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	4940      	ldr	r1, [pc, #256]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d107      	bne.n	8007214 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007204:	4b3c      	ldr	r3, [pc, #240]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d121      	bne.n	8007254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e0f6      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b03      	cmp	r3, #3
 800721a:	d107      	bne.n	800722c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800721c:	4b36      	ldr	r3, [pc, #216]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d115      	bne.n	8007254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0ea      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d107      	bne.n	8007244 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007234:	4b30      	ldr	r3, [pc, #192]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800723c:	2b00      	cmp	r3, #0
 800723e:	d109      	bne.n	8007254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e0de      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007244:	4b2c      	ldr	r3, [pc, #176]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e0d6      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007254:	4b28      	ldr	r3, [pc, #160]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f023 0207 	bic.w	r2, r3, #7
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	4925      	ldr	r1, [pc, #148]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007262:	4313      	orrs	r3, r2
 8007264:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007266:	f7fa fb67 	bl	8001938 <HAL_GetTick>
 800726a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800726c:	e00a      	b.n	8007284 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800726e:	f7fa fb63 	bl	8001938 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e0be      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007284:	4b1c      	ldr	r3, [pc, #112]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	429a      	cmp	r2, r3
 8007294:	d1eb      	bne.n	800726e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d010      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	4b14      	ldr	r3, [pc, #80]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d208      	bcs.n	80072c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b2:	4b11      	ldr	r3, [pc, #68]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	f023 020f 	bic.w	r2, r3, #15
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	490e      	ldr	r1, [pc, #56]	@ (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072c4:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d214      	bcs.n	80072fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d2:	4b08      	ldr	r3, [pc, #32]	@ (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f023 020f 	bic.w	r2, r3, #15
 80072da:	4906      	ldr	r1, [pc, #24]	@ (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	4313      	orrs	r3, r2
 80072e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e2:	4b04      	ldr	r3, [pc, #16]	@ (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d005      	beq.n	80072fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e086      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
 80072f4:	52002000 	.word	0x52002000
 80072f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d010      	beq.n	800732a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	4b3f      	ldr	r3, [pc, #252]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007314:	429a      	cmp	r2, r3
 8007316:	d208      	bcs.n	800732a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007318:	4b3c      	ldr	r3, [pc, #240]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	4939      	ldr	r1, [pc, #228]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 8007326:	4313      	orrs	r3, r2
 8007328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d010      	beq.n	8007358 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695a      	ldr	r2, [r3, #20]
 800733a:	4b34      	ldr	r3, [pc, #208]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007342:	429a      	cmp	r2, r3
 8007344:	d208      	bcs.n	8007358 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007346:	4b31      	ldr	r3, [pc, #196]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	492e      	ldr	r1, [pc, #184]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 8007354:	4313      	orrs	r3, r2
 8007356:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d010      	beq.n	8007386 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	4b28      	ldr	r3, [pc, #160]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007370:	429a      	cmp	r2, r3
 8007372:	d208      	bcs.n	8007386 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007374:	4b25      	ldr	r3, [pc, #148]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	4922      	ldr	r1, [pc, #136]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 8007382:	4313      	orrs	r3, r2
 8007384:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d010      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69da      	ldr	r2, [r3, #28]
 8007396:	4b1d      	ldr	r3, [pc, #116]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800739e:	429a      	cmp	r2, r3
 80073a0:	d208      	bcs.n	80073b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073a2:	4b1a      	ldr	r3, [pc, #104]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	4917      	ldr	r1, [pc, #92]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80073b4:	f000 f89e 	bl	80074f4 <HAL_RCC_GetSysClockFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b14      	ldr	r3, [pc, #80]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	0a1b      	lsrs	r3, r3, #8
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	4912      	ldr	r1, [pc, #72]	@ (8007410 <HAL_RCC_ClockConfig+0x35c>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	fa22 f303 	lsr.w	r3, r2, r3
 80073d0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80073d2:	4b0e      	ldr	r3, [pc, #56]	@ (800740c <HAL_RCC_ClockConfig+0x358>)
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	4a0d      	ldr	r2, [pc, #52]	@ (8007410 <HAL_RCC_ClockConfig+0x35c>)
 80073dc:	5cd3      	ldrb	r3, [r2, r3]
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
 80073e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007414 <HAL_RCC_ClockConfig+0x360>)
 80073ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007418 <HAL_RCC_ClockConfig+0x364>)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80073f2:	4b0a      	ldr	r3, [pc, #40]	@ (800741c <HAL_RCC_ClockConfig+0x368>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fa fa54 	bl	80018a4 <HAL_InitTick>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	58024400 	.word	0x58024400
 8007410:	0800d960 	.word	0x0800d960
 8007414:	24000408 	.word	0x24000408
 8007418:	24000404 	.word	0x24000404
 800741c:	2400040c 	.word	0x2400040c

08007420 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08c      	sub	sp, #48	@ 0x30
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d12a      	bne.n	8007488 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007432:	4b2d      	ldr	r3, [pc, #180]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 8007434:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007438:	4a2b      	ldr	r2, [pc, #172]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007442:	4b29      	ldr	r3, [pc, #164]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 8007444:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007456:	2302      	movs	r3, #2
 8007458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800745a:	2303      	movs	r3, #3
 800745c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745e:	2300      	movs	r3, #0
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007462:	2300      	movs	r3, #0
 8007464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007466:	f107 031c 	add.w	r3, r7, #28
 800746a:	4619      	mov	r1, r3
 800746c:	481f      	ldr	r0, [pc, #124]	@ (80074ec <HAL_RCC_MCOConfig+0xcc>)
 800746e:	f7fe ffbb 	bl	80063e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007472:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	430b      	orrs	r3, r1
 8007480:	4919      	ldr	r1, [pc, #100]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007486:	e02a      	b.n	80074de <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007488:	4b17      	ldr	r3, [pc, #92]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 800748a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800748e:	4a16      	ldr	r2, [pc, #88]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 8007490:	f043 0304 	orr.w	r3, r3, #4
 8007494:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007498:	4b13      	ldr	r3, [pc, #76]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 800749a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80074a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ac:	2302      	movs	r3, #2
 80074ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b0:	2303      	movs	r3, #3
 80074b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80074b8:	2300      	movs	r3, #0
 80074ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80074bc:	f107 031c 	add.w	r3, r7, #28
 80074c0:	4619      	mov	r1, r3
 80074c2:	480b      	ldr	r0, [pc, #44]	@ (80074f0 <HAL_RCC_MCOConfig+0xd0>)
 80074c4:	f7fe ff90 	bl	80063e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80074c8:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	01d9      	lsls	r1, r3, #7
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	430b      	orrs	r3, r1
 80074d8:	4903      	ldr	r1, [pc, #12]	@ (80074e8 <HAL_RCC_MCOConfig+0xc8>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	610b      	str	r3, [r1, #16]
}
 80074de:	bf00      	nop
 80074e0:	3730      	adds	r7, #48	@ 0x30
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	58024400 	.word	0x58024400
 80074ec:	58020000 	.word	0x58020000
 80074f0:	58020800 	.word	0x58020800

080074f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b089      	sub	sp, #36	@ 0x24
 80074f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074fa:	4bb3      	ldr	r3, [pc, #716]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007502:	2b18      	cmp	r3, #24
 8007504:	f200 8155 	bhi.w	80077b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007508:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <HAL_RCC_GetSysClockFreq+0x1c>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007575 	.word	0x08007575
 8007514:	080077b3 	.word	0x080077b3
 8007518:	080077b3 	.word	0x080077b3
 800751c:	080077b3 	.word	0x080077b3
 8007520:	080077b3 	.word	0x080077b3
 8007524:	080077b3 	.word	0x080077b3
 8007528:	080077b3 	.word	0x080077b3
 800752c:	080077b3 	.word	0x080077b3
 8007530:	0800759b 	.word	0x0800759b
 8007534:	080077b3 	.word	0x080077b3
 8007538:	080077b3 	.word	0x080077b3
 800753c:	080077b3 	.word	0x080077b3
 8007540:	080077b3 	.word	0x080077b3
 8007544:	080077b3 	.word	0x080077b3
 8007548:	080077b3 	.word	0x080077b3
 800754c:	080077b3 	.word	0x080077b3
 8007550:	080075a1 	.word	0x080075a1
 8007554:	080077b3 	.word	0x080077b3
 8007558:	080077b3 	.word	0x080077b3
 800755c:	080077b3 	.word	0x080077b3
 8007560:	080077b3 	.word	0x080077b3
 8007564:	080077b3 	.word	0x080077b3
 8007568:	080077b3 	.word	0x080077b3
 800756c:	080077b3 	.word	0x080077b3
 8007570:	080075a7 	.word	0x080075a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007574:	4b94      	ldr	r3, [pc, #592]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007580:	4b91      	ldr	r3, [pc, #580]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	08db      	lsrs	r3, r3, #3
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	4a90      	ldr	r2, [pc, #576]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
 8007590:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007592:	e111      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007594:	4b8d      	ldr	r3, [pc, #564]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007596:	61bb      	str	r3, [r7, #24]
      break;
 8007598:	e10e      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800759a:	4b8d      	ldr	r3, [pc, #564]	@ (80077d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800759c:	61bb      	str	r3, [r7, #24]
      break;
 800759e:	e10b      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80075a0:	4b8c      	ldr	r3, [pc, #560]	@ (80077d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075a2:	61bb      	str	r3, [r7, #24]
      break;
 80075a4:	e108      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075a6:	4b88      	ldr	r3, [pc, #544]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80075b0:	4b85      	ldr	r3, [pc, #532]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	091b      	lsrs	r3, r3, #4
 80075b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075bc:	4b82      	ldr	r3, [pc, #520]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075c6:	4b80      	ldr	r3, [pc, #512]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ca:	08db      	lsrs	r3, r3, #3
 80075cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	fb02 f303 	mul.w	r3, r2, r3
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80e1 	beq.w	80077ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	f000 8083 	beq.w	80076f8 <HAL_RCC_GetSysClockFreq+0x204>
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	f200 80a1 	bhi.w	800773c <HAL_RCC_GetSysClockFreq+0x248>
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <HAL_RCC_GetSysClockFreq+0x114>
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d056      	beq.n	80076b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007606:	e099      	b.n	800773c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007608:	4b6f      	ldr	r3, [pc, #444]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	d02d      	beq.n	8007670 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007614:	4b6c      	ldr	r3, [pc, #432]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	08db      	lsrs	r3, r3, #3
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	4a6b      	ldr	r2, [pc, #428]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
 8007624:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763e:	4b62      	ldr	r3, [pc, #392]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007652:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800766e:	e087      	b.n	8007780 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800767e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007682:	4b51      	ldr	r3, [pc, #324]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007692:	ed97 6a02 	vldr	s12, [r7, #8]
 8007696:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800769a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076b2:	e065      	b.n	8007780 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80077e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c6:	4b40      	ldr	r3, [pc, #256]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076f6:	e043      	b.n	8007780 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80077e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770a:	4b2f      	ldr	r3, [pc, #188]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771a:	ed97 6a02 	vldr	s12, [r7, #8]
 800771e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800772e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800773a:	e021      	b.n	8007780 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007746:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80077e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800774a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774e:	4b1e      	ldr	r3, [pc, #120]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007762:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800777e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007780:	4b11      	ldr	r3, [pc, #68]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007784:	0a5b      	lsrs	r3, r3, #9
 8007786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800778a:	3301      	adds	r3, #1
 800778c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007798:	edd7 6a07 	vldr	s13, [r7, #28]
 800779c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a4:	ee17 3a90 	vmov	r3, s15
 80077a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80077aa:	e005      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	61bb      	str	r3, [r7, #24]
      break;
 80077b0:	e002      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80077b2:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077b4:	61bb      	str	r3, [r7, #24]
      break;
 80077b6:	bf00      	nop
  }

  return sysclockfreq;
 80077b8:	69bb      	ldr	r3, [r7, #24]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3724      	adds	r7, #36	@ 0x24
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	58024400 	.word	0x58024400
 80077cc:	03d09000 	.word	0x03d09000
 80077d0:	003d0900 	.word	0x003d0900
 80077d4:	007a1200 	.word	0x007a1200
 80077d8:	46000000 	.word	0x46000000
 80077dc:	4c742400 	.word	0x4c742400
 80077e0:	4a742400 	.word	0x4a742400
 80077e4:	4af42400 	.word	0x4af42400

080077e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80077ee:	f7ff fe81 	bl	80074f4 <HAL_RCC_GetSysClockFreq>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4b10      	ldr	r3, [pc, #64]	@ (8007838 <HAL_RCC_GetHCLKFreq+0x50>)
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	0a1b      	lsrs	r3, r3, #8
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	490f      	ldr	r1, [pc, #60]	@ (800783c <HAL_RCC_GetHCLKFreq+0x54>)
 8007800:	5ccb      	ldrb	r3, [r1, r3]
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	fa22 f303 	lsr.w	r3, r2, r3
 800780a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800780c:	4b0a      	ldr	r3, [pc, #40]	@ (8007838 <HAL_RCC_GetHCLKFreq+0x50>)
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	4a09      	ldr	r2, [pc, #36]	@ (800783c <HAL_RCC_GetHCLKFreq+0x54>)
 8007816:	5cd3      	ldrb	r3, [r2, r3]
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	fa22 f303 	lsr.w	r3, r2, r3
 8007822:	4a07      	ldr	r2, [pc, #28]	@ (8007840 <HAL_RCC_GetHCLKFreq+0x58>)
 8007824:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007826:	4a07      	ldr	r2, [pc, #28]	@ (8007844 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800782c:	4b04      	ldr	r3, [pc, #16]	@ (8007840 <HAL_RCC_GetHCLKFreq+0x58>)
 800782e:	681b      	ldr	r3, [r3, #0]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	58024400 	.word	0x58024400
 800783c:	0800d960 	.word	0x0800d960
 8007840:	24000408 	.word	0x24000408
 8007844:	24000404 	.word	0x24000404

08007848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800784c:	f7ff ffcc 	bl	80077e8 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b06      	ldr	r3, [pc, #24]	@ (800786c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4904      	ldr	r1, [pc, #16]	@ (8007870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007868:	4618      	mov	r0, r3
 800786a:	bd80      	pop	{r7, pc}
 800786c:	58024400 	.word	0x58024400
 8007870:	0800d960 	.word	0x0800d960

08007874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007878:	f7ff ffb6 	bl	80077e8 <HAL_RCC_GetHCLKFreq>
 800787c:	4602      	mov	r2, r0
 800787e:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	0a1b      	lsrs	r3, r3, #8
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	4904      	ldr	r1, [pc, #16]	@ (800789c <HAL_RCC_GetPCLK2Freq+0x28>)
 800788a:	5ccb      	ldrb	r3, [r1, r3]
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007894:	4618      	mov	r0, r3
 8007896:	bd80      	pop	{r7, pc}
 8007898:	58024400 	.word	0x58024400
 800789c:	0800d960 	.word	0x0800d960

080078a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078a4:	b0c8      	sub	sp, #288	@ 0x120
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078ac:	2300      	movs	r3, #0
 80078ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80078c4:	2500      	movs	r5, #0
 80078c6:	ea54 0305 	orrs.w	r3, r4, r5
 80078ca:	d049      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80078cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078d6:	d02f      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80078d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078dc:	d828      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078e2:	d01a      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078e8:	d822      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078f2:	d007      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078f4:	e01c      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f6:	4ba7      	ldr	r3, [pc, #668]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fa:	4aa6      	ldr	r2, [pc, #664]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007900:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007902:	e01a      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007908:	3308      	adds	r3, #8
 800790a:	2102      	movs	r1, #2
 800790c:	4618      	mov	r0, r3
 800790e:	f002 fac3 	bl	8009e98 <RCCEx_PLL2_Config>
 8007912:	4603      	mov	r3, r0
 8007914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007918:	e00f      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800791a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800791e:	3328      	adds	r3, #40	@ 0x28
 8007920:	2102      	movs	r1, #2
 8007922:	4618      	mov	r0, r3
 8007924:	f002 fb6a 	bl	8009ffc <RCCEx_PLL3_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800792e:	e004      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007942:	4b94      	ldr	r3, [pc, #592]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007946:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800794a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800794e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007950:	4a90      	ldr	r2, [pc, #576]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007952:	430b      	orrs	r3, r1
 8007954:	6513      	str	r3, [r2, #80]	@ 0x50
 8007956:	e003      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800795c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800796c:	f04f 0900 	mov.w	r9, #0
 8007970:	ea58 0309 	orrs.w	r3, r8, r9
 8007974:	d047      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800797a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800797c:	2b04      	cmp	r3, #4
 800797e:	d82a      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007980:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	0800799d 	.word	0x0800799d
 800798c:	080079ab 	.word	0x080079ab
 8007990:	080079c1 	.word	0x080079c1
 8007994:	080079df 	.word	0x080079df
 8007998:	080079df 	.word	0x080079df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799c:	4b7d      	ldr	r3, [pc, #500]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	4a7c      	ldr	r2, [pc, #496]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079a8:	e01a      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ae:	3308      	adds	r3, #8
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f002 fa70 	bl	8009e98 <RCCEx_PLL2_Config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079be:	e00f      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079c4:	3328      	adds	r3, #40	@ 0x28
 80079c6:	2100      	movs	r1, #0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f002 fb17 	bl	8009ffc <RCCEx_PLL3_Config>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079d4:	e004      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079dc:	e000      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ec:	f023 0107 	bic.w	r1, r3, #7
 80079f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f6:	4a67      	ldr	r2, [pc, #412]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80079fc:	e003      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007a12:	f04f 0b00 	mov.w	fp, #0
 8007a16:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a1a:	d054      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007a26:	d036      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007a28:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007a2c:	d82f      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a32:	d032      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a38:	d829      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a3c:	d02f      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007a3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a40:	d825      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a42:	2b80      	cmp	r3, #128	@ 0x80
 8007a44:	d018      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007a46:	2b80      	cmp	r3, #128	@ 0x80
 8007a48:	d821      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007a4e:	2b40      	cmp	r3, #64	@ 0x40
 8007a50:	d007      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007a52:	e01c      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a54:	4b4f      	ldr	r3, [pc, #316]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a58:	4a4e      	ldr	r2, [pc, #312]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007a60:	e01e      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a66:	3308      	adds	r3, #8
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f002 fa14 	bl	8009e98 <RCCEx_PLL2_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007a76:	e013      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a7c:	3328      	adds	r3, #40	@ 0x28
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4618      	mov	r0, r3
 8007a82:	f002 fabb 	bl	8009ffc <RCCEx_PLL3_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a94:	e004      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007a96:	bf00      	nop
 8007a98:	e002      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007a9a:	bf00      	nop
 8007a9c:	e000      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab6:	4a37      	ldr	r2, [pc, #220]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8007abc:	e003      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ac2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007ad2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007adc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	d05c      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007af0:	d03b      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007af2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007af6:	d834      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007afc:	d037      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b02:	d82e      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b08:	d033      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b0e:	d828      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b14:	d01a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1a:	d822      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b24:	d007      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007b26:	e01c      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b28:	4b1a      	ldr	r3, [pc, #104]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	4a19      	ldr	r2, [pc, #100]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007b34:	e01e      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f002 f9aa 	bl	8009e98 <RCCEx_PLL2_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007b4a:	e013      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b50:	3328      	adds	r3, #40	@ 0x28
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f002 fa51 	bl	8009ffc <RCCEx_PLL3_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007b60:	e008      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b68:	e004      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007b6a:	bf00      	nop
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10d      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007b7c:	4b05      	ldr	r3, [pc, #20]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b80:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b8a:	4a02      	ldr	r2, [pc, #8]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b90:	e006      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007b92:	bf00      	nop
 8007b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007bac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	d03a      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bc6:	2b30      	cmp	r3, #48	@ 0x30
 8007bc8:	d01f      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007bca:	2b30      	cmp	r3, #48	@ 0x30
 8007bcc:	d819      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d00c      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d815      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d019      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d111      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bde:	4bae      	ldr	r3, [pc, #696]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be2:	4aad      	ldr	r2, [pc, #692]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007bea:	e011      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	2102      	movs	r1, #2
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f002 f94f 	bl	8009e98 <RCCEx_PLL2_Config>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007c00:	e006      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c08:	e002      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007c0a:	bf00      	nop
 8007c0c:	e000      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007c18:	4b9f      	ldr	r3, [pc, #636]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c26:	4a9c      	ldr	r2, [pc, #624]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c2c:	e003      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007c42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4313      	orrs	r3, r2
 8007c54:	d051      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c60:	d035      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007c62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c66:	d82e      	bhi.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007c68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c6c:	d031      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007c6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c72:	d828      	bhi.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c78:	d01a      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c7e:	d822      	bhi.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c88:	d007      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007c8a:	e01c      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8c:	4b82      	ldr	r3, [pc, #520]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	4a81      	ldr	r2, [pc, #516]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c98:	e01c      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f002 f8f8 	bl	8009e98 <RCCEx_PLL2_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cae:	e011      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cb4:	3328      	adds	r3, #40	@ 0x28
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f002 f99f 	bl	8009ffc <RCCEx_PLL3_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cc4:	e006      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ccc:	e002      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007cce:	bf00      	nop
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007cdc:	4b6e      	ldr	r3, [pc, #440]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cea:	4a6b      	ldr	r2, [pc, #428]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cf0:	e003      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007d14:	460b      	mov	r3, r1
 8007d16:	4313      	orrs	r3, r2
 8007d18:	d053      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d24:	d033      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007d26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d2a:	d82c      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007d2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d30:	d02f      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007d32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d36:	d826      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007d38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d3c:	d02b      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d42:	d820      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d48:	d012      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d4e:	d81a      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d022      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d58:	d115      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d5e:	3308      	adds	r3, #8
 8007d60:	2101      	movs	r1, #1
 8007d62:	4618      	mov	r0, r3
 8007d64:	f002 f898 	bl	8009e98 <RCCEx_PLL2_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e015      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d74:	3328      	adds	r3, #40	@ 0x28
 8007d76:	2101      	movs	r1, #1
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f002 f93f 	bl	8009ffc <RCCEx_PLL3_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d84:	e00a      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d8c:	e006      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007d8e:	bf00      	nop
 8007d90:	e004      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007d92:	bf00      	nop
 8007d94:	e002      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007d96:	bf00      	nop
 8007d98:	e000      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007da4:	4b3c      	ldr	r3, [pc, #240]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007db2:	4a39      	ldr	r2, [pc, #228]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007db8:	e003      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007dce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dd8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4313      	orrs	r3, r2
 8007de0:	d060      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007de6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007dea:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007dee:	d039      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007df0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007df4:	d832      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dfa:	d035      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e00:	d82c      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e06:	d031      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0c:	d826      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e12:	d02d      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007e14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e18:	d820      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e1e:	d012      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e24:	d81a      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d024      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e2e:	d115      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e34:	3308      	adds	r3, #8
 8007e36:	2101      	movs	r1, #1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f002 f82d 	bl	8009e98 <RCCEx_PLL2_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e44:	e017      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e4a:	3328      	adds	r3, #40	@ 0x28
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f002 f8d4 	bl	8009ffc <RCCEx_PLL3_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e5a:	e00c      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e62:	e008      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e64:	bf00      	nop
 8007e66:	e006      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e68:	bf00      	nop
 8007e6a:	e004      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e6c:	bf00      	nop
 8007e6e:	e002      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e70:	bf00      	nop
 8007e72:	e000      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10e      	bne.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e7e:	4b06      	ldr	r3, [pc, #24]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e8e:	4a02      	ldr	r2, [pc, #8]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e90:	430b      	orrs	r3, r1
 8007e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e94:	e006      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007e96:	bf00      	nop
 8007e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ea0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	d037      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ece:	d00e      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed4:	d816      	bhi.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ede:	d111      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee0:	4bc4      	ldr	r3, [pc, #784]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	4ac3      	ldr	r2, [pc, #780]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007eec:	e00f      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 ffce 	bl	8009e98 <RCCEx_PLL2_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f02:	e004      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f0a:	e000      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10a      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f16:	4bb7      	ldr	r3, [pc, #732]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f24:	4ab3      	ldr	r2, [pc, #716]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f26:	430b      	orrs	r3, r1
 8007f28:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f2a:	e003      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f44:	2300      	movs	r3, #0
 8007f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4313      	orrs	r3, r2
 8007f52:	d039      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d81c      	bhi.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007fa1 	.word	0x08007fa1
 8007f68:	08007f75 	.word	0x08007f75
 8007f6c:	08007f83 	.word	0x08007f83
 8007f70:	08007fa1 	.word	0x08007fa1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f74:	4b9f      	ldr	r3, [pc, #636]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f78:	4a9e      	ldr	r2, [pc, #632]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f80:	e00f      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f86:	3308      	adds	r3, #8
 8007f88:	2102      	movs	r1, #2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 ff84 	bl	8009e98 <RCCEx_PLL2_Config>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f96:	e004      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f9e:	e000      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007faa:	4b92      	ldr	r3, [pc, #584]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fae:	f023 0103 	bic.w	r1, r3, #3
 8007fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb8:	4a8e      	ldr	r2, [pc, #568]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fba:	430b      	orrs	r3, r1
 8007fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fbe:	e003      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007fde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	f000 8099 	beq.w	800811c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fea:	4b83      	ldr	r3, [pc, #524]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a82      	ldr	r2, [pc, #520]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ff6:	f7f9 fc9f 	bl	8001938 <HAL_GetTick>
 8007ffa:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ffe:	e00b      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008000:	f7f9 fc9a 	bl	8001938 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b64      	cmp	r3, #100	@ 0x64
 800800e:	d903      	bls.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008016:	e005      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008018:	4b77      	ldr	r3, [pc, #476]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0ed      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008024:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008028:	2b00      	cmp	r3, #0
 800802a:	d173      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800802c:	4b71      	ldr	r3, [pc, #452]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800802e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008038:	4053      	eors	r3, r2
 800803a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800803e:	2b00      	cmp	r3, #0
 8008040:	d015      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008042:	4b6c      	ldr	r3, [pc, #432]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800804a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800804e:	4b69      	ldr	r3, [pc, #420]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008052:	4a68      	ldr	r2, [pc, #416]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008058:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800805a:	4b66      	ldr	r3, [pc, #408]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800805c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805e:	4a65      	ldr	r2, [pc, #404]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008064:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008066:	4a63      	ldr	r2, [pc, #396]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800806e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008072:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800807a:	d118      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807c:	f7f9 fc5c 	bl	8001938 <HAL_GetTick>
 8008080:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008084:	e00d      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008086:	f7f9 fc57 	bl	8001938 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008090:	1ad2      	subs	r2, r2, r3
 8008092:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008096:	429a      	cmp	r2, r3
 8008098:	d903      	bls.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80080a0:	e005      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080a2:	4b54      	ldr	r3, [pc, #336]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0eb      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80080ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d129      	bne.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080c6:	d10e      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80080c8:	4b4a      	ldr	r3, [pc, #296]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80080d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080d8:	091a      	lsrs	r2, r3, #4
 80080da:	4b48      	ldr	r3, [pc, #288]	@ (80081fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80080dc:	4013      	ands	r3, r2
 80080de:	4a45      	ldr	r2, [pc, #276]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080e0:	430b      	orrs	r3, r1
 80080e2:	6113      	str	r3, [r2, #16]
 80080e4:	e005      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80080e6:	4b43      	ldr	r3, [pc, #268]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	4a42      	ldr	r2, [pc, #264]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80080f0:	6113      	str	r3, [r2, #16]
 80080f2:	4b40      	ldr	r3, [pc, #256]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80080f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008102:	4a3c      	ldr	r2, [pc, #240]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008104:	430b      	orrs	r3, r1
 8008106:	6713      	str	r3, [r2, #112]	@ 0x70
 8008108:	e008      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800810a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800810e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008112:	e003      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008114:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008118:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800811c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f002 0301 	and.w	r3, r2, #1
 8008128:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800812c:	2300      	movs	r3, #0
 800812e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008132:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008136:	460b      	mov	r3, r1
 8008138:	4313      	orrs	r3, r2
 800813a:	f000 8090 	beq.w	800825e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008146:	2b28      	cmp	r3, #40	@ 0x28
 8008148:	d870      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800814a:	a201      	add	r2, pc, #4	@ (adr r2, 8008150 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008235 	.word	0x08008235
 8008154:	0800822d 	.word	0x0800822d
 8008158:	0800822d 	.word	0x0800822d
 800815c:	0800822d 	.word	0x0800822d
 8008160:	0800822d 	.word	0x0800822d
 8008164:	0800822d 	.word	0x0800822d
 8008168:	0800822d 	.word	0x0800822d
 800816c:	0800822d 	.word	0x0800822d
 8008170:	08008201 	.word	0x08008201
 8008174:	0800822d 	.word	0x0800822d
 8008178:	0800822d 	.word	0x0800822d
 800817c:	0800822d 	.word	0x0800822d
 8008180:	0800822d 	.word	0x0800822d
 8008184:	0800822d 	.word	0x0800822d
 8008188:	0800822d 	.word	0x0800822d
 800818c:	0800822d 	.word	0x0800822d
 8008190:	08008217 	.word	0x08008217
 8008194:	0800822d 	.word	0x0800822d
 8008198:	0800822d 	.word	0x0800822d
 800819c:	0800822d 	.word	0x0800822d
 80081a0:	0800822d 	.word	0x0800822d
 80081a4:	0800822d 	.word	0x0800822d
 80081a8:	0800822d 	.word	0x0800822d
 80081ac:	0800822d 	.word	0x0800822d
 80081b0:	08008235 	.word	0x08008235
 80081b4:	0800822d 	.word	0x0800822d
 80081b8:	0800822d 	.word	0x0800822d
 80081bc:	0800822d 	.word	0x0800822d
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	0800822d 	.word	0x0800822d
 80081c8:	0800822d 	.word	0x0800822d
 80081cc:	0800822d 	.word	0x0800822d
 80081d0:	08008235 	.word	0x08008235
 80081d4:	0800822d 	.word	0x0800822d
 80081d8:	0800822d 	.word	0x0800822d
 80081dc:	0800822d 	.word	0x0800822d
 80081e0:	0800822d 	.word	0x0800822d
 80081e4:	0800822d 	.word	0x0800822d
 80081e8:	0800822d 	.word	0x0800822d
 80081ec:	0800822d 	.word	0x0800822d
 80081f0:	08008235 	.word	0x08008235
 80081f4:	58024400 	.word	0x58024400
 80081f8:	58024800 	.word	0x58024800
 80081fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008204:	3308      	adds	r3, #8
 8008206:	2101      	movs	r1, #1
 8008208:	4618      	mov	r0, r3
 800820a:	f001 fe45 	bl	8009e98 <RCCEx_PLL2_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008214:	e00f      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800821a:	3328      	adds	r3, #40	@ 0x28
 800821c:	2101      	movs	r1, #1
 800821e:	4618      	mov	r0, r3
 8008220:	f001 feec 	bl	8009ffc <RCCEx_PLL3_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800822a:	e004      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008232:	e000      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008236:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800823e:	4bc0      	ldr	r3, [pc, #768]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008242:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800824a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800824e:	4abc      	ldr	r2, [pc, #752]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008250:	430b      	orrs	r3, r1
 8008252:	6553      	str	r3, [r2, #84]	@ 0x54
 8008254:	e003      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008256:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800825a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800825e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f002 0302 	and.w	r3, r2, #2
 800826a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800826e:	2300      	movs	r3, #0
 8008270:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008274:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008278:	460b      	mov	r3, r1
 800827a:	4313      	orrs	r3, r2
 800827c:	d043      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800827e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008286:	2b05      	cmp	r3, #5
 8008288:	d824      	bhi.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082dd 	.word	0x080082dd
 8008294:	080082a9 	.word	0x080082a9
 8008298:	080082bf 	.word	0x080082bf
 800829c:	080082dd 	.word	0x080082dd
 80082a0:	080082dd 	.word	0x080082dd
 80082a4:	080082dd 	.word	0x080082dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ac:	3308      	adds	r3, #8
 80082ae:	2101      	movs	r1, #1
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fdf1 	bl	8009e98 <RCCEx_PLL2_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082bc:	e00f      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c2:	3328      	adds	r3, #40	@ 0x28
 80082c4:	2101      	movs	r1, #1
 80082c6:	4618      	mov	r0, r3
 80082c8:	f001 fe98 	bl	8009ffc <RCCEx_PLL3_Config>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082d2:	e004      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082da:	e000      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80082dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10b      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082e6:	4b96      	ldr	r3, [pc, #600]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80082e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ea:	f023 0107 	bic.w	r1, r3, #7
 80082ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f6:	4a92      	ldr	r2, [pc, #584]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80082f8:	430b      	orrs	r3, r1
 80082fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80082fc:	e003      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008302:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f002 0304 	and.w	r3, r2, #4
 8008312:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008316:	2300      	movs	r3, #0
 8008318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800831c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008320:	460b      	mov	r3, r1
 8008322:	4313      	orrs	r3, r2
 8008324:	d043      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800832e:	2b05      	cmp	r3, #5
 8008330:	d824      	bhi.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008332:	a201      	add	r2, pc, #4	@ (adr r2, 8008338 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	08008385 	.word	0x08008385
 800833c:	08008351 	.word	0x08008351
 8008340:	08008367 	.word	0x08008367
 8008344:	08008385 	.word	0x08008385
 8008348:	08008385 	.word	0x08008385
 800834c:	08008385 	.word	0x08008385
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008354:	3308      	adds	r3, #8
 8008356:	2101      	movs	r1, #1
 8008358:	4618      	mov	r0, r3
 800835a:	f001 fd9d 	bl	8009e98 <RCCEx_PLL2_Config>
 800835e:	4603      	mov	r3, r0
 8008360:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008364:	e00f      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800836a:	3328      	adds	r3, #40	@ 0x28
 800836c:	2101      	movs	r1, #1
 800836e:	4618      	mov	r0, r3
 8008370:	f001 fe44 	bl	8009ffc <RCCEx_PLL3_Config>
 8008374:	4603      	mov	r3, r0
 8008376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800837a:	e004      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008382:	e000      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008386:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800838e:	4b6c      	ldr	r3, [pc, #432]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008392:	f023 0107 	bic.w	r1, r3, #7
 8008396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800839e:	4a68      	ldr	r2, [pc, #416]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80083a0:	430b      	orrs	r3, r1
 80083a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80083a4:	e003      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f002 0320 	and.w	r3, r2, #32
 80083ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083be:	2300      	movs	r3, #0
 80083c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083c8:	460b      	mov	r3, r1
 80083ca:	4313      	orrs	r3, r2
 80083cc:	d055      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80083ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083da:	d033      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80083dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083e0:	d82c      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80083e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e6:	d02f      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80083e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ec:	d826      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80083ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083f2:	d02b      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80083f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083f8:	d820      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80083fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083fe:	d012      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008404:	d81a      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d022      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800840a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800840e:	d115      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008414:	3308      	adds	r3, #8
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f001 fd3d 	bl	8009e98 <RCCEx_PLL2_Config>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008424:	e015      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800842a:	3328      	adds	r3, #40	@ 0x28
 800842c:	2102      	movs	r1, #2
 800842e:	4618      	mov	r0, r3
 8008430:	f001 fde4 	bl	8009ffc <RCCEx_PLL3_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800843a:	e00a      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008442:	e006      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008444:	bf00      	nop
 8008446:	e004      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008448:	bf00      	nop
 800844a:	e002      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800844c:	bf00      	nop
 800844e:	e000      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008452:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800845a:	4b39      	ldr	r3, [pc, #228]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800845c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008466:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800846a:	4a35      	ldr	r2, [pc, #212]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800846c:	430b      	orrs	r3, r1
 800846e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008470:	e003      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008472:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008476:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800847a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800848a:	2300      	movs	r3, #0
 800848c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008490:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008494:	460b      	mov	r3, r1
 8008496:	4313      	orrs	r3, r2
 8008498:	d058      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800849a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800849e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80084a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084a6:	d033      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80084a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084ac:	d82c      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b2:	d02f      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80084b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b8:	d826      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80084ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084be:	d02b      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80084c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084c4:	d820      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80084c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084ca:	d012      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80084cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084d0:	d81a      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d022      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80084d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084da:	d115      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e0:	3308      	adds	r3, #8
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f001 fcd7 	bl	8009e98 <RCCEx_PLL2_Config>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084f0:	e015      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f6:	3328      	adds	r3, #40	@ 0x28
 80084f8:	2102      	movs	r1, #2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fd7e 	bl	8009ffc <RCCEx_PLL3_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008506:	e00a      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800850e:	e006      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008510:	bf00      	nop
 8008512:	e004      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008514:	bf00      	nop
 8008516:	e002      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008518:	bf00      	nop
 800851a:	e000      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800851c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800851e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10e      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008526:	4b06      	ldr	r3, [pc, #24]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800852a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800852e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008532:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008536:	4a02      	ldr	r2, [pc, #8]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008538:	430b      	orrs	r3, r1
 800853a:	6593      	str	r3, [r2, #88]	@ 0x58
 800853c:	e006      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800853e:	bf00      	nop
 8008540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008544:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008548:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800854c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800855c:	2300      	movs	r3, #0
 800855e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008562:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008566:	460b      	mov	r3, r1
 8008568:	4313      	orrs	r3, r2
 800856a:	d055      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800856c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008570:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008574:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008578:	d033      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800857a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800857e:	d82c      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008584:	d02f      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800858a:	d826      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800858c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008590:	d02b      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008592:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008596:	d820      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800859c:	d012      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800859e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085a2:	d81a      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d022      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80085a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ac:	d115      	bne.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b2:	3308      	adds	r3, #8
 80085b4:	2100      	movs	r1, #0
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 fc6e 	bl	8009e98 <RCCEx_PLL2_Config>
 80085bc:	4603      	mov	r3, r0
 80085be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085c2:	e015      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c8:	3328      	adds	r3, #40	@ 0x28
 80085ca:	2102      	movs	r1, #2
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 fd15 	bl	8009ffc <RCCEx_PLL3_Config>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085d8:	e00a      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085e0:	e006      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80085e2:	bf00      	nop
 80085e4:	e004      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80085e6:	bf00      	nop
 80085e8:	e002      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80085ea:	bf00      	nop
 80085ec:	e000      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80085ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10b      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085f8:	4ba1      	ldr	r3, [pc, #644]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80085fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008604:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008608:	4a9d      	ldr	r2, [pc, #628]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800860a:	430b      	orrs	r3, r1
 800860c:	6593      	str	r3, [r2, #88]	@ 0x58
 800860e:	e003      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008614:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f002 0308 	and.w	r3, r2, #8
 8008624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008628:	2300      	movs	r3, #0
 800862a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800862e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008632:	460b      	mov	r3, r1
 8008634:	4313      	orrs	r3, r2
 8008636:	d01e      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008644:	d10c      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800864a:	3328      	adds	r3, #40	@ 0x28
 800864c:	2102      	movs	r1, #2
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fcd4 	bl	8009ffc <RCCEx_PLL3_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008660:	4b87      	ldr	r3, [pc, #540]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008664:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800866c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008670:	4a83      	ldr	r2, [pc, #524]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008672:	430b      	orrs	r3, r1
 8008674:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f002 0310 	and.w	r3, r2, #16
 8008682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008686:	2300      	movs	r3, #0
 8008688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800868c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008690:	460b      	mov	r3, r1
 8008692:	4313      	orrs	r3, r2
 8008694:	d01e      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800869a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800869e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a2:	d10c      	bne.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a8:	3328      	adds	r3, #40	@ 0x28
 80086aa:	2102      	movs	r1, #2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f001 fca5 	bl	8009ffc <RCCEx_PLL3_Config>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086be:	4b70      	ldr	r3, [pc, #448]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086ce:	4a6c      	ldr	r2, [pc, #432]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086d0:	430b      	orrs	r3, r1
 80086d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086e4:	2300      	movs	r3, #0
 80086e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80086ee:	460b      	mov	r3, r1
 80086f0:	4313      	orrs	r3, r2
 80086f2:	d03e      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80086f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008700:	d022      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008706:	d81b      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800870c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008710:	d00b      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008712:	e015      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008718:	3308      	adds	r3, #8
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f001 fbbb 	bl	8009e98 <RCCEx_PLL2_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008728:	e00f      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800872a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800872e:	3328      	adds	r3, #40	@ 0x28
 8008730:	2102      	movs	r1, #2
 8008732:	4618      	mov	r0, r3
 8008734:	f001 fc62 	bl	8009ffc <RCCEx_PLL3_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800873e:	e004      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008746:	e000      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800874a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10b      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008752:	4b4b      	ldr	r3, [pc, #300]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008756:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800875a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800875e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008762:	4a47      	ldr	r2, [pc, #284]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008764:	430b      	orrs	r3, r1
 8008766:	6593      	str	r3, [r2, #88]	@ 0x58
 8008768:	e003      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800876e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800877e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008780:	2300      	movs	r3, #0
 8008782:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008784:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008788:	460b      	mov	r3, r1
 800878a:	4313      	orrs	r3, r2
 800878c:	d03b      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800878e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008796:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800879a:	d01f      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800879c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087a0:	d818      	bhi.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80087a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087a6:	d003      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80087a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087ac:	d007      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80087ae:	e011      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087b0:	4b33      	ldr	r3, [pc, #204]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b4:	4a32      	ldr	r2, [pc, #200]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80087bc:	e00f      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c2:	3328      	adds	r3, #40	@ 0x28
 80087c4:	2101      	movs	r1, #1
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 fc18 	bl	8009ffc <RCCEx_PLL3_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80087d2:	e004      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087da:	e000      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80087dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10b      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087e6:	4b26      	ldr	r3, [pc, #152]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80087ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	4a22      	ldr	r2, [pc, #136]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80087fc:	e003      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008802:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008812:	673b      	str	r3, [r7, #112]	@ 0x70
 8008814:	2300      	movs	r3, #0
 8008816:	677b      	str	r3, [r7, #116]	@ 0x74
 8008818:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800881c:	460b      	mov	r3, r1
 800881e:	4313      	orrs	r3, r2
 8008820:	d034      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800882c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008830:	d007      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008832:	e011      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008834:	4b12      	ldr	r3, [pc, #72]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008838:	4a11      	ldr	r2, [pc, #68]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800883a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800883e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008840:	e00e      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008846:	3308      	adds	r3, #8
 8008848:	2102      	movs	r1, #2
 800884a:	4618      	mov	r0, r3
 800884c:	f001 fb24 	bl	8009e98 <RCCEx_PLL2_Config>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008856:	e003      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800885e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10d      	bne.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008868:	4b05      	ldr	r3, [pc, #20]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800886a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800886c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008876:	4a02      	ldr	r2, [pc, #8]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008878:	430b      	orrs	r3, r1
 800887a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800887c:	e006      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800887e:	bf00      	nop
 8008880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008884:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008888:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800888c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800889a:	2300      	movs	r3, #0
 800889c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800889e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80088a2:	460b      	mov	r3, r1
 80088a4:	4313      	orrs	r3, r2
 80088a6:	d00c      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ac:	3328      	adds	r3, #40	@ 0x28
 80088ae:	2102      	movs	r1, #2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 fba3 	bl	8009ffc <RCCEx_PLL3_Config>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80088ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80088d0:	2300      	movs	r3, #0
 80088d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80088d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80088d8:	460b      	mov	r3, r1
 80088da:	4313      	orrs	r3, r2
 80088dc:	d038      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80088de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088ea:	d018      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80088ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088f0:	d811      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80088f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f6:	d014      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80088f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088fc:	d80b      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d011      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008906:	d106      	bne.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008908:	4bc3      	ldr	r3, [pc, #780]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	4ac2      	ldr	r2, [pc, #776]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800890e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008914:	e008      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800891c:	e004      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800891e:	bf00      	nop
 8008920:	e002      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008922:	bf00      	nop
 8008924:	e000      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008928:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10b      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008930:	4bb9      	ldr	r3, [pc, #740]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008934:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800893c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008940:	4ab5      	ldr	r2, [pc, #724]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008942:	430b      	orrs	r3, r1
 8008944:	6553      	str	r3, [r2, #84]	@ 0x54
 8008946:	e003      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008948:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800894c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800895c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800895e:	2300      	movs	r3, #0
 8008960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008962:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008966:	460b      	mov	r3, r1
 8008968:	4313      	orrs	r3, r2
 800896a:	d009      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800896c:	4baa      	ldr	r3, [pc, #680]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800896e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008970:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800897a:	4aa7      	ldr	r2, [pc, #668]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800897c:	430b      	orrs	r3, r1
 800897e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800898c:	653b      	str	r3, [r7, #80]	@ 0x50
 800898e:	2300      	movs	r3, #0
 8008990:	657b      	str	r3, [r7, #84]	@ 0x54
 8008992:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008996:	460b      	mov	r3, r1
 8008998:	4313      	orrs	r3, r2
 800899a:	d009      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800899c:	4b9e      	ldr	r3, [pc, #632]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800899e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80089a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089aa:	4a9b      	ldr	r2, [pc, #620]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089ac:	430b      	orrs	r3, r1
 80089ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80089b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80089bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089be:	2300      	movs	r3, #0
 80089c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80089c6:	460b      	mov	r3, r1
 80089c8:	4313      	orrs	r3, r2
 80089ca:	d009      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80089cc:	4b92      	ldr	r3, [pc, #584]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80089d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089da:	4a8f      	ldr	r2, [pc, #572]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089dc:	430b      	orrs	r3, r1
 80089de:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80089ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80089ee:	2300      	movs	r3, #0
 80089f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80089f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80089f6:	460b      	mov	r3, r1
 80089f8:	4313      	orrs	r3, r2
 80089fa:	d00e      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089fc:	4b86      	ldr	r3, [pc, #536]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	4a85      	ldr	r2, [pc, #532]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a06:	6113      	str	r3, [r2, #16]
 8008a08:	4b83      	ldr	r3, [pc, #524]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a0a:	6919      	ldr	r1, [r3, #16]
 8008a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a14:	4a80      	ldr	r2, [pc, #512]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a16:	430b      	orrs	r3, r1
 8008a18:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a28:	2300      	movs	r3, #0
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a30:	460b      	mov	r3, r1
 8008a32:	4313      	orrs	r3, r2
 8008a34:	d009      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a36:	4b78      	ldr	r3, [pc, #480]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a44:	4a74      	ldr	r2, [pc, #464]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a46:	430b      	orrs	r3, r1
 8008a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008a56:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a58:	2300      	movs	r3, #0
 8008a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a5c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d00a      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a66:	4b6c      	ldr	r3, [pc, #432]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a6a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a76:	4a68      	ldr	r2, [pc, #416]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	2100      	movs	r1, #0
 8008a86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008a92:	460b      	mov	r3, r1
 8008a94:	4313      	orrs	r3, r2
 8008a96:	d011      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 f9f9 	bl	8009e98 <RCCEx_PLL2_Config>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008aac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ab8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	6239      	str	r1, [r7, #32]
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ace:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	d011      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008adc:	3308      	adds	r3, #8
 8008ade:	2101      	movs	r1, #1
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 f9d9 	bl	8009e98 <RCCEx_PLL2_Config>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	2100      	movs	r1, #0
 8008b06:	61b9      	str	r1, [r7, #24]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	61fb      	str	r3, [r7, #28]
 8008b0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d011      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	2102      	movs	r1, #2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 f9b9 	bl	8009e98 <RCCEx_PLL2_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008b2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	2100      	movs	r1, #0
 8008b46:	6139      	str	r1, [r7, #16]
 8008b48:	f003 0308 	and.w	r3, r3, #8
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b52:	460b      	mov	r3, r1
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d011      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b5c:	3328      	adds	r3, #40	@ 0x28
 8008b5e:	2100      	movs	r1, #0
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 fa4b 	bl	8009ffc <RCCEx_PLL3_Config>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008b6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	2100      	movs	r1, #0
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008b92:	460b      	mov	r3, r1
 8008b94:	4313      	orrs	r3, r2
 8008b96:	d011      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b9c:	3328      	adds	r3, #40	@ 0x28
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f001 fa2b 	bl	8009ffc <RCCEx_PLL3_Config>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008bac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6039      	str	r1, [r7, #0]
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	607b      	str	r3, [r7, #4]
 8008bce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	d011      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bdc:	3328      	adds	r3, #40	@ 0x28
 8008bde:	2102      	movs	r1, #2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 fa0b 	bl	8009ffc <RCCEx_PLL3_Config>
 8008be6:	4603      	mov	r3, r0
 8008be8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bf8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008bfc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e000      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008c10:	46bd      	mov	sp, r7
 8008c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c16:	bf00      	nop
 8008c18:	58024400 	.word	0x58024400

08008c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b090      	sub	sp, #64	@ 0x40
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c2a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	f040 8094 	bne.w	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008c34:	4b97      	ldr	r3, [pc, #604]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	f200 8087 	bhi.w	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008c46:	a201      	add	r2, pc, #4	@ (adr r2, 8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c61 	.word	0x08008c61
 8008c50:	08008c89 	.word	0x08008c89
 8008c54:	08008cb1 	.word	0x08008cb1
 8008c58:	08008d4d 	.word	0x08008d4d
 8008c5c:	08008cd9 	.word	0x08008cd9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c60:	4b8c      	ldr	r3, [pc, #560]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c6c:	d108      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 ff68 	bl	8009b48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c7c:	f000 bc97 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c84:	f000 bc93 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c88:	4b82      	ldr	r3, [pc, #520]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c94:	d108      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c96:	f107 0318 	add.w	r3, r7, #24
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fcac 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca4:	f000 bc83 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cac:	f000 bc7f 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cb0:	4b78      	ldr	r3, [pc, #480]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cbc:	d108      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cbe:	f107 030c 	add.w	r3, r7, #12
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fdec 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ccc:	f000 bc6f 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd4:	f000 bc6b 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cd8:	4b6e      	ldr	r3, [pc, #440]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ce0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ce2:	4b6c      	ldr	r3, [pc, #432]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d10c      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cf4:	4b67      	ldr	r3, [pc, #412]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	08db      	lsrs	r3, r3, #3
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	4a66      	ldr	r2, [pc, #408]	@ (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008d00:	fa22 f303 	lsr.w	r3, r2, r3
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d06:	e01f      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d08:	4b62      	ldr	r3, [pc, #392]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d14:	d106      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d1c:	d102      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d22:	e011      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d24:	4b5b      	ldr	r3, [pc, #364]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d30:	d106      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d38:	d102      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d3a:	4b59      	ldr	r3, [pc, #356]	@ (8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d3e:	e003      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d44:	f000 bc33 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008d48:	f000 bc31 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d4c:	4b55      	ldr	r3, [pc, #340]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d50:	f000 bc2d 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d58:	f000 bc29 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d60:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008d64:	430b      	orrs	r3, r1
 8008d66:	f040 809f 	bne.w	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8008d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d6e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008d72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d7a:	d04d      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d82:	f200 8084 	bhi.w	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d88:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d8a:	d07d      	beq.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d90:	d87d      	bhi.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	2b80      	cmp	r3, #128	@ 0x80
 8008d96:	d02d      	beq.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	2b80      	cmp	r3, #128	@ 0x80
 8008d9c:	d877      	bhi.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da6:	2b40      	cmp	r3, #64	@ 0x40
 8008da8:	d012      	beq.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008daa:	e070      	b.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dac:	4b39      	ldr	r3, [pc, #228]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008db4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008db8:	d107      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fec2 	bl	8009b48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dc8:	e3f1      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dce:	e3ee      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dd0:	4b30      	ldr	r3, [pc, #192]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ddc:	d107      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dde:	f107 0318 	add.w	r3, r7, #24
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fc08 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dec:	e3df      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df2:	e3dc      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008df4:	4b27      	ldr	r3, [pc, #156]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e00:	d107      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e02:	f107 030c 	add.w	r3, r7, #12
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fd4a 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e10:	e3cd      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e16:	e3ca      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e18:	4b1e      	ldr	r3, [pc, #120]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e20:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e22:	4b1c      	ldr	r3, [pc, #112]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d10c      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e34:	4b17      	ldr	r3, [pc, #92]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	08db      	lsrs	r3, r3, #3
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	4a16      	ldr	r2, [pc, #88]	@ (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008e40:	fa22 f303 	lsr.w	r3, r2, r3
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e46:	e01e      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e48:	4b12      	ldr	r3, [pc, #72]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e54:	d106      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e5c:	d102      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e62:	e010      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e64:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e70:	d106      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e78:	d102      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e7e:	e002      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e84:	e393      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008e86:	e392      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e88:	4b06      	ldr	r3, [pc, #24]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e8c:	e38f      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e92:	e38c      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008e94:	58024400 	.word	0x58024400
 8008e98:	03d09000 	.word	0x03d09000
 8008e9c:	003d0900 	.word	0x003d0900
 8008ea0:	007a1200 	.word	0x007a1200
 8008ea4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	f040 809c 	bne.w	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008eb6:	4b9e      	ldr	r3, [pc, #632]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eba:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008ebe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ec6:	d054      	beq.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ece:	f200 808b 	bhi.w	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008ed8:	f000 8083 	beq.w	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ede:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008ee2:	f200 8081 	bhi.w	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eec:	d02f      	beq.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ef4:	d878      	bhi.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f02:	d012      	beq.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008f04:	e070      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f06:	4b8a      	ldr	r3, [pc, #552]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f12:	d107      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 fe15 	bl	8009b48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f22:	e344      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f28:	e341      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f2a:	4b81      	ldr	r3, [pc, #516]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f36:	d107      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f38:	f107 0318 	add.w	r3, r7, #24
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fb5b 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f46:	e332      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f4c:	e32f      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f4e:	4b78      	ldr	r3, [pc, #480]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f5a:	d107      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f5c:	f107 030c 	add.w	r3, r7, #12
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 fc9d 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f6a:	e320      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f70:	e31d      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f72:	4b6f      	ldr	r3, [pc, #444]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	d10c      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d109      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f8e:	4b68      	ldr	r3, [pc, #416]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	08db      	lsrs	r3, r3, #3
 8008f94:	f003 0303 	and.w	r3, r3, #3
 8008f98:	4a66      	ldr	r2, [pc, #408]	@ (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fa0:	e01e      	b.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fa2:	4b63      	ldr	r3, [pc, #396]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fae:	d106      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fb6:	d102      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fbc:	e010      	b.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fca:	d106      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fd2:	d102      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fd4:	4b59      	ldr	r3, [pc, #356]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd8:	e002      	b.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8008fde:	e2e6      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008fe0:	e2e5      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fe2:	4b57      	ldr	r3, [pc, #348]	@ (8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe6:	e2e2      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fec:	e2df      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	f040 80a7 	bne.w	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009000:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009004:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800900c:	d055      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800900e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009014:	f200 8096 	bhi.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800901e:	f000 8084 	beq.w	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8009022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009024:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009028:	f200 808c 	bhi.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009032:	d030      	beq.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8009034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800903a:	f200 8083 	bhi.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800903e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800904a:	d012      	beq.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800904c:	e07a      	b.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800904e:	4b38      	ldr	r3, [pc, #224]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009056:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800905a:	d107      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800905c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fd71 	bl	8009b48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800906a:	e2a0      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009070:	e29d      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009072:	4b2f      	ldr	r3, [pc, #188]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800907a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800907e:	d107      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009080:	f107 0318 	add.w	r3, r7, #24
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fab7 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800908e:	e28e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009094:	e28b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009096:	4b26      	ldr	r3, [pc, #152]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800909e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090a2:	d107      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090a4:	f107 030c 	add.w	r3, r7, #12
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 fbf9 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b2:	e27c      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090b8:	e279      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80090bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d10c      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80090d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d109      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090d6:	4b16      	ldr	r3, [pc, #88]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	08db      	lsrs	r3, r3, #3
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	4a14      	ldr	r2, [pc, #80]	@ (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090e8:	e01e      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090ea:	4b11      	ldr	r3, [pc, #68]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f6:	d106      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80090f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090fe:	d102      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009100:	4b0d      	ldr	r3, [pc, #52]	@ (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009104:	e010      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009106:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800910e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009112:	d106      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800911a:	d102      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800911c:	4b07      	ldr	r3, [pc, #28]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009126:	e242      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009128:	e241      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800912a:	4b05      	ldr	r3, [pc, #20]	@ (8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800912c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800912e:	e23e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009130:	58024400 	.word	0x58024400
 8009134:	03d09000 	.word	0x03d09000
 8009138:	003d0900 	.word	0x003d0900
 800913c:	007a1200 	.word	0x007a1200
 8009140:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009148:	e231      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800914a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800914e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009152:	430b      	orrs	r3, r1
 8009154:	f040 8085 	bne.w	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009158:	4b9c      	ldr	r3, [pc, #624]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800915a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800915c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009160:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009168:	d06b      	beq.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009170:	d874      	bhi.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009178:	d056      	beq.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009180:	d86c      	bhi.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009184:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009188:	d03b      	beq.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009190:	d864      	bhi.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009198:	d021      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091a0:	d85c      	bhi.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80091a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ae:	d004      	beq.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80091b0:	e054      	b.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80091b2:	f7fe fb49 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 80091b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091b8:	e1f9      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091ba:	4b84      	ldr	r3, [pc, #528]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091c6:	d107      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c8:	f107 0318 	add.w	r3, r7, #24
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fa13 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d6:	e1ea      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091dc:	e1e7      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091de:	4b7b      	ldr	r3, [pc, #492]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ea:	d107      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ec:	f107 030c 	add.w	r3, r7, #12
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fb55 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091fa:	e1d8      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009200:	e1d5      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009202:	4b72      	ldr	r3, [pc, #456]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b04      	cmp	r3, #4
 800920c:	d109      	bne.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800920e:	4b6f      	ldr	r3, [pc, #444]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	08db      	lsrs	r3, r3, #3
 8009214:	f003 0303 	and.w	r3, r3, #3
 8009218:	4a6d      	ldr	r2, [pc, #436]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800921a:	fa22 f303 	lsr.w	r3, r2, r3
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009220:	e1c5      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009226:	e1c2      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009228:	4b68      	ldr	r3, [pc, #416]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009234:	d102      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8009236:	4b67      	ldr	r3, [pc, #412]	@ (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800923a:	e1b8      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009240:	e1b5      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009242:	4b62      	ldr	r3, [pc, #392]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800924a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800924e:	d102      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8009250:	4b61      	ldr	r3, [pc, #388]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009254:	e1ab      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009256:	2300      	movs	r3, #0
 8009258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925a:	e1a8      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009260:	e1a5      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009266:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800926a:	430b      	orrs	r3, r1
 800926c:	d173      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800926e:	4b57      	ldr	r3, [pc, #348]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009272:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009276:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800927e:	d02f      	beq.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009286:	d863      	bhi.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800928e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009294:	d012      	beq.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009296:	e05b      	b.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009298:	4b4c      	ldr	r3, [pc, #304]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092a4:	d107      	bne.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a6:	f107 0318 	add.w	r3, r7, #24
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f9a4 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092b4:	e17b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ba:	e178      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092bc:	4b43      	ldr	r3, [pc, #268]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092c8:	d107      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ca:	f107 030c 	add.w	r3, r7, #12
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fae6 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d8:	e169      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092de:	e166      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092e0:	4b3a      	ldr	r3, [pc, #232]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092ea:	4b38      	ldr	r3, [pc, #224]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d10c      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80092f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d109      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092fc:	4b33      	ldr	r3, [pc, #204]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	08db      	lsrs	r3, r3, #3
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	4a32      	ldr	r2, [pc, #200]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009308:	fa22 f303 	lsr.w	r3, r2, r3
 800930c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800930e:	e01e      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009310:	4b2e      	ldr	r3, [pc, #184]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800931c:	d106      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800931e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009324:	d102      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009326:	4b2b      	ldr	r3, [pc, #172]	@ (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800932a:	e010      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800932c:	4b27      	ldr	r3, [pc, #156]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009338:	d106      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800933a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009340:	d102      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009342:	4b25      	ldr	r3, [pc, #148]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009346:	e002      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800934c:	e12f      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800934e:	e12e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009354:	e12b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800935a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800935e:	430b      	orrs	r3, r1
 8009360:	d13c      	bne.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009362:	4b1a      	ldr	r3, [pc, #104]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800936a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009378:	d012      	beq.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800937a:	e023      	b.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800937c:	4b13      	ldr	r3, [pc, #76]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009384:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009388:	d107      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800938a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fbda 	bl	8009b48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009398:	e109      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939e:	e106      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093a0:	4b0a      	ldr	r3, [pc, #40]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093ac:	d107      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ae:	f107 0318 	add.w	r3, r7, #24
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f920 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093bc:	e0f7      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c2:	e0f4      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c8:	e0f1      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80093ca:	bf00      	nop
 80093cc:	58024400 	.word	0x58024400
 80093d0:	03d09000 	.word	0x03d09000
 80093d4:	003d0900 	.word	0x003d0900
 80093d8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80093dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093e0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80093e4:	430b      	orrs	r3, r1
 80093e6:	f040 8091 	bne.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80093ea:	4b73      	ldr	r3, [pc, #460]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80093f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80093fa:	f000 8081 	beq.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80093fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009400:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009404:	d87f      	bhi.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800940c:	d06b      	beq.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800940e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009414:	d877      	bhi.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800941c:	d056      	beq.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800941e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009424:	d86f      	bhi.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009428:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800942c:	d03b      	beq.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800942e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009430:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009434:	d867      	bhi.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800943c:	d021      	beq.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800943e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009444:	d85f      	bhi.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800944c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009452:	d004      	beq.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009454:	e057      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009456:	f000 f8b9 	bl	80095cc <HAL_RCCEx_GetD3PCLK1Freq>
 800945a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800945c:	e0a7      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800945e:	4b56      	ldr	r3, [pc, #344]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800946a:	d107      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946c:	f107 0318 	add.w	r3, r7, #24
 8009470:	4618      	mov	r0, r3
 8009472:	f000 f8c1 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800947a:	e098      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009480:	e095      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009482:	4b4d      	ldr	r3, [pc, #308]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800948a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800948e:	d107      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009490:	f107 030c 	add.w	r3, r7, #12
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fa03 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949e:	e086      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a4:	e083      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094a6:	4b44      	ldr	r3, [pc, #272]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0304 	and.w	r3, r3, #4
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d109      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094b2:	4b41      	ldr	r3, [pc, #260]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	08db      	lsrs	r3, r3, #3
 80094b8:	f003 0303 	and.w	r3, r3, #3
 80094bc:	4a3f      	ldr	r2, [pc, #252]	@ (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80094be:	fa22 f303 	lsr.w	r3, r2, r3
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c4:	e073      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ca:	e070      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094cc:	4b3a      	ldr	r3, [pc, #232]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094d8:	d102      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80094da:	4b39      	ldr	r3, [pc, #228]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80094dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094de:	e066      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e4:	e063      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094e6:	4b34      	ldr	r3, [pc, #208]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094f2:	d102      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80094f4:	4b33      	ldr	r3, [pc, #204]	@ (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f8:	e059      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094fe:	e056      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009500:	4b31      	ldr	r3, [pc, #196]	@ (80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009504:	e053      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800950a:	e050      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800950c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009510:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009514:	430b      	orrs	r3, r1
 8009516:	d148      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009518:	4b27      	ldr	r3, [pc, #156]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800951a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800951c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009520:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009528:	d02a      	beq.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800952a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009530:	d838      	bhi.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	2b00      	cmp	r3, #0
 8009536:	d004      	beq.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800953e:	d00d      	beq.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009540:	e030      	b.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009542:	4b1d      	ldr	r3, [pc, #116]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800954a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800954e:	d102      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009550:	4b1c      	ldr	r3, [pc, #112]	@ (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009554:	e02b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800955a:	e028      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800955c:	4b16      	ldr	r3, [pc, #88]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009568:	d107      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800956a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800956e:	4618      	mov	r0, r3
 8009570:	f000 faea 	bl	8009b48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009578:	e019      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957e:	e016      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009580:	4b0d      	ldr	r3, [pc, #52]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009588:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800958c:	d107      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800958e:	f107 0318 	add.w	r3, r7, #24
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f830 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959c:	e007      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a2:	e004      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a8:	e001      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80095ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3740      	adds	r7, #64	@ 0x40
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	58024400 	.word	0x58024400
 80095bc:	03d09000 	.word	0x03d09000
 80095c0:	003d0900 	.word	0x003d0900
 80095c4:	007a1200 	.word	0x007a1200
 80095c8:	00bb8000 	.word	0x00bb8000

080095cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80095d0:	f7fe f90a 	bl	80077e8 <HAL_RCC_GetHCLKFreq>
 80095d4:	4602      	mov	r2, r0
 80095d6:	4b06      	ldr	r3, [pc, #24]	@ (80095f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	091b      	lsrs	r3, r3, #4
 80095dc:	f003 0307 	and.w	r3, r3, #7
 80095e0:	4904      	ldr	r1, [pc, #16]	@ (80095f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095e2:	5ccb      	ldrb	r3, [r1, r3]
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	58024400 	.word	0x58024400
 80095f4:	0800d960 	.word	0x0800d960

080095f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b089      	sub	sp, #36	@ 0x24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009600:	4ba1      	ldr	r3, [pc, #644]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800960a:	4b9f      	ldr	r3, [pc, #636]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800960c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960e:	0b1b      	lsrs	r3, r3, #12
 8009610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009614:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009616:	4b9c      	ldr	r3, [pc, #624]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961a:	091b      	lsrs	r3, r3, #4
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009622:	4b99      	ldr	r3, [pc, #612]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009626:	08db      	lsrs	r3, r3, #3
 8009628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	fb02 f303 	mul.w	r3, r2, r3
 8009632:	ee07 3a90 	vmov	s15, r3
 8009636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 8111 	beq.w	8009868 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	2b02      	cmp	r3, #2
 800964a:	f000 8083 	beq.w	8009754 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	2b02      	cmp	r3, #2
 8009652:	f200 80a1 	bhi.w	8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d056      	beq.n	8009710 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009662:	e099      	b.n	8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009664:	4b88      	ldr	r3, [pc, #544]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0320 	and.w	r3, r3, #32
 800966c:	2b00      	cmp	r3, #0
 800966e:	d02d      	beq.n	80096cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009670:	4b85      	ldr	r3, [pc, #532]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	08db      	lsrs	r3, r3, #3
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	4a84      	ldr	r2, [pc, #528]	@ (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800967c:	fa22 f303 	lsr.w	r3, r2, r3
 8009680:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	ee07 3a90 	vmov	s15, r3
 8009688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969a:	4b7b      	ldr	r3, [pc, #492]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800969c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800969e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096ca:	e087      	b.n	80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096de:	4b6a      	ldr	r3, [pc, #424]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800970e:	e065      	b.n	80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	ee07 3a90 	vmov	s15, r3
 8009716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800971e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009722:	4b59      	ldr	r3, [pc, #356]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009732:	ed97 6a03 	vldr	s12, [r7, #12]
 8009736:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800973a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800974a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009752:	e043      	b.n	80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	ee07 3a90 	vmov	s15, r3
 800975a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009766:	4b48      	ldr	r3, [pc, #288]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009776:	ed97 6a03 	vldr	s12, [r7, #12]
 800977a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800977e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800978a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800978e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009796:	e021      	b.n	80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	ee07 3a90 	vmov	s15, r3
 800979e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80097a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097aa:	4b37      	ldr	r3, [pc, #220]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b2:	ee07 3a90 	vmov	s15, r3
 80097b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80097be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80097dc:	4b2a      	ldr	r3, [pc, #168]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e0:	0a5b      	lsrs	r3, r3, #9
 80097e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80097fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009802:	ee17 2a90 	vmov	r2, s15
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800980a:	4b1f      	ldr	r3, [pc, #124]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800980c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980e:	0c1b      	lsrs	r3, r3, #16
 8009810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009814:	ee07 3a90 	vmov	s15, r3
 8009818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009824:	edd7 6a07 	vldr	s13, [r7, #28]
 8009828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800982c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009830:	ee17 2a90 	vmov	r2, s15
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009838:	4b13      	ldr	r3, [pc, #76]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983c:	0e1b      	lsrs	r3, r3, #24
 800983e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800984e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009852:	edd7 6a07 	vldr	s13, [r7, #28]
 8009856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800985a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800985e:	ee17 2a90 	vmov	r2, s15
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009866:	e008      	b.n	800987a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	609a      	str	r2, [r3, #8]
}
 800987a:	bf00      	nop
 800987c:	3724      	adds	r7, #36	@ 0x24
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	58024400 	.word	0x58024400
 800988c:	03d09000 	.word	0x03d09000
 8009890:	46000000 	.word	0x46000000
 8009894:	4c742400 	.word	0x4c742400
 8009898:	4a742400 	.word	0x4a742400
 800989c:	4af42400 	.word	0x4af42400

080098a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b089      	sub	sp, #36	@ 0x24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098a8:	4ba1      	ldr	r3, [pc, #644]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80098b2:	4b9f      	ldr	r3, [pc, #636]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b6:	0d1b      	lsrs	r3, r3, #20
 80098b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098be:	4b9c      	ldr	r3, [pc, #624]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c2:	0a1b      	lsrs	r3, r3, #8
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80098ca:	4b99      	ldr	r3, [pc, #612]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ce:	08db      	lsrs	r3, r3, #3
 80098d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	fb02 f303 	mul.w	r3, r2, r3
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8111 	beq.w	8009b10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	f000 8083 	beq.w	80099fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	f200 80a1 	bhi.w	8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d056      	beq.n	80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800990a:	e099      	b.n	8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800990c:	4b88      	ldr	r3, [pc, #544]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b00      	cmp	r3, #0
 8009916:	d02d      	beq.n	8009974 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009918:	4b85      	ldr	r3, [pc, #532]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	08db      	lsrs	r3, r3, #3
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	4a84      	ldr	r2, [pc, #528]	@ (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009924:	fa22 f303 	lsr.w	r3, r2, r3
 8009928:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	ee07 3a90 	vmov	s15, r3
 8009930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009942:	4b7b      	ldr	r3, [pc, #492]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009952:	ed97 6a03 	vldr	s12, [r7, #12]
 8009956:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800995a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009972:	e087      	b.n	8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009986:	4b6a      	ldr	r3, [pc, #424]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800998a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009996:	ed97 6a03 	vldr	s12, [r7, #12]
 800999a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800999e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099b6:	e065      	b.n	8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ca:	4b59      	ldr	r3, [pc, #356]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099da:	ed97 6a03 	vldr	s12, [r7, #12]
 80099de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099fa:	e043      	b.n	8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a0e:	4b48      	ldr	r3, [pc, #288]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a3e:	e021      	b.n	8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a52:	4b37      	ldr	r3, [pc, #220]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5a:	ee07 3a90 	vmov	s15, r3
 8009a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009a84:	4b2a      	ldr	r3, [pc, #168]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a88:	0a5b      	lsrs	r3, r3, #9
 8009a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aaa:	ee17 2a90 	vmov	r2, s15
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab6:	0c1b      	lsrs	r3, r3, #16
 8009ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009abc:	ee07 3a90 	vmov	s15, r3
 8009ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad8:	ee17 2a90 	vmov	r2, s15
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ae0:	4b13      	ldr	r3, [pc, #76]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae4:	0e1b      	lsrs	r3, r3, #24
 8009ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b06:	ee17 2a90 	vmov	r2, s15
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b0e:	e008      	b.n	8009b22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	609a      	str	r2, [r3, #8]
}
 8009b22:	bf00      	nop
 8009b24:	3724      	adds	r7, #36	@ 0x24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	58024400 	.word	0x58024400
 8009b34:	03d09000 	.word	0x03d09000
 8009b38:	46000000 	.word	0x46000000
 8009b3c:	4c742400 	.word	0x4c742400
 8009b40:	4a742400 	.word	0x4a742400
 8009b44:	4af42400 	.word	0x4af42400

08009b48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b089      	sub	sp, #36	@ 0x24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b50:	4ba0      	ldr	r3, [pc, #640]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009b5a:	4b9e      	ldr	r3, [pc, #632]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5e:	091b      	lsrs	r3, r3, #4
 8009b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b66:	4b9b      	ldr	r3, [pc, #620]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b70:	4b98      	ldr	r3, [pc, #608]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b74:	08db      	lsrs	r3, r3, #3
 8009b76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	fb02 f303 	mul.w	r3, r2, r3
 8009b80:	ee07 3a90 	vmov	s15, r3
 8009b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 8111 	beq.w	8009db6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	f000 8083 	beq.w	8009ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	f200 80a1 	bhi.w	8009ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d056      	beq.n	8009c5e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009bb0:	e099      	b.n	8009ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb2:	4b88      	ldr	r3, [pc, #544]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0320 	and.w	r3, r3, #32
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d02d      	beq.n	8009c1a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bbe:	4b85      	ldr	r3, [pc, #532]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	08db      	lsrs	r3, r3, #3
 8009bc4:	f003 0303 	and.w	r3, r3, #3
 8009bc8:	4a83      	ldr	r2, [pc, #524]	@ (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009bca:	fa22 f303 	lsr.w	r3, r2, r3
 8009bce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be8:	4b7a      	ldr	r3, [pc, #488]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf0:	ee07 3a90 	vmov	s15, r3
 8009bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bfc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009ddc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c14:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c18:	e087      	b.n	8009d2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	ee07 3a90 	vmov	s15, r3
 8009c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c24:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009de0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c2c:	4b69      	ldr	r3, [pc, #420]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c40:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009ddc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c5c:	e065      	b.n	8009d2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	ee07 3a90 	vmov	s15, r3
 8009c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c68:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009de4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c70:	4b58      	ldr	r3, [pc, #352]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c78:	ee07 3a90 	vmov	s15, r3
 8009c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c84:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009ddc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ca0:	e043      	b.n	8009d2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	ee07 3a90 	vmov	s15, r3
 8009ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb4:	4b47      	ldr	r3, [pc, #284]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009ddc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ce4:	e021      	b.n	8009d2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009de0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf8:	4b36      	ldr	r3, [pc, #216]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d00:	ee07 3a90 	vmov	s15, r3
 8009d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009ddc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2e:	0a5b      	lsrs	r3, r3, #9
 8009d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d50:	ee17 2a90 	vmov	r2, s15
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009d58:	4b1e      	ldr	r3, [pc, #120]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d5c:	0c1b      	lsrs	r3, r3, #16
 8009d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7e:	ee17 2a90 	vmov	r2, s15
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009d86:	4b13      	ldr	r3, [pc, #76]	@ (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d8a:	0e1b      	lsrs	r3, r3, #24
 8009d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d90:	ee07 3a90 	vmov	s15, r3
 8009d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dac:	ee17 2a90 	vmov	r2, s15
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009db4:	e008      	b.n	8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	609a      	str	r2, [r3, #8]
}
 8009dc8:	bf00      	nop
 8009dca:	3724      	adds	r7, #36	@ 0x24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	58024400 	.word	0x58024400
 8009dd8:	03d09000 	.word	0x03d09000
 8009ddc:	46000000 	.word	0x46000000
 8009de0:	4c742400 	.word	0x4c742400
 8009de4:	4a742400 	.word	0x4a742400
 8009de8:	4af42400 	.word	0x4af42400

08009dec <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009df4:	4b26      	ldr	r3, [pc, #152]	@ (8009e90 <HAL_RCCEx_CRSConfig+0xa4>)
 8009df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009dfa:	4a25      	ldr	r2, [pc, #148]	@ (8009e90 <HAL_RCCEx_CRSConfig+0xa4>)
 8009dfc:	f043 0302 	orr.w	r3, r3, #2
 8009e00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8009e04:	4b22      	ldr	r3, [pc, #136]	@ (8009e90 <HAL_RCCEx_CRSConfig+0xa4>)
 8009e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e0a:	4a21      	ldr	r2, [pc, #132]	@ (8009e90 <HAL_RCCEx_CRSConfig+0xa4>)
 8009e0c:	f023 0302 	bic.w	r3, r3, #2
 8009e10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8009e14:	f7f7 fd9c 	bl	8001950 <HAL_GetREVID>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d80b      	bhi.n	8009e3a <HAL_RCCEx_CRSConfig+0x4e>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e2a:	d106      	bne.n	8009e3a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	e008      	b.n	8009e4c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	431a      	orrs	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	041b      	lsls	r3, r3, #16
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8009e62:	4a0c      	ldr	r2, [pc, #48]	@ (8009e94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009e68:	4b0a      	ldr	r3, [pc, #40]	@ (8009e94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	021b      	lsls	r3, r3, #8
 8009e76:	4907      	ldr	r1, [pc, #28]	@ (8009e94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009e7c:	4b05      	ldr	r3, [pc, #20]	@ (8009e94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a04      	ldr	r2, [pc, #16]	@ (8009e94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009e82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009e86:	6013      	str	r3, [r2, #0]
}
 8009e88:	bf00      	nop
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	58024400 	.word	0x58024400
 8009e94:	40008400 	.word	0x40008400

08009e98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ea6:	4b53      	ldr	r3, [pc, #332]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eaa:	f003 0303 	and.w	r3, r3, #3
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d101      	bne.n	8009eb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e099      	b.n	8009fea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a4e      	ldr	r2, [pc, #312]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009ebc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ec2:	f7f7 fd39 	bl	8001938 <HAL_GetTick>
 8009ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ec8:	e008      	b.n	8009edc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eca:	f7f7 fd35 	bl	8001938 <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d901      	bls.n	8009edc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e086      	b.n	8009fea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009edc:	4b45      	ldr	r3, [pc, #276]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1f0      	bne.n	8009eca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ee8:	4b42      	ldr	r3, [pc, #264]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	031b      	lsls	r3, r3, #12
 8009ef6:	493f      	ldr	r1, [pc, #252]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	628b      	str	r3, [r1, #40]	@ 0x28
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	025b      	lsls	r3, r3, #9
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	431a      	orrs	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	061b      	lsls	r3, r3, #24
 8009f28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f2c:	4931      	ldr	r1, [pc, #196]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f32:	4b30      	ldr	r3, [pc, #192]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	492d      	ldr	r1, [pc, #180]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f40:	4313      	orrs	r3, r2
 8009f42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f44:	4b2b      	ldr	r3, [pc, #172]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f48:	f023 0220 	bic.w	r2, r3, #32
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	4928      	ldr	r1, [pc, #160]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f56:	4b27      	ldr	r3, [pc, #156]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5a:	4a26      	ldr	r2, [pc, #152]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f5c:	f023 0310 	bic.w	r3, r3, #16
 8009f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f62:	4b24      	ldr	r3, [pc, #144]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f66:	4b24      	ldr	r3, [pc, #144]	@ (8009ff8 <RCCEx_PLL2_Config+0x160>)
 8009f68:	4013      	ands	r3, r2
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	69d2      	ldr	r2, [r2, #28]
 8009f6e:	00d2      	lsls	r2, r2, #3
 8009f70:	4920      	ldr	r1, [pc, #128]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f72:	4313      	orrs	r3, r2
 8009f74:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f76:	4b1f      	ldr	r3, [pc, #124]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f7c:	f043 0310 	orr.w	r3, r3, #16
 8009f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d106      	bne.n	8009f96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f88:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8c:	4a19      	ldr	r2, [pc, #100]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009f94:	e00f      	b.n	8009fb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d106      	bne.n	8009faa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f9c:	4b15      	ldr	r3, [pc, #84]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa0:	4a14      	ldr	r2, [pc, #80]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fa8:	e005      	b.n	8009fb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009faa:	4b12      	ldr	r3, [pc, #72]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fae:	4a11      	ldr	r2, [pc, #68]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009fb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a0e      	ldr	r2, [pc, #56]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009fbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fc2:	f7f7 fcb9 	bl	8001938 <HAL_GetTick>
 8009fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fc8:	e008      	b.n	8009fdc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fca:	f7f7 fcb5 	bl	8001938 <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d901      	bls.n	8009fdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e006      	b.n	8009fea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fdc:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <RCCEx_PLL2_Config+0x15c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0f0      	beq.n	8009fca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	58024400 	.word	0x58024400
 8009ff8:	ffff0007 	.word	0xffff0007

08009ffc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a00a:	4b53      	ldr	r3, [pc, #332]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b03      	cmp	r3, #3
 800a014:	d101      	bne.n	800a01a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e099      	b.n	800a14e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a01a:	4b4f      	ldr	r3, [pc, #316]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a4e      	ldr	r2, [pc, #312]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a026:	f7f7 fc87 	bl	8001938 <HAL_GetTick>
 800a02a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a02c:	e008      	b.n	800a040 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a02e:	f7f7 fc83 	bl	8001938 <HAL_GetTick>
 800a032:	4602      	mov	r2, r0
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d901      	bls.n	800a040 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e086      	b.n	800a14e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a040:	4b45      	ldr	r3, [pc, #276]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1f0      	bne.n	800a02e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a04c:	4b42      	ldr	r3, [pc, #264]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a050:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	051b      	lsls	r3, r3, #20
 800a05a:	493f      	ldr	r1, [pc, #252]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	3b01      	subs	r3, #1
 800a066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	3b01      	subs	r3, #1
 800a070:	025b      	lsls	r3, r3, #9
 800a072:	b29b      	uxth	r3, r3
 800a074:	431a      	orrs	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a082:	431a      	orrs	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	3b01      	subs	r3, #1
 800a08a:	061b      	lsls	r3, r3, #24
 800a08c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a090:	4931      	ldr	r1, [pc, #196]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a092:	4313      	orrs	r3, r2
 800a094:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a096:	4b30      	ldr	r3, [pc, #192]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	492d      	ldr	r1, [pc, #180]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a0a8:	4b2b      	ldr	r3, [pc, #172]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	4928      	ldr	r1, [pc, #160]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0ba:	4b27      	ldr	r3, [pc, #156]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0be:	4a26      	ldr	r2, [pc, #152]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0c6:	4b24      	ldr	r3, [pc, #144]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0ca:	4b24      	ldr	r3, [pc, #144]	@ (800a15c <RCCEx_PLL3_Config+0x160>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	69d2      	ldr	r2, [r2, #28]
 800a0d2:	00d2      	lsls	r2, r2, #3
 800a0d4:	4920      	ldr	r1, [pc, #128]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a0da:	4b1f      	ldr	r3, [pc, #124]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0de:	4a1e      	ldr	r2, [pc, #120]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f0:	4a19      	ldr	r2, [pc, #100]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a0f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a0f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0f8:	e00f      	b.n	800a11a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d106      	bne.n	800a10e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a100:	4b15      	ldr	r3, [pc, #84]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a104:	4a14      	ldr	r2, [pc, #80]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a106:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a10a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a10c:	e005      	b.n	800a11a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a10e:	4b12      	ldr	r3, [pc, #72]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a112:	4a11      	ldr	r2, [pc, #68]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a114:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a118:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a11a:	4b0f      	ldr	r3, [pc, #60]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a0e      	ldr	r2, [pc, #56]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a126:	f7f7 fc07 	bl	8001938 <HAL_GetTick>
 800a12a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a12c:	e008      	b.n	800a140 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a12e:	f7f7 fc03 	bl	8001938 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d901      	bls.n	800a140 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e006      	b.n	800a14e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a140:	4b05      	ldr	r3, [pc, #20]	@ (800a158 <RCCEx_PLL3_Config+0x15c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0f0      	beq.n	800a12e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	58024400 	.word	0x58024400
 800a15c:	ffff0007 	.word	0xffff0007

0800a160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e049      	b.n	800a206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7f7 f9ca 	bl	8001520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	4610      	mov	r0, r2
 800a1a0:	f000 f92e 	bl	800a400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_TIM_ConfigClockSource+0x1c>
 800a228:	2302      	movs	r3, #2
 800a22a:	e0dc      	b.n	800a3e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	4b6a      	ldr	r3, [pc, #424]	@ (800a3f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a248:	4013      	ands	r3, r2
 800a24a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a64      	ldr	r2, [pc, #400]	@ (800a3f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a262:	4293      	cmp	r3, r2
 800a264:	f000 80a9 	beq.w	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a268:	4a62      	ldr	r2, [pc, #392]	@ (800a3f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	f200 80ae 	bhi.w	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a270:	4a61      	ldr	r2, [pc, #388]	@ (800a3f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a272:	4293      	cmp	r3, r2
 800a274:	f000 80a1 	beq.w	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a278:	4a5f      	ldr	r2, [pc, #380]	@ (800a3f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	f200 80a6 	bhi.w	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a280:	4a5e      	ldr	r2, [pc, #376]	@ (800a3fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800a282:	4293      	cmp	r3, r2
 800a284:	f000 8099 	beq.w	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a288:	4a5c      	ldr	r2, [pc, #368]	@ (800a3fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	f200 809e 	bhi.w	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a290:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a294:	f000 8091 	beq.w	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a298:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a29c:	f200 8096 	bhi.w	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2a4:	f000 8089 	beq.w	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a2a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2ac:	f200 808e 	bhi.w	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b4:	d03e      	beq.n	800a334 <HAL_TIM_ConfigClockSource+0x124>
 800a2b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2ba:	f200 8087 	bhi.w	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c2:	f000 8086 	beq.w	800a3d2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a2c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2ca:	d87f      	bhi.n	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2cc:	2b70      	cmp	r3, #112	@ 0x70
 800a2ce:	d01a      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0xf6>
 800a2d0:	2b70      	cmp	r3, #112	@ 0x70
 800a2d2:	d87b      	bhi.n	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2d4:	2b60      	cmp	r3, #96	@ 0x60
 800a2d6:	d050      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x16a>
 800a2d8:	2b60      	cmp	r3, #96	@ 0x60
 800a2da:	d877      	bhi.n	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2dc:	2b50      	cmp	r3, #80	@ 0x50
 800a2de:	d03c      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x14a>
 800a2e0:	2b50      	cmp	r3, #80	@ 0x50
 800a2e2:	d873      	bhi.n	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2e4:	2b40      	cmp	r3, #64	@ 0x40
 800a2e6:	d058      	beq.n	800a39a <HAL_TIM_ConfigClockSource+0x18a>
 800a2e8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ea:	d86f      	bhi.n	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2ec:	2b30      	cmp	r3, #48	@ 0x30
 800a2ee:	d064      	beq.n	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a2f0:	2b30      	cmp	r3, #48	@ 0x30
 800a2f2:	d86b      	bhi.n	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2f4:	2b20      	cmp	r3, #32
 800a2f6:	d060      	beq.n	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	d867      	bhi.n	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d05c      	beq.n	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a300:	2b10      	cmp	r3, #16
 800a302:	d05a      	beq.n	800a3ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a304:	e062      	b.n	800a3cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a316:	f000 f997 	bl	800a648 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a328:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	609a      	str	r2, [r3, #8]
      break;
 800a332:	e04f      	b.n	800a3d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a344:	f000 f980 	bl	800a648 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689a      	ldr	r2, [r3, #8]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a356:	609a      	str	r2, [r3, #8]
      break;
 800a358:	e03c      	b.n	800a3d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a366:	461a      	mov	r2, r3
 800a368:	f000 f8f0 	bl	800a54c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2150      	movs	r1, #80	@ 0x50
 800a372:	4618      	mov	r0, r3
 800a374:	f000 f94a 	bl	800a60c <TIM_ITRx_SetConfig>
      break;
 800a378:	e02c      	b.n	800a3d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a386:	461a      	mov	r2, r3
 800a388:	f000 f90f 	bl	800a5aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2160      	movs	r1, #96	@ 0x60
 800a392:	4618      	mov	r0, r3
 800a394:	f000 f93a 	bl	800a60c <TIM_ITRx_SetConfig>
      break;
 800a398:	e01c      	b.n	800a3d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f000 f8d0 	bl	800a54c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2140      	movs	r1, #64	@ 0x40
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 f92a 	bl	800a60c <TIM_ITRx_SetConfig>
      break;
 800a3b8:	e00c      	b.n	800a3d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f000 f921 	bl	800a60c <TIM_ITRx_SetConfig>
      break;
 800a3ca:	e003      	b.n	800a3d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a3d0:	e000      	b.n	800a3d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a3d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	ffceff88 	.word	0xffceff88
 800a3f4:	00100040 	.word	0x00100040
 800a3f8:	00100030 	.word	0x00100030
 800a3fc:	00100020 	.word	0x00100020

0800a400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a46      	ldr	r2, [pc, #280]	@ (800a52c <TIM_Base_SetConfig+0x12c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d013      	beq.n	800a440 <TIM_Base_SetConfig+0x40>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a41e:	d00f      	beq.n	800a440 <TIM_Base_SetConfig+0x40>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a43      	ldr	r2, [pc, #268]	@ (800a530 <TIM_Base_SetConfig+0x130>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d00b      	beq.n	800a440 <TIM_Base_SetConfig+0x40>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a42      	ldr	r2, [pc, #264]	@ (800a534 <TIM_Base_SetConfig+0x134>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d007      	beq.n	800a440 <TIM_Base_SetConfig+0x40>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a41      	ldr	r2, [pc, #260]	@ (800a538 <TIM_Base_SetConfig+0x138>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d003      	beq.n	800a440 <TIM_Base_SetConfig+0x40>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a40      	ldr	r2, [pc, #256]	@ (800a53c <TIM_Base_SetConfig+0x13c>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d108      	bne.n	800a452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a35      	ldr	r2, [pc, #212]	@ (800a52c <TIM_Base_SetConfig+0x12c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d01f      	beq.n	800a49a <TIM_Base_SetConfig+0x9a>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a460:	d01b      	beq.n	800a49a <TIM_Base_SetConfig+0x9a>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a32      	ldr	r2, [pc, #200]	@ (800a530 <TIM_Base_SetConfig+0x130>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d017      	beq.n	800a49a <TIM_Base_SetConfig+0x9a>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a31      	ldr	r2, [pc, #196]	@ (800a534 <TIM_Base_SetConfig+0x134>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d013      	beq.n	800a49a <TIM_Base_SetConfig+0x9a>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a30      	ldr	r2, [pc, #192]	@ (800a538 <TIM_Base_SetConfig+0x138>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d00f      	beq.n	800a49a <TIM_Base_SetConfig+0x9a>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a2f      	ldr	r2, [pc, #188]	@ (800a53c <TIM_Base_SetConfig+0x13c>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d00b      	beq.n	800a49a <TIM_Base_SetConfig+0x9a>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a2e      	ldr	r2, [pc, #184]	@ (800a540 <TIM_Base_SetConfig+0x140>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d007      	beq.n	800a49a <TIM_Base_SetConfig+0x9a>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a2d      	ldr	r2, [pc, #180]	@ (800a544 <TIM_Base_SetConfig+0x144>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d003      	beq.n	800a49a <TIM_Base_SetConfig+0x9a>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a2c      	ldr	r2, [pc, #176]	@ (800a548 <TIM_Base_SetConfig+0x148>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d108      	bne.n	800a4ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a16      	ldr	r2, [pc, #88]	@ (800a52c <TIM_Base_SetConfig+0x12c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d00f      	beq.n	800a4f8 <TIM_Base_SetConfig+0xf8>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a18      	ldr	r2, [pc, #96]	@ (800a53c <TIM_Base_SetConfig+0x13c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d00b      	beq.n	800a4f8 <TIM_Base_SetConfig+0xf8>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a17      	ldr	r2, [pc, #92]	@ (800a540 <TIM_Base_SetConfig+0x140>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d007      	beq.n	800a4f8 <TIM_Base_SetConfig+0xf8>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a16      	ldr	r2, [pc, #88]	@ (800a544 <TIM_Base_SetConfig+0x144>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d003      	beq.n	800a4f8 <TIM_Base_SetConfig+0xf8>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a15      	ldr	r2, [pc, #84]	@ (800a548 <TIM_Base_SetConfig+0x148>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d103      	bne.n	800a500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d105      	bne.n	800a51e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	f023 0201 	bic.w	r2, r3, #1
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	611a      	str	r2, [r3, #16]
  }
}
 800a51e:	bf00      	nop
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	40010000 	.word	0x40010000
 800a530:	40000400 	.word	0x40000400
 800a534:	40000800 	.word	0x40000800
 800a538:	40000c00 	.word	0x40000c00
 800a53c:	40010400 	.word	0x40010400
 800a540:	40014000 	.word	0x40014000
 800a544:	40014400 	.word	0x40014400
 800a548:	40014800 	.word	0x40014800

0800a54c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	f023 0201 	bic.w	r2, r3, #1
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	011b      	lsls	r3, r3, #4
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	4313      	orrs	r3, r2
 800a580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f023 030a 	bic.w	r3, r3, #10
 800a588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	4313      	orrs	r3, r2
 800a590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	621a      	str	r2, [r3, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b087      	sub	sp, #28
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	f023 0210 	bic.w	r2, r3, #16
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	031b      	lsls	r3, r3, #12
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	621a      	str	r2, [r3, #32]
}
 800a5fe:	bf00      	nop
 800a600:	371c      	adds	r7, #28
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
	...

0800a60c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	4b09      	ldr	r3, [pc, #36]	@ (800a644 <TIM_ITRx_SetConfig+0x38>)
 800a620:	4013      	ands	r3, r2
 800a622:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4313      	orrs	r3, r2
 800a62a:	f043 0307 	orr.w	r3, r3, #7
 800a62e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	609a      	str	r2, [r3, #8]
}
 800a636:	bf00      	nop
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	ffcfff8f 	.word	0xffcfff8f

0800a648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	021a      	lsls	r2, r3, #8
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	431a      	orrs	r2, r3
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	4313      	orrs	r3, r2
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	4313      	orrs	r3, r2
 800a674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	609a      	str	r2, [r3, #8]
}
 800a67c:	bf00      	nop
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d101      	bne.n	800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a69c:	2302      	movs	r3, #2
 800a69e:	e06d      	b.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a30      	ldr	r2, [pc, #192]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d004      	beq.n	800a6d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a2f      	ldr	r2, [pc, #188]	@ (800a78c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d108      	bne.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a20      	ldr	r2, [pc, #128]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d022      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a712:	d01d      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a1d      	ldr	r2, [pc, #116]	@ (800a790 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d018      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a1c      	ldr	r2, [pc, #112]	@ (800a794 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d013      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a1a      	ldr	r2, [pc, #104]	@ (800a798 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d00e      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a15      	ldr	r2, [pc, #84]	@ (800a78c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d009      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a16      	ldr	r2, [pc, #88]	@ (800a79c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d004      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a15      	ldr	r2, [pc, #84]	@ (800a7a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d10c      	bne.n	800a76a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a756:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	4313      	orrs	r3, r2
 800a760:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	40010000 	.word	0x40010000
 800a78c:	40010400 	.word	0x40010400
 800a790:	40000400 	.word	0x40000400
 800a794:	40000800 	.word	0x40000800
 800a798:	40000c00 	.word	0x40000c00
 800a79c:	40001800 	.word	0x40001800
 800a7a0:	40014000 	.word	0x40014000

0800a7a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e042      	b.n	800a83c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d106      	bne.n	800a7ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7f6 fec9 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2224      	movs	r2, #36	@ 0x24
 800a7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f022 0201 	bic.w	r2, r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f001 fa6e 	bl	800bcd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fbff 	bl	800aff8 <UART_SetConfig>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e01b      	b.n	800a83c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	685a      	ldr	r2, [r3, #4]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	689a      	ldr	r2, [r3, #8]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0201 	orr.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 faed 	bl	800be14 <UART_CheckIdleState>
 800a83a:	4603      	mov	r3, r0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b0ba      	sub	sp, #232	@ 0xe8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a86a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a86e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a872:	4013      	ands	r3, r2
 800a874:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d11b      	bne.n	800a8b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a884:	f003 0320 	and.w	r3, r3, #32
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d015      	beq.n	800a8b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a890:	f003 0320 	and.w	r3, r3, #32
 800a894:	2b00      	cmp	r3, #0
 800a896:	d105      	bne.n	800a8a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a89c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d009      	beq.n	800a8b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 8377 	beq.w	800af9c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	4798      	blx	r3
      }
      return;
 800a8b6:	e371      	b.n	800af9c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a8b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 8123 	beq.w	800ab08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a8c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a8c6:	4b8d      	ldr	r3, [pc, #564]	@ (800aafc <HAL_UART_IRQHandler+0x2b8>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d106      	bne.n	800a8dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a8ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a8d2:	4b8b      	ldr	r3, [pc, #556]	@ (800ab00 <HAL_UART_IRQHandler+0x2bc>)
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 8116 	beq.w	800ab08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d011      	beq.n	800a90c <HAL_UART_IRQHandler+0xc8>
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00b      	beq.n	800a90c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a902:	f043 0201 	orr.w	r2, r3, #1
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d011      	beq.n	800a93c <HAL_UART_IRQHandler+0xf8>
 800a918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a91c:	f003 0301 	and.w	r3, r3, #1
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00b      	beq.n	800a93c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2202      	movs	r2, #2
 800a92a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a932:	f043 0204 	orr.w	r2, r3, #4
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b00      	cmp	r3, #0
 800a946:	d011      	beq.n	800a96c <HAL_UART_IRQHandler+0x128>
 800a948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2204      	movs	r2, #4
 800a95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a962:	f043 0202 	orr.w	r2, r3, #2
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a970:	f003 0308 	and.w	r3, r3, #8
 800a974:	2b00      	cmp	r3, #0
 800a976:	d017      	beq.n	800a9a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a97c:	f003 0320 	and.w	r3, r3, #32
 800a980:	2b00      	cmp	r3, #0
 800a982:	d105      	bne.n	800a990 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a984:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a988:	4b5c      	ldr	r3, [pc, #368]	@ (800aafc <HAL_UART_IRQHandler+0x2b8>)
 800a98a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2208      	movs	r2, #8
 800a996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a99e:	f043 0208 	orr.w	r2, r3, #8
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d012      	beq.n	800a9da <HAL_UART_IRQHandler+0x196>
 800a9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00c      	beq.n	800a9da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9d0:	f043 0220 	orr.w	r2, r3, #32
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 82dd 	beq.w	800afa0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d013      	beq.n	800aa1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f6:	f003 0320 	and.w	r3, r3, #32
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d105      	bne.n	800aa0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a9fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d007      	beq.n	800aa1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa2e:	2b40      	cmp	r3, #64	@ 0x40
 800aa30:	d005      	beq.n	800aa3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d054      	beq.n	800aae8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 fb00 	bl	800c044 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa4e:	2b40      	cmp	r3, #64	@ 0x40
 800aa50:	d146      	bne.n	800aae0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3308      	adds	r3, #8
 800aa58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa60:	e853 3f00 	ldrex	r3, [r3]
 800aa64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aa68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3308      	adds	r3, #8
 800aa7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aa7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800aa82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aa8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aa8e:	e841 2300 	strex	r3, r2, [r1]
 800aa92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aa96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1d9      	bne.n	800aa52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d017      	beq.n	800aad8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaae:	4a15      	ldr	r2, [pc, #84]	@ (800ab04 <HAL_UART_IRQHandler+0x2c0>)
 800aab0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f9 fecd 	bl	8004858 <HAL_DMA_Abort_IT>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d019      	beq.n	800aaf8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aad2:	4610      	mov	r0, r2
 800aad4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aad6:	e00f      	b.n	800aaf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fa77 	bl	800afcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aade:	e00b      	b.n	800aaf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fa73 	bl	800afcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae6:	e007      	b.n	800aaf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fa6f 	bl	800afcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aaf6:	e253      	b.n	800afa0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaf8:	bf00      	nop
    return;
 800aafa:	e251      	b.n	800afa0 <HAL_UART_IRQHandler+0x75c>
 800aafc:	10000001 	.word	0x10000001
 800ab00:	04000120 	.word	0x04000120
 800ab04:	0800c111 	.word	0x0800c111

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	f040 81e7 	bne.w	800aee0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab16:	f003 0310 	and.w	r3, r3, #16
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 81e0 	beq.w	800aee0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab24:	f003 0310 	and.w	r3, r3, #16
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 81d9 	beq.w	800aee0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2210      	movs	r2, #16
 800ab34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab40:	2b40      	cmp	r3, #64	@ 0x40
 800ab42:	f040 8151 	bne.w	800ade8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a96      	ldr	r2, [pc, #600]	@ (800ada8 <HAL_UART_IRQHandler+0x564>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d068      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a93      	ldr	r2, [pc, #588]	@ (800adac <HAL_UART_IRQHandler+0x568>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d061      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a91      	ldr	r2, [pc, #580]	@ (800adb0 <HAL_UART_IRQHandler+0x56c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d05a      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a8e      	ldr	r2, [pc, #568]	@ (800adb4 <HAL_UART_IRQHandler+0x570>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d053      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a8c      	ldr	r2, [pc, #560]	@ (800adb8 <HAL_UART_IRQHandler+0x574>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d04c      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a89      	ldr	r2, [pc, #548]	@ (800adbc <HAL_UART_IRQHandler+0x578>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d045      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a87      	ldr	r2, [pc, #540]	@ (800adc0 <HAL_UART_IRQHandler+0x57c>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d03e      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a84      	ldr	r2, [pc, #528]	@ (800adc4 <HAL_UART_IRQHandler+0x580>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d037      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a82      	ldr	r2, [pc, #520]	@ (800adc8 <HAL_UART_IRQHandler+0x584>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d030      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a7f      	ldr	r2, [pc, #508]	@ (800adcc <HAL_UART_IRQHandler+0x588>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d029      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a7d      	ldr	r2, [pc, #500]	@ (800add0 <HAL_UART_IRQHandler+0x58c>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d022      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a7a      	ldr	r2, [pc, #488]	@ (800add4 <HAL_UART_IRQHandler+0x590>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d01b      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a78      	ldr	r2, [pc, #480]	@ (800add8 <HAL_UART_IRQHandler+0x594>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d014      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a75      	ldr	r2, [pc, #468]	@ (800addc <HAL_UART_IRQHandler+0x598>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00d      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a73      	ldr	r2, [pc, #460]	@ (800ade0 <HAL_UART_IRQHandler+0x59c>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d006      	beq.n	800ac26 <HAL_UART_IRQHandler+0x3e2>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a70      	ldr	r2, [pc, #448]	@ (800ade4 <HAL_UART_IRQHandler+0x5a0>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d106      	bne.n	800ac34 <HAL_UART_IRQHandler+0x3f0>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	e005      	b.n	800ac40 <HAL_UART_IRQHandler+0x3fc>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 81ab 	beq.w	800afa4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	f080 81a3 	bcs.w	800afa4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac74:	f000 8087 	beq.w	800ad86 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac84:	e853 3f00 	ldrex	r3, [r3]
 800ac88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ac8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aca6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800acae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800acba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1da      	bne.n	800ac78 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800acd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acd4:	f023 0301 	bic.w	r3, r3, #1
 800acd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3308      	adds	r3, #8
 800ace2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ace6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800acea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800acee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800acf2:	e841 2300 	strex	r3, r2, [r1]
 800acf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800acf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1e1      	bne.n	800acc2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad08:	e853 3f00 	ldrex	r3, [r3]
 800ad0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad2a:	e841 2300 	strex	r3, r2, [r1]
 800ad2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1e3      	bne.n	800acfe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2220      	movs	r2, #32
 800ad3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad54:	f023 0310 	bic.w	r3, r3, #16
 800ad58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	461a      	mov	r2, r3
 800ad62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad66:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad6e:	e841 2300 	strex	r3, r2, [r1]
 800ad72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1e4      	bne.n	800ad44 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7f9 fa4b 	bl	800421c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	4619      	mov	r1, r3
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f91d 	bl	800afe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ada6:	e0fd      	b.n	800afa4 <HAL_UART_IRQHandler+0x760>
 800ada8:	40020010 	.word	0x40020010
 800adac:	40020028 	.word	0x40020028
 800adb0:	40020040 	.word	0x40020040
 800adb4:	40020058 	.word	0x40020058
 800adb8:	40020070 	.word	0x40020070
 800adbc:	40020088 	.word	0x40020088
 800adc0:	400200a0 	.word	0x400200a0
 800adc4:	400200b8 	.word	0x400200b8
 800adc8:	40020410 	.word	0x40020410
 800adcc:	40020428 	.word	0x40020428
 800add0:	40020440 	.word	0x40020440
 800add4:	40020458 	.word	0x40020458
 800add8:	40020470 	.word	0x40020470
 800addc:	40020488 	.word	0x40020488
 800ade0:	400204a0 	.word	0x400204a0
 800ade4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80cf 	beq.w	800afa8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ae0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 80ca 	beq.w	800afa8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae36:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e4      	bne.n	800ae14 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3308      	adds	r3, #8
 800ae50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	623b      	str	r3, [r7, #32]
   return(result);
 800ae5a:	6a3a      	ldr	r2, [r7, #32]
 800ae5c:	4b55      	ldr	r3, [pc, #340]	@ (800afb4 <HAL_UART_IRQHandler+0x770>)
 800ae5e:	4013      	ands	r3, r2
 800ae60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3308      	adds	r3, #8
 800ae6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae76:	e841 2300 	strex	r3, r2, [r1]
 800ae7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1e3      	bne.n	800ae4a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2220      	movs	r2, #32
 800ae86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f023 0310 	bic.w	r3, r3, #16
 800aeaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aeb8:	61fb      	str	r3, [r7, #28]
 800aeba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	69b9      	ldr	r1, [r7, #24]
 800aebe:	69fa      	ldr	r2, [r7, #28]
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	617b      	str	r3, [r7, #20]
   return(result);
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e4      	bne.n	800ae96 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2202      	movs	r2, #2
 800aed0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aed6:	4619      	mov	r1, r3
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f881 	bl	800afe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aede:	e063      	b.n	800afa8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00e      	beq.n	800af0a <HAL_UART_IRQHandler+0x6c6>
 800aeec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d008      	beq.n	800af0a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800af00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f001 f945 	bl	800c192 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af08:	e051      	b.n	800afae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800af0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af12:	2b00      	cmp	r3, #0
 800af14:	d014      	beq.n	800af40 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800af16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d105      	bne.n	800af2e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800af22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d008      	beq.n	800af40 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af32:	2b00      	cmp	r3, #0
 800af34:	d03a      	beq.n	800afac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	4798      	blx	r3
    }
    return;
 800af3e:	e035      	b.n	800afac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d009      	beq.n	800af60 <HAL_UART_IRQHandler+0x71c>
 800af4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 f8ef 	bl	800c13c <UART_EndTransmit_IT>
    return;
 800af5e:	e026      	b.n	800afae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800af60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d009      	beq.n	800af80 <HAL_UART_IRQHandler+0x73c>
 800af6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d003      	beq.n	800af80 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f001 f91e 	bl	800c1ba <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af7e:	e016      	b.n	800afae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800af80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d010      	beq.n	800afae <HAL_UART_IRQHandler+0x76a>
 800af8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af90:	2b00      	cmp	r3, #0
 800af92:	da0c      	bge.n	800afae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 f906 	bl	800c1a6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af9a:	e008      	b.n	800afae <HAL_UART_IRQHandler+0x76a>
      return;
 800af9c:	bf00      	nop
 800af9e:	e006      	b.n	800afae <HAL_UART_IRQHandler+0x76a>
    return;
 800afa0:	bf00      	nop
 800afa2:	e004      	b.n	800afae <HAL_UART_IRQHandler+0x76a>
      return;
 800afa4:	bf00      	nop
 800afa6:	e002      	b.n	800afae <HAL_UART_IRQHandler+0x76a>
      return;
 800afa8:	bf00      	nop
 800afaa:	e000      	b.n	800afae <HAL_UART_IRQHandler+0x76a>
    return;
 800afac:	bf00      	nop
  }
}
 800afae:	37e8      	adds	r7, #232	@ 0xe8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	effffffe 	.word	0xeffffffe

0800afb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800affc:	b092      	sub	sp, #72	@ 0x48
 800affe:	af00      	add	r7, sp, #0
 800b000:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	431a      	orrs	r2, r3
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	431a      	orrs	r2, r3
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	69db      	ldr	r3, [r3, #28]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	4bbe      	ldr	r3, [pc, #760]	@ (800b320 <UART_SetConfig+0x328>)
 800b028:	4013      	ands	r3, r2
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	6812      	ldr	r2, [r2, #0]
 800b02e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b030:	430b      	orrs	r3, r1
 800b032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4ab3      	ldr	r2, [pc, #716]	@ (800b324 <UART_SetConfig+0x32c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d004      	beq.n	800b064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b060:	4313      	orrs	r3, r2
 800b062:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	4baf      	ldr	r3, [pc, #700]	@ (800b328 <UART_SetConfig+0x330>)
 800b06c:	4013      	ands	r3, r2
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	6812      	ldr	r2, [r2, #0]
 800b072:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b074:	430b      	orrs	r3, r1
 800b076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07e:	f023 010f 	bic.w	r1, r3, #15
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	430a      	orrs	r2, r1
 800b08c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4aa6      	ldr	r2, [pc, #664]	@ (800b32c <UART_SetConfig+0x334>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d177      	bne.n	800b188 <UART_SetConfig+0x190>
 800b098:	4ba5      	ldr	r3, [pc, #660]	@ (800b330 <UART_SetConfig+0x338>)
 800b09a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b09c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0a0:	2b28      	cmp	r3, #40	@ 0x28
 800b0a2:	d86d      	bhi.n	800b180 <UART_SetConfig+0x188>
 800b0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b0ac <UART_SetConfig+0xb4>)
 800b0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0aa:	bf00      	nop
 800b0ac:	0800b151 	.word	0x0800b151
 800b0b0:	0800b181 	.word	0x0800b181
 800b0b4:	0800b181 	.word	0x0800b181
 800b0b8:	0800b181 	.word	0x0800b181
 800b0bc:	0800b181 	.word	0x0800b181
 800b0c0:	0800b181 	.word	0x0800b181
 800b0c4:	0800b181 	.word	0x0800b181
 800b0c8:	0800b181 	.word	0x0800b181
 800b0cc:	0800b159 	.word	0x0800b159
 800b0d0:	0800b181 	.word	0x0800b181
 800b0d4:	0800b181 	.word	0x0800b181
 800b0d8:	0800b181 	.word	0x0800b181
 800b0dc:	0800b181 	.word	0x0800b181
 800b0e0:	0800b181 	.word	0x0800b181
 800b0e4:	0800b181 	.word	0x0800b181
 800b0e8:	0800b181 	.word	0x0800b181
 800b0ec:	0800b161 	.word	0x0800b161
 800b0f0:	0800b181 	.word	0x0800b181
 800b0f4:	0800b181 	.word	0x0800b181
 800b0f8:	0800b181 	.word	0x0800b181
 800b0fc:	0800b181 	.word	0x0800b181
 800b100:	0800b181 	.word	0x0800b181
 800b104:	0800b181 	.word	0x0800b181
 800b108:	0800b181 	.word	0x0800b181
 800b10c:	0800b169 	.word	0x0800b169
 800b110:	0800b181 	.word	0x0800b181
 800b114:	0800b181 	.word	0x0800b181
 800b118:	0800b181 	.word	0x0800b181
 800b11c:	0800b181 	.word	0x0800b181
 800b120:	0800b181 	.word	0x0800b181
 800b124:	0800b181 	.word	0x0800b181
 800b128:	0800b181 	.word	0x0800b181
 800b12c:	0800b171 	.word	0x0800b171
 800b130:	0800b181 	.word	0x0800b181
 800b134:	0800b181 	.word	0x0800b181
 800b138:	0800b181 	.word	0x0800b181
 800b13c:	0800b181 	.word	0x0800b181
 800b140:	0800b181 	.word	0x0800b181
 800b144:	0800b181 	.word	0x0800b181
 800b148:	0800b181 	.word	0x0800b181
 800b14c:	0800b179 	.word	0x0800b179
 800b150:	2301      	movs	r3, #1
 800b152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b156:	e326      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b158:	2304      	movs	r3, #4
 800b15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b15e:	e322      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b160:	2308      	movs	r3, #8
 800b162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b166:	e31e      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b168:	2310      	movs	r3, #16
 800b16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b16e:	e31a      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b170:	2320      	movs	r3, #32
 800b172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b176:	e316      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b178:	2340      	movs	r3, #64	@ 0x40
 800b17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b17e:	e312      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b180:	2380      	movs	r3, #128	@ 0x80
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b186:	e30e      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a69      	ldr	r2, [pc, #420]	@ (800b334 <UART_SetConfig+0x33c>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d130      	bne.n	800b1f4 <UART_SetConfig+0x1fc>
 800b192:	4b67      	ldr	r3, [pc, #412]	@ (800b330 <UART_SetConfig+0x338>)
 800b194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b05      	cmp	r3, #5
 800b19c:	d826      	bhi.n	800b1ec <UART_SetConfig+0x1f4>
 800b19e:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a4 <UART_SetConfig+0x1ac>)
 800b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a4:	0800b1bd 	.word	0x0800b1bd
 800b1a8:	0800b1c5 	.word	0x0800b1c5
 800b1ac:	0800b1cd 	.word	0x0800b1cd
 800b1b0:	0800b1d5 	.word	0x0800b1d5
 800b1b4:	0800b1dd 	.word	0x0800b1dd
 800b1b8:	0800b1e5 	.word	0x0800b1e5
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1c2:	e2f0      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b1c4:	2304      	movs	r3, #4
 800b1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ca:	e2ec      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b1cc:	2308      	movs	r3, #8
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1d2:	e2e8      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1da:	e2e4      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b1dc:	2320      	movs	r3, #32
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1e2:	e2e0      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b1e4:	2340      	movs	r3, #64	@ 0x40
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ea:	e2dc      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b1ec:	2380      	movs	r3, #128	@ 0x80
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f2:	e2d8      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a4f      	ldr	r2, [pc, #316]	@ (800b338 <UART_SetConfig+0x340>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d130      	bne.n	800b260 <UART_SetConfig+0x268>
 800b1fe:	4b4c      	ldr	r3, [pc, #304]	@ (800b330 <UART_SetConfig+0x338>)
 800b200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b202:	f003 0307 	and.w	r3, r3, #7
 800b206:	2b05      	cmp	r3, #5
 800b208:	d826      	bhi.n	800b258 <UART_SetConfig+0x260>
 800b20a:	a201      	add	r2, pc, #4	@ (adr r2, 800b210 <UART_SetConfig+0x218>)
 800b20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b210:	0800b229 	.word	0x0800b229
 800b214:	0800b231 	.word	0x0800b231
 800b218:	0800b239 	.word	0x0800b239
 800b21c:	0800b241 	.word	0x0800b241
 800b220:	0800b249 	.word	0x0800b249
 800b224:	0800b251 	.word	0x0800b251
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b22e:	e2ba      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b230:	2304      	movs	r3, #4
 800b232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b236:	e2b6      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b238:	2308      	movs	r3, #8
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23e:	e2b2      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b240:	2310      	movs	r3, #16
 800b242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b246:	e2ae      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b248:	2320      	movs	r3, #32
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b24e:	e2aa      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b250:	2340      	movs	r3, #64	@ 0x40
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b256:	e2a6      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b258:	2380      	movs	r3, #128	@ 0x80
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25e:	e2a2      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a35      	ldr	r2, [pc, #212]	@ (800b33c <UART_SetConfig+0x344>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d130      	bne.n	800b2cc <UART_SetConfig+0x2d4>
 800b26a:	4b31      	ldr	r3, [pc, #196]	@ (800b330 <UART_SetConfig+0x338>)
 800b26c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b26e:	f003 0307 	and.w	r3, r3, #7
 800b272:	2b05      	cmp	r3, #5
 800b274:	d826      	bhi.n	800b2c4 <UART_SetConfig+0x2cc>
 800b276:	a201      	add	r2, pc, #4	@ (adr r2, 800b27c <UART_SetConfig+0x284>)
 800b278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27c:	0800b295 	.word	0x0800b295
 800b280:	0800b29d 	.word	0x0800b29d
 800b284:	0800b2a5 	.word	0x0800b2a5
 800b288:	0800b2ad 	.word	0x0800b2ad
 800b28c:	0800b2b5 	.word	0x0800b2b5
 800b290:	0800b2bd 	.word	0x0800b2bd
 800b294:	2300      	movs	r3, #0
 800b296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b29a:	e284      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b29c:	2304      	movs	r3, #4
 800b29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2a2:	e280      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b2a4:	2308      	movs	r3, #8
 800b2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2aa:	e27c      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b2ac:	2310      	movs	r3, #16
 800b2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2b2:	e278      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b2b4:	2320      	movs	r3, #32
 800b2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ba:	e274      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b2bc:	2340      	movs	r3, #64	@ 0x40
 800b2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2c2:	e270      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b2c4:	2380      	movs	r3, #128	@ 0x80
 800b2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ca:	e26c      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a1b      	ldr	r2, [pc, #108]	@ (800b340 <UART_SetConfig+0x348>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d142      	bne.n	800b35c <UART_SetConfig+0x364>
 800b2d6:	4b16      	ldr	r3, [pc, #88]	@ (800b330 <UART_SetConfig+0x338>)
 800b2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2da:	f003 0307 	and.w	r3, r3, #7
 800b2de:	2b05      	cmp	r3, #5
 800b2e0:	d838      	bhi.n	800b354 <UART_SetConfig+0x35c>
 800b2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e8 <UART_SetConfig+0x2f0>)
 800b2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e8:	0800b301 	.word	0x0800b301
 800b2ec:	0800b309 	.word	0x0800b309
 800b2f0:	0800b311 	.word	0x0800b311
 800b2f4:	0800b319 	.word	0x0800b319
 800b2f8:	0800b345 	.word	0x0800b345
 800b2fc:	0800b34d 	.word	0x0800b34d
 800b300:	2300      	movs	r3, #0
 800b302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b306:	e24e      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b308:	2304      	movs	r3, #4
 800b30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b30e:	e24a      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b310:	2308      	movs	r3, #8
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b316:	e246      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b318:	2310      	movs	r3, #16
 800b31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b31e:	e242      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b320:	cfff69f3 	.word	0xcfff69f3
 800b324:	58000c00 	.word	0x58000c00
 800b328:	11fff4ff 	.word	0x11fff4ff
 800b32c:	40011000 	.word	0x40011000
 800b330:	58024400 	.word	0x58024400
 800b334:	40004400 	.word	0x40004400
 800b338:	40004800 	.word	0x40004800
 800b33c:	40004c00 	.word	0x40004c00
 800b340:	40005000 	.word	0x40005000
 800b344:	2320      	movs	r3, #32
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34a:	e22c      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b34c:	2340      	movs	r3, #64	@ 0x40
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b352:	e228      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b354:	2380      	movs	r3, #128	@ 0x80
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b35a:	e224      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4ab1      	ldr	r2, [pc, #708]	@ (800b628 <UART_SetConfig+0x630>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d176      	bne.n	800b454 <UART_SetConfig+0x45c>
 800b366:	4bb1      	ldr	r3, [pc, #708]	@ (800b62c <UART_SetConfig+0x634>)
 800b368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b36a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b36e:	2b28      	cmp	r3, #40	@ 0x28
 800b370:	d86c      	bhi.n	800b44c <UART_SetConfig+0x454>
 800b372:	a201      	add	r2, pc, #4	@ (adr r2, 800b378 <UART_SetConfig+0x380>)
 800b374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b378:	0800b41d 	.word	0x0800b41d
 800b37c:	0800b44d 	.word	0x0800b44d
 800b380:	0800b44d 	.word	0x0800b44d
 800b384:	0800b44d 	.word	0x0800b44d
 800b388:	0800b44d 	.word	0x0800b44d
 800b38c:	0800b44d 	.word	0x0800b44d
 800b390:	0800b44d 	.word	0x0800b44d
 800b394:	0800b44d 	.word	0x0800b44d
 800b398:	0800b425 	.word	0x0800b425
 800b39c:	0800b44d 	.word	0x0800b44d
 800b3a0:	0800b44d 	.word	0x0800b44d
 800b3a4:	0800b44d 	.word	0x0800b44d
 800b3a8:	0800b44d 	.word	0x0800b44d
 800b3ac:	0800b44d 	.word	0x0800b44d
 800b3b0:	0800b44d 	.word	0x0800b44d
 800b3b4:	0800b44d 	.word	0x0800b44d
 800b3b8:	0800b42d 	.word	0x0800b42d
 800b3bc:	0800b44d 	.word	0x0800b44d
 800b3c0:	0800b44d 	.word	0x0800b44d
 800b3c4:	0800b44d 	.word	0x0800b44d
 800b3c8:	0800b44d 	.word	0x0800b44d
 800b3cc:	0800b44d 	.word	0x0800b44d
 800b3d0:	0800b44d 	.word	0x0800b44d
 800b3d4:	0800b44d 	.word	0x0800b44d
 800b3d8:	0800b435 	.word	0x0800b435
 800b3dc:	0800b44d 	.word	0x0800b44d
 800b3e0:	0800b44d 	.word	0x0800b44d
 800b3e4:	0800b44d 	.word	0x0800b44d
 800b3e8:	0800b44d 	.word	0x0800b44d
 800b3ec:	0800b44d 	.word	0x0800b44d
 800b3f0:	0800b44d 	.word	0x0800b44d
 800b3f4:	0800b44d 	.word	0x0800b44d
 800b3f8:	0800b43d 	.word	0x0800b43d
 800b3fc:	0800b44d 	.word	0x0800b44d
 800b400:	0800b44d 	.word	0x0800b44d
 800b404:	0800b44d 	.word	0x0800b44d
 800b408:	0800b44d 	.word	0x0800b44d
 800b40c:	0800b44d 	.word	0x0800b44d
 800b410:	0800b44d 	.word	0x0800b44d
 800b414:	0800b44d 	.word	0x0800b44d
 800b418:	0800b445 	.word	0x0800b445
 800b41c:	2301      	movs	r3, #1
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b422:	e1c0      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b424:	2304      	movs	r3, #4
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42a:	e1bc      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b42c:	2308      	movs	r3, #8
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b432:	e1b8      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b434:	2310      	movs	r3, #16
 800b436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b43a:	e1b4      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b43c:	2320      	movs	r3, #32
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b442:	e1b0      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b444:	2340      	movs	r3, #64	@ 0x40
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b44a:	e1ac      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b44c:	2380      	movs	r3, #128	@ 0x80
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b452:	e1a8      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a75      	ldr	r2, [pc, #468]	@ (800b630 <UART_SetConfig+0x638>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d130      	bne.n	800b4c0 <UART_SetConfig+0x4c8>
 800b45e:	4b73      	ldr	r3, [pc, #460]	@ (800b62c <UART_SetConfig+0x634>)
 800b460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b462:	f003 0307 	and.w	r3, r3, #7
 800b466:	2b05      	cmp	r3, #5
 800b468:	d826      	bhi.n	800b4b8 <UART_SetConfig+0x4c0>
 800b46a:	a201      	add	r2, pc, #4	@ (adr r2, 800b470 <UART_SetConfig+0x478>)
 800b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b470:	0800b489 	.word	0x0800b489
 800b474:	0800b491 	.word	0x0800b491
 800b478:	0800b499 	.word	0x0800b499
 800b47c:	0800b4a1 	.word	0x0800b4a1
 800b480:	0800b4a9 	.word	0x0800b4a9
 800b484:	0800b4b1 	.word	0x0800b4b1
 800b488:	2300      	movs	r3, #0
 800b48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48e:	e18a      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b490:	2304      	movs	r3, #4
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b496:	e186      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b498:	2308      	movs	r3, #8
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49e:	e182      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b4a0:	2310      	movs	r3, #16
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a6:	e17e      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ae:	e17a      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b4b0:	2340      	movs	r3, #64	@ 0x40
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b6:	e176      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b4b8:	2380      	movs	r3, #128	@ 0x80
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4be:	e172      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a5b      	ldr	r2, [pc, #364]	@ (800b634 <UART_SetConfig+0x63c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d130      	bne.n	800b52c <UART_SetConfig+0x534>
 800b4ca:	4b58      	ldr	r3, [pc, #352]	@ (800b62c <UART_SetConfig+0x634>)
 800b4cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	2b05      	cmp	r3, #5
 800b4d4:	d826      	bhi.n	800b524 <UART_SetConfig+0x52c>
 800b4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4dc <UART_SetConfig+0x4e4>)
 800b4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4dc:	0800b4f5 	.word	0x0800b4f5
 800b4e0:	0800b4fd 	.word	0x0800b4fd
 800b4e4:	0800b505 	.word	0x0800b505
 800b4e8:	0800b50d 	.word	0x0800b50d
 800b4ec:	0800b515 	.word	0x0800b515
 800b4f0:	0800b51d 	.word	0x0800b51d
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fa:	e154      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b4fc:	2304      	movs	r3, #4
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b502:	e150      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b504:	2308      	movs	r3, #8
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50a:	e14c      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b50c:	2310      	movs	r3, #16
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b512:	e148      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b514:	2320      	movs	r3, #32
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b51a:	e144      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b51c:	2340      	movs	r3, #64	@ 0x40
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b522:	e140      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b524:	2380      	movs	r3, #128	@ 0x80
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e13c      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a41      	ldr	r2, [pc, #260]	@ (800b638 <UART_SetConfig+0x640>)
 800b532:	4293      	cmp	r3, r2
 800b534:	f040 8082 	bne.w	800b63c <UART_SetConfig+0x644>
 800b538:	4b3c      	ldr	r3, [pc, #240]	@ (800b62c <UART_SetConfig+0x634>)
 800b53a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b53c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b540:	2b28      	cmp	r3, #40	@ 0x28
 800b542:	d86d      	bhi.n	800b620 <UART_SetConfig+0x628>
 800b544:	a201      	add	r2, pc, #4	@ (adr r2, 800b54c <UART_SetConfig+0x554>)
 800b546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54a:	bf00      	nop
 800b54c:	0800b5f1 	.word	0x0800b5f1
 800b550:	0800b621 	.word	0x0800b621
 800b554:	0800b621 	.word	0x0800b621
 800b558:	0800b621 	.word	0x0800b621
 800b55c:	0800b621 	.word	0x0800b621
 800b560:	0800b621 	.word	0x0800b621
 800b564:	0800b621 	.word	0x0800b621
 800b568:	0800b621 	.word	0x0800b621
 800b56c:	0800b5f9 	.word	0x0800b5f9
 800b570:	0800b621 	.word	0x0800b621
 800b574:	0800b621 	.word	0x0800b621
 800b578:	0800b621 	.word	0x0800b621
 800b57c:	0800b621 	.word	0x0800b621
 800b580:	0800b621 	.word	0x0800b621
 800b584:	0800b621 	.word	0x0800b621
 800b588:	0800b621 	.word	0x0800b621
 800b58c:	0800b601 	.word	0x0800b601
 800b590:	0800b621 	.word	0x0800b621
 800b594:	0800b621 	.word	0x0800b621
 800b598:	0800b621 	.word	0x0800b621
 800b59c:	0800b621 	.word	0x0800b621
 800b5a0:	0800b621 	.word	0x0800b621
 800b5a4:	0800b621 	.word	0x0800b621
 800b5a8:	0800b621 	.word	0x0800b621
 800b5ac:	0800b609 	.word	0x0800b609
 800b5b0:	0800b621 	.word	0x0800b621
 800b5b4:	0800b621 	.word	0x0800b621
 800b5b8:	0800b621 	.word	0x0800b621
 800b5bc:	0800b621 	.word	0x0800b621
 800b5c0:	0800b621 	.word	0x0800b621
 800b5c4:	0800b621 	.word	0x0800b621
 800b5c8:	0800b621 	.word	0x0800b621
 800b5cc:	0800b611 	.word	0x0800b611
 800b5d0:	0800b621 	.word	0x0800b621
 800b5d4:	0800b621 	.word	0x0800b621
 800b5d8:	0800b621 	.word	0x0800b621
 800b5dc:	0800b621 	.word	0x0800b621
 800b5e0:	0800b621 	.word	0x0800b621
 800b5e4:	0800b621 	.word	0x0800b621
 800b5e8:	0800b621 	.word	0x0800b621
 800b5ec:	0800b619 	.word	0x0800b619
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f6:	e0d6      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b5f8:	2304      	movs	r3, #4
 800b5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fe:	e0d2      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b600:	2308      	movs	r3, #8
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b606:	e0ce      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b608:	2310      	movs	r3, #16
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60e:	e0ca      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b610:	2320      	movs	r3, #32
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b616:	e0c6      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b618:	2340      	movs	r3, #64	@ 0x40
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61e:	e0c2      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b620:	2380      	movs	r3, #128	@ 0x80
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b626:	e0be      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b628:	40011400 	.word	0x40011400
 800b62c:	58024400 	.word	0x58024400
 800b630:	40007800 	.word	0x40007800
 800b634:	40007c00 	.word	0x40007c00
 800b638:	40011800 	.word	0x40011800
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4aad      	ldr	r2, [pc, #692]	@ (800b8f8 <UART_SetConfig+0x900>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d176      	bne.n	800b734 <UART_SetConfig+0x73c>
 800b646:	4bad      	ldr	r3, [pc, #692]	@ (800b8fc <UART_SetConfig+0x904>)
 800b648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b64a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b64e:	2b28      	cmp	r3, #40	@ 0x28
 800b650:	d86c      	bhi.n	800b72c <UART_SetConfig+0x734>
 800b652:	a201      	add	r2, pc, #4	@ (adr r2, 800b658 <UART_SetConfig+0x660>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b6fd 	.word	0x0800b6fd
 800b65c:	0800b72d 	.word	0x0800b72d
 800b660:	0800b72d 	.word	0x0800b72d
 800b664:	0800b72d 	.word	0x0800b72d
 800b668:	0800b72d 	.word	0x0800b72d
 800b66c:	0800b72d 	.word	0x0800b72d
 800b670:	0800b72d 	.word	0x0800b72d
 800b674:	0800b72d 	.word	0x0800b72d
 800b678:	0800b705 	.word	0x0800b705
 800b67c:	0800b72d 	.word	0x0800b72d
 800b680:	0800b72d 	.word	0x0800b72d
 800b684:	0800b72d 	.word	0x0800b72d
 800b688:	0800b72d 	.word	0x0800b72d
 800b68c:	0800b72d 	.word	0x0800b72d
 800b690:	0800b72d 	.word	0x0800b72d
 800b694:	0800b72d 	.word	0x0800b72d
 800b698:	0800b70d 	.word	0x0800b70d
 800b69c:	0800b72d 	.word	0x0800b72d
 800b6a0:	0800b72d 	.word	0x0800b72d
 800b6a4:	0800b72d 	.word	0x0800b72d
 800b6a8:	0800b72d 	.word	0x0800b72d
 800b6ac:	0800b72d 	.word	0x0800b72d
 800b6b0:	0800b72d 	.word	0x0800b72d
 800b6b4:	0800b72d 	.word	0x0800b72d
 800b6b8:	0800b715 	.word	0x0800b715
 800b6bc:	0800b72d 	.word	0x0800b72d
 800b6c0:	0800b72d 	.word	0x0800b72d
 800b6c4:	0800b72d 	.word	0x0800b72d
 800b6c8:	0800b72d 	.word	0x0800b72d
 800b6cc:	0800b72d 	.word	0x0800b72d
 800b6d0:	0800b72d 	.word	0x0800b72d
 800b6d4:	0800b72d 	.word	0x0800b72d
 800b6d8:	0800b71d 	.word	0x0800b71d
 800b6dc:	0800b72d 	.word	0x0800b72d
 800b6e0:	0800b72d 	.word	0x0800b72d
 800b6e4:	0800b72d 	.word	0x0800b72d
 800b6e8:	0800b72d 	.word	0x0800b72d
 800b6ec:	0800b72d 	.word	0x0800b72d
 800b6f0:	0800b72d 	.word	0x0800b72d
 800b6f4:	0800b72d 	.word	0x0800b72d
 800b6f8:	0800b725 	.word	0x0800b725
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b702:	e050      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b704:	2304      	movs	r3, #4
 800b706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70a:	e04c      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b70c:	2308      	movs	r3, #8
 800b70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b712:	e048      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b714:	2310      	movs	r3, #16
 800b716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71a:	e044      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b71c:	2320      	movs	r3, #32
 800b71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b722:	e040      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b724:	2340      	movs	r3, #64	@ 0x40
 800b726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72a:	e03c      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b72c:	2380      	movs	r3, #128	@ 0x80
 800b72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b732:	e038      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a71      	ldr	r2, [pc, #452]	@ (800b900 <UART_SetConfig+0x908>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d130      	bne.n	800b7a0 <UART_SetConfig+0x7a8>
 800b73e:	4b6f      	ldr	r3, [pc, #444]	@ (800b8fc <UART_SetConfig+0x904>)
 800b740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b742:	f003 0307 	and.w	r3, r3, #7
 800b746:	2b05      	cmp	r3, #5
 800b748:	d826      	bhi.n	800b798 <UART_SetConfig+0x7a0>
 800b74a:	a201      	add	r2, pc, #4	@ (adr r2, 800b750 <UART_SetConfig+0x758>)
 800b74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b750:	0800b769 	.word	0x0800b769
 800b754:	0800b771 	.word	0x0800b771
 800b758:	0800b779 	.word	0x0800b779
 800b75c:	0800b781 	.word	0x0800b781
 800b760:	0800b789 	.word	0x0800b789
 800b764:	0800b791 	.word	0x0800b791
 800b768:	2302      	movs	r3, #2
 800b76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76e:	e01a      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b770:	2304      	movs	r3, #4
 800b772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b776:	e016      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b778:	2308      	movs	r3, #8
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77e:	e012      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b780:	2310      	movs	r3, #16
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b786:	e00e      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b788:	2320      	movs	r3, #32
 800b78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78e:	e00a      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b790:	2340      	movs	r3, #64	@ 0x40
 800b792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b796:	e006      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b798:	2380      	movs	r3, #128	@ 0x80
 800b79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79e:	e002      	b.n	800b7a6 <UART_SetConfig+0x7ae>
 800b7a0:	2380      	movs	r3, #128	@ 0x80
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a55      	ldr	r2, [pc, #340]	@ (800b900 <UART_SetConfig+0x908>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	f040 80f8 	bne.w	800b9a2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b7b6:	2b20      	cmp	r3, #32
 800b7b8:	dc46      	bgt.n	800b848 <UART_SetConfig+0x850>
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	db75      	blt.n	800b8aa <UART_SetConfig+0x8b2>
 800b7be:	3b02      	subs	r3, #2
 800b7c0:	2b1e      	cmp	r3, #30
 800b7c2:	d872      	bhi.n	800b8aa <UART_SetConfig+0x8b2>
 800b7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7cc <UART_SetConfig+0x7d4>)
 800b7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ca:	bf00      	nop
 800b7cc:	0800b84f 	.word	0x0800b84f
 800b7d0:	0800b8ab 	.word	0x0800b8ab
 800b7d4:	0800b857 	.word	0x0800b857
 800b7d8:	0800b8ab 	.word	0x0800b8ab
 800b7dc:	0800b8ab 	.word	0x0800b8ab
 800b7e0:	0800b8ab 	.word	0x0800b8ab
 800b7e4:	0800b867 	.word	0x0800b867
 800b7e8:	0800b8ab 	.word	0x0800b8ab
 800b7ec:	0800b8ab 	.word	0x0800b8ab
 800b7f0:	0800b8ab 	.word	0x0800b8ab
 800b7f4:	0800b8ab 	.word	0x0800b8ab
 800b7f8:	0800b8ab 	.word	0x0800b8ab
 800b7fc:	0800b8ab 	.word	0x0800b8ab
 800b800:	0800b8ab 	.word	0x0800b8ab
 800b804:	0800b877 	.word	0x0800b877
 800b808:	0800b8ab 	.word	0x0800b8ab
 800b80c:	0800b8ab 	.word	0x0800b8ab
 800b810:	0800b8ab 	.word	0x0800b8ab
 800b814:	0800b8ab 	.word	0x0800b8ab
 800b818:	0800b8ab 	.word	0x0800b8ab
 800b81c:	0800b8ab 	.word	0x0800b8ab
 800b820:	0800b8ab 	.word	0x0800b8ab
 800b824:	0800b8ab 	.word	0x0800b8ab
 800b828:	0800b8ab 	.word	0x0800b8ab
 800b82c:	0800b8ab 	.word	0x0800b8ab
 800b830:	0800b8ab 	.word	0x0800b8ab
 800b834:	0800b8ab 	.word	0x0800b8ab
 800b838:	0800b8ab 	.word	0x0800b8ab
 800b83c:	0800b8ab 	.word	0x0800b8ab
 800b840:	0800b8ab 	.word	0x0800b8ab
 800b844:	0800b89d 	.word	0x0800b89d
 800b848:	2b40      	cmp	r3, #64	@ 0x40
 800b84a:	d02a      	beq.n	800b8a2 <UART_SetConfig+0x8aa>
 800b84c:	e02d      	b.n	800b8aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b84e:	f7fd febd 	bl	80095cc <HAL_RCCEx_GetD3PCLK1Freq>
 800b852:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b854:	e02f      	b.n	800b8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fd fecc 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b864:	e027      	b.n	800b8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b866:	f107 0318 	add.w	r3, r7, #24
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe f818 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b874:	e01f      	b.n	800b8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b876:	4b21      	ldr	r3, [pc, #132]	@ (800b8fc <UART_SetConfig+0x904>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0320 	and.w	r3, r3, #32
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d009      	beq.n	800b896 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b882:	4b1e      	ldr	r3, [pc, #120]	@ (800b8fc <UART_SetConfig+0x904>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	08db      	lsrs	r3, r3, #3
 800b888:	f003 0303 	and.w	r3, r3, #3
 800b88c:	4a1d      	ldr	r2, [pc, #116]	@ (800b904 <UART_SetConfig+0x90c>)
 800b88e:	fa22 f303 	lsr.w	r3, r2, r3
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b894:	e00f      	b.n	800b8b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b896:	4b1b      	ldr	r3, [pc, #108]	@ (800b904 <UART_SetConfig+0x90c>)
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b89a:	e00c      	b.n	800b8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b89c:	4b1a      	ldr	r3, [pc, #104]	@ (800b908 <UART_SetConfig+0x910>)
 800b89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a0:	e009      	b.n	800b8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a8:	e005      	b.n	800b8b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b8b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 81ee 	beq.w	800bc9a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c2:	4a12      	ldr	r2, [pc, #72]	@ (800b90c <UART_SetConfig+0x914>)
 800b8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8d0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	4413      	add	r3, r2
 800b8dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d305      	bcc.n	800b8ee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d910      	bls.n	800b910 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b8f4:	e1d1      	b.n	800bc9a <UART_SetConfig+0xca2>
 800b8f6:	bf00      	nop
 800b8f8:	40011c00 	.word	0x40011c00
 800b8fc:	58024400 	.word	0x58024400
 800b900:	58000c00 	.word	0x58000c00
 800b904:	03d09000 	.word	0x03d09000
 800b908:	003d0900 	.word	0x003d0900
 800b90c:	0800d978 	.word	0x0800d978
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b912:	2200      	movs	r2, #0
 800b914:	60bb      	str	r3, [r7, #8]
 800b916:	60fa      	str	r2, [r7, #12]
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91c:	4ac0      	ldr	r2, [pc, #768]	@ (800bc20 <UART_SetConfig+0xc28>)
 800b91e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b922:	b29b      	uxth	r3, r3
 800b924:	2200      	movs	r2, #0
 800b926:	603b      	str	r3, [r7, #0]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b92e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b932:	f7f4 fcdd 	bl	80002f0 <__aeabi_uldivmod>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4610      	mov	r0, r2
 800b93c:	4619      	mov	r1, r3
 800b93e:	f04f 0200 	mov.w	r2, #0
 800b942:	f04f 0300 	mov.w	r3, #0
 800b946:	020b      	lsls	r3, r1, #8
 800b948:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b94c:	0202      	lsls	r2, r0, #8
 800b94e:	6979      	ldr	r1, [r7, #20]
 800b950:	6849      	ldr	r1, [r1, #4]
 800b952:	0849      	lsrs	r1, r1, #1
 800b954:	2000      	movs	r0, #0
 800b956:	460c      	mov	r4, r1
 800b958:	4605      	mov	r5, r0
 800b95a:	eb12 0804 	adds.w	r8, r2, r4
 800b95e:	eb43 0905 	adc.w	r9, r3, r5
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	469a      	mov	sl, r3
 800b96a:	4693      	mov	fp, r2
 800b96c:	4652      	mov	r2, sl
 800b96e:	465b      	mov	r3, fp
 800b970:	4640      	mov	r0, r8
 800b972:	4649      	mov	r1, r9
 800b974:	f7f4 fcbc 	bl	80002f0 <__aeabi_uldivmod>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4613      	mov	r3, r2
 800b97e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b986:	d308      	bcc.n	800b99a <UART_SetConfig+0x9a2>
 800b988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b98e:	d204      	bcs.n	800b99a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b996:	60da      	str	r2, [r3, #12]
 800b998:	e17f      	b.n	800bc9a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b9a0:	e17b      	b.n	800bc9a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9aa:	f040 80bd 	bne.w	800bb28 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b9ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9b2:	2b20      	cmp	r3, #32
 800b9b4:	dc48      	bgt.n	800ba48 <UART_SetConfig+0xa50>
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	db7b      	blt.n	800bab2 <UART_SetConfig+0xaba>
 800b9ba:	2b20      	cmp	r3, #32
 800b9bc:	d879      	bhi.n	800bab2 <UART_SetConfig+0xaba>
 800b9be:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c4 <UART_SetConfig+0x9cc>)
 800b9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c4:	0800ba4f 	.word	0x0800ba4f
 800b9c8:	0800ba57 	.word	0x0800ba57
 800b9cc:	0800bab3 	.word	0x0800bab3
 800b9d0:	0800bab3 	.word	0x0800bab3
 800b9d4:	0800ba5f 	.word	0x0800ba5f
 800b9d8:	0800bab3 	.word	0x0800bab3
 800b9dc:	0800bab3 	.word	0x0800bab3
 800b9e0:	0800bab3 	.word	0x0800bab3
 800b9e4:	0800ba6f 	.word	0x0800ba6f
 800b9e8:	0800bab3 	.word	0x0800bab3
 800b9ec:	0800bab3 	.word	0x0800bab3
 800b9f0:	0800bab3 	.word	0x0800bab3
 800b9f4:	0800bab3 	.word	0x0800bab3
 800b9f8:	0800bab3 	.word	0x0800bab3
 800b9fc:	0800bab3 	.word	0x0800bab3
 800ba00:	0800bab3 	.word	0x0800bab3
 800ba04:	0800ba7f 	.word	0x0800ba7f
 800ba08:	0800bab3 	.word	0x0800bab3
 800ba0c:	0800bab3 	.word	0x0800bab3
 800ba10:	0800bab3 	.word	0x0800bab3
 800ba14:	0800bab3 	.word	0x0800bab3
 800ba18:	0800bab3 	.word	0x0800bab3
 800ba1c:	0800bab3 	.word	0x0800bab3
 800ba20:	0800bab3 	.word	0x0800bab3
 800ba24:	0800bab3 	.word	0x0800bab3
 800ba28:	0800bab3 	.word	0x0800bab3
 800ba2c:	0800bab3 	.word	0x0800bab3
 800ba30:	0800bab3 	.word	0x0800bab3
 800ba34:	0800bab3 	.word	0x0800bab3
 800ba38:	0800bab3 	.word	0x0800bab3
 800ba3c:	0800bab3 	.word	0x0800bab3
 800ba40:	0800bab3 	.word	0x0800bab3
 800ba44:	0800baa5 	.word	0x0800baa5
 800ba48:	2b40      	cmp	r3, #64	@ 0x40
 800ba4a:	d02e      	beq.n	800baaa <UART_SetConfig+0xab2>
 800ba4c:	e031      	b.n	800bab2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba4e:	f7fb fefb 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 800ba52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba54:	e033      	b.n	800babe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba56:	f7fb ff0d 	bl	8007874 <HAL_RCC_GetPCLK2Freq>
 800ba5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba5c:	e02f      	b.n	800babe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd fdc8 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba6c:	e027      	b.n	800babe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba6e:	f107 0318 	add.w	r3, r7, #24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fd ff14 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba7c:	e01f      	b.n	800babe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba7e:	4b69      	ldr	r3, [pc, #420]	@ (800bc24 <UART_SetConfig+0xc2c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 0320 	and.w	r3, r3, #32
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d009      	beq.n	800ba9e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba8a:	4b66      	ldr	r3, [pc, #408]	@ (800bc24 <UART_SetConfig+0xc2c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	08db      	lsrs	r3, r3, #3
 800ba90:	f003 0303 	and.w	r3, r3, #3
 800ba94:	4a64      	ldr	r2, [pc, #400]	@ (800bc28 <UART_SetConfig+0xc30>)
 800ba96:	fa22 f303 	lsr.w	r3, r2, r3
 800ba9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba9c:	e00f      	b.n	800babe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ba9e:	4b62      	ldr	r3, [pc, #392]	@ (800bc28 <UART_SetConfig+0xc30>)
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa2:	e00c      	b.n	800babe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800baa4:	4b61      	ldr	r3, [pc, #388]	@ (800bc2c <UART_SetConfig+0xc34>)
 800baa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa8:	e009      	b.n	800babe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800baaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800baae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab0:	e005      	b.n	800babe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800babc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800babe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 80ea 	beq.w	800bc9a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baca:	4a55      	ldr	r2, [pc, #340]	@ (800bc20 <UART_SetConfig+0xc28>)
 800bacc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bad0:	461a      	mov	r2, r3
 800bad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bad4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bad8:	005a      	lsls	r2, r3, #1
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	085b      	lsrs	r3, r3, #1
 800bae0:	441a      	add	r2, r3
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	fbb2 f3f3 	udiv	r3, r2, r3
 800baea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	2b0f      	cmp	r3, #15
 800baf0:	d916      	bls.n	800bb20 <UART_SetConfig+0xb28>
 800baf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baf8:	d212      	bcs.n	800bb20 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f023 030f 	bic.w	r3, r3, #15
 800bb02:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb06:	085b      	lsrs	r3, r3, #1
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	f003 0307 	and.w	r3, r3, #7
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb12:	4313      	orrs	r3, r2
 800bb14:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bb1c:	60da      	str	r2, [r3, #12]
 800bb1e:	e0bc      	b.n	800bc9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb26:	e0b8      	b.n	800bc9a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb2c:	2b20      	cmp	r3, #32
 800bb2e:	dc4b      	bgt.n	800bbc8 <UART_SetConfig+0xbd0>
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f2c0 8087 	blt.w	800bc44 <UART_SetConfig+0xc4c>
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	f200 8084 	bhi.w	800bc44 <UART_SetConfig+0xc4c>
 800bb3c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb44 <UART_SetConfig+0xb4c>)
 800bb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb42:	bf00      	nop
 800bb44:	0800bbcf 	.word	0x0800bbcf
 800bb48:	0800bbd7 	.word	0x0800bbd7
 800bb4c:	0800bc45 	.word	0x0800bc45
 800bb50:	0800bc45 	.word	0x0800bc45
 800bb54:	0800bbdf 	.word	0x0800bbdf
 800bb58:	0800bc45 	.word	0x0800bc45
 800bb5c:	0800bc45 	.word	0x0800bc45
 800bb60:	0800bc45 	.word	0x0800bc45
 800bb64:	0800bbef 	.word	0x0800bbef
 800bb68:	0800bc45 	.word	0x0800bc45
 800bb6c:	0800bc45 	.word	0x0800bc45
 800bb70:	0800bc45 	.word	0x0800bc45
 800bb74:	0800bc45 	.word	0x0800bc45
 800bb78:	0800bc45 	.word	0x0800bc45
 800bb7c:	0800bc45 	.word	0x0800bc45
 800bb80:	0800bc45 	.word	0x0800bc45
 800bb84:	0800bbff 	.word	0x0800bbff
 800bb88:	0800bc45 	.word	0x0800bc45
 800bb8c:	0800bc45 	.word	0x0800bc45
 800bb90:	0800bc45 	.word	0x0800bc45
 800bb94:	0800bc45 	.word	0x0800bc45
 800bb98:	0800bc45 	.word	0x0800bc45
 800bb9c:	0800bc45 	.word	0x0800bc45
 800bba0:	0800bc45 	.word	0x0800bc45
 800bba4:	0800bc45 	.word	0x0800bc45
 800bba8:	0800bc45 	.word	0x0800bc45
 800bbac:	0800bc45 	.word	0x0800bc45
 800bbb0:	0800bc45 	.word	0x0800bc45
 800bbb4:	0800bc45 	.word	0x0800bc45
 800bbb8:	0800bc45 	.word	0x0800bc45
 800bbbc:	0800bc45 	.word	0x0800bc45
 800bbc0:	0800bc45 	.word	0x0800bc45
 800bbc4:	0800bc37 	.word	0x0800bc37
 800bbc8:	2b40      	cmp	r3, #64	@ 0x40
 800bbca:	d037      	beq.n	800bc3c <UART_SetConfig+0xc44>
 800bbcc:	e03a      	b.n	800bc44 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbce:	f7fb fe3b 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 800bbd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbd4:	e03c      	b.n	800bc50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbd6:	f7fb fe4d 	bl	8007874 <HAL_RCC_GetPCLK2Freq>
 800bbda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbdc:	e038      	b.n	800bc50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fd fd08 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbec:	e030      	b.n	800bc50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbee:	f107 0318 	add.w	r3, r7, #24
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fd fe54 	bl	80098a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbfc:	e028      	b.n	800bc50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbfe:	4b09      	ldr	r3, [pc, #36]	@ (800bc24 <UART_SetConfig+0xc2c>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f003 0320 	and.w	r3, r3, #32
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d012      	beq.n	800bc30 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc0a:	4b06      	ldr	r3, [pc, #24]	@ (800bc24 <UART_SetConfig+0xc2c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	08db      	lsrs	r3, r3, #3
 800bc10:	f003 0303 	and.w	r3, r3, #3
 800bc14:	4a04      	ldr	r2, [pc, #16]	@ (800bc28 <UART_SetConfig+0xc30>)
 800bc16:	fa22 f303 	lsr.w	r3, r2, r3
 800bc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc1c:	e018      	b.n	800bc50 <UART_SetConfig+0xc58>
 800bc1e:	bf00      	nop
 800bc20:	0800d978 	.word	0x0800d978
 800bc24:	58024400 	.word	0x58024400
 800bc28:	03d09000 	.word	0x03d09000
 800bc2c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bc30:	4b24      	ldr	r3, [pc, #144]	@ (800bcc4 <UART_SetConfig+0xccc>)
 800bc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc34:	e00c      	b.n	800bc50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc36:	4b24      	ldr	r3, [pc, #144]	@ (800bcc8 <UART_SetConfig+0xcd0>)
 800bc38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc3a:	e009      	b.n	800bc50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc42:	e005      	b.n	800bc50 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc4e:	bf00      	nop
    }

    if (pclk != 0U)
 800bc50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d021      	beq.n	800bc9a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5a:	4a1c      	ldr	r2, [pc, #112]	@ (800bccc <UART_SetConfig+0xcd4>)
 800bc5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc60:	461a      	mov	r2, r3
 800bc62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc64:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	085b      	lsrs	r3, r3, #1
 800bc6e:	441a      	add	r2, r3
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc78:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7c:	2b0f      	cmp	r3, #15
 800bc7e:	d909      	bls.n	800bc94 <UART_SetConfig+0xc9c>
 800bc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc86:	d205      	bcs.n	800bc94 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60da      	str	r2, [r3, #12]
 800bc92:	e002      	b.n	800bc9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2200      	movs	r2, #0
 800bcae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bcb6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3748      	adds	r7, #72	@ 0x48
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcc4:	03d09000 	.word	0x03d09000
 800bcc8:	003d0900 	.word	0x003d0900
 800bccc:	0800d978 	.word	0x0800d978

0800bcd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00a      	beq.n	800bcfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	430a      	orrs	r2, r1
 800bcf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00a      	beq.n	800bd1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd20:	f003 0302 	and.w	r3, r3, #2
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00a      	beq.n	800bd3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	430a      	orrs	r2, r1
 800bd3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd42:	f003 0304 	and.w	r3, r3, #4
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	430a      	orrs	r2, r1
 800bd5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd64:	f003 0310 	and.w	r3, r3, #16
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00a      	beq.n	800bd82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd86:	f003 0320 	and.w	r3, r3, #32
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d01a      	beq.n	800bde6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdce:	d10a      	bne.n	800bde6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	430a      	orrs	r2, r1
 800be06:	605a      	str	r2, [r3, #4]
  }
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b098      	sub	sp, #96	@ 0x60
 800be18:	af02      	add	r7, sp, #8
 800be1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be24:	f7f5 fd88 	bl	8001938 <HAL_GetTick>
 800be28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 0308 	and.w	r3, r3, #8
 800be34:	2b08      	cmp	r3, #8
 800be36:	d12f      	bne.n	800be98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be40:	2200      	movs	r2, #0
 800be42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f88e 	bl	800bf68 <UART_WaitOnFlagUntilTimeout>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d022      	beq.n	800be98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5a:	e853 3f00 	ldrex	r3, [r3]
 800be5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be66:	653b      	str	r3, [r7, #80]	@ 0x50
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	461a      	mov	r2, r3
 800be6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be70:	647b      	str	r3, [r7, #68]	@ 0x44
 800be72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be78:	e841 2300 	strex	r3, r2, [r1]
 800be7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e6      	bne.n	800be52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2220      	movs	r2, #32
 800be88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be94:	2303      	movs	r3, #3
 800be96:	e063      	b.n	800bf60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 0304 	and.w	r3, r3, #4
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	d149      	bne.n	800bf3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800beae:	2200      	movs	r2, #0
 800beb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f857 	bl	800bf68 <UART_WaitOnFlagUntilTimeout>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d03c      	beq.n	800bf3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec8:	e853 3f00 	ldrex	r3, [r3]
 800becc:	623b      	str	r3, [r7, #32]
   return(result);
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bede:	633b      	str	r3, [r7, #48]	@ 0x30
 800bee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bee6:	e841 2300 	strex	r3, r2, [r1]
 800beea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800beec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1e6      	bne.n	800bec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3308      	adds	r3, #8
 800bef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	e853 3f00 	ldrex	r3, [r3]
 800bf00:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f023 0301 	bic.w	r3, r3, #1
 800bf08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf12:	61fa      	str	r2, [r7, #28]
 800bf14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf16:	69b9      	ldr	r1, [r7, #24]
 800bf18:	69fa      	ldr	r2, [r7, #28]
 800bf1a:	e841 2300 	strex	r3, r2, [r1]
 800bf1e:	617b      	str	r3, [r7, #20]
   return(result);
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1e5      	bne.n	800bef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2220      	movs	r2, #32
 800bf2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf36:	2303      	movs	r3, #3
 800bf38:	e012      	b.n	800bf60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2220      	movs	r2, #32
 800bf46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3758      	adds	r7, #88	@ 0x58
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	603b      	str	r3, [r7, #0]
 800bf74:	4613      	mov	r3, r2
 800bf76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf78:	e04f      	b.n	800c01a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf80:	d04b      	beq.n	800c01a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf82:	f7f5 fcd9 	bl	8001938 <HAL_GetTick>
 800bf86:	4602      	mov	r2, r0
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d302      	bcc.n	800bf98 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e04e      	b.n	800c03a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 0304 	and.w	r3, r3, #4
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d037      	beq.n	800c01a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2b80      	cmp	r3, #128	@ 0x80
 800bfae:	d034      	beq.n	800c01a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b40      	cmp	r3, #64	@ 0x40
 800bfb4:	d031      	beq.n	800c01a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	69db      	ldr	r3, [r3, #28]
 800bfbc:	f003 0308 	and.w	r3, r3, #8
 800bfc0:	2b08      	cmp	r3, #8
 800bfc2:	d110      	bne.n	800bfe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2208      	movs	r2, #8
 800bfca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f000 f839 	bl	800c044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2208      	movs	r2, #8
 800bfd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e029      	b.n	800c03a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	69db      	ldr	r3, [r3, #28]
 800bfec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bff4:	d111      	bne.n	800c01a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f000 f81f 	bl	800c044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2220      	movs	r2, #32
 800c00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c016:	2303      	movs	r3, #3
 800c018:	e00f      	b.n	800c03a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	69da      	ldr	r2, [r3, #28]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	4013      	ands	r3, r2
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	429a      	cmp	r2, r3
 800c028:	bf0c      	ite	eq
 800c02a:	2301      	moveq	r3, #1
 800c02c:	2300      	movne	r3, #0
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	461a      	mov	r2, r3
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	429a      	cmp	r2, r3
 800c036:	d0a0      	beq.n	800bf7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
	...

0800c044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c044:	b480      	push	{r7}
 800c046:	b095      	sub	sp, #84	@ 0x54
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c054:	e853 3f00 	ldrex	r3, [r3]
 800c058:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	461a      	mov	r2, r3
 800c068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c06a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c06c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e6      	bne.n	800c04c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	3308      	adds	r3, #8
 800c084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	e853 3f00 	ldrex	r3, [r3]
 800c08c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c08e:	69fa      	ldr	r2, [r7, #28]
 800c090:	4b1e      	ldr	r3, [pc, #120]	@ (800c10c <UART_EndRxTransfer+0xc8>)
 800c092:	4013      	ands	r3, r2
 800c094:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3308      	adds	r3, #8
 800c09c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c09e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0a6:	e841 2300 	strex	r3, r2, [r1]
 800c0aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1e5      	bne.n	800c07e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d118      	bne.n	800c0ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	e853 3f00 	ldrex	r3, [r3]
 800c0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	f023 0310 	bic.w	r3, r3, #16
 800c0ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0d8:	61bb      	str	r3, [r7, #24]
 800c0da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0dc:	6979      	ldr	r1, [r7, #20]
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	e841 2300 	strex	r3, r2, [r1]
 800c0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e6      	bne.n	800c0ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2220      	movs	r2, #32
 800c0f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c100:	bf00      	nop
 800c102:	3754      	adds	r7, #84	@ 0x54
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	effffffe 	.word	0xeffffffe

0800c110 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c11c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f7fe ff4c 	bl	800afcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c134:	bf00      	nop
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	e853 3f00 	ldrex	r3, [r3]
 800c150:	60bb      	str	r3, [r7, #8]
   return(result);
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c158:	61fb      	str	r3, [r7, #28]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	61bb      	str	r3, [r7, #24]
 800c164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c166:	6979      	ldr	r1, [r7, #20]
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	e841 2300 	strex	r3, r2, [r1]
 800c16e:	613b      	str	r3, [r7, #16]
   return(result);
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1e6      	bne.n	800c144 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2220      	movs	r2, #32
 800c17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7fe ff17 	bl	800afb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c18a:	bf00      	nop
 800c18c:	3720      	adds	r7, #32
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c192:	b480      	push	{r7}
 800c194:	b083      	sub	sp, #12
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c19a:	bf00      	nop
 800c19c:	370c      	adds	r7, #12
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr

0800c1a6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b083      	sub	sp, #12
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c1ae:	bf00      	nop
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d101      	bne.n	800c1e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	e027      	b.n	800c234 <HAL_UARTEx_DisableFifoMode+0x66>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2224      	movs	r2, #36	@ 0x24
 800c1f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 0201 	bic.w	r2, r2, #1
 800c20a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c212:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2220      	movs	r2, #32
 800c226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c250:	2b01      	cmp	r3, #1
 800c252:	d101      	bne.n	800c258 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c254:	2302      	movs	r3, #2
 800c256:	e02d      	b.n	800c2b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2224      	movs	r2, #36	@ 0x24
 800c264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f022 0201 	bic.w	r2, r2, #1
 800c27e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f84f 	bl	800c338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2220      	movs	r2, #32
 800c2a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e02d      	b.n	800c330 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2224      	movs	r2, #36	@ 0x24
 800c2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f022 0201 	bic.w	r2, r2, #1
 800c2fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	430a      	orrs	r2, r1
 800c30e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f811 	bl	800c338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2220      	movs	r2, #32
 800c322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c344:	2b00      	cmp	r3, #0
 800c346:	d108      	bne.n	800c35a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c358:	e031      	b.n	800c3be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c35a:	2310      	movs	r3, #16
 800c35c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c35e:	2310      	movs	r3, #16
 800c360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	0e5b      	lsrs	r3, r3, #25
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	f003 0307 	and.w	r3, r3, #7
 800c370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	0f5b      	lsrs	r3, r3, #29
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	f003 0307 	and.w	r3, r3, #7
 800c380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	7b3a      	ldrb	r2, [r7, #12]
 800c386:	4911      	ldr	r1, [pc, #68]	@ (800c3cc <UARTEx_SetNbDataToProcess+0x94>)
 800c388:	5c8a      	ldrb	r2, [r1, r2]
 800c38a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c38e:	7b3a      	ldrb	r2, [r7, #12]
 800c390:	490f      	ldr	r1, [pc, #60]	@ (800c3d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c394:	fb93 f3f2 	sdiv	r3, r3, r2
 800c398:	b29a      	uxth	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	7b7a      	ldrb	r2, [r7, #13]
 800c3a4:	4909      	ldr	r1, [pc, #36]	@ (800c3cc <UARTEx_SetNbDataToProcess+0x94>)
 800c3a6:	5c8a      	ldrb	r2, [r1, r2]
 800c3a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c3ac:	7b7a      	ldrb	r2, [r7, #13]
 800c3ae:	4908      	ldr	r1, [pc, #32]	@ (800c3d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c3b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c3be:	bf00      	nop
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	0800d990 	.word	0x0800d990
 800c3d0:	0800d998 	.word	0x0800d998

0800c3d4 <arm_conv_f32>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	b08b      	sub	sp, #44	@ 0x2c
 800c3da:	4299      	cmp	r1, r3
 800c3dc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c3de:	d205      	bcs.n	800c3ec <arm_conv_f32+0x18>
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	4623      	mov	r3, r4
 800c3ec:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800c3f0:	3101      	adds	r1, #1
 800c3f2:	1ac9      	subs	r1, r1, r3
 800c3f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800c3fc:	9101      	str	r1, [sp, #4]
 800c3fe:	1e59      	subs	r1, r3, #1
 800c400:	eb02 070b 	add.w	r7, r2, fp
 800c404:	f000 8277 	beq.w	800c8f6 <arm_conv_f32+0x522>
 800c408:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800c6c8 <arm_conv_f32+0x2f4>
 800c40c:	f102 0904 	add.w	r9, r2, #4
 800c410:	46aa      	mov	sl, r5
 800c412:	4680      	mov	r8, r0
 800c414:	2401      	movs	r4, #1
 800c416:	f014 0603 	ands.w	r6, r4, #3
 800c41a:	d01b      	beq.n	800c454 <arm_conv_f32+0x80>
 800c41c:	ed92 7a00 	vldr	s14, [r2]
 800c420:	edd8 6a00 	vldr	s13, [r8]
 800c424:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c428:	3e01      	subs	r6, #1
 800c42a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c42e:	d011      	beq.n	800c454 <arm_conv_f32+0x80>
 800c430:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c434:	edd8 6a01 	vldr	s13, [r8, #4]
 800c438:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c43c:	2e01      	cmp	r6, #1
 800c43e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c442:	d007      	beq.n	800c454 <arm_conv_f32+0x80>
 800c444:	ed98 7a02 	vldr	s14, [r8, #8]
 800c448:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c44c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c450:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c454:	3401      	adds	r4, #1
 800c456:	42a3      	cmp	r3, r4
 800c458:	ecea 7a01 	vstmia	sl!, {s15}
 800c45c:	464a      	mov	r2, r9
 800c45e:	d03a      	beq.n	800c4d6 <arm_conv_f32+0x102>
 800c460:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800c464:	f000 824c 	beq.w	800c900 <arm_conv_f32+0x52c>
 800c468:	f100 0210 	add.w	r2, r0, #16
 800c46c:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800c470:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800c6c8 <arm_conv_f32+0x2f4>
 800c474:	eb02 0c08 	add.w	ip, r2, r8
 800c478:	f1a9 0610 	sub.w	r6, r9, #16
 800c47c:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c480:	edd6 3a04 	vldr	s7, [r6, #16]
 800c484:	ed12 6a03 	vldr	s12, [r2, #-12]
 800c488:	ed96 4a03 	vldr	s8, [r6, #12]
 800c48c:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c490:	edd6 4a02 	vldr	s9, [r6, #8]
 800c494:	ed52 5a01 	vldr	s11, [r2, #-4]
 800c498:	ed96 5a01 	vldr	s10, [r6, #4]
 800c49c:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c4a0:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c4a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4a8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800c4ac:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c4b0:	ee65 6a85 	vmul.f32	s13, s11, s10
 800c4b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4b8:	3210      	adds	r2, #16
 800c4ba:	4594      	cmp	ip, r2
 800c4bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4c0:	f1a6 0610 	sub.w	r6, r6, #16
 800c4c4:	d1da      	bne.n	800c47c <arm_conv_f32+0xa8>
 800c4c6:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800c4ca:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800c4ce:	4480      	add	r8, r0
 800c4d0:	f109 0904 	add.w	r9, r9, #4
 800c4d4:	e79f      	b.n	800c416 <arm_conv_f32+0x42>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	445d      	add	r5, fp
 800c4da:	f240 80e9 	bls.w	800c6b0 <arm_conv_f32+0x2dc>
 800c4de:	9b01      	ldr	r3, [sp, #4]
 800c4e0:	089a      	lsrs	r2, r3, #2
 800c4e2:	9202      	str	r2, [sp, #8]
 800c4e4:	f000 8203 	beq.w	800c8ee <arm_conv_f32+0x51a>
 800c4e8:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800c4ec:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800c4f0:	0112      	lsls	r2, r2, #4
 800c4f2:	f004 0603 	and.w	r6, r4, #3
 800c4f6:	9203      	str	r2, [sp, #12]
 800c4f8:	f1a3 0a10 	sub.w	sl, r3, #16
 800c4fc:	f1a3 020c 	sub.w	r2, r3, #12
 800c500:	3b08      	subs	r3, #8
 800c502:	9204      	str	r2, [sp, #16]
 800c504:	9305      	str	r3, [sp, #20]
 800c506:	f106 39ff 	add.w	r9, r6, #4294967295
 800c50a:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800c50e:	9a03      	ldr	r2, [sp, #12]
 800c510:	f100 0c1c 	add.w	ip, r0, #28
 800c514:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800c518:	464c      	mov	r4, r9
 800c51a:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800c51e:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800c522:	f1a7 0310 	sub.w	r3, r7, #16
 800c526:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800c52a:	eb05 0b02 	add.w	fp, r5, r2
 800c52e:	461f      	mov	r7, r3
 800c530:	3510      	adds	r5, #16
 800c532:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800c6c8 <arm_conv_f32+0x2f4>
 800c536:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800c53a:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800c53e:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800c542:	eeb0 5a46 	vmov.f32	s10, s12
 800c546:	eef0 4a46 	vmov.f32	s9, s12
 800c54a:	eef0 5a46 	vmov.f32	s11, s12
 800c54e:	463a      	mov	r2, r7
 800c550:	4663      	mov	r3, ip
 800c552:	4641      	mov	r1, r8
 800c554:	edd2 6a04 	vldr	s13, [r2, #16]
 800c558:	ed13 0a04 	vldr	s0, [r3, #-16]
 800c55c:	ed92 7a03 	vldr	s14, [r2, #12]
 800c560:	edd2 7a02 	vldr	s15, [r2, #8]
 800c564:	edd2 0a01 	vldr	s1, [r2, #4]
 800c568:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800c56c:	ee62 3a26 	vmul.f32	s7, s4, s13
 800c570:	ee61 2a26 	vmul.f32	s5, s2, s13
 800c574:	ed13 1a03 	vldr	s2, [r3, #-12]
 800c578:	ee66 6a80 	vmul.f32	s13, s13, s0
 800c57c:	ee21 4a87 	vmul.f32	s8, s3, s14
 800c580:	ee73 4a24 	vadd.f32	s9, s6, s9
 800c584:	ee33 5a85 	vadd.f32	s10, s7, s10
 800c588:	ee22 3a07 	vmul.f32	s6, s4, s14
 800c58c:	ed53 1a02 	vldr	s3, [r3, #-8]
 800c590:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800c594:	ee36 6a86 	vadd.f32	s12, s13, s12
 800c598:	ee60 3a07 	vmul.f32	s7, s0, s14
 800c59c:	ee27 7a01 	vmul.f32	s14, s14, s2
 800c5a0:	ee33 3a24 	vadd.f32	s6, s6, s9
 800c5a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c5a8:	ee74 2a22 	vadd.f32	s5, s8, s5
 800c5ac:	ee60 4a27 	vmul.f32	s9, s0, s15
 800c5b0:	ee22 4a27 	vmul.f32	s8, s4, s15
 800c5b4:	ee73 3a85 	vadd.f32	s7, s7, s10
 800c5b8:	ed13 2a01 	vldr	s4, [r3, #-4]
 800c5bc:	ee21 5a27 	vmul.f32	s10, s2, s15
 800c5c0:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800c5c4:	ee74 4a83 	vadd.f32	s9, s9, s6
 800c5c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5cc:	ee34 4a22 	vadd.f32	s8, s8, s5
 800c5d0:	ee60 5a20 	vmul.f32	s11, s0, s1
 800c5d4:	ee21 3a20 	vmul.f32	s6, s2, s1
 800c5d8:	ee35 5a23 	vadd.f32	s10, s10, s7
 800c5dc:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800c5e0:	ee20 6a82 	vmul.f32	s12, s1, s4
 800c5e4:	3901      	subs	r1, #1
 800c5e6:	f1a2 0210 	sub.w	r2, r2, #16
 800c5ea:	ee75 5a84 	vadd.f32	s11, s11, s8
 800c5ee:	ee73 4a24 	vadd.f32	s9, s6, s9
 800c5f2:	ee37 5a05 	vadd.f32	s10, s14, s10
 800c5f6:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c5fa:	f103 0310 	add.w	r3, r3, #16
 800c5fe:	d1a9      	bne.n	800c554 <arm_conv_f32+0x180>
 800c600:	eb0a 030c 	add.w	r3, sl, ip
 800c604:	2e00      	cmp	r6, #0
 800c606:	d042      	beq.n	800c68e <arm_conv_f32+0x2ba>
 800c608:	edde 7a00 	vldr	s15, [lr]
 800c60c:	ed93 4a00 	vldr	s8, [r3]
 800c610:	ee61 6a27 	vmul.f32	s13, s2, s15
 800c614:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800c618:	ee22 7a27 	vmul.f32	s14, s4, s15
 800c61c:	ee64 7a27 	vmul.f32	s15, s8, s15
 800c620:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800c624:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800c628:	ee35 5a07 	vadd.f32	s10, s10, s14
 800c62c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c630:	eb09 030c 	add.w	r3, r9, ip
 800c634:	b35c      	cbz	r4, 800c68e <arm_conv_f32+0x2ba>
 800c636:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800c63a:	edd3 6a00 	vldr	s13, [r3]
 800c63e:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800c642:	ee22 3a27 	vmul.f32	s6, s4, s15
 800c646:	ee67 3a84 	vmul.f32	s7, s15, s8
 800c64a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c64e:	2c01      	cmp	r4, #1
 800c650:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c654:	ee74 4a83 	vadd.f32	s9, s9, s6
 800c658:	ee35 5a23 	vadd.f32	s10, s10, s7
 800c65c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c660:	eb00 030c 	add.w	r3, r0, ip
 800c664:	d013      	beq.n	800c68e <arm_conv_f32+0x2ba>
 800c666:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800c66a:	edd3 3a00 	vldr	s7, [r3]
 800c66e:	ee62 7a07 	vmul.f32	s15, s4, s14
 800c672:	ee27 4a04 	vmul.f32	s8, s14, s8
 800c676:	ee67 6a26 	vmul.f32	s13, s14, s13
 800c67a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c67e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c682:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c686:	ee35 5a26 	vadd.f32	s10, s10, s13
 800c68a:	ee36 6a07 	vadd.f32	s12, s12, s14
 800c68e:	45ab      	cmp	fp, r5
 800c690:	ed45 5a04 	vstr	s11, [r5, #-16]
 800c694:	ed45 4a03 	vstr	s9, [r5, #-12]
 800c698:	ed05 5a02 	vstr	s10, [r5, #-8]
 800c69c:	ed05 6a01 	vstr	s12, [r5, #-4]
 800c6a0:	f10c 0c10 	add.w	ip, ip, #16
 800c6a4:	f105 0310 	add.w	r3, r5, #16
 800c6a8:	f000 809e 	beq.w	800c7e8 <arm_conv_f32+0x414>
 800c6ac:	461d      	mov	r5, r3
 800c6ae:	e740      	b.n	800c532 <arm_conv_f32+0x15e>
 800c6b0:	9a01      	ldr	r2, [sp, #4]
 800c6b2:	46ac      	mov	ip, r5
 800c6b4:	2a00      	cmp	r2, #0
 800c6b6:	d037      	beq.n	800c728 <arm_conv_f32+0x354>
 800c6b8:	9a01      	ldr	r2, [sp, #4]
 800c6ba:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800c6c8 <arm_conv_f32+0x2f4>
 800c6be:	0096      	lsls	r6, r2, #2
 800c6c0:	eb05 0c06 	add.w	ip, r5, r6
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	e021      	b.n	800c70c <arm_conv_f32+0x338>
 800c6c8:	00000000 	.word	0x00000000
 800c6cc:	edd7 7a00 	vldr	s15, [r7]
 800c6d0:	ecb2 7a01 	vldmia	r2!, {s14}
 800c6d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6d8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c6dc:	b189      	cbz	r1, 800c702 <arm_conv_f32+0x32e>
 800c6de:	ed17 7a01 	vldr	s14, [r7, #-4]
 800c6e2:	edd4 6a01 	vldr	s13, [r4, #4]
 800c6e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6f0:	d007      	beq.n	800c702 <arm_conv_f32+0x32e>
 800c6f2:	ed94 7a02 	vldr	s14, [r4, #8]
 800c6f6:	ed57 6a02 	vldr	s13, [r7, #-8]
 800c6fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c6fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c702:	ece5 7a01 	vstmia	r5!, {s15}
 800c706:	4565      	cmp	r5, ip
 800c708:	4614      	mov	r4, r2
 800c70a:	d00a      	beq.n	800c722 <arm_conv_f32+0x34e>
 800c70c:	4622      	mov	r2, r4
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1dc      	bne.n	800c6cc <arm_conv_f32+0x2f8>
 800c712:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800c6c8 <arm_conv_f32+0x2f4>
 800c716:	ece5 7a01 	vstmia	r5!, {s15}
 800c71a:	1d22      	adds	r2, r4, #4
 800c71c:	4565      	cmp	r5, ip
 800c71e:	4614      	mov	r4, r2
 800c720:	d1f4      	bne.n	800c70c <arm_conv_f32+0x338>
 800c722:	4430      	add	r0, r6
 800c724:	2900      	cmp	r1, #0
 800c726:	d059      	beq.n	800c7dc <arm_conv_f32+0x408>
 800c728:	088d      	lsrs	r5, r1, #2
 800c72a:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800c6c8 <arm_conv_f32+0x2f4>
 800c72e:	d058      	beq.n	800c7e2 <arm_conv_f32+0x40e>
 800c730:	f100 0210 	add.w	r2, r0, #16
 800c734:	f1a7 0310 	sub.w	r3, r7, #16
 800c738:	462c      	mov	r4, r5
 800c73a:	ed52 6a04 	vldr	s13, [r2, #-16]
 800c73e:	edd3 3a04 	vldr	s7, [r3, #16]
 800c742:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c746:	ed93 4a03 	vldr	s8, [r3, #12]
 800c74a:	ed52 7a02 	vldr	s15, [r2, #-8]
 800c74e:	edd3 4a02 	vldr	s9, [r3, #8]
 800c752:	ed12 6a01 	vldr	s12, [r2, #-4]
 800c756:	ed93 5a01 	vldr	s10, [r3, #4]
 800c75a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800c75e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c762:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c766:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800c76a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c76e:	ee66 6a05 	vmul.f32	s13, s12, s10
 800c772:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c776:	3c01      	subs	r4, #1
 800c778:	f102 0210 	add.w	r2, r2, #16
 800c77c:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800c780:	f1a3 0310 	sub.w	r3, r3, #16
 800c784:	d1d9      	bne.n	800c73a <arm_conv_f32+0x366>
 800c786:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800c78a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800c78e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800c792:	f011 0203 	ands.w	r2, r1, #3
 800c796:	d01b      	beq.n	800c7d0 <arm_conv_f32+0x3fc>
 800c798:	edd3 7a00 	vldr	s15, [r3]
 800c79c:	ed95 7a00 	vldr	s14, [r5]
 800c7a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7a4:	3a01      	subs	r2, #1
 800c7a6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c7aa:	d011      	beq.n	800c7d0 <arm_conv_f32+0x3fc>
 800c7ac:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c7b0:	ed95 7a01 	vldr	s14, [r5, #4]
 800c7b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7b8:	2a01      	cmp	r2, #1
 800c7ba:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c7be:	d007      	beq.n	800c7d0 <arm_conv_f32+0x3fc>
 800c7c0:	edd5 7a02 	vldr	s15, [r5, #8]
 800c7c4:	ed13 7a02 	vldr	s14, [r3, #-8]
 800c7c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7cc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c7d0:	3901      	subs	r1, #1
 800c7d2:	ecec 5a01 	vstmia	ip!, {s11}
 800c7d6:	f100 0004 	add.w	r0, r0, #4
 800c7da:	d1a5      	bne.n	800c728 <arm_conv_f32+0x354>
 800c7dc:	b00b      	add	sp, #44	@ 0x2c
 800c7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e2:	463b      	mov	r3, r7
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	e7d4      	b.n	800c792 <arm_conv_f32+0x3be>
 800c7e8:	9b02      	ldr	r3, [sp, #8]
 800c7ea:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	9302      	str	r3, [sp, #8]
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800c7f8:	4403      	add	r3, r0
 800c7fa:	465d      	mov	r5, fp
 800c7fc:	469e      	mov	lr, r3
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	f013 0c03 	ands.w	ip, r3, #3
 800c804:	d075      	beq.n	800c8f2 <arm_conv_f32+0x51e>
 800c806:	9b02      	ldr	r3, [sp, #8]
 800c808:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800c80c:	f004 0403 	and.w	r4, r4, #3
 800c810:	f104 3bff 	add.w	fp, r4, #4294967295
 800c814:	f103 0801 	add.w	r8, r3, #1
 800c818:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800c81c:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800c820:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800c824:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800c828:	f1a7 0210 	sub.w	r2, r7, #16
 800c82c:	4618      	mov	r0, r3
 800c82e:	465b      	mov	r3, fp
 800c830:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800c834:	468b      	mov	fp, r1
 800c836:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800c83a:	4621      	mov	r1, r4
 800c83c:	4617      	mov	r7, r2
 800c83e:	461c      	mov	r4, r3
 800c840:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800c6c8 <arm_conv_f32+0x2f4>
 800c844:	f10e 0210 	add.w	r2, lr, #16
 800c848:	463b      	mov	r3, r7
 800c84a:	4656      	mov	r6, sl
 800c84c:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c850:	edd3 3a04 	vldr	s7, [r3, #16]
 800c854:	ed12 6a03 	vldr	s12, [r2, #-12]
 800c858:	ed93 4a03 	vldr	s8, [r3, #12]
 800c85c:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c860:	edd3 4a02 	vldr	s9, [r3, #8]
 800c864:	ed52 5a01 	vldr	s11, [r2, #-4]
 800c868:	ed93 5a01 	vldr	s10, [r3, #4]
 800c86c:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c870:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c874:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c878:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800c87c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c880:	ee65 6a85 	vmul.f32	s13, s11, s10
 800c884:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c888:	3e01      	subs	r6, #1
 800c88a:	f102 0210 	add.w	r2, r2, #16
 800c88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c892:	f1a3 0310 	sub.w	r3, r3, #16
 800c896:	d1d9      	bne.n	800c84c <arm_conv_f32+0x478>
 800c898:	4486      	add	lr, r0
 800c89a:	b1d1      	cbz	r1, 800c8d2 <arm_conv_f32+0x4fe>
 800c89c:	ed99 7a00 	vldr	s14, [r9]
 800c8a0:	edde 6a00 	vldr	s13, [lr]
 800c8a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c8a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8ac:	b18c      	cbz	r4, 800c8d2 <arm_conv_f32+0x4fe>
 800c8ae:	ed19 7a01 	vldr	s14, [r9, #-4]
 800c8b2:	edde 6a01 	vldr	s13, [lr, #4]
 800c8b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c8ba:	2c01      	cmp	r4, #1
 800c8bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8c0:	d007      	beq.n	800c8d2 <arm_conv_f32+0x4fe>
 800c8c2:	ed9e 7a02 	vldr	s14, [lr, #8]
 800c8c6:	ed59 6a02 	vldr	s13, [r9, #-8]
 800c8ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c8ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8d2:	ece5 7a01 	vstmia	r5!, {s15}
 800c8d6:	4565      	cmp	r5, ip
 800c8d8:	46c6      	mov	lr, r8
 800c8da:	f108 0804 	add.w	r8, r8, #4
 800c8de:	d1af      	bne.n	800c840 <arm_conv_f32+0x46c>
 800c8e0:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800c8e4:	4659      	mov	r1, fp
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c8ec:	e71c      	b.n	800c728 <arm_conv_f32+0x354>
 800c8ee:	4686      	mov	lr, r0
 800c8f0:	e785      	b.n	800c7fe <arm_conv_f32+0x42a>
 800c8f2:	46ac      	mov	ip, r5
 800c8f4:	e7f7      	b.n	800c8e6 <arm_conv_f32+0x512>
 800c8f6:	9a01      	ldr	r2, [sp, #4]
 800c8f8:	2a00      	cmp	r2, #0
 800c8fa:	f47f aedd 	bne.w	800c6b8 <arm_conv_f32+0x2e4>
 800c8fe:	e76d      	b.n	800c7dc <arm_conv_f32+0x408>
 800c900:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800c6c8 <arm_conv_f32+0x2f4>
 800c904:	4680      	mov	r8, r0
 800c906:	e5e3      	b.n	800c4d0 <arm_conv_f32+0xfc>

0800c908 <memset>:
 800c908:	4402      	add	r2, r0
 800c90a:	4603      	mov	r3, r0
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d100      	bne.n	800c912 <memset+0xa>
 800c910:	4770      	bx	lr
 800c912:	f803 1b01 	strb.w	r1, [r3], #1
 800c916:	e7f9      	b.n	800c90c <memset+0x4>

0800c918 <__errno>:
 800c918:	4b01      	ldr	r3, [pc, #4]	@ (800c920 <__errno+0x8>)
 800c91a:	6818      	ldr	r0, [r3, #0]
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	24000414 	.word	0x24000414

0800c924 <__libc_init_array>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	4d0d      	ldr	r5, [pc, #52]	@ (800c95c <__libc_init_array+0x38>)
 800c928:	4c0d      	ldr	r4, [pc, #52]	@ (800c960 <__libc_init_array+0x3c>)
 800c92a:	1b64      	subs	r4, r4, r5
 800c92c:	10a4      	asrs	r4, r4, #2
 800c92e:	2600      	movs	r6, #0
 800c930:	42a6      	cmp	r6, r4
 800c932:	d109      	bne.n	800c948 <__libc_init_array+0x24>
 800c934:	4d0b      	ldr	r5, [pc, #44]	@ (800c964 <__libc_init_array+0x40>)
 800c936:	4c0c      	ldr	r4, [pc, #48]	@ (800c968 <__libc_init_array+0x44>)
 800c938:	f001 f806 	bl	800d948 <_init>
 800c93c:	1b64      	subs	r4, r4, r5
 800c93e:	10a4      	asrs	r4, r4, #2
 800c940:	2600      	movs	r6, #0
 800c942:	42a6      	cmp	r6, r4
 800c944:	d105      	bne.n	800c952 <__libc_init_array+0x2e>
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	f855 3b04 	ldr.w	r3, [r5], #4
 800c94c:	4798      	blx	r3
 800c94e:	3601      	adds	r6, #1
 800c950:	e7ee      	b.n	800c930 <__libc_init_array+0xc>
 800c952:	f855 3b04 	ldr.w	r3, [r5], #4
 800c956:	4798      	blx	r3
 800c958:	3601      	adds	r6, #1
 800c95a:	e7f2      	b.n	800c942 <__libc_init_array+0x1e>
 800c95c:	0800db90 	.word	0x0800db90
 800c960:	0800db90 	.word	0x0800db90
 800c964:	0800db90 	.word	0x0800db90
 800c968:	0800db94 	.word	0x0800db94
 800c96c:	00000000 	.word	0x00000000

0800c970 <remainder>:
 800c970:	b508      	push	{r3, lr}
 800c972:	ed2d 8b04 	vpush	{d8-d9}
 800c976:	eeb0 8b41 	vmov.f64	d8, d1
 800c97a:	f000 fad9 	bl	800cf30 <__ieee754_remainder>
 800c97e:	eeb4 8b48 	vcmp.f64	d8, d8
 800c982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c986:	d60c      	bvs.n	800c9a2 <remainder+0x32>
 800c988:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800c9a8 <remainder+0x38>
 800c98c:	eeb4 8b49 	vcmp.f64	d8, d9
 800c990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c994:	d105      	bne.n	800c9a2 <remainder+0x32>
 800c996:	f7ff ffbf 	bl	800c918 <__errno>
 800c99a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800c99e:	2321      	movs	r3, #33	@ 0x21
 800c9a0:	6003      	str	r3, [r0, #0]
 800c9a2:	ecbd 8b04 	vpop	{d8-d9}
 800c9a6:	bd08      	pop	{r3, pc}
	...

0800c9b0 <sqrt>:
 800c9b0:	b508      	push	{r3, lr}
 800c9b2:	ed2d 8b04 	vpush	{d8-d9}
 800c9b6:	eeb0 8b40 	vmov.f64	d8, d0
 800c9ba:	f000 f8b1 	bl	800cb20 <__ieee754_sqrt>
 800c9be:	eeb4 8b48 	vcmp.f64	d8, d8
 800c9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c6:	d60c      	bvs.n	800c9e2 <sqrt+0x32>
 800c9c8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800c9e8 <sqrt+0x38>
 800c9cc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800c9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9d4:	d505      	bpl.n	800c9e2 <sqrt+0x32>
 800c9d6:	f7ff ff9f 	bl	800c918 <__errno>
 800c9da:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800c9de:	2321      	movs	r3, #33	@ 0x21
 800c9e0:	6003      	str	r3, [r0, #0]
 800c9e2:	ecbd 8b04 	vpop	{d8-d9}
 800c9e6:	bd08      	pop	{r3, pc}
	...

0800c9f0 <cos>:
 800c9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9f2:	eeb0 7b40 	vmov.f64	d7, d0
 800c9f6:	ee17 3a90 	vmov	r3, s15
 800c9fa:	4a21      	ldr	r2, [pc, #132]	@ (800ca80 <cos+0x90>)
 800c9fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d806      	bhi.n	800ca12 <cos+0x22>
 800ca04:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800ca78 <cos+0x88>
 800ca08:	b005      	add	sp, #20
 800ca0a:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca0e:	f000 b88b 	b.w	800cb28 <__kernel_cos>
 800ca12:	4a1c      	ldr	r2, [pc, #112]	@ (800ca84 <cos+0x94>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d904      	bls.n	800ca22 <cos+0x32>
 800ca18:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ca1c:	b005      	add	sp, #20
 800ca1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca22:	4668      	mov	r0, sp
 800ca24:	f000 f940 	bl	800cca8 <__ieee754_rem_pio2>
 800ca28:	f000 0003 	and.w	r0, r0, #3
 800ca2c:	2801      	cmp	r0, #1
 800ca2e:	d009      	beq.n	800ca44 <cos+0x54>
 800ca30:	2802      	cmp	r0, #2
 800ca32:	d010      	beq.n	800ca56 <cos+0x66>
 800ca34:	b9b0      	cbnz	r0, 800ca64 <cos+0x74>
 800ca36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca3a:	ed9d 0b00 	vldr	d0, [sp]
 800ca3e:	f000 f873 	bl	800cb28 <__kernel_cos>
 800ca42:	e7eb      	b.n	800ca1c <cos+0x2c>
 800ca44:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca48:	ed9d 0b00 	vldr	d0, [sp]
 800ca4c:	f000 f8d4 	bl	800cbf8 <__kernel_sin>
 800ca50:	eeb1 0b40 	vneg.f64	d0, d0
 800ca54:	e7e2      	b.n	800ca1c <cos+0x2c>
 800ca56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca5a:	ed9d 0b00 	vldr	d0, [sp]
 800ca5e:	f000 f863 	bl	800cb28 <__kernel_cos>
 800ca62:	e7f5      	b.n	800ca50 <cos+0x60>
 800ca64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca68:	ed9d 0b00 	vldr	d0, [sp]
 800ca6c:	2001      	movs	r0, #1
 800ca6e:	f000 f8c3 	bl	800cbf8 <__kernel_sin>
 800ca72:	e7d3      	b.n	800ca1c <cos+0x2c>
 800ca74:	f3af 8000 	nop.w
	...
 800ca80:	3fe921fb 	.word	0x3fe921fb
 800ca84:	7fefffff 	.word	0x7fefffff

0800ca88 <sin>:
 800ca88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca8a:	eeb0 7b40 	vmov.f64	d7, d0
 800ca8e:	ee17 3a90 	vmov	r3, s15
 800ca92:	4a21      	ldr	r2, [pc, #132]	@ (800cb18 <sin+0x90>)
 800ca94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d807      	bhi.n	800caac <sin+0x24>
 800ca9c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800cb10 <sin+0x88>
 800caa0:	2000      	movs	r0, #0
 800caa2:	b005      	add	sp, #20
 800caa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800caa8:	f000 b8a6 	b.w	800cbf8 <__kernel_sin>
 800caac:	4a1b      	ldr	r2, [pc, #108]	@ (800cb1c <sin+0x94>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d904      	bls.n	800cabc <sin+0x34>
 800cab2:	ee30 0b40 	vsub.f64	d0, d0, d0
 800cab6:	b005      	add	sp, #20
 800cab8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cabc:	4668      	mov	r0, sp
 800cabe:	f000 f8f3 	bl	800cca8 <__ieee754_rem_pio2>
 800cac2:	f000 0003 	and.w	r0, r0, #3
 800cac6:	2801      	cmp	r0, #1
 800cac8:	d00a      	beq.n	800cae0 <sin+0x58>
 800caca:	2802      	cmp	r0, #2
 800cacc:	d00f      	beq.n	800caee <sin+0x66>
 800cace:	b9c0      	cbnz	r0, 800cb02 <sin+0x7a>
 800cad0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cad4:	ed9d 0b00 	vldr	d0, [sp]
 800cad8:	2001      	movs	r0, #1
 800cada:	f000 f88d 	bl	800cbf8 <__kernel_sin>
 800cade:	e7ea      	b.n	800cab6 <sin+0x2e>
 800cae0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cae4:	ed9d 0b00 	vldr	d0, [sp]
 800cae8:	f000 f81e 	bl	800cb28 <__kernel_cos>
 800caec:	e7e3      	b.n	800cab6 <sin+0x2e>
 800caee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800caf2:	ed9d 0b00 	vldr	d0, [sp]
 800caf6:	2001      	movs	r0, #1
 800caf8:	f000 f87e 	bl	800cbf8 <__kernel_sin>
 800cafc:	eeb1 0b40 	vneg.f64	d0, d0
 800cb00:	e7d9      	b.n	800cab6 <sin+0x2e>
 800cb02:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb06:	ed9d 0b00 	vldr	d0, [sp]
 800cb0a:	f000 f80d 	bl	800cb28 <__kernel_cos>
 800cb0e:	e7f5      	b.n	800cafc <sin+0x74>
	...
 800cb18:	3fe921fb 	.word	0x3fe921fb
 800cb1c:	7fefffff 	.word	0x7fefffff

0800cb20 <__ieee754_sqrt>:
 800cb20:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800cb24:	4770      	bx	lr
	...

0800cb28 <__kernel_cos>:
 800cb28:	eeb0 5b40 	vmov.f64	d5, d0
 800cb2c:	ee15 1a90 	vmov	r1, s11
 800cb30:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cb34:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800cb38:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800cb3c:	d204      	bcs.n	800cb48 <__kernel_cos+0x20>
 800cb3e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800cb42:	ee17 3a90 	vmov	r3, s15
 800cb46:	b343      	cbz	r3, 800cb9a <__kernel_cos+0x72>
 800cb48:	ee25 6b05 	vmul.f64	d6, d5, d5
 800cb4c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800cb50:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800cbc0 <__kernel_cos+0x98>
 800cb54:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800cbc8 <__kernel_cos+0xa0>
 800cb58:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cb5c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cbd0 <__kernel_cos+0xa8>
 800cb60:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cb64:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800cbd8 <__kernel_cos+0xb0>
 800cb68:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cb6c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cbe0 <__kernel_cos+0xb8>
 800cb70:	4b1f      	ldr	r3, [pc, #124]	@ (800cbf0 <__kernel_cos+0xc8>)
 800cb72:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cb76:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800cbe8 <__kernel_cos+0xc0>
 800cb7a:	4299      	cmp	r1, r3
 800cb7c:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cb80:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800cb84:	ee24 4b06 	vmul.f64	d4, d4, d6
 800cb88:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cb8c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800cb90:	d804      	bhi.n	800cb9c <__kernel_cos+0x74>
 800cb92:	ee37 7b41 	vsub.f64	d7, d7, d1
 800cb96:	ee30 0b47 	vsub.f64	d0, d0, d7
 800cb9a:	4770      	bx	lr
 800cb9c:	4b15      	ldr	r3, [pc, #84]	@ (800cbf4 <__kernel_cos+0xcc>)
 800cb9e:	4299      	cmp	r1, r3
 800cba0:	d809      	bhi.n	800cbb6 <__kernel_cos+0x8e>
 800cba2:	2200      	movs	r2, #0
 800cba4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800cba8:	ec43 2b16 	vmov	d6, r2, r3
 800cbac:	ee30 0b46 	vsub.f64	d0, d0, d6
 800cbb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cbb4:	e7ed      	b.n	800cb92 <__kernel_cos+0x6a>
 800cbb6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800cbba:	e7f7      	b.n	800cbac <__kernel_cos+0x84>
 800cbbc:	f3af 8000 	nop.w
 800cbc0:	be8838d4 	.word	0xbe8838d4
 800cbc4:	bda8fae9 	.word	0xbda8fae9
 800cbc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800cbcc:	3e21ee9e 	.word	0x3e21ee9e
 800cbd0:	809c52ad 	.word	0x809c52ad
 800cbd4:	be927e4f 	.word	0xbe927e4f
 800cbd8:	19cb1590 	.word	0x19cb1590
 800cbdc:	3efa01a0 	.word	0x3efa01a0
 800cbe0:	16c15177 	.word	0x16c15177
 800cbe4:	bf56c16c 	.word	0xbf56c16c
 800cbe8:	5555554c 	.word	0x5555554c
 800cbec:	3fa55555 	.word	0x3fa55555
 800cbf0:	3fd33332 	.word	0x3fd33332
 800cbf4:	3fe90000 	.word	0x3fe90000

0800cbf8 <__kernel_sin>:
 800cbf8:	ee10 3a90 	vmov	r3, s1
 800cbfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc00:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800cc04:	d204      	bcs.n	800cc10 <__kernel_sin+0x18>
 800cc06:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800cc0a:	ee17 3a90 	vmov	r3, s15
 800cc0e:	b35b      	cbz	r3, 800cc68 <__kernel_sin+0x70>
 800cc10:	ee20 6b00 	vmul.f64	d6, d0, d0
 800cc14:	ee20 5b06 	vmul.f64	d5, d0, d6
 800cc18:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800cc70 <__kernel_sin+0x78>
 800cc1c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800cc78 <__kernel_sin+0x80>
 800cc20:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cc24:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800cc80 <__kernel_sin+0x88>
 800cc28:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cc2c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800cc88 <__kernel_sin+0x90>
 800cc30:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cc34:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800cc90 <__kernel_sin+0x98>
 800cc38:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cc3c:	b930      	cbnz	r0, 800cc4c <__kernel_sin+0x54>
 800cc3e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800cc98 <__kernel_sin+0xa0>
 800cc42:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cc46:	eea4 0b05 	vfma.f64	d0, d4, d5
 800cc4a:	4770      	bx	lr
 800cc4c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800cc50:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800cc54:	eea1 7b04 	vfma.f64	d7, d1, d4
 800cc58:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800cc5c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800cca0 <__kernel_sin+0xa8>
 800cc60:	eea5 1b07 	vfma.f64	d1, d5, d7
 800cc64:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	f3af 8000 	nop.w
 800cc70:	5acfd57c 	.word	0x5acfd57c
 800cc74:	3de5d93a 	.word	0x3de5d93a
 800cc78:	8a2b9ceb 	.word	0x8a2b9ceb
 800cc7c:	be5ae5e6 	.word	0xbe5ae5e6
 800cc80:	57b1fe7d 	.word	0x57b1fe7d
 800cc84:	3ec71de3 	.word	0x3ec71de3
 800cc88:	19c161d5 	.word	0x19c161d5
 800cc8c:	bf2a01a0 	.word	0xbf2a01a0
 800cc90:	1110f8a6 	.word	0x1110f8a6
 800cc94:	3f811111 	.word	0x3f811111
 800cc98:	55555549 	.word	0x55555549
 800cc9c:	bfc55555 	.word	0xbfc55555
 800cca0:	55555549 	.word	0x55555549
 800cca4:	3fc55555 	.word	0x3fc55555

0800cca8 <__ieee754_rem_pio2>:
 800cca8:	b570      	push	{r4, r5, r6, lr}
 800ccaa:	eeb0 7b40 	vmov.f64	d7, d0
 800ccae:	ee17 5a90 	vmov	r5, s15
 800ccb2:	4b99      	ldr	r3, [pc, #612]	@ (800cf18 <__ieee754_rem_pio2+0x270>)
 800ccb4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ccb8:	429e      	cmp	r6, r3
 800ccba:	b088      	sub	sp, #32
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	d807      	bhi.n	800ccd0 <__ieee754_rem_pio2+0x28>
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	ed84 0b00 	vstr	d0, [r4]
 800ccc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cccc:	2000      	movs	r0, #0
 800ccce:	e01b      	b.n	800cd08 <__ieee754_rem_pio2+0x60>
 800ccd0:	4b92      	ldr	r3, [pc, #584]	@ (800cf1c <__ieee754_rem_pio2+0x274>)
 800ccd2:	429e      	cmp	r6, r3
 800ccd4:	d83b      	bhi.n	800cd4e <__ieee754_rem_pio2+0xa6>
 800ccd6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800ccda:	2d00      	cmp	r5, #0
 800ccdc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ced8 <__ieee754_rem_pio2+0x230>
 800cce0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800cce4:	dd19      	ble.n	800cd1a <__ieee754_rem_pio2+0x72>
 800cce6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ccea:	429e      	cmp	r6, r3
 800ccec:	d00e      	beq.n	800cd0c <__ieee754_rem_pio2+0x64>
 800ccee:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800cee0 <__ieee754_rem_pio2+0x238>
 800ccf2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800ccf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ccfa:	ed84 6b00 	vstr	d6, [r4]
 800ccfe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800cd02:	ed84 7b02 	vstr	d7, [r4, #8]
 800cd06:	2001      	movs	r0, #1
 800cd08:	b008      	add	sp, #32
 800cd0a:	bd70      	pop	{r4, r5, r6, pc}
 800cd0c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800cee8 <__ieee754_rem_pio2+0x240>
 800cd10:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800cef0 <__ieee754_rem_pio2+0x248>
 800cd14:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd18:	e7eb      	b.n	800ccf2 <__ieee754_rem_pio2+0x4a>
 800cd1a:	429e      	cmp	r6, r3
 800cd1c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800cd20:	d00e      	beq.n	800cd40 <__ieee754_rem_pio2+0x98>
 800cd22:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800cee0 <__ieee754_rem_pio2+0x238>
 800cd26:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cd2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd2e:	ed84 6b00 	vstr	d6, [r4]
 800cd32:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cd36:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3a:	ed84 7b02 	vstr	d7, [r4, #8]
 800cd3e:	e7e3      	b.n	800cd08 <__ieee754_rem_pio2+0x60>
 800cd40:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800cee8 <__ieee754_rem_pio2+0x240>
 800cd44:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800cef0 <__ieee754_rem_pio2+0x248>
 800cd48:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd4c:	e7eb      	b.n	800cd26 <__ieee754_rem_pio2+0x7e>
 800cd4e:	4b74      	ldr	r3, [pc, #464]	@ (800cf20 <__ieee754_rem_pio2+0x278>)
 800cd50:	429e      	cmp	r6, r3
 800cd52:	d870      	bhi.n	800ce36 <__ieee754_rem_pio2+0x18e>
 800cd54:	f000 f96e 	bl	800d034 <fabs>
 800cd58:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800cd5c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800cef8 <__ieee754_rem_pio2+0x250>
 800cd60:	eea0 7b06 	vfma.f64	d7, d0, d6
 800cd64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800cd68:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800cd6c:	ee17 0a90 	vmov	r0, s15
 800cd70:	eeb1 4b45 	vneg.f64	d4, d5
 800cd74:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ced8 <__ieee754_rem_pio2+0x230>
 800cd78:	eea5 0b47 	vfms.f64	d0, d5, d7
 800cd7c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800cee0 <__ieee754_rem_pio2+0x238>
 800cd80:	281f      	cmp	r0, #31
 800cd82:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cd86:	ee30 6b47 	vsub.f64	d6, d0, d7
 800cd8a:	dc05      	bgt.n	800cd98 <__ieee754_rem_pio2+0xf0>
 800cd8c:	4b65      	ldr	r3, [pc, #404]	@ (800cf24 <__ieee754_rem_pio2+0x27c>)
 800cd8e:	1e42      	subs	r2, r0, #1
 800cd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd94:	42b3      	cmp	r3, r6
 800cd96:	d109      	bne.n	800cdac <__ieee754_rem_pio2+0x104>
 800cd98:	ee16 3a90 	vmov	r3, s13
 800cd9c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800cda0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800cda4:	2b10      	cmp	r3, #16
 800cda6:	ea4f 5226 	mov.w	r2, r6, asr #20
 800cdaa:	dc02      	bgt.n	800cdb2 <__ieee754_rem_pio2+0x10a>
 800cdac:	ed84 6b00 	vstr	d6, [r4]
 800cdb0:	e01a      	b.n	800cde8 <__ieee754_rem_pio2+0x140>
 800cdb2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800cee8 <__ieee754_rem_pio2+0x240>
 800cdb6:	eeb0 6b40 	vmov.f64	d6, d0
 800cdba:	eea4 6b03 	vfma.f64	d6, d4, d3
 800cdbe:	ee30 7b46 	vsub.f64	d7, d0, d6
 800cdc2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800cdc6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800cef0 <__ieee754_rem_pio2+0x248>
 800cdca:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800cdce:	ee36 3b47 	vsub.f64	d3, d6, d7
 800cdd2:	ee13 3a90 	vmov	r3, s7
 800cdd6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	2b31      	cmp	r3, #49	@ 0x31
 800cdde:	dc17      	bgt.n	800ce10 <__ieee754_rem_pio2+0x168>
 800cde0:	eeb0 0b46 	vmov.f64	d0, d6
 800cde4:	ed84 3b00 	vstr	d3, [r4]
 800cde8:	ed94 6b00 	vldr	d6, [r4]
 800cdec:	2d00      	cmp	r5, #0
 800cdee:	ee30 0b46 	vsub.f64	d0, d0, d6
 800cdf2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800cdf6:	ed84 0b02 	vstr	d0, [r4, #8]
 800cdfa:	da85      	bge.n	800cd08 <__ieee754_rem_pio2+0x60>
 800cdfc:	eeb1 6b46 	vneg.f64	d6, d6
 800ce00:	eeb1 0b40 	vneg.f64	d0, d0
 800ce04:	ed84 6b00 	vstr	d6, [r4]
 800ce08:	ed84 0b02 	vstr	d0, [r4, #8]
 800ce0c:	4240      	negs	r0, r0
 800ce0e:	e77b      	b.n	800cd08 <__ieee754_rem_pio2+0x60>
 800ce10:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800cf00 <__ieee754_rem_pio2+0x258>
 800ce14:	eeb0 0b46 	vmov.f64	d0, d6
 800ce18:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ce1c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800ce20:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ce24:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800cf08 <__ieee754_rem_pio2+0x260>
 800ce28:	eeb0 7b46 	vmov.f64	d7, d6
 800ce2c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800ce30:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ce34:	e7ba      	b.n	800cdac <__ieee754_rem_pio2+0x104>
 800ce36:	4b3c      	ldr	r3, [pc, #240]	@ (800cf28 <__ieee754_rem_pio2+0x280>)
 800ce38:	429e      	cmp	r6, r3
 800ce3a:	d906      	bls.n	800ce4a <__ieee754_rem_pio2+0x1a2>
 800ce3c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ce40:	ed80 7b02 	vstr	d7, [r0, #8]
 800ce44:	ed80 7b00 	vstr	d7, [r0]
 800ce48:	e740      	b.n	800cccc <__ieee754_rem_pio2+0x24>
 800ce4a:	ee10 3a10 	vmov	r3, s0
 800ce4e:	1532      	asrs	r2, r6, #20
 800ce50:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800ce54:	4618      	mov	r0, r3
 800ce56:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ce5a:	ec41 0b17 	vmov	d7, r0, r1
 800ce5e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ce62:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800cf10 <__ieee754_rem_pio2+0x268>
 800ce66:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ce6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ce72:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ce76:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ce7a:	a808      	add	r0, sp, #32
 800ce7c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ce80:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce84:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ce88:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ce8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce90:	2103      	movs	r1, #3
 800ce92:	ed30 7b02 	vldmdb	r0!, {d7}
 800ce96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9e:	460b      	mov	r3, r1
 800cea0:	f101 31ff 	add.w	r1, r1, #4294967295
 800cea4:	d0f5      	beq.n	800ce92 <__ieee754_rem_pio2+0x1ea>
 800cea6:	4921      	ldr	r1, [pc, #132]	@ (800cf2c <__ieee754_rem_pio2+0x284>)
 800cea8:	9101      	str	r1, [sp, #4]
 800ceaa:	2102      	movs	r1, #2
 800ceac:	9100      	str	r1, [sp, #0]
 800ceae:	a802      	add	r0, sp, #8
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	f000 f8c9 	bl	800d048 <__kernel_rem_pio2>
 800ceb6:	2d00      	cmp	r5, #0
 800ceb8:	f6bf af26 	bge.w	800cd08 <__ieee754_rem_pio2+0x60>
 800cebc:	ed94 7b00 	vldr	d7, [r4]
 800cec0:	eeb1 7b47 	vneg.f64	d7, d7
 800cec4:	ed84 7b00 	vstr	d7, [r4]
 800cec8:	ed94 7b02 	vldr	d7, [r4, #8]
 800cecc:	eeb1 7b47 	vneg.f64	d7, d7
 800ced0:	ed84 7b02 	vstr	d7, [r4, #8]
 800ced4:	e79a      	b.n	800ce0c <__ieee754_rem_pio2+0x164>
 800ced6:	bf00      	nop
 800ced8:	54400000 	.word	0x54400000
 800cedc:	3ff921fb 	.word	0x3ff921fb
 800cee0:	1a626331 	.word	0x1a626331
 800cee4:	3dd0b461 	.word	0x3dd0b461
 800cee8:	1a600000 	.word	0x1a600000
 800ceec:	3dd0b461 	.word	0x3dd0b461
 800cef0:	2e037073 	.word	0x2e037073
 800cef4:	3ba3198a 	.word	0x3ba3198a
 800cef8:	6dc9c883 	.word	0x6dc9c883
 800cefc:	3fe45f30 	.word	0x3fe45f30
 800cf00:	2e000000 	.word	0x2e000000
 800cf04:	3ba3198a 	.word	0x3ba3198a
 800cf08:	252049c1 	.word	0x252049c1
 800cf0c:	397b839a 	.word	0x397b839a
 800cf10:	00000000 	.word	0x00000000
 800cf14:	41700000 	.word	0x41700000
 800cf18:	3fe921fb 	.word	0x3fe921fb
 800cf1c:	4002d97b 	.word	0x4002d97b
 800cf20:	413921fb 	.word	0x413921fb
 800cf24:	0800d9a0 	.word	0x0800d9a0
 800cf28:	7fefffff 	.word	0x7fefffff
 800cf2c:	0800da20 	.word	0x0800da20

0800cf30 <__ieee754_remainder>:
 800cf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf34:	ed2d 8b04 	vpush	{d8-d9}
 800cf38:	eeb0 9b41 	vmov.f64	d9, d1
 800cf3c:	eeb0 8b40 	vmov.f64	d8, d0
 800cf40:	ee19 7a90 	vmov	r7, s19
 800cf44:	ee11 8a10 	vmov	r8, s2
 800cf48:	f027 4600 	bic.w	r6, r7, #2147483648	@ 0x80000000
 800cf4c:	ea56 0308 	orrs.w	r3, r6, r8
 800cf50:	d107      	bne.n	800cf62 <__ieee754_remainder+0x32>
 800cf52:	ee28 8b09 	vmul.f64	d8, d8, d9
 800cf56:	ee88 0b08 	vdiv.f64	d0, d8, d8
 800cf5a:	ecbd 8b04 	vpop	{d8-d9}
 800cf5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf62:	ee18 5a90 	vmov	r5, s17
 800cf66:	4b30      	ldr	r3, [pc, #192]	@ (800d028 <__ieee754_remainder+0xf8>)
 800cf68:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cf6c:	429c      	cmp	r4, r3
 800cf6e:	d8f0      	bhi.n	800cf52 <__ieee754_remainder+0x22>
 800cf70:	429e      	cmp	r6, r3
 800cf72:	d909      	bls.n	800cf88 <__ieee754_remainder+0x58>
 800cf74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cf78:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800cf7c:	ea53 0308 	orrs.w	r3, r3, r8
 800cf80:	d1e7      	bne.n	800cf52 <__ieee754_remainder+0x22>
 800cf82:	eeb0 0b48 	vmov.f64	d0, d8
 800cf86:	e006      	b.n	800cf96 <__ieee754_remainder+0x66>
 800cf88:	4b28      	ldr	r3, [pc, #160]	@ (800d02c <__ieee754_remainder+0xfc>)
 800cf8a:	429e      	cmp	r6, r3
 800cf8c:	d8f9      	bhi.n	800cf82 <__ieee754_remainder+0x52>
 800cf8e:	ee31 1b01 	vadd.f64	d1, d1, d1
 800cf92:	f000 fad5 	bl	800d540 <__ieee754_fmod>
 800cf96:	ee18 3a10 	vmov	r3, s16
 800cf9a:	1ba4      	subs	r4, r4, r6
 800cf9c:	eba3 0308 	sub.w	r3, r3, r8
 800cfa0:	431c      	orrs	r4, r3
 800cfa2:	d104      	bne.n	800cfae <__ieee754_remainder+0x7e>
 800cfa4:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 800d020 <__ieee754_remainder+0xf0>
 800cfa8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cfac:	e7d5      	b.n	800cf5a <__ieee754_remainder+0x2a>
 800cfae:	f000 f841 	bl	800d034 <fabs>
 800cfb2:	eeb0 8b40 	vmov.f64	d8, d0
 800cfb6:	eeb0 0b49 	vmov.f64	d0, d9
 800cfba:	f000 f83b 	bl	800d034 <fabs>
 800cfbe:	4b1c      	ldr	r3, [pc, #112]	@ (800d030 <__ieee754_remainder+0x100>)
 800cfc0:	403b      	ands	r3, r7
 800cfc2:	b993      	cbnz	r3, 800cfea <__ieee754_remainder+0xba>
 800cfc4:	ee38 7b08 	vadd.f64	d7, d8, d8
 800cfc8:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800cfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd0:	dd1b      	ble.n	800d00a <__ieee754_remainder+0xda>
 800cfd2:	ee38 8b40 	vsub.f64	d8, d8, d0
 800cfd6:	ee38 7b08 	vadd.f64	d7, d8, d8
 800cfda:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800cfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe2:	db12      	blt.n	800d00a <__ieee754_remainder+0xda>
 800cfe4:	ee38 8b40 	vsub.f64	d8, d8, d0
 800cfe8:	e00f      	b.n	800d00a <__ieee754_remainder+0xda>
 800cfea:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800cfee:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cff2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cffa:	dd06      	ble.n	800d00a <__ieee754_remainder+0xda>
 800cffc:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d000:	eeb4 7bc8 	vcmpe.f64	d7, d8
 800d004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d008:	d9ec      	bls.n	800cfe4 <__ieee754_remainder+0xb4>
 800d00a:	ee18 1a90 	vmov	r1, s17
 800d00e:	ec53 2b18 	vmov	r2, r3, d8
 800d012:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 800d016:	ea85 0301 	eor.w	r3, r5, r1
 800d01a:	ec43 2b10 	vmov	d0, r2, r3
 800d01e:	e79c      	b.n	800cf5a <__ieee754_remainder+0x2a>
	...
 800d028:	7fefffff 	.word	0x7fefffff
 800d02c:	7fdfffff 	.word	0x7fdfffff
 800d030:	7fe00000 	.word	0x7fe00000

0800d034 <fabs>:
 800d034:	ec51 0b10 	vmov	r0, r1, d0
 800d038:	4602      	mov	r2, r0
 800d03a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d03e:	ec43 2b10 	vmov	d0, r2, r3
 800d042:	4770      	bx	lr
 800d044:	0000      	movs	r0, r0
	...

0800d048 <__kernel_rem_pio2>:
 800d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	ed2d 8b06 	vpush	{d8-d10}
 800d050:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800d054:	469b      	mov	fp, r3
 800d056:	9001      	str	r0, [sp, #4]
 800d058:	4bbb      	ldr	r3, [pc, #748]	@ (800d348 <__kernel_rem_pio2+0x300>)
 800d05a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800d05c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800d060:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800d064:	f112 0f14 	cmn.w	r2, #20
 800d068:	bfa8      	it	ge
 800d06a:	1ed3      	subge	r3, r2, #3
 800d06c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d070:	bfb8      	it	lt
 800d072:	2300      	movlt	r3, #0
 800d074:	f06f 0517 	mvn.w	r5, #23
 800d078:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800d330 <__kernel_rem_pio2+0x2e8>
 800d07c:	bfa4      	itt	ge
 800d07e:	2018      	movge	r0, #24
 800d080:	fb93 f3f0 	sdivge	r3, r3, r0
 800d084:	fb03 5505 	mla	r5, r3, r5, r5
 800d088:	eba3 040a 	sub.w	r4, r3, sl
 800d08c:	4415      	add	r5, r2
 800d08e:	460f      	mov	r7, r1
 800d090:	eb09 060a 	add.w	r6, r9, sl
 800d094:	a81a      	add	r0, sp, #104	@ 0x68
 800d096:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800d09a:	2200      	movs	r2, #0
 800d09c:	42b2      	cmp	r2, r6
 800d09e:	dd0e      	ble.n	800d0be <__kernel_rem_pio2+0x76>
 800d0a0:	aa1a      	add	r2, sp, #104	@ 0x68
 800d0a2:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800d0a6:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800d0aa:	2600      	movs	r6, #0
 800d0ac:	454e      	cmp	r6, r9
 800d0ae:	dc25      	bgt.n	800d0fc <__kernel_rem_pio2+0xb4>
 800d0b0:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800d330 <__kernel_rem_pio2+0x2e8>
 800d0b4:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d0b8:	4614      	mov	r4, r2
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	e015      	b.n	800d0ea <__kernel_rem_pio2+0xa2>
 800d0be:	42d4      	cmn	r4, r2
 800d0c0:	d409      	bmi.n	800d0d6 <__kernel_rem_pio2+0x8e>
 800d0c2:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800d0c6:	ee07 1a90 	vmov	s15, r1
 800d0ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d0ce:	eca0 7b02 	vstmia	r0!, {d7}
 800d0d2:	3201      	adds	r2, #1
 800d0d4:	e7e2      	b.n	800d09c <__kernel_rem_pio2+0x54>
 800d0d6:	eeb0 7b46 	vmov.f64	d7, d6
 800d0da:	e7f8      	b.n	800d0ce <__kernel_rem_pio2+0x86>
 800d0dc:	ecbc 5b02 	vldmia	ip!, {d5}
 800d0e0:	ed94 6b00 	vldr	d6, [r4]
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d0ea:	4550      	cmp	r0, sl
 800d0ec:	f1a4 0408 	sub.w	r4, r4, #8
 800d0f0:	ddf4      	ble.n	800d0dc <__kernel_rem_pio2+0x94>
 800d0f2:	ecae 7b02 	vstmia	lr!, {d7}
 800d0f6:	3601      	adds	r6, #1
 800d0f8:	3208      	adds	r2, #8
 800d0fa:	e7d7      	b.n	800d0ac <__kernel_rem_pio2+0x64>
 800d0fc:	aa06      	add	r2, sp, #24
 800d0fe:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800d338 <__kernel_rem_pio2+0x2f0>
 800d102:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800d340 <__kernel_rem_pio2+0x2f8>
 800d106:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800d10a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800d10e:	9203      	str	r2, [sp, #12]
 800d110:	9302      	str	r3, [sp, #8]
 800d112:	464c      	mov	r4, r9
 800d114:	00e3      	lsls	r3, r4, #3
 800d116:	9304      	str	r3, [sp, #16]
 800d118:	ab92      	add	r3, sp, #584	@ 0x248
 800d11a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d11e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800d122:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800d124:	ab06      	add	r3, sp, #24
 800d126:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d12a:	461e      	mov	r6, r3
 800d12c:	4620      	mov	r0, r4
 800d12e:	2800      	cmp	r0, #0
 800d130:	f1a2 0208 	sub.w	r2, r2, #8
 800d134:	dc4a      	bgt.n	800d1cc <__kernel_rem_pio2+0x184>
 800d136:	4628      	mov	r0, r5
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	f000 fb0d 	bl	800d758 <scalbn>
 800d13e:	eeb0 8b40 	vmov.f64	d8, d0
 800d142:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800d146:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d14a:	f000 fb85 	bl	800d858 <floor>
 800d14e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800d152:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d156:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d15a:	2d00      	cmp	r5, #0
 800d15c:	ee17 8a90 	vmov	r8, s15
 800d160:	9b05      	ldr	r3, [sp, #20]
 800d162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d166:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d16a:	dd41      	ble.n	800d1f0 <__kernel_rem_pio2+0x1a8>
 800d16c:	1e60      	subs	r0, r4, #1
 800d16e:	aa06      	add	r2, sp, #24
 800d170:	f1c5 0c18 	rsb	ip, r5, #24
 800d174:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800d178:	fa46 f20c 	asr.w	r2, r6, ip
 800d17c:	4490      	add	r8, r2
 800d17e:	fa02 f20c 	lsl.w	r2, r2, ip
 800d182:	1ab6      	subs	r6, r6, r2
 800d184:	aa06      	add	r2, sp, #24
 800d186:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800d18a:	f1c5 0217 	rsb	r2, r5, #23
 800d18e:	4116      	asrs	r6, r2
 800d190:	2e00      	cmp	r6, #0
 800d192:	dd3c      	ble.n	800d20e <__kernel_rem_pio2+0x1c6>
 800d194:	f04f 0c00 	mov.w	ip, #0
 800d198:	f108 0801 	add.w	r8, r8, #1
 800d19c:	4660      	mov	r0, ip
 800d19e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800d1a2:	4564      	cmp	r4, ip
 800d1a4:	dc66      	bgt.n	800d274 <__kernel_rem_pio2+0x22c>
 800d1a6:	2d00      	cmp	r5, #0
 800d1a8:	dd03      	ble.n	800d1b2 <__kernel_rem_pio2+0x16a>
 800d1aa:	2d01      	cmp	r5, #1
 800d1ac:	d072      	beq.n	800d294 <__kernel_rem_pio2+0x24c>
 800d1ae:	2d02      	cmp	r5, #2
 800d1b0:	d07a      	beq.n	800d2a8 <__kernel_rem_pio2+0x260>
 800d1b2:	2e02      	cmp	r6, #2
 800d1b4:	d12b      	bne.n	800d20e <__kernel_rem_pio2+0x1c6>
 800d1b6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d1ba:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d1be:	b330      	cbz	r0, 800d20e <__kernel_rem_pio2+0x1c6>
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f000 fac9 	bl	800d758 <scalbn>
 800d1c6:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d1ca:	e020      	b.n	800d20e <__kernel_rem_pio2+0x1c6>
 800d1cc:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d1d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d1d4:	3801      	subs	r0, #1
 800d1d6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d1da:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d1de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d1e2:	eca6 0a01 	vstmia	r6!, {s0}
 800d1e6:	ed92 0b00 	vldr	d0, [r2]
 800d1ea:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d1ee:	e79e      	b.n	800d12e <__kernel_rem_pio2+0xe6>
 800d1f0:	d105      	bne.n	800d1fe <__kernel_rem_pio2+0x1b6>
 800d1f2:	1e62      	subs	r2, r4, #1
 800d1f4:	a906      	add	r1, sp, #24
 800d1f6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800d1fa:	15f6      	asrs	r6, r6, #23
 800d1fc:	e7c8      	b.n	800d190 <__kernel_rem_pio2+0x148>
 800d1fe:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d202:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20a:	da31      	bge.n	800d270 <__kernel_rem_pio2+0x228>
 800d20c:	2600      	movs	r6, #0
 800d20e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d216:	f040 809b 	bne.w	800d350 <__kernel_rem_pio2+0x308>
 800d21a:	1e62      	subs	r2, r4, #1
 800d21c:	2000      	movs	r0, #0
 800d21e:	454a      	cmp	r2, r9
 800d220:	da49      	bge.n	800d2b6 <__kernel_rem_pio2+0x26e>
 800d222:	2800      	cmp	r0, #0
 800d224:	d062      	beq.n	800d2ec <__kernel_rem_pio2+0x2a4>
 800d226:	3c01      	subs	r4, #1
 800d228:	ab06      	add	r3, sp, #24
 800d22a:	3d18      	subs	r5, #24
 800d22c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d0f8      	beq.n	800d226 <__kernel_rem_pio2+0x1de>
 800d234:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d238:	4628      	mov	r0, r5
 800d23a:	f000 fa8d 	bl	800d758 <scalbn>
 800d23e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800d338 <__kernel_rem_pio2+0x2f0>
 800d242:	1c62      	adds	r2, r4, #1
 800d244:	a96a      	add	r1, sp, #424	@ 0x1a8
 800d246:	00d3      	lsls	r3, r2, #3
 800d248:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d24c:	4622      	mov	r2, r4
 800d24e:	2a00      	cmp	r2, #0
 800d250:	f280 80a8 	bge.w	800d3a4 <__kernel_rem_pio2+0x35c>
 800d254:	4622      	mov	r2, r4
 800d256:	2a00      	cmp	r2, #0
 800d258:	f2c0 80c6 	blt.w	800d3e8 <__kernel_rem_pio2+0x3a0>
 800d25c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800d25e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d262:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800d330 <__kernel_rem_pio2+0x2e8>
 800d266:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800d34c <__kernel_rem_pio2+0x304>
 800d26a:	2000      	movs	r0, #0
 800d26c:	1aa1      	subs	r1, r4, r2
 800d26e:	e0b0      	b.n	800d3d2 <__kernel_rem_pio2+0x38a>
 800d270:	2602      	movs	r6, #2
 800d272:	e78f      	b.n	800d194 <__kernel_rem_pio2+0x14c>
 800d274:	f853 2b04 	ldr.w	r2, [r3], #4
 800d278:	b948      	cbnz	r0, 800d28e <__kernel_rem_pio2+0x246>
 800d27a:	b122      	cbz	r2, 800d286 <__kernel_rem_pio2+0x23e>
 800d27c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800d280:	f843 2c04 	str.w	r2, [r3, #-4]
 800d284:	2201      	movs	r2, #1
 800d286:	f10c 0c01 	add.w	ip, ip, #1
 800d28a:	4610      	mov	r0, r2
 800d28c:	e789      	b.n	800d1a2 <__kernel_rem_pio2+0x15a>
 800d28e:	ebae 0202 	sub.w	r2, lr, r2
 800d292:	e7f5      	b.n	800d280 <__kernel_rem_pio2+0x238>
 800d294:	1e62      	subs	r2, r4, #1
 800d296:	ab06      	add	r3, sp, #24
 800d298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d29c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d2a0:	a906      	add	r1, sp, #24
 800d2a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d2a6:	e784      	b.n	800d1b2 <__kernel_rem_pio2+0x16a>
 800d2a8:	1e62      	subs	r2, r4, #1
 800d2aa:	ab06      	add	r3, sp, #24
 800d2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d2b4:	e7f4      	b.n	800d2a0 <__kernel_rem_pio2+0x258>
 800d2b6:	ab06      	add	r3, sp, #24
 800d2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2bc:	3a01      	subs	r2, #1
 800d2be:	4318      	orrs	r0, r3
 800d2c0:	e7ad      	b.n	800d21e <__kernel_rem_pio2+0x1d6>
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d0fa      	beq.n	800d2c2 <__kernel_rem_pio2+0x27a>
 800d2cc:	9a04      	ldr	r2, [sp, #16]
 800d2ce:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800d2d2:	446a      	add	r2, sp
 800d2d4:	eb04 000b 	add.w	r0, r4, fp
 800d2d8:	a91a      	add	r1, sp, #104	@ 0x68
 800d2da:	1c66      	adds	r6, r4, #1
 800d2dc:	3a98      	subs	r2, #152	@ 0x98
 800d2de:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800d2e2:	4423      	add	r3, r4
 800d2e4:	42b3      	cmp	r3, r6
 800d2e6:	da04      	bge.n	800d2f2 <__kernel_rem_pio2+0x2aa>
 800d2e8:	461c      	mov	r4, r3
 800d2ea:	e713      	b.n	800d114 <__kernel_rem_pio2+0xcc>
 800d2ec:	9a03      	ldr	r2, [sp, #12]
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e7e8      	b.n	800d2c4 <__kernel_rem_pio2+0x27c>
 800d2f2:	9902      	ldr	r1, [sp, #8]
 800d2f4:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d2f8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800d2fc:	9104      	str	r1, [sp, #16]
 800d2fe:	ee07 1a90 	vmov	s15, r1
 800d302:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d306:	2400      	movs	r4, #0
 800d308:	eca0 7b02 	vstmia	r0!, {d7}
 800d30c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800d330 <__kernel_rem_pio2+0x2e8>
 800d310:	4686      	mov	lr, r0
 800d312:	4554      	cmp	r4, sl
 800d314:	dd03      	ble.n	800d31e <__kernel_rem_pio2+0x2d6>
 800d316:	eca2 7b02 	vstmia	r2!, {d7}
 800d31a:	3601      	adds	r6, #1
 800d31c:	e7e2      	b.n	800d2e4 <__kernel_rem_pio2+0x29c>
 800d31e:	ecbc 5b02 	vldmia	ip!, {d5}
 800d322:	ed3e 6b02 	vldmdb	lr!, {d6}
 800d326:	3401      	adds	r4, #1
 800d328:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d32c:	e7f1      	b.n	800d312 <__kernel_rem_pio2+0x2ca>
 800d32e:	bf00      	nop
	...
 800d33c:	3e700000 	.word	0x3e700000
 800d340:	00000000 	.word	0x00000000
 800d344:	41700000 	.word	0x41700000
 800d348:	0800db68 	.word	0x0800db68
 800d34c:	0800db28 	.word	0x0800db28
 800d350:	4268      	negs	r0, r5
 800d352:	eeb0 0b48 	vmov.f64	d0, d8
 800d356:	f000 f9ff 	bl	800d758 <scalbn>
 800d35a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800d528 <__kernel_rem_pio2+0x4e0>
 800d35e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d366:	db17      	blt.n	800d398 <__kernel_rem_pio2+0x350>
 800d368:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800d530 <__kernel_rem_pio2+0x4e8>
 800d36c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d370:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d374:	aa06      	add	r2, sp, #24
 800d376:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d37a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d37e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d382:	3518      	adds	r5, #24
 800d384:	ee10 3a10 	vmov	r3, s0
 800d388:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d38c:	ee17 3a10 	vmov	r3, s14
 800d390:	3401      	adds	r4, #1
 800d392:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d396:	e74d      	b.n	800d234 <__kernel_rem_pio2+0x1ec>
 800d398:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d39c:	aa06      	add	r2, sp, #24
 800d39e:	ee10 3a10 	vmov	r3, s0
 800d3a2:	e7f6      	b.n	800d392 <__kernel_rem_pio2+0x34a>
 800d3a4:	a806      	add	r0, sp, #24
 800d3a6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800d3aa:	9001      	str	r0, [sp, #4]
 800d3ac:	ee07 0a90 	vmov	s15, r0
 800d3b0:	3a01      	subs	r2, #1
 800d3b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3b6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d3ba:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d3be:	ed21 7b02 	vstmdb	r1!, {d7}
 800d3c2:	e744      	b.n	800d24e <__kernel_rem_pio2+0x206>
 800d3c4:	ecbc 5b02 	vldmia	ip!, {d5}
 800d3c8:	ecb5 6b02 	vldmia	r5!, {d6}
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d3d2:	4548      	cmp	r0, r9
 800d3d4:	dc01      	bgt.n	800d3da <__kernel_rem_pio2+0x392>
 800d3d6:	4281      	cmp	r1, r0
 800d3d8:	daf4      	bge.n	800d3c4 <__kernel_rem_pio2+0x37c>
 800d3da:	a842      	add	r0, sp, #264	@ 0x108
 800d3dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d3e0:	ed81 7b00 	vstr	d7, [r1]
 800d3e4:	3a01      	subs	r2, #1
 800d3e6:	e736      	b.n	800d256 <__kernel_rem_pio2+0x20e>
 800d3e8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800d3ea:	2a02      	cmp	r2, #2
 800d3ec:	dc0a      	bgt.n	800d404 <__kernel_rem_pio2+0x3bc>
 800d3ee:	2a00      	cmp	r2, #0
 800d3f0:	dc2d      	bgt.n	800d44e <__kernel_rem_pio2+0x406>
 800d3f2:	d046      	beq.n	800d482 <__kernel_rem_pio2+0x43a>
 800d3f4:	f008 0007 	and.w	r0, r8, #7
 800d3f8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800d3fc:	ecbd 8b06 	vpop	{d8-d10}
 800d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d404:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800d406:	2a03      	cmp	r2, #3
 800d408:	d1f4      	bne.n	800d3f4 <__kernel_rem_pio2+0x3ac>
 800d40a:	a942      	add	r1, sp, #264	@ 0x108
 800d40c:	f1a3 0208 	sub.w	r2, r3, #8
 800d410:	440a      	add	r2, r1
 800d412:	4611      	mov	r1, r2
 800d414:	4620      	mov	r0, r4
 800d416:	2800      	cmp	r0, #0
 800d418:	f1a1 0108 	sub.w	r1, r1, #8
 800d41c:	dc52      	bgt.n	800d4c4 <__kernel_rem_pio2+0x47c>
 800d41e:	4621      	mov	r1, r4
 800d420:	2901      	cmp	r1, #1
 800d422:	f1a2 0208 	sub.w	r2, r2, #8
 800d426:	dc5d      	bgt.n	800d4e4 <__kernel_rem_pio2+0x49c>
 800d428:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800d538 <__kernel_rem_pio2+0x4f0>
 800d42c:	aa42      	add	r2, sp, #264	@ 0x108
 800d42e:	4413      	add	r3, r2
 800d430:	2c01      	cmp	r4, #1
 800d432:	dc67      	bgt.n	800d504 <__kernel_rem_pio2+0x4bc>
 800d434:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800d438:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800d43c:	2e00      	cmp	r6, #0
 800d43e:	d167      	bne.n	800d510 <__kernel_rem_pio2+0x4c8>
 800d440:	ed87 5b00 	vstr	d5, [r7]
 800d444:	ed87 6b02 	vstr	d6, [r7, #8]
 800d448:	ed87 7b04 	vstr	d7, [r7, #16]
 800d44c:	e7d2      	b.n	800d3f4 <__kernel_rem_pio2+0x3ac>
 800d44e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800d538 <__kernel_rem_pio2+0x4f0>
 800d452:	aa42      	add	r2, sp, #264	@ 0x108
 800d454:	4413      	add	r3, r2
 800d456:	4622      	mov	r2, r4
 800d458:	2a00      	cmp	r2, #0
 800d45a:	da24      	bge.n	800d4a6 <__kernel_rem_pio2+0x45e>
 800d45c:	b34e      	cbz	r6, 800d4b2 <__kernel_rem_pio2+0x46a>
 800d45e:	eeb1 7b46 	vneg.f64	d7, d6
 800d462:	ed87 7b00 	vstr	d7, [r7]
 800d466:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800d46a:	aa44      	add	r2, sp, #272	@ 0x110
 800d46c:	2301      	movs	r3, #1
 800d46e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d472:	429c      	cmp	r4, r3
 800d474:	da20      	bge.n	800d4b8 <__kernel_rem_pio2+0x470>
 800d476:	b10e      	cbz	r6, 800d47c <__kernel_rem_pio2+0x434>
 800d478:	eeb1 7b47 	vneg.f64	d7, d7
 800d47c:	ed87 7b02 	vstr	d7, [r7, #8]
 800d480:	e7b8      	b.n	800d3f4 <__kernel_rem_pio2+0x3ac>
 800d482:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800d538 <__kernel_rem_pio2+0x4f0>
 800d486:	aa42      	add	r2, sp, #264	@ 0x108
 800d488:	4413      	add	r3, r2
 800d48a:	2c00      	cmp	r4, #0
 800d48c:	da05      	bge.n	800d49a <__kernel_rem_pio2+0x452>
 800d48e:	b10e      	cbz	r6, 800d494 <__kernel_rem_pio2+0x44c>
 800d490:	eeb1 7b47 	vneg.f64	d7, d7
 800d494:	ed87 7b00 	vstr	d7, [r7]
 800d498:	e7ac      	b.n	800d3f4 <__kernel_rem_pio2+0x3ac>
 800d49a:	ed33 6b02 	vldmdb	r3!, {d6}
 800d49e:	3c01      	subs	r4, #1
 800d4a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d4a4:	e7f1      	b.n	800d48a <__kernel_rem_pio2+0x442>
 800d4a6:	ed33 7b02 	vldmdb	r3!, {d7}
 800d4aa:	3a01      	subs	r2, #1
 800d4ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d4b0:	e7d2      	b.n	800d458 <__kernel_rem_pio2+0x410>
 800d4b2:	eeb0 7b46 	vmov.f64	d7, d6
 800d4b6:	e7d4      	b.n	800d462 <__kernel_rem_pio2+0x41a>
 800d4b8:	ecb2 6b02 	vldmia	r2!, {d6}
 800d4bc:	3301      	adds	r3, #1
 800d4be:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d4c2:	e7d6      	b.n	800d472 <__kernel_rem_pio2+0x42a>
 800d4c4:	ed91 7b00 	vldr	d7, [r1]
 800d4c8:	ed91 5b02 	vldr	d5, [r1, #8]
 800d4cc:	3801      	subs	r0, #1
 800d4ce:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d4d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4d6:	ed81 6b00 	vstr	d6, [r1]
 800d4da:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d4de:	ed81 7b02 	vstr	d7, [r1, #8]
 800d4e2:	e798      	b.n	800d416 <__kernel_rem_pio2+0x3ce>
 800d4e4:	ed92 7b00 	vldr	d7, [r2]
 800d4e8:	ed92 5b02 	vldr	d5, [r2, #8]
 800d4ec:	3901      	subs	r1, #1
 800d4ee:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d4f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4f6:	ed82 6b00 	vstr	d6, [r2]
 800d4fa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d4fe:	ed82 7b02 	vstr	d7, [r2, #8]
 800d502:	e78d      	b.n	800d420 <__kernel_rem_pio2+0x3d8>
 800d504:	ed33 6b02 	vldmdb	r3!, {d6}
 800d508:	3c01      	subs	r4, #1
 800d50a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d50e:	e78f      	b.n	800d430 <__kernel_rem_pio2+0x3e8>
 800d510:	eeb1 5b45 	vneg.f64	d5, d5
 800d514:	eeb1 6b46 	vneg.f64	d6, d6
 800d518:	ed87 5b00 	vstr	d5, [r7]
 800d51c:	eeb1 7b47 	vneg.f64	d7, d7
 800d520:	ed87 6b02 	vstr	d6, [r7, #8]
 800d524:	e790      	b.n	800d448 <__kernel_rem_pio2+0x400>
 800d526:	bf00      	nop
 800d528:	00000000 	.word	0x00000000
 800d52c:	41700000 	.word	0x41700000
 800d530:	00000000 	.word	0x00000000
 800d534:	3e700000 	.word	0x3e700000
	...

0800d540 <__ieee754_fmod>:
 800d540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d544:	ed8d 1b00 	vstr	d1, [sp]
 800d548:	e9dd 6500 	ldrd	r6, r5, [sp]
 800d54c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800d550:	ea56 0307 	orrs.w	r3, r6, r7
 800d554:	46b6      	mov	lr, r6
 800d556:	d00d      	beq.n	800d574 <__ieee754_fmod+0x34>
 800d558:	ee10 ca90 	vmov	ip, s1
 800d55c:	4b78      	ldr	r3, [pc, #480]	@ (800d740 <__ieee754_fmod+0x200>)
 800d55e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800d562:	4598      	cmp	r8, r3
 800d564:	d806      	bhi.n	800d574 <__ieee754_fmod+0x34>
 800d566:	4273      	negs	r3, r6
 800d568:	4a76      	ldr	r2, [pc, #472]	@ (800d744 <__ieee754_fmod+0x204>)
 800d56a:	4333      	orrs	r3, r6
 800d56c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800d570:	4293      	cmp	r3, r2
 800d572:	d908      	bls.n	800d586 <__ieee754_fmod+0x46>
 800d574:	ed9d 7b00 	vldr	d7, [sp]
 800d578:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d57c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800d580:	b003      	add	sp, #12
 800d582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d586:	ee10 9a10 	vmov	r9, s0
 800d58a:	45b8      	cmp	r8, r7
 800d58c:	4649      	mov	r1, r9
 800d58e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800d592:	dc09      	bgt.n	800d5a8 <__ieee754_fmod+0x68>
 800d594:	dbf4      	blt.n	800d580 <__ieee754_fmod+0x40>
 800d596:	454e      	cmp	r6, r9
 800d598:	d8f2      	bhi.n	800d580 <__ieee754_fmod+0x40>
 800d59a:	d105      	bne.n	800d5a8 <__ieee754_fmod+0x68>
 800d59c:	4b6a      	ldr	r3, [pc, #424]	@ (800d748 <__ieee754_fmod+0x208>)
 800d59e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800d5a2:	ed93 0b00 	vldr	d0, [r3]
 800d5a6:	e7eb      	b.n	800d580 <__ieee754_fmod+0x40>
 800d5a8:	4a66      	ldr	r2, [pc, #408]	@ (800d744 <__ieee754_fmod+0x204>)
 800d5aa:	ea1c 0f02 	tst.w	ip, r2
 800d5ae:	d14a      	bne.n	800d646 <__ieee754_fmod+0x106>
 800d5b0:	f1b8 0f00 	cmp.w	r8, #0
 800d5b4:	d13f      	bne.n	800d636 <__ieee754_fmod+0xf6>
 800d5b6:	4865      	ldr	r0, [pc, #404]	@ (800d74c <__ieee754_fmod+0x20c>)
 800d5b8:	464b      	mov	r3, r9
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	dc38      	bgt.n	800d630 <__ieee754_fmod+0xf0>
 800d5be:	4215      	tst	r5, r2
 800d5c0:	d150      	bne.n	800d664 <__ieee754_fmod+0x124>
 800d5c2:	2f00      	cmp	r7, #0
 800d5c4:	d147      	bne.n	800d656 <__ieee754_fmod+0x116>
 800d5c6:	4a61      	ldr	r2, [pc, #388]	@ (800d74c <__ieee754_fmod+0x20c>)
 800d5c8:	4633      	mov	r3, r6
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	dc40      	bgt.n	800d650 <__ieee754_fmod+0x110>
 800d5ce:	4b60      	ldr	r3, [pc, #384]	@ (800d750 <__ieee754_fmod+0x210>)
 800d5d0:	4298      	cmp	r0, r3
 800d5d2:	db4b      	blt.n	800d66c <__ieee754_fmod+0x12c>
 800d5d4:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800d5d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d5dc:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800d750 <__ieee754_fmod+0x210>
 800d5e0:	4562      	cmp	r2, ip
 800d5e2:	db58      	blt.n	800d696 <__ieee754_fmod+0x156>
 800d5e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d5e8:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800d5ec:	1a80      	subs	r0, r0, r2
 800d5ee:	1b5e      	subs	r6, r3, r5
 800d5f0:	eba1 070e 	sub.w	r7, r1, lr
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d164      	bne.n	800d6c2 <__ieee754_fmod+0x182>
 800d5f8:	4571      	cmp	r1, lr
 800d5fa:	bf38      	it	cc
 800d5fc:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800d600:	2e00      	cmp	r6, #0
 800d602:	bfa4      	itt	ge
 800d604:	4639      	movge	r1, r7
 800d606:	4633      	movge	r3, r6
 800d608:	ea53 0001 	orrs.w	r0, r3, r1
 800d60c:	d0c6      	beq.n	800d59c <__ieee754_fmod+0x5c>
 800d60e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d612:	db6b      	blt.n	800d6ec <__ieee754_fmod+0x1ac>
 800d614:	484e      	ldr	r0, [pc, #312]	@ (800d750 <__ieee754_fmod+0x210>)
 800d616:	4282      	cmp	r2, r0
 800d618:	db6e      	blt.n	800d6f8 <__ieee754_fmod+0x1b8>
 800d61a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d61e:	4323      	orrs	r3, r4
 800d620:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800d624:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d628:	460c      	mov	r4, r1
 800d62a:	ec45 4b10 	vmov	d0, r4, r5
 800d62e:	e7a7      	b.n	800d580 <__ieee754_fmod+0x40>
 800d630:	3801      	subs	r0, #1
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	e7c1      	b.n	800d5ba <__ieee754_fmod+0x7a>
 800d636:	4846      	ldr	r0, [pc, #280]	@ (800d750 <__ieee754_fmod+0x210>)
 800d638:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	ddbe      	ble.n	800d5be <__ieee754_fmod+0x7e>
 800d640:	3801      	subs	r0, #1
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	e7fa      	b.n	800d63c <__ieee754_fmod+0xfc>
 800d646:	ea4f 5028 	mov.w	r0, r8, asr #20
 800d64a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800d64e:	e7b6      	b.n	800d5be <__ieee754_fmod+0x7e>
 800d650:	3a01      	subs	r2, #1
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	e7b9      	b.n	800d5ca <__ieee754_fmod+0x8a>
 800d656:	4a3e      	ldr	r2, [pc, #248]	@ (800d750 <__ieee754_fmod+0x210>)
 800d658:	02fb      	lsls	r3, r7, #11
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	ddb7      	ble.n	800d5ce <__ieee754_fmod+0x8e>
 800d65e:	3a01      	subs	r2, #1
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	e7fa      	b.n	800d65a <__ieee754_fmod+0x11a>
 800d664:	153a      	asrs	r2, r7, #20
 800d666:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d66a:	e7b0      	b.n	800d5ce <__ieee754_fmod+0x8e>
 800d66c:	eba3 0c00 	sub.w	ip, r3, r0
 800d670:	f1bc 0f1f 	cmp.w	ip, #31
 800d674:	dc09      	bgt.n	800d68a <__ieee754_fmod+0x14a>
 800d676:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800d67a:	fa08 f10c 	lsl.w	r1, r8, ip
 800d67e:	fa29 f303 	lsr.w	r3, r9, r3
 800d682:	430b      	orrs	r3, r1
 800d684:	fa09 f10c 	lsl.w	r1, r9, ip
 800d688:	e7a8      	b.n	800d5dc <__ieee754_fmod+0x9c>
 800d68a:	4b32      	ldr	r3, [pc, #200]	@ (800d754 <__ieee754_fmod+0x214>)
 800d68c:	1a1b      	subs	r3, r3, r0
 800d68e:	fa09 f303 	lsl.w	r3, r9, r3
 800d692:	2100      	movs	r1, #0
 800d694:	e7a2      	b.n	800d5dc <__ieee754_fmod+0x9c>
 800d696:	ebac 0c02 	sub.w	ip, ip, r2
 800d69a:	f1bc 0f1f 	cmp.w	ip, #31
 800d69e:	dc09      	bgt.n	800d6b4 <__ieee754_fmod+0x174>
 800d6a0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800d6a4:	fa07 f70c 	lsl.w	r7, r7, ip
 800d6a8:	fa26 f505 	lsr.w	r5, r6, r5
 800d6ac:	433d      	orrs	r5, r7
 800d6ae:	fa06 fe0c 	lsl.w	lr, r6, ip
 800d6b2:	e79b      	b.n	800d5ec <__ieee754_fmod+0xac>
 800d6b4:	4d27      	ldr	r5, [pc, #156]	@ (800d754 <__ieee754_fmod+0x214>)
 800d6b6:	1aad      	subs	r5, r5, r2
 800d6b8:	fa06 f505 	lsl.w	r5, r6, r5
 800d6bc:	f04f 0e00 	mov.w	lr, #0
 800d6c0:	e794      	b.n	800d5ec <__ieee754_fmod+0xac>
 800d6c2:	4571      	cmp	r1, lr
 800d6c4:	bf38      	it	cc
 800d6c6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800d6ca:	2e00      	cmp	r6, #0
 800d6cc:	da05      	bge.n	800d6da <__ieee754_fmod+0x19a>
 800d6ce:	0fce      	lsrs	r6, r1, #31
 800d6d0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d6d4:	0049      	lsls	r1, r1, #1
 800d6d6:	3801      	subs	r0, #1
 800d6d8:	e789      	b.n	800d5ee <__ieee754_fmod+0xae>
 800d6da:	ea56 0307 	orrs.w	r3, r6, r7
 800d6de:	f43f af5d 	beq.w	800d59c <__ieee754_fmod+0x5c>
 800d6e2:	0ffb      	lsrs	r3, r7, #31
 800d6e4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800d6e8:	0079      	lsls	r1, r7, #1
 800d6ea:	e7f4      	b.n	800d6d6 <__ieee754_fmod+0x196>
 800d6ec:	0fc8      	lsrs	r0, r1, #31
 800d6ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d6f2:	0049      	lsls	r1, r1, #1
 800d6f4:	3a01      	subs	r2, #1
 800d6f6:	e78a      	b.n	800d60e <__ieee754_fmod+0xce>
 800d6f8:	1a80      	subs	r0, r0, r2
 800d6fa:	2814      	cmp	r0, #20
 800d6fc:	dc0c      	bgt.n	800d718 <__ieee754_fmod+0x1d8>
 800d6fe:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800d702:	fa03 f202 	lsl.w	r2, r3, r2
 800d706:	40c1      	lsrs	r1, r0
 800d708:	430a      	orrs	r2, r1
 800d70a:	4103      	asrs	r3, r0
 800d70c:	ea43 0104 	orr.w	r1, r3, r4
 800d710:	4610      	mov	r0, r2
 800d712:	ec41 0b10 	vmov	d0, r0, r1
 800d716:	e733      	b.n	800d580 <__ieee754_fmod+0x40>
 800d718:	281f      	cmp	r0, #31
 800d71a:	dc07      	bgt.n	800d72c <__ieee754_fmod+0x1ec>
 800d71c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800d720:	40c1      	lsrs	r1, r0
 800d722:	fa03 f202 	lsl.w	r2, r3, r2
 800d726:	430a      	orrs	r2, r1
 800d728:	4623      	mov	r3, r4
 800d72a:	e7ef      	b.n	800d70c <__ieee754_fmod+0x1cc>
 800d72c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800d730:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800d734:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800d738:	32e2      	adds	r2, #226	@ 0xe2
 800d73a:	fa43 f202 	asr.w	r2, r3, r2
 800d73e:	e7f3      	b.n	800d728 <__ieee754_fmod+0x1e8>
 800d740:	7fefffff 	.word	0x7fefffff
 800d744:	7ff00000 	.word	0x7ff00000
 800d748:	0800db78 	.word	0x0800db78
 800d74c:	fffffbed 	.word	0xfffffbed
 800d750:	fffffc02 	.word	0xfffffc02
 800d754:	fffffbe2 	.word	0xfffffbe2

0800d758 <scalbn>:
 800d758:	ee10 1a90 	vmov	r1, s1
 800d75c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d760:	b98b      	cbnz	r3, 800d786 <scalbn+0x2e>
 800d762:	ee10 3a10 	vmov	r3, s0
 800d766:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d76a:	4319      	orrs	r1, r3
 800d76c:	d00a      	beq.n	800d784 <scalbn+0x2c>
 800d76e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d820 <scalbn+0xc8>
 800d772:	4b37      	ldr	r3, [pc, #220]	@ (800d850 <scalbn+0xf8>)
 800d774:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d778:	4298      	cmp	r0, r3
 800d77a:	da0b      	bge.n	800d794 <scalbn+0x3c>
 800d77c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d828 <scalbn+0xd0>
 800d780:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d784:	4770      	bx	lr
 800d786:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d107      	bne.n	800d79e <scalbn+0x46>
 800d78e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d792:	4770      	bx	lr
 800d794:	ee10 1a90 	vmov	r1, s1
 800d798:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d79c:	3b36      	subs	r3, #54	@ 0x36
 800d79e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d7a2:	4290      	cmp	r0, r2
 800d7a4:	dd0d      	ble.n	800d7c2 <scalbn+0x6a>
 800d7a6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800d830 <scalbn+0xd8>
 800d7aa:	ee10 3a90 	vmov	r3, s1
 800d7ae:	eeb0 6b47 	vmov.f64	d6, d7
 800d7b2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800d838 <scalbn+0xe0>
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800d7bc:	ee27 0b06 	vmul.f64	d0, d7, d6
 800d7c0:	4770      	bx	lr
 800d7c2:	4418      	add	r0, r3
 800d7c4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800d7c8:	4298      	cmp	r0, r3
 800d7ca:	dcec      	bgt.n	800d7a6 <scalbn+0x4e>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	dd0a      	ble.n	800d7e6 <scalbn+0x8e>
 800d7d0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800d7d4:	ec53 2b10 	vmov	r2, r3, d0
 800d7d8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800d7dc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d7e0:	ec43 2b10 	vmov	d0, r2, r3
 800d7e4:	4770      	bx	lr
 800d7e6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800d7ea:	da09      	bge.n	800d800 <scalbn+0xa8>
 800d7ec:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800d828 <scalbn+0xd0>
 800d7f0:	ee10 3a90 	vmov	r3, s1
 800d7f4:	eeb0 6b47 	vmov.f64	d6, d7
 800d7f8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800d840 <scalbn+0xe8>
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	e7db      	b.n	800d7b8 <scalbn+0x60>
 800d800:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800d804:	ec53 2b10 	vmov	r2, r3, d0
 800d808:	3036      	adds	r0, #54	@ 0x36
 800d80a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800d80e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d812:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d848 <scalbn+0xf0>
 800d816:	ec43 2b10 	vmov	d0, r2, r3
 800d81a:	e7b1      	b.n	800d780 <scalbn+0x28>
 800d81c:	f3af 8000 	nop.w
 800d820:	00000000 	.word	0x00000000
 800d824:	43500000 	.word	0x43500000
 800d828:	c2f8f359 	.word	0xc2f8f359
 800d82c:	01a56e1f 	.word	0x01a56e1f
 800d830:	8800759c 	.word	0x8800759c
 800d834:	7e37e43c 	.word	0x7e37e43c
 800d838:	8800759c 	.word	0x8800759c
 800d83c:	fe37e43c 	.word	0xfe37e43c
 800d840:	c2f8f359 	.word	0xc2f8f359
 800d844:	81a56e1f 	.word	0x81a56e1f
 800d848:	00000000 	.word	0x00000000
 800d84c:	3c900000 	.word	0x3c900000
 800d850:	ffff3cb0 	.word	0xffff3cb0
 800d854:	00000000 	.word	0x00000000

0800d858 <floor>:
 800d858:	ee10 3a90 	vmov	r3, s1
 800d85c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800d860:	ee10 2a10 	vmov	r2, s0
 800d864:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800d868:	2913      	cmp	r1, #19
 800d86a:	b530      	push	{r4, r5, lr}
 800d86c:	4615      	mov	r5, r2
 800d86e:	dc33      	bgt.n	800d8d8 <floor+0x80>
 800d870:	2900      	cmp	r1, #0
 800d872:	da18      	bge.n	800d8a6 <floor+0x4e>
 800d874:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800d938 <floor+0xe0>
 800d878:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d87c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d884:	dd0a      	ble.n	800d89c <floor+0x44>
 800d886:	2b00      	cmp	r3, #0
 800d888:	da50      	bge.n	800d92c <floor+0xd4>
 800d88a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d88e:	4313      	orrs	r3, r2
 800d890:	2200      	movs	r2, #0
 800d892:	4293      	cmp	r3, r2
 800d894:	4b2a      	ldr	r3, [pc, #168]	@ (800d940 <floor+0xe8>)
 800d896:	bf08      	it	eq
 800d898:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	ec41 0b10 	vmov	d0, r0, r1
 800d8a4:	e01f      	b.n	800d8e6 <floor+0x8e>
 800d8a6:	4827      	ldr	r0, [pc, #156]	@ (800d944 <floor+0xec>)
 800d8a8:	4108      	asrs	r0, r1
 800d8aa:	ea03 0400 	and.w	r4, r3, r0
 800d8ae:	4314      	orrs	r4, r2
 800d8b0:	d019      	beq.n	800d8e6 <floor+0x8e>
 800d8b2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d938 <floor+0xe0>
 800d8b6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d8ba:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c2:	ddeb      	ble.n	800d89c <floor+0x44>
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	bfbe      	ittt	lt
 800d8c8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800d8cc:	410a      	asrlt	r2, r1
 800d8ce:	189b      	addlt	r3, r3, r2
 800d8d0:	ea23 0300 	bic.w	r3, r3, r0
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	e7e1      	b.n	800d89c <floor+0x44>
 800d8d8:	2933      	cmp	r1, #51	@ 0x33
 800d8da:	dd05      	ble.n	800d8e8 <floor+0x90>
 800d8dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d8e0:	d101      	bne.n	800d8e6 <floor+0x8e>
 800d8e2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d8e6:	bd30      	pop	{r4, r5, pc}
 800d8e8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800d8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f0:	40e0      	lsrs	r0, r4
 800d8f2:	4210      	tst	r0, r2
 800d8f4:	d0f7      	beq.n	800d8e6 <floor+0x8e>
 800d8f6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800d938 <floor+0xe0>
 800d8fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d8fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d906:	ddc9      	ble.n	800d89c <floor+0x44>
 800d908:	2b00      	cmp	r3, #0
 800d90a:	da02      	bge.n	800d912 <floor+0xba>
 800d90c:	2914      	cmp	r1, #20
 800d90e:	d103      	bne.n	800d918 <floor+0xc0>
 800d910:	3301      	adds	r3, #1
 800d912:	ea22 0200 	bic.w	r2, r2, r0
 800d916:	e7c1      	b.n	800d89c <floor+0x44>
 800d918:	2401      	movs	r4, #1
 800d91a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800d91e:	fa04 f101 	lsl.w	r1, r4, r1
 800d922:	440a      	add	r2, r1
 800d924:	42aa      	cmp	r2, r5
 800d926:	bf38      	it	cc
 800d928:	191b      	addcc	r3, r3, r4
 800d92a:	e7f2      	b.n	800d912 <floor+0xba>
 800d92c:	2200      	movs	r2, #0
 800d92e:	4613      	mov	r3, r2
 800d930:	e7b4      	b.n	800d89c <floor+0x44>
 800d932:	bf00      	nop
 800d934:	f3af 8000 	nop.w
 800d938:	8800759c 	.word	0x8800759c
 800d93c:	7e37e43c 	.word	0x7e37e43c
 800d940:	bff00000 	.word	0xbff00000
 800d944:	000fffff 	.word	0x000fffff

0800d948 <_init>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	bf00      	nop
 800d94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94e:	bc08      	pop	{r3}
 800d950:	469e      	mov	lr, r3
 800d952:	4770      	bx	lr

0800d954 <_fini>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	bf00      	nop
 800d958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95a:	bc08      	pop	{r3}
 800d95c:	469e      	mov	lr, r3
 800d95e:	4770      	bx	lr
