
WRAP_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f0c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08005200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000012c  24000010  08005210  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400013c  08005210  0002013c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011f36  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002586  00000000  00000000  00031f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001010  00000000  00000000  00034500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ef8  00000000  00000000  00035510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000303be  00000000  00000000  00036408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000147fc  00000000  00000000  000667c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013aaa3  00000000  00000000  0007afc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b5a65  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004320  00000000  00000000  001b5ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080051a0 	.word	0x080051a0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080051a0 	.word	0x080051a0

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 fbab 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f825 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f000 f98f 	bl	800061c <MX_GPIO_Init>
  MX_DMA_Init();
 80002fe:	f000 f96d 	bl	80005dc <MX_DMA_Init>
  MX_TIM6_Init();
 8000302:	f000 f935 	bl	8000570 <MX_TIM6_Init>
  MX_DAC1_Init();
 8000306:	f000 f8e1 	bl	80004cc <MX_DAC1_Init>
  MX_OPAMP1_Init();
 800030a:	f000 f911 	bl	8000530 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 800030e:	4809      	ldr	r0, [pc, #36]	; (8000334 <main+0x48>)
 8000310:	f003 fc60 	bl	8003bd4 <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim6);
 8000314:	4808      	ldr	r0, [pc, #32]	; (8000338 <main+0x4c>)
 8000316:	f004 fd73 	bl	8004e00 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800031a:	2100      	movs	r1, #0
 800031c:	4807      	ldr	r0, [pc, #28]	; (800033c <main+0x50>)
 800031e:	f000 fd64 	bl	8000dea <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)Wave_LUT, 10, DAC_ALIGN_12B_R);
 8000322:	2300      	movs	r3, #0
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	230a      	movs	r3, #10
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <main+0x54>)
 800032a:	2100      	movs	r1, #0
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <main+0x50>)
 800032e:	f000 fdb3 	bl	8000e98 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000332:	e7fe      	b.n	8000332 <main+0x46>
 8000334:	240000b8 	.word	0x240000b8
 8000338:	240000ec 	.word	0x240000ec
 800033c:	2400002c 	.word	0x2400002c
 8000340:	080051b8 	.word	0x080051b8

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b0a4      	sub	sp, #144	; 0x90
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800034e:	224c      	movs	r2, #76	; 0x4c
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 ff1c 	bl	8005190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035c:	2220      	movs	r2, #32
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f004 ff15 	bl	8005190 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]
 8000376:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000378:	4b52      	ldr	r3, [pc, #328]	; (80004c4 <SystemClock_Config+0x180>)
 800037a:	f04f 32ff 	mov.w	r2, #4294967295
 800037e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000382:	2004      	movs	r0, #4
 8000384:	f003 fc68 	bl	8003c58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000388:	2300      	movs	r3, #0
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <SystemClock_Config+0x184>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a4d      	ldr	r2, [pc, #308]	; (80004c8 <SystemClock_Config+0x184>)
 8000392:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b4b      	ldr	r3, [pc, #300]	; (80004c8 <SystemClock_Config+0x184>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003a4:	bf00      	nop
 80003a6:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <SystemClock_Config+0x184>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003b2:	d1f8      	bne.n	80003a6 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80003b4:	f003 fc40 	bl	8003c38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80003b8:	4b42      	ldr	r3, [pc, #264]	; (80004c4 <SystemClock_Config+0x180>)
 80003ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80003bc:	4a41      	ldr	r2, [pc, #260]	; (80004c4 <SystemClock_Config+0x180>)
 80003be:	f023 0318 	bic.w	r3, r3, #24
 80003c2:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80003c4:	232f      	movs	r3, #47	; 0x2f
 80003c6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003d6:	2340      	movs	r3, #64	; 0x40
 80003d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003da:	2301      	movs	r3, #1
 80003dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e6:	2302      	movs	r3, #2
 80003e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003ea:	2301      	movs	r3, #1
 80003ec:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80003ee:	2346      	movs	r3, #70	; 0x46
 80003f0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80003f6:	2304      	movs	r3, #4
 80003f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003fa:	2302      	movs	r3, #2
 80003fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000400:	230c      	movs	r3, #12
 8000402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000406:	2300      	movs	r3, #0
 8000408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000412:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000416:	4618      	mov	r0, r3
 8000418:	f003 fc78 	bl	8003d0c <HAL_RCC_OscConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000422:	f000 f95f 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	233f      	movs	r3, #63	; 0x3f
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042a:	2303      	movs	r3, #3
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000436:	2340      	movs	r3, #64	; 0x40
 8000438:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800043a:	2340      	movs	r3, #64	; 0x40
 800043c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800043e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000444:	2340      	movs	r3, #64	; 0x40
 8000446:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044c:	2107      	movs	r1, #7
 800044e:	4618      	mov	r0, r3
 8000450:	f004 f88e 	bl	8004570 <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800045a:	f000 f943 	bl	80006e4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800045e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000462:	2100      	movs	r1, #0
 8000464:	2000      	movs	r0, #0
 8000466:	f004 fa39 	bl	80048dc <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800046a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800046e:	2100      	movs	r1, #0
 8000470:	2001      	movs	r0, #1
 8000472:	f004 fa33 	bl	80048dc <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <SystemClock_Config+0x180>)
 8000478:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800047c:	4a11      	ldr	r2, [pc, #68]	; (80004c4 <SystemClock_Config+0x180>)
 800047e:	f043 0302 	orr.w	r3, r3, #2
 8000482:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <SystemClock_Config+0x180>)
 8000488:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800048c:	f003 0302 	and.w	r3, r3, #2
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800049c:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80004a2:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80004a6:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80004a8:	2322      	movs	r3, #34	; 0x22
 80004aa:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80004ac:	2320      	movs	r3, #32
 80004ae:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	4618      	mov	r0, r3
 80004b6:	f004 fbf5 	bl	8004ca4 <HAL_RCCEx_CRSConfig>
}
 80004ba:	bf00      	nop
 80004bc:	3790      	adds	r7, #144	; 0x90
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	58024400 	.word	0x58024400
 80004c8:	58024800 	.word	0x58024800

080004cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2224      	movs	r2, #36	; 0x24
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f004 fe59 	bl	8005190 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_DAC1_Init+0x5c>)
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <MX_DAC1_Init+0x60>)
 80004e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004e4:	4810      	ldr	r0, [pc, #64]	; (8000528 <MX_DAC1_Init+0x5c>)
 80004e6:	f000 fc5e 	bl	8000da6 <HAL_DAC_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004f0:	f000 f8f8 	bl	80006e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80004f8:	2316      	movs	r3, #22
 80004fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80004fc:	2302      	movs	r3, #2
 80004fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000500:	2302      	movs	r3, #2
 8000502:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	4619      	mov	r1, r3
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <MX_DAC1_Init+0x5c>)
 8000510:	f000 fda0 	bl	8001054 <HAL_DAC_ConfigChannel>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800051a:	f000 f8e3 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2400002c 	.word	0x2400002c
 800052c:	40007400 	.word	0x40007400

08000530 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_OPAMP1_Init+0x38>)
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <MX_OPAMP1_Init+0x3c>)
 8000538:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_OPAMP1_Init+0x38>)
 800053c:	2260      	movs	r2, #96	; 0x60
 800053e:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC_CH;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_OPAMP1_Init+0x38>)
 8000542:	2204      	movs	r2, #4
 8000544:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_OPAMP1_Init+0x38>)
 8000548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800054c:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_OPAMP1_Init+0x38>)
 8000550:	2200      	movs	r2, #0
 8000552:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_OPAMP1_Init+0x38>)
 8000556:	f003 fa75 	bl	8003a44 <HAL_OPAMP_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_OPAMP1_Init+0x34>
  {
    Error_Handler();
 8000560:	f000 f8c0 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	240000b8 	.word	0x240000b8
 800056c:	40009000 	.word	0x40009000

08000570 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_TIM6_Init+0x64>)
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <MX_TIM6_Init+0x68>)
 8000584:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_TIM6_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_TIM6_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 27;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_TIM6_Init+0x64>)
 8000594:	221b      	movs	r2, #27
 8000596:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_TIM6_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800059e:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_TIM6_Init+0x64>)
 80005a0:	f004 fbd6 	bl	8004d50 <HAL_TIM_Base_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80005aa:	f000 f89b 	bl	80006e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005ae:	2320      	movs	r3, #32
 80005b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	4619      	mov	r1, r3
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <MX_TIM6_Init+0x64>)
 80005bc:	f004 fd36 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80005c6:	f000 f88d 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	240000ec 	.word	0x240000ec
 80005d8:	40001000 	.word	0x40001000

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_DMA_Init+0x3c>)
 80005e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <MX_DMA_Init+0x3c>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_DMA_Init+0x3c>)
 80005f4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	200b      	movs	r0, #11
 8000606:	f000 fb9a 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060a:	200b      	movs	r0, #11
 800060c:	f000 fbb1 	bl	8000d72 <HAL_NVIC_EnableIRQ>

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	58024400 	.word	0x58024400

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_GPIO_Init+0xbc>)
 8000634:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <MX_GPIO_Init+0xbc>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_GPIO_Init+0xbc>)
 8000644:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_GPIO_Init+0xbc>)
 8000652:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <MX_GPIO_Init+0xbc>)
 8000658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_GPIO_Init+0xbc>)
 8000662:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_GPIO_Init+0xbc>)
 8000670:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000674:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <MX_GPIO_Init+0xbc>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_GPIO_Init+0xbc>)
 8000680:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800068c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4619      	mov	r1, r3
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_GPIO_Init+0xc0>)
 80006aa:	f003 f81b 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0xc4>)
 80006cc:	f003 f80a 	bl	80036e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	58024400 	.word	0x58024400
 80006dc:	58020800 	.word	0x58020800
 80006e0:	58020000 	.word	0x58020000

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_MspInit+0x30>)
 80006f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006fc:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x30>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x30>)
 8000708:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800070c:	f003 0302 	and.w	r3, r3, #2
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	58024400 	.word	0x58024400

08000724 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <HAL_DAC_MspInit+0x9c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d13f      	bne.n	80007b6 <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <HAL_DAC_MspInit+0xa0>)
 8000738:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <HAL_DAC_MspInit+0xa0>)
 800073e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000742:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <HAL_DAC_MspInit+0xa0>)
 8000748:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800074c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <HAL_DAC_MspInit+0xa8>)
 8000758:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 800075c:	2243      	movs	r2, #67	; 0x43
 800075e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 8000762:	2240      	movs	r2, #64	; 0x40
 8000764:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 800076e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000772:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 8000776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800077a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 800077e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000782:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 8000786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 800078e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000792:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 800079c:	f000 fe26 	bl	80013ec <HAL_DMA_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_DAC_MspInit+0x86>
    {
      Error_Handler();
 80007a6:	f7ff ff9d 	bl	80006e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <HAL_DAC_MspInit+0xa4>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40007400 	.word	0x40007400
 80007c4:	58024400 	.word	0x58024400
 80007c8:	24000040 	.word	0x24000040
 80007cc:	40020010 	.word	0x40020010

080007d0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a18      	ldr	r2, [pc, #96]	; (8000850 <HAL_OPAMP_MspInit+0x80>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d129      	bne.n	8000846 <HAL_OPAMP_MspInit+0x76>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_OPAMP_MspInit+0x84>)
 80007f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <HAL_OPAMP_MspInit+0x84>)
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_OPAMP_MspInit+0x84>)
 8000804:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000808:	f003 0310 	and.w	r3, r3, #16
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_OPAMP_MspInit+0x84>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <HAL_OPAMP_MspInit+0x84>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_OPAMP_MspInit+0x84>)
 8000822:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800082e:	2310      	movs	r3, #16
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	2303      	movs	r3, #3
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <HAL_OPAMP_MspInit+0x88>)
 8000842:	f002 ff4f 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40009000 	.word	0x40009000
 8000854:	58024400 	.word	0x58024400
 8000858:	58020800 	.word	0x58020800

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10e      	bne.n	800088c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_TIM_Base_MspInit+0x40>)
 8000870:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000874:	4a09      	ldr	r2, [pc, #36]	; (800089c <HAL_TIM_Base_MspInit+0x40>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <HAL_TIM_Base_MspInit+0x40>)
 8000880:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40001000 	.word	0x40001000
 800089c:	58024400 	.word	0x58024400

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f920 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <DMA1_Stream0_IRQHandler+0x10>)
 80008fa:	f001 fb71 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	24000040 	.word	0x24000040

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <SystemInit+0xd0>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a31      	ldr	r2, [pc, #196]	; (80009d8 <SystemInit+0xd0>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <SystemInit+0xd4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	2b02      	cmp	r3, #2
 8000926:	d807      	bhi.n	8000938 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000928:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <SystemInit+0xd4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f023 030f 	bic.w	r3, r3, #15
 8000930:	4a2a      	ldr	r2, [pc, #168]	; (80009dc <SystemInit+0xd4>)
 8000932:	f043 0303 	orr.w	r3, r3, #3
 8000936:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <SystemInit+0xd8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <SystemInit+0xd8>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <SystemInit+0xd8>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <SystemInit+0xd8>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4924      	ldr	r1, [pc, #144]	; (80009e0 <SystemInit+0xd8>)
 8000950:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <SystemInit+0xdc>)
 8000952:	4013      	ands	r3, r2
 8000954:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <SystemInit+0xd4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 030c 	and.w	r3, r3, #12
 800095e:	2b00      	cmp	r3, #0
 8000960:	d007      	beq.n	8000972 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <SystemInit+0xd4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f023 030f 	bic.w	r3, r3, #15
 800096a:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <SystemInit+0xd4>)
 800096c:	f043 0303 	orr.w	r3, r3, #3
 8000970:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <SystemInit+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <SystemInit+0xd8>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <SystemInit+0xd8>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <SystemInit+0xd8>)
 8000986:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <SystemInit+0xe0>)
 8000988:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <SystemInit+0xd8>)
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <SystemInit+0xe4>)
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <SystemInit+0xd8>)
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <SystemInit+0xe8>)
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <SystemInit+0xd8>)
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <SystemInit+0xd8>)
 800099e:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <SystemInit+0xe8>)
 80009a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <SystemInit+0xd8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <SystemInit+0xd8>)
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <SystemInit+0xe8>)
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <SystemInit+0xd8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <SystemInit+0xd8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <SystemInit+0xd8>)
 80009ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <SystemInit+0xd8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <SystemInit+0xec>)
 80009c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00
 80009dc:	52002000 	.word	0x52002000
 80009e0:	58024400 	.word	0x58024400
 80009e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80009e8:	02020200 	.word	0x02020200
 80009ec:	01ff0000 	.word	0x01ff0000
 80009f0:	01010280 	.word	0x01010280
 80009f4:	52004000 	.word	0x52004000

080009f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009fc:	f7ff ff84 	bl	8000908 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	; (8000a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f004 fb8f 	bl	8005148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fc5f 	bl	80002ec <main>
  bx  lr
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000a34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a38:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a3c:	08005200 	.word	0x08005200
  ldr r2, =_sbss
 8000a40:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a44:	2400013c 	.word	0x2400013c

08000a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a52:	2003      	movs	r0, #3
 8000a54:	f000 f968 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000a58:	f003 ffaa 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_Init+0x68>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	f003 030f 	and.w	r3, r3, #15
 8000a68:	4913      	ldr	r1, [pc, #76]	; (8000ab8 <HAL_Init+0x6c>)
 8000a6a:	5ccb      	ldrb	r3, [r1, r3]
 8000a6c:	f003 031f 	and.w	r3, r3, #31
 8000a70:	fa22 f303 	lsr.w	r3, r2, r3
 8000a74:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_Init+0x68>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_Init+0x6c>)
 8000a80:	5cd3      	ldrb	r3, [r2, r3]
 8000a82:	f003 031f 	and.w	r3, r3, #31
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_Init+0x70>)
 8000a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_Init+0x74>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a96:	200f      	movs	r0, #15
 8000a98:	f000 f814 	bl	8000ac4 <HAL_InitTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e002      	b.n	8000aac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa6:	f7ff fe23 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	58024400 	.word	0x58024400
 8000ab8:	080051e0 	.word	0x080051e0
 8000abc:	24000004 	.word	0x24000004
 8000ac0:	24000000 	.word	0x24000000

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_InitTick+0x60>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e021      	b.n	8000b1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_InitTick+0x64>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_InitTick+0x60>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f94d 	bl	8000d8e <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 f917 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x68>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2400000c 	.word	0x2400000c
 8000b28:	24000000 	.word	0x24000000
 8000b2c:	24000008 	.word	0x24000008

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2400000c 	.word	0x2400000c
 8000b54:	24000138 	.word	0x24000138

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	24000138 	.word	0x24000138

08000b70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetREVID+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	0c1b      	lsrs	r3, r3, #16
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	5c001000 	.word	0x5c001000

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	05fa0000 	.word	0x05fa0000

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff40 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff90 	bl	8000c7c <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5f 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff33 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffa4 	bl	8000ce4 <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e014      	b.n	8000de2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fcab 	bl	8000724 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e046      	b.n	8000e8c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	795b      	ldrb	r3, [r3, #5]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <HAL_DAC_Start+0x20>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e040      	b.n	8000e8c <HAL_DAC_Start+0xa2>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2202      	movs	r2, #2
 8000e14:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6819      	ldr	r1, [r3, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	2201      	movs	r2, #1
 8000e24:	409a      	lsls	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10f      	bne.n	8000e54 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d11d      	bne.n	8000e7e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0201 	orr.w	r2, r2, #1
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	e014      	b.n	8000e7e <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f003 0310 	and.w	r3, r3, #16
 8000e64:	2102      	movs	r1, #2
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d107      	bne.n	8000e7e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 0202 	orr.w	r2, r2, #2
 8000e7c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e0a2      	b.n	8000ff6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	795b      	ldrb	r3, [r3, #5]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_DAC_Start_DMA+0x24>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e09c      	b.n	8000ff6 <HAL_DAC_Start_DMA+0x15e>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d129      	bne.n	8000f22 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_DAC_Start_DMA+0x168>)
 8000ed4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	4a4a      	ldr	r2, [pc, #296]	; (8001004 <HAL_DAC_Start_DMA+0x16c>)
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_DAC_Start_DMA+0x170>)
 8000ee4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ef4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_DAC_Start_DMA+0x6c>
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d005      	beq.n	8000f0e <HAL_DAC_Start_DMA+0x76>
 8000f02:	e009      	b.n	8000f18 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	613b      	str	r3, [r7, #16]
        break;
 8000f0c:	e033      	b.n	8000f76 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	330c      	adds	r3, #12
 8000f14:	613b      	str	r3, [r7, #16]
        break;
 8000f16:	e02e      	b.n	8000f76 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	613b      	str	r3, [r7, #16]
        break;
 8000f20:	e029      	b.n	8000f76 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <HAL_DAC_Start_DMA+0x174>)
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	4a38      	ldr	r2, [pc, #224]	; (8001010 <HAL_DAC_Start_DMA+0x178>)
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <HAL_DAC_Start_DMA+0x17c>)
 8000f38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f48:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_DAC_Start_DMA+0xc0>
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d005      	beq.n	8000f62 <HAL_DAC_Start_DMA+0xca>
 8000f56:	e009      	b.n	8000f6c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3314      	adds	r3, #20
 8000f5e:	613b      	str	r3, [r7, #16]
        break;
 8000f60:	e009      	b.n	8000f76 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3318      	adds	r3, #24
 8000f68:	613b      	str	r3, [r7, #16]
        break;
 8000f6a:	e004      	b.n	8000f76 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	331c      	adds	r3, #28
 8000f72:	613b      	str	r3, [r7, #16]
        break;
 8000f74:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6898      	ldr	r0, [r3, #8]
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	f000 fdb9 	bl	8001b0c <HAL_DMA_Start_IT>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	75fb      	strb	r3, [r7, #23]
 8000f9e:	e010      	b.n	8000fc2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000fae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	68d8      	ldr	r0, [r3, #12]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	f000 fda7 	bl	8001b0c <HAL_DMA_Start_IT>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6819      	ldr	r1, [r3, #0]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	2201      	movs	r2, #1
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e005      	b.n	8000ff4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	f043 0204 	orr.w	r2, r3, #4
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	080012d9 	.word	0x080012d9
 8001004:	080012fb 	.word	0x080012fb
 8001008:	08001317 	.word	0x08001317
 800100c:	08001381 	.word	0x08001381
 8001010:	080013a3 	.word	0x080013a3
 8001014:	080013bf 	.word	0x080013bf

08001018 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_DAC_ConfigChannel+0x1e>
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e12a      	b.n	80012cc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	795b      	ldrb	r3, [r3, #5]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <HAL_DAC_ConfigChannel+0x2e>
 800107e:	2302      	movs	r3, #2
 8001080:	e124      	b.n	80012cc <HAL_DAC_ConfigChannel+0x278>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2202      	movs	r2, #2
 800108c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b04      	cmp	r3, #4
 8001094:	d17a      	bne.n	800118c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001096:	f7ff fd5f 	bl	8000b58 <HAL_GetTick>
 800109a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d13d      	bne.n	800111e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80010a2:	e018      	b.n	80010d6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80010a4:	f7ff fd58 	bl	8000b58 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d911      	bls.n	80010d6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b8:	4b86      	ldr	r3, [pc, #536]	; (80012d4 <HAL_DAC_ConfigChannel+0x280>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00a      	beq.n	80010d6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	f043 0208 	orr.w	r2, r3, #8
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2203      	movs	r2, #3
 80010d0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e0fa      	b.n	80012cc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010dc:	4b7d      	ldr	r3, [pc, #500]	; (80012d4 <HAL_DAC_ConfigChannel+0x280>)
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1df      	bne.n	80010a4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	6992      	ldr	r2, [r2, #24]
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40
 80010ee:	e020      	b.n	8001132 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80010f0:	f7ff fd32 	bl	8000b58 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d90f      	bls.n	800111e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001104:	2b00      	cmp	r3, #0
 8001106:	da0a      	bge.n	800111e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	f043 0208 	orr.w	r2, r3, #8
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2203      	movs	r2, #3
 8001118:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e0d6      	b.n	80012cc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	2b00      	cmp	r3, #0
 8001126:	dbe3      	blt.n	80010f0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	6992      	ldr	r2, [r2, #24]
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	ea02 0103 	and.w	r1, r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	69da      	ldr	r2, [r3, #28]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	21ff      	movs	r1, #255	; 0xff
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	ea02 0103 	and.w	r1, r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	409a      	lsls	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d11d      	bne.n	80011d0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	221f      	movs	r2, #31
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2207      	movs	r2, #7
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d102      	bne.n	80011fa <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
 80011f8:	e00f      	b.n	800121a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d102      	bne.n	8001208 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001202:	2301      	movs	r3, #1
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
 8001206:	e008      	b.n	800121a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001210:	2301      	movs	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
 8001214:	e001      	b.n	800121a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4313      	orrs	r3, r2
 8001224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001226:	4313      	orrs	r3, r2
 8001228:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43da      	mvns	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	400a      	ands	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	22c0      	movs	r2, #192	; 0xc0
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	400a      	ands	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2201      	movs	r2, #1
 80012c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80012c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20008000 	.word	0x20008000

080012d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff fe96 	bl	8001018 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2201      	movs	r2, #1
 80012f0:	711a      	strb	r2, [r3, #4]
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001306:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f7ff fe8f 	bl	800102c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f043 0204 	orr.w	r2, r3, #4
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f7ff fe85 	bl	8001040 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	711a      	strb	r2, [r3, #4]
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff ffd8 	bl	8001344 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	711a      	strb	r2, [r3, #4]
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff ffd1 	bl	8001358 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	f043 0204 	orr.w	r2, r3, #4
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff ffc7 	bl	800136c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	711a      	strb	r2, [r3, #4]
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fbb0 	bl	8000b58 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e37f      	b.n	8001b04 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a66      	ldr	r2, [pc, #408]	; (80015a4 <HAL_DMA_Init+0x1b8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d04a      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_DMA_Init+0x1bc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d045      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a63      	ldr	r2, [pc, #396]	; (80015ac <HAL_DMA_Init+0x1c0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d040      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a62      	ldr	r2, [pc, #392]	; (80015b0 <HAL_DMA_Init+0x1c4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d03b      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a60      	ldr	r2, [pc, #384]	; (80015b4 <HAL_DMA_Init+0x1c8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d036      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a5f      	ldr	r2, [pc, #380]	; (80015b8 <HAL_DMA_Init+0x1cc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d031      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a5d      	ldr	r2, [pc, #372]	; (80015bc <HAL_DMA_Init+0x1d0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d02c      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a5c      	ldr	r2, [pc, #368]	; (80015c0 <HAL_DMA_Init+0x1d4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d027      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <HAL_DMA_Init+0x1d8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d022      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a59      	ldr	r2, [pc, #356]	; (80015c8 <HAL_DMA_Init+0x1dc>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d01d      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a57      	ldr	r2, [pc, #348]	; (80015cc <HAL_DMA_Init+0x1e0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d018      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a56      	ldr	r2, [pc, #344]	; (80015d0 <HAL_DMA_Init+0x1e4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d013      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a54      	ldr	r2, [pc, #336]	; (80015d4 <HAL_DMA_Init+0x1e8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00e      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a53      	ldr	r2, [pc, #332]	; (80015d8 <HAL_DMA_Init+0x1ec>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d009      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_DMA_Init+0x1f0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d004      	beq.n	80014a4 <HAL_DMA_Init+0xb8>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <HAL_DMA_Init+0x1f4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_DMA_Init+0xbc>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_DMA_Init+0xbe>
 80014a8:	2300      	movs	r3, #0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 813c 	beq.w	8001728 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <HAL_DMA_Init+0x1b8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d04a      	beq.n	8001560 <HAL_DMA_Init+0x174>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a36      	ldr	r2, [pc, #216]	; (80015a8 <HAL_DMA_Init+0x1bc>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d045      	beq.n	8001560 <HAL_DMA_Init+0x174>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a34      	ldr	r2, [pc, #208]	; (80015ac <HAL_DMA_Init+0x1c0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d040      	beq.n	8001560 <HAL_DMA_Init+0x174>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a33      	ldr	r2, [pc, #204]	; (80015b0 <HAL_DMA_Init+0x1c4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d03b      	beq.n	8001560 <HAL_DMA_Init+0x174>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <HAL_DMA_Init+0x1c8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d036      	beq.n	8001560 <HAL_DMA_Init+0x174>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a30      	ldr	r2, [pc, #192]	; (80015b8 <HAL_DMA_Init+0x1cc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d031      	beq.n	8001560 <HAL_DMA_Init+0x174>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2e      	ldr	r2, [pc, #184]	; (80015bc <HAL_DMA_Init+0x1d0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d02c      	beq.n	8001560 <HAL_DMA_Init+0x174>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <HAL_DMA_Init+0x1d4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d027      	beq.n	8001560 <HAL_DMA_Init+0x174>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2b      	ldr	r2, [pc, #172]	; (80015c4 <HAL_DMA_Init+0x1d8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d022      	beq.n	8001560 <HAL_DMA_Init+0x174>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <HAL_DMA_Init+0x1dc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d01d      	beq.n	8001560 <HAL_DMA_Init+0x174>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a28      	ldr	r2, [pc, #160]	; (80015cc <HAL_DMA_Init+0x1e0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d018      	beq.n	8001560 <HAL_DMA_Init+0x174>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <HAL_DMA_Init+0x1e4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d013      	beq.n	8001560 <HAL_DMA_Init+0x174>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a25      	ldr	r2, [pc, #148]	; (80015d4 <HAL_DMA_Init+0x1e8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00e      	beq.n	8001560 <HAL_DMA_Init+0x174>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a24      	ldr	r2, [pc, #144]	; (80015d8 <HAL_DMA_Init+0x1ec>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d009      	beq.n	8001560 <HAL_DMA_Init+0x174>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_DMA_Init+0x1f0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d004      	beq.n	8001560 <HAL_DMA_Init+0x174>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <HAL_DMA_Init+0x1f4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d108      	bne.n	8001572 <HAL_DMA_Init+0x186>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e007      	b.n	8001582 <HAL_DMA_Init+0x196>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0201 	bic.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001582:	e02f      	b.n	80015e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001584:	f7ff fae8 	bl	8000b58 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b05      	cmp	r3, #5
 8001590:	d928      	bls.n	80015e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2220      	movs	r2, #32
 8001596:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e2af      	b.n	8001b04 <HAL_DMA_Init+0x718>
 80015a4:	40020010 	.word	0x40020010
 80015a8:	40020028 	.word	0x40020028
 80015ac:	40020040 	.word	0x40020040
 80015b0:	40020058 	.word	0x40020058
 80015b4:	40020070 	.word	0x40020070
 80015b8:	40020088 	.word	0x40020088
 80015bc:	400200a0 	.word	0x400200a0
 80015c0:	400200b8 	.word	0x400200b8
 80015c4:	40020410 	.word	0x40020410
 80015c8:	40020428 	.word	0x40020428
 80015cc:	40020440 	.word	0x40020440
 80015d0:	40020458 	.word	0x40020458
 80015d4:	40020470 	.word	0x40020470
 80015d8:	40020488 	.word	0x40020488
 80015dc:	400204a0 	.word	0x400204a0
 80015e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1c8      	bne.n	8001584 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4b73      	ldr	r3, [pc, #460]	; (80017cc <HAL_DMA_Init+0x3e0>)
 80015fe:	4013      	ands	r3, r2
 8001600:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800160a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001616:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001622:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4313      	orrs	r3, r2
 800162e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	2b04      	cmp	r3, #4
 8001636:	d107      	bne.n	8001648 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4313      	orrs	r3, r2
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4313      	orrs	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b28      	cmp	r3, #40	; 0x28
 800164e:	d903      	bls.n	8001658 <HAL_DMA_Init+0x26c>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b2e      	cmp	r3, #46	; 0x2e
 8001656:	d91f      	bls.n	8001698 <HAL_DMA_Init+0x2ac>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b3e      	cmp	r3, #62	; 0x3e
 800165e:	d903      	bls.n	8001668 <HAL_DMA_Init+0x27c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b42      	cmp	r3, #66	; 0x42
 8001666:	d917      	bls.n	8001698 <HAL_DMA_Init+0x2ac>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b46      	cmp	r3, #70	; 0x46
 800166e:	d903      	bls.n	8001678 <HAL_DMA_Init+0x28c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b48      	cmp	r3, #72	; 0x48
 8001676:	d90f      	bls.n	8001698 <HAL_DMA_Init+0x2ac>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b4e      	cmp	r3, #78	; 0x4e
 800167e:	d903      	bls.n	8001688 <HAL_DMA_Init+0x29c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b52      	cmp	r3, #82	; 0x52
 8001686:	d907      	bls.n	8001698 <HAL_DMA_Init+0x2ac>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b73      	cmp	r3, #115	; 0x73
 800168e:	d905      	bls.n	800169c <HAL_DMA_Init+0x2b0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b77      	cmp	r3, #119	; 0x77
 8001696:	d801      	bhi.n	800169c <HAL_DMA_Init+0x2b0>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_DMA_Init+0x2b2>
 800169c:	2300      	movs	r3, #0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f023 0307 	bic.w	r3, r3, #7
 80016c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d117      	bne.n	8001704 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	4313      	orrs	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00e      	beq.n	8001704 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f001 fe72 	bl	80033d0 <DMA_CheckFifoParam>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e1ff      	b.n	8001b04 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 fdad 	bl	800326c <DMA_CalcBaseAndBitshift>
 8001712:	4603      	mov	r3, r0
 8001714:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	223f      	movs	r2, #63	; 0x3f
 8001720:	409a      	lsls	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	e0fe      	b.n	8001926 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a28      	ldr	r2, [pc, #160]	; (80017d0 <HAL_DMA_Init+0x3e4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d04a      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <HAL_DMA_Init+0x3e8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d045      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <HAL_DMA_Init+0x3ec>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d040      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a24      	ldr	r2, [pc, #144]	; (80017dc <HAL_DMA_Init+0x3f0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d03b      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_DMA_Init+0x3f4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d036      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_DMA_Init+0x3f8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d031      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_DMA_Init+0x3fc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d02c      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_DMA_Init+0x400>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d027      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <HAL_DMA_Init+0x404>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d022      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <HAL_DMA_Init+0x408>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d01d      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_DMA_Init+0x40c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d018      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <HAL_DMA_Init+0x410>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a16      	ldr	r2, [pc, #88]	; (8001800 <HAL_DMA_Init+0x414>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00e      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <HAL_DMA_Init+0x418>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_DMA_Init+0x41c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d004      	beq.n	80017c8 <HAL_DMA_Init+0x3dc>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_DMA_Init+0x420>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d123      	bne.n	8001810 <HAL_DMA_Init+0x424>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e022      	b.n	8001812 <HAL_DMA_Init+0x426>
 80017cc:	fe10803f 	.word	0xfe10803f
 80017d0:	48022c08 	.word	0x48022c08
 80017d4:	48022c1c 	.word	0x48022c1c
 80017d8:	48022c30 	.word	0x48022c30
 80017dc:	48022c44 	.word	0x48022c44
 80017e0:	48022c58 	.word	0x48022c58
 80017e4:	48022c6c 	.word	0x48022c6c
 80017e8:	48022c80 	.word	0x48022c80
 80017ec:	48022c94 	.word	0x48022c94
 80017f0:	58025408 	.word	0x58025408
 80017f4:	5802541c 	.word	0x5802541c
 80017f8:	58025430 	.word	0x58025430
 80017fc:	58025444 	.word	0x58025444
 8001800:	58025458 	.word	0x58025458
 8001804:	5802546c 	.word	0x5802546c
 8001808:	58025480 	.word	0x58025480
 800180c:	58025494 	.word	0x58025494
 8001810:	2300      	movs	r3, #0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d07e      	beq.n	8001914 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a80      	ldr	r2, [pc, #512]	; (8001a1c <HAL_DMA_Init+0x630>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d021      	beq.n	8001864 <HAL_DMA_Init+0x478>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a7e      	ldr	r2, [pc, #504]	; (8001a20 <HAL_DMA_Init+0x634>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01c      	beq.n	8001864 <HAL_DMA_Init+0x478>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7d      	ldr	r2, [pc, #500]	; (8001a24 <HAL_DMA_Init+0x638>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d017      	beq.n	8001864 <HAL_DMA_Init+0x478>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a7b      	ldr	r2, [pc, #492]	; (8001a28 <HAL_DMA_Init+0x63c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d012      	beq.n	8001864 <HAL_DMA_Init+0x478>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7a      	ldr	r2, [pc, #488]	; (8001a2c <HAL_DMA_Init+0x640>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_DMA_Init+0x478>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a78      	ldr	r2, [pc, #480]	; (8001a30 <HAL_DMA_Init+0x644>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d008      	beq.n	8001864 <HAL_DMA_Init+0x478>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a77      	ldr	r2, [pc, #476]	; (8001a34 <HAL_DMA_Init+0x648>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d003      	beq.n	8001864 <HAL_DMA_Init+0x478>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a75      	ldr	r2, [pc, #468]	; (8001a38 <HAL_DMA_Init+0x64c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <HAL_DMA_Init+0x650>)
 8001882:	4013      	ands	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b40      	cmp	r3, #64	; 0x40
 800188c:	d008      	beq.n	80018a0 <HAL_DMA_Init+0x4b4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b80      	cmp	r3, #128	; 0x80
 8001894:	d102      	bne.n	800189c <HAL_DMA_Init+0x4b0>
 8001896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800189a:	e002      	b.n	80018a2 <HAL_DMA_Init+0x4b6>
 800189c:	2300      	movs	r3, #0
 800189e:	e000      	b.n	80018a2 <HAL_DMA_Init+0x4b6>
 80018a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68d2      	ldr	r2, [r2, #12]
 80018a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <HAL_DMA_Init+0x654>)
 80018e8:	4413      	add	r3, r2
 80018ea:	4a56      	ldr	r2, [pc, #344]	; (8001a44 <HAL_DMA_Init+0x658>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	009a      	lsls	r2, r3, #2
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f001 fcb7 	bl	800326c <DMA_CalcBaseAndBitshift>
 80018fe:	4603      	mov	r3, r0
 8001900:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2201      	movs	r2, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	e008      	b.n	8001926 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2240      	movs	r2, #64	; 0x40
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0ee      	b.n	8001b04 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <HAL_DMA_Init+0x65c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d072      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a45      	ldr	r2, [pc, #276]	; (8001a4c <HAL_DMA_Init+0x660>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d06d      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a44      	ldr	r2, [pc, #272]	; (8001a50 <HAL_DMA_Init+0x664>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d068      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <HAL_DMA_Init+0x668>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d063      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a41      	ldr	r2, [pc, #260]	; (8001a58 <HAL_DMA_Init+0x66c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d05e      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a3f      	ldr	r2, [pc, #252]	; (8001a5c <HAL_DMA_Init+0x670>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d059      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a3e      	ldr	r2, [pc, #248]	; (8001a60 <HAL_DMA_Init+0x674>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d054      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a3c      	ldr	r2, [pc, #240]	; (8001a64 <HAL_DMA_Init+0x678>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d04f      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_DMA_Init+0x67c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d04a      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a39      	ldr	r2, [pc, #228]	; (8001a6c <HAL_DMA_Init+0x680>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d045      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_DMA_Init+0x684>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d040      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a36      	ldr	r2, [pc, #216]	; (8001a74 <HAL_DMA_Init+0x688>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d03b      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a35      	ldr	r2, [pc, #212]	; (8001a78 <HAL_DMA_Init+0x68c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d036      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a33      	ldr	r2, [pc, #204]	; (8001a7c <HAL_DMA_Init+0x690>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d031      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <HAL_DMA_Init+0x694>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d02c      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a30      	ldr	r2, [pc, #192]	; (8001a84 <HAL_DMA_Init+0x698>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d027      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_DMA_Init+0x630>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d022      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_DMA_Init+0x634>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01d      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_DMA_Init+0x638>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d018      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_DMA_Init+0x63c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_DMA_Init+0x640>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00e      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <HAL_DMA_Init+0x644>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_DMA_Init+0x648>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d004      	beq.n	8001a16 <HAL_DMA_Init+0x62a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_DMA_Init+0x64c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d138      	bne.n	8001a88 <HAL_DMA_Init+0x69c>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e037      	b.n	8001a8a <HAL_DMA_Init+0x69e>
 8001a1a:	bf00      	nop
 8001a1c:	58025408 	.word	0x58025408
 8001a20:	5802541c 	.word	0x5802541c
 8001a24:	58025430 	.word	0x58025430
 8001a28:	58025444 	.word	0x58025444
 8001a2c:	58025458 	.word	0x58025458
 8001a30:	5802546c 	.word	0x5802546c
 8001a34:	58025480 	.word	0x58025480
 8001a38:	58025494 	.word	0x58025494
 8001a3c:	fffe000f 	.word	0xfffe000f
 8001a40:	a7fdabf8 	.word	0xa7fdabf8
 8001a44:	cccccccd 	.word	0xcccccccd
 8001a48:	40020010 	.word	0x40020010
 8001a4c:	40020028 	.word	0x40020028
 8001a50:	40020040 	.word	0x40020040
 8001a54:	40020058 	.word	0x40020058
 8001a58:	40020070 	.word	0x40020070
 8001a5c:	40020088 	.word	0x40020088
 8001a60:	400200a0 	.word	0x400200a0
 8001a64:	400200b8 	.word	0x400200b8
 8001a68:	40020410 	.word	0x40020410
 8001a6c:	40020428 	.word	0x40020428
 8001a70:	40020440 	.word	0x40020440
 8001a74:	40020458 	.word	0x40020458
 8001a78:	40020470 	.word	0x40020470
 8001a7c:	40020488 	.word	0x40020488
 8001a80:	400204a0 	.word	0x400204a0
 8001a84:	400204b8 	.word	0x400204b8
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d032      	beq.n	8001af4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 fd1a 	bl	80034c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b80      	cmp	r3, #128	; 0x80
 8001a9a:	d102      	bne.n	8001aa2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ab6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_DMA_Init+0x6f6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d80c      	bhi.n	8001ae2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f001 fd97 	bl	80035fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	e008      	b.n	8001af4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e226      	b.n	8001f76 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Start_IT+0x2a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e21f      	b.n	8001f76 <HAL_DMA_Start_IT+0x46a>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	f040 820a 	bne.w	8001f60 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a68      	ldr	r2, [pc, #416]	; (8001d00 <HAL_DMA_Start_IT+0x1f4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d04a      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a66      	ldr	r2, [pc, #408]	; (8001d04 <HAL_DMA_Start_IT+0x1f8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d045      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <HAL_DMA_Start_IT+0x1fc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d040      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <HAL_DMA_Start_IT+0x200>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d03b      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a62      	ldr	r2, [pc, #392]	; (8001d10 <HAL_DMA_Start_IT+0x204>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d036      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a60      	ldr	r2, [pc, #384]	; (8001d14 <HAL_DMA_Start_IT+0x208>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d031      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a5f      	ldr	r2, [pc, #380]	; (8001d18 <HAL_DMA_Start_IT+0x20c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d02c      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <HAL_DMA_Start_IT+0x210>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d027      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5c      	ldr	r2, [pc, #368]	; (8001d20 <HAL_DMA_Start_IT+0x214>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d022      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a5a      	ldr	r2, [pc, #360]	; (8001d24 <HAL_DMA_Start_IT+0x218>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01d      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a59      	ldr	r2, [pc, #356]	; (8001d28 <HAL_DMA_Start_IT+0x21c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d018      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a57      	ldr	r2, [pc, #348]	; (8001d2c <HAL_DMA_Start_IT+0x220>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a56      	ldr	r2, [pc, #344]	; (8001d30 <HAL_DMA_Start_IT+0x224>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00e      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_DMA_Start_IT+0x228>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d009      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a53      	ldr	r2, [pc, #332]	; (8001d38 <HAL_DMA_Start_IT+0x22c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_DMA_Start_IT+0xee>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_DMA_Start_IT+0x230>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d108      	bne.n	8001c0c <HAL_DMA_Start_IT+0x100>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_DMA_Start_IT+0x110>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f001 f93e 	bl	8002ea4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <HAL_DMA_Start_IT+0x1f4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d04a      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a33      	ldr	r2, [pc, #204]	; (8001d04 <HAL_DMA_Start_IT+0x1f8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d045      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a31      	ldr	r2, [pc, #196]	; (8001d08 <HAL_DMA_Start_IT+0x1fc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d040      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a30      	ldr	r2, [pc, #192]	; (8001d0c <HAL_DMA_Start_IT+0x200>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d03b      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2e      	ldr	r2, [pc, #184]	; (8001d10 <HAL_DMA_Start_IT+0x204>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d036      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a2d      	ldr	r2, [pc, #180]	; (8001d14 <HAL_DMA_Start_IT+0x208>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d031      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2b      	ldr	r2, [pc, #172]	; (8001d18 <HAL_DMA_Start_IT+0x20c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02c      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2a      	ldr	r2, [pc, #168]	; (8001d1c <HAL_DMA_Start_IT+0x210>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d027      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a28      	ldr	r2, [pc, #160]	; (8001d20 <HAL_DMA_Start_IT+0x214>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d022      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a27      	ldr	r2, [pc, #156]	; (8001d24 <HAL_DMA_Start_IT+0x218>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d01d      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <HAL_DMA_Start_IT+0x21c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d018      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_DMA_Start_IT+0x220>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_DMA_Start_IT+0x224>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <HAL_DMA_Start_IT+0x228>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_DMA_Start_IT+0x22c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x1bc>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_DMA_Start_IT+0x230>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_DMA_Start_IT+0x1c0>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_DMA_Start_IT+0x1c2>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d036      	beq.n	8001d40 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 021e 	bic.w	r2, r3, #30
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0216 	orr.w	r2, r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d03e      	beq.n	8001d6c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0208 	orr.w	r2, r2, #8
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e035      	b.n	8001d6c <HAL_DMA_Start_IT+0x260>
 8001d00:	40020010 	.word	0x40020010
 8001d04:	40020028 	.word	0x40020028
 8001d08:	40020040 	.word	0x40020040
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	40020070 	.word	0x40020070
 8001d14:	40020088 	.word	0x40020088
 8001d18:	400200a0 	.word	0x400200a0
 8001d1c:	400200b8 	.word	0x400200b8
 8001d20:	40020410 	.word	0x40020410
 8001d24:	40020428 	.word	0x40020428
 8001d28:	40020440 	.word	0x40020440
 8001d2c:	40020458 	.word	0x40020458
 8001d30:	40020470 	.word	0x40020470
 8001d34:	40020488 	.word	0x40020488
 8001d38:	400204a0 	.word	0x400204a0
 8001d3c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 020e 	bic.w	r2, r3, #14
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 020a 	orr.w	r2, r2, #10
 8001d52:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0204 	orr.w	r2, r2, #4
 8001d6a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a83      	ldr	r2, [pc, #524]	; (8001f80 <HAL_DMA_Start_IT+0x474>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d072      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a82      	ldr	r2, [pc, #520]	; (8001f84 <HAL_DMA_Start_IT+0x478>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d06d      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a80      	ldr	r2, [pc, #512]	; (8001f88 <HAL_DMA_Start_IT+0x47c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d068      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7f      	ldr	r2, [pc, #508]	; (8001f8c <HAL_DMA_Start_IT+0x480>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d063      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a7d      	ldr	r2, [pc, #500]	; (8001f90 <HAL_DMA_Start_IT+0x484>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d05e      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7c      	ldr	r2, [pc, #496]	; (8001f94 <HAL_DMA_Start_IT+0x488>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d059      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a7a      	ldr	r2, [pc, #488]	; (8001f98 <HAL_DMA_Start_IT+0x48c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d054      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_DMA_Start_IT+0x490>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d04f      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_DMA_Start_IT+0x494>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d04a      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a76      	ldr	r2, [pc, #472]	; (8001fa4 <HAL_DMA_Start_IT+0x498>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d045      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a74      	ldr	r2, [pc, #464]	; (8001fa8 <HAL_DMA_Start_IT+0x49c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d040      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a73      	ldr	r2, [pc, #460]	; (8001fac <HAL_DMA_Start_IT+0x4a0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d03b      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a71      	ldr	r2, [pc, #452]	; (8001fb0 <HAL_DMA_Start_IT+0x4a4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d036      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a70      	ldr	r2, [pc, #448]	; (8001fb4 <HAL_DMA_Start_IT+0x4a8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d031      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6e      	ldr	r2, [pc, #440]	; (8001fb8 <HAL_DMA_Start_IT+0x4ac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02c      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6d      	ldr	r2, [pc, #436]	; (8001fbc <HAL_DMA_Start_IT+0x4b0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d027      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6b      	ldr	r2, [pc, #428]	; (8001fc0 <HAL_DMA_Start_IT+0x4b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d022      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_DMA_Start_IT+0x4b8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d01d      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a68      	ldr	r2, [pc, #416]	; (8001fc8 <HAL_DMA_Start_IT+0x4bc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d018      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a67      	ldr	r2, [pc, #412]	; (8001fcc <HAL_DMA_Start_IT+0x4c0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_DMA_Start_IT+0x4c4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00e      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a64      	ldr	r2, [pc, #400]	; (8001fd4 <HAL_DMA_Start_IT+0x4c8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a62      	ldr	r2, [pc, #392]	; (8001fd8 <HAL_DMA_Start_IT+0x4cc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_Start_IT+0x350>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a61      	ldr	r2, [pc, #388]	; (8001fdc <HAL_DMA_Start_IT+0x4d0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d101      	bne.n	8001e60 <HAL_DMA_Start_IT+0x354>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_DMA_Start_IT+0x356>
 8001e60:	2300      	movs	r3, #0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01a      	beq.n	8001e9c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e82:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a37      	ldr	r2, [pc, #220]	; (8001f80 <HAL_DMA_Start_IT+0x474>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d04a      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a36      	ldr	r2, [pc, #216]	; (8001f84 <HAL_DMA_Start_IT+0x478>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d045      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a34      	ldr	r2, [pc, #208]	; (8001f88 <HAL_DMA_Start_IT+0x47c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d040      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <HAL_DMA_Start_IT+0x480>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d03b      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <HAL_DMA_Start_IT+0x484>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d036      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <HAL_DMA_Start_IT+0x488>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d031      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2e      	ldr	r2, [pc, #184]	; (8001f98 <HAL_DMA_Start_IT+0x48c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02c      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2d      	ldr	r2, [pc, #180]	; (8001f9c <HAL_DMA_Start_IT+0x490>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d027      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <HAL_DMA_Start_IT+0x494>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d022      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <HAL_DMA_Start_IT+0x498>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01d      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <HAL_DMA_Start_IT+0x49c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d018      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_DMA_Start_IT+0x4a0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <HAL_DMA_Start_IT+0x4a4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00e      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <HAL_DMA_Start_IT+0x4a8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <HAL_DMA_Start_IT+0x4ac>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_DMA_Start_IT+0x430>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <HAL_DMA_Start_IT+0x4b0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d108      	bne.n	8001f4e <HAL_DMA_Start_IT+0x442>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e012      	b.n	8001f74 <HAL_DMA_Start_IT+0x468>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e009      	b.n	8001f74 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40020010 	.word	0x40020010
 8001f84:	40020028 	.word	0x40020028
 8001f88:	40020040 	.word	0x40020040
 8001f8c:	40020058 	.word	0x40020058
 8001f90:	40020070 	.word	0x40020070
 8001f94:	40020088 	.word	0x40020088
 8001f98:	400200a0 	.word	0x400200a0
 8001f9c:	400200b8 	.word	0x400200b8
 8001fa0:	40020410 	.word	0x40020410
 8001fa4:	40020428 	.word	0x40020428
 8001fa8:	40020440 	.word	0x40020440
 8001fac:	40020458 	.word	0x40020458
 8001fb0:	40020470 	.word	0x40020470
 8001fb4:	40020488 	.word	0x40020488
 8001fb8:	400204a0 	.word	0x400204a0
 8001fbc:	400204b8 	.word	0x400204b8
 8001fc0:	58025408 	.word	0x58025408
 8001fc4:	5802541c 	.word	0x5802541c
 8001fc8:	58025430 	.word	0x58025430
 8001fcc:	58025444 	.word	0x58025444
 8001fd0:	58025458 	.word	0x58025458
 8001fd4:	5802546c 	.word	0x5802546c
 8001fd8:	58025480 	.word	0x58025480
 8001fdc:	58025494 	.word	0x58025494

08001fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fec:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_DMA_IRQHandler+0x1ac>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a67      	ldr	r2, [pc, #412]	; (8002190 <HAL_DMA_IRQHandler+0x1b0>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5f      	ldr	r2, [pc, #380]	; (8002194 <HAL_DMA_IRQHandler+0x1b4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04a      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <HAL_DMA_IRQHandler+0x1b8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d045      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5c      	ldr	r2, [pc, #368]	; (800219c <HAL_DMA_IRQHandler+0x1bc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d040      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <HAL_DMA_IRQHandler+0x1c0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d03b      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a59      	ldr	r2, [pc, #356]	; (80021a4 <HAL_DMA_IRQHandler+0x1c4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d036      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a57      	ldr	r2, [pc, #348]	; (80021a8 <HAL_DMA_IRQHandler+0x1c8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d031      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a56      	ldr	r2, [pc, #344]	; (80021ac <HAL_DMA_IRQHandler+0x1cc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d02c      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a54      	ldr	r2, [pc, #336]	; (80021b0 <HAL_DMA_IRQHandler+0x1d0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d027      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a53      	ldr	r2, [pc, #332]	; (80021b4 <HAL_DMA_IRQHandler+0x1d4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d022      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <HAL_DMA_IRQHandler+0x1d8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01d      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_DMA_IRQHandler+0x1dc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d018      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a4e      	ldr	r2, [pc, #312]	; (80021c0 <HAL_DMA_IRQHandler+0x1e0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_DMA_IRQHandler+0x1e4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00e      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a4b      	ldr	r2, [pc, #300]	; (80021c8 <HAL_DMA_IRQHandler+0x1e8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <HAL_DMA_IRQHandler+0x1ec>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d004      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xd2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a48      	ldr	r2, [pc, #288]	; (80021d0 <HAL_DMA_IRQHandler+0x1f0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_DMA_IRQHandler+0xd6>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_DMA_IRQHandler+0xd8>
 80020b6:	2300      	movs	r3, #0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 842b 	beq.w	8002914 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2208      	movs	r2, #8
 80020c8:	409a      	lsls	r2, r3
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80a2 	beq.w	8002218 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2e      	ldr	r2, [pc, #184]	; (8002194 <HAL_DMA_IRQHandler+0x1b4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d04a      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2d      	ldr	r2, [pc, #180]	; (8002198 <HAL_DMA_IRQHandler+0x1b8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d045      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	; (800219c <HAL_DMA_IRQHandler+0x1bc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d040      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <HAL_DMA_IRQHandler+0x1c0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d03b      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_DMA_IRQHandler+0x1c4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d036      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a27      	ldr	r2, [pc, #156]	; (80021a8 <HAL_DMA_IRQHandler+0x1c8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d031      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <HAL_DMA_IRQHandler+0x1cc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02c      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <HAL_DMA_IRQHandler+0x1d0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d027      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a22      	ldr	r2, [pc, #136]	; (80021b4 <HAL_DMA_IRQHandler+0x1d4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d022      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <HAL_DMA_IRQHandler+0x1d8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d01d      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <HAL_DMA_IRQHandler+0x1dc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d018      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <HAL_DMA_IRQHandler+0x1e0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_DMA_IRQHandler+0x1e4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00e      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_DMA_IRQHandler+0x1e8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d009      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_DMA_IRQHandler+0x1ec>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_DMA_IRQHandler+0x194>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d12f      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x1f4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf14      	ite	ne
 8002182:	2301      	movne	r3, #1
 8002184:	2300      	moveq	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	e02e      	b.n	80021e8 <HAL_DMA_IRQHandler+0x208>
 800218a:	bf00      	nop
 800218c:	24000000 	.word	0x24000000
 8002190:	1b4e81b5 	.word	0x1b4e81b5
 8002194:	40020010 	.word	0x40020010
 8002198:	40020028 	.word	0x40020028
 800219c:	40020040 	.word	0x40020040
 80021a0:	40020058 	.word	0x40020058
 80021a4:	40020070 	.word	0x40020070
 80021a8:	40020088 	.word	0x40020088
 80021ac:	400200a0 	.word	0x400200a0
 80021b0:	400200b8 	.word	0x400200b8
 80021b4:	40020410 	.word	0x40020410
 80021b8:	40020428 	.word	0x40020428
 80021bc:	40020440 	.word	0x40020440
 80021c0:	40020458 	.word	0x40020458
 80021c4:	40020470 	.word	0x40020470
 80021c8:	40020488 	.word	0x40020488
 80021cc:	400204a0 	.word	0x400204a0
 80021d0:	400204b8 	.word	0x400204b8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0204 	bic.w	r2, r2, #4
 80021fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2208      	movs	r2, #8
 8002206:	409a      	lsls	r2, r3
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d06e      	beq.n	800230c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a69      	ldr	r2, [pc, #420]	; (80023d8 <HAL_DMA_IRQHandler+0x3f8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d04a      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a67      	ldr	r2, [pc, #412]	; (80023dc <HAL_DMA_IRQHandler+0x3fc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d045      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a66      	ldr	r2, [pc, #408]	; (80023e0 <HAL_DMA_IRQHandler+0x400>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d040      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a64      	ldr	r2, [pc, #400]	; (80023e4 <HAL_DMA_IRQHandler+0x404>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d03b      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_DMA_IRQHandler+0x408>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d036      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a61      	ldr	r2, [pc, #388]	; (80023ec <HAL_DMA_IRQHandler+0x40c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d031      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a60      	ldr	r2, [pc, #384]	; (80023f0 <HAL_DMA_IRQHandler+0x410>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d02c      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5e      	ldr	r2, [pc, #376]	; (80023f4 <HAL_DMA_IRQHandler+0x414>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d027      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5d      	ldr	r2, [pc, #372]	; (80023f8 <HAL_DMA_IRQHandler+0x418>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d022      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5b      	ldr	r2, [pc, #364]	; (80023fc <HAL_DMA_IRQHandler+0x41c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01d      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a5a      	ldr	r2, [pc, #360]	; (8002400 <HAL_DMA_IRQHandler+0x420>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d018      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_DMA_IRQHandler+0x424>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a57      	ldr	r2, [pc, #348]	; (8002408 <HAL_DMA_IRQHandler+0x428>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00e      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a55      	ldr	r2, [pc, #340]	; (800240c <HAL_DMA_IRQHandler+0x42c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a54      	ldr	r2, [pc, #336]	; (8002410 <HAL_DMA_IRQHandler+0x430>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2ee>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_DMA_IRQHandler+0x434>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10a      	bne.n	80022e4 <HAL_DMA_IRQHandler+0x304>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e003      	b.n	80022ec <HAL_DMA_IRQHandler+0x30c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00d      	beq.n	800230c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2201      	movs	r2, #1
 80022fa:	409a      	lsls	r2, r3
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f043 0202 	orr.w	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2204      	movs	r2, #4
 8002316:	409a      	lsls	r2, r3
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 808f 	beq.w	8002440 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2c      	ldr	r2, [pc, #176]	; (80023d8 <HAL_DMA_IRQHandler+0x3f8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d04a      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <HAL_DMA_IRQHandler+0x3fc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d045      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <HAL_DMA_IRQHandler+0x400>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d040      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a27      	ldr	r2, [pc, #156]	; (80023e4 <HAL_DMA_IRQHandler+0x404>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d03b      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <HAL_DMA_IRQHandler+0x408>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d036      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a24      	ldr	r2, [pc, #144]	; (80023ec <HAL_DMA_IRQHandler+0x40c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d031      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_DMA_IRQHandler+0x410>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d02c      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_DMA_IRQHandler+0x414>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d027      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <HAL_DMA_IRQHandler+0x418>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1e      	ldr	r2, [pc, #120]	; (80023fc <HAL_DMA_IRQHandler+0x41c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01d      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_DMA_IRQHandler+0x420>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d018      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_DMA_IRQHandler+0x424>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_DMA_IRQHandler+0x428>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00e      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <HAL_DMA_IRQHandler+0x42c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <HAL_DMA_IRQHandler+0x430>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x3e2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <HAL_DMA_IRQHandler+0x434>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12a      	bne.n	8002418 <HAL_DMA_IRQHandler+0x438>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e023      	b.n	8002420 <HAL_DMA_IRQHandler+0x440>
 80023d8:	40020010 	.word	0x40020010
 80023dc:	40020028 	.word	0x40020028
 80023e0:	40020040 	.word	0x40020040
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40020070 	.word	0x40020070
 80023ec:	40020088 	.word	0x40020088
 80023f0:	400200a0 	.word	0x400200a0
 80023f4:	400200b8 	.word	0x400200b8
 80023f8:	40020410 	.word	0x40020410
 80023fc:	40020428 	.word	0x40020428
 8002400:	40020440 	.word	0x40020440
 8002404:	40020458 	.word	0x40020458
 8002408:	40020470 	.word	0x40020470
 800240c:	40020488 	.word	0x40020488
 8002410:	400204a0 	.word	0x400204a0
 8002414:	400204b8 	.word	0x400204b8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00d      	beq.n	8002440 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2204      	movs	r2, #4
 800242e:	409a      	lsls	r2, r3
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	f043 0204 	orr.w	r2, r3, #4
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2210      	movs	r2, #16
 800244a:	409a      	lsls	r2, r3
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a6 	beq.w	80025a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a85      	ldr	r2, [pc, #532]	; (8002670 <HAL_DMA_IRQHandler+0x690>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d04a      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a83      	ldr	r2, [pc, #524]	; (8002674 <HAL_DMA_IRQHandler+0x694>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d045      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a82      	ldr	r2, [pc, #520]	; (8002678 <HAL_DMA_IRQHandler+0x698>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d040      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a80      	ldr	r2, [pc, #512]	; (800267c <HAL_DMA_IRQHandler+0x69c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d03b      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7f      	ldr	r2, [pc, #508]	; (8002680 <HAL_DMA_IRQHandler+0x6a0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d036      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a7d      	ldr	r2, [pc, #500]	; (8002684 <HAL_DMA_IRQHandler+0x6a4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d031      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7c      	ldr	r2, [pc, #496]	; (8002688 <HAL_DMA_IRQHandler+0x6a8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d02c      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a7a      	ldr	r2, [pc, #488]	; (800268c <HAL_DMA_IRQHandler+0x6ac>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d027      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a79      	ldr	r2, [pc, #484]	; (8002690 <HAL_DMA_IRQHandler+0x6b0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a77      	ldr	r2, [pc, #476]	; (8002694 <HAL_DMA_IRQHandler+0x6b4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a76      	ldr	r2, [pc, #472]	; (8002698 <HAL_DMA_IRQHandler+0x6b8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d018      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a74      	ldr	r2, [pc, #464]	; (800269c <HAL_DMA_IRQHandler+0x6bc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a73      	ldr	r2, [pc, #460]	; (80026a0 <HAL_DMA_IRQHandler+0x6c0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a71      	ldr	r2, [pc, #452]	; (80026a4 <HAL_DMA_IRQHandler+0x6c4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a70      	ldr	r2, [pc, #448]	; (80026a8 <HAL_DMA_IRQHandler+0x6c8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x516>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6e      	ldr	r2, [pc, #440]	; (80026ac <HAL_DMA_IRQHandler+0x6cc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10a      	bne.n	800250c <HAL_DMA_IRQHandler+0x52c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e009      	b.n	8002520 <HAL_DMA_IRQHandler+0x540>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d03e      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2210      	movs	r2, #16
 800252e:	409a      	lsls	r2, r3
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d018      	beq.n	8002574 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d108      	bne.n	8002562 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d024      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
 8002560:	e01f      	b.n	80025a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01b      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
 8002572:	e016      	b.n	80025a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d107      	bne.n	8002592 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0208 	bic.w	r2, r2, #8
 8002590:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2220      	movs	r2, #32
 80025ac:	409a      	lsls	r2, r3
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8110 	beq.w	80027d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <HAL_DMA_IRQHandler+0x690>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d04a      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <HAL_DMA_IRQHandler+0x694>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d045      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_DMA_IRQHandler+0x698>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d040      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_DMA_IRQHandler+0x69c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d03b      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_DMA_IRQHandler+0x6a0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d036      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a25      	ldr	r2, [pc, #148]	; (8002684 <HAL_DMA_IRQHandler+0x6a4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d031      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a23      	ldr	r2, [pc, #140]	; (8002688 <HAL_DMA_IRQHandler+0x6a8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02c      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_DMA_IRQHandler+0x6ac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d027      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_DMA_IRQHandler+0x6b0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d022      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <HAL_DMA_IRQHandler+0x6b4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d01d      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_DMA_IRQHandler+0x6b8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d018      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_DMA_IRQHandler+0x6bc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <HAL_DMA_IRQHandler+0x6c0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00e      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_DMA_IRQHandler+0x6c4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d009      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <HAL_DMA_IRQHandler+0x6c8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <HAL_DMA_IRQHandler+0x678>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_DMA_IRQHandler+0x6cc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d12b      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x6d0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e02a      	b.n	80026c4 <HAL_DMA_IRQHandler+0x6e4>
 800266e:	bf00      	nop
 8002670:	40020010 	.word	0x40020010
 8002674:	40020028 	.word	0x40020028
 8002678:	40020040 	.word	0x40020040
 800267c:	40020058 	.word	0x40020058
 8002680:	40020070 	.word	0x40020070
 8002684:	40020088 	.word	0x40020088
 8002688:	400200a0 	.word	0x400200a0
 800268c:	400200b8 	.word	0x400200b8
 8002690:	40020410 	.word	0x40020410
 8002694:	40020428 	.word	0x40020428
 8002698:	40020440 	.word	0x40020440
 800269c:	40020458 	.word	0x40020458
 80026a0:	40020470 	.word	0x40020470
 80026a4:	40020488 	.word	0x40020488
 80026a8:	400204a0 	.word	0x400204a0
 80026ac:	400204b8 	.word	0x400204b8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8087 	beq.w	80027d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2220      	movs	r2, #32
 80026d4:	409a      	lsls	r2, r3
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d139      	bne.n	800275a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0216 	bic.w	r2, r2, #22
 80026f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002704:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_DMA_IRQHandler+0x736>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0208 	bic.w	r2, r2, #8
 8002724:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	223f      	movs	r2, #63	; 0x3f
 8002730:	409a      	lsls	r2, r3
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8382 	beq.w	8002e54 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4798      	blx	r3
          }
          return;
 8002758:	e37c      	b.n	8002e54 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d018      	beq.n	800279a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d108      	bne.n	8002788 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02c      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
 8002786:	e027      	b.n	80027d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d023      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
 8002798:	e01e      	b.n	80027d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10f      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0210 	bic.w	r2, r2, #16
 80027b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 833e 	beq.w	8002e5e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8088 	beq.w	8002900 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2204      	movs	r2, #4
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a89      	ldr	r2, [pc, #548]	; (8002a24 <HAL_DMA_IRQHandler+0xa44>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d04a      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a88      	ldr	r2, [pc, #544]	; (8002a28 <HAL_DMA_IRQHandler+0xa48>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d045      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a86      	ldr	r2, [pc, #536]	; (8002a2c <HAL_DMA_IRQHandler+0xa4c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d040      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a85      	ldr	r2, [pc, #532]	; (8002a30 <HAL_DMA_IRQHandler+0xa50>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d03b      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a83      	ldr	r2, [pc, #524]	; (8002a34 <HAL_DMA_IRQHandler+0xa54>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d036      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a82      	ldr	r2, [pc, #520]	; (8002a38 <HAL_DMA_IRQHandler+0xa58>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d031      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <HAL_DMA_IRQHandler+0xa5c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02c      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7f      	ldr	r2, [pc, #508]	; (8002a40 <HAL_DMA_IRQHandler+0xa60>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d027      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a7d      	ldr	r2, [pc, #500]	; (8002a44 <HAL_DMA_IRQHandler+0xa64>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d022      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7c      	ldr	r2, [pc, #496]	; (8002a48 <HAL_DMA_IRQHandler+0xa68>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d01d      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a7a      	ldr	r2, [pc, #488]	; (8002a4c <HAL_DMA_IRQHandler+0xa6c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d018      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a79      	ldr	r2, [pc, #484]	; (8002a50 <HAL_DMA_IRQHandler+0xa70>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a77      	ldr	r2, [pc, #476]	; (8002a54 <HAL_DMA_IRQHandler+0xa74>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00e      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a76      	ldr	r2, [pc, #472]	; (8002a58 <HAL_DMA_IRQHandler+0xa78>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a74      	ldr	r2, [pc, #464]	; (8002a5c <HAL_DMA_IRQHandler+0xa7c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_DMA_IRQHandler+0x8b8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a73      	ldr	r2, [pc, #460]	; (8002a60 <HAL_DMA_IRQHandler+0xa80>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <HAL_DMA_IRQHandler+0x8ca>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e007      	b.n	80028ba <HAL_DMA_IRQHandler+0x8da>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3301      	adds	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d307      	bcc.n	80028d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f2      	bne.n	80028ba <HAL_DMA_IRQHandler+0x8da>
 80028d4:	e000      	b.n	80028d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80028d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d004      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80028ee:	e003      	b.n	80028f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 82aa 	beq.w	8002e5e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
 8002912:	e2a4      	b.n	8002e5e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_DMA_IRQHandler+0xa84>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d04a      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_DMA_IRQHandler+0xa88>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d045      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4f      	ldr	r2, [pc, #316]	; (8002a6c <HAL_DMA_IRQHandler+0xa8c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d040      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4e      	ldr	r2, [pc, #312]	; (8002a70 <HAL_DMA_IRQHandler+0xa90>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d03b      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a4c      	ldr	r2, [pc, #304]	; (8002a74 <HAL_DMA_IRQHandler+0xa94>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d036      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_DMA_IRQHandler+0xa98>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d031      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <HAL_DMA_IRQHandler+0xa9c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02c      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a48      	ldr	r2, [pc, #288]	; (8002a80 <HAL_DMA_IRQHandler+0xaa0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d027      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a46      	ldr	r2, [pc, #280]	; (8002a84 <HAL_DMA_IRQHandler+0xaa4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d022      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a45      	ldr	r2, [pc, #276]	; (8002a88 <HAL_DMA_IRQHandler+0xaa8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d01d      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a43      	ldr	r2, [pc, #268]	; (8002a8c <HAL_DMA_IRQHandler+0xaac>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d018      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a42      	ldr	r2, [pc, #264]	; (8002a90 <HAL_DMA_IRQHandler+0xab0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d013      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <HAL_DMA_IRQHandler+0xab4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00e      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a3f      	ldr	r2, [pc, #252]	; (8002a98 <HAL_DMA_IRQHandler+0xab8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d009      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a3d      	ldr	r2, [pc, #244]	; (8002a9c <HAL_DMA_IRQHandler+0xabc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x9d4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a3c      	ldr	r2, [pc, #240]	; (8002aa0 <HAL_DMA_IRQHandler+0xac0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x9d8>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_DMA_IRQHandler+0x9da>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 824f 	beq.w	8002e5e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2204      	movs	r2, #4
 80029d2:	409a      	lsls	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80dd 	beq.w	8002b98 <HAL_DMA_IRQHandler+0xbb8>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80d7 	beq.w	8002b98 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2204      	movs	r2, #4
 80029f4:	409a      	lsls	r2, r3
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d059      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d14a      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8220 	beq.w	8002e58 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a20:	e21a      	b.n	8002e58 <HAL_DMA_IRQHandler+0xe78>
 8002a22:	bf00      	nop
 8002a24:	40020010 	.word	0x40020010
 8002a28:	40020028 	.word	0x40020028
 8002a2c:	40020040 	.word	0x40020040
 8002a30:	40020058 	.word	0x40020058
 8002a34:	40020070 	.word	0x40020070
 8002a38:	40020088 	.word	0x40020088
 8002a3c:	400200a0 	.word	0x400200a0
 8002a40:	400200b8 	.word	0x400200b8
 8002a44:	40020410 	.word	0x40020410
 8002a48:	40020428 	.word	0x40020428
 8002a4c:	40020440 	.word	0x40020440
 8002a50:	40020458 	.word	0x40020458
 8002a54:	40020470 	.word	0x40020470
 8002a58:	40020488 	.word	0x40020488
 8002a5c:	400204a0 	.word	0x400204a0
 8002a60:	400204b8 	.word	0x400204b8
 8002a64:	48022c08 	.word	0x48022c08
 8002a68:	48022c1c 	.word	0x48022c1c
 8002a6c:	48022c30 	.word	0x48022c30
 8002a70:	48022c44 	.word	0x48022c44
 8002a74:	48022c58 	.word	0x48022c58
 8002a78:	48022c6c 	.word	0x48022c6c
 8002a7c:	48022c80 	.word	0x48022c80
 8002a80:	48022c94 	.word	0x48022c94
 8002a84:	58025408 	.word	0x58025408
 8002a88:	5802541c 	.word	0x5802541c
 8002a8c:	58025430 	.word	0x58025430
 8002a90:	58025444 	.word	0x58025444
 8002a94:	58025458 	.word	0x58025458
 8002a98:	5802546c 	.word	0x5802546c
 8002a9c:	58025480 	.word	0x58025480
 8002aa0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 81d5 	beq.w	8002e58 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ab6:	e1cf      	b.n	8002e58 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d160      	bne.n	8002b84 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7f      	ldr	r2, [pc, #508]	; (8002cc4 <HAL_DMA_IRQHandler+0xce4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d04a      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a7d      	ldr	r2, [pc, #500]	; (8002cc8 <HAL_DMA_IRQHandler+0xce8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d045      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7c      	ldr	r2, [pc, #496]	; (8002ccc <HAL_DMA_IRQHandler+0xcec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d040      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a7a      	ldr	r2, [pc, #488]	; (8002cd0 <HAL_DMA_IRQHandler+0xcf0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d03b      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a79      	ldr	r2, [pc, #484]	; (8002cd4 <HAL_DMA_IRQHandler+0xcf4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d036      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a77      	ldr	r2, [pc, #476]	; (8002cd8 <HAL_DMA_IRQHandler+0xcf8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d031      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a76      	ldr	r2, [pc, #472]	; (8002cdc <HAL_DMA_IRQHandler+0xcfc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d02c      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a74      	ldr	r2, [pc, #464]	; (8002ce0 <HAL_DMA_IRQHandler+0xd00>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d027      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a73      	ldr	r2, [pc, #460]	; (8002ce4 <HAL_DMA_IRQHandler+0xd04>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a71      	ldr	r2, [pc, #452]	; (8002ce8 <HAL_DMA_IRQHandler+0xd08>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a70      	ldr	r2, [pc, #448]	; (8002cec <HAL_DMA_IRQHandler+0xd0c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_DMA_IRQHandler+0xd10>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6d      	ldr	r2, [pc, #436]	; (8002cf4 <HAL_DMA_IRQHandler+0xd14>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6b      	ldr	r2, [pc, #428]	; (8002cf8 <HAL_DMA_IRQHandler+0xd18>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6a      	ldr	r2, [pc, #424]	; (8002cfc <HAL_DMA_IRQHandler+0xd1c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xb82>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a68      	ldr	r2, [pc, #416]	; (8002d00 <HAL_DMA_IRQHandler+0xd20>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <HAL_DMA_IRQHandler+0xb94>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0208 	bic.w	r2, r2, #8
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e007      	b.n	8002b84 <HAL_DMA_IRQHandler+0xba4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0204 	bic.w	r2, r2, #4
 8002b82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8165 	beq.w	8002e58 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b96:	e15f      	b.n	8002e58 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80c5 	beq.w	8002d38 <HAL_DMA_IRQHandler+0xd58>
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80bf 	beq.w	8002d38 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d018      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 813a 	beq.w	8002e5c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bf0:	e134      	b.n	8002e5c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8130 	beq.w	8002e5c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c04:	e12a      	b.n	8002e5c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f040 8089 	bne.w	8002d24 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <HAL_DMA_IRQHandler+0xce4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04a      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <HAL_DMA_IRQHandler+0xce8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d045      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_DMA_IRQHandler+0xcec>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d040      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <HAL_DMA_IRQHandler+0xcf0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03b      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <HAL_DMA_IRQHandler+0xcf4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d036      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <HAL_DMA_IRQHandler+0xcf8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d031      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_DMA_IRQHandler+0xcfc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d02c      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <HAL_DMA_IRQHandler+0xd00>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d027      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_DMA_IRQHandler+0xd04>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <HAL_DMA_IRQHandler+0xd08>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_DMA_IRQHandler+0xd0c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_DMA_IRQHandler+0xd10>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_DMA_IRQHandler+0xd14>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_DMA_IRQHandler+0xd18>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <HAL_DMA_IRQHandler+0xd1c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xcd2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_DMA_IRQHandler+0xd20>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d128      	bne.n	8002d04 <HAL_DMA_IRQHandler+0xd24>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0214 	bic.w	r2, r2, #20
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e027      	b.n	8002d14 <HAL_DMA_IRQHandler+0xd34>
 8002cc4:	40020010 	.word	0x40020010
 8002cc8:	40020028 	.word	0x40020028
 8002ccc:	40020040 	.word	0x40020040
 8002cd0:	40020058 	.word	0x40020058
 8002cd4:	40020070 	.word	0x40020070
 8002cd8:	40020088 	.word	0x40020088
 8002cdc:	400200a0 	.word	0x400200a0
 8002ce0:	400200b8 	.word	0x400200b8
 8002ce4:	40020410 	.word	0x40020410
 8002ce8:	40020428 	.word	0x40020428
 8002cec:	40020440 	.word	0x40020440
 8002cf0:	40020458 	.word	0x40020458
 8002cf4:	40020470 	.word	0x40020470
 8002cf8:	40020488 	.word	0x40020488
 8002cfc:	400204a0 	.word	0x400204a0
 8002d00:	400204b8 	.word	0x400204b8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 020a 	bic.w	r2, r2, #10
 8002d12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8097 	beq.w	8002e5c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d36:	e091      	b.n	8002e5c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2208      	movs	r2, #8
 8002d42:	409a      	lsls	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8088 	beq.w	8002e5e <HAL_DMA_IRQHandler+0xe7e>
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8082 	beq.w	8002e5e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a41      	ldr	r2, [pc, #260]	; (8002e64 <HAL_DMA_IRQHandler+0xe84>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d04a      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3f      	ldr	r2, [pc, #252]	; (8002e68 <HAL_DMA_IRQHandler+0xe88>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d045      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3e      	ldr	r2, [pc, #248]	; (8002e6c <HAL_DMA_IRQHandler+0xe8c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d040      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3c      	ldr	r2, [pc, #240]	; (8002e70 <HAL_DMA_IRQHandler+0xe90>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d03b      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a3b      	ldr	r2, [pc, #236]	; (8002e74 <HAL_DMA_IRQHandler+0xe94>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d036      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a39      	ldr	r2, [pc, #228]	; (8002e78 <HAL_DMA_IRQHandler+0xe98>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d031      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a38      	ldr	r2, [pc, #224]	; (8002e7c <HAL_DMA_IRQHandler+0xe9c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d02c      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <HAL_DMA_IRQHandler+0xea0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d027      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a35      	ldr	r2, [pc, #212]	; (8002e84 <HAL_DMA_IRQHandler+0xea4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <HAL_DMA_IRQHandler+0xea8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <HAL_DMA_IRQHandler+0xeac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_DMA_IRQHandler+0xeb0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <HAL_DMA_IRQHandler+0xeb4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <HAL_DMA_IRQHandler+0xeb8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2c      	ldr	r2, [pc, #176]	; (8002e9c <HAL_DMA_IRQHandler+0xebc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xe1a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <HAL_DMA_IRQHandler+0xec0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <HAL_DMA_IRQHandler+0xe2c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 021c 	bic.w	r2, r2, #28
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e007      	b.n	8002e1c <HAL_DMA_IRQHandler+0xe3c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 020e 	bic.w	r2, r2, #14
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	2201      	movs	r2, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
 8002e52:	e004      	b.n	8002e5e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8002e54:	bf00      	nop
 8002e56:	e002      	b.n	8002e5e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8

08002ea4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7f      	ldr	r2, [pc, #508]	; (80030c0 <DMA_SetConfig+0x21c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d072      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7d      	ldr	r2, [pc, #500]	; (80030c4 <DMA_SetConfig+0x220>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d06d      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7c      	ldr	r2, [pc, #496]	; (80030c8 <DMA_SetConfig+0x224>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d068      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a7a      	ldr	r2, [pc, #488]	; (80030cc <DMA_SetConfig+0x228>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d063      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a79      	ldr	r2, [pc, #484]	; (80030d0 <DMA_SetConfig+0x22c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d05e      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a77      	ldr	r2, [pc, #476]	; (80030d4 <DMA_SetConfig+0x230>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d059      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a76      	ldr	r2, [pc, #472]	; (80030d8 <DMA_SetConfig+0x234>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d054      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a74      	ldr	r2, [pc, #464]	; (80030dc <DMA_SetConfig+0x238>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d04f      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a73      	ldr	r2, [pc, #460]	; (80030e0 <DMA_SetConfig+0x23c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d04a      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a71      	ldr	r2, [pc, #452]	; (80030e4 <DMA_SetConfig+0x240>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d045      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a70      	ldr	r2, [pc, #448]	; (80030e8 <DMA_SetConfig+0x244>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d040      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6e      	ldr	r2, [pc, #440]	; (80030ec <DMA_SetConfig+0x248>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d03b      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6d      	ldr	r2, [pc, #436]	; (80030f0 <DMA_SetConfig+0x24c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d036      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a6b      	ldr	r2, [pc, #428]	; (80030f4 <DMA_SetConfig+0x250>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d031      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6a      	ldr	r2, [pc, #424]	; (80030f8 <DMA_SetConfig+0x254>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d02c      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a68      	ldr	r2, [pc, #416]	; (80030fc <DMA_SetConfig+0x258>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d027      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a67      	ldr	r2, [pc, #412]	; (8003100 <DMA_SetConfig+0x25c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a65      	ldr	r2, [pc, #404]	; (8003104 <DMA_SetConfig+0x260>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01d      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a64      	ldr	r2, [pc, #400]	; (8003108 <DMA_SetConfig+0x264>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d018      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a62      	ldr	r2, [pc, #392]	; (800310c <DMA_SetConfig+0x268>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a61      	ldr	r2, [pc, #388]	; (8003110 <DMA_SetConfig+0x26c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a5f      	ldr	r2, [pc, #380]	; (8003114 <DMA_SetConfig+0x270>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d009      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a5e      	ldr	r2, [pc, #376]	; (8003118 <DMA_SetConfig+0x274>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <DMA_SetConfig+0x10a>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5c      	ldr	r2, [pc, #368]	; (800311c <DMA_SetConfig+0x278>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <DMA_SetConfig+0x10e>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <DMA_SetConfig+0x110>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fc0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fd2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a39      	ldr	r2, [pc, #228]	; (80030c0 <DMA_SetConfig+0x21c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d04a      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a38      	ldr	r2, [pc, #224]	; (80030c4 <DMA_SetConfig+0x220>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d045      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a36      	ldr	r2, [pc, #216]	; (80030c8 <DMA_SetConfig+0x224>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d040      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a35      	ldr	r2, [pc, #212]	; (80030cc <DMA_SetConfig+0x228>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d03b      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a33      	ldr	r2, [pc, #204]	; (80030d0 <DMA_SetConfig+0x22c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d036      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a32      	ldr	r2, [pc, #200]	; (80030d4 <DMA_SetConfig+0x230>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d031      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <DMA_SetConfig+0x234>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d02c      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2f      	ldr	r2, [pc, #188]	; (80030dc <DMA_SetConfig+0x238>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d027      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2d      	ldr	r2, [pc, #180]	; (80030e0 <DMA_SetConfig+0x23c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d022      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <DMA_SetConfig+0x240>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d01d      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <DMA_SetConfig+0x244>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d018      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a29      	ldr	r2, [pc, #164]	; (80030ec <DMA_SetConfig+0x248>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d013      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a27      	ldr	r2, [pc, #156]	; (80030f0 <DMA_SetConfig+0x24c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00e      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <DMA_SetConfig+0x250>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d009      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <DMA_SetConfig+0x254>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <DMA_SetConfig+0x1d0>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a23      	ldr	r2, [pc, #140]	; (80030fc <DMA_SetConfig+0x258>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <DMA_SetConfig+0x1d4>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <DMA_SetConfig+0x1d6>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d059      	beq.n	8003132 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	223f      	movs	r2, #63	; 0x3f
 8003088:	409a      	lsls	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800309c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d138      	bne.n	8003120 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80030be:	e0ae      	b.n	800321e <DMA_SetConfig+0x37a>
 80030c0:	40020010 	.word	0x40020010
 80030c4:	40020028 	.word	0x40020028
 80030c8:	40020040 	.word	0x40020040
 80030cc:	40020058 	.word	0x40020058
 80030d0:	40020070 	.word	0x40020070
 80030d4:	40020088 	.word	0x40020088
 80030d8:	400200a0 	.word	0x400200a0
 80030dc:	400200b8 	.word	0x400200b8
 80030e0:	40020410 	.word	0x40020410
 80030e4:	40020428 	.word	0x40020428
 80030e8:	40020440 	.word	0x40020440
 80030ec:	40020458 	.word	0x40020458
 80030f0:	40020470 	.word	0x40020470
 80030f4:	40020488 	.word	0x40020488
 80030f8:	400204a0 	.word	0x400204a0
 80030fc:	400204b8 	.word	0x400204b8
 8003100:	58025408 	.word	0x58025408
 8003104:	5802541c 	.word	0x5802541c
 8003108:	58025430 	.word	0x58025430
 800310c:	58025444 	.word	0x58025444
 8003110:	58025458 	.word	0x58025458
 8003114:	5802546c 	.word	0x5802546c
 8003118:	58025480 	.word	0x58025480
 800311c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
}
 8003130:	e075      	b.n	800321e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a3d      	ldr	r2, [pc, #244]	; (800322c <DMA_SetConfig+0x388>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d04a      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3b      	ldr	r2, [pc, #236]	; (8003230 <DMA_SetConfig+0x38c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d045      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a3a      	ldr	r2, [pc, #232]	; (8003234 <DMA_SetConfig+0x390>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d040      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a38      	ldr	r2, [pc, #224]	; (8003238 <DMA_SetConfig+0x394>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d03b      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a37      	ldr	r2, [pc, #220]	; (800323c <DMA_SetConfig+0x398>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d036      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a35      	ldr	r2, [pc, #212]	; (8003240 <DMA_SetConfig+0x39c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d031      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a34      	ldr	r2, [pc, #208]	; (8003244 <DMA_SetConfig+0x3a0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d02c      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a32      	ldr	r2, [pc, #200]	; (8003248 <DMA_SetConfig+0x3a4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d027      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a31      	ldr	r2, [pc, #196]	; (800324c <DMA_SetConfig+0x3a8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <DMA_SetConfig+0x3ac>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01d      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <DMA_SetConfig+0x3b0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d018      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <DMA_SetConfig+0x3b4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2b      	ldr	r2, [pc, #172]	; (800325c <DMA_SetConfig+0x3b8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00e      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <DMA_SetConfig+0x3bc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d009      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a28      	ldr	r2, [pc, #160]	; (8003264 <DMA_SetConfig+0x3c0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <DMA_SetConfig+0x32e>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <DMA_SetConfig+0x3c4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <DMA_SetConfig+0x332>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <DMA_SetConfig+0x334>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d108      	bne.n	800320e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	60da      	str	r2, [r3, #12]
}
 800320c:	e007      	b.n	800321e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	60da      	str	r2, [r3, #12]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	48022c08 	.word	0x48022c08
 8003230:	48022c1c 	.word	0x48022c1c
 8003234:	48022c30 	.word	0x48022c30
 8003238:	48022c44 	.word	0x48022c44
 800323c:	48022c58 	.word	0x48022c58
 8003240:	48022c6c 	.word	0x48022c6c
 8003244:	48022c80 	.word	0x48022c80
 8003248:	48022c94 	.word	0x48022c94
 800324c:	58025408 	.word	0x58025408
 8003250:	5802541c 	.word	0x5802541c
 8003254:	58025430 	.word	0x58025430
 8003258:	58025444 	.word	0x58025444
 800325c:	58025458 	.word	0x58025458
 8003260:	5802546c 	.word	0x5802546c
 8003264:	58025480 	.word	0x58025480
 8003268:	58025494 	.word	0x58025494

0800326c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a42      	ldr	r2, [pc, #264]	; (8003384 <DMA_CalcBaseAndBitshift+0x118>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d04a      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a41      	ldr	r2, [pc, #260]	; (8003388 <DMA_CalcBaseAndBitshift+0x11c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d045      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3f      	ldr	r2, [pc, #252]	; (800338c <DMA_CalcBaseAndBitshift+0x120>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d040      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3e      	ldr	r2, [pc, #248]	; (8003390 <DMA_CalcBaseAndBitshift+0x124>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d03b      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <DMA_CalcBaseAndBitshift+0x128>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d036      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <DMA_CalcBaseAndBitshift+0x12c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d031      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a39      	ldr	r2, [pc, #228]	; (800339c <DMA_CalcBaseAndBitshift+0x130>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d02c      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a38      	ldr	r2, [pc, #224]	; (80033a0 <DMA_CalcBaseAndBitshift+0x134>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d027      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <DMA_CalcBaseAndBitshift+0x138>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d022      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d01d      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a33      	ldr	r2, [pc, #204]	; (80033ac <DMA_CalcBaseAndBitshift+0x140>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d018      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <DMA_CalcBaseAndBitshift+0x144>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <DMA_CalcBaseAndBitshift+0x148>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00e      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d009      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <DMA_CalcBaseAndBitshift+0x150>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <DMA_CalcBaseAndBitshift+0xa8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <DMA_CalcBaseAndBitshift+0x154>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <DMA_CalcBaseAndBitshift+0xac>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <DMA_CalcBaseAndBitshift+0xae>
 8003318:	2300      	movs	r3, #0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	3b10      	subs	r3, #16
 8003326:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <DMA_CalcBaseAndBitshift+0x158>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	461a      	mov	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d908      	bls.n	8003358 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <DMA_CalcBaseAndBitshift+0x160>)
 800334e:	4013      	ands	r3, r2
 8003350:	1d1a      	adds	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	; 0x58
 8003356:	e00d      	b.n	8003374 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <DMA_CalcBaseAndBitshift+0x160>)
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6593      	str	r3, [r2, #88]	; 0x58
 8003366:	e005      	b.n	8003374 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40020010 	.word	0x40020010
 8003388:	40020028 	.word	0x40020028
 800338c:	40020040 	.word	0x40020040
 8003390:	40020058 	.word	0x40020058
 8003394:	40020070 	.word	0x40020070
 8003398:	40020088 	.word	0x40020088
 800339c:	400200a0 	.word	0x400200a0
 80033a0:	400200b8 	.word	0x400200b8
 80033a4:	40020410 	.word	0x40020410
 80033a8:	40020428 	.word	0x40020428
 80033ac:	40020440 	.word	0x40020440
 80033b0:	40020458 	.word	0x40020458
 80033b4:	40020470 	.word	0x40020470
 80033b8:	40020488 	.word	0x40020488
 80033bc:	400204a0 	.word	0x400204a0
 80033c0:	400204b8 	.word	0x400204b8
 80033c4:	aaaaaaab 	.word	0xaaaaaaab
 80033c8:	080051f0 	.word	0x080051f0
 80033cc:	fffffc00 	.word	0xfffffc00

080033d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d120      	bne.n	8003426 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d858      	bhi.n	800349e <DMA_CheckFifoParam+0xce>
 80033ec:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <DMA_CheckFifoParam+0x24>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	08003405 	.word	0x08003405
 80033f8:	08003417 	.word	0x08003417
 80033fc:	08003405 	.word	0x08003405
 8003400:	0800349f 	.word	0x0800349f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d048      	beq.n	80034a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003414:	e045      	b.n	80034a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800341e:	d142      	bne.n	80034a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003424:	e03f      	b.n	80034a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342e:	d123      	bne.n	8003478 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	2b03      	cmp	r3, #3
 8003436:	d838      	bhi.n	80034aa <DMA_CheckFifoParam+0xda>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <DMA_CheckFifoParam+0x70>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003451 	.word	0x08003451
 8003444:	08003457 	.word	0x08003457
 8003448:	08003451 	.word	0x08003451
 800344c:	08003469 	.word	0x08003469
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
        break;
 8003454:	e030      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d025      	beq.n	80034ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003466:	e022      	b.n	80034ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003470:	d11f      	bne.n	80034b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003476:	e01c      	b.n	80034b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	2b02      	cmp	r3, #2
 800347e:	d902      	bls.n	8003486 <DMA_CheckFifoParam+0xb6>
 8003480:	2b03      	cmp	r3, #3
 8003482:	d003      	beq.n	800348c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003484:	e018      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
        break;
 800348a:	e015      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00e      	beq.n	80034b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
    break;
 800349c:	e00b      	b.n	80034b6 <DMA_CheckFifoParam+0xe6>
        break;
 800349e:	bf00      	nop
 80034a0:	e00a      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
        break;
 80034a2:	bf00      	nop
 80034a4:	e008      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
        break;
 80034a6:	bf00      	nop
 80034a8:	e006      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
        break;
 80034aa:	bf00      	nop
 80034ac:	e004      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
        break;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
        break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
    break;
 80034b6:	bf00      	nop
    }
  }

  return status;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop

080034c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a38      	ldr	r2, [pc, #224]	; (80035bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a36      	ldr	r2, [pc, #216]	; (80035c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01d      	beq.n	8003526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a35      	ldr	r2, [pc, #212]	; (80035c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d018      	beq.n	8003526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a33      	ldr	r2, [pc, #204]	; (80035c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a32      	ldr	r2, [pc, #200]	; (80035cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3b08      	subs	r3, #8
 8003538:	4a28      	ldr	r2, [pc, #160]	; (80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	461a      	mov	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003554:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2201      	movs	r2, #1
 800355e:	409a      	lsls	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003564:	e024      	b.n	80035b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3b10      	subs	r3, #16
 800356e:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d806      	bhi.n	800358e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d902      	bls.n	800358e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3308      	adds	r3, #8
 800358c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	461a      	mov	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80035a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	2201      	movs	r2, #1
 80035aa:	409a      	lsls	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	58025408 	.word	0x58025408
 80035c0:	5802541c 	.word	0x5802541c
 80035c4:	58025430 	.word	0x58025430
 80035c8:	58025444 	.word	0x58025444
 80035cc:	58025458 	.word	0x58025458
 80035d0:	5802546c 	.word	0x5802546c
 80035d4:	58025480 	.word	0x58025480
 80035d8:	58025494 	.word	0x58025494
 80035dc:	cccccccd 	.word	0xcccccccd
 80035e0:	16009600 	.word	0x16009600
 80035e4:	58025880 	.word	0x58025880
 80035e8:	aaaaaaab 	.word	0xaaaaaaab
 80035ec:	400204b8 	.word	0x400204b8
 80035f0:	4002040f 	.word	0x4002040f
 80035f4:	10008200 	.word	0x10008200
 80035f8:	40020880 	.word	0x40020880

080035fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04a      	beq.n	80036a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d847      	bhi.n	80036a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a25      	ldr	r2, [pc, #148]	; (80036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d022      	beq.n	8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d01d      	beq.n	8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003684:	671a      	str	r2, [r3, #112]	; 0x70
 8003686:	e009      	b.n	800369c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a11      	ldr	r2, [pc, #68]	; (80036e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800369a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3b01      	subs	r3, #1
 80036a0:	2201      	movs	r2, #1
 80036a2:	409a      	lsls	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	58025408 	.word	0x58025408
 80036b8:	5802541c 	.word	0x5802541c
 80036bc:	58025430 	.word	0x58025430
 80036c0:	58025444 	.word	0x58025444
 80036c4:	58025458 	.word	0x58025458
 80036c8:	5802546c 	.word	0x5802546c
 80036cc:	58025480 	.word	0x58025480
 80036d0:	58025494 	.word	0x58025494
 80036d4:	1600963f 	.word	0x1600963f
 80036d8:	58025940 	.word	0x58025940
 80036dc:	1000823f 	.word	0x1000823f
 80036e0:	40020940 	.word	0x40020940

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036f2:	4b89      	ldr	r3, [pc, #548]	; (8003918 <HAL_GPIO_Init+0x234>)
 80036f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036f6:	e194      	b.n	8003a22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8186 	beq.w	8003a1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d005      	beq.n	8003728 <HAL_GPIO_Init+0x44>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d130      	bne.n	800378a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800375e:	2201      	movs	r2, #1
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0201 	and.w	r2, r3, #1
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b03      	cmp	r3, #3
 8003794:	d017      	beq.n	80037c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2203      	movs	r2, #3
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d123      	bne.n	800381a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	08da      	lsrs	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3208      	adds	r2, #8
 80037da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	220f      	movs	r2, #15
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	69b9      	ldr	r1, [r7, #24]
 8003816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	2203      	movs	r2, #3
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0203 	and.w	r2, r3, #3
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80e0 	beq.w	8003a1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385c:	4b2f      	ldr	r3, [pc, #188]	; (800391c <HAL_GPIO_Init+0x238>)
 800385e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003862:	4a2e      	ldr	r2, [pc, #184]	; (800391c <HAL_GPIO_Init+0x238>)
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800386c:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_GPIO_Init+0x238>)
 800386e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387a:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_GPIO_Init+0x23c>)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a20      	ldr	r2, [pc, #128]	; (8003924 <HAL_GPIO_Init+0x240>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d052      	beq.n	800394c <HAL_GPIO_Init+0x268>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1f      	ldr	r2, [pc, #124]	; (8003928 <HAL_GPIO_Init+0x244>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_GPIO_Init+0x22e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1e      	ldr	r2, [pc, #120]	; (800392c <HAL_GPIO_Init+0x248>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02b      	beq.n	800390e <HAL_GPIO_Init+0x22a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <HAL_GPIO_Init+0x24c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d025      	beq.n	800390a <HAL_GPIO_Init+0x226>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <HAL_GPIO_Init+0x250>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01f      	beq.n	8003906 <HAL_GPIO_Init+0x222>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <HAL_GPIO_Init+0x254>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d019      	beq.n	8003902 <HAL_GPIO_Init+0x21e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1a      	ldr	r2, [pc, #104]	; (800393c <HAL_GPIO_Init+0x258>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_GPIO_Init+0x21a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_GPIO_Init+0x25c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_GPIO_Init+0x216>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_GPIO_Init+0x260>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_Init+0x212>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a17      	ldr	r2, [pc, #92]	; (8003948 <HAL_GPIO_Init+0x264>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_GPIO_Init+0x20e>
 80038ee:	2309      	movs	r3, #9
 80038f0:	e02d      	b.n	800394e <HAL_GPIO_Init+0x26a>
 80038f2:	230a      	movs	r3, #10
 80038f4:	e02b      	b.n	800394e <HAL_GPIO_Init+0x26a>
 80038f6:	2308      	movs	r3, #8
 80038f8:	e029      	b.n	800394e <HAL_GPIO_Init+0x26a>
 80038fa:	2307      	movs	r3, #7
 80038fc:	e027      	b.n	800394e <HAL_GPIO_Init+0x26a>
 80038fe:	2306      	movs	r3, #6
 8003900:	e025      	b.n	800394e <HAL_GPIO_Init+0x26a>
 8003902:	2305      	movs	r3, #5
 8003904:	e023      	b.n	800394e <HAL_GPIO_Init+0x26a>
 8003906:	2304      	movs	r3, #4
 8003908:	e021      	b.n	800394e <HAL_GPIO_Init+0x26a>
 800390a:	2303      	movs	r3, #3
 800390c:	e01f      	b.n	800394e <HAL_GPIO_Init+0x26a>
 800390e:	2302      	movs	r3, #2
 8003910:	e01d      	b.n	800394e <HAL_GPIO_Init+0x26a>
 8003912:	2301      	movs	r3, #1
 8003914:	e01b      	b.n	800394e <HAL_GPIO_Init+0x26a>
 8003916:	bf00      	nop
 8003918:	58000080 	.word	0x58000080
 800391c:	58024400 	.word	0x58024400
 8003920:	58000400 	.word	0x58000400
 8003924:	58020000 	.word	0x58020000
 8003928:	58020400 	.word	0x58020400
 800392c:	58020800 	.word	0x58020800
 8003930:	58020c00 	.word	0x58020c00
 8003934:	58021000 	.word	0x58021000
 8003938:	58021400 	.word	0x58021400
 800393c:	58021800 	.word	0x58021800
 8003940:	58021c00 	.word	0x58021c00
 8003944:	58022000 	.word	0x58022000
 8003948:	58022400 	.word	0x58022400
 800394c:	2300      	movs	r3, #0
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	f002 0203 	and.w	r2, r2, #3
 8003954:	0092      	lsls	r2, r2, #2
 8003956:	4093      	lsls	r3, r2
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800395e:	4938      	ldr	r1, [pc, #224]	; (8003a40 <HAL_GPIO_Init+0x35c>)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	3302      	adds	r3, #2
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800399a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f ae63 	bne.w	80036f8 <HAL_GPIO_Init+0x14>
  }
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	3724      	adds	r7, #36	; 0x24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	58000400 	.word	0x58000400

08003a44 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0b1      	b.n	8003bbe <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d101      	bne.n	8003a6a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0a9      	b.n	8003bbe <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d101      	bne.n	8003a7a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e0a1      	b.n	8003bbe <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fc fe9a 	bl	80007d0 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aaa:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d119      	bne.n	8003ae8 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_OPAMP_Init+0x184>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6851      	ldr	r1, [r2, #4]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6892      	ldr	r2, [r2, #8]
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6952      	ldr	r2, [r2, #20]
 8003acc:	4311      	orrs	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6992      	ldr	r2, [r2, #24]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6912      	ldr	r2, [r2, #16]
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	69d2      	ldr	r2, [r2, #28]
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b60      	cmp	r3, #96	; 0x60
 8003aee:	d113      	bne.n	8003b18 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <HAL_OPAMP_Init+0x188>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6851      	ldr	r1, [r2, #4]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6892      	ldr	r2, [r2, #8]
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6912      	ldr	r2, [r2, #16]
 8003b08:	4311      	orrs	r1, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	69d2      	ldr	r2, [r2, #28]
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_OPAMP_Init+0x188>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6851      	ldr	r1, [r2, #4]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6892      	ldr	r2, [r2, #8]
 8003b32:	4311      	orrs	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68d2      	ldr	r2, [r2, #12]
 8003b38:	4311      	orrs	r1, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6912      	ldr	r2, [r2, #16]
 8003b3e:	4311      	orrs	r1, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	69d2      	ldr	r2, [r2, #28]
 8003b44:	4311      	orrs	r1, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b56:	d127      	bne.n	8003ba8 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b60:	d011      	beq.n	8003b86 <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <HAL_OPAMP_Init+0x18c>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6053      	str	r3, [r2, #4]
 8003b84:	e010      	b.n	8003ba8 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_OPAMP_Init+0x18c>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	fff83e93 	.word	0xfff83e93
 8003bcc:	fffbfe93 	.word	0xfffbfe93
 8003bd0:	ffffe0e0 	.word	0xffffe0e0

08003bd4 <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	e01d      	b.n	8003c28 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d102      	bne.n	8003bfe <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	e014      	b.n	8003c28 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10c      	bne.n	8003c24 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003c22:	e001      	b.n	8003c28 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	58024800 	.word	0x58024800

08003c58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003c60:	4b29      	ldr	r3, [pc, #164]	; (8003d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	2b06      	cmp	r3, #6
 8003c6a:	d00a      	beq.n	8003c82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c6c:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d001      	beq.n	8003c7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e040      	b.n	8003d00 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e03e      	b.n	8003d00 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003c8a:	491f      	ldr	r1, [pc, #124]	; (8003d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c92:	f7fc ff61 	bl	8000b58 <HAL_GetTick>
 8003c96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c98:	e009      	b.n	8003cae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c9a:	f7fc ff5d 	bl	8000b58 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ca8:	d901      	bls.n	8003cae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e028      	b.n	8003d00 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d1ee      	bne.n	8003c9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b1e      	cmp	r3, #30
 8003cc0:	d008      	beq.n	8003cd4 <HAL_PWREx_ConfigSupply+0x7c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8003cc6:	d005      	beq.n	8003cd4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b1d      	cmp	r3, #29
 8003ccc:	d002      	beq.n	8003cd4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b2d      	cmp	r3, #45	; 0x2d
 8003cd2:	d114      	bne.n	8003cfe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003cd4:	f7fc ff40 	bl	8000b58 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003cda:	e009      	b.n	8003cf0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cdc:	f7fc ff3c 	bl	8000b58 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cea:	d901      	bls.n	8003cf0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e007      	b.n	8003d00 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d1ee      	bne.n	8003cdc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	58024800 	.word	0x58024800

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	; 0x30
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f000 bc1f 	b.w	800455e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80b3 	beq.w	8003e94 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d2e:	4b95      	ldr	r3, [pc, #596]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d38:	4b92      	ldr	r3, [pc, #584]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d007      	beq.n	8003d54 <HAL_RCC_OscConfig+0x48>
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b18      	cmp	r3, #24
 8003d48:	d112      	bne.n	8003d70 <HAL_RCC_OscConfig+0x64>
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	4b8b      	ldr	r3, [pc, #556]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8098 	beq.w	8003e92 <HAL_RCC_OscConfig+0x186>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 8093 	bne.w	8003e92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e3f6      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d78:	d106      	bne.n	8003d88 <HAL_RCC_OscConfig+0x7c>
 8003d7a:	4b82      	ldr	r3, [pc, #520]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a81      	ldr	r2, [pc, #516]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e058      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d112      	bne.n	8003db6 <HAL_RCC_OscConfig+0xaa>
 8003d90:	4b7c      	ldr	r3, [pc, #496]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a7b      	ldr	r2, [pc, #492]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b79      	ldr	r3, [pc, #484]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a78      	ldr	r2, [pc, #480]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a75      	ldr	r2, [pc, #468]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e041      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dbe:	d112      	bne.n	8003de6 <HAL_RCC_OscConfig+0xda>
 8003dc0:	4b70      	ldr	r3, [pc, #448]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a6f      	ldr	r2, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b6d      	ldr	r3, [pc, #436]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a6c      	ldr	r2, [pc, #432]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003dd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a69      	ldr	r2, [pc, #420]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e029      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003dee:	d112      	bne.n	8003e16 <HAL_RCC_OscConfig+0x10a>
 8003df0:	4b64      	ldr	r3, [pc, #400]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a63      	ldr	r2, [pc, #396]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a60      	ldr	r2, [pc, #384]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b5e      	ldr	r3, [pc, #376]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a5d      	ldr	r2, [pc, #372]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e011      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
 8003e16:	4b5b      	ldr	r3, [pc, #364]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5a      	ldr	r2, [pc, #360]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	4b58      	ldr	r3, [pc, #352]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a57      	ldr	r2, [pc, #348]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4b55      	ldr	r3, [pc, #340]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a54      	ldr	r2, [pc, #336]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d013      	beq.n	8003e6a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fc fe89 	bl	8000b58 <HAL_GetTick>
 8003e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4a:	f7fc fe85 	bl	8000b58 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	; 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e380      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e5c:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x13e>
 8003e68:	e014      	b.n	8003e94 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fc fe75 	bl	8000b58 <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e72:	f7fc fe71 	bl	8000b58 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b64      	cmp	r3, #100	; 0x64
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e36c      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e84:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f0      	bne.n	8003e72 <HAL_RCC_OscConfig+0x166>
 8003e90:	e000      	b.n	8003e94 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 808c 	beq.w	8003fba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea2:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eaa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d007      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x1bc>
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	2b18      	cmp	r3, #24
 8003ebc:	d137      	bne.n	8003f2e <HAL_RCC_OscConfig+0x222>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d132      	bne.n	8003f2e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec8:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x1d4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e33e      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 0219 	bic.w	r2, r3, #25
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4925      	ldr	r1, [pc, #148]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fc fe31 	bl	8000b58 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fc fe2d 	bl	8000b58 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e328      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	4917      	ldr	r1, [pc, #92]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f2c:	e045      	b.n	8003fba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d028      	beq.n	8003f88 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 0219 	bic.w	r2, r3, #25
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4910      	ldr	r1, [pc, #64]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fc fe06 	bl	8000b58 <HAL_GetTick>
 8003f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f50:	f7fc fe02 	bl	8000b58 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e2fd      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	4901      	ldr	r1, [pc, #4]	; (8003f84 <HAL_RCC_OscConfig+0x278>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
 8003f82:	e01a      	b.n	8003fba <HAL_RCC_OscConfig+0x2ae>
 8003f84:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f88:	4b97      	ldr	r3, [pc, #604]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a96      	ldr	r2, [pc, #600]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fc fde0 	bl	8000b58 <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fc fddc 	bl	8000b58 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e2d7      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fae:	4b8e      	ldr	r3, [pc, #568]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d06a      	beq.n	800409c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc6:	4b88      	ldr	r3, [pc, #544]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fd0:	4b85      	ldr	r3, [pc, #532]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d007      	beq.n	8003fec <HAL_RCC_OscConfig+0x2e0>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b18      	cmp	r3, #24
 8003fe0:	d11b      	bne.n	800401a <HAL_RCC_OscConfig+0x30e>
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d116      	bne.n	800401a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fec:	4b7e      	ldr	r3, [pc, #504]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_OscConfig+0x2f8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e2ac      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004004:	4b78      	ldr	r3, [pc, #480]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	4975      	ldr	r1, [pc, #468]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004018:	e040      	b.n	800409c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d023      	beq.n	800406a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004022:	4b71      	ldr	r3, [pc, #452]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a70      	ldr	r2, [pc, #448]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fc fd93 	bl	8000b58 <HAL_GetTick>
 8004032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004036:	f7fc fd8f 	bl	8000b58 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e28a      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004048:	4b67      	ldr	r3, [pc, #412]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004054:	4b64      	ldr	r3, [pc, #400]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	4961      	ldr	r1, [pc, #388]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	60cb      	str	r3, [r1, #12]
 8004068:	e018      	b.n	800409c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800406a:	4b5f      	ldr	r3, [pc, #380]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a5e      	ldr	r2, [pc, #376]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fc fd6f 	bl	8000b58 <HAL_GetTick>
 800407a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800407e:	f7fc fd6b 	bl	8000b58 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e266      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004090:	4b55      	ldr	r3, [pc, #340]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d036      	beq.n	8004116 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d019      	beq.n	80040e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b0:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 80040b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b4:	4a4c      	ldr	r2, [pc, #304]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fc fd4c 	bl	8000b58 <HAL_GetTick>
 80040c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fc fd48 	bl	8000b58 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e243      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040d6:	4b44      	ldr	r3, [pc, #272]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x3b8>
 80040e2:	e018      	b.n	8004116 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e4:	4b40      	ldr	r3, [pc, #256]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e8:	4a3f      	ldr	r2, [pc, #252]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fc fd32 	bl	8000b58 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f8:	f7fc fd2e 	bl	8000b58 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e229      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800410a:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 800410c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d036      	beq.n	8004190 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d019      	beq.n	800415e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800412a:	4b2f      	ldr	r3, [pc, #188]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2e      	ldr	r2, [pc, #184]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004130:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004134:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004136:	f7fc fd0f 	bl	8000b58 <HAL_GetTick>
 800413a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800413e:	f7fc fd0b 	bl	8000b58 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e206      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x432>
 800415c:	e018      	b.n	8004190 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800415e:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004164:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004168:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800416a:	f7fc fcf5 	bl	8000b58 <HAL_GetTick>
 800416e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004172:	f7fc fcf1 	bl	8000b58 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1ec      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004184:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80af 	beq.w	80042fc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800419e:	4b13      	ldr	r3, [pc, #76]	; (80041ec <HAL_RCC_OscConfig+0x4e0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <HAL_RCC_OscConfig+0x4e0>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041aa:	f7fc fcd5 	bl	8000b58 <HAL_GetTick>
 80041ae:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b2:	f7fc fcd1 	bl	8000b58 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b64      	cmp	r3, #100	; 0x64
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e1cc      	b.n	800455e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <HAL_RCC_OscConfig+0x4e0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4e4>
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	4a02      	ldr	r2, [pc, #8]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6713      	str	r3, [r2, #112]	; 0x70
 80041e4:	e05b      	b.n	800429e <HAL_RCC_OscConfig+0x592>
 80041e6:	bf00      	nop
 80041e8:	58024400 	.word	0x58024400
 80041ec:	58024800 	.word	0x58024800
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d112      	bne.n	800421e <HAL_RCC_OscConfig+0x512>
 80041f8:	4b9d      	ldr	r3, [pc, #628]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4a9c      	ldr	r2, [pc, #624]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	6713      	str	r3, [r2, #112]	; 0x70
 8004204:	4b9a      	ldr	r3, [pc, #616]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a99      	ldr	r2, [pc, #612]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800420a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
 8004210:	4b97      	ldr	r3, [pc, #604]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a96      	ldr	r2, [pc, #600]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004216:	f023 0304 	bic.w	r3, r3, #4
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	e03f      	b.n	800429e <HAL_RCC_OscConfig+0x592>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b05      	cmp	r3, #5
 8004224:	d112      	bne.n	800424c <HAL_RCC_OscConfig+0x540>
 8004226:	4b92      	ldr	r3, [pc, #584]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a91      	ldr	r2, [pc, #580]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6713      	str	r3, [r2, #112]	; 0x70
 8004232:	4b8f      	ldr	r3, [pc, #572]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a8e      	ldr	r2, [pc, #568]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
 800423e:	4b8c      	ldr	r3, [pc, #560]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a8b      	ldr	r2, [pc, #556]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
 800424a:	e028      	b.n	800429e <HAL_RCC_OscConfig+0x592>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b85      	cmp	r3, #133	; 0x85
 8004252:	d112      	bne.n	800427a <HAL_RCC_OscConfig+0x56e>
 8004254:	4b86      	ldr	r3, [pc, #536]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	4a85      	ldr	r2, [pc, #532]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	6713      	str	r3, [r2, #112]	; 0x70
 8004260:	4b83      	ldr	r3, [pc, #524]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a82      	ldr	r2, [pc, #520]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	4b80      	ldr	r3, [pc, #512]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a7f      	ldr	r2, [pc, #508]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
 8004278:	e011      	b.n	800429e <HAL_RCC_OscConfig+0x592>
 800427a:	4b7d      	ldr	r3, [pc, #500]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a7c      	ldr	r2, [pc, #496]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	4b7a      	ldr	r3, [pc, #488]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a79      	ldr	r2, [pc, #484]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
 8004292:	4b77      	ldr	r3, [pc, #476]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a76      	ldr	r2, [pc, #472]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d015      	beq.n	80042d2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fc fc57 	bl	8000b58 <HAL_GetTick>
 80042aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fc fc53 	bl	8000b58 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e14c      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c4:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ee      	beq.n	80042ae <HAL_RCC_OscConfig+0x5a2>
 80042d0:	e014      	b.n	80042fc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fc fc41 	bl	8000b58 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fc fc3d 	bl	8000b58 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e136      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042f0:	4b5f      	ldr	r3, [pc, #380]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ee      	bne.n	80042da <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 812b 	beq.w	800455c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004306:	4b5a      	ldr	r3, [pc, #360]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800430e:	2b18      	cmp	r3, #24
 8004310:	f000 80bb 	beq.w	800448a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b02      	cmp	r3, #2
 800431a:	f040 8095 	bne.w	8004448 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431e:	4b54      	ldr	r3, [pc, #336]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a53      	ldr	r2, [pc, #332]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fc fc15 	bl	8000b58 <HAL_GetTick>
 800432e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004332:	f7fc fc11 	bl	8000b58 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e10c      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004344:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004350:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004354:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_OscConfig+0x768>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004360:	0112      	lsls	r2, r2, #4
 8004362:	430a      	orrs	r2, r1
 8004364:	4942      	ldr	r1, [pc, #264]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004366:	4313      	orrs	r3, r2
 8004368:	628b      	str	r3, [r1, #40]	; 0x28
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	3b01      	subs	r3, #1
 8004370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	3b01      	subs	r3, #1
 800437a:	025b      	lsls	r3, r3, #9
 800437c:	b29b      	uxth	r3, r3
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	3b01      	subs	r3, #1
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	3b01      	subs	r3, #1
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800439a:	4935      	ldr	r1, [pc, #212]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800439c:	4313      	orrs	r3, r2
 800439e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80043a0:	4b33      	ldr	r3, [pc, #204]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4a32      	ldr	r2, [pc, #200]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043ac:	4b30      	ldr	r3, [pc, #192]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b0:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCC_OscConfig+0x76c>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043b8:	00d2      	lsls	r2, r2, #3
 80043ba:	492d      	ldr	r1, [pc, #180]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f023 020c 	bic.w	r2, r3, #12
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	4928      	ldr	r1, [pc, #160]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	f023 0202 	bic.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	4924      	ldr	r1, [pc, #144]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	4a21      	ldr	r2, [pc, #132]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004414:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800441a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800441e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fc fb9a 	bl	8000b58 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fc fb96 	bl	8000b58 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e091      	b.n	800455e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x71c>
 8004446:	e089      	b.n	800455c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004448:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_RCC_OscConfig+0x764>)
 800444e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fc fb80 	bl	8000b58 <HAL_GetTick>
 8004458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800445a:	e00f      	b.n	800447c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fc fb7c 	bl	8000b58 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d908      	bls.n	800447c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e077      	b.n	800455e <HAL_RCC_OscConfig+0x852>
 800446e:	bf00      	nop
 8004470:	58024400 	.word	0x58024400
 8004474:	fffffc0c 	.word	0xfffffc0c
 8004478:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800447c:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e9      	bne.n	800445c <HAL_RCC_OscConfig+0x750>
 8004488:	e068      	b.n	800455c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004490:	4b35      	ldr	r3, [pc, #212]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	2b01      	cmp	r3, #1
 800449c:	d031      	beq.n	8004502 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0203 	and.w	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d12a      	bne.n	8004502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d122      	bne.n	8004502 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d11a      	bne.n	8004502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	0a5b      	lsrs	r3, r3, #9
 80044d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d111      	bne.n	8004502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d108      	bne.n	8004502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	0e1b      	lsrs	r3, r3, #24
 80044f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e02b      	b.n	800455e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004506:	4b18      	ldr	r3, [pc, #96]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 8004508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004510:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	429a      	cmp	r2, r3
 800451a:	d01f      	beq.n	800455c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	4a11      	ldr	r2, [pc, #68]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004528:	f7fc fb16 	bl	8000b58 <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800452e:	bf00      	nop
 8004530:	f7fc fb12 	bl	8000b58 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	4293      	cmp	r3, r2
 800453a:	d0f9      	beq.n	8004530 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 800453e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <HAL_RCC_OscConfig+0x860>)
 8004542:	4013      	ands	r3, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004548:	00d2      	lsls	r2, r2, #3
 800454a:	4907      	ldr	r1, [pc, #28]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <HAL_RCC_OscConfig+0x85c>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3730      	adds	r7, #48	; 0x30
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	58024400 	.word	0x58024400
 800456c:	ffff0007 	.word	0xffff0007

08004570 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e19c      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b8a      	ldr	r3, [pc, #552]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d910      	bls.n	80045b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b87      	ldr	r3, [pc, #540]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 020f 	bic.w	r2, r3, #15
 800459a:	4985      	ldr	r1, [pc, #532]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a2:	4b83      	ldr	r3, [pc, #524]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e184      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d010      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	4b7b      	ldr	r3, [pc, #492]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d908      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045d0:	4b78      	ldr	r3, [pc, #480]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	4975      	ldr	r1, [pc, #468]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	4b70      	ldr	r3, [pc, #448]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d908      	bls.n	8004610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045fe:	4b6d      	ldr	r3, [pc, #436]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	496a      	ldr	r1, [pc, #424]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800460c:	4313      	orrs	r3, r2
 800460e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699a      	ldr	r2, [r3, #24]
 8004620:	4b64      	ldr	r3, [pc, #400]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004628:	429a      	cmp	r2, r3
 800462a:	d908      	bls.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800462c:	4b61      	ldr	r3, [pc, #388]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	495e      	ldr	r1, [pc, #376]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800463a:	4313      	orrs	r3, r2
 800463c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004656:	429a      	cmp	r2, r3
 8004658:	d908      	bls.n	800466c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800465a:	4b56      	ldr	r3, [pc, #344]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4953      	ldr	r1, [pc, #332]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004668:	4313      	orrs	r3, r2
 800466a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	429a      	cmp	r2, r3
 8004686:	d908      	bls.n	800469a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f023 020f 	bic.w	r2, r3, #15
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4947      	ldr	r1, [pc, #284]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004696:	4313      	orrs	r3, r2
 8004698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d055      	beq.n	8004752 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046a6:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4940      	ldr	r1, [pc, #256]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046c0:	4b3c      	ldr	r3, [pc, #240]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d121      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0f6      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d8:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d115      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0ea      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046f0:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0de      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004700:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0d6      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004710:	4b28      	ldr	r3, [pc, #160]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f023 0207 	bic.w	r2, r3, #7
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4925      	ldr	r1, [pc, #148]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800471e:	4313      	orrs	r3, r2
 8004720:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004722:	f7fc fa19 	bl	8000b58 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004728:	e00a      	b.n	8004740 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472a:	f7fc fa15 	bl	8000b58 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0be      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004740:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	429a      	cmp	r2, r3
 8004750:	d1eb      	bne.n	800472a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d010      	beq.n	8004780 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	429a      	cmp	r2, r3
 800476c:	d208      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476e:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f023 020f 	bic.w	r2, r3, #15
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	490e      	ldr	r1, [pc, #56]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800477c:	4313      	orrs	r3, r2
 800477e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d214      	bcs.n	80047b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 020f 	bic.w	r2, r3, #15
 8004796:	4906      	ldr	r1, [pc, #24]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e086      	b.n	80048be <HAL_RCC_ClockConfig+0x34e>
 80047b0:	52002000 	.word	0x52002000
 80047b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d010      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	4b3f      	ldr	r3, [pc, #252]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d208      	bcs.n	80047e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047d4:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4939      	ldr	r1, [pc, #228]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d010      	beq.n	8004814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047fe:	429a      	cmp	r2, r3
 8004800:	d208      	bcs.n	8004814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004802:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	492e      	ldr	r1, [pc, #184]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004810:	4313      	orrs	r3, r2
 8004812:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d010      	beq.n	8004842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800482c:	429a      	cmp	r2, r3
 800482e:	d208      	bcs.n	8004842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4922      	ldr	r1, [pc, #136]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 800483e:	4313      	orrs	r3, r2
 8004840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d010      	beq.n	8004870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800485a:	429a      	cmp	r2, r3
 800485c:	d208      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800485e:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	4917      	ldr	r1, [pc, #92]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 800486c:	4313      	orrs	r3, r2
 800486e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004870:	f000 f89e 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	4912      	ldr	r1, [pc, #72]	; (80048cc <HAL_RCC_ClockConfig+0x35c>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <HAL_RCC_ClockConfig+0x358>)
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	4a0d      	ldr	r2, [pc, #52]	; (80048cc <HAL_RCC_ClockConfig+0x35c>)
 8004898:	5cd3      	ldrb	r3, [r2, r3]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <HAL_RCC_ClockConfig+0x360>)
 80048a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048a8:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <HAL_RCC_ClockConfig+0x364>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_RCC_ClockConfig+0x368>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc f906 	bl	8000ac4 <HAL_InitTick>
 80048b8:	4603      	mov	r3, r0
 80048ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
 80048cc:	080051e0 	.word	0x080051e0
 80048d0:	24000004 	.word	0x24000004
 80048d4:	24000000 	.word	0x24000000
 80048d8:	24000008 	.word	0x24000008

080048dc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08c      	sub	sp, #48	; 0x30
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d12a      	bne.n	8004944 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80048ee:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 80048f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80048f4:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80048fe:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 8004900:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800490c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004912:	2302      	movs	r3, #2
 8004914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004916:	2303      	movs	r3, #3
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800491e:	2300      	movs	r3, #0
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	4619      	mov	r1, r3
 8004928:	481f      	ldr	r0, [pc, #124]	; (80049a8 <HAL_RCC_MCOConfig+0xcc>)
 800492a:	f7fe fedb 	bl	80036e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	430b      	orrs	r3, r1
 800493c:	4919      	ldr	r1, [pc, #100]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 800493e:	4313      	orrs	r3, r2
 8004940:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004942:	e02a      	b.n	800499a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 8004946:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 800494c:	f043 0304 	orr.w	r3, r3, #4
 8004950:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 8004956:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004968:	2302      	movs	r3, #2
 800496a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496c:	2303      	movs	r3, #3
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004974:	2300      	movs	r3, #0
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004978:	f107 031c 	add.w	r3, r7, #28
 800497c:	4619      	mov	r1, r3
 800497e:	480b      	ldr	r0, [pc, #44]	; (80049ac <HAL_RCC_MCOConfig+0xd0>)
 8004980:	f7fe feb0 	bl	80036e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004984:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	01d9      	lsls	r1, r3, #7
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	430b      	orrs	r3, r1
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <HAL_RCC_MCOConfig+0xc8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
}
 800499a:	bf00      	nop
 800499c:	3730      	adds	r7, #48	; 0x30
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	58020000 	.word	0x58020000
 80049ac:	58020800 	.word	0x58020800

080049b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b089      	sub	sp, #36	; 0x24
 80049b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b6:	4bb3      	ldr	r3, [pc, #716]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049be:	2b18      	cmp	r3, #24
 80049c0:	f200 8155 	bhi.w	8004c6e <HAL_RCC_GetSysClockFreq+0x2be>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a31 	.word	0x08004a31
 80049d0:	08004c6f 	.word	0x08004c6f
 80049d4:	08004c6f 	.word	0x08004c6f
 80049d8:	08004c6f 	.word	0x08004c6f
 80049dc:	08004c6f 	.word	0x08004c6f
 80049e0:	08004c6f 	.word	0x08004c6f
 80049e4:	08004c6f 	.word	0x08004c6f
 80049e8:	08004c6f 	.word	0x08004c6f
 80049ec:	08004a57 	.word	0x08004a57
 80049f0:	08004c6f 	.word	0x08004c6f
 80049f4:	08004c6f 	.word	0x08004c6f
 80049f8:	08004c6f 	.word	0x08004c6f
 80049fc:	08004c6f 	.word	0x08004c6f
 8004a00:	08004c6f 	.word	0x08004c6f
 8004a04:	08004c6f 	.word	0x08004c6f
 8004a08:	08004c6f 	.word	0x08004c6f
 8004a0c:	08004a5d 	.word	0x08004a5d
 8004a10:	08004c6f 	.word	0x08004c6f
 8004a14:	08004c6f 	.word	0x08004c6f
 8004a18:	08004c6f 	.word	0x08004c6f
 8004a1c:	08004c6f 	.word	0x08004c6f
 8004a20:	08004c6f 	.word	0x08004c6f
 8004a24:	08004c6f 	.word	0x08004c6f
 8004a28:	08004c6f 	.word	0x08004c6f
 8004a2c:	08004a63 	.word	0x08004a63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a30:	4b94      	ldr	r3, [pc, #592]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a3c:	4b91      	ldr	r3, [pc, #580]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	4a90      	ldr	r2, [pc, #576]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a4e:	e111      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a50:	4b8d      	ldr	r3, [pc, #564]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a52:	61bb      	str	r3, [r7, #24]
      break;
 8004a54:	e10e      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a56:	4b8d      	ldr	r3, [pc, #564]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a58:	61bb      	str	r3, [r7, #24]
      break;
 8004a5a:	e10b      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a5c:	4b8c      	ldr	r3, [pc, #560]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a5e:	61bb      	str	r3, [r7, #24]
      break;
 8004a60:	e108      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a62:	4b88      	ldr	r3, [pc, #544]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a6c:	4b85      	ldr	r3, [pc, #532]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a78:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a82:	4b80      	ldr	r3, [pc, #512]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80e1 	beq.w	8004c68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f000 8083 	beq.w	8004bb4 <HAL_RCC_GetSysClockFreq+0x204>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f200 80a1 	bhi.w	8004bf8 <HAL_RCC_GetSysClockFreq+0x248>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x114>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d056      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ac2:	e099      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac4:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d02d      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	08db      	lsrs	r3, r3, #3
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	4a6b      	ldr	r2, [pc, #428]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b62      	ldr	r3, [pc, #392]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b2a:	e087      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b6e:	e065      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b40      	ldr	r3, [pc, #256]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bb2:	e043      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ca0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bf6:	e021      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	0a5b      	lsrs	r3, r3, #9
 8004c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c46:	3301      	adds	r3, #1
 8004c48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c60:	ee17 3a90 	vmov	r3, s15
 8004c64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c66:	e005      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
      break;
 8004c6c:	e002      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c6e:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c70:	61bb      	str	r3, [r7, #24]
      break;
 8004c72:	bf00      	nop
  }

  return sysclockfreq;
 8004c74:	69bb      	ldr	r3, [r7, #24]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	58024400 	.word	0x58024400
 8004c88:	03d09000 	.word	0x03d09000
 8004c8c:	003d0900 	.word	0x003d0900
 8004c90:	007a1200 	.word	0x007a1200
 8004c94:	46000000 	.word	0x46000000
 8004c98:	4c742400 	.word	0x4c742400
 8004c9c:	4a742400 	.word	0x4a742400
 8004ca0:	4af42400 	.word	0x4af42400

08004ca4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004cac:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <HAL_RCCEx_CRSConfig+0xa4>)
 8004cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb2:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <HAL_RCCEx_CRSConfig+0xa4>)
 8004cb4:	f043 0302 	orr.w	r3, r3, #2
 8004cb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8004cbc:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <HAL_RCCEx_CRSConfig+0xa4>)
 8004cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc2:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <HAL_RCCEx_CRSConfig+0xa4>)
 8004cc4:	f023 0302 	bic.w	r3, r3, #2
 8004cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8004ccc:	f7fb ff50 	bl	8000b70 <HAL_GetREVID>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d80b      	bhi.n	8004cf2 <HAL_RCCEx_CRSConfig+0x4e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ce2:	d106      	bne.n	8004cf2 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e008      	b.n	8004d04 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <HAL_RCCEx_CRSConfig+0xa8>)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_RCCEx_CRSConfig+0xa8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	4907      	ldr	r1, [pc, #28]	; (8004d4c <HAL_RCCEx_CRSConfig+0xa8>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCCEx_CRSConfig+0xa8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <HAL_RCCEx_CRSConfig+0xa8>)
 8004d3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d3e:	6013      	str	r3, [r2, #0]
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	58024400 	.word	0x58024400
 8004d4c:	40008400 	.word	0x40008400

08004d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e049      	b.n	8004df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fb fd70 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f000 f8a6 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d001      	beq.n	8004e18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e04c      	b.n	8004eb2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <HAL_TIM_Base_Start+0xc0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d022      	beq.n	8004e70 <HAL_TIM_Base_Start+0x70>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e32:	d01d      	beq.n	8004e70 <HAL_TIM_Base_Start+0x70>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <HAL_TIM_Base_Start+0xc4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d018      	beq.n	8004e70 <HAL_TIM_Base_Start+0x70>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a21      	ldr	r2, [pc, #132]	; (8004ec8 <HAL_TIM_Base_Start+0xc8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <HAL_TIM_Base_Start+0x70>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <HAL_TIM_Base_Start+0xcc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <HAL_TIM_Base_Start+0x70>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <HAL_TIM_Base_Start+0xd0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_TIM_Base_Start+0x70>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <HAL_TIM_Base_Start+0xd4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <HAL_TIM_Base_Start+0x70>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <HAL_TIM_Base_Start+0xd8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d115      	bne.n	8004e9c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_TIM_Base_Start+0xdc>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	d015      	beq.n	8004eae <HAL_TIM_Base_Start+0xae>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e88:	d011      	beq.n	8004eae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9a:	e008      	b.n	8004eae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	e000      	b.n	8004eb0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40001800 	.word	0x40001800
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	00010007 	.word	0x00010007

08004ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a46      	ldr	r2, [pc, #280]	; (800500c <TIM_Base_SetConfig+0x12c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d00f      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a43      	ldr	r2, [pc, #268]	; (8005010 <TIM_Base_SetConfig+0x130>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a42      	ldr	r2, [pc, #264]	; (8005014 <TIM_Base_SetConfig+0x134>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a41      	ldr	r2, [pc, #260]	; (8005018 <TIM_Base_SetConfig+0x138>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <TIM_Base_SetConfig+0x13c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d108      	bne.n	8004f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a35      	ldr	r2, [pc, #212]	; (800500c <TIM_Base_SetConfig+0x12c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01f      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d01b      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a32      	ldr	r2, [pc, #200]	; (8005010 <TIM_Base_SetConfig+0x130>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d017      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a31      	ldr	r2, [pc, #196]	; (8005014 <TIM_Base_SetConfig+0x134>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a30      	ldr	r2, [pc, #192]	; (8005018 <TIM_Base_SetConfig+0x138>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0x13c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2e      	ldr	r2, [pc, #184]	; (8005020 <TIM_Base_SetConfig+0x140>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <TIM_Base_SetConfig+0x144>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2c      	ldr	r2, [pc, #176]	; (8005028 <TIM_Base_SetConfig+0x148>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d108      	bne.n	8004f8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a16      	ldr	r2, [pc, #88]	; (800500c <TIM_Base_SetConfig+0x12c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00f      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <TIM_Base_SetConfig+0x13c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	; (8005020 <TIM_Base_SetConfig+0x140>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a16      	ldr	r2, [pc, #88]	; (8005024 <TIM_Base_SetConfig+0x144>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a15      	ldr	r2, [pc, #84]	; (8005028 <TIM_Base_SetConfig+0x148>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d105      	bne.n	8004ffe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f023 0201 	bic.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	611a      	str	r2, [r3, #16]
  }
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40010400 	.word	0x40010400
 8005020:	40014000 	.word	0x40014000
 8005024:	40014400 	.word	0x40014400
 8005028:	40014800 	.word	0x40014800

0800502c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005040:	2302      	movs	r3, #2
 8005042:	e06d      	b.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a30      	ldr	r2, [pc, #192]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2f      	ldr	r2, [pc, #188]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d108      	bne.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800507e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a20      	ldr	r2, [pc, #128]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d022      	beq.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d01d      	beq.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1a      	ldr	r2, [pc, #104]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a15      	ldr	r2, [pc, #84]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10c      	bne.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40010000 	.word	0x40010000
 8005130:	40010400 	.word	0x40010400
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40001800 	.word	0x40001800
 8005144:	40014000 	.word	0x40014000

08005148 <__libc_init_array>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4d0d      	ldr	r5, [pc, #52]	; (8005180 <__libc_init_array+0x38>)
 800514c:	4c0d      	ldr	r4, [pc, #52]	; (8005184 <__libc_init_array+0x3c>)
 800514e:	1b64      	subs	r4, r4, r5
 8005150:	10a4      	asrs	r4, r4, #2
 8005152:	2600      	movs	r6, #0
 8005154:	42a6      	cmp	r6, r4
 8005156:	d109      	bne.n	800516c <__libc_init_array+0x24>
 8005158:	4d0b      	ldr	r5, [pc, #44]	; (8005188 <__libc_init_array+0x40>)
 800515a:	4c0c      	ldr	r4, [pc, #48]	; (800518c <__libc_init_array+0x44>)
 800515c:	f000 f820 	bl	80051a0 <_init>
 8005160:	1b64      	subs	r4, r4, r5
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	2600      	movs	r6, #0
 8005166:	42a6      	cmp	r6, r4
 8005168:	d105      	bne.n	8005176 <__libc_init_array+0x2e>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005170:	4798      	blx	r3
 8005172:	3601      	adds	r6, #1
 8005174:	e7ee      	b.n	8005154 <__libc_init_array+0xc>
 8005176:	f855 3b04 	ldr.w	r3, [r5], #4
 800517a:	4798      	blx	r3
 800517c:	3601      	adds	r6, #1
 800517e:	e7f2      	b.n	8005166 <__libc_init_array+0x1e>
 8005180:	080051f8 	.word	0x080051f8
 8005184:	080051f8 	.word	0x080051f8
 8005188:	080051f8 	.word	0x080051f8
 800518c:	080051fc 	.word	0x080051fc

08005190 <memset>:
 8005190:	4402      	add	r2, r0
 8005192:	4603      	mov	r3, r0
 8005194:	4293      	cmp	r3, r2
 8005196:	d100      	bne.n	800519a <memset+0xa>
 8005198:	4770      	bx	lr
 800519a:	f803 1b01 	strb.w	r1, [r3], #1
 800519e:	e7f9      	b.n	8005194 <memset+0x4>

080051a0 <_init>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr

080051ac <_fini>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr
