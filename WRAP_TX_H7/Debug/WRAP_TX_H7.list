
WRAP_TX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a8c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009d38  08009d38  00019d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d78  08009d78  00019d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000023c  24000010  08009d98  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400024c  08009d98  0002024c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001855f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029bb  00000000  00000000  0003859d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001288  00000000  00000000  0003af58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001190  00000000  00000000  0003c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030f53  00000000  00000000  0003d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018d6a  00000000  00000000  0006e2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141d58  00000000  00000000  0008702d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c8d85  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ec8  00000000  00000000  001c8dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08009d20 	.word	0x08009d20

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08009d20 	.word	0x08009d20

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fcda 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f826 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f9e4 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f000 f9ba 	bl	8000978 <MX_DMA_Init>
  MX_TIM6_Init();
 8000604:	f000 f936 	bl	8000874 <MX_TIM6_Init>
  MX_DAC1_Init();
 8000608:	f000 f8e2 	bl	80007d0 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 800060c:	f000 f912 	bl	8000834 <MX_OPAMP1_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f966 	bl	80008e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0x44>)
 8000616:	f004 f989 	bl	800492c <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim6);
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <main+0x48>)
 800061c:	f007 f8d8 	bl	80077d0 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000620:	2100      	movs	r1, #0
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <main+0x4c>)
 8000624:	f000 fe91 	bl	800134a <HAL_DAC_Start>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg));
 8000628:	2202      	movs	r2, #2
 800062a:	4905      	ldr	r1, [pc, #20]	; (8000640 <main+0x50>)
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <main+0x54>)
 800062e:	f007 fb51 	bl	8007cd4 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0x42>
 8000634:	240000b8 	.word	0x240000b8
 8000638:	240000ec 	.word	0x240000ec
 800063c:	2400002c 	.word	0x2400002c
 8000640:	24000244 	.word	0x24000244
 8000644:	24000138 	.word	0x24000138

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b0a4      	sub	sp, #144	; 0x90
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000652:	224c      	movs	r2, #76	; 0x4c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fb5a 	bl	8009d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000660:	2220      	movs	r2, #32
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f009 fb53 	bl	8009d10 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800067c:	4b52      	ldr	r3, [pc, #328]	; (80007c8 <SystemClock_Config+0x180>)
 800067e:	f04f 32ff 	mov.w	r2, #4294967295
 8000682:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000686:	2004      	movs	r0, #4
 8000688:	f004 f992 	bl	80049b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <SystemClock_Config+0x184>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a4d      	ldr	r2, [pc, #308]	; (80007cc <SystemClock_Config+0x184>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b4b      	ldr	r3, [pc, #300]	; (80007cc <SystemClock_Config+0x184>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a8:	bf00      	nop
 80006aa:	4b48      	ldr	r3, [pc, #288]	; (80007cc <SystemClock_Config+0x184>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b6:	d1f8      	bne.n	80006aa <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b8:	f004 f96a 	bl	8004990 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006bc:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <SystemClock_Config+0x180>)
 80006be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006c0:	4a41      	ldr	r2, [pc, #260]	; (80007c8 <SystemClock_Config+0x180>)
 80006c2:	f023 0318 	bic.w	r3, r3, #24
 80006c6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006c8:	232f      	movs	r3, #47	; 0x2f
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e2:	2301      	movs	r3, #1
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	2302      	movs	r3, #2
 80006ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80006f2:	2346      	movs	r3, #70	; 0x46
 80006f4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000704:	230c      	movs	r3, #12
 8000706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800071a:	4618      	mov	r0, r3
 800071c:	f004 f9a2 	bl	8004a64 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000726:	f000 f9d5 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	233f      	movs	r3, #63	; 0x3f
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2303      	movs	r3, #3
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000748:	2340      	movs	r3, #64	; 0x40
 800074a:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	2107      	movs	r1, #7
 8000752:	4618      	mov	r0, r3
 8000754:	f004 fdb8 	bl	80052c8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800075e:	f000 f9b9 	bl	8000ad4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000762:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f004 ff63 	bl	8005634 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800076e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000772:	2100      	movs	r1, #0
 8000774:	2001      	movs	r0, #1
 8000776:	f004 ff5d 	bl	8005634 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <SystemClock_Config+0x180>)
 800077c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000780:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <SystemClock_Config+0x180>)
 8000782:	f043 0302 	orr.w	r3, r3, #2
 8000786:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <SystemClock_Config+0x180>)
 800078c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800079c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80007a6:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80007ac:	2322      	movs	r3, #34	; 0x22
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80007b0:	2320      	movs	r3, #32
 80007b2:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4618      	mov	r0, r3
 80007ba:	f006 fdf7 	bl	80073ac <HAL_RCCEx_CRSConfig>
}
 80007be:	bf00      	nop
 80007c0:	3790      	adds	r7, #144	; 0x90
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58024400 	.word	0x58024400
 80007cc:	58024800 	.word	0x58024800

080007d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2224      	movs	r2, #36	; 0x24
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f009 fa97 	bl	8009d10 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_DAC1_Init+0x5c>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_DAC1_Init+0x60>)
 80007e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <MX_DAC1_Init+0x5c>)
 80007ea:	f000 fd8c 	bl	8001306 <HAL_DAC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007f4:	f000 f96e 	bl	8000ad4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80007fc:	2316      	movs	r3, #22
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000800:	2302      	movs	r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_DAC1_Init+0x5c>)
 8000814:	f000 fdf0 	bl	80013f8 <HAL_DAC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f959 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2400002c 	.word	0x2400002c
 8000830:	40007400 	.word	0x40007400

08000834 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_OPAMP1_Init+0x38>)
 800083a:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <MX_OPAMP1_Init+0x3c>)
 800083c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_OPAMP1_Init+0x38>)
 8000840:	2260      	movs	r2, #96	; 0x60
 8000842:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC_CH;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_OPAMP1_Init+0x38>)
 8000846:	2204      	movs	r2, #4
 8000848:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_OPAMP1_Init+0x38>)
 800084c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000850:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_OPAMP1_Init+0x38>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_OPAMP1_Init+0x38>)
 800085a:	f003 ff9f 	bl	800479c <HAL_OPAMP_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_OPAMP1_Init+0x34>
  {
    Error_Handler();
 8000864:	f000 f936 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	240000b8 	.word	0x240000b8
 8000870:	40009000 	.word	0x40009000

08000874 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_TIM6_Init+0x64>)
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_TIM6_Init+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_TIM6_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_TIM6_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 27;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_TIM6_Init+0x64>)
 8000898:	221b      	movs	r2, #27
 800089a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_TIM6_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008a4:	f006 ff3c 	bl	8007720 <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008ae:	f000 f911 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008b2:	2320      	movs	r3, #32
 80008b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008c0:	f007 f89c 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008ca:	f000 f903 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	240000ec 	.word	0x240000ec
 80008dc:	40001000 	.word	0x40001000

080008e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_USART3_UART_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800092a:	f007 f8f5 	bl	8007b18 <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f8ce 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800093c:	f009 f8f9 	bl	8009b32 <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f8c5 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800094e:	f009 f92e 	bl	8009bae <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f8bc 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800095e:	f009 f8af 	bl	8009ac0 <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f8b4 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	24000138 	.word	0x24000138
 8000974:	40004800 	.word	0x40004800

08000978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_DMA_Init+0x4c>)
 8000980:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <MX_DMA_Init+0x4c>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_DMA_Init+0x4c>)
 8000990:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	200b      	movs	r0, #11
 80009a2:	f000 fc7c 	bl	800129e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009a6:	200b      	movs	r0, #11
 80009a8:	f000 fc93 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	200c      	movs	r0, #12
 80009b2:	f000 fc74 	bl	800129e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009b6:	200c      	movs	r0, #12
 80009b8:	f000 fc8b 	bl	80012d2 <HAL_NVIC_EnableIRQ>

}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	58024400 	.word	0x58024400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 80009e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009e4:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 80009f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 80009fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a02:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a20:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a74:	f003 fce2 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_GPIO_Init+0xe4>)
 8000a96:	f003 fcd1 	bl	800443c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	58024400 	.word	0x58024400
 8000aa8:	58020800 	.word	0x58020800
 8000aac:	58020000 	.word	0x58020000

08000ab0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg), 1);
 8000ab8:	2301      	movs	r3, #1
 8000aba:	2202      	movs	r2, #2
 8000abc:	4903      	ldr	r1, [pc, #12]	; (8000acc <HAL_UART_RxCpltCallback+0x1c>)
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <HAL_UART_RxCpltCallback+0x20>)
 8000ac0:	f007 f87a 	bl	8007bb8 <HAL_UART_Transmit>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000244 	.word	0x24000244
 8000ad0:	24000138 	.word	0x24000138

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_MspInit+0x30>)
 8000ae8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x30>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x30>)
 8000af8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	58024400 	.word	0x58024400

08000b14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <HAL_DAC_MspInit+0x9c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d13f      	bne.n	8000ba6 <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <HAL_DAC_MspInit+0xa0>)
 8000b28:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <HAL_DAC_MspInit+0xa0>)
 8000b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b32:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_DAC_MspInit+0xa0>)
 8000b38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b46:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <HAL_DAC_MspInit+0xa8>)
 8000b48:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b4c:	2243      	movs	r2, #67	; 0x43
 8000b4e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b52:	2240      	movs	r2, #64	; 0x40
 8000b54:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b62:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b6a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b82:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b8c:	f000 fd76 	bl	800167c <HAL_DMA_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_DAC_MspInit+0x86>
    {
      Error_Handler();
 8000b96:	f7ff ff9d 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <HAL_DAC_MspInit+0xa4>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40007400 	.word	0x40007400
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	24000040 	.word	0x24000040
 8000bbc:	40020010 	.word	0x40020010

08000bc0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <HAL_OPAMP_MspInit+0x80>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d129      	bne.n	8000c36 <HAL_OPAMP_MspInit+0x76>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_OPAMP_MspInit+0x84>)
 8000be4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000be8:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <HAL_OPAMP_MspInit+0x84>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_OPAMP_MspInit+0x84>)
 8000bf4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_OPAMP_MspInit+0x84>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_OPAMP_MspInit+0x84>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_OPAMP_MspInit+0x84>)
 8000c12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_OPAMP_MspInit+0x88>)
 8000c32:	f003 fc03 	bl	800443c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40009000 	.word	0x40009000
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58020800 	.word	0x58020800

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10e      	bne.n	8000c7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c60:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c64:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c70:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40001000 	.word	0x40001000
 8000c8c:	58024400 	.word	0x58024400

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0ba      	sub	sp, #232	; 0xe8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	22c0      	movs	r2, #192	; 0xc0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f009 f82d 	bl	8009d10 <memset>
  if(huart->Instance==USART3)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a42      	ldr	r2, [pc, #264]	; (8000dc4 <HAL_UART_MspInit+0x134>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d17d      	bne.n	8000dbc <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc0:	f04f 0202 	mov.w	r2, #2
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 feec 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ce2:	f7ff fef7 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <HAL_UART_MspInit+0x138>)
 8000ce8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cec:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <HAL_UART_MspInit+0x138>)
 8000cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <HAL_UART_MspInit+0x138>)
 8000cf8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d04:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_UART_MspInit+0x138>)
 8000d06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_UART_MspInit+0x138>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <HAL_UART_MspInit+0x138>)
 8000d16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4820      	ldr	r0, [pc, #128]	; (8000dcc <HAL_UART_MspInit+0x13c>)
 8000d4a:	f003 fb77 	bl	800443c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d50:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_UART_MspInit+0x144>)
 8000d52:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d56:	222d      	movs	r2, #45	; 0x2d
 8000d58:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d80:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d8e:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d90:	f000 fc74 	bl	800167c <HAL_DMA_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000d9a:	f7ff fe9b 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_UART_MspInit+0x140>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2027      	movs	r0, #39	; 0x27
 8000db2:	f000 fa74 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000db6:	2027      	movs	r0, #39	; 0x27
 8000db8:	f000 fa8b 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	37e8      	adds	r7, #232	; 0xe8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020c00 	.word	0x58020c00
 8000dd0:	240001cc 	.word	0x240001cc
 8000dd4:	40020028 	.word	0x40020028

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f934 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA1_Stream0_IRQHandler+0x10>)
 8000e32:	f001 ff81 	bl	8002d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000040 	.word	0x24000040

08000e40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA1_Stream1_IRQHandler+0x10>)
 8000e46:	f001 ff77 	bl	8002d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	240001cc 	.word	0x240001cc

08000e54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART3_IRQHandler+0x10>)
 8000e5a:	f006 ff87 	bl	8007d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	24000138 	.word	0x24000138

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <SystemInit+0xd0>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <SystemInit+0xd0>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <SystemInit+0xd4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d807      	bhi.n	8000e98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <SystemInit+0xd4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 030f 	bic.w	r3, r3, #15
 8000e90:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <SystemInit+0xd4>)
 8000e92:	f043 0303 	orr.w	r3, r3, #3
 8000e96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <SystemInit+0xd8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a28      	ldr	r2, [pc, #160]	; (8000f40 <SystemInit+0xd8>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <SystemInit+0xd8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <SystemInit+0xd8>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4924      	ldr	r1, [pc, #144]	; (8000f40 <SystemInit+0xd8>)
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <SystemInit+0xdc>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <SystemInit+0xd4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <SystemInit+0xd4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 030f 	bic.w	r3, r3, #15
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <SystemInit+0xd4>)
 8000ecc:	f043 0303 	orr.w	r3, r3, #3
 8000ed0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <SystemInit+0xd8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <SystemInit+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <SystemInit+0xd8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <SystemInit+0xd8>)
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <SystemInit+0xe0>)
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <SystemInit+0xd8>)
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <SystemInit+0xe4>)
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <SystemInit+0xd8>)
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <SystemInit+0xe8>)
 8000ef4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <SystemInit+0xd8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <SystemInit+0xd8>)
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <SystemInit+0xe8>)
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <SystemInit+0xd8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <SystemInit+0xd8>)
 8000f0a:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <SystemInit+0xe8>)
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <SystemInit+0xd8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <SystemInit+0xd8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <SystemInit+0xd8>)
 8000f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <SystemInit+0xd8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <SystemInit+0xec>)
 8000f28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00
 8000f3c:	52002000 	.word	0x52002000
 8000f40:	58024400 	.word	0x58024400
 8000f44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f48:	02020200 	.word	0x02020200
 8000f4c:	01ff0000 	.word	0x01ff0000
 8000f50:	01010280 	.word	0x01010280
 8000f54:	52004000 	.word	0x52004000

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f5c:	f7ff ff84 	bl	8000e68 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f008 fe9f 	bl	8009cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fb31 	bl	80005f0 <main>
  bx  lr
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f98:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f9c:	08009d88 	.word	0x08009d88
  ldr r2, =_sbss
 8000fa0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fa4:	2400024c 	.word	0x2400024c

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f000 f968 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fb8:	f004 fba6 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_Init+0x68>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	0a1b      	lsrs	r3, r3, #8
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	4913      	ldr	r1, [pc, #76]	; (8001018 <HAL_Init+0x6c>)
 8000fca:	5ccb      	ldrb	r3, [r1, r3]
 8000fcc:	f003 031f 	and.w	r3, r3, #31
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_Init+0x68>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_Init+0x6c>)
 8000fe0:	5cd3      	ldrb	r3, [r2, r3]
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_Init+0x70>)
 8000fee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_Init+0x74>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f814 	bl	8001024 <HAL_InitTick>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e002      	b.n	800100c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001006:	f7ff fd6b 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	58024400 	.word	0x58024400
 8001018:	08009d38 	.word	0x08009d38
 800101c:	24000004 	.word	0x24000004
 8001020:	24000000 	.word	0x24000000

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_InitTick+0x60>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e021      	b.n	800107c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_InitTick+0x64>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_InitTick+0x60>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f94d 	bl	80012ee <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f917 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_InitTick+0x68>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2400000c 	.word	0x2400000c
 8001088:	24000000 	.word	0x24000000
 800108c:	24000008 	.word	0x24000008

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2400000c 	.word	0x2400000c
 80010b4:	24000248 	.word	0x24000248

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	24000248 	.word	0x24000248

080010d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetREVID+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	0c1b      	lsrs	r3, r3, #16
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	5c001000 	.word	0x5c001000

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <__NVIC_SetPriorityGrouping+0x40>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	4313      	orrs	r3, r2
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x40>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	05fa0000 	.word	0x05fa0000

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff29 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff40 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff33 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa4 	bl	8001244 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e014      	b.n	8001342 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	791b      	ldrb	r3, [r3, #4]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fbf3 	bl	8000b14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2202      	movs	r2, #2
 8001332:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e046      	b.n	80013ec <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	795b      	ldrb	r3, [r3, #5]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_DAC_Start+0x20>
 8001366:	2302      	movs	r3, #2
 8001368:	e040      	b.n	80013ec <HAL_DAC_Start+0xa2>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2202      	movs	r2, #2
 8001374:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2201      	movs	r2, #1
 8001384:	409a      	lsls	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10f      	bne.n	80013b4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d11d      	bne.n	80013de <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	e014      	b.n	80013de <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2102      	movs	r1, #2
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d107      	bne.n	80013de <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0202 	orr.w	r2, r2, #2
 80013dc:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_DAC_ConfigChannel+0x1e>
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e12a      	b.n	8001670 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	795b      	ldrb	r3, [r3, #5]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_DAC_ConfigChannel+0x2e>
 8001422:	2302      	movs	r3, #2
 8001424:	e124      	b.n	8001670 <HAL_DAC_ConfigChannel+0x278>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2201      	movs	r2, #1
 800142a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2202      	movs	r2, #2
 8001430:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b04      	cmp	r3, #4
 8001438:	d17a      	bne.n	8001530 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800143a:	f7ff fe3d 	bl	80010b8 <HAL_GetTick>
 800143e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d13d      	bne.n	80014c2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001446:	e018      	b.n	800147a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001448:	f7ff fe36 	bl	80010b8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d911      	bls.n	800147a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145c:	4b86      	ldr	r3, [pc, #536]	; (8001678 <HAL_DAC_ConfigChannel+0x280>)
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00a      	beq.n	800147a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f043 0208 	orr.w	r2, r3, #8
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2203      	movs	r2, #3
 8001474:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e0fa      	b.n	8001670 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001480:	4b7d      	ldr	r3, [pc, #500]	; (8001678 <HAL_DAC_ConfigChannel+0x280>)
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1df      	bne.n	8001448 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	6992      	ldr	r2, [r2, #24]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
 8001492:	e020      	b.n	80014d6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001494:	f7ff fe10 	bl	80010b8 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d90f      	bls.n	80014c2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da0a      	bge.n	80014c2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	f043 0208 	orr.w	r2, r3, #8
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2203      	movs	r2, #3
 80014bc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0d6      	b.n	8001670 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dbe3      	blt.n	8001494 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	6992      	ldr	r2, [r2, #24]
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	ea02 0103 	and.w	r1, r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	69da      	ldr	r2, [r3, #28]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	21ff      	movs	r1, #255	; 0xff
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	ea02 0103 	and.w	r1, r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d11d      	bne.n	8001574 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	221f      	movs	r2, #31
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2207      	movs	r2, #7
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
 800159c:	e00f      	b.n	80015be <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d102      	bne.n	80015ac <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80015a6:	2301      	movs	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
 80015aa:	e008      	b.n	80015be <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80015b4:	2301      	movs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
 80015b8:	e001      	b.n	80015be <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43da      	mvns	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	400a      	ands	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	22c0      	movs	r2, #192	; 0xc0
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800166c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001670:	4618      	mov	r0, r3
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20008000 	.word	0x20008000

0800167c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fd18 	bl	80010b8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e37f      	b.n	8001d94 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a66      	ldr	r2, [pc, #408]	; (8001834 <HAL_DMA_Init+0x1b8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d04a      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a65      	ldr	r2, [pc, #404]	; (8001838 <HAL_DMA_Init+0x1bc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d045      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a63      	ldr	r2, [pc, #396]	; (800183c <HAL_DMA_Init+0x1c0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d040      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a62      	ldr	r2, [pc, #392]	; (8001840 <HAL_DMA_Init+0x1c4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d03b      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a60      	ldr	r2, [pc, #384]	; (8001844 <HAL_DMA_Init+0x1c8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d036      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a5f      	ldr	r2, [pc, #380]	; (8001848 <HAL_DMA_Init+0x1cc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d031      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a5d      	ldr	r2, [pc, #372]	; (800184c <HAL_DMA_Init+0x1d0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d02c      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5c      	ldr	r2, [pc, #368]	; (8001850 <HAL_DMA_Init+0x1d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d027      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <HAL_DMA_Init+0x1d8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d022      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a59      	ldr	r2, [pc, #356]	; (8001858 <HAL_DMA_Init+0x1dc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d01d      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a57      	ldr	r2, [pc, #348]	; (800185c <HAL_DMA_Init+0x1e0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d018      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a56      	ldr	r2, [pc, #344]	; (8001860 <HAL_DMA_Init+0x1e4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d013      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_DMA_Init+0x1e8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00e      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a53      	ldr	r2, [pc, #332]	; (8001868 <HAL_DMA_Init+0x1ec>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d009      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a51      	ldr	r2, [pc, #324]	; (800186c <HAL_DMA_Init+0x1f0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d004      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a50      	ldr	r2, [pc, #320]	; (8001870 <HAL_DMA_Init+0x1f4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_DMA_Init+0xbc>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_DMA_Init+0xbe>
 8001738:	2300      	movs	r3, #0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 813c 	beq.w	80019b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a37      	ldr	r2, [pc, #220]	; (8001834 <HAL_DMA_Init+0x1b8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d04a      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a36      	ldr	r2, [pc, #216]	; (8001838 <HAL_DMA_Init+0x1bc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d045      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a34      	ldr	r2, [pc, #208]	; (800183c <HAL_DMA_Init+0x1c0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d040      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a33      	ldr	r2, [pc, #204]	; (8001840 <HAL_DMA_Init+0x1c4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d03b      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a31      	ldr	r2, [pc, #196]	; (8001844 <HAL_DMA_Init+0x1c8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d036      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a30      	ldr	r2, [pc, #192]	; (8001848 <HAL_DMA_Init+0x1cc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d031      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2e      	ldr	r2, [pc, #184]	; (800184c <HAL_DMA_Init+0x1d0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d02c      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a2d      	ldr	r2, [pc, #180]	; (8001850 <HAL_DMA_Init+0x1d4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d027      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2b      	ldr	r2, [pc, #172]	; (8001854 <HAL_DMA_Init+0x1d8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d022      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <HAL_DMA_Init+0x1dc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d01d      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a28      	ldr	r2, [pc, #160]	; (800185c <HAL_DMA_Init+0x1e0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d018      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a27      	ldr	r2, [pc, #156]	; (8001860 <HAL_DMA_Init+0x1e4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d013      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <HAL_DMA_Init+0x1e8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00e      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a24      	ldr	r2, [pc, #144]	; (8001868 <HAL_DMA_Init+0x1ec>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_DMA_Init+0x1f0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d004      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_DMA_Init+0x1f4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d108      	bne.n	8001802 <HAL_DMA_Init+0x186>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e007      	b.n	8001812 <HAL_DMA_Init+0x196>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001812:	e02f      	b.n	8001874 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001814:	f7ff fc50 	bl	80010b8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b05      	cmp	r3, #5
 8001820:	d928      	bls.n	8001874 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2220      	movs	r2, #32
 8001826:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2203      	movs	r2, #3
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e2af      	b.n	8001d94 <HAL_DMA_Init+0x718>
 8001834:	40020010 	.word	0x40020010
 8001838:	40020028 	.word	0x40020028
 800183c:	40020040 	.word	0x40020040
 8001840:	40020058 	.word	0x40020058
 8001844:	40020070 	.word	0x40020070
 8001848:	40020088 	.word	0x40020088
 800184c:	400200a0 	.word	0x400200a0
 8001850:	400200b8 	.word	0x400200b8
 8001854:	40020410 	.word	0x40020410
 8001858:	40020428 	.word	0x40020428
 800185c:	40020440 	.word	0x40020440
 8001860:	40020458 	.word	0x40020458
 8001864:	40020470 	.word	0x40020470
 8001868:	40020488 	.word	0x40020488
 800186c:	400204a0 	.word	0x400204a0
 8001870:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1c8      	bne.n	8001814 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_DMA_Init+0x3e0>)
 800188e:	4013      	ands	r3, r2
 8001890:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800189a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d107      	bne.n	80018d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4313      	orrs	r3, r2
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b28      	cmp	r3, #40	; 0x28
 80018de:	d903      	bls.n	80018e8 <HAL_DMA_Init+0x26c>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b2e      	cmp	r3, #46	; 0x2e
 80018e6:	d91f      	bls.n	8001928 <HAL_DMA_Init+0x2ac>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b3e      	cmp	r3, #62	; 0x3e
 80018ee:	d903      	bls.n	80018f8 <HAL_DMA_Init+0x27c>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b42      	cmp	r3, #66	; 0x42
 80018f6:	d917      	bls.n	8001928 <HAL_DMA_Init+0x2ac>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b46      	cmp	r3, #70	; 0x46
 80018fe:	d903      	bls.n	8001908 <HAL_DMA_Init+0x28c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b48      	cmp	r3, #72	; 0x48
 8001906:	d90f      	bls.n	8001928 <HAL_DMA_Init+0x2ac>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b4e      	cmp	r3, #78	; 0x4e
 800190e:	d903      	bls.n	8001918 <HAL_DMA_Init+0x29c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b52      	cmp	r3, #82	; 0x52
 8001916:	d907      	bls.n	8001928 <HAL_DMA_Init+0x2ac>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b73      	cmp	r3, #115	; 0x73
 800191e:	d905      	bls.n	800192c <HAL_DMA_Init+0x2b0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b77      	cmp	r3, #119	; 0x77
 8001926:	d801      	bhi.n	800192c <HAL_DMA_Init+0x2b0>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_DMA_Init+0x2b2>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001938:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f023 0307 	bic.w	r3, r3, #7
 8001950:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b04      	cmp	r3, #4
 8001962:	d117      	bne.n	8001994 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00e      	beq.n	8001994 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f002 fbd6 	bl	8004128 <DMA_CheckFifoParam>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e1ff      	b.n	8001d94 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f002 fb11 	bl	8003fc4 <DMA_CalcBaseAndBitshift>
 80019a2:	4603      	mov	r3, r0
 80019a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	223f      	movs	r2, #63	; 0x3f
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	e0fe      	b.n	8001bb6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <HAL_DMA_Init+0x3e4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d04a      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <HAL_DMA_Init+0x3e8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d045      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <HAL_DMA_Init+0x3ec>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d040      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <HAL_DMA_Init+0x3f0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d03b      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_DMA_Init+0x3f4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d036      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_DMA_Init+0x3f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d031      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <HAL_DMA_Init+0x3fc>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d02c      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <HAL_DMA_Init+0x400>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d027      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <HAL_DMA_Init+0x404>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d022      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_DMA_Init+0x408>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d01d      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <HAL_DMA_Init+0x40c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d018      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <HAL_DMA_Init+0x410>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d013      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <HAL_DMA_Init+0x414>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00e      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <HAL_DMA_Init+0x418>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d009      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <HAL_DMA_Init+0x41c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <HAL_DMA_Init+0x3dc>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <HAL_DMA_Init+0x420>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d123      	bne.n	8001aa0 <HAL_DMA_Init+0x424>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e022      	b.n	8001aa2 <HAL_DMA_Init+0x426>
 8001a5c:	fe10803f 	.word	0xfe10803f
 8001a60:	48022c08 	.word	0x48022c08
 8001a64:	48022c1c 	.word	0x48022c1c
 8001a68:	48022c30 	.word	0x48022c30
 8001a6c:	48022c44 	.word	0x48022c44
 8001a70:	48022c58 	.word	0x48022c58
 8001a74:	48022c6c 	.word	0x48022c6c
 8001a78:	48022c80 	.word	0x48022c80
 8001a7c:	48022c94 	.word	0x48022c94
 8001a80:	58025408 	.word	0x58025408
 8001a84:	5802541c 	.word	0x5802541c
 8001a88:	58025430 	.word	0x58025430
 8001a8c:	58025444 	.word	0x58025444
 8001a90:	58025458 	.word	0x58025458
 8001a94:	5802546c 	.word	0x5802546c
 8001a98:	58025480 	.word	0x58025480
 8001a9c:	58025494 	.word	0x58025494
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d07e      	beq.n	8001ba4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a80      	ldr	r2, [pc, #512]	; (8001cac <HAL_DMA_Init+0x630>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d021      	beq.n	8001af4 <HAL_DMA_Init+0x478>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a7e      	ldr	r2, [pc, #504]	; (8001cb0 <HAL_DMA_Init+0x634>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01c      	beq.n	8001af4 <HAL_DMA_Init+0x478>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7d      	ldr	r2, [pc, #500]	; (8001cb4 <HAL_DMA_Init+0x638>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d017      	beq.n	8001af4 <HAL_DMA_Init+0x478>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7b      	ldr	r2, [pc, #492]	; (8001cb8 <HAL_DMA_Init+0x63c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d012      	beq.n	8001af4 <HAL_DMA_Init+0x478>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7a      	ldr	r2, [pc, #488]	; (8001cbc <HAL_DMA_Init+0x640>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00d      	beq.n	8001af4 <HAL_DMA_Init+0x478>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a78      	ldr	r2, [pc, #480]	; (8001cc0 <HAL_DMA_Init+0x644>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d008      	beq.n	8001af4 <HAL_DMA_Init+0x478>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a77      	ldr	r2, [pc, #476]	; (8001cc4 <HAL_DMA_Init+0x648>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA_Init+0x478>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a75      	ldr	r2, [pc, #468]	; (8001cc8 <HAL_DMA_Init+0x64c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <HAL_DMA_Init+0x650>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b40      	cmp	r3, #64	; 0x40
 8001b1c:	d008      	beq.n	8001b30 <HAL_DMA_Init+0x4b4>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b80      	cmp	r3, #128	; 0x80
 8001b24:	d102      	bne.n	8001b2c <HAL_DMA_Init+0x4b0>
 8001b26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b2a:	e002      	b.n	8001b32 <HAL_DMA_Init+0x4b6>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_DMA_Init+0x4b6>
 8001b30:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68d2      	ldr	r2, [r2, #12]
 8001b36:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b60:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <HAL_DMA_Init+0x654>)
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a56      	ldr	r2, [pc, #344]	; (8001cd4 <HAL_DMA_Init+0x658>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	009a      	lsls	r2, r3, #2
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f002 fa1b 	bl	8003fc4 <DMA_CalcBaseAndBitshift>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e008      	b.n	8001bb6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2240      	movs	r2, #64	; 0x40
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0ee      	b.n	8001d94 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_DMA_Init+0x65c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d072      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a45      	ldr	r2, [pc, #276]	; (8001cdc <HAL_DMA_Init+0x660>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d06d      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a44      	ldr	r2, [pc, #272]	; (8001ce0 <HAL_DMA_Init+0x664>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d068      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_DMA_Init+0x668>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d063      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a41      	ldr	r2, [pc, #260]	; (8001ce8 <HAL_DMA_Init+0x66c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d05e      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a3f      	ldr	r2, [pc, #252]	; (8001cec <HAL_DMA_Init+0x670>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d059      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a3e      	ldr	r2, [pc, #248]	; (8001cf0 <HAL_DMA_Init+0x674>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d054      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a3c      	ldr	r2, [pc, #240]	; (8001cf4 <HAL_DMA_Init+0x678>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d04f      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a3b      	ldr	r2, [pc, #236]	; (8001cf8 <HAL_DMA_Init+0x67c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d04a      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <HAL_DMA_Init+0x680>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d045      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <HAL_DMA_Init+0x684>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d040      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a36      	ldr	r2, [pc, #216]	; (8001d04 <HAL_DMA_Init+0x688>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d03b      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a35      	ldr	r2, [pc, #212]	; (8001d08 <HAL_DMA_Init+0x68c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d036      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a33      	ldr	r2, [pc, #204]	; (8001d0c <HAL_DMA_Init+0x690>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d031      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a32      	ldr	r2, [pc, #200]	; (8001d10 <HAL_DMA_Init+0x694>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d02c      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <HAL_DMA_Init+0x698>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d027      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_DMA_Init+0x630>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d022      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_DMA_Init+0x634>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01d      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_DMA_Init+0x638>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d018      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_DMA_Init+0x63c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_DMA_Init+0x640>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <HAL_DMA_Init+0x644>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d009      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <HAL_DMA_Init+0x648>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d004      	beq.n	8001ca6 <HAL_DMA_Init+0x62a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_DMA_Init+0x64c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d138      	bne.n	8001d18 <HAL_DMA_Init+0x69c>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e037      	b.n	8001d1a <HAL_DMA_Init+0x69e>
 8001caa:	bf00      	nop
 8001cac:	58025408 	.word	0x58025408
 8001cb0:	5802541c 	.word	0x5802541c
 8001cb4:	58025430 	.word	0x58025430
 8001cb8:	58025444 	.word	0x58025444
 8001cbc:	58025458 	.word	0x58025458
 8001cc0:	5802546c 	.word	0x5802546c
 8001cc4:	58025480 	.word	0x58025480
 8001cc8:	58025494 	.word	0x58025494
 8001ccc:	fffe000f 	.word	0xfffe000f
 8001cd0:	a7fdabf8 	.word	0xa7fdabf8
 8001cd4:	cccccccd 	.word	0xcccccccd
 8001cd8:	40020010 	.word	0x40020010
 8001cdc:	40020028 	.word	0x40020028
 8001ce0:	40020040 	.word	0x40020040
 8001ce4:	40020058 	.word	0x40020058
 8001ce8:	40020070 	.word	0x40020070
 8001cec:	40020088 	.word	0x40020088
 8001cf0:	400200a0 	.word	0x400200a0
 8001cf4:	400200b8 	.word	0x400200b8
 8001cf8:	40020410 	.word	0x40020410
 8001cfc:	40020428 	.word	0x40020428
 8001d00:	40020440 	.word	0x40020440
 8001d04:	40020458 	.word	0x40020458
 8001d08:	40020470 	.word	0x40020470
 8001d0c:	40020488 	.word	0x40020488
 8001d10:	400204a0 	.word	0x400204a0
 8001d14:	400204b8 	.word	0x400204b8
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d032      	beq.n	8001d84 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f002 fa7e 	bl	8004220 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b80      	cmp	r3, #128	; 0x80
 8001d2a:	d102      	bne.n	8001d32 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d46:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d010      	beq.n	8001d72 <HAL_DMA_Init+0x6f6>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d80c      	bhi.n	8001d72 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f002 fafb 	bl	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	e008      	b.n	8001d84 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e226      	b.n	8002206 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_DMA_Start_IT+0x2a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e21f      	b.n	8002206 <HAL_DMA_Start_IT+0x46a>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	f040 820a 	bne.w	80021f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a68      	ldr	r2, [pc, #416]	; (8001f90 <HAL_DMA_Start_IT+0x1f4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d04a      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a66      	ldr	r2, [pc, #408]	; (8001f94 <HAL_DMA_Start_IT+0x1f8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d045      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_DMA_Start_IT+0x1fc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d040      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a63      	ldr	r2, [pc, #396]	; (8001f9c <HAL_DMA_Start_IT+0x200>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d03b      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a62      	ldr	r2, [pc, #392]	; (8001fa0 <HAL_DMA_Start_IT+0x204>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d036      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a60      	ldr	r2, [pc, #384]	; (8001fa4 <HAL_DMA_Start_IT+0x208>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d031      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a5f      	ldr	r2, [pc, #380]	; (8001fa8 <HAL_DMA_Start_IT+0x20c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d02c      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_DMA_Start_IT+0x210>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d027      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a5c      	ldr	r2, [pc, #368]	; (8001fb0 <HAL_DMA_Start_IT+0x214>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d022      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a5a      	ldr	r2, [pc, #360]	; (8001fb4 <HAL_DMA_Start_IT+0x218>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01d      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a59      	ldr	r2, [pc, #356]	; (8001fb8 <HAL_DMA_Start_IT+0x21c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d018      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_DMA_Start_IT+0x220>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <HAL_DMA_Start_IT+0x224>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00e      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_DMA_Start_IT+0x228>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d009      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a53      	ldr	r2, [pc, #332]	; (8001fc8 <HAL_DMA_Start_IT+0x22c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d004      	beq.n	8001e8a <HAL_DMA_Start_IT+0xee>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <HAL_DMA_Start_IT+0x230>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d108      	bne.n	8001e9c <HAL_DMA_Start_IT+0x100>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_DMA_Start_IT+0x110>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f001 fea2 	bl	8003bfc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <HAL_DMA_Start_IT+0x1f4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d04a      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a33      	ldr	r2, [pc, #204]	; (8001f94 <HAL_DMA_Start_IT+0x1f8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d045      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <HAL_DMA_Start_IT+0x1fc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d040      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a30      	ldr	r2, [pc, #192]	; (8001f9c <HAL_DMA_Start_IT+0x200>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d03b      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2e      	ldr	r2, [pc, #184]	; (8001fa0 <HAL_DMA_Start_IT+0x204>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d036      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <HAL_DMA_Start_IT+0x208>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d031      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_DMA_Start_IT+0x20c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02c      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <HAL_DMA_Start_IT+0x210>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d027      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <HAL_DMA_Start_IT+0x214>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d022      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_DMA_Start_IT+0x218>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d01d      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <HAL_DMA_Start_IT+0x21c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d018      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_DMA_Start_IT+0x220>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d013      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_DMA_Start_IT+0x224>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00e      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <HAL_DMA_Start_IT+0x228>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d009      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_DMA_Start_IT+0x22c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d004      	beq.n	8001f58 <HAL_DMA_Start_IT+0x1bc>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_DMA_Start_IT+0x230>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_DMA_Start_IT+0x1c0>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_DMA_Start_IT+0x1c2>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d036      	beq.n	8001fd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 021e 	bic.w	r2, r3, #30
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0216 	orr.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d03e      	beq.n	8001ffc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0208 	orr.w	r2, r2, #8
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e035      	b.n	8001ffc <HAL_DMA_Start_IT+0x260>
 8001f90:	40020010 	.word	0x40020010
 8001f94:	40020028 	.word	0x40020028
 8001f98:	40020040 	.word	0x40020040
 8001f9c:	40020058 	.word	0x40020058
 8001fa0:	40020070 	.word	0x40020070
 8001fa4:	40020088 	.word	0x40020088
 8001fa8:	400200a0 	.word	0x400200a0
 8001fac:	400200b8 	.word	0x400200b8
 8001fb0:	40020410 	.word	0x40020410
 8001fb4:	40020428 	.word	0x40020428
 8001fb8:	40020440 	.word	0x40020440
 8001fbc:	40020458 	.word	0x40020458
 8001fc0:	40020470 	.word	0x40020470
 8001fc4:	40020488 	.word	0x40020488
 8001fc8:	400204a0 	.word	0x400204a0
 8001fcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 020e 	bic.w	r2, r3, #14
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 020a 	orr.w	r2, r2, #10
 8001fe2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0204 	orr.w	r2, r2, #4
 8001ffa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a83      	ldr	r2, [pc, #524]	; (8002210 <HAL_DMA_Start_IT+0x474>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d072      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a82      	ldr	r2, [pc, #520]	; (8002214 <HAL_DMA_Start_IT+0x478>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d06d      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a80      	ldr	r2, [pc, #512]	; (8002218 <HAL_DMA_Start_IT+0x47c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d068      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a7f      	ldr	r2, [pc, #508]	; (800221c <HAL_DMA_Start_IT+0x480>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d063      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a7d      	ldr	r2, [pc, #500]	; (8002220 <HAL_DMA_Start_IT+0x484>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d05e      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7c      	ldr	r2, [pc, #496]	; (8002224 <HAL_DMA_Start_IT+0x488>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d059      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a7a      	ldr	r2, [pc, #488]	; (8002228 <HAL_DMA_Start_IT+0x48c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d054      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a79      	ldr	r2, [pc, #484]	; (800222c <HAL_DMA_Start_IT+0x490>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d04f      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a77      	ldr	r2, [pc, #476]	; (8002230 <HAL_DMA_Start_IT+0x494>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d04a      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a76      	ldr	r2, [pc, #472]	; (8002234 <HAL_DMA_Start_IT+0x498>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d045      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a74      	ldr	r2, [pc, #464]	; (8002238 <HAL_DMA_Start_IT+0x49c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d040      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a73      	ldr	r2, [pc, #460]	; (800223c <HAL_DMA_Start_IT+0x4a0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d03b      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a71      	ldr	r2, [pc, #452]	; (8002240 <HAL_DMA_Start_IT+0x4a4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d036      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a70      	ldr	r2, [pc, #448]	; (8002244 <HAL_DMA_Start_IT+0x4a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d031      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_DMA_Start_IT+0x4ac>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02c      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6d      	ldr	r2, [pc, #436]	; (800224c <HAL_DMA_Start_IT+0x4b0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d027      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6b      	ldr	r2, [pc, #428]	; (8002250 <HAL_DMA_Start_IT+0x4b4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <HAL_DMA_Start_IT+0x4b8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d01d      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a68      	ldr	r2, [pc, #416]	; (8002258 <HAL_DMA_Start_IT+0x4bc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a67      	ldr	r2, [pc, #412]	; (800225c <HAL_DMA_Start_IT+0x4c0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a65      	ldr	r2, [pc, #404]	; (8002260 <HAL_DMA_Start_IT+0x4c4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a64      	ldr	r2, [pc, #400]	; (8002264 <HAL_DMA_Start_IT+0x4c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a62      	ldr	r2, [pc, #392]	; (8002268 <HAL_DMA_Start_IT+0x4cc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_Start_IT+0x350>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a61      	ldr	r2, [pc, #388]	; (800226c <HAL_DMA_Start_IT+0x4d0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_DMA_Start_IT+0x354>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_DMA_Start_IT+0x356>
 80020f0:	2300      	movs	r3, #0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01a      	beq.n	800212c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002112:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800212a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a37      	ldr	r2, [pc, #220]	; (8002210 <HAL_DMA_Start_IT+0x474>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d04a      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a36      	ldr	r2, [pc, #216]	; (8002214 <HAL_DMA_Start_IT+0x478>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d045      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_DMA_Start_IT+0x47c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d040      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a33      	ldr	r2, [pc, #204]	; (800221c <HAL_DMA_Start_IT+0x480>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d03b      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a31      	ldr	r2, [pc, #196]	; (8002220 <HAL_DMA_Start_IT+0x484>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d036      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_DMA_Start_IT+0x488>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d031      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_DMA_Start_IT+0x48c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02c      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_DMA_Start_IT+0x490>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d027      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <HAL_DMA_Start_IT+0x494>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d022      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <HAL_DMA_Start_IT+0x498>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d01d      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_DMA_Start_IT+0x49c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d018      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a27      	ldr	r2, [pc, #156]	; (800223c <HAL_DMA_Start_IT+0x4a0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_DMA_Start_IT+0x4a4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a24      	ldr	r2, [pc, #144]	; (8002244 <HAL_DMA_Start_IT+0x4a8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_DMA_Start_IT+0x4ac>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_DMA_Start_IT+0x430>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a21      	ldr	r2, [pc, #132]	; (800224c <HAL_DMA_Start_IT+0x4b0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d108      	bne.n	80021de <HAL_DMA_Start_IT+0x442>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e012      	b.n	8002204 <HAL_DMA_Start_IT+0x468>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e009      	b.n	8002204 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002204:	7dfb      	ldrb	r3, [r7, #23]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40020010 	.word	0x40020010
 8002214:	40020028 	.word	0x40020028
 8002218:	40020040 	.word	0x40020040
 800221c:	40020058 	.word	0x40020058
 8002220:	40020070 	.word	0x40020070
 8002224:	40020088 	.word	0x40020088
 8002228:	400200a0 	.word	0x400200a0
 800222c:	400200b8 	.word	0x400200b8
 8002230:	40020410 	.word	0x40020410
 8002234:	40020428 	.word	0x40020428
 8002238:	40020440 	.word	0x40020440
 800223c:	40020458 	.word	0x40020458
 8002240:	40020470 	.word	0x40020470
 8002244:	40020488 	.word	0x40020488
 8002248:	400204a0 	.word	0x400204a0
 800224c:	400204b8 	.word	0x400204b8
 8002250:	58025408 	.word	0x58025408
 8002254:	5802541c 	.word	0x5802541c
 8002258:	58025430 	.word	0x58025430
 800225c:	58025444 	.word	0x58025444
 8002260:	58025458 	.word	0x58025458
 8002264:	5802546c 	.word	0x5802546c
 8002268:	58025480 	.word	0x58025480
 800226c:	58025494 	.word	0x58025494

08002270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002278:	f7fe ff1e 	bl	80010b8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e2dc      	b.n	8002842 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d008      	beq.n	80022a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e2cd      	b.n	8002842 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a76      	ldr	r2, [pc, #472]	; (8002484 <HAL_DMA_Abort+0x214>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04a      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a74      	ldr	r2, [pc, #464]	; (8002488 <HAL_DMA_Abort+0x218>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d045      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a73      	ldr	r2, [pc, #460]	; (800248c <HAL_DMA_Abort+0x21c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d040      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a71      	ldr	r2, [pc, #452]	; (8002490 <HAL_DMA_Abort+0x220>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d03b      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a70      	ldr	r2, [pc, #448]	; (8002494 <HAL_DMA_Abort+0x224>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d036      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_DMA_Abort+0x228>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d031      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6d      	ldr	r2, [pc, #436]	; (800249c <HAL_DMA_Abort+0x22c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d02c      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a6b      	ldr	r2, [pc, #428]	; (80024a0 <HAL_DMA_Abort+0x230>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d027      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6a      	ldr	r2, [pc, #424]	; (80024a4 <HAL_DMA_Abort+0x234>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a68      	ldr	r2, [pc, #416]	; (80024a8 <HAL_DMA_Abort+0x238>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01d      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a67      	ldr	r2, [pc, #412]	; (80024ac <HAL_DMA_Abort+0x23c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d018      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a65      	ldr	r2, [pc, #404]	; (80024b0 <HAL_DMA_Abort+0x240>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a64      	ldr	r2, [pc, #400]	; (80024b4 <HAL_DMA_Abort+0x244>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a62      	ldr	r2, [pc, #392]	; (80024b8 <HAL_DMA_Abort+0x248>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a61      	ldr	r2, [pc, #388]	; (80024bc <HAL_DMA_Abort+0x24c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_DMA_Abort+0xd6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a5f      	ldr	r2, [pc, #380]	; (80024c0 <HAL_DMA_Abort+0x250>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_DMA_Abort+0xda>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_DMA_Abort+0xdc>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 021e 	bic.w	r2, r2, #30
 800235e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e00a      	b.n	800238e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 020e 	bic.w	r2, r2, #14
 8002386:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a3c      	ldr	r2, [pc, #240]	; (8002484 <HAL_DMA_Abort+0x214>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d072      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_DMA_Abort+0x218>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d06d      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a39      	ldr	r2, [pc, #228]	; (800248c <HAL_DMA_Abort+0x21c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d068      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a37      	ldr	r2, [pc, #220]	; (8002490 <HAL_DMA_Abort+0x220>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d063      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a36      	ldr	r2, [pc, #216]	; (8002494 <HAL_DMA_Abort+0x224>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d05e      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a34      	ldr	r2, [pc, #208]	; (8002498 <HAL_DMA_Abort+0x228>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d059      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a33      	ldr	r2, [pc, #204]	; (800249c <HAL_DMA_Abort+0x22c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d054      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <HAL_DMA_Abort+0x230>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d04f      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a30      	ldr	r2, [pc, #192]	; (80024a4 <HAL_DMA_Abort+0x234>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d04a      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2e      	ldr	r2, [pc, #184]	; (80024a8 <HAL_DMA_Abort+0x238>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d045      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a2d      	ldr	r2, [pc, #180]	; (80024ac <HAL_DMA_Abort+0x23c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d040      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <HAL_DMA_Abort+0x240>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d03b      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2a      	ldr	r2, [pc, #168]	; (80024b4 <HAL_DMA_Abort+0x244>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d036      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <HAL_DMA_Abort+0x248>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d031      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_DMA_Abort+0x24c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d02c      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <HAL_DMA_Abort+0x250>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d027      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <HAL_DMA_Abort+0x254>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d022      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <HAL_DMA_Abort+0x258>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01d      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a21      	ldr	r2, [pc, #132]	; (80024cc <HAL_DMA_Abort+0x25c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d018      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_DMA_Abort+0x260>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <HAL_DMA_Abort+0x264>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00e      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_DMA_Abort+0x268>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d009      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <HAL_DMA_Abort+0x26c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_DMA_Abort+0x20e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_DMA_Abort+0x270>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d132      	bne.n	80024e4 <HAL_DMA_Abort+0x274>
 800247e:	2301      	movs	r3, #1
 8002480:	e031      	b.n	80024e6 <HAL_DMA_Abort+0x276>
 8002482:	bf00      	nop
 8002484:	40020010 	.word	0x40020010
 8002488:	40020028 	.word	0x40020028
 800248c:	40020040 	.word	0x40020040
 8002490:	40020058 	.word	0x40020058
 8002494:	40020070 	.word	0x40020070
 8002498:	40020088 	.word	0x40020088
 800249c:	400200a0 	.word	0x400200a0
 80024a0:	400200b8 	.word	0x400200b8
 80024a4:	40020410 	.word	0x40020410
 80024a8:	40020428 	.word	0x40020428
 80024ac:	40020440 	.word	0x40020440
 80024b0:	40020458 	.word	0x40020458
 80024b4:	40020470 	.word	0x40020470
 80024b8:	40020488 	.word	0x40020488
 80024bc:	400204a0 	.word	0x400204a0
 80024c0:	400204b8 	.word	0x400204b8
 80024c4:	58025408 	.word	0x58025408
 80024c8:	5802541c 	.word	0x5802541c
 80024cc:	58025430 	.word	0x58025430
 80024d0:	58025444 	.word	0x58025444
 80024d4:	58025458 	.word	0x58025458
 80024d8:	5802546c 	.word	0x5802546c
 80024dc:	58025480 	.word	0x58025480
 80024e0:	58025494 	.word	0x58025494
 80024e4:	2300      	movs	r3, #0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d007      	beq.n	80024fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6d      	ldr	r2, [pc, #436]	; (80026b4 <HAL_DMA_Abort+0x444>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d04a      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6b      	ldr	r2, [pc, #428]	; (80026b8 <HAL_DMA_Abort+0x448>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d045      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6a      	ldr	r2, [pc, #424]	; (80026bc <HAL_DMA_Abort+0x44c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d040      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a68      	ldr	r2, [pc, #416]	; (80026c0 <HAL_DMA_Abort+0x450>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d03b      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a67      	ldr	r2, [pc, #412]	; (80026c4 <HAL_DMA_Abort+0x454>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d036      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a65      	ldr	r2, [pc, #404]	; (80026c8 <HAL_DMA_Abort+0x458>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d031      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a64      	ldr	r2, [pc, #400]	; (80026cc <HAL_DMA_Abort+0x45c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d02c      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a62      	ldr	r2, [pc, #392]	; (80026d0 <HAL_DMA_Abort+0x460>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d027      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a61      	ldr	r2, [pc, #388]	; (80026d4 <HAL_DMA_Abort+0x464>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d022      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a5f      	ldr	r2, [pc, #380]	; (80026d8 <HAL_DMA_Abort+0x468>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01d      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a5e      	ldr	r2, [pc, #376]	; (80026dc <HAL_DMA_Abort+0x46c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d018      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5c      	ldr	r2, [pc, #368]	; (80026e0 <HAL_DMA_Abort+0x470>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a5b      	ldr	r2, [pc, #364]	; (80026e4 <HAL_DMA_Abort+0x474>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00e      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a59      	ldr	r2, [pc, #356]	; (80026e8 <HAL_DMA_Abort+0x478>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_DMA_Abort+0x47c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d004      	beq.n	800259a <HAL_DMA_Abort+0x32a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_DMA_Abort+0x480>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d108      	bne.n	80025ac <HAL_DMA_Abort+0x33c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e007      	b.n	80025bc <HAL_DMA_Abort+0x34c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025bc:	e013      	b.n	80025e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025be:	f7fe fd7b 	bl	80010b8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d90c      	bls.n	80025e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2203      	movs	r2, #3
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e12d      	b.n	8002842 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e5      	bne.n	80025be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2f      	ldr	r2, [pc, #188]	; (80026b4 <HAL_DMA_Abort+0x444>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d04a      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2d      	ldr	r2, [pc, #180]	; (80026b8 <HAL_DMA_Abort+0x448>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d045      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a2c      	ldr	r2, [pc, #176]	; (80026bc <HAL_DMA_Abort+0x44c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d040      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <HAL_DMA_Abort+0x450>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d03b      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <HAL_DMA_Abort+0x454>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d036      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_DMA_Abort+0x458>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d031      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a26      	ldr	r2, [pc, #152]	; (80026cc <HAL_DMA_Abort+0x45c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d02c      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <HAL_DMA_Abort+0x460>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d027      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a23      	ldr	r2, [pc, #140]	; (80026d4 <HAL_DMA_Abort+0x464>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <HAL_DMA_Abort+0x468>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01d      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a20      	ldr	r2, [pc, #128]	; (80026dc <HAL_DMA_Abort+0x46c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d018      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <HAL_DMA_Abort+0x470>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_DMA_Abort+0x474>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <HAL_DMA_Abort+0x478>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_DMA_Abort+0x47c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_DMA_Abort+0x422>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <HAL_DMA_Abort+0x480>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_DMA_Abort+0x426>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_DMA_Abort+0x428>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02b      	beq.n	80026f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	223f      	movs	r2, #63	; 0x3f
 80026ac:	409a      	lsls	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	e02a      	b.n	800270a <HAL_DMA_Abort+0x49a>
 80026b4:	40020010 	.word	0x40020010
 80026b8:	40020028 	.word	0x40020028
 80026bc:	40020040 	.word	0x40020040
 80026c0:	40020058 	.word	0x40020058
 80026c4:	40020070 	.word	0x40020070
 80026c8:	40020088 	.word	0x40020088
 80026cc:	400200a0 	.word	0x400200a0
 80026d0:	400200b8 	.word	0x400200b8
 80026d4:	40020410 	.word	0x40020410
 80026d8:	40020428 	.word	0x40020428
 80026dc:	40020440 	.word	0x40020440
 80026e0:	40020458 	.word	0x40020458
 80026e4:	40020470 	.word	0x40020470
 80026e8:	40020488 	.word	0x40020488
 80026ec:	400204a0 	.word	0x400204a0
 80026f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2201      	movs	r2, #1
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_DMA_Abort+0x5dc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d072      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a4d      	ldr	r2, [pc, #308]	; (8002850 <HAL_DMA_Abort+0x5e0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d06d      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a4c      	ldr	r2, [pc, #304]	; (8002854 <HAL_DMA_Abort+0x5e4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d068      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4a      	ldr	r2, [pc, #296]	; (8002858 <HAL_DMA_Abort+0x5e8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d063      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a49      	ldr	r2, [pc, #292]	; (800285c <HAL_DMA_Abort+0x5ec>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d05e      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a47      	ldr	r2, [pc, #284]	; (8002860 <HAL_DMA_Abort+0x5f0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d059      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a46      	ldr	r2, [pc, #280]	; (8002864 <HAL_DMA_Abort+0x5f4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d054      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a44      	ldr	r2, [pc, #272]	; (8002868 <HAL_DMA_Abort+0x5f8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d04f      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a43      	ldr	r2, [pc, #268]	; (800286c <HAL_DMA_Abort+0x5fc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04a      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a41      	ldr	r2, [pc, #260]	; (8002870 <HAL_DMA_Abort+0x600>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d045      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a40      	ldr	r2, [pc, #256]	; (8002874 <HAL_DMA_Abort+0x604>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d040      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3e      	ldr	r2, [pc, #248]	; (8002878 <HAL_DMA_Abort+0x608>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d03b      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a3d      	ldr	r2, [pc, #244]	; (800287c <HAL_DMA_Abort+0x60c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d036      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3b      	ldr	r2, [pc, #236]	; (8002880 <HAL_DMA_Abort+0x610>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d031      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3a      	ldr	r2, [pc, #232]	; (8002884 <HAL_DMA_Abort+0x614>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d02c      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_DMA_Abort+0x618>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d027      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a37      	ldr	r2, [pc, #220]	; (800288c <HAL_DMA_Abort+0x61c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a35      	ldr	r2, [pc, #212]	; (8002890 <HAL_DMA_Abort+0x620>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01d      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_DMA_Abort+0x624>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d018      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a32      	ldr	r2, [pc, #200]	; (8002898 <HAL_DMA_Abort+0x628>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a31      	ldr	r2, [pc, #196]	; (800289c <HAL_DMA_Abort+0x62c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2f      	ldr	r2, [pc, #188]	; (80028a0 <HAL_DMA_Abort+0x630>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2e      	ldr	r2, [pc, #184]	; (80028a4 <HAL_DMA_Abort+0x634>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_DMA_Abort+0x58a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <HAL_DMA_Abort+0x638>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_Abort+0x58e>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_DMA_Abort+0x590>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800280c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002824:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800282e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40020010 	.word	0x40020010
 8002850:	40020028 	.word	0x40020028
 8002854:	40020040 	.word	0x40020040
 8002858:	40020058 	.word	0x40020058
 800285c:	40020070 	.word	0x40020070
 8002860:	40020088 	.word	0x40020088
 8002864:	400200a0 	.word	0x400200a0
 8002868:	400200b8 	.word	0x400200b8
 800286c:	40020410 	.word	0x40020410
 8002870:	40020428 	.word	0x40020428
 8002874:	40020440 	.word	0x40020440
 8002878:	40020458 	.word	0x40020458
 800287c:	40020470 	.word	0x40020470
 8002880:	40020488 	.word	0x40020488
 8002884:	400204a0 	.word	0x400204a0
 8002888:	400204b8 	.word	0x400204b8
 800288c:	58025408 	.word	0x58025408
 8002890:	5802541c 	.word	0x5802541c
 8002894:	58025430 	.word	0x58025430
 8002898:	58025444 	.word	0x58025444
 800289c:	58025458 	.word	0x58025458
 80028a0:	5802546c 	.word	0x5802546c
 80028a4:	58025480 	.word	0x58025480
 80028a8:	58025494 	.word	0x58025494

080028ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e237      	b.n	8002d2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d004      	beq.n	80028d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e22c      	b.n	8002d2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a5c      	ldr	r2, [pc, #368]	; (8002a4c <HAL_DMA_Abort_IT+0x1a0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04a      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_DMA_Abort_IT+0x1a4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d045      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a59      	ldr	r2, [pc, #356]	; (8002a54 <HAL_DMA_Abort_IT+0x1a8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d040      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_DMA_Abort_IT+0x1ac>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d03b      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a56      	ldr	r2, [pc, #344]	; (8002a5c <HAL_DMA_Abort_IT+0x1b0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d036      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a55      	ldr	r2, [pc, #340]	; (8002a60 <HAL_DMA_Abort_IT+0x1b4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d031      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a53      	ldr	r2, [pc, #332]	; (8002a64 <HAL_DMA_Abort_IT+0x1b8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02c      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a52      	ldr	r2, [pc, #328]	; (8002a68 <HAL_DMA_Abort_IT+0x1bc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d027      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_DMA_Abort_IT+0x1c0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_DMA_Abort_IT+0x1c4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d01d      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <HAL_DMA_Abort_IT+0x1c8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a4c      	ldr	r2, [pc, #304]	; (8002a78 <HAL_DMA_Abort_IT+0x1cc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a4a      	ldr	r2, [pc, #296]	; (8002a7c <HAL_DMA_Abort_IT+0x1d0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a49      	ldr	r2, [pc, #292]	; (8002a80 <HAL_DMA_Abort_IT+0x1d4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a47      	ldr	r2, [pc, #284]	; (8002a84 <HAL_DMA_Abort_IT+0x1d8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_DMA_Abort_IT+0xc8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a46      	ldr	r2, [pc, #280]	; (8002a88 <HAL_DMA_Abort_IT+0x1dc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Abort_IT+0xcc>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_DMA_Abort_IT+0xce>
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8086 	beq.w	8002a8c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2204      	movs	r2, #4
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <HAL_DMA_Abort_IT+0x1a0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d04a      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <HAL_DMA_Abort_IT+0x1a4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d045      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <HAL_DMA_Abort_IT+0x1a8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d040      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2b      	ldr	r2, [pc, #172]	; (8002a58 <HAL_DMA_Abort_IT+0x1ac>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d03b      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_DMA_Abort_IT+0x1b0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d036      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <HAL_DMA_Abort_IT+0x1b4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d031      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <HAL_DMA_Abort_IT+0x1b8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d02c      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <HAL_DMA_Abort_IT+0x1bc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d027      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_DMA_Abort_IT+0x1c0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d022      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <HAL_DMA_Abort_IT+0x1c4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d01d      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <HAL_DMA_Abort_IT+0x1c8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d018      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <HAL_DMA_Abort_IT+0x1cc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_DMA_Abort_IT+0x1d0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_DMA_Abort_IT+0x1d4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <HAL_DMA_Abort_IT+0x1d8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x17c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_DMA_Abort_IT+0x1dc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d108      	bne.n	8002a3a <HAL_DMA_Abort_IT+0x18e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e178      	b.n	8002d2c <HAL_DMA_Abort_IT+0x480>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e16f      	b.n	8002d2c <HAL_DMA_Abort_IT+0x480>
 8002a4c:	40020010 	.word	0x40020010
 8002a50:	40020028 	.word	0x40020028
 8002a54:	40020040 	.word	0x40020040
 8002a58:	40020058 	.word	0x40020058
 8002a5c:	40020070 	.word	0x40020070
 8002a60:	40020088 	.word	0x40020088
 8002a64:	400200a0 	.word	0x400200a0
 8002a68:	400200b8 	.word	0x400200b8
 8002a6c:	40020410 	.word	0x40020410
 8002a70:	40020428 	.word	0x40020428
 8002a74:	40020440 	.word	0x40020440
 8002a78:	40020458 	.word	0x40020458
 8002a7c:	40020470 	.word	0x40020470
 8002a80:	40020488 	.word	0x40020488
 8002a84:	400204a0 	.word	0x400204a0
 8002a88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 020e 	bic.w	r2, r2, #14
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a6c      	ldr	r2, [pc, #432]	; (8002c54 <HAL_DMA_Abort_IT+0x3a8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d04a      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6b      	ldr	r2, [pc, #428]	; (8002c58 <HAL_DMA_Abort_IT+0x3ac>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d045      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a69      	ldr	r2, [pc, #420]	; (8002c5c <HAL_DMA_Abort_IT+0x3b0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d040      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a68      	ldr	r2, [pc, #416]	; (8002c60 <HAL_DMA_Abort_IT+0x3b4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d03b      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a66      	ldr	r2, [pc, #408]	; (8002c64 <HAL_DMA_Abort_IT+0x3b8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d036      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_DMA_Abort_IT+0x3bc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d031      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <HAL_DMA_Abort_IT+0x3c0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02c      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a62      	ldr	r2, [pc, #392]	; (8002c70 <HAL_DMA_Abort_IT+0x3c4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d027      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a60      	ldr	r2, [pc, #384]	; (8002c74 <HAL_DMA_Abort_IT+0x3c8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d022      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a5f      	ldr	r2, [pc, #380]	; (8002c78 <HAL_DMA_Abort_IT+0x3cc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01d      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a5d      	ldr	r2, [pc, #372]	; (8002c7c <HAL_DMA_Abort_IT+0x3d0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d018      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5c      	ldr	r2, [pc, #368]	; (8002c80 <HAL_DMA_Abort_IT+0x3d4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d013      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5a      	ldr	r2, [pc, #360]	; (8002c84 <HAL_DMA_Abort_IT+0x3d8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00e      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a59      	ldr	r2, [pc, #356]	; (8002c88 <HAL_DMA_Abort_IT+0x3dc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a57      	ldr	r2, [pc, #348]	; (8002c8c <HAL_DMA_Abort_IT+0x3e0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x290>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a56      	ldr	r2, [pc, #344]	; (8002c90 <HAL_DMA_Abort_IT+0x3e4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d108      	bne.n	8002b4e <HAL_DMA_Abort_IT+0x2a2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e007      	b.n	8002b5e <HAL_DMA_Abort_IT+0x2b2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3c      	ldr	r2, [pc, #240]	; (8002c54 <HAL_DMA_Abort_IT+0x3a8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d072      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3a      	ldr	r2, [pc, #232]	; (8002c58 <HAL_DMA_Abort_IT+0x3ac>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d06d      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a39      	ldr	r2, [pc, #228]	; (8002c5c <HAL_DMA_Abort_IT+0x3b0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d068      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a37      	ldr	r2, [pc, #220]	; (8002c60 <HAL_DMA_Abort_IT+0x3b4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d063      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a36      	ldr	r2, [pc, #216]	; (8002c64 <HAL_DMA_Abort_IT+0x3b8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d05e      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_DMA_Abort_IT+0x3bc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d059      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a33      	ldr	r2, [pc, #204]	; (8002c6c <HAL_DMA_Abort_IT+0x3c0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d054      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a31      	ldr	r2, [pc, #196]	; (8002c70 <HAL_DMA_Abort_IT+0x3c4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d04f      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a30      	ldr	r2, [pc, #192]	; (8002c74 <HAL_DMA_Abort_IT+0x3c8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d04a      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2e      	ldr	r2, [pc, #184]	; (8002c78 <HAL_DMA_Abort_IT+0x3cc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d045      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <HAL_DMA_Abort_IT+0x3d0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d040      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <HAL_DMA_Abort_IT+0x3d4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d03b      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <HAL_DMA_Abort_IT+0x3d8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d036      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <HAL_DMA_Abort_IT+0x3dc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d031      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_DMA_Abort_IT+0x3e0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d02c      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <HAL_DMA_Abort_IT+0x3e4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d027      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <HAL_DMA_Abort_IT+0x3e8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <HAL_DMA_Abort_IT+0x3ec>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01d      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <HAL_DMA_Abort_IT+0x3f0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d018      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_DMA_Abort_IT+0x3f4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <HAL_DMA_Abort_IT+0x3f8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <HAL_DMA_Abort_IT+0x3fc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <HAL_DMA_Abort_IT+0x400>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x3a2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_DMA_Abort_IT+0x404>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d132      	bne.n	8002cb4 <HAL_DMA_Abort_IT+0x408>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e031      	b.n	8002cb6 <HAL_DMA_Abort_IT+0x40a>
 8002c52:	bf00      	nop
 8002c54:	40020010 	.word	0x40020010
 8002c58:	40020028 	.word	0x40020028
 8002c5c:	40020040 	.word	0x40020040
 8002c60:	40020058 	.word	0x40020058
 8002c64:	40020070 	.word	0x40020070
 8002c68:	40020088 	.word	0x40020088
 8002c6c:	400200a0 	.word	0x400200a0
 8002c70:	400200b8 	.word	0x400200b8
 8002c74:	40020410 	.word	0x40020410
 8002c78:	40020428 	.word	0x40020428
 8002c7c:	40020440 	.word	0x40020440
 8002c80:	40020458 	.word	0x40020458
 8002c84:	40020470 	.word	0x40020470
 8002c88:	40020488 	.word	0x40020488
 8002c8c:	400204a0 	.word	0x400204a0
 8002c90:	400204b8 	.word	0x400204b8
 8002c94:	58025408 	.word	0x58025408
 8002c98:	5802541c 	.word	0x5802541c
 8002c9c:	58025430 	.word	0x58025430
 8002ca0:	58025444 	.word	0x58025444
 8002ca4:	58025458 	.word	0x58025458
 8002ca8:	5802546c 	.word	0x5802546c
 8002cac:	58025480 	.word	0x58025480
 8002cb0:	58025494 	.word	0x58025494
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d028      	beq.n	8002d0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2201      	movs	r2, #1
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ce8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00c      	beq.n	8002d0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop

08002d38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d44:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_DMA_IRQHandler+0x1ac>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a67      	ldr	r2, [pc, #412]	; (8002ee8 <HAL_DMA_IRQHandler+0x1b0>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0a9b      	lsrs	r3, r3, #10
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5f      	ldr	r2, [pc, #380]	; (8002eec <HAL_DMA_IRQHandler+0x1b4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d04a      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5d      	ldr	r2, [pc, #372]	; (8002ef0 <HAL_DMA_IRQHandler+0x1b8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d045      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_DMA_IRQHandler+0x1bc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d040      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5a      	ldr	r2, [pc, #360]	; (8002ef8 <HAL_DMA_IRQHandler+0x1c0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d03b      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a59      	ldr	r2, [pc, #356]	; (8002efc <HAL_DMA_IRQHandler+0x1c4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d036      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a57      	ldr	r2, [pc, #348]	; (8002f00 <HAL_DMA_IRQHandler+0x1c8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d031      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_DMA_IRQHandler+0x1cc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d02c      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a54      	ldr	r2, [pc, #336]	; (8002f08 <HAL_DMA_IRQHandler+0x1d0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d027      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a53      	ldr	r2, [pc, #332]	; (8002f0c <HAL_DMA_IRQHandler+0x1d4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a51      	ldr	r2, [pc, #324]	; (8002f10 <HAL_DMA_IRQHandler+0x1d8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a50      	ldr	r2, [pc, #320]	; (8002f14 <HAL_DMA_IRQHandler+0x1dc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <HAL_DMA_IRQHandler+0x1e0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a4d      	ldr	r2, [pc, #308]	; (8002f1c <HAL_DMA_IRQHandler+0x1e4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a4b      	ldr	r2, [pc, #300]	; (8002f20 <HAL_DMA_IRQHandler+0x1e8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a4a      	ldr	r2, [pc, #296]	; (8002f24 <HAL_DMA_IRQHandler+0x1ec>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xd2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a48      	ldr	r2, [pc, #288]	; (8002f28 <HAL_DMA_IRQHandler+0x1f0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_DMA_IRQHandler+0xd6>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_DMA_IRQHandler+0xd8>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 842b 	beq.w	800366c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2208      	movs	r2, #8
 8002e20:	409a      	lsls	r2, r3
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80a2 	beq.w	8002f70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	; (8002eec <HAL_DMA_IRQHandler+0x1b4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d04a      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ef0 <HAL_DMA_IRQHandler+0x1b8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d045      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <HAL_DMA_IRQHandler+0x1bc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d040      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <HAL_DMA_IRQHandler+0x1c0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d03b      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a28      	ldr	r2, [pc, #160]	; (8002efc <HAL_DMA_IRQHandler+0x1c4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d036      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a27      	ldr	r2, [pc, #156]	; (8002f00 <HAL_DMA_IRQHandler+0x1c8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d031      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <HAL_DMA_IRQHandler+0x1cc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d02c      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a24      	ldr	r2, [pc, #144]	; (8002f08 <HAL_DMA_IRQHandler+0x1d0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d027      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <HAL_DMA_IRQHandler+0x1d4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d022      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <HAL_DMA_IRQHandler+0x1d8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01d      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <HAL_DMA_IRQHandler+0x1dc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d018      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_DMA_IRQHandler+0x1e0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_DMA_IRQHandler+0x1e4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_DMA_IRQHandler+0x1e8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_DMA_IRQHandler+0x1ec>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x194>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <HAL_DMA_IRQHandler+0x1f0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d12f      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x1f4>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e02e      	b.n	8002f40 <HAL_DMA_IRQHandler+0x208>
 8002ee2:	bf00      	nop
 8002ee4:	24000000 	.word	0x24000000
 8002ee8:	1b4e81b5 	.word	0x1b4e81b5
 8002eec:	40020010 	.word	0x40020010
 8002ef0:	40020028 	.word	0x40020028
 8002ef4:	40020040 	.word	0x40020040
 8002ef8:	40020058 	.word	0x40020058
 8002efc:	40020070 	.word	0x40020070
 8002f00:	40020088 	.word	0x40020088
 8002f04:	400200a0 	.word	0x400200a0
 8002f08:	400200b8 	.word	0x400200b8
 8002f0c:	40020410 	.word	0x40020410
 8002f10:	40020428 	.word	0x40020428
 8002f14:	40020440 	.word	0x40020440
 8002f18:	40020458 	.word	0x40020458
 8002f1c:	40020470 	.word	0x40020470
 8002f20:	40020488 	.word	0x40020488
 8002f24:	400204a0 	.word	0x400204a0
 8002f28:	400204b8 	.word	0x400204b8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0204 	bic.w	r2, r2, #4
 8002f52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d06e      	beq.n	8003064 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a69      	ldr	r2, [pc, #420]	; (8003130 <HAL_DMA_IRQHandler+0x3f8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d04a      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a67      	ldr	r2, [pc, #412]	; (8003134 <HAL_DMA_IRQHandler+0x3fc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d045      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a66      	ldr	r2, [pc, #408]	; (8003138 <HAL_DMA_IRQHandler+0x400>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d040      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a64      	ldr	r2, [pc, #400]	; (800313c <HAL_DMA_IRQHandler+0x404>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d03b      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a63      	ldr	r2, [pc, #396]	; (8003140 <HAL_DMA_IRQHandler+0x408>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d036      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a61      	ldr	r2, [pc, #388]	; (8003144 <HAL_DMA_IRQHandler+0x40c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d031      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a60      	ldr	r2, [pc, #384]	; (8003148 <HAL_DMA_IRQHandler+0x410>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d02c      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5e      	ldr	r2, [pc, #376]	; (800314c <HAL_DMA_IRQHandler+0x414>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d027      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a5d      	ldr	r2, [pc, #372]	; (8003150 <HAL_DMA_IRQHandler+0x418>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5b      	ldr	r2, [pc, #364]	; (8003154 <HAL_DMA_IRQHandler+0x41c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01d      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5a      	ldr	r2, [pc, #360]	; (8003158 <HAL_DMA_IRQHandler+0x420>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d018      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	; (800315c <HAL_DMA_IRQHandler+0x424>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a57      	ldr	r2, [pc, #348]	; (8003160 <HAL_DMA_IRQHandler+0x428>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00e      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a55      	ldr	r2, [pc, #340]	; (8003164 <HAL_DMA_IRQHandler+0x42c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a54      	ldr	r2, [pc, #336]	; (8003168 <HAL_DMA_IRQHandler+0x430>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2ee>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_DMA_IRQHandler+0x434>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10a      	bne.n	800303c <HAL_DMA_IRQHandler+0x304>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e003      	b.n	8003044 <HAL_DMA_IRQHandler+0x30c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f043 0202 	orr.w	r2, r3, #2
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2204      	movs	r2, #4
 800306e:	409a      	lsls	r2, r3
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 808f 	beq.w	8003198 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <HAL_DMA_IRQHandler+0x3f8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d04a      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <HAL_DMA_IRQHandler+0x3fc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d045      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_DMA_IRQHandler+0x400>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d040      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a27      	ldr	r2, [pc, #156]	; (800313c <HAL_DMA_IRQHandler+0x404>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d03b      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_DMA_IRQHandler+0x408>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d036      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <HAL_DMA_IRQHandler+0x40c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a23      	ldr	r2, [pc, #140]	; (8003148 <HAL_DMA_IRQHandler+0x410>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d02c      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a21      	ldr	r2, [pc, #132]	; (800314c <HAL_DMA_IRQHandler+0x414>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d027      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a20      	ldr	r2, [pc, #128]	; (8003150 <HAL_DMA_IRQHandler+0x418>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_DMA_IRQHandler+0x41c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_DMA_IRQHandler+0x420>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d018      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_DMA_IRQHandler+0x424>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_DMA_IRQHandler+0x428>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_DMA_IRQHandler+0x42c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_DMA_IRQHandler+0x430>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_DMA_IRQHandler+0x3e2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <HAL_DMA_IRQHandler+0x434>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d12a      	bne.n	8003170 <HAL_DMA_IRQHandler+0x438>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e023      	b.n	8003178 <HAL_DMA_IRQHandler+0x440>
 8003130:	40020010 	.word	0x40020010
 8003134:	40020028 	.word	0x40020028
 8003138:	40020040 	.word	0x40020040
 800313c:	40020058 	.word	0x40020058
 8003140:	40020070 	.word	0x40020070
 8003144:	40020088 	.word	0x40020088
 8003148:	400200a0 	.word	0x400200a0
 800314c:	400200b8 	.word	0x400200b8
 8003150:	40020410 	.word	0x40020410
 8003154:	40020428 	.word	0x40020428
 8003158:	40020440 	.word	0x40020440
 800315c:	40020458 	.word	0x40020458
 8003160:	40020470 	.word	0x40020470
 8003164:	40020488 	.word	0x40020488
 8003168:	400204a0 	.word	0x400204a0
 800316c:	400204b8 	.word	0x400204b8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2300      	movs	r3, #0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2204      	movs	r2, #4
 8003186:	409a      	lsls	r2, r3
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2210      	movs	r2, #16
 80031a2:	409a      	lsls	r2, r3
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a6 	beq.w	80032fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a85      	ldr	r2, [pc, #532]	; (80033c8 <HAL_DMA_IRQHandler+0x690>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a83      	ldr	r2, [pc, #524]	; (80033cc <HAL_DMA_IRQHandler+0x694>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a82      	ldr	r2, [pc, #520]	; (80033d0 <HAL_DMA_IRQHandler+0x698>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_DMA_IRQHandler+0x69c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a7f      	ldr	r2, [pc, #508]	; (80033d8 <HAL_DMA_IRQHandler+0x6a0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7d      	ldr	r2, [pc, #500]	; (80033dc <HAL_DMA_IRQHandler+0x6a4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7c      	ldr	r2, [pc, #496]	; (80033e0 <HAL_DMA_IRQHandler+0x6a8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7a      	ldr	r2, [pc, #488]	; (80033e4 <HAL_DMA_IRQHandler+0x6ac>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a79      	ldr	r2, [pc, #484]	; (80033e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a77      	ldr	r2, [pc, #476]	; (80033ec <HAL_DMA_IRQHandler+0x6b4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a76      	ldr	r2, [pc, #472]	; (80033f0 <HAL_DMA_IRQHandler+0x6b8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a74      	ldr	r2, [pc, #464]	; (80033f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a73      	ldr	r2, [pc, #460]	; (80033f8 <HAL_DMA_IRQHandler+0x6c0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a71      	ldr	r2, [pc, #452]	; (80033fc <HAL_DMA_IRQHandler+0x6c4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a70      	ldr	r2, [pc, #448]	; (8003400 <HAL_DMA_IRQHandler+0x6c8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_IRQHandler+0x516>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_DMA_IRQHandler+0x6cc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10a      	bne.n	8003264 <HAL_DMA_IRQHandler+0x52c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e009      	b.n	8003278 <HAL_DMA_IRQHandler+0x540>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf14      	ite	ne
 8003272:	2301      	movne	r3, #1
 8003274:	2300      	moveq	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d03e      	beq.n	80032fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2210      	movs	r2, #16
 8003286:	409a      	lsls	r2, r3
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d018      	beq.n	80032cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d024      	beq.n	80032fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
 80032b8:	e01f      	b.n	80032fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01b      	beq.n	80032fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
 80032ca:	e016      	b.n	80032fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0208 	bic.w	r2, r2, #8
 80032e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2220      	movs	r2, #32
 8003304:	409a      	lsls	r2, r3
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8110 	beq.w	8003530 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <HAL_DMA_IRQHandler+0x690>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d04a      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <HAL_DMA_IRQHandler+0x694>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d045      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <HAL_DMA_IRQHandler+0x698>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d040      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_DMA_IRQHandler+0x69c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d03b      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <HAL_DMA_IRQHandler+0x6a0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d036      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a25      	ldr	r2, [pc, #148]	; (80033dc <HAL_DMA_IRQHandler+0x6a4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d031      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <HAL_DMA_IRQHandler+0x6a8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d02c      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_DMA_IRQHandler+0x6ac>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d027      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d022      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_DMA_IRQHandler+0x6b4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d01d      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_DMA_IRQHandler+0x6b8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d018      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d013      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_DMA_IRQHandler+0x6c0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00e      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_DMA_IRQHandler+0x6c4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d009      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <HAL_DMA_IRQHandler+0x6c8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x678>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a16      	ldr	r2, [pc, #88]	; (8003404 <HAL_DMA_IRQHandler+0x6cc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d12b      	bne.n	8003408 <HAL_DMA_IRQHandler+0x6d0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e02a      	b.n	800341c <HAL_DMA_IRQHandler+0x6e4>
 80033c6:	bf00      	nop
 80033c8:	40020010 	.word	0x40020010
 80033cc:	40020028 	.word	0x40020028
 80033d0:	40020040 	.word	0x40020040
 80033d4:	40020058 	.word	0x40020058
 80033d8:	40020070 	.word	0x40020070
 80033dc:	40020088 	.word	0x40020088
 80033e0:	400200a0 	.word	0x400200a0
 80033e4:	400200b8 	.word	0x400200b8
 80033e8:	40020410 	.word	0x40020410
 80033ec:	40020428 	.word	0x40020428
 80033f0:	40020440 	.word	0x40020440
 80033f4:	40020458 	.word	0x40020458
 80033f8:	40020470 	.word	0x40020470
 80033fc:	40020488 	.word	0x40020488
 8003400:	400204a0 	.word	0x400204a0
 8003404:	400204b8 	.word	0x400204b8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8087 	beq.w	8003530 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2220      	movs	r2, #32
 800342c:	409a      	lsls	r2, r3
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b04      	cmp	r3, #4
 800343c:	d139      	bne.n	80034b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0216 	bic.w	r2, r2, #22
 800344c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800345c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <HAL_DMA_IRQHandler+0x736>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	223f      	movs	r2, #63	; 0x3f
 8003488:	409a      	lsls	r2, r3
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8382 	beq.w	8003bac <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
          }
          return;
 80034b0:	e37c      	b.n	8003bac <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d018      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d108      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02c      	beq.n	8003530 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
 80034de:	e027      	b.n	8003530 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d023      	beq.n	8003530 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
 80034f0:	e01e      	b.n	8003530 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10f      	bne.n	8003520 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0210 	bic.w	r2, r2, #16
 800350e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 833e 	beq.w	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8088 	beq.w	8003658 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2204      	movs	r2, #4
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a89      	ldr	r2, [pc, #548]	; (800377c <HAL_DMA_IRQHandler+0xa44>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d04a      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a88      	ldr	r2, [pc, #544]	; (8003780 <HAL_DMA_IRQHandler+0xa48>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d045      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a86      	ldr	r2, [pc, #536]	; (8003784 <HAL_DMA_IRQHandler+0xa4c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d040      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a85      	ldr	r2, [pc, #532]	; (8003788 <HAL_DMA_IRQHandler+0xa50>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d03b      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a83      	ldr	r2, [pc, #524]	; (800378c <HAL_DMA_IRQHandler+0xa54>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d036      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a82      	ldr	r2, [pc, #520]	; (8003790 <HAL_DMA_IRQHandler+0xa58>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d031      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a80      	ldr	r2, [pc, #512]	; (8003794 <HAL_DMA_IRQHandler+0xa5c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02c      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7f      	ldr	r2, [pc, #508]	; (8003798 <HAL_DMA_IRQHandler+0xa60>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d027      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a7d      	ldr	r2, [pc, #500]	; (800379c <HAL_DMA_IRQHandler+0xa64>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d022      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7c      	ldr	r2, [pc, #496]	; (80037a0 <HAL_DMA_IRQHandler+0xa68>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d01d      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a7a      	ldr	r2, [pc, #488]	; (80037a4 <HAL_DMA_IRQHandler+0xa6c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d018      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a79      	ldr	r2, [pc, #484]	; (80037a8 <HAL_DMA_IRQHandler+0xa70>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a77      	ldr	r2, [pc, #476]	; (80037ac <HAL_DMA_IRQHandler+0xa74>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00e      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a76      	ldr	r2, [pc, #472]	; (80037b0 <HAL_DMA_IRQHandler+0xa78>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a74      	ldr	r2, [pc, #464]	; (80037b4 <HAL_DMA_IRQHandler+0xa7c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x8b8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a73      	ldr	r2, [pc, #460]	; (80037b8 <HAL_DMA_IRQHandler+0xa80>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <HAL_DMA_IRQHandler+0x8ca>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e007      	b.n	8003612 <HAL_DMA_IRQHandler+0x8da>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3301      	adds	r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361a:	429a      	cmp	r2, r3
 800361c:	d307      	bcc.n	800362e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f2      	bne.n	8003612 <HAL_DMA_IRQHandler+0x8da>
 800362c:	e000      	b.n	8003630 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800362e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2203      	movs	r2, #3
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003646:	e003      	b.n	8003650 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 82aa 	beq.w	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	e2a4      	b.n	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a52      	ldr	r2, [pc, #328]	; (80037bc <HAL_DMA_IRQHandler+0xa84>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d04a      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a51      	ldr	r2, [pc, #324]	; (80037c0 <HAL_DMA_IRQHandler+0xa88>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d045      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a4f      	ldr	r2, [pc, #316]	; (80037c4 <HAL_DMA_IRQHandler+0xa8c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d040      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <HAL_DMA_IRQHandler+0xa90>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d03b      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a4c      	ldr	r2, [pc, #304]	; (80037cc <HAL_DMA_IRQHandler+0xa94>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d036      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a4b      	ldr	r2, [pc, #300]	; (80037d0 <HAL_DMA_IRQHandler+0xa98>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d031      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a49      	ldr	r2, [pc, #292]	; (80037d4 <HAL_DMA_IRQHandler+0xa9c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02c      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a48      	ldr	r2, [pc, #288]	; (80037d8 <HAL_DMA_IRQHandler+0xaa0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d027      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a46      	ldr	r2, [pc, #280]	; (80037dc <HAL_DMA_IRQHandler+0xaa4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a45      	ldr	r2, [pc, #276]	; (80037e0 <HAL_DMA_IRQHandler+0xaa8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01d      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a43      	ldr	r2, [pc, #268]	; (80037e4 <HAL_DMA_IRQHandler+0xaac>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a42      	ldr	r2, [pc, #264]	; (80037e8 <HAL_DMA_IRQHandler+0xab0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a40      	ldr	r2, [pc, #256]	; (80037ec <HAL_DMA_IRQHandler+0xab4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a3f      	ldr	r2, [pc, #252]	; (80037f0 <HAL_DMA_IRQHandler+0xab8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3d      	ldr	r2, [pc, #244]	; (80037f4 <HAL_DMA_IRQHandler+0xabc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_DMA_IRQHandler+0x9d4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <HAL_DMA_IRQHandler+0xac0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_DMA_IRQHandler+0x9d8>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_DMA_IRQHandler+0x9da>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 824f 	beq.w	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2204      	movs	r2, #4
 800372a:	409a      	lsls	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80dd 	beq.w	80038f0 <HAL_DMA_IRQHandler+0xbb8>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80d7 	beq.w	80038f0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2204      	movs	r2, #4
 800374c:	409a      	lsls	r2, r3
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d059      	beq.n	8003810 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d14a      	bne.n	80037fc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8220 	beq.w	8003bb0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003778:	e21a      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xe78>
 800377a:	bf00      	nop
 800377c:	40020010 	.word	0x40020010
 8003780:	40020028 	.word	0x40020028
 8003784:	40020040 	.word	0x40020040
 8003788:	40020058 	.word	0x40020058
 800378c:	40020070 	.word	0x40020070
 8003790:	40020088 	.word	0x40020088
 8003794:	400200a0 	.word	0x400200a0
 8003798:	400200b8 	.word	0x400200b8
 800379c:	40020410 	.word	0x40020410
 80037a0:	40020428 	.word	0x40020428
 80037a4:	40020440 	.word	0x40020440
 80037a8:	40020458 	.word	0x40020458
 80037ac:	40020470 	.word	0x40020470
 80037b0:	40020488 	.word	0x40020488
 80037b4:	400204a0 	.word	0x400204a0
 80037b8:	400204b8 	.word	0x400204b8
 80037bc:	48022c08 	.word	0x48022c08
 80037c0:	48022c1c 	.word	0x48022c1c
 80037c4:	48022c30 	.word	0x48022c30
 80037c8:	48022c44 	.word	0x48022c44
 80037cc:	48022c58 	.word	0x48022c58
 80037d0:	48022c6c 	.word	0x48022c6c
 80037d4:	48022c80 	.word	0x48022c80
 80037d8:	48022c94 	.word	0x48022c94
 80037dc:	58025408 	.word	0x58025408
 80037e0:	5802541c 	.word	0x5802541c
 80037e4:	58025430 	.word	0x58025430
 80037e8:	58025444 	.word	0x58025444
 80037ec:	58025458 	.word	0x58025458
 80037f0:	5802546c 	.word	0x5802546c
 80037f4:	58025480 	.word	0x58025480
 80037f8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 81d5 	beq.w	8003bb0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800380e:	e1cf      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d160      	bne.n	80038dc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a7f      	ldr	r2, [pc, #508]	; (8003a1c <HAL_DMA_IRQHandler+0xce4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d04a      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a7d      	ldr	r2, [pc, #500]	; (8003a20 <HAL_DMA_IRQHandler+0xce8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d045      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7c      	ldr	r2, [pc, #496]	; (8003a24 <HAL_DMA_IRQHandler+0xcec>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d040      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a7a      	ldr	r2, [pc, #488]	; (8003a28 <HAL_DMA_IRQHandler+0xcf0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d03b      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a79      	ldr	r2, [pc, #484]	; (8003a2c <HAL_DMA_IRQHandler+0xcf4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d036      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a77      	ldr	r2, [pc, #476]	; (8003a30 <HAL_DMA_IRQHandler+0xcf8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d031      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a76      	ldr	r2, [pc, #472]	; (8003a34 <HAL_DMA_IRQHandler+0xcfc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d02c      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a74      	ldr	r2, [pc, #464]	; (8003a38 <HAL_DMA_IRQHandler+0xd00>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d027      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a73      	ldr	r2, [pc, #460]	; (8003a3c <HAL_DMA_IRQHandler+0xd04>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d022      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a71      	ldr	r2, [pc, #452]	; (8003a40 <HAL_DMA_IRQHandler+0xd08>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01d      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a70      	ldr	r2, [pc, #448]	; (8003a44 <HAL_DMA_IRQHandler+0xd0c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a6e      	ldr	r2, [pc, #440]	; (8003a48 <HAL_DMA_IRQHandler+0xd10>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6d      	ldr	r2, [pc, #436]	; (8003a4c <HAL_DMA_IRQHandler+0xd14>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a6b      	ldr	r2, [pc, #428]	; (8003a50 <HAL_DMA_IRQHandler+0xd18>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6a      	ldr	r2, [pc, #424]	; (8003a54 <HAL_DMA_IRQHandler+0xd1c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_DMA_IRQHandler+0xb82>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a68      	ldr	r2, [pc, #416]	; (8003a58 <HAL_DMA_IRQHandler+0xd20>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d108      	bne.n	80038cc <HAL_DMA_IRQHandler+0xb94>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0208 	bic.w	r2, r2, #8
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e007      	b.n	80038dc <HAL_DMA_IRQHandler+0xba4>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8165 	beq.w	8003bb0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ee:	e15f      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2202      	movs	r2, #2
 80038fa:	409a      	lsls	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80c5 	beq.w	8003a90 <HAL_DMA_IRQHandler+0xd58>
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80bf 	beq.w	8003a90 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2202      	movs	r2, #2
 800391c:	409a      	lsls	r2, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d018      	beq.n	800395e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 813a 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003948:	e134      	b.n	8003bb4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8130 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800395c:	e12a      	b.n	8003bb4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 8089 	bne.w	8003a7c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2b      	ldr	r2, [pc, #172]	; (8003a1c <HAL_DMA_IRQHandler+0xce4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d04a      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <HAL_DMA_IRQHandler+0xce8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d045      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <HAL_DMA_IRQHandler+0xcec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d040      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <HAL_DMA_IRQHandler+0xcf0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d03b      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <HAL_DMA_IRQHandler+0xcf4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d036      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <HAL_DMA_IRQHandler+0xcf8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d031      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <HAL_DMA_IRQHandler+0xcfc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d02c      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <HAL_DMA_IRQHandler+0xd00>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d027      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <HAL_DMA_IRQHandler+0xd04>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d022      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <HAL_DMA_IRQHandler+0xd08>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01d      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_DMA_IRQHandler+0xd0c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d018      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1a      	ldr	r2, [pc, #104]	; (8003a48 <HAL_DMA_IRQHandler+0xd10>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_DMA_IRQHandler+0xd14>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00e      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <HAL_DMA_IRQHandler+0xd18>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <HAL_DMA_IRQHandler+0xd1c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xcd2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_DMA_IRQHandler+0xd20>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d128      	bne.n	8003a5c <HAL_DMA_IRQHandler+0xd24>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0214 	bic.w	r2, r2, #20
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e027      	b.n	8003a6c <HAL_DMA_IRQHandler+0xd34>
 8003a1c:	40020010 	.word	0x40020010
 8003a20:	40020028 	.word	0x40020028
 8003a24:	40020040 	.word	0x40020040
 8003a28:	40020058 	.word	0x40020058
 8003a2c:	40020070 	.word	0x40020070
 8003a30:	40020088 	.word	0x40020088
 8003a34:	400200a0 	.word	0x400200a0
 8003a38:	400200b8 	.word	0x400200b8
 8003a3c:	40020410 	.word	0x40020410
 8003a40:	40020428 	.word	0x40020428
 8003a44:	40020440 	.word	0x40020440
 8003a48:	40020458 	.word	0x40020458
 8003a4c:	40020470 	.word	0x40020470
 8003a50:	40020488 	.word	0x40020488
 8003a54:	400204a0 	.word	0x400204a0
 8003a58:	400204b8 	.word	0x400204b8
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 020a 	bic.w	r2, r2, #10
 8003a6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8097 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a8e:	e091      	b.n	8003bb4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2208      	movs	r2, #8
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8088 	beq.w	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8082 	beq.w	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a41      	ldr	r2, [pc, #260]	; (8003bbc <HAL_DMA_IRQHandler+0xe84>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d04a      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3f      	ldr	r2, [pc, #252]	; (8003bc0 <HAL_DMA_IRQHandler+0xe88>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d045      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3e      	ldr	r2, [pc, #248]	; (8003bc4 <HAL_DMA_IRQHandler+0xe8c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d040      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3c      	ldr	r2, [pc, #240]	; (8003bc8 <HAL_DMA_IRQHandler+0xe90>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d03b      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <HAL_DMA_IRQHandler+0xe94>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d036      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a39      	ldr	r2, [pc, #228]	; (8003bd0 <HAL_DMA_IRQHandler+0xe98>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a38      	ldr	r2, [pc, #224]	; (8003bd4 <HAL_DMA_IRQHandler+0xe9c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d02c      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a36      	ldr	r2, [pc, #216]	; (8003bd8 <HAL_DMA_IRQHandler+0xea0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d027      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <HAL_DMA_IRQHandler+0xea4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a33      	ldr	r2, [pc, #204]	; (8003be0 <HAL_DMA_IRQHandler+0xea8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a32      	ldr	r2, [pc, #200]	; (8003be4 <HAL_DMA_IRQHandler+0xeac>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_DMA_IRQHandler+0xeb0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <HAL_DMA_IRQHandler+0xeb4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_DMA_IRQHandler+0xeb8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <HAL_DMA_IRQHandler+0xebc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xe1a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <HAL_DMA_IRQHandler+0xec0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d108      	bne.n	8003b64 <HAL_DMA_IRQHandler+0xe2c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 021c 	bic.w	r2, r2, #28
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e007      	b.n	8003b74 <HAL_DMA_IRQHandler+0xe3c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 020e 	bic.w	r2, r2, #14
 8003b72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
 8003baa:	e004      	b.n	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003bac:	bf00      	nop
 8003bae:	e002      	b.n	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb0:	bf00      	nop
 8003bb2:	e000      	b.n	8003bb6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bb6:	3728      	adds	r7, #40	; 0x28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40020010 	.word	0x40020010
 8003bc0:	40020028 	.word	0x40020028
 8003bc4:	40020040 	.word	0x40020040
 8003bc8:	40020058 	.word	0x40020058
 8003bcc:	40020070 	.word	0x40020070
 8003bd0:	40020088 	.word	0x40020088
 8003bd4:	400200a0 	.word	0x400200a0
 8003bd8:	400200b8 	.word	0x400200b8
 8003bdc:	40020410 	.word	0x40020410
 8003be0:	40020428 	.word	0x40020428
 8003be4:	40020440 	.word	0x40020440
 8003be8:	40020458 	.word	0x40020458
 8003bec:	40020470 	.word	0x40020470
 8003bf0:	40020488 	.word	0x40020488
 8003bf4:	400204a0 	.word	0x400204a0
 8003bf8:	400204b8 	.word	0x400204b8

08003bfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7f      	ldr	r2, [pc, #508]	; (8003e18 <DMA_SetConfig+0x21c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d072      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7d      	ldr	r2, [pc, #500]	; (8003e1c <DMA_SetConfig+0x220>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d06d      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7c      	ldr	r2, [pc, #496]	; (8003e20 <DMA_SetConfig+0x224>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d068      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7a      	ldr	r2, [pc, #488]	; (8003e24 <DMA_SetConfig+0x228>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d063      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a79      	ldr	r2, [pc, #484]	; (8003e28 <DMA_SetConfig+0x22c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d05e      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a77      	ldr	r2, [pc, #476]	; (8003e2c <DMA_SetConfig+0x230>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d059      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a76      	ldr	r2, [pc, #472]	; (8003e30 <DMA_SetConfig+0x234>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d054      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a74      	ldr	r2, [pc, #464]	; (8003e34 <DMA_SetConfig+0x238>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04f      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a73      	ldr	r2, [pc, #460]	; (8003e38 <DMA_SetConfig+0x23c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a71      	ldr	r2, [pc, #452]	; (8003e3c <DMA_SetConfig+0x240>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a70      	ldr	r2, [pc, #448]	; (8003e40 <DMA_SetConfig+0x244>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6e      	ldr	r2, [pc, #440]	; (8003e44 <DMA_SetConfig+0x248>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6d      	ldr	r2, [pc, #436]	; (8003e48 <DMA_SetConfig+0x24c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <DMA_SetConfig+0x250>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6a      	ldr	r2, [pc, #424]	; (8003e50 <DMA_SetConfig+0x254>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a68      	ldr	r2, [pc, #416]	; (8003e54 <DMA_SetConfig+0x258>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a67      	ldr	r2, [pc, #412]	; (8003e58 <DMA_SetConfig+0x25c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a65      	ldr	r2, [pc, #404]	; (8003e5c <DMA_SetConfig+0x260>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a64      	ldr	r2, [pc, #400]	; (8003e60 <DMA_SetConfig+0x264>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a62      	ldr	r2, [pc, #392]	; (8003e64 <DMA_SetConfig+0x268>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a61      	ldr	r2, [pc, #388]	; (8003e68 <DMA_SetConfig+0x26c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a5f      	ldr	r2, [pc, #380]	; (8003e6c <DMA_SetConfig+0x270>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a5e      	ldr	r2, [pc, #376]	; (8003e70 <DMA_SetConfig+0x274>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <DMA_SetConfig+0x10a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a5c      	ldr	r2, [pc, #368]	; (8003e74 <DMA_SetConfig+0x278>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <DMA_SetConfig+0x10e>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <DMA_SetConfig+0x110>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00d      	beq.n	8003d2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a39      	ldr	r2, [pc, #228]	; (8003e18 <DMA_SetConfig+0x21c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d04a      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a38      	ldr	r2, [pc, #224]	; (8003e1c <DMA_SetConfig+0x220>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d045      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a36      	ldr	r2, [pc, #216]	; (8003e20 <DMA_SetConfig+0x224>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d040      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a35      	ldr	r2, [pc, #212]	; (8003e24 <DMA_SetConfig+0x228>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d03b      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a33      	ldr	r2, [pc, #204]	; (8003e28 <DMA_SetConfig+0x22c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d036      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a32      	ldr	r2, [pc, #200]	; (8003e2c <DMA_SetConfig+0x230>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d031      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a30      	ldr	r2, [pc, #192]	; (8003e30 <DMA_SetConfig+0x234>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d02c      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2f      	ldr	r2, [pc, #188]	; (8003e34 <DMA_SetConfig+0x238>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d027      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2d      	ldr	r2, [pc, #180]	; (8003e38 <DMA_SetConfig+0x23c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d022      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2c      	ldr	r2, [pc, #176]	; (8003e3c <DMA_SetConfig+0x240>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d01d      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2a      	ldr	r2, [pc, #168]	; (8003e40 <DMA_SetConfig+0x244>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d018      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <DMA_SetConfig+0x248>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d013      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <DMA_SetConfig+0x24c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00e      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <DMA_SetConfig+0x250>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d009      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <DMA_SetConfig+0x254>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <DMA_SetConfig+0x1d0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <DMA_SetConfig+0x258>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <DMA_SetConfig+0x1d4>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <DMA_SetConfig+0x1d6>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d059      	beq.n	8003e8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	223f      	movs	r2, #63	; 0x3f
 8003de0:	409a      	lsls	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003df4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d138      	bne.n	8003e78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e16:	e0ae      	b.n	8003f76 <DMA_SetConfig+0x37a>
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	40020040 	.word	0x40020040
 8003e24:	40020058 	.word	0x40020058
 8003e28:	40020070 	.word	0x40020070
 8003e2c:	40020088 	.word	0x40020088
 8003e30:	400200a0 	.word	0x400200a0
 8003e34:	400200b8 	.word	0x400200b8
 8003e38:	40020410 	.word	0x40020410
 8003e3c:	40020428 	.word	0x40020428
 8003e40:	40020440 	.word	0x40020440
 8003e44:	40020458 	.word	0x40020458
 8003e48:	40020470 	.word	0x40020470
 8003e4c:	40020488 	.word	0x40020488
 8003e50:	400204a0 	.word	0x400204a0
 8003e54:	400204b8 	.word	0x400204b8
 8003e58:	58025408 	.word	0x58025408
 8003e5c:	5802541c 	.word	0x5802541c
 8003e60:	58025430 	.word	0x58025430
 8003e64:	58025444 	.word	0x58025444
 8003e68:	58025458 	.word	0x58025458
 8003e6c:	5802546c 	.word	0x5802546c
 8003e70:	58025480 	.word	0x58025480
 8003e74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
}
 8003e88:	e075      	b.n	8003f76 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <DMA_SetConfig+0x388>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04a      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <DMA_SetConfig+0x38c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d045      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <DMA_SetConfig+0x390>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <DMA_SetConfig+0x394>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d03b      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a37      	ldr	r2, [pc, #220]	; (8003f94 <DMA_SetConfig+0x398>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d036      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a35      	ldr	r2, [pc, #212]	; (8003f98 <DMA_SetConfig+0x39c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <DMA_SetConfig+0x3a0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a32      	ldr	r2, [pc, #200]	; (8003fa0 <DMA_SetConfig+0x3a4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d027      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <DMA_SetConfig+0x3a8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	; (8003fa8 <DMA_SetConfig+0x3ac>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <DMA_SetConfig+0x3b0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <DMA_SetConfig+0x3b4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2b      	ldr	r2, [pc, #172]	; (8003fb4 <DMA_SetConfig+0x3b8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <DMA_SetConfig+0x3bc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <DMA_SetConfig+0x3c0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <DMA_SetConfig+0x32e>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <DMA_SetConfig+0x3c4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <DMA_SetConfig+0x332>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <DMA_SetConfig+0x334>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d108      	bne.n	8003f66 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	60da      	str	r2, [r3, #12]
}
 8003f64:	e007      	b.n	8003f76 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	60da      	str	r2, [r3, #12]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	48022c08 	.word	0x48022c08
 8003f88:	48022c1c 	.word	0x48022c1c
 8003f8c:	48022c30 	.word	0x48022c30
 8003f90:	48022c44 	.word	0x48022c44
 8003f94:	48022c58 	.word	0x48022c58
 8003f98:	48022c6c 	.word	0x48022c6c
 8003f9c:	48022c80 	.word	0x48022c80
 8003fa0:	48022c94 	.word	0x48022c94
 8003fa4:	58025408 	.word	0x58025408
 8003fa8:	5802541c 	.word	0x5802541c
 8003fac:	58025430 	.word	0x58025430
 8003fb0:	58025444 	.word	0x58025444
 8003fb4:	58025458 	.word	0x58025458
 8003fb8:	5802546c 	.word	0x5802546c
 8003fbc:	58025480 	.word	0x58025480
 8003fc0:	58025494 	.word	0x58025494

08003fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a42      	ldr	r2, [pc, #264]	; (80040dc <DMA_CalcBaseAndBitshift+0x118>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d04a      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a41      	ldr	r2, [pc, #260]	; (80040e0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d045      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3f      	ldr	r2, [pc, #252]	; (80040e4 <DMA_CalcBaseAndBitshift+0x120>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d040      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3e      	ldr	r2, [pc, #248]	; (80040e8 <DMA_CalcBaseAndBitshift+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d03b      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <DMA_CalcBaseAndBitshift+0x128>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d036      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d031      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a39      	ldr	r2, [pc, #228]	; (80040f4 <DMA_CalcBaseAndBitshift+0x130>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02c      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a38      	ldr	r2, [pc, #224]	; (80040f8 <DMA_CalcBaseAndBitshift+0x134>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d027      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a36      	ldr	r2, [pc, #216]	; (80040fc <DMA_CalcBaseAndBitshift+0x138>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d022      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a35      	ldr	r2, [pc, #212]	; (8004100 <DMA_CalcBaseAndBitshift+0x13c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d01d      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a33      	ldr	r2, [pc, #204]	; (8004104 <DMA_CalcBaseAndBitshift+0x140>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d018      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a32      	ldr	r2, [pc, #200]	; (8004108 <DMA_CalcBaseAndBitshift+0x144>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a30      	ldr	r2, [pc, #192]	; (800410c <DMA_CalcBaseAndBitshift+0x148>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00e      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2f      	ldr	r2, [pc, #188]	; (8004110 <DMA_CalcBaseAndBitshift+0x14c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <DMA_CalcBaseAndBitshift+0x150>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <DMA_CalcBaseAndBitshift+0xa8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <DMA_CalcBaseAndBitshift+0x154>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <DMA_CalcBaseAndBitshift+0xac>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <DMA_CalcBaseAndBitshift+0xae>
 8004070:	2300      	movs	r3, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d024      	beq.n	80040c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3b10      	subs	r3, #16
 800407e:	4a27      	ldr	r2, [pc, #156]	; (800411c <DMA_CalcBaseAndBitshift+0x158>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	4a24      	ldr	r2, [pc, #144]	; (8004120 <DMA_CalcBaseAndBitshift+0x15c>)
 8004090:	5cd3      	ldrb	r3, [r2, r3]
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b03      	cmp	r3, #3
 800409c:	d908      	bls.n	80040b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <DMA_CalcBaseAndBitshift+0x160>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	; 0x58
 80040ae:	e00d      	b.n	80040cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <DMA_CalcBaseAndBitshift+0x160>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6593      	str	r3, [r2, #88]	; 0x58
 80040be:	e005      	b.n	80040cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40020010 	.word	0x40020010
 80040e0:	40020028 	.word	0x40020028
 80040e4:	40020040 	.word	0x40020040
 80040e8:	40020058 	.word	0x40020058
 80040ec:	40020070 	.word	0x40020070
 80040f0:	40020088 	.word	0x40020088
 80040f4:	400200a0 	.word	0x400200a0
 80040f8:	400200b8 	.word	0x400200b8
 80040fc:	40020410 	.word	0x40020410
 8004100:	40020428 	.word	0x40020428
 8004104:	40020440 	.word	0x40020440
 8004108:	40020458 	.word	0x40020458
 800410c:	40020470 	.word	0x40020470
 8004110:	40020488 	.word	0x40020488
 8004114:	400204a0 	.word	0x400204a0
 8004118:	400204b8 	.word	0x400204b8
 800411c:	aaaaaaab 	.word	0xaaaaaaab
 8004120:	08009d48 	.word	0x08009d48
 8004124:	fffffc00 	.word	0xfffffc00

08004128 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d120      	bne.n	800417e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	2b03      	cmp	r3, #3
 8004142:	d858      	bhi.n	80041f6 <DMA_CheckFifoParam+0xce>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <DMA_CheckFifoParam+0x24>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800416f 	.word	0x0800416f
 8004154:	0800415d 	.word	0x0800415d
 8004158:	080041f7 	.word	0x080041f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d048      	beq.n	80041fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800416c:	e045      	b.n	80041fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004176:	d142      	bne.n	80041fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800417c:	e03f      	b.n	80041fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004186:	d123      	bne.n	80041d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	2b03      	cmp	r3, #3
 800418e:	d838      	bhi.n	8004202 <DMA_CheckFifoParam+0xda>
 8004190:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <DMA_CheckFifoParam+0x70>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041af 	.word	0x080041af
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	080041c1 	.word	0x080041c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
        break;
 80041ac:	e030      	b.n	8004210 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d025      	beq.n	8004206 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041be:	e022      	b.n	8004206 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c8:	d11f      	bne.n	800420a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041ce:	e01c      	b.n	800420a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d902      	bls.n	80041de <DMA_CheckFifoParam+0xb6>
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d003      	beq.n	80041e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041dc:	e018      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
        break;
 80041e2:	e015      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
    break;
 80041f4:	e00b      	b.n	800420e <DMA_CheckFifoParam+0xe6>
        break;
 80041f6:	bf00      	nop
 80041f8:	e00a      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
        break;
 80041fa:	bf00      	nop
 80041fc:	e008      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
        break;
 80041fe:	bf00      	nop
 8004200:	e006      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
        break;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
        break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
        break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
    break;
 800420e:	bf00      	nop
    }
  }

  return status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop

08004220 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a38      	ldr	r2, [pc, #224]	; (8004314 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d022      	beq.n	800427e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a36      	ldr	r2, [pc, #216]	; (8004318 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01d      	beq.n	800427e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a35      	ldr	r2, [pc, #212]	; (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d018      	beq.n	800427e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a33      	ldr	r2, [pc, #204]	; (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a32      	ldr	r2, [pc, #200]	; (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a30      	ldr	r2, [pc, #192]	; (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2f      	ldr	r2, [pc, #188]	; (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01a      	beq.n	80042be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	3b08      	subs	r3, #8
 8004290:	4a28      	ldr	r2, [pc, #160]	; (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4b26      	ldr	r3, [pc, #152]	; (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a24      	ldr	r2, [pc, #144]	; (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2201      	movs	r2, #1
 80042b6:	409a      	lsls	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042bc:	e024      	b.n	8004308 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	3b10      	subs	r3, #16
 80042c6:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d806      	bhi.n	80042e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d902      	bls.n	80042e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3308      	adds	r3, #8
 80042e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4b18      	ldr	r3, [pc, #96]	; (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	461a      	mov	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a16      	ldr	r2, [pc, #88]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2201      	movs	r2, #1
 8004302:	409a      	lsls	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	58025408 	.word	0x58025408
 8004318:	5802541c 	.word	0x5802541c
 800431c:	58025430 	.word	0x58025430
 8004320:	58025444 	.word	0x58025444
 8004324:	58025458 	.word	0x58025458
 8004328:	5802546c 	.word	0x5802546c
 800432c:	58025480 	.word	0x58025480
 8004330:	58025494 	.word	0x58025494
 8004334:	cccccccd 	.word	0xcccccccd
 8004338:	16009600 	.word	0x16009600
 800433c:	58025880 	.word	0x58025880
 8004340:	aaaaaaab 	.word	0xaaaaaaab
 8004344:	400204b8 	.word	0x400204b8
 8004348:	4002040f 	.word	0x4002040f
 800434c:	10008200 	.word	0x10008200
 8004350:	40020880 	.word	0x40020880

08004354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d04a      	beq.n	8004400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d847      	bhi.n	8004400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a25      	ldr	r2, [pc, #148]	; (800440c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d022      	beq.n	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a24      	ldr	r2, [pc, #144]	; (8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d01d      	beq.n	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a22      	ldr	r2, [pc, #136]	; (8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d018      	beq.n	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a21      	ldr	r2, [pc, #132]	; (8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d013      	beq.n	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00e      	beq.n	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d009      	beq.n	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d101      	bne.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043c4:	2300      	movs	r3, #0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	461a      	mov	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a15      	ldr	r2, [pc, #84]	; (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043dc:	671a      	str	r2, [r3, #112]	; 0x70
 80043de:	e009      	b.n	80043f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	461a      	mov	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a11      	ldr	r2, [pc, #68]	; (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	2201      	movs	r2, #1
 80043fa:	409a      	lsls	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	58025408 	.word	0x58025408
 8004410:	5802541c 	.word	0x5802541c
 8004414:	58025430 	.word	0x58025430
 8004418:	58025444 	.word	0x58025444
 800441c:	58025458 	.word	0x58025458
 8004420:	5802546c 	.word	0x5802546c
 8004424:	58025480 	.word	0x58025480
 8004428:	58025494 	.word	0x58025494
 800442c:	1600963f 	.word	0x1600963f
 8004430:	58025940 	.word	0x58025940
 8004434:	1000823f 	.word	0x1000823f
 8004438:	40020940 	.word	0x40020940

0800443c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800444a:	4b89      	ldr	r3, [pc, #548]	; (8004670 <HAL_GPIO_Init+0x234>)
 800444c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800444e:	e194      	b.n	800477a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa01 f303 	lsl.w	r3, r1, r3
 800445c:	4013      	ands	r3, r2
 800445e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8186 	beq.w	8004774 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d005      	beq.n	8004480 <HAL_GPIO_Init+0x44>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d130      	bne.n	80044e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	2203      	movs	r2, #3
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044b6:	2201      	movs	r2, #1
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 0201 	and.w	r2, r3, #1
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d017      	beq.n	800451e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2203      	movs	r2, #3
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d123      	bne.n	8004572 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	08da      	lsrs	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3208      	adds	r2, #8
 8004532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	220f      	movs	r2, #15
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4013      	ands	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	08da      	lsrs	r2, r3, #3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3208      	adds	r2, #8
 800456c:	69b9      	ldr	r1, [r7, #24]
 800456e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2203      	movs	r2, #3
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0203 	and.w	r2, r3, #3
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80e0 	beq.w	8004774 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_GPIO_Init+0x238>)
 80045b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80045ba:	4a2e      	ldr	r2, [pc, #184]	; (8004674 <HAL_GPIO_Init+0x238>)
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80045c4:	4b2b      	ldr	r3, [pc, #172]	; (8004674 <HAL_GPIO_Init+0x238>)
 80045c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045d2:	4a29      	ldr	r2, [pc, #164]	; (8004678 <HAL_GPIO_Init+0x23c>)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	3302      	adds	r3, #2
 80045da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	220f      	movs	r2, #15
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a20      	ldr	r2, [pc, #128]	; (800467c <HAL_GPIO_Init+0x240>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d052      	beq.n	80046a4 <HAL_GPIO_Init+0x268>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <HAL_GPIO_Init+0x244>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d031      	beq.n	800466a <HAL_GPIO_Init+0x22e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <HAL_GPIO_Init+0x248>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d02b      	beq.n	8004666 <HAL_GPIO_Init+0x22a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <HAL_GPIO_Init+0x24c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d025      	beq.n	8004662 <HAL_GPIO_Init+0x226>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1c      	ldr	r2, [pc, #112]	; (800468c <HAL_GPIO_Init+0x250>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01f      	beq.n	800465e <HAL_GPIO_Init+0x222>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <HAL_GPIO_Init+0x254>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d019      	beq.n	800465a <HAL_GPIO_Init+0x21e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1a      	ldr	r2, [pc, #104]	; (8004694 <HAL_GPIO_Init+0x258>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_GPIO_Init+0x21a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a19      	ldr	r2, [pc, #100]	; (8004698 <HAL_GPIO_Init+0x25c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00d      	beq.n	8004652 <HAL_GPIO_Init+0x216>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_GPIO_Init+0x260>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <HAL_GPIO_Init+0x212>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_GPIO_Init+0x264>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_GPIO_Init+0x20e>
 8004646:	2309      	movs	r3, #9
 8004648:	e02d      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 800464a:	230a      	movs	r3, #10
 800464c:	e02b      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 800464e:	2308      	movs	r3, #8
 8004650:	e029      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 8004652:	2307      	movs	r3, #7
 8004654:	e027      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 8004656:	2306      	movs	r3, #6
 8004658:	e025      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 800465a:	2305      	movs	r3, #5
 800465c:	e023      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 800465e:	2304      	movs	r3, #4
 8004660:	e021      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 8004662:	2303      	movs	r3, #3
 8004664:	e01f      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 8004666:	2302      	movs	r3, #2
 8004668:	e01d      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 800466a:	2301      	movs	r3, #1
 800466c:	e01b      	b.n	80046a6 <HAL_GPIO_Init+0x26a>
 800466e:	bf00      	nop
 8004670:	58000080 	.word	0x58000080
 8004674:	58024400 	.word	0x58024400
 8004678:	58000400 	.word	0x58000400
 800467c:	58020000 	.word	0x58020000
 8004680:	58020400 	.word	0x58020400
 8004684:	58020800 	.word	0x58020800
 8004688:	58020c00 	.word	0x58020c00
 800468c:	58021000 	.word	0x58021000
 8004690:	58021400 	.word	0x58021400
 8004694:	58021800 	.word	0x58021800
 8004698:	58021c00 	.word	0x58021c00
 800469c:	58022000 	.word	0x58022000
 80046a0:	58022400 	.word	0x58022400
 80046a4:	2300      	movs	r3, #0
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	f002 0203 	and.w	r2, r2, #3
 80046ac:	0092      	lsls	r2, r2, #2
 80046ae:	4093      	lsls	r3, r2
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046b6:	4938      	ldr	r1, [pc, #224]	; (8004798 <HAL_GPIO_Init+0x35c>)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	3302      	adds	r3, #2
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	43db      	mvns	r3, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4013      	ands	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	3301      	adds	r3, #1
 8004778:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	f47f ae63 	bne.w	8004450 <HAL_GPIO_Init+0x14>
  }
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	3724      	adds	r7, #36	; 0x24
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	58000400 	.word	0x58000400

0800479c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e0b1      	b.n	8004916 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d101      	bne.n	80047c2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0a9      	b.n	8004916 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d101      	bne.n	80047d2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e0a1      	b.n	8004916 <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc f9e6 	bl	8000bc0 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004802:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d119      	bne.n	8004840 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b43      	ldr	r3, [pc, #268]	; (8004920 <HAL_OPAMP_Init+0x184>)
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6851      	ldr	r1, [r2, #4]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6892      	ldr	r2, [r2, #8]
 800481e:	4311      	orrs	r1, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6952      	ldr	r2, [r2, #20]
 8004824:	4311      	orrs	r1, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6992      	ldr	r2, [r2, #24]
 800482a:	4311      	orrs	r1, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6912      	ldr	r2, [r2, #16]
 8004830:	4311      	orrs	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	69d2      	ldr	r2, [r2, #28]
 8004836:	4311      	orrs	r1, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	430b      	orrs	r3, r1
 800483e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b60      	cmp	r3, #96	; 0x60
 8004846:	d113      	bne.n	8004870 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b35      	ldr	r3, [pc, #212]	; (8004924 <HAL_OPAMP_Init+0x188>)
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6851      	ldr	r1, [r2, #4]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6892      	ldr	r2, [r2, #8]
 800485a:	4311      	orrs	r1, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6912      	ldr	r2, [r2, #16]
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	69d2      	ldr	r2, [r2, #28]
 8004866:	4311      	orrs	r1, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	430b      	orrs	r3, r1
 800486e:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b29      	ldr	r3, [pc, #164]	; (8004924 <HAL_OPAMP_Init+0x188>)
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6851      	ldr	r1, [r2, #4]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	4311      	orrs	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68d2      	ldr	r2, [r2, #12]
 8004890:	4311      	orrs	r1, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6912      	ldr	r2, [r2, #16]
 8004896:	4311      	orrs	r1, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	69d2      	ldr	r2, [r2, #28]
 800489c:	4311      	orrs	r1, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048ae:	d127      	bne.n	8004900 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b8:	d011      	beq.n	80048de <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	4b16      	ldr	r3, [pc, #88]	; (8004928 <HAL_OPAMP_Init+0x18c>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	430b      	orrs	r3, r1
 80048da:	6053      	str	r3, [r2, #4]
 80048dc:	e010      	b.n	8004900 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_OPAMP_Init+0x18c>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	fff83e93 	.word	0xfff83e93
 8004924:	fffbfe93 	.word	0xfffbfe93
 8004928:	ffffe0e0 	.word	0xffffe0e0

0800492c <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
 8004942:	e01d      	b.n	8004980 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b05      	cmp	r3, #5
 800494e:	d102      	bne.n	8004956 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
 8004954:	e014      	b.n	8004980 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10c      	bne.n	800497c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2204      	movs	r2, #4
 8004976:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800497a:	e001      	b.n	8004980 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800499a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499e:	6013      	str	r3, [r2, #0]
}
 80049a0:	bf00      	nop
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	58024800 	.word	0x58024800

080049b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80049b8:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <HAL_PWREx_ConfigSupply+0xb0>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	2b06      	cmp	r3, #6
 80049c2:	d00a      	beq.n	80049da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049c4:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <HAL_PWREx_ConfigSupply+0xb0>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d001      	beq.n	80049d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e040      	b.n	8004a58 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e03e      	b.n	8004a58 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049da:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <HAL_PWREx_ConfigSupply+0xb0>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80049e2:	491f      	ldr	r1, [pc, #124]	; (8004a60 <HAL_PWREx_ConfigSupply+0xb0>)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049ea:	f7fc fb65 	bl	80010b8 <HAL_GetTick>
 80049ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049f0:	e009      	b.n	8004a06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049f2:	f7fc fb61 	bl	80010b8 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a00:	d901      	bls.n	8004a06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e028      	b.n	8004a58 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a06:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	d1ee      	bne.n	80049f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b1e      	cmp	r3, #30
 8004a18:	d008      	beq.n	8004a2c <HAL_PWREx_ConfigSupply+0x7c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a1e:	d005      	beq.n	8004a2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b1d      	cmp	r3, #29
 8004a24:	d002      	beq.n	8004a2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b2d      	cmp	r3, #45	; 0x2d
 8004a2a:	d114      	bne.n	8004a56 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004a2c:	f7fc fb44 	bl	80010b8 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a32:	e009      	b.n	8004a48 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a34:	f7fc fb40 	bl	80010b8 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a42:	d901      	bls.n	8004a48 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e007      	b.n	8004a58 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d1ee      	bne.n	8004a34 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	58024800 	.word	0x58024800

08004a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08c      	sub	sp, #48	; 0x30
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f000 bc1f 	b.w	80052b6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80b3 	beq.w	8004bec <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a86:	4b95      	ldr	r3, [pc, #596]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a90:	4b92      	ldr	r3, [pc, #584]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d007      	beq.n	8004aac <HAL_RCC_OscConfig+0x48>
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	2b18      	cmp	r3, #24
 8004aa0:	d112      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x64>
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d10d      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	4b8b      	ldr	r3, [pc, #556]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8098 	beq.w	8004bea <HAL_RCC_OscConfig+0x186>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 8093 	bne.w	8004bea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e3f6      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x7c>
 8004ad2:	4b82      	ldr	r3, [pc, #520]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a81      	ldr	r2, [pc, #516]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e058      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d112      	bne.n	8004b0e <HAL_RCC_OscConfig+0xaa>
 8004ae8:	4b7c      	ldr	r3, [pc, #496]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a7b      	ldr	r2, [pc, #492]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b79      	ldr	r3, [pc, #484]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a78      	ldr	r2, [pc, #480]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004afa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4b76      	ldr	r3, [pc, #472]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a75      	ldr	r2, [pc, #468]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	e041      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b16:	d112      	bne.n	8004b3e <HAL_RCC_OscConfig+0xda>
 8004b18:	4b70      	ldr	r3, [pc, #448]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6f      	ldr	r2, [pc, #444]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b6d      	ldr	r3, [pc, #436]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a6c      	ldr	r2, [pc, #432]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a69      	ldr	r2, [pc, #420]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e029      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_OscConfig+0x10a>
 8004b48:	4b64      	ldr	r3, [pc, #400]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a63      	ldr	r2, [pc, #396]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b61      	ldr	r3, [pc, #388]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a60      	ldr	r2, [pc, #384]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b5e      	ldr	r3, [pc, #376]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a5d      	ldr	r2, [pc, #372]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e011      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
 8004b6e:	4b5b      	ldr	r3, [pc, #364]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a5a      	ldr	r2, [pc, #360]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b58      	ldr	r3, [pc, #352]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a57      	ldr	r2, [pc, #348]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4b55      	ldr	r3, [pc, #340]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a54      	ldr	r2, [pc, #336]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004b8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d013      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fc fa8d 	bl	80010b8 <HAL_GetTick>
 8004b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba2:	f7fc fa89 	bl	80010b8 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b64      	cmp	r3, #100	; 0x64
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e380      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bb4:	4b49      	ldr	r3, [pc, #292]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x13e>
 8004bc0:	e014      	b.n	8004bec <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fc fa79 	bl	80010b8 <HAL_GetTick>
 8004bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bca:	f7fc fa75 	bl	80010b8 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b64      	cmp	r3, #100	; 0x64
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e36c      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bdc:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x166>
 8004be8:	e000      	b.n	8004bec <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 808c 	beq.w	8004d12 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfa:	4b38      	ldr	r3, [pc, #224]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c02:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c04:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <HAL_RCC_OscConfig+0x1bc>
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	2b18      	cmp	r3, #24
 8004c14:	d137      	bne.n	8004c86 <HAL_RCC_OscConfig+0x222>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d132      	bne.n	8004c86 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c20:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_OscConfig+0x1d4>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e33e      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 0219 	bic.w	r2, r3, #25
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4925      	ldr	r1, [pc, #148]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fa35 	bl	80010b8 <HAL_GetTick>
 8004c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c52:	f7fc fa31 	bl	80010b8 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e328      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c64:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	4917      	ldr	r1, [pc, #92]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c84:	e045      	b.n	8004d12 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d028      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c8e:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0219 	bic.w	r2, r3, #25
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4910      	ldr	r1, [pc, #64]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fc fa0a 	bl	80010b8 <HAL_GetTick>
 8004ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca8:	f7fc fa06 	bl	80010b8 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e2fd      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cba:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	061b      	lsls	r3, r3, #24
 8004cd4:	4901      	ldr	r1, [pc, #4]	; (8004cdc <HAL_RCC_OscConfig+0x278>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	604b      	str	r3, [r1, #4]
 8004cda:	e01a      	b.n	8004d12 <HAL_RCC_OscConfig+0x2ae>
 8004cdc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce0:	4b97      	ldr	r3, [pc, #604]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a96      	ldr	r2, [pc, #600]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fc f9e4 	bl	80010b8 <HAL_GetTick>
 8004cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7fc f9e0 	bl	80010b8 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e2d7      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d06:	4b8e      	ldr	r3, [pc, #568]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d06a      	beq.n	8004df4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1e:	4b88      	ldr	r3, [pc, #544]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d28:	4b85      	ldr	r3, [pc, #532]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d007      	beq.n	8004d44 <HAL_RCC_OscConfig+0x2e0>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b18      	cmp	r3, #24
 8004d38:	d11b      	bne.n	8004d72 <HAL_RCC_OscConfig+0x30e>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d116      	bne.n	8004d72 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d44:	4b7e      	ldr	r3, [pc, #504]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_OscConfig+0x2f8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b80      	cmp	r3, #128	; 0x80
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e2ac      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d5c:	4b78      	ldr	r3, [pc, #480]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	4975      	ldr	r1, [pc, #468]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d70:	e040      	b.n	8004df4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d023      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d7a:	4b71      	ldr	r3, [pc, #452]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a70      	ldr	r2, [pc, #448]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d86:	f7fc f997 	bl	80010b8 <HAL_GetTick>
 8004d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d8e:	f7fc f993 	bl	80010b8 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e28a      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004da0:	4b67      	ldr	r3, [pc, #412]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0f0      	beq.n	8004d8e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dac:	4b64      	ldr	r3, [pc, #400]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	4961      	ldr	r1, [pc, #388]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60cb      	str	r3, [r1, #12]
 8004dc0:	e018      	b.n	8004df4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dc2:	4b5f      	ldr	r3, [pc, #380]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a5e      	ldr	r2, [pc, #376]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7fc f973 	bl	80010b8 <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dd6:	f7fc f96f 	bl	80010b8 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e266      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004de8:	4b55      	ldr	r3, [pc, #340]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f0      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d036      	beq.n	8004e6e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d019      	beq.n	8004e3c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e08:	4b4d      	ldr	r3, [pc, #308]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	4a4c      	ldr	r2, [pc, #304]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fc f950 	bl	80010b8 <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1c:	f7fc f94c 	bl	80010b8 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e243      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e2e:	4b44      	ldr	r3, [pc, #272]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x3b8>
 8004e3a:	e018      	b.n	8004e6e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3c:	4b40      	ldr	r3, [pc, #256]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e40:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fc f936 	bl	80010b8 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e50:	f7fc f932 	bl	80010b8 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e229      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e62:	4b37      	ldr	r3, [pc, #220]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d036      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d019      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e82:	4b2f      	ldr	r3, [pc, #188]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2e      	ldr	r2, [pc, #184]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004e88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e8e:	f7fc f913 	bl	80010b8 <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e96:	f7fc f90f 	bl	80010b8 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e206      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x432>
 8004eb4:	e018      	b.n	8004ee8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eb6:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ec2:	f7fc f8f9 	bl	80010b8 <HAL_GetTick>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eca:	f7fc f8f5 	bl	80010b8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e1ec      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004edc:	4b18      	ldr	r3, [pc, #96]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80af 	beq.w	8005054 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_RCC_OscConfig+0x4e0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <HAL_RCC_OscConfig+0x4e0>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f02:	f7fc f8d9 	bl	80010b8 <HAL_GetTick>
 8004f06:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0a:	f7fc f8d5 	bl	80010b8 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b64      	cmp	r3, #100	; 0x64
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e1cc      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <HAL_RCC_OscConfig+0x4e0>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10b      	bne.n	8004f48 <HAL_RCC_OscConfig+0x4e4>
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a02      	ldr	r2, [pc, #8]	; (8004f40 <HAL_RCC_OscConfig+0x4dc>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	e05b      	b.n	8004ff6 <HAL_RCC_OscConfig+0x592>
 8004f3e:	bf00      	nop
 8004f40:	58024400 	.word	0x58024400
 8004f44:	58024800 	.word	0x58024800
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d112      	bne.n	8004f76 <HAL_RCC_OscConfig+0x512>
 8004f50:	4b9d      	ldr	r3, [pc, #628]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	4a9c      	ldr	r2, [pc, #624]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5c:	4b9a      	ldr	r3, [pc, #616]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	4a99      	ldr	r2, [pc, #612]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70
 8004f68:	4b97      	ldr	r3, [pc, #604]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a96      	ldr	r2, [pc, #600]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f6e:	f023 0304 	bic.w	r3, r3, #4
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	e03f      	b.n	8004ff6 <HAL_RCC_OscConfig+0x592>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d112      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x540>
 8004f7e:	4b92      	ldr	r3, [pc, #584]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	4a91      	ldr	r2, [pc, #580]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8a:	4b8f      	ldr	r3, [pc, #572]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a8e      	ldr	r2, [pc, #568]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f94:	6713      	str	r3, [r2, #112]	; 0x70
 8004f96:	4b8c      	ldr	r3, [pc, #560]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a8b      	ldr	r2, [pc, #556]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa2:	e028      	b.n	8004ff6 <HAL_RCC_OscConfig+0x592>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b85      	cmp	r3, #133	; 0x85
 8004faa:	d112      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x56e>
 8004fac:	4b86      	ldr	r3, [pc, #536]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	4a85      	ldr	r2, [pc, #532]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fb2:	f043 0304 	orr.w	r3, r3, #4
 8004fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb8:	4b83      	ldr	r3, [pc, #524]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	4a82      	ldr	r2, [pc, #520]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc4:	4b80      	ldr	r3, [pc, #512]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	4a7f      	ldr	r2, [pc, #508]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd0:	e011      	b.n	8004ff6 <HAL_RCC_OscConfig+0x592>
 8004fd2:	4b7d      	ldr	r3, [pc, #500]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	4a7c      	ldr	r2, [pc, #496]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fde:	4b7a      	ldr	r3, [pc, #488]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	4a79      	ldr	r2, [pc, #484]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fe4:	f023 0304 	bic.w	r3, r3, #4
 8004fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fea:	4b77      	ldr	r3, [pc, #476]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4a76      	ldr	r2, [pc, #472]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8004ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d015      	beq.n	800502a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffe:	f7fc f85b 	bl	80010b8 <HAL_GetTick>
 8005002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005004:	e00a      	b.n	800501c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fc f857 	bl	80010b8 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e14c      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800501c:	4b6a      	ldr	r3, [pc, #424]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ee      	beq.n	8005006 <HAL_RCC_OscConfig+0x5a2>
 8005028:	e014      	b.n	8005054 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502a:	f7fc f845 	bl	80010b8 <HAL_GetTick>
 800502e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005030:	e00a      	b.n	8005048 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fc f841 	bl	80010b8 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e136      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005048:	4b5f      	ldr	r3, [pc, #380]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ee      	bne.n	8005032 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 812b 	beq.w	80052b4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800505e:	4b5a      	ldr	r3, [pc, #360]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005066:	2b18      	cmp	r3, #24
 8005068:	f000 80bb 	beq.w	80051e2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b02      	cmp	r3, #2
 8005072:	f040 8095 	bne.w	80051a0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005076:	4b54      	ldr	r3, [pc, #336]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a53      	ldr	r2, [pc, #332]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800507c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005082:	f7fc f819 	bl	80010b8 <HAL_GetTick>
 8005086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508a:	f7fc f815 	bl	80010b8 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e10c      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800509c:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a8:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 80050aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ac:	4b47      	ldr	r3, [pc, #284]	; (80051cc <HAL_RCC_OscConfig+0x768>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050b8:	0112      	lsls	r2, r2, #4
 80050ba:	430a      	orrs	r2, r1
 80050bc:	4942      	ldr	r1, [pc, #264]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	628b      	str	r3, [r1, #40]	; 0x28
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	3b01      	subs	r3, #1
 80050d2:	025b      	lsls	r3, r3, #9
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	3b01      	subs	r3, #1
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	3b01      	subs	r3, #1
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050f2:	4935      	ldr	r1, [pc, #212]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050f8:	4b33      	ldr	r3, [pc, #204]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	4a32      	ldr	r2, [pc, #200]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005104:	4b30      	ldr	r3, [pc, #192]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005108:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <HAL_RCC_OscConfig+0x76c>)
 800510a:	4013      	ands	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005110:	00d2      	lsls	r2, r2, #3
 8005112:	492d      	ldr	r1, [pc, #180]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005114:	4313      	orrs	r3, r2
 8005116:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005118:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	f023 020c 	bic.w	r2, r3, #12
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	4928      	ldr	r1, [pc, #160]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005126:	4313      	orrs	r3, r2
 8005128:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800512a:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	f023 0202 	bic.w	r2, r3, #2
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	4924      	ldr	r1, [pc, #144]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005138:	4313      	orrs	r3, r2
 800513a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005148:	4b1f      	ldr	r3, [pc, #124]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800514e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005154:	4b1c      	ldr	r3, [pc, #112]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800515a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800515e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fb ff9e 	bl	80010b8 <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005180:	f7fb ff9a 	bl	80010b8 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e091      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005192:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x71c>
 800519e:	e089      	b.n	80052b4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a08      	ldr	r2, [pc, #32]	; (80051c8 <HAL_RCC_OscConfig+0x764>)
 80051a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fb ff84 	bl	80010b8 <HAL_GetTick>
 80051b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051b2:	e00f      	b.n	80051d4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fb ff80 	bl	80010b8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d908      	bls.n	80051d4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e077      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
 80051c6:	bf00      	nop
 80051c8:	58024400 	.word	0x58024400
 80051cc:	fffffc0c 	.word	0xfffffc0c
 80051d0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d4:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e9      	bne.n	80051b4 <HAL_RCC_OscConfig+0x750>
 80051e0:	e068      	b.n	80052b4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051e8:	4b35      	ldr	r3, [pc, #212]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d031      	beq.n	800525a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f003 0203 	and.w	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d12a      	bne.n	800525a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d122      	bne.n	800525a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005220:	429a      	cmp	r2, r3
 8005222:	d11a      	bne.n	800525a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	0a5b      	lsrs	r3, r3, #9
 8005228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005230:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d111      	bne.n	800525a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d108      	bne.n	800525a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	0e1b      	lsrs	r3, r3, #24
 800524c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d001      	beq.n	800525e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e02b      	b.n	80052b6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800525e:	4b18      	ldr	r3, [pc, #96]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	08db      	lsrs	r3, r3, #3
 8005264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005268:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	d01f      	beq.n	80052b4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005274:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005280:	f7fb ff1a 	bl	80010b8 <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005286:	bf00      	nop
 8005288:	f7fb ff16 	bl	80010b8 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	4293      	cmp	r3, r2
 8005292:	d0f9      	beq.n	8005288 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005294:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 8005296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_RCC_OscConfig+0x860>)
 800529a:	4013      	ands	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052a0:	00d2      	lsls	r2, r2, #3
 80052a2:	4907      	ldr	r1, [pc, #28]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <HAL_RCC_OscConfig+0x85c>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3730      	adds	r7, #48	; 0x30
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	58024400 	.word	0x58024400
 80052c4:	ffff0007 	.word	0xffff0007

080052c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e19c      	b.n	8005616 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052dc:	4b8a      	ldr	r3, [pc, #552]	; (8005508 <HAL_RCC_ClockConfig+0x240>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d910      	bls.n	800530c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b87      	ldr	r3, [pc, #540]	; (8005508 <HAL_RCC_ClockConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 020f 	bic.w	r2, r3, #15
 80052f2:	4985      	ldr	r1, [pc, #532]	; (8005508 <HAL_RCC_ClockConfig+0x240>)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fa:	4b83      	ldr	r3, [pc, #524]	; (8005508 <HAL_RCC_ClockConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e184      	b.n	8005616 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d010      	beq.n	800533a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	4b7b      	ldr	r3, [pc, #492]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005324:	429a      	cmp	r2, r3
 8005326:	d908      	bls.n	800533a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005328:	4b78      	ldr	r3, [pc, #480]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	4975      	ldr	r1, [pc, #468]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 8005336:	4313      	orrs	r3, r2
 8005338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	4b70      	ldr	r3, [pc, #448]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005352:	429a      	cmp	r2, r3
 8005354:	d908      	bls.n	8005368 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005356:	4b6d      	ldr	r3, [pc, #436]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	496a      	ldr	r1, [pc, #424]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 8005364:	4313      	orrs	r3, r2
 8005366:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	4b64      	ldr	r3, [pc, #400]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005380:	429a      	cmp	r2, r3
 8005382:	d908      	bls.n	8005396 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005384:	4b61      	ldr	r3, [pc, #388]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	495e      	ldr	r1, [pc, #376]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 8005392:	4313      	orrs	r3, r2
 8005394:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d010      	beq.n	80053c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	4b59      	ldr	r3, [pc, #356]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d908      	bls.n	80053c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053b2:	4b56      	ldr	r3, [pc, #344]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4953      	ldr	r1, [pc, #332]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d010      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	4b4d      	ldr	r3, [pc, #308]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	429a      	cmp	r2, r3
 80053de:	d908      	bls.n	80053f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e0:	4b4a      	ldr	r3, [pc, #296]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f023 020f 	bic.w	r2, r3, #15
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4947      	ldr	r1, [pc, #284]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d055      	beq.n	80054aa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053fe:	4b43      	ldr	r3, [pc, #268]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4940      	ldr	r1, [pc, #256]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800540c:	4313      	orrs	r3, r2
 800540e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d107      	bne.n	8005428 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005418:	4b3c      	ldr	r3, [pc, #240]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d121      	bne.n	8005468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0f6      	b.n	8005616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d107      	bne.n	8005440 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005430:	4b36      	ldr	r3, [pc, #216]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d115      	bne.n	8005468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0ea      	b.n	8005616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d107      	bne.n	8005458 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005448:	4b30      	ldr	r3, [pc, #192]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0de      	b.n	8005616 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005458:	4b2c      	ldr	r3, [pc, #176]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0d6      	b.n	8005616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005468:	4b28      	ldr	r3, [pc, #160]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f023 0207 	bic.w	r2, r3, #7
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4925      	ldr	r1, [pc, #148]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 8005476:	4313      	orrs	r3, r2
 8005478:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547a:	f7fb fe1d 	bl	80010b8 <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005480:	e00a      	b.n	8005498 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005482:	f7fb fe19 	bl	80010b8 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e0be      	b.n	8005616 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005498:	4b1c      	ldr	r3, [pc, #112]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d1eb      	bne.n	8005482 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d010      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d208      	bcs.n	80054d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f023 020f 	bic.w	r2, r3, #15
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	490e      	ldr	r1, [pc, #56]	; (800550c <HAL_RCC_ClockConfig+0x244>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_ClockConfig+0x240>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d214      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_RCC_ClockConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 020f 	bic.w	r2, r3, #15
 80054ee:	4906      	ldr	r1, [pc, #24]	; (8005508 <HAL_RCC_ClockConfig+0x240>)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b04      	ldr	r3, [pc, #16]	; (8005508 <HAL_RCC_ClockConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d005      	beq.n	8005510 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e086      	b.n	8005616 <HAL_RCC_ClockConfig+0x34e>
 8005508:	52002000 	.word	0x52002000
 800550c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d010      	beq.n	800553e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	4b3f      	ldr	r3, [pc, #252]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005528:	429a      	cmp	r2, r3
 800552a:	d208      	bcs.n	800553e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800552c:	4b3c      	ldr	r3, [pc, #240]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	4939      	ldr	r1, [pc, #228]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 800553a:	4313      	orrs	r3, r2
 800553c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d010      	beq.n	800556c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	4b34      	ldr	r3, [pc, #208]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005556:	429a      	cmp	r2, r3
 8005558:	d208      	bcs.n	800556c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800555a:	4b31      	ldr	r3, [pc, #196]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	492e      	ldr	r1, [pc, #184]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 8005568:	4313      	orrs	r3, r2
 800556a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d010      	beq.n	800559a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	4b28      	ldr	r3, [pc, #160]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005584:	429a      	cmp	r2, r3
 8005586:	d208      	bcs.n	800559a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005588:	4b25      	ldr	r3, [pc, #148]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	4922      	ldr	r1, [pc, #136]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 8005596:	4313      	orrs	r3, r2
 8005598:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d010      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d208      	bcs.n	80055c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4917      	ldr	r1, [pc, #92]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80055c8:	f000 f89e 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b14      	ldr	r3, [pc, #80]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	4912      	ldr	r1, [pc, #72]	; (8005624 <HAL_RCC_ClockConfig+0x35c>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
 80055e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_RCC_ClockConfig+0x358>)
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	4a0d      	ldr	r2, [pc, #52]	; (8005624 <HAL_RCC_ClockConfig+0x35c>)
 80055f0:	5cd3      	ldrb	r3, [r2, r3]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
 80055fc:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <HAL_RCC_ClockConfig+0x360>)
 80055fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <HAL_RCC_ClockConfig+0x364>)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <HAL_RCC_ClockConfig+0x368>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7fb fd0a 	bl	8001024 <HAL_InitTick>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	58024400 	.word	0x58024400
 8005624:	08009d38 	.word	0x08009d38
 8005628:	24000004 	.word	0x24000004
 800562c:	24000000 	.word	0x24000000
 8005630:	24000008 	.word	0x24000008

08005634 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d12a      	bne.n	800569c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005646:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 8005648:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800564c:	4a2b      	ldr	r2, [pc, #172]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005656:	4b29      	ldr	r3, [pc, #164]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 8005658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800566a:	2302      	movs	r3, #2
 800566c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800566e:	2303      	movs	r3, #3
 8005670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005676:	2300      	movs	r3, #0
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800567a:	f107 031c 	add.w	r3, r7, #28
 800567e:	4619      	mov	r1, r3
 8005680:	481f      	ldr	r0, [pc, #124]	; (8005700 <HAL_RCC_MCOConfig+0xcc>)
 8005682:	f7fe fedb 	bl	800443c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005686:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	430b      	orrs	r3, r1
 8005694:	4919      	ldr	r1, [pc, #100]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 8005696:	4313      	orrs	r3, r2
 8005698:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800569a:	e02a      	b.n	80056f2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800569c:	4b17      	ldr	r3, [pc, #92]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 800569e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 80056a4:	f043 0304 	orr.w	r3, r3, #4
 80056a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80056ac:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 80056ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80056ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c0:	2302      	movs	r3, #2
 80056c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056c4:	2303      	movs	r3, #3
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80056cc:	2300      	movs	r3, #0
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80056d0:	f107 031c 	add.w	r3, r7, #28
 80056d4:	4619      	mov	r1, r3
 80056d6:	480b      	ldr	r0, [pc, #44]	; (8005704 <HAL_RCC_MCOConfig+0xd0>)
 80056d8:	f7fe feb0 	bl	800443c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80056dc:	4b07      	ldr	r3, [pc, #28]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	01d9      	lsls	r1, r3, #7
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	430b      	orrs	r3, r1
 80056ec:	4903      	ldr	r1, [pc, #12]	; (80056fc <HAL_RCC_MCOConfig+0xc8>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
}
 80056f2:	bf00      	nop
 80056f4:	3730      	adds	r7, #48	; 0x30
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
 8005700:	58020000 	.word	0x58020000
 8005704:	58020800 	.word	0x58020800

08005708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005708:	b480      	push	{r7}
 800570a:	b089      	sub	sp, #36	; 0x24
 800570c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800570e:	4bb3      	ldr	r3, [pc, #716]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005716:	2b18      	cmp	r3, #24
 8005718:	f200 8155 	bhi.w	80059c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <HAL_RCC_GetSysClockFreq+0x1c>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005789 	.word	0x08005789
 8005728:	080059c7 	.word	0x080059c7
 800572c:	080059c7 	.word	0x080059c7
 8005730:	080059c7 	.word	0x080059c7
 8005734:	080059c7 	.word	0x080059c7
 8005738:	080059c7 	.word	0x080059c7
 800573c:	080059c7 	.word	0x080059c7
 8005740:	080059c7 	.word	0x080059c7
 8005744:	080057af 	.word	0x080057af
 8005748:	080059c7 	.word	0x080059c7
 800574c:	080059c7 	.word	0x080059c7
 8005750:	080059c7 	.word	0x080059c7
 8005754:	080059c7 	.word	0x080059c7
 8005758:	080059c7 	.word	0x080059c7
 800575c:	080059c7 	.word	0x080059c7
 8005760:	080059c7 	.word	0x080059c7
 8005764:	080057b5 	.word	0x080057b5
 8005768:	080059c7 	.word	0x080059c7
 800576c:	080059c7 	.word	0x080059c7
 8005770:	080059c7 	.word	0x080059c7
 8005774:	080059c7 	.word	0x080059c7
 8005778:	080059c7 	.word	0x080059c7
 800577c:	080059c7 	.word	0x080059c7
 8005780:	080059c7 	.word	0x080059c7
 8005784:	080057bb 	.word	0x080057bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005788:	4b94      	ldr	r3, [pc, #592]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005794:	4b91      	ldr	r3, [pc, #580]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	08db      	lsrs	r3, r3, #3
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	4a90      	ldr	r2, [pc, #576]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
 80057a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80057a6:	e111      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057a8:	4b8d      	ldr	r3, [pc, #564]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057aa:	61bb      	str	r3, [r7, #24]
      break;
 80057ac:	e10e      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057ae:	4b8d      	ldr	r3, [pc, #564]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057b0:	61bb      	str	r3, [r7, #24]
      break;
 80057b2:	e10b      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057b4:	4b8c      	ldr	r3, [pc, #560]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057b6:	61bb      	str	r3, [r7, #24]
      break;
 80057b8:	e108      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ba:	4b88      	ldr	r3, [pc, #544]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057c4:	4b85      	ldr	r3, [pc, #532]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057d0:	4b82      	ldr	r3, [pc, #520]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057da:	4b80      	ldr	r3, [pc, #512]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	08db      	lsrs	r3, r3, #3
 80057e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80e1 	beq.w	80059c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b02      	cmp	r3, #2
 8005802:	f000 8083 	beq.w	800590c <HAL_RCC_GetSysClockFreq+0x204>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b02      	cmp	r3, #2
 800580a:	f200 80a1 	bhi.w	8005950 <HAL_RCC_GetSysClockFreq+0x248>
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x114>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d056      	beq.n	80058c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800581a:	e099      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800581c:	4b6f      	ldr	r3, [pc, #444]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d02d      	beq.n	8005884 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005828:	4b6c      	ldr	r3, [pc, #432]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	08db      	lsrs	r3, r3, #3
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	4a6b      	ldr	r2, [pc, #428]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	ee07 3a90 	vmov	s15, r3
 8005840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b62      	ldr	r3, [pc, #392]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a02 	vldr	s12, [r7, #8]
 8005866:	eddf 5a61 	vldr	s11, [pc, #388]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005882:	e087      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80059f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b51      	ldr	r3, [pc, #324]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058c6:	e065      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80059f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058da:	4b40      	ldr	r3, [pc, #256]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800590a:	e043      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	eddf 6a38 	vldr	s13, [pc, #224]	; 80059f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591e:	4b2f      	ldr	r3, [pc, #188]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005932:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800594e:	e021      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80059f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800595e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005962:	4b1e      	ldr	r3, [pc, #120]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005972:	ed97 6a02 	vldr	s12, [r7, #8]
 8005976:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800597a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005992:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005994:	4b11      	ldr	r3, [pc, #68]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	0a5b      	lsrs	r3, r3, #9
 800599a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800599e:	3301      	adds	r3, #1
 80059a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80059b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b8:	ee17 3a90 	vmov	r3, s15
 80059bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059be:	e005      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]
      break;
 80059c4:	e002      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059c6:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059c8:	61bb      	str	r3, [r7, #24]
      break;
 80059ca:	bf00      	nop
  }

  return sysclockfreq;
 80059cc:	69bb      	ldr	r3, [r7, #24]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3724      	adds	r7, #36	; 0x24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400
 80059e0:	03d09000 	.word	0x03d09000
 80059e4:	003d0900 	.word	0x003d0900
 80059e8:	007a1200 	.word	0x007a1200
 80059ec:	46000000 	.word	0x46000000
 80059f0:	4c742400 	.word	0x4c742400
 80059f4:	4a742400 	.word	0x4a742400
 80059f8:	4af42400 	.word	0x4af42400

080059fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005a02:	f7ff fe81 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <HAL_RCC_GetHCLKFreq+0x50>)
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	490f      	ldr	r1, [pc, #60]	; (8005a50 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a14:	5ccb      	ldrb	r3, [r1, r3]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005a20:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCC_GetHCLKFreq+0x50>)
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a2a:	5cd3      	ldrb	r3, [r2, r3]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	4a07      	ldr	r2, [pc, #28]	; (8005a54 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a3a:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a42:	681b      	ldr	r3, [r3, #0]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	08009d38 	.word	0x08009d38
 8005a54:	24000004 	.word	0x24000004
 8005a58:	24000000 	.word	0x24000000

08005a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005a60:	f7ff ffcc 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	091b      	lsrs	r3, r3, #4
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4904      	ldr	r1, [pc, #16]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	58024400 	.word	0x58024400
 8005a84:	08009d38 	.word	0x08009d38

08005a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005a8c:	f7ff ffb6 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4904      	ldr	r1, [pc, #16]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	08009d38 	.word	0x08009d38

08005ab4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab8:	b0c8      	sub	sp, #288	; 0x120
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005ad8:	2500      	movs	r5, #0
 8005ada:	ea54 0305 	orrs.w	r3, r4, r5
 8005ade:	d049      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005aea:	d02f      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005af0:	d828      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af6:	d01a      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005afc:	d822      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b06:	d007      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b08:	e01c      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0a:	4ba7      	ldr	r3, [pc, #668]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	4aa6      	ldr	r2, [pc, #664]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b16:	e01a      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	2102      	movs	r1, #2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fc99 	bl	8007458 <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b2c:	e00f      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b32:	3328      	adds	r3, #40	; 0x28
 8005b34:	2102      	movs	r1, #2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 fd40 	bl	80075bc <RCCEx_PLL3_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b42:	e004      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b4a:	e000      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b56:	4b94      	ldr	r3, [pc, #592]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b64:	4a90      	ldr	r2, [pc, #576]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6513      	str	r3, [r2, #80]	; 0x50
 8005b6a:	e003      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005b80:	f04f 0900 	mov.w	r9, #0
 8005b84:	ea58 0309 	orrs.w	r3, r8, r9
 8005b88:	d047      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d82a      	bhi.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b94:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bb1 	.word	0x08005bb1
 8005ba0:	08005bbf 	.word	0x08005bbf
 8005ba4:	08005bd5 	.word	0x08005bd5
 8005ba8:	08005bf3 	.word	0x08005bf3
 8005bac:	08005bf3 	.word	0x08005bf3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb0:	4b7d      	ldr	r3, [pc, #500]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a7c      	ldr	r2, [pc, #496]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bbc:	e01a      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fc46 	bl	8007458 <RCCEx_PLL2_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bd2:	e00f      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd8:	3328      	adds	r3, #40	; 0x28
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 fced 	bl	80075bc <RCCEx_PLL3_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be8:	e004      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bfc:	4b6a      	ldr	r3, [pc, #424]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	f023 0107 	bic.w	r1, r3, #7
 8005c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0a:	4a67      	ldr	r2, [pc, #412]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6513      	str	r3, [r2, #80]	; 0x50
 8005c10:	e003      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005c26:	f04f 0b00 	mov.w	fp, #0
 8005c2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c2e:	d054      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005c3a:	d036      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005c3c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005c40:	d82f      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d032      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4c:	d829      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c50:	d02f      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005c52:	2bc0      	cmp	r3, #192	; 0xc0
 8005c54:	d825      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d018      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d821      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d007      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005c66:	e01c      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b4f      	ldr	r3, [pc, #316]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	4a4e      	ldr	r2, [pc, #312]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005c74:	e01e      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 fbea 	bl	8007458 <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005c8a:	e013      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c90:	3328      	adds	r3, #40	; 0x28
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fc91 	bl	80075bc <RCCEx_PLL3_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005cbc:	4b3a      	ldr	r3, [pc, #232]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	4a37      	ldr	r2, [pc, #220]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6513      	str	r3, [r2, #80]	; 0x50
 8005cd0:	e003      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005ce6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cf0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d05c      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005d04:	d03b      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d06:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005d0a:	d834      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d10:	d037      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d16:	d82e      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005d18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d1c:	d033      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d22:	d828      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d28:	d01a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2e:	d822      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d38:	d007      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005d3a:	e01c      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005d48:	e01e      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4e:	3308      	adds	r3, #8
 8005d50:	2100      	movs	r1, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 fb80 	bl	8007458 <RCCEx_PLL2_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005d5e:	e013      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d64:	3328      	adds	r3, #40	; 0x28
 8005d66:	2100      	movs	r1, #0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fc27 	bl	80075bc <RCCEx_PLL3_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005d74:	e008      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d7c:	e004      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10d      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	4a02      	ldr	r2, [pc, #8]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6513      	str	r3, [r2, #80]	; 0x50
 8005da4:	e006      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005da6:	bf00      	nop
 8005da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005db0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005dca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	d03a      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dda:	2b30      	cmp	r3, #48	; 0x30
 8005ddc:	d01f      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005dde:	2b30      	cmp	r3, #48	; 0x30
 8005de0:	d819      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d00c      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d815      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d019      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d111      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df2:	4bae      	ldr	r3, [pc, #696]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4aad      	ldr	r2, [pc, #692]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005dfe:	e011      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e04:	3308      	adds	r3, #8
 8005e06:	2102      	movs	r1, #2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fb25 	bl	8007458 <RCCEx_PLL2_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e14:	e006      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e1c:	e002      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e2c:	4b9f      	ldr	r3, [pc, #636]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e30:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	4a9c      	ldr	r2, [pc, #624]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e40:	e003      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005e56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d051      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e74:	d035      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e7a:	d82e      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e80:	d031      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005e82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e86:	d828      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8c:	d01a      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e92:	d822      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9c:	d007      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005e9e:	e01c      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea0:	4b82      	ldr	r3, [pc, #520]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	4a81      	ldr	r2, [pc, #516]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eac:	e01c      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 face 	bl	8007458 <RCCEx_PLL2_Config>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ec2:	e011      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec8:	3328      	adds	r3, #40	; 0x28
 8005eca:	2100      	movs	r1, #0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 fb75 	bl	80075bc <RCCEx_PLL3_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ed8:	e006      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ee0:	e002      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005ee2:	bf00      	nop
 8005ee4:	e000      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ef0:	4b6e      	ldr	r3, [pc, #440]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005efe:	4a6b      	ldr	r2, [pc, #428]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6513      	str	r3, [r2, #80]	; 0x50
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	d053      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f38:	d033      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f3e:	d82c      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f44:	d02f      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005f46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f4a:	d826      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f50:	d02b      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f56:	d820      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f5c:	d012      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f62:	d81a      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d022      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d115      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f72:	3308      	adds	r3, #8
 8005f74:	2101      	movs	r1, #1
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 fa6e 	bl	8007458 <RCCEx_PLL2_Config>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f82:	e015      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f88:	3328      	adds	r3, #40	; 0x28
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fb15 	bl	80075bc <RCCEx_PLL3_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005fa0:	e006      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005fa2:	bf00      	nop
 8005fa4:	e004      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005fa6:	bf00      	nop
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005faa:	bf00      	nop
 8005fac:	e000      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fb8:	4b3c      	ldr	r3, [pc, #240]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc6:	4a39      	ldr	r2, [pc, #228]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	6513      	str	r3, [r2, #80]	; 0x50
 8005fcc:	e003      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005fe2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	d060      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ffa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ffe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006002:	d039      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006004:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006008:	d832      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800600a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800600e:	d035      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006014:	d82c      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d031      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d826      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006022:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006026:	d02d      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006028:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800602c:	d820      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800602e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006032:	d012      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006038:	d81a      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d024      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800603e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006042:	d115      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006048:	3308      	adds	r3, #8
 800604a:	2101      	movs	r1, #1
 800604c:	4618      	mov	r0, r3
 800604e:	f001 fa03 	bl	8007458 <RCCEx_PLL2_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006058:	e017      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800605a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605e:	3328      	adds	r3, #40	; 0x28
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f001 faaa 	bl	80075bc <RCCEx_PLL3_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800606e:	e00c      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006076:	e008      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006078:	bf00      	nop
 800607a:	e006      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800607c:	bf00      	nop
 800607e:	e004      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006080:	bf00      	nop
 8006082:	e002      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006084:	bf00      	nop
 8006086:	e000      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800608a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10e      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006096:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800609a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060a2:	4a02      	ldr	r2, [pc, #8]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060a4:	430b      	orrs	r3, r1
 80060a6:	6593      	str	r3, [r2, #88]	; 0x58
 80060a8:	e006      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80060aa:	bf00      	nop
 80060ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80060c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060c8:	2300      	movs	r3, #0
 80060ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060d2:	460b      	mov	r3, r1
 80060d4:	4313      	orrs	r3, r2
 80060d6:	d037      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060e2:	d00e      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060e8:	d816      	bhi.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d018      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060f2:	d111      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f4:	4bc4      	ldr	r3, [pc, #784]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4ac3      	ldr	r2, [pc, #780]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006100:	e00f      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006106:	3308      	adds	r3, #8
 8006108:	2101      	movs	r1, #1
 800610a:	4618      	mov	r0, r3
 800610c:	f001 f9a4 	bl	8007458 <RCCEx_PLL2_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006116:	e004      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800611e:	e000      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006122:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800612a:	4bb7      	ldr	r3, [pc, #732]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800612c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006138:	4ab3      	ldr	r2, [pc, #716]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800613a:	430b      	orrs	r3, r1
 800613c:	6513      	str	r3, [r2, #80]	; 0x50
 800613e:	e003      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006144:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800615e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d039      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616e:	2b03      	cmp	r3, #3
 8006170:	d81c      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061b5 	.word	0x080061b5
 800617c:	08006189 	.word	0x08006189
 8006180:	08006197 	.word	0x08006197
 8006184:	080061b5 	.word	0x080061b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006188:	4b9f      	ldr	r3, [pc, #636]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	4a9e      	ldr	r2, [pc, #632]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800618e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006194:	e00f      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800619a:	3308      	adds	r3, #8
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 f95a 	bl	8007458 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061aa:	e004      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061b2:	e000      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80061b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061be:	4b92      	ldr	r3, [pc, #584]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c2:	f023 0103 	bic.w	r1, r3, #3
 80061c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061cc:	4a8e      	ldr	r2, [pc, #568]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ce:	430b      	orrs	r3, r1
 80061d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061d2:	e003      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80061e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f000 8099 	beq.w	8006330 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061fe:	4b83      	ldr	r3, [pc, #524]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a82      	ldr	r2, [pc, #520]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006208:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800620a:	f7fa ff55 	bl	80010b8 <HAL_GetTick>
 800620e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006212:	e00b      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006214:	f7fa ff50 	bl	80010b8 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b64      	cmp	r3, #100	; 0x64
 8006222:	d903      	bls.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800622a:	e005      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800622c:	4b77      	ldr	r3, [pc, #476]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0ed      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006238:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800623c:	2b00      	cmp	r3, #0
 800623e:	d173      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006240:	4b71      	ldr	r3, [pc, #452]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006248:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800624c:	4053      	eors	r3, r2
 800624e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006252:	2b00      	cmp	r3, #0
 8006254:	d015      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006256:	4b6c      	ldr	r3, [pc, #432]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006262:	4b69      	ldr	r3, [pc, #420]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	4a68      	ldr	r2, [pc, #416]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800626e:	4b66      	ldr	r3, [pc, #408]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a65      	ldr	r2, [pc, #404]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800627a:	4a63      	ldr	r2, [pc, #396]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006280:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800628a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628e:	d118      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fa ff12 	bl	80010b8 <HAL_GetTick>
 8006294:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006298:	e00d      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fa ff0d 	bl	80010b8 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80062a4:	1ad2      	subs	r2, r2, r3
 80062a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d903      	bls.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80062b4:	e005      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062b6:	4b54      	ldr	r3, [pc, #336]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0eb      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d129      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062da:	d10e      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062dc:	4b4a      	ldr	r3, [pc, #296]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80062e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062ec:	091a      	lsrs	r2, r3, #4
 80062ee:	4b48      	ldr	r3, [pc, #288]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	4a45      	ldr	r2, [pc, #276]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f4:	430b      	orrs	r3, r1
 80062f6:	6113      	str	r3, [r2, #16]
 80062f8:	e005      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062fa:	4b43      	ldr	r3, [pc, #268]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	4a42      	ldr	r2, [pc, #264]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006300:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006304:	6113      	str	r3, [r2, #16]
 8006306:	4b40      	ldr	r3, [pc, #256]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006308:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800630a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800630e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006316:	4a3c      	ldr	r2, [pc, #240]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006318:	430b      	orrs	r3, r1
 800631a:	6713      	str	r3, [r2, #112]	; 0x70
 800631c:	e008      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800631e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006322:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8006326:	e003      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800632c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f002 0301 	and.w	r3, r2, #1
 800633c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006346:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800634a:	460b      	mov	r3, r1
 800634c:	4313      	orrs	r3, r2
 800634e:	f000 8090 	beq.w	8006472 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635a:	2b28      	cmp	r3, #40	; 0x28
 800635c:	d870      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006449 	.word	0x08006449
 8006368:	08006441 	.word	0x08006441
 800636c:	08006441 	.word	0x08006441
 8006370:	08006441 	.word	0x08006441
 8006374:	08006441 	.word	0x08006441
 8006378:	08006441 	.word	0x08006441
 800637c:	08006441 	.word	0x08006441
 8006380:	08006441 	.word	0x08006441
 8006384:	08006415 	.word	0x08006415
 8006388:	08006441 	.word	0x08006441
 800638c:	08006441 	.word	0x08006441
 8006390:	08006441 	.word	0x08006441
 8006394:	08006441 	.word	0x08006441
 8006398:	08006441 	.word	0x08006441
 800639c:	08006441 	.word	0x08006441
 80063a0:	08006441 	.word	0x08006441
 80063a4:	0800642b 	.word	0x0800642b
 80063a8:	08006441 	.word	0x08006441
 80063ac:	08006441 	.word	0x08006441
 80063b0:	08006441 	.word	0x08006441
 80063b4:	08006441 	.word	0x08006441
 80063b8:	08006441 	.word	0x08006441
 80063bc:	08006441 	.word	0x08006441
 80063c0:	08006441 	.word	0x08006441
 80063c4:	08006449 	.word	0x08006449
 80063c8:	08006441 	.word	0x08006441
 80063cc:	08006441 	.word	0x08006441
 80063d0:	08006441 	.word	0x08006441
 80063d4:	08006441 	.word	0x08006441
 80063d8:	08006441 	.word	0x08006441
 80063dc:	08006441 	.word	0x08006441
 80063e0:	08006441 	.word	0x08006441
 80063e4:	08006449 	.word	0x08006449
 80063e8:	08006441 	.word	0x08006441
 80063ec:	08006441 	.word	0x08006441
 80063f0:	08006441 	.word	0x08006441
 80063f4:	08006441 	.word	0x08006441
 80063f8:	08006441 	.word	0x08006441
 80063fc:	08006441 	.word	0x08006441
 8006400:	08006441 	.word	0x08006441
 8006404:	08006449 	.word	0x08006449
 8006408:	58024400 	.word	0x58024400
 800640c:	58024800 	.word	0x58024800
 8006410:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006418:	3308      	adds	r3, #8
 800641a:	2101      	movs	r1, #1
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f81b 	bl	8007458 <RCCEx_PLL2_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006428:	e00f      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800642a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800642e:	3328      	adds	r3, #40	; 0x28
 8006430:	2101      	movs	r1, #1
 8006432:	4618      	mov	r0, r3
 8006434:	f001 f8c2 	bl	80075bc <RCCEx_PLL3_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800643e:	e004      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006446:	e000      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006452:	4bc0      	ldr	r3, [pc, #768]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006456:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800645a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800645e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006462:	4abc      	ldr	r2, [pc, #752]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006464:	430b      	orrs	r3, r1
 8006466:	6553      	str	r3, [r2, #84]	; 0x54
 8006468:	e003      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800646e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f002 0302 	and.w	r3, r2, #2
 800647e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006488:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800648c:	460b      	mov	r3, r1
 800648e:	4313      	orrs	r3, r2
 8006490:	d043      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800649a:	2b05      	cmp	r3, #5
 800649c:	d824      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064f1 	.word	0x080064f1
 80064a8:	080064bd 	.word	0x080064bd
 80064ac:	080064d3 	.word	0x080064d3
 80064b0:	080064f1 	.word	0x080064f1
 80064b4:	080064f1 	.word	0x080064f1
 80064b8:	080064f1 	.word	0x080064f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c0:	3308      	adds	r3, #8
 80064c2:	2101      	movs	r1, #1
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 ffc7 	bl	8007458 <RCCEx_PLL2_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064d0:	e00f      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d6:	3328      	adds	r3, #40	; 0x28
 80064d8:	2101      	movs	r1, #1
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 f86e 	bl	80075bc <RCCEx_PLL3_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064e6:	e004      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80064ee:	e000      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80064f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064fa:	4b96      	ldr	r3, [pc, #600]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	f023 0107 	bic.w	r1, r3, #7
 8006502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800650a:	4a92      	ldr	r2, [pc, #584]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800650c:	430b      	orrs	r3, r1
 800650e:	6553      	str	r3, [r2, #84]	; 0x54
 8006510:	e003      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006516:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f002 0304 	and.w	r3, r2, #4
 8006526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800652a:	2300      	movs	r3, #0
 800652c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006530:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006534:	460b      	mov	r3, r1
 8006536:	4313      	orrs	r3, r2
 8006538:	d043      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800653a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006542:	2b05      	cmp	r3, #5
 8006544:	d824      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	08006599 	.word	0x08006599
 8006550:	08006565 	.word	0x08006565
 8006554:	0800657b 	.word	0x0800657b
 8006558:	08006599 	.word	0x08006599
 800655c:	08006599 	.word	0x08006599
 8006560:	08006599 	.word	0x08006599
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006568:	3308      	adds	r3, #8
 800656a:	2101      	movs	r1, #1
 800656c:	4618      	mov	r0, r3
 800656e:	f000 ff73 	bl	8007458 <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006578:	e00f      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800657a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800657e:	3328      	adds	r3, #40	; 0x28
 8006580:	2101      	movs	r1, #1
 8006582:	4618      	mov	r0, r3
 8006584:	f001 f81a 	bl	80075bc <RCCEx_PLL3_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800658e:	e004      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065a2:	4b6c      	ldr	r3, [pc, #432]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a6:	f023 0107 	bic.w	r1, r3, #7
 80065aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065b2:	4a68      	ldr	r2, [pc, #416]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6593      	str	r3, [r2, #88]	; 0x58
 80065b8:	e003      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f002 0320 	and.w	r3, r2, #32
 80065ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065d2:	2300      	movs	r3, #0
 80065d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065dc:	460b      	mov	r3, r1
 80065de:	4313      	orrs	r3, r2
 80065e0:	d055      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ee:	d033      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065f4:	d82c      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fa:	d02f      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d826      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006602:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006606:	d02b      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006608:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800660c:	d820      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800660e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006612:	d012      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006618:	d81a      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d022      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800661e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006622:	d115      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006628:	3308      	adds	r3, #8
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f000 ff13 	bl	8007458 <RCCEx_PLL2_Config>
 8006632:	4603      	mov	r3, r0
 8006634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006638:	e015      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800663a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663e:	3328      	adds	r3, #40	; 0x28
 8006640:	2102      	movs	r1, #2
 8006642:	4618      	mov	r0, r3
 8006644:	f000 ffba 	bl	80075bc <RCCEx_PLL3_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800664e:	e00a      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006656:	e006      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006658:	bf00      	nop
 800665a:	e004      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800665c:	bf00      	nop
 800665e:	e002      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006666:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800666e:	4b39      	ldr	r3, [pc, #228]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800667a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800667e:	4a35      	ldr	r2, [pc, #212]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006680:	430b      	orrs	r3, r1
 8006682:	6553      	str	r3, [r2, #84]	; 0x54
 8006684:	e003      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006686:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800668a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800668e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800669a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800669e:	2300      	movs	r3, #0
 80066a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4313      	orrs	r3, r2
 80066ac:	d058      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066ba:	d033      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066c0:	d82c      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c6:	d02f      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066cc:	d826      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80066ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d2:	d02b      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d8:	d820      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80066da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066de:	d012      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e4:	d81a      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d022      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80066ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ee:	d115      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f4:	3308      	adds	r3, #8
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fead 	bl	8007458 <RCCEx_PLL2_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006704:	e015      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800670a:	3328      	adds	r3, #40	; 0x28
 800670c:	2102      	movs	r1, #2
 800670e:	4618      	mov	r0, r3
 8006710:	f000 ff54 	bl	80075bc <RCCEx_PLL3_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800671a:	e00a      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006722:	e006      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006724:	bf00      	nop
 8006726:	e004      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006728:	bf00      	nop
 800672a:	e002      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800672c:	bf00      	nop
 800672e:	e000      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006732:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10e      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006746:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800674a:	4a02      	ldr	r2, [pc, #8]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800674c:	430b      	orrs	r3, r1
 800674e:	6593      	str	r3, [r2, #88]	; 0x58
 8006750:	e006      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006752:	bf00      	nop
 8006754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800675c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800676c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006776:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d055      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006788:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800678c:	d033      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800678e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006792:	d82c      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006798:	d02f      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800679a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679e:	d826      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80067a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067a4:	d02b      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80067a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067aa:	d820      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80067ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067b0:	d012      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80067b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067b6:	d81a      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d022      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80067bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c0:	d115      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c6:	3308      	adds	r3, #8
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fe44 	bl	8007458 <RCCEx_PLL2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067d6:	e015      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067dc:	3328      	adds	r3, #40	; 0x28
 80067de:	2102      	movs	r1, #2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 feeb 	bl	80075bc <RCCEx_PLL3_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067ec:	e00a      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80067f6:	bf00      	nop
 80067f8:	e004      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006804:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800680c:	4ba1      	ldr	r3, [pc, #644]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006810:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006818:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800681c:	4a9d      	ldr	r2, [pc, #628]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800681e:	430b      	orrs	r3, r1
 8006820:	6593      	str	r3, [r2, #88]	; 0x58
 8006822:	e003      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006824:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006828:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800682c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f002 0308 	and.w	r3, r2, #8
 8006838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800683c:	2300      	movs	r3, #0
 800683e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006842:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006846:	460b      	mov	r3, r1
 8006848:	4313      	orrs	r3, r2
 800684a:	d01e      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800684c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006858:	d10c      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800685a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685e:	3328      	adds	r3, #40	; 0x28
 8006860:	2102      	movs	r1, #2
 8006862:	4618      	mov	r0, r3
 8006864:	f000 feaa 	bl	80075bc <RCCEx_PLL3_Config>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006874:	4b87      	ldr	r3, [pc, #540]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006878:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800687c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006884:	4a83      	ldr	r2, [pc, #524]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006886:	430b      	orrs	r3, r1
 8006888:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800688a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	f002 0310 	and.w	r3, r2, #16
 8006896:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800689a:	2300      	movs	r3, #0
 800689c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80068a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80068a4:	460b      	mov	r3, r1
 80068a6:	4313      	orrs	r3, r2
 80068a8:	d01e      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b6:	d10c      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068bc:	3328      	adds	r3, #40	; 0x28
 80068be:	2102      	movs	r1, #2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fe7b 	bl	80075bc <RCCEx_PLL3_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068d2:	4b70      	ldr	r3, [pc, #448]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068e2:	4a6c      	ldr	r2, [pc, #432]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80068f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006902:	460b      	mov	r3, r1
 8006904:	4313      	orrs	r3, r2
 8006906:	d03e      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800690c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006914:	d022      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800691a:	d81b      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006924:	d00b      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006926:	e015      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800692c:	3308      	adds	r3, #8
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fd91 	bl	8007458 <RCCEx_PLL2_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800693c:	e00f      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800693e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006942:	3328      	adds	r3, #40	; 0x28
 8006944:	2102      	movs	r1, #2
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fe38 	bl	80075bc <RCCEx_PLL3_Config>
 800694c:	4603      	mov	r3, r0
 800694e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006952:	e004      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800695a:	e000      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800695c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800695e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006966:	4b4b      	ldr	r3, [pc, #300]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800696e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006976:	4a47      	ldr	r2, [pc, #284]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006978:	430b      	orrs	r3, r1
 800697a:	6593      	str	r3, [r2, #88]	; 0x58
 800697c:	e003      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006982:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006992:	67bb      	str	r3, [r7, #120]	; 0x78
 8006994:	2300      	movs	r3, #0
 8006996:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006998:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800699c:	460b      	mov	r3, r1
 800699e:	4313      	orrs	r3, r2
 80069a0:	d03b      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069ae:	d01f      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80069b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069b4:	d818      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80069b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ba:	d003      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80069bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069c0:	d007      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80069c2:	e011      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c4:	4b33      	ldr	r3, [pc, #204]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	4a32      	ldr	r2, [pc, #200]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069d0:	e00f      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d6:	3328      	adds	r3, #40	; 0x28
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fdee 	bl	80075bc <RCCEx_PLL3_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80069e6:	e004      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80069ee:	e000      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80069f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069fa:	4b26      	ldr	r3, [pc, #152]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0a:	4a22      	ldr	r2, [pc, #136]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6553      	str	r3, [r2, #84]	; 0x54
 8006a10:	e003      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006a26:	673b      	str	r3, [r7, #112]	; 0x70
 8006a28:	2300      	movs	r3, #0
 8006a2a:	677b      	str	r3, [r7, #116]	; 0x74
 8006a2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006a30:	460b      	mov	r3, r1
 8006a32:	4313      	orrs	r3, r2
 8006a34:	d034      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d007      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006a46:	e011      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	4a11      	ldr	r2, [pc, #68]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a54:	e00e      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fcfa 	bl	8007458 <RCCEx_PLL2_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a6a:	e003      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10d      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	4a02      	ldr	r2, [pc, #8]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a90:	e006      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006a92:	bf00      	nop
 8006a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aae:	2300      	movs	r3, #0
 8006ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ab2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	d00c      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac0:	3328      	adds	r3, #40	; 0x28
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fd79 	bl	80075bc <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ae8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006aec:	460b      	mov	r3, r1
 8006aee:	4313      	orrs	r3, r2
 8006af0:	d038      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006afe:	d018      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b04:	d811      	bhi.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0a:	d014      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b10:	d80b      	bhi.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d011      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1a:	d106      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b1c:	4bc3      	ldr	r3, [pc, #780]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	4ac2      	ldr	r2, [pc, #776]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b28:	e008      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b30:	e004      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006b32:	bf00      	nop
 8006b34:	e002      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b44:	4bb9      	ldr	r3, [pc, #740]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b54:	4ab5      	ldr	r2, [pc, #724]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b56:	430b      	orrs	r3, r1
 8006b58:	6553      	str	r3, [r2, #84]	; 0x54
 8006b5a:	e003      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b72:	2300      	movs	r3, #0
 8006b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b80:	4baa      	ldr	r3, [pc, #680]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b8e:	4aa7      	ldr	r2, [pc, #668]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b90:	430b      	orrs	r3, r1
 8006b92:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006ba0:	653b      	str	r3, [r7, #80]	; 0x50
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8006ba6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006baa:	460b      	mov	r3, r1
 8006bac:	4313      	orrs	r3, r2
 8006bae:	d009      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bb0:	4b9e      	ldr	r3, [pc, #632]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	4a9b      	ldr	r2, [pc, #620]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006be0:	4b92      	ldr	r3, [pc, #584]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bee:	4a8f      	ldr	r2, [pc, #572]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006c00:	643b      	str	r3, [r7, #64]	; 0x40
 8006c02:	2300      	movs	r3, #0
 8006c04:	647b      	str	r3, [r7, #68]	; 0x44
 8006c06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	d00e      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c10:	4b86      	ldr	r3, [pc, #536]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	4a85      	ldr	r2, [pc, #532]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c1a:	6113      	str	r3, [r2, #16]
 8006c1c:	4b83      	ldr	r3, [pc, #524]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c1e:	6919      	ldr	r1, [r3, #16]
 8006c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c28:	4a80      	ldr	r2, [pc, #512]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d009      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c4a:	4b78      	ldr	r3, [pc, #480]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	4a74      	ldr	r2, [pc, #464]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d00a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c7a:	4b6c      	ldr	r3, [pc, #432]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c8a:	4a68      	ldr	r2, [pc, #416]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	2100      	movs	r1, #0
 8006c9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	d011      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fbcf 	bl	8007458 <RCCEx_PLL2_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ccc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6239      	str	r1, [r7, #32]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	d011      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fbaf 	bl	8007458 <RCCEx_PLL2_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006d00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	2100      	movs	r1, #0
 8006d1a:	61b9      	str	r1, [r7, #24]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d26:	460b      	mov	r3, r1
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	d011      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d30:	3308      	adds	r3, #8
 8006d32:	2102      	movs	r1, #2
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fb8f 	bl	8007458 <RCCEx_PLL2_Config>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006d40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	2100      	movs	r1, #0
 8006d5a:	6139      	str	r1, [r7, #16]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d66:	460b      	mov	r3, r1
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	d011      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d70:	3328      	adds	r3, #40	; 0x28
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fc21 	bl	80075bc <RCCEx_PLL3_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006d80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006da6:	460b      	mov	r3, r1
 8006da8:	4313      	orrs	r3, r2
 8006daa:	d011      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006db0:	3328      	adds	r3, #40	; 0x28
 8006db2:	2101      	movs	r1, #1
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fc01 	bl	80075bc <RCCEx_PLL3_Config>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	6039      	str	r1, [r7, #0]
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	607b      	str	r3, [r7, #4]
 8006de2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006de6:	460b      	mov	r3, r1
 8006de8:	4313      	orrs	r3, r2
 8006dea:	d011      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006df0:	3328      	adds	r3, #40	; 0x28
 8006df2:	2102      	movs	r1, #2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fbe1 	bl	80075bc <RCCEx_PLL3_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006e00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006e10:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e000      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400

08006e30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006e34:	f7fe fde2 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	091b      	lsrs	r3, r3, #4
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	4904      	ldr	r1, [pc, #16]	; (8006e58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	f003 031f 	and.w	r3, r3, #31
 8006e4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	58024400 	.word	0x58024400
 8006e58:	08009d38 	.word	0x08009d38

08006e5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b089      	sub	sp, #36	; 0x24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e64:	4ba1      	ldr	r3, [pc, #644]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e6e:	4b9f      	ldr	r3, [pc, #636]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	0b1b      	lsrs	r3, r3, #12
 8006e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e7a:	4b9c      	ldr	r3, [pc, #624]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e86:	4b99      	ldr	r3, [pc, #612]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8a:	08db      	lsrs	r3, r3, #3
 8006e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8111 	beq.w	80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	f000 8083 	beq.w	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	f200 80a1 	bhi.w	8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d056      	beq.n	8006f74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ec6:	e099      	b.n	8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec8:	4b88      	ldr	r3, [pc, #544]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d02d      	beq.n	8006f30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed4:	4b85      	ldr	r3, [pc, #532]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	08db      	lsrs	r3, r3, #3
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	4a84      	ldr	r2, [pc, #528]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efe:	4b7b      	ldr	r3, [pc, #492]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f12:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f2e:	e087      	b.n	8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f42:	4b6a      	ldr	r3, [pc, #424]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f56:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f72:	e065      	b.n	8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f86:	4b59      	ldr	r3, [pc, #356]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb6:	e043      	b.n	8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fca:	4b48      	ldr	r3, [pc, #288]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fde:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ffa:	e021      	b.n	8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007006:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800700a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700e:	4b37      	ldr	r3, [pc, #220]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007022:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007040:	4b2a      	ldr	r3, [pc, #168]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	0a5b      	lsrs	r3, r3, #9
 8007046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800705a:	edd7 6a07 	vldr	s13, [r7, #28]
 800705e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007066:	ee17 2a90 	vmov	r2, s15
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800706e:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007084:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007088:	edd7 6a07 	vldr	s13, [r7, #28]
 800708c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007094:	ee17 2a90 	vmov	r2, s15
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800709c:	4b13      	ldr	r3, [pc, #76]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	0e1b      	lsrs	r3, r3, #24
 80070a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c2:	ee17 2a90 	vmov	r2, s15
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070ca:	e008      	b.n	80070de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
}
 80070de:	bf00      	nop
 80070e0:	3724      	adds	r7, #36	; 0x24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	58024400 	.word	0x58024400
 80070f0:	03d09000 	.word	0x03d09000
 80070f4:	46000000 	.word	0x46000000
 80070f8:	4c742400 	.word	0x4c742400
 80070fc:	4a742400 	.word	0x4a742400
 8007100:	4af42400 	.word	0x4af42400

08007104 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007104:	b480      	push	{r7}
 8007106:	b089      	sub	sp, #36	; 0x24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800710c:	4ba1      	ldr	r3, [pc, #644]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007116:	4b9f      	ldr	r3, [pc, #636]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	0d1b      	lsrs	r3, r3, #20
 800711c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007120:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007122:	4b9c      	ldr	r3, [pc, #624]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	0a1b      	lsrs	r3, r3, #8
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800712e:	4b99      	ldr	r3, [pc, #612]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	08db      	lsrs	r3, r3, #3
 8007134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8111 	beq.w	8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b02      	cmp	r3, #2
 8007156:	f000 8083 	beq.w	8007260 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b02      	cmp	r3, #2
 800715e:	f200 80a1 	bhi.w	80072a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d056      	beq.n	800721c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800716e:	e099      	b.n	80072a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007170:	4b88      	ldr	r3, [pc, #544]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d02d      	beq.n	80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800717c:	4b85      	ldr	r3, [pc, #532]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	4a84      	ldr	r2, [pc, #528]	; (8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
 800718c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	4b7b      	ldr	r3, [pc, #492]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071d6:	e087      	b.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ea:	4b6a      	ldr	r3, [pc, #424]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800721a:	e065      	b.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007226:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800722a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722e:	4b59      	ldr	r3, [pc, #356]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007242:	eddf 5a56 	vldr	s11, [pc, #344]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725e:	e043      	b.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	4b48      	ldr	r3, [pc, #288]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a03 	vldr	s12, [r7, #12]
 8007286:	eddf 5a45 	vldr	s11, [pc, #276]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a2:	e021      	b.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b6:	4b37      	ldr	r3, [pc, #220]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072e8:	4b2a      	ldr	r3, [pc, #168]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	0a5b      	lsrs	r3, r3, #9
 80072ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007302:	edd7 6a07 	vldr	s13, [r7, #28]
 8007306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730e:	ee17 2a90 	vmov	r2, s15
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007316:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007330:	edd7 6a07 	vldr	s13, [r7, #28]
 8007334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733c:	ee17 2a90 	vmov	r2, s15
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007344:	4b13      	ldr	r3, [pc, #76]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	0e1b      	lsrs	r3, r3, #24
 800734a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800735a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736a:	ee17 2a90 	vmov	r2, s15
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007372:	e008      	b.n	8007386 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	609a      	str	r2, [r3, #8]
}
 8007386:	bf00      	nop
 8007388:	3724      	adds	r7, #36	; 0x24
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	58024400 	.word	0x58024400
 8007398:	03d09000 	.word	0x03d09000
 800739c:	46000000 	.word	0x46000000
 80073a0:	4c742400 	.word	0x4c742400
 80073a4:	4a742400 	.word	0x4a742400
 80073a8:	4af42400 	.word	0x4af42400

080073ac <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80073b4:	4b26      	ldr	r3, [pc, #152]	; (8007450 <HAL_RCCEx_CRSConfig+0xa4>)
 80073b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ba:	4a25      	ldr	r2, [pc, #148]	; (8007450 <HAL_RCCEx_CRSConfig+0xa4>)
 80073bc:	f043 0302 	orr.w	r3, r3, #2
 80073c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80073c4:	4b22      	ldr	r3, [pc, #136]	; (8007450 <HAL_RCCEx_CRSConfig+0xa4>)
 80073c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ca:	4a21      	ldr	r2, [pc, #132]	; (8007450 <HAL_RCCEx_CRSConfig+0xa4>)
 80073cc:	f023 0302 	bic.w	r3, r3, #2
 80073d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80073d4:	f7f9 fe7c 	bl	80010d0 <HAL_GetREVID>
 80073d8:	4603      	mov	r3, r0
 80073da:	f241 0203 	movw	r2, #4099	; 0x1003
 80073de:	4293      	cmp	r3, r2
 80073e0:	d80b      	bhi.n	80073fa <HAL_RCCEx_CRSConfig+0x4e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ea:	d106      	bne.n	80073fa <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e008      	b.n	800740c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	041b      	lsls	r3, r3, #16
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007422:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <HAL_RCCEx_CRSConfig+0xa8>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <HAL_RCCEx_CRSConfig+0xa8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	4907      	ldr	r1, [pc, #28]	; (8007454 <HAL_RCCEx_CRSConfig+0xa8>)
 8007438:	4313      	orrs	r3, r2
 800743a:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <HAL_RCCEx_CRSConfig+0xa8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a04      	ldr	r2, [pc, #16]	; (8007454 <HAL_RCCEx_CRSConfig+0xa8>)
 8007442:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007446:	6013      	str	r3, [r2, #0]
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	58024400 	.word	0x58024400
 8007454:	40008400 	.word	0x40008400

08007458 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007466:	4b53      	ldr	r3, [pc, #332]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	2b03      	cmp	r3, #3
 8007470:	d101      	bne.n	8007476 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e099      	b.n	80075aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007476:	4b4f      	ldr	r3, [pc, #316]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a4e      	ldr	r2, [pc, #312]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800747c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007482:	f7f9 fe19 	bl	80010b8 <HAL_GetTick>
 8007486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007488:	e008      	b.n	800749c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800748a:	f7f9 fe15 	bl	80010b8 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d901      	bls.n	800749c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e086      	b.n	80075aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800749c:	4b45      	ldr	r3, [pc, #276]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f0      	bne.n	800748a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074a8:	4b42      	ldr	r3, [pc, #264]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 80074aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	031b      	lsls	r3, r3, #12
 80074b6:	493f      	ldr	r1, [pc, #252]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	628b      	str	r3, [r1, #40]	; 0x28
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	025b      	lsls	r3, r3, #9
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	041b      	lsls	r3, r3, #16
 80074da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	061b      	lsls	r3, r3, #24
 80074e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074ec:	4931      	ldr	r1, [pc, #196]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074f2:	4b30      	ldr	r3, [pc, #192]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	492d      	ldr	r1, [pc, #180]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007500:	4313      	orrs	r3, r2
 8007502:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007504:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	f023 0220 	bic.w	r2, r3, #32
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	4928      	ldr	r1, [pc, #160]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007512:	4313      	orrs	r3, r2
 8007514:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007516:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	4a26      	ldr	r2, [pc, #152]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800751c:	f023 0310 	bic.w	r3, r3, #16
 8007520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007522:	4b24      	ldr	r3, [pc, #144]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007526:	4b24      	ldr	r3, [pc, #144]	; (80075b8 <RCCEx_PLL2_Config+0x160>)
 8007528:	4013      	ands	r3, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	69d2      	ldr	r2, [r2, #28]
 800752e:	00d2      	lsls	r2, r2, #3
 8007530:	4920      	ldr	r1, [pc, #128]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007532:	4313      	orrs	r3, r2
 8007534:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007536:	4b1f      	ldr	r3, [pc, #124]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800753c:	f043 0310 	orr.w	r3, r3, #16
 8007540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007548:	4b1a      	ldr	r3, [pc, #104]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800754e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007552:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007554:	e00f      	b.n	8007576 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d106      	bne.n	800756a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800755c:	4b15      	ldr	r3, [pc, #84]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	4a14      	ldr	r2, [pc, #80]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007566:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007568:	e005      	b.n	8007576 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800756a:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	4a11      	ldr	r2, [pc, #68]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007574:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007576:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a0e      	ldr	r2, [pc, #56]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800757c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007582:	f7f9 fd99 	bl	80010b8 <HAL_GetTick>
 8007586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007588:	e008      	b.n	800759c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800758a:	f7f9 fd95 	bl	80010b8 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d901      	bls.n	800759c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e006      	b.n	80075aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <RCCEx_PLL2_Config+0x15c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0f0      	beq.n	800758a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	58024400 	.word	0x58024400
 80075b8:	ffff0007 	.word	0xffff0007

080075bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ca:	4b53      	ldr	r3, [pc, #332]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d101      	bne.n	80075da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e099      	b.n	800770e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075da:	4b4f      	ldr	r3, [pc, #316]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a4e      	ldr	r2, [pc, #312]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80075e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e6:	f7f9 fd67 	bl	80010b8 <HAL_GetTick>
 80075ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075ec:	e008      	b.n	8007600 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075ee:	f7f9 fd63 	bl	80010b8 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e086      	b.n	800770e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007600:	4b45      	ldr	r3, [pc, #276]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f0      	bne.n	80075ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800760c:	4b42      	ldr	r3, [pc, #264]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	051b      	lsls	r3, r3, #20
 800761a:	493f      	ldr	r1, [pc, #252]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 800761c:	4313      	orrs	r3, r2
 800761e:	628b      	str	r3, [r1, #40]	; 0x28
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	3b01      	subs	r3, #1
 8007626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	3b01      	subs	r3, #1
 8007630:	025b      	lsls	r3, r3, #9
 8007632:	b29b      	uxth	r3, r3
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	3b01      	subs	r3, #1
 800763c:	041b      	lsls	r3, r3, #16
 800763e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	061b      	lsls	r3, r3, #24
 800764c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007650:	4931      	ldr	r1, [pc, #196]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007652:	4313      	orrs	r3, r2
 8007654:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007656:	4b30      	ldr	r3, [pc, #192]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	492d      	ldr	r1, [pc, #180]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007664:	4313      	orrs	r3, r2
 8007666:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007668:	4b2b      	ldr	r3, [pc, #172]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	4928      	ldr	r1, [pc, #160]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800767a:	4b27      	ldr	r3, [pc, #156]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	4a26      	ldr	r2, [pc, #152]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007684:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007686:	4b24      	ldr	r3, [pc, #144]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800768a:	4b24      	ldr	r3, [pc, #144]	; (800771c <RCCEx_PLL3_Config+0x160>)
 800768c:	4013      	ands	r3, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	69d2      	ldr	r2, [r2, #28]
 8007692:	00d2      	lsls	r2, r2, #3
 8007694:	4920      	ldr	r1, [pc, #128]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007696:	4313      	orrs	r3, r2
 8007698:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800769a:	4b1f      	ldr	r3, [pc, #124]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	4a1e      	ldr	r2, [pc, #120]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d106      	bne.n	80076ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076ac:	4b1a      	ldr	r3, [pc, #104]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	4a19      	ldr	r2, [pc, #100]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076b8:	e00f      	b.n	80076da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d106      	bne.n	80076ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076c0:	4b15      	ldr	r3, [pc, #84]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	4a14      	ldr	r2, [pc, #80]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076cc:	e005      	b.n	80076da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076ce:	4b12      	ldr	r3, [pc, #72]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	4a11      	ldr	r2, [pc, #68]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80076da:	4b0f      	ldr	r3, [pc, #60]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a0e      	ldr	r2, [pc, #56]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 80076e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076e6:	f7f9 fce7 	bl	80010b8 <HAL_GetTick>
 80076ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076ec:	e008      	b.n	8007700 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076ee:	f7f9 fce3 	bl	80010b8 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e006      	b.n	800770e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007700:	4b05      	ldr	r3, [pc, #20]	; (8007718 <RCCEx_PLL3_Config+0x15c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0f0      	beq.n	80076ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	58024400 	.word	0x58024400
 800771c:	ffff0007 	.word	0xffff0007

08007720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e049      	b.n	80077c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7f9 fa80 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3304      	adds	r3, #4
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f000 f8a6 	bl	80078b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d001      	beq.n	80077e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e04c      	b.n	8007882 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a26      	ldr	r2, [pc, #152]	; (8007890 <HAL_TIM_Base_Start+0xc0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d022      	beq.n	8007840 <HAL_TIM_Base_Start+0x70>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007802:	d01d      	beq.n	8007840 <HAL_TIM_Base_Start+0x70>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a22      	ldr	r2, [pc, #136]	; (8007894 <HAL_TIM_Base_Start+0xc4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d018      	beq.n	8007840 <HAL_TIM_Base_Start+0x70>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a21      	ldr	r2, [pc, #132]	; (8007898 <HAL_TIM_Base_Start+0xc8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d013      	beq.n	8007840 <HAL_TIM_Base_Start+0x70>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a1f      	ldr	r2, [pc, #124]	; (800789c <HAL_TIM_Base_Start+0xcc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00e      	beq.n	8007840 <HAL_TIM_Base_Start+0x70>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <HAL_TIM_Base_Start+0xd0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d009      	beq.n	8007840 <HAL_TIM_Base_Start+0x70>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1c      	ldr	r2, [pc, #112]	; (80078a4 <HAL_TIM_Base_Start+0xd4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d004      	beq.n	8007840 <HAL_TIM_Base_Start+0x70>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a1b      	ldr	r2, [pc, #108]	; (80078a8 <HAL_TIM_Base_Start+0xd8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d115      	bne.n	800786c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	4b19      	ldr	r3, [pc, #100]	; (80078ac <HAL_TIM_Base_Start+0xdc>)
 8007848:	4013      	ands	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b06      	cmp	r3, #6
 8007850:	d015      	beq.n	800787e <HAL_TIM_Base_Start+0xae>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007858:	d011      	beq.n	800787e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 0201 	orr.w	r2, r2, #1
 8007868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786a:	e008      	b.n	800787e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0201 	orr.w	r2, r2, #1
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	e000      	b.n	8007880 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800787e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	40010000 	.word	0x40010000
 8007894:	40000400 	.word	0x40000400
 8007898:	40000800 	.word	0x40000800
 800789c:	40000c00 	.word	0x40000c00
 80078a0:	40010400 	.word	0x40010400
 80078a4:	40001800 	.word	0x40001800
 80078a8:	40014000 	.word	0x40014000
 80078ac:	00010007 	.word	0x00010007

080078b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a46      	ldr	r2, [pc, #280]	; (80079dc <TIM_Base_SetConfig+0x12c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d00f      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a43      	ldr	r2, [pc, #268]	; (80079e0 <TIM_Base_SetConfig+0x130>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00b      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a42      	ldr	r2, [pc, #264]	; (80079e4 <TIM_Base_SetConfig+0x134>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d007      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a41      	ldr	r2, [pc, #260]	; (80079e8 <TIM_Base_SetConfig+0x138>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a40      	ldr	r2, [pc, #256]	; (80079ec <TIM_Base_SetConfig+0x13c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d108      	bne.n	8007902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a35      	ldr	r2, [pc, #212]	; (80079dc <TIM_Base_SetConfig+0x12c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d01f      	beq.n	800794a <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007910:	d01b      	beq.n	800794a <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a32      	ldr	r2, [pc, #200]	; (80079e0 <TIM_Base_SetConfig+0x130>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d017      	beq.n	800794a <TIM_Base_SetConfig+0x9a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a31      	ldr	r2, [pc, #196]	; (80079e4 <TIM_Base_SetConfig+0x134>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d013      	beq.n	800794a <TIM_Base_SetConfig+0x9a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a30      	ldr	r2, [pc, #192]	; (80079e8 <TIM_Base_SetConfig+0x138>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00f      	beq.n	800794a <TIM_Base_SetConfig+0x9a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a2f      	ldr	r2, [pc, #188]	; (80079ec <TIM_Base_SetConfig+0x13c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00b      	beq.n	800794a <TIM_Base_SetConfig+0x9a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a2e      	ldr	r2, [pc, #184]	; (80079f0 <TIM_Base_SetConfig+0x140>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d007      	beq.n	800794a <TIM_Base_SetConfig+0x9a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a2d      	ldr	r2, [pc, #180]	; (80079f4 <TIM_Base_SetConfig+0x144>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d003      	beq.n	800794a <TIM_Base_SetConfig+0x9a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2c      	ldr	r2, [pc, #176]	; (80079f8 <TIM_Base_SetConfig+0x148>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d108      	bne.n	800795c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a16      	ldr	r2, [pc, #88]	; (80079dc <TIM_Base_SetConfig+0x12c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00f      	beq.n	80079a8 <TIM_Base_SetConfig+0xf8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a18      	ldr	r2, [pc, #96]	; (80079ec <TIM_Base_SetConfig+0x13c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00b      	beq.n	80079a8 <TIM_Base_SetConfig+0xf8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <TIM_Base_SetConfig+0x140>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d007      	beq.n	80079a8 <TIM_Base_SetConfig+0xf8>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a16      	ldr	r2, [pc, #88]	; (80079f4 <TIM_Base_SetConfig+0x144>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_Base_SetConfig+0xf8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <TIM_Base_SetConfig+0x148>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d103      	bne.n	80079b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d105      	bne.n	80079ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f023 0201 	bic.w	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	611a      	str	r2, [r3, #16]
  }
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800
 80079e8:	40000c00 	.word	0x40000c00
 80079ec:	40010400 	.word	0x40010400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800

080079fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e06d      	b.n	8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a30      	ldr	r2, [pc, #192]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a2f      	ldr	r2, [pc, #188]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d108      	bne.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a20      	ldr	r2, [pc, #128]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d022      	beq.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a86:	d01d      	beq.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d018      	beq.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1c      	ldr	r2, [pc, #112]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d013      	beq.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1a      	ldr	r2, [pc, #104]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00e      	beq.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d009      	beq.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d004      	beq.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d10c      	bne.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	40010000 	.word	0x40010000
 8007b00:	40010400 	.word	0x40010400
 8007b04:	40000400 	.word	0x40000400
 8007b08:	40000800 	.word	0x40000800
 8007b0c:	40000c00 	.word	0x40000c00
 8007b10:	40001800 	.word	0x40001800
 8007b14:	40014000 	.word	0x40014000

08007b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e042      	b.n	8007bb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7f9 f8a7 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2224      	movs	r2, #36	; 0x24
 8007b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 fb52 	bl	800920c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fce3 	bl	8008534 <UART_SetConfig>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d101      	bne.n	8007b78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e01b      	b.n	8007bb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fbd1 	bl	8009350 <UART_CheckIdleState>
 8007bae:	4603      	mov	r3, r0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	; 0x28
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d17b      	bne.n	8007cca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <HAL_UART_Transmit+0x26>
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e074      	b.n	8007ccc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2221      	movs	r2, #33	; 0x21
 8007bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bf2:	f7f9 fa61 	bl	80010b8 <HAL_GetTick>
 8007bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	88fa      	ldrh	r2, [r7, #6]
 8007bfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	88fa      	ldrh	r2, [r7, #6]
 8007c04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c10:	d108      	bne.n	8007c24 <HAL_UART_Transmit+0x6c>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	e003      	b.n	8007c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c2c:	e030      	b.n	8007c90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2200      	movs	r2, #0
 8007c36:	2180      	movs	r1, #128	; 0x80
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f001 fc33 	bl	80094a4 <UART_WaitOnFlagUntilTimeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e03d      	b.n	8007ccc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10b      	bne.n	8007c6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	3302      	adds	r3, #2
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	e007      	b.n	8007c7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	781a      	ldrb	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1c8      	bne.n	8007c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2140      	movs	r1, #64	; 0x40
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f001 fbfc 	bl	80094a4 <UART_WaitOnFlagUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e006      	b.n	8007ccc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e000      	b.n	8007ccc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007cca:	2302      	movs	r3, #2
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3720      	adds	r7, #32
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	; 0x28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d137      	bne.n	8007d5c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_UART_Receive_DMA+0x24>
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e030      	b.n	8007d5e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a18      	ldr	r2, [pc, #96]	; (8007d68 <HAL_UART_Receive_DMA+0x94>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d01f      	beq.n	8007d4c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d018      	beq.n	8007d4c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	613b      	str	r3, [r7, #16]
   return(result);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	623b      	str	r3, [r7, #32]
 8007d3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	69f9      	ldr	r1, [r7, #28]
 8007d3e:	6a3a      	ldr	r2, [r7, #32]
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e6      	bne.n	8007d1a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f001 fc14 	bl	8009580 <UART_Start_Receive_DMA>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	e000      	b.n	8007d5e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d5c:	2302      	movs	r3, #2
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3728      	adds	r7, #40	; 0x28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	58000c00 	.word	0x58000c00

08007d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b0ba      	sub	sp, #232	; 0xe8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d96:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11b      	bne.n	8007de0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d015      	beq.n	8007de0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d009      	beq.n	8007de0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8377 	beq.w	80084c4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
      }
      return;
 8007dde:	e371      	b.n	80084c4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8123 	beq.w	8008030 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007dee:	4b8d      	ldr	r3, [pc, #564]	; (8008024 <HAL_UART_IRQHandler+0x2b8>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007dfa:	4b8b      	ldr	r3, [pc, #556]	; (8008028 <HAL_UART_IRQHandler+0x2bc>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8116 	beq.w	8008030 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d011      	beq.n	8007e34 <HAL_UART_IRQHandler+0xc8>
 8007e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2201      	movs	r2, #1
 8007e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2a:	f043 0201 	orr.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d011      	beq.n	8007e64 <HAL_UART_IRQHandler+0xf8>
 8007e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2202      	movs	r2, #2
 8007e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5a:	f043 0204 	orr.w	r2, r3, #4
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d011      	beq.n	8007e94 <HAL_UART_IRQHandler+0x128>
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2204      	movs	r2, #4
 8007e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8a:	f043 0202 	orr.w	r2, r3, #2
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d017      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d105      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007eac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007eb0:	4b5c      	ldr	r3, [pc, #368]	; (8008024 <HAL_UART_IRQHandler+0x2b8>)
 8007eb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec6:	f043 0208 	orr.w	r2, r3, #8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d012      	beq.n	8007f02 <HAL_UART_IRQHandler+0x196>
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00c      	beq.n	8007f02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	f043 0220 	orr.w	r2, r3, #32
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 82dd 	beq.w	80084c8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d013      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d105      	bne.n	8007f32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f56:	2b40      	cmp	r3, #64	; 0x40
 8007f58:	d005      	beq.n	8007f66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d054      	beq.n	8008010 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fbf2 	bl	8009750 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f76:	2b40      	cmp	r3, #64	; 0x40
 8007f78:	d146      	bne.n	8008008 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1d9      	bne.n	8007f7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d017      	beq.n	8008000 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd6:	4a15      	ldr	r2, [pc, #84]	; (800802c <HAL_UART_IRQHandler+0x2c0>)
 8007fd8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fa fc63 	bl	80028ac <HAL_DMA_Abort_IT>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d019      	beq.n	8008020 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffe:	e00f      	b.n	8008020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fa81 	bl	8008508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008006:	e00b      	b.n	8008020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa7d 	bl	8008508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800e:	e007      	b.n	8008020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa79 	bl	8008508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800801e:	e253      	b.n	80084c8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008020:	bf00      	nop
    return;
 8008022:	e251      	b.n	80084c8 <HAL_UART_IRQHandler+0x75c>
 8008024:	10000001 	.word	0x10000001
 8008028:	04000120 	.word	0x04000120
 800802c:	08009a03 	.word	0x08009a03

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008034:	2b01      	cmp	r3, #1
 8008036:	f040 81e7 	bne.w	8008408 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800803a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 81e0 	beq.w	8008408 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 81d9 	beq.w	8008408 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2210      	movs	r2, #16
 800805c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008068:	2b40      	cmp	r3, #64	; 0x40
 800806a:	f040 8151 	bne.w	8008310 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a96      	ldr	r2, [pc, #600]	; (80082d0 <HAL_UART_IRQHandler+0x564>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d068      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a93      	ldr	r2, [pc, #588]	; (80082d4 <HAL_UART_IRQHandler+0x568>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d061      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a91      	ldr	r2, [pc, #580]	; (80082d8 <HAL_UART_IRQHandler+0x56c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d05a      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a8e      	ldr	r2, [pc, #568]	; (80082dc <HAL_UART_IRQHandler+0x570>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d053      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a8c      	ldr	r2, [pc, #560]	; (80082e0 <HAL_UART_IRQHandler+0x574>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d04c      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a89      	ldr	r2, [pc, #548]	; (80082e4 <HAL_UART_IRQHandler+0x578>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d045      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a87      	ldr	r2, [pc, #540]	; (80082e8 <HAL_UART_IRQHandler+0x57c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d03e      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a84      	ldr	r2, [pc, #528]	; (80082ec <HAL_UART_IRQHandler+0x580>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d037      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a82      	ldr	r2, [pc, #520]	; (80082f0 <HAL_UART_IRQHandler+0x584>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d030      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a7f      	ldr	r2, [pc, #508]	; (80082f4 <HAL_UART_IRQHandler+0x588>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d029      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a7d      	ldr	r2, [pc, #500]	; (80082f8 <HAL_UART_IRQHandler+0x58c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d022      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a7a      	ldr	r2, [pc, #488]	; (80082fc <HAL_UART_IRQHandler+0x590>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d01b      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a78      	ldr	r2, [pc, #480]	; (8008300 <HAL_UART_IRQHandler+0x594>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d014      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a75      	ldr	r2, [pc, #468]	; (8008304 <HAL_UART_IRQHandler+0x598>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00d      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a73      	ldr	r2, [pc, #460]	; (8008308 <HAL_UART_IRQHandler+0x59c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d006      	beq.n	800814e <HAL_UART_IRQHandler+0x3e2>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a70      	ldr	r2, [pc, #448]	; (800830c <HAL_UART_IRQHandler+0x5a0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d106      	bne.n	800815c <HAL_UART_IRQHandler+0x3f0>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	b29b      	uxth	r3, r3
 800815a:	e005      	b.n	8008168 <HAL_UART_IRQHandler+0x3fc>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800816c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 81ab 	beq.w	80084cc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800817c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008180:	429a      	cmp	r2, r3
 8008182:	f080 81a3 	bcs.w	80084cc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800818c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819c:	f000 8087 	beq.w	80082ae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1da      	bne.n	80081a0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3308      	adds	r3, #8
 80081f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081fc:	f023 0301 	bic.w	r3, r3, #1
 8008200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3308      	adds	r3, #8
 800820a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800820e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e1      	bne.n	80081ea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3308      	adds	r3, #8
 800822c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800823c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3308      	adds	r3, #8
 8008246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800824a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800824c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e3      	bne.n	8008226 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2220      	movs	r2, #32
 8008262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800827a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800827c:	f023 0310 	bic.w	r3, r3, #16
 8008280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	461a      	mov	r2, r3
 800828a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800828e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008290:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800829c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e4      	bne.n	800826c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7f9 ffe1 	bl	8002270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f927 	bl	800851c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082ce:	e0fd      	b.n	80084cc <HAL_UART_IRQHandler+0x760>
 80082d0:	40020010 	.word	0x40020010
 80082d4:	40020028 	.word	0x40020028
 80082d8:	40020040 	.word	0x40020040
 80082dc:	40020058 	.word	0x40020058
 80082e0:	40020070 	.word	0x40020070
 80082e4:	40020088 	.word	0x40020088
 80082e8:	400200a0 	.word	0x400200a0
 80082ec:	400200b8 	.word	0x400200b8
 80082f0:	40020410 	.word	0x40020410
 80082f4:	40020428 	.word	0x40020428
 80082f8:	40020440 	.word	0x40020440
 80082fc:	40020458 	.word	0x40020458
 8008300:	40020470 	.word	0x40020470
 8008304:	40020488 	.word	0x40020488
 8008308:	400204a0 	.word	0x400204a0
 800830c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800831c:	b29b      	uxth	r3, r3
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80cf 	beq.w	80084d0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80ca 	beq.w	80084d0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800834a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008350:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800835e:	647b      	str	r3, [r7, #68]	; 0x44
 8008360:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800836c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e4      	bne.n	800833c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	623b      	str	r3, [r7, #32]
   return(result);
 8008382:	6a3a      	ldr	r2, [r7, #32]
 8008384:	4b55      	ldr	r3, [pc, #340]	; (80084dc <HAL_UART_IRQHandler+0x770>)
 8008386:	4013      	ands	r3, r2
 8008388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3308      	adds	r3, #8
 8008392:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008396:	633a      	str	r2, [r7, #48]	; 0x30
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e3      	bne.n	8008372 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0310 	bic.w	r3, r3, #16
 80083d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	69b9      	ldr	r1, [r7, #24]
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	617b      	str	r3, [r7, #20]
   return(result);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e4      	bne.n	80083be <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f88b 	bl	800851c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008406:	e063      	b.n	80084d0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00e      	beq.n	8008432 <HAL_UART_IRQHandler+0x6c6>
 8008414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d008      	beq.n	8008432 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008428:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fb2a 	bl	8009a84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008430:	e051      	b.n	80084d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b00      	cmp	r3, #0
 800843c:	d014      	beq.n	8008468 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800843e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008446:	2b00      	cmp	r3, #0
 8008448:	d105      	bne.n	8008456 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800844a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800844e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d008      	beq.n	8008468 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800845a:	2b00      	cmp	r3, #0
 800845c:	d03a      	beq.n	80084d4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
    }
    return;
 8008466:	e035      	b.n	80084d4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d009      	beq.n	8008488 <HAL_UART_IRQHandler+0x71c>
 8008474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fad4 	bl	8009a2e <UART_EndTransmit_IT>
    return;
 8008486:	e026      	b.n	80084d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <HAL_UART_IRQHandler+0x73c>
 8008494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008498:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 fb03 	bl	8009aac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084a6:	e016      	b.n	80084d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d010      	beq.n	80084d6 <HAL_UART_IRQHandler+0x76a>
 80084b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	da0c      	bge.n	80084d6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 faeb 	bl	8009a98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084c2:	e008      	b.n	80084d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80084c4:	bf00      	nop
 80084c6:	e006      	b.n	80084d6 <HAL_UART_IRQHandler+0x76a>
    return;
 80084c8:	bf00      	nop
 80084ca:	e004      	b.n	80084d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80084cc:	bf00      	nop
 80084ce:	e002      	b.n	80084d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80084d0:	bf00      	nop
 80084d2:	e000      	b.n	80084d6 <HAL_UART_IRQHandler+0x76a>
    return;
 80084d4:	bf00      	nop
  }
}
 80084d6:	37e8      	adds	r7, #232	; 0xe8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	effffffe 	.word	0xeffffffe

080084e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008538:	b092      	sub	sp, #72	; 0x48
 800853a:	af00      	add	r7, sp, #0
 800853c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	431a      	orrs	r2, r3
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	431a      	orrs	r2, r3
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	4313      	orrs	r3, r2
 800855a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4bbe      	ldr	r3, [pc, #760]	; (800885c <UART_SetConfig+0x328>)
 8008564:	4013      	ands	r3, r2
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800856c:	430b      	orrs	r3, r1
 800856e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4ab3      	ldr	r2, [pc, #716]	; (8008860 <UART_SetConfig+0x32c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d004      	beq.n	80085a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800859c:	4313      	orrs	r3, r2
 800859e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	4baf      	ldr	r3, [pc, #700]	; (8008864 <UART_SetConfig+0x330>)
 80085a8:	4013      	ands	r3, r2
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085b0:	430b      	orrs	r3, r1
 80085b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	f023 010f 	bic.w	r1, r3, #15
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4aa6      	ldr	r2, [pc, #664]	; (8008868 <UART_SetConfig+0x334>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d177      	bne.n	80086c4 <UART_SetConfig+0x190>
 80085d4:	4ba5      	ldr	r3, [pc, #660]	; (800886c <UART_SetConfig+0x338>)
 80085d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085dc:	2b28      	cmp	r3, #40	; 0x28
 80085de:	d86d      	bhi.n	80086bc <UART_SetConfig+0x188>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <UART_SetConfig+0xb4>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	0800868d 	.word	0x0800868d
 80085ec:	080086bd 	.word	0x080086bd
 80085f0:	080086bd 	.word	0x080086bd
 80085f4:	080086bd 	.word	0x080086bd
 80085f8:	080086bd 	.word	0x080086bd
 80085fc:	080086bd 	.word	0x080086bd
 8008600:	080086bd 	.word	0x080086bd
 8008604:	080086bd 	.word	0x080086bd
 8008608:	08008695 	.word	0x08008695
 800860c:	080086bd 	.word	0x080086bd
 8008610:	080086bd 	.word	0x080086bd
 8008614:	080086bd 	.word	0x080086bd
 8008618:	080086bd 	.word	0x080086bd
 800861c:	080086bd 	.word	0x080086bd
 8008620:	080086bd 	.word	0x080086bd
 8008624:	080086bd 	.word	0x080086bd
 8008628:	0800869d 	.word	0x0800869d
 800862c:	080086bd 	.word	0x080086bd
 8008630:	080086bd 	.word	0x080086bd
 8008634:	080086bd 	.word	0x080086bd
 8008638:	080086bd 	.word	0x080086bd
 800863c:	080086bd 	.word	0x080086bd
 8008640:	080086bd 	.word	0x080086bd
 8008644:	080086bd 	.word	0x080086bd
 8008648:	080086a5 	.word	0x080086a5
 800864c:	080086bd 	.word	0x080086bd
 8008650:	080086bd 	.word	0x080086bd
 8008654:	080086bd 	.word	0x080086bd
 8008658:	080086bd 	.word	0x080086bd
 800865c:	080086bd 	.word	0x080086bd
 8008660:	080086bd 	.word	0x080086bd
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086ad 	.word	0x080086ad
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080086bd 	.word	0x080086bd
 8008674:	080086bd 	.word	0x080086bd
 8008678:	080086bd 	.word	0x080086bd
 800867c:	080086bd 	.word	0x080086bd
 8008680:	080086bd 	.word	0x080086bd
 8008684:	080086bd 	.word	0x080086bd
 8008688:	080086b5 	.word	0x080086b5
 800868c:	2301      	movs	r3, #1
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e326      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008694:	2304      	movs	r3, #4
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e322      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 800869c:	2308      	movs	r3, #8
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e31e      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80086a4:	2310      	movs	r3, #16
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e31a      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80086ac:	2320      	movs	r3, #32
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e316      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e312      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e30e      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a69      	ldr	r2, [pc, #420]	; (8008870 <UART_SetConfig+0x33c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d130      	bne.n	8008730 <UART_SetConfig+0x1fc>
 80086ce:	4b67      	ldr	r3, [pc, #412]	; (800886c <UART_SetConfig+0x338>)
 80086d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d826      	bhi.n	8008728 <UART_SetConfig+0x1f4>
 80086da:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <UART_SetConfig+0x1ac>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	080086f9 	.word	0x080086f9
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008709 	.word	0x08008709
 80086ec:	08008711 	.word	0x08008711
 80086f0:	08008719 	.word	0x08008719
 80086f4:	08008721 	.word	0x08008721
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fe:	e2f0      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008706:	e2ec      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870e:	e2e8      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e2e4      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008718:	2320      	movs	r3, #32
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e2e0      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e2dc      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e2d8      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a4f      	ldr	r2, [pc, #316]	; (8008874 <UART_SetConfig+0x340>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d130      	bne.n	800879c <UART_SetConfig+0x268>
 800873a:	4b4c      	ldr	r3, [pc, #304]	; (800886c <UART_SetConfig+0x338>)
 800873c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	2b05      	cmp	r3, #5
 8008744:	d826      	bhi.n	8008794 <UART_SetConfig+0x260>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <UART_SetConfig+0x218>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	08008765 	.word	0x08008765
 8008750:	0800876d 	.word	0x0800876d
 8008754:	08008775 	.word	0x08008775
 8008758:	0800877d 	.word	0x0800877d
 800875c:	08008785 	.word	0x08008785
 8008760:	0800878d 	.word	0x0800878d
 8008764:	2300      	movs	r3, #0
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876a:	e2ba      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 800876c:	2304      	movs	r3, #4
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008772:	e2b6      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008774:	2308      	movs	r3, #8
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877a:	e2b2      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 800877c:	2310      	movs	r3, #16
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008782:	e2ae      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008784:	2320      	movs	r3, #32
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878a:	e2aa      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 800878c:	2340      	movs	r3, #64	; 0x40
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e2a6      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008794:	2380      	movs	r3, #128	; 0x80
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879a:	e2a2      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a35      	ldr	r2, [pc, #212]	; (8008878 <UART_SetConfig+0x344>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d130      	bne.n	8008808 <UART_SetConfig+0x2d4>
 80087a6:	4b31      	ldr	r3, [pc, #196]	; (800886c <UART_SetConfig+0x338>)
 80087a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d826      	bhi.n	8008800 <UART_SetConfig+0x2cc>
 80087b2:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <UART_SetConfig+0x284>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	080087d1 	.word	0x080087d1
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	080087e1 	.word	0x080087e1
 80087c4:	080087e9 	.word	0x080087e9
 80087c8:	080087f1 	.word	0x080087f1
 80087cc:	080087f9 	.word	0x080087f9
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d6:	e284      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087de:	e280      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e27c      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e278      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80087f0:	2320      	movs	r3, #32
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e274      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80087f8:	2340      	movs	r3, #64	; 0x40
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e270      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008800:	2380      	movs	r3, #128	; 0x80
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e26c      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1b      	ldr	r2, [pc, #108]	; (800887c <UART_SetConfig+0x348>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d142      	bne.n	8008898 <UART_SetConfig+0x364>
 8008812:	4b16      	ldr	r3, [pc, #88]	; (800886c <UART_SetConfig+0x338>)
 8008814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b05      	cmp	r3, #5
 800881c:	d838      	bhi.n	8008890 <UART_SetConfig+0x35c>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x2f0>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	0800883d 	.word	0x0800883d
 8008828:	08008845 	.word	0x08008845
 800882c:	0800884d 	.word	0x0800884d
 8008830:	08008855 	.word	0x08008855
 8008834:	08008881 	.word	0x08008881
 8008838:	08008889 	.word	0x08008889
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e24e      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008844:	2304      	movs	r3, #4
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e24a      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 800884c:	2308      	movs	r3, #8
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e246      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e242      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 800885c:	cfff69f3 	.word	0xcfff69f3
 8008860:	58000c00 	.word	0x58000c00
 8008864:	11fff4ff 	.word	0x11fff4ff
 8008868:	40011000 	.word	0x40011000
 800886c:	58024400 	.word	0x58024400
 8008870:	40004400 	.word	0x40004400
 8008874:	40004800 	.word	0x40004800
 8008878:	40004c00 	.word	0x40004c00
 800887c:	40005000 	.word	0x40005000
 8008880:	2320      	movs	r3, #32
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008886:	e22c      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008888:	2340      	movs	r3, #64	; 0x40
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888e:	e228      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008890:	2380      	movs	r3, #128	; 0x80
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008896:	e224      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4ab1      	ldr	r2, [pc, #708]	; (8008b64 <UART_SetConfig+0x630>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d176      	bne.n	8008990 <UART_SetConfig+0x45c>
 80088a2:	4bb1      	ldr	r3, [pc, #708]	; (8008b68 <UART_SetConfig+0x634>)
 80088a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088aa:	2b28      	cmp	r3, #40	; 0x28
 80088ac:	d86c      	bhi.n	8008988 <UART_SetConfig+0x454>
 80088ae:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <UART_SetConfig+0x380>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	08008959 	.word	0x08008959
 80088b8:	08008989 	.word	0x08008989
 80088bc:	08008989 	.word	0x08008989
 80088c0:	08008989 	.word	0x08008989
 80088c4:	08008989 	.word	0x08008989
 80088c8:	08008989 	.word	0x08008989
 80088cc:	08008989 	.word	0x08008989
 80088d0:	08008989 	.word	0x08008989
 80088d4:	08008961 	.word	0x08008961
 80088d8:	08008989 	.word	0x08008989
 80088dc:	08008989 	.word	0x08008989
 80088e0:	08008989 	.word	0x08008989
 80088e4:	08008989 	.word	0x08008989
 80088e8:	08008989 	.word	0x08008989
 80088ec:	08008989 	.word	0x08008989
 80088f0:	08008989 	.word	0x08008989
 80088f4:	08008969 	.word	0x08008969
 80088f8:	08008989 	.word	0x08008989
 80088fc:	08008989 	.word	0x08008989
 8008900:	08008989 	.word	0x08008989
 8008904:	08008989 	.word	0x08008989
 8008908:	08008989 	.word	0x08008989
 800890c:	08008989 	.word	0x08008989
 8008910:	08008989 	.word	0x08008989
 8008914:	08008971 	.word	0x08008971
 8008918:	08008989 	.word	0x08008989
 800891c:	08008989 	.word	0x08008989
 8008920:	08008989 	.word	0x08008989
 8008924:	08008989 	.word	0x08008989
 8008928:	08008989 	.word	0x08008989
 800892c:	08008989 	.word	0x08008989
 8008930:	08008989 	.word	0x08008989
 8008934:	08008979 	.word	0x08008979
 8008938:	08008989 	.word	0x08008989
 800893c:	08008989 	.word	0x08008989
 8008940:	08008989 	.word	0x08008989
 8008944:	08008989 	.word	0x08008989
 8008948:	08008989 	.word	0x08008989
 800894c:	08008989 	.word	0x08008989
 8008950:	08008989 	.word	0x08008989
 8008954:	08008981 	.word	0x08008981
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895e:	e1c0      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008960:	2304      	movs	r3, #4
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008966:	e1bc      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008968:	2308      	movs	r3, #8
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e1b8      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008970:	2310      	movs	r3, #16
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e1b4      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008978:	2320      	movs	r3, #32
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e1b0      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008980:	2340      	movs	r3, #64	; 0x40
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e1ac      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008988:	2380      	movs	r3, #128	; 0x80
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e1a8      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a75      	ldr	r2, [pc, #468]	; (8008b6c <UART_SetConfig+0x638>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d130      	bne.n	80089fc <UART_SetConfig+0x4c8>
 800899a:	4b73      	ldr	r3, [pc, #460]	; (8008b68 <UART_SetConfig+0x634>)
 800899c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	d826      	bhi.n	80089f4 <UART_SetConfig+0x4c0>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <UART_SetConfig+0x478>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089c5 	.word	0x080089c5
 80089b0:	080089cd 	.word	0x080089cd
 80089b4:	080089d5 	.word	0x080089d5
 80089b8:	080089dd 	.word	0x080089dd
 80089bc:	080089e5 	.word	0x080089e5
 80089c0:	080089ed 	.word	0x080089ed
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ca:	e18a      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80089cc:	2304      	movs	r3, #4
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d2:	e186      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80089d4:	2308      	movs	r3, #8
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e182      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80089dc:	2310      	movs	r3, #16
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e17e      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80089e4:	2320      	movs	r3, #32
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e17a      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80089ec:	2340      	movs	r3, #64	; 0x40
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e176      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80089f4:	2380      	movs	r3, #128	; 0x80
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e172      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a5b      	ldr	r2, [pc, #364]	; (8008b70 <UART_SetConfig+0x63c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d130      	bne.n	8008a68 <UART_SetConfig+0x534>
 8008a06:	4b58      	ldr	r3, [pc, #352]	; (8008b68 <UART_SetConfig+0x634>)
 8008a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	d826      	bhi.n	8008a60 <UART_SetConfig+0x52c>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <UART_SetConfig+0x4e4>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a31 	.word	0x08008a31
 8008a1c:	08008a39 	.word	0x08008a39
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a51 	.word	0x08008a51
 8008a2c:	08008a59 	.word	0x08008a59
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a36:	e154      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008a38:	2304      	movs	r3, #4
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3e:	e150      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008a40:	2308      	movs	r3, #8
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a46:	e14c      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008a48:	2310      	movs	r3, #16
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4e:	e148      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008a50:	2320      	movs	r3, #32
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e144      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008a58:	2340      	movs	r3, #64	; 0x40
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e140      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008a60:	2380      	movs	r3, #128	; 0x80
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e13c      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a41      	ldr	r2, [pc, #260]	; (8008b74 <UART_SetConfig+0x640>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	f040 8082 	bne.w	8008b78 <UART_SetConfig+0x644>
 8008a74:	4b3c      	ldr	r3, [pc, #240]	; (8008b68 <UART_SetConfig+0x634>)
 8008a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a7c:	2b28      	cmp	r3, #40	; 0x28
 8008a7e:	d86d      	bhi.n	8008b5c <UART_SetConfig+0x628>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <UART_SetConfig+0x554>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008b2d 	.word	0x08008b2d
 8008a8c:	08008b5d 	.word	0x08008b5d
 8008a90:	08008b5d 	.word	0x08008b5d
 8008a94:	08008b5d 	.word	0x08008b5d
 8008a98:	08008b5d 	.word	0x08008b5d
 8008a9c:	08008b5d 	.word	0x08008b5d
 8008aa0:	08008b5d 	.word	0x08008b5d
 8008aa4:	08008b5d 	.word	0x08008b5d
 8008aa8:	08008b35 	.word	0x08008b35
 8008aac:	08008b5d 	.word	0x08008b5d
 8008ab0:	08008b5d 	.word	0x08008b5d
 8008ab4:	08008b5d 	.word	0x08008b5d
 8008ab8:	08008b5d 	.word	0x08008b5d
 8008abc:	08008b5d 	.word	0x08008b5d
 8008ac0:	08008b5d 	.word	0x08008b5d
 8008ac4:	08008b5d 	.word	0x08008b5d
 8008ac8:	08008b3d 	.word	0x08008b3d
 8008acc:	08008b5d 	.word	0x08008b5d
 8008ad0:	08008b5d 	.word	0x08008b5d
 8008ad4:	08008b5d 	.word	0x08008b5d
 8008ad8:	08008b5d 	.word	0x08008b5d
 8008adc:	08008b5d 	.word	0x08008b5d
 8008ae0:	08008b5d 	.word	0x08008b5d
 8008ae4:	08008b5d 	.word	0x08008b5d
 8008ae8:	08008b45 	.word	0x08008b45
 8008aec:	08008b5d 	.word	0x08008b5d
 8008af0:	08008b5d 	.word	0x08008b5d
 8008af4:	08008b5d 	.word	0x08008b5d
 8008af8:	08008b5d 	.word	0x08008b5d
 8008afc:	08008b5d 	.word	0x08008b5d
 8008b00:	08008b5d 	.word	0x08008b5d
 8008b04:	08008b5d 	.word	0x08008b5d
 8008b08:	08008b4d 	.word	0x08008b4d
 8008b0c:	08008b5d 	.word	0x08008b5d
 8008b10:	08008b5d 	.word	0x08008b5d
 8008b14:	08008b5d 	.word	0x08008b5d
 8008b18:	08008b5d 	.word	0x08008b5d
 8008b1c:	08008b5d 	.word	0x08008b5d
 8008b20:	08008b5d 	.word	0x08008b5d
 8008b24:	08008b5d 	.word	0x08008b5d
 8008b28:	08008b55 	.word	0x08008b55
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e0d6      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008b34:	2304      	movs	r3, #4
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e0d2      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008b3c:	2308      	movs	r3, #8
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e0ce      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008b44:	2310      	movs	r3, #16
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e0ca      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b52:	e0c6      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008b54:	2340      	movs	r3, #64	; 0x40
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5a:	e0c2      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008b5c:	2380      	movs	r3, #128	; 0x80
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b62:	e0be      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008b64:	40011400 	.word	0x40011400
 8008b68:	58024400 	.word	0x58024400
 8008b6c:	40007800 	.word	0x40007800
 8008b70:	40007c00 	.word	0x40007c00
 8008b74:	40011800 	.word	0x40011800
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4aad      	ldr	r2, [pc, #692]	; (8008e34 <UART_SetConfig+0x900>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d176      	bne.n	8008c70 <UART_SetConfig+0x73c>
 8008b82:	4bad      	ldr	r3, [pc, #692]	; (8008e38 <UART_SetConfig+0x904>)
 8008b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b8a:	2b28      	cmp	r3, #40	; 0x28
 8008b8c:	d86c      	bhi.n	8008c68 <UART_SetConfig+0x734>
 8008b8e:	a201      	add	r2, pc, #4	; (adr r2, 8008b94 <UART_SetConfig+0x660>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008c39 	.word	0x08008c39
 8008b98:	08008c69 	.word	0x08008c69
 8008b9c:	08008c69 	.word	0x08008c69
 8008ba0:	08008c69 	.word	0x08008c69
 8008ba4:	08008c69 	.word	0x08008c69
 8008ba8:	08008c69 	.word	0x08008c69
 8008bac:	08008c69 	.word	0x08008c69
 8008bb0:	08008c69 	.word	0x08008c69
 8008bb4:	08008c41 	.word	0x08008c41
 8008bb8:	08008c69 	.word	0x08008c69
 8008bbc:	08008c69 	.word	0x08008c69
 8008bc0:	08008c69 	.word	0x08008c69
 8008bc4:	08008c69 	.word	0x08008c69
 8008bc8:	08008c69 	.word	0x08008c69
 8008bcc:	08008c69 	.word	0x08008c69
 8008bd0:	08008c69 	.word	0x08008c69
 8008bd4:	08008c49 	.word	0x08008c49
 8008bd8:	08008c69 	.word	0x08008c69
 8008bdc:	08008c69 	.word	0x08008c69
 8008be0:	08008c69 	.word	0x08008c69
 8008be4:	08008c69 	.word	0x08008c69
 8008be8:	08008c69 	.word	0x08008c69
 8008bec:	08008c69 	.word	0x08008c69
 8008bf0:	08008c69 	.word	0x08008c69
 8008bf4:	08008c51 	.word	0x08008c51
 8008bf8:	08008c69 	.word	0x08008c69
 8008bfc:	08008c69 	.word	0x08008c69
 8008c00:	08008c69 	.word	0x08008c69
 8008c04:	08008c69 	.word	0x08008c69
 8008c08:	08008c69 	.word	0x08008c69
 8008c0c:	08008c69 	.word	0x08008c69
 8008c10:	08008c69 	.word	0x08008c69
 8008c14:	08008c59 	.word	0x08008c59
 8008c18:	08008c69 	.word	0x08008c69
 8008c1c:	08008c69 	.word	0x08008c69
 8008c20:	08008c69 	.word	0x08008c69
 8008c24:	08008c69 	.word	0x08008c69
 8008c28:	08008c69 	.word	0x08008c69
 8008c2c:	08008c69 	.word	0x08008c69
 8008c30:	08008c69 	.word	0x08008c69
 8008c34:	08008c61 	.word	0x08008c61
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e050      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008c40:	2304      	movs	r3, #4
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e04c      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e048      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c56:	e044      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5e:	e040      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c66:	e03c      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008c68:	2380      	movs	r3, #128	; 0x80
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6e:	e038      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a71      	ldr	r2, [pc, #452]	; (8008e3c <UART_SetConfig+0x908>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d130      	bne.n	8008cdc <UART_SetConfig+0x7a8>
 8008c7a:	4b6f      	ldr	r3, [pc, #444]	; (8008e38 <UART_SetConfig+0x904>)
 8008c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	d826      	bhi.n	8008cd4 <UART_SetConfig+0x7a0>
 8008c86:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <UART_SetConfig+0x758>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008ca5 	.word	0x08008ca5
 8008c90:	08008cad 	.word	0x08008cad
 8008c94:	08008cb5 	.word	0x08008cb5
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e01a      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e016      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cba:	e012      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc2:	e00e      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cca:	e00a      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e006      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e002      	b.n	8008ce2 <UART_SetConfig+0x7ae>
 8008cdc:	2380      	movs	r3, #128	; 0x80
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a55      	ldr	r2, [pc, #340]	; (8008e3c <UART_SetConfig+0x908>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	f040 80f8 	bne.w	8008ede <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	dc46      	bgt.n	8008d84 <UART_SetConfig+0x850>
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	db75      	blt.n	8008de6 <UART_SetConfig+0x8b2>
 8008cfa:	3b02      	subs	r3, #2
 8008cfc:	2b1e      	cmp	r3, #30
 8008cfe:	d872      	bhi.n	8008de6 <UART_SetConfig+0x8b2>
 8008d00:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <UART_SetConfig+0x7d4>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d8b 	.word	0x08008d8b
 8008d0c:	08008de7 	.word	0x08008de7
 8008d10:	08008d93 	.word	0x08008d93
 8008d14:	08008de7 	.word	0x08008de7
 8008d18:	08008de7 	.word	0x08008de7
 8008d1c:	08008de7 	.word	0x08008de7
 8008d20:	08008da3 	.word	0x08008da3
 8008d24:	08008de7 	.word	0x08008de7
 8008d28:	08008de7 	.word	0x08008de7
 8008d2c:	08008de7 	.word	0x08008de7
 8008d30:	08008de7 	.word	0x08008de7
 8008d34:	08008de7 	.word	0x08008de7
 8008d38:	08008de7 	.word	0x08008de7
 8008d3c:	08008de7 	.word	0x08008de7
 8008d40:	08008db3 	.word	0x08008db3
 8008d44:	08008de7 	.word	0x08008de7
 8008d48:	08008de7 	.word	0x08008de7
 8008d4c:	08008de7 	.word	0x08008de7
 8008d50:	08008de7 	.word	0x08008de7
 8008d54:	08008de7 	.word	0x08008de7
 8008d58:	08008de7 	.word	0x08008de7
 8008d5c:	08008de7 	.word	0x08008de7
 8008d60:	08008de7 	.word	0x08008de7
 8008d64:	08008de7 	.word	0x08008de7
 8008d68:	08008de7 	.word	0x08008de7
 8008d6c:	08008de7 	.word	0x08008de7
 8008d70:	08008de7 	.word	0x08008de7
 8008d74:	08008de7 	.word	0x08008de7
 8008d78:	08008de7 	.word	0x08008de7
 8008d7c:	08008de7 	.word	0x08008de7
 8008d80:	08008dd9 	.word	0x08008dd9
 8008d84:	2b40      	cmp	r3, #64	; 0x40
 8008d86:	d02a      	beq.n	8008dde <UART_SetConfig+0x8aa>
 8008d88:	e02d      	b.n	8008de6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d8a:	f7fe f851 	bl	8006e30 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d90:	e02f      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe f860 	bl	8006e5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008da0:	e027      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da2:	f107 0318 	add.w	r3, r7, #24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe f9ac 	bl	8007104 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008db0:	e01f      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008db2:	4b21      	ldr	r3, [pc, #132]	; (8008e38 <UART_SetConfig+0x904>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dbe:	4b1e      	ldr	r3, [pc, #120]	; (8008e38 <UART_SetConfig+0x904>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	08db      	lsrs	r3, r3, #3
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	4a1d      	ldr	r2, [pc, #116]	; (8008e40 <UART_SetConfig+0x90c>)
 8008dca:	fa22 f303 	lsr.w	r3, r2, r3
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dd0:	e00f      	b.n	8008df2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008dd2:	4b1b      	ldr	r3, [pc, #108]	; (8008e40 <UART_SetConfig+0x90c>)
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd6:	e00c      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dd8:	4b1a      	ldr	r3, [pc, #104]	; (8008e44 <UART_SetConfig+0x910>)
 8008dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ddc:	e009      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008de4:	e005      	b.n	8008df2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008df0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 81ee 	beq.w	80091d6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	4a12      	ldr	r2, [pc, #72]	; (8008e48 <UART_SetConfig+0x914>)
 8008e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e0c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	4413      	add	r3, r2
 8008e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d305      	bcc.n	8008e2a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d910      	bls.n	8008e4c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e30:	e1d1      	b.n	80091d6 <UART_SetConfig+0xca2>
 8008e32:	bf00      	nop
 8008e34:	40011c00 	.word	0x40011c00
 8008e38:	58024400 	.word	0x58024400
 8008e3c:	58000c00 	.word	0x58000c00
 8008e40:	03d09000 	.word	0x03d09000
 8008e44:	003d0900 	.word	0x003d0900
 8008e48:	08009d50 	.word	0x08009d50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4e:	2200      	movs	r2, #0
 8008e50:	60bb      	str	r3, [r7, #8]
 8008e52:	60fa      	str	r2, [r7, #12]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	4ac0      	ldr	r2, [pc, #768]	; (800915c <UART_SetConfig+0xc28>)
 8008e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2200      	movs	r2, #0
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	607a      	str	r2, [r7, #4]
 8008e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e6e:	f7f7 fa3d 	bl	80002ec <__aeabi_uldivmod>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4610      	mov	r0, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	020b      	lsls	r3, r1, #8
 8008e84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e88:	0202      	lsls	r2, r0, #8
 8008e8a:	6979      	ldr	r1, [r7, #20]
 8008e8c:	6849      	ldr	r1, [r1, #4]
 8008e8e:	0849      	lsrs	r1, r1, #1
 8008e90:	2000      	movs	r0, #0
 8008e92:	460c      	mov	r4, r1
 8008e94:	4605      	mov	r5, r0
 8008e96:	eb12 0804 	adds.w	r8, r2, r4
 8008e9a:	eb43 0905 	adc.w	r9, r3, r5
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	469a      	mov	sl, r3
 8008ea6:	4693      	mov	fp, r2
 8008ea8:	4652      	mov	r2, sl
 8008eaa:	465b      	mov	r3, fp
 8008eac:	4640      	mov	r0, r8
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f7f7 fa1c 	bl	80002ec <__aeabi_uldivmod>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4613      	mov	r3, r2
 8008eba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ec2:	d308      	bcc.n	8008ed6 <UART_SetConfig+0x9a2>
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eca:	d204      	bcs.n	8008ed6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ed2:	60da      	str	r2, [r3, #12]
 8008ed4:	e17f      	b.n	80091d6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008edc:	e17b      	b.n	80091d6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee6:	f040 80bd 	bne.w	8009064 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008eea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	dc48      	bgt.n	8008f84 <UART_SetConfig+0xa50>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	db7b      	blt.n	8008fee <UART_SetConfig+0xaba>
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d879      	bhi.n	8008fee <UART_SetConfig+0xaba>
 8008efa:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <UART_SetConfig+0x9cc>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f8b 	.word	0x08008f8b
 8008f04:	08008f93 	.word	0x08008f93
 8008f08:	08008fef 	.word	0x08008fef
 8008f0c:	08008fef 	.word	0x08008fef
 8008f10:	08008f9b 	.word	0x08008f9b
 8008f14:	08008fef 	.word	0x08008fef
 8008f18:	08008fef 	.word	0x08008fef
 8008f1c:	08008fef 	.word	0x08008fef
 8008f20:	08008fab 	.word	0x08008fab
 8008f24:	08008fef 	.word	0x08008fef
 8008f28:	08008fef 	.word	0x08008fef
 8008f2c:	08008fef 	.word	0x08008fef
 8008f30:	08008fef 	.word	0x08008fef
 8008f34:	08008fef 	.word	0x08008fef
 8008f38:	08008fef 	.word	0x08008fef
 8008f3c:	08008fef 	.word	0x08008fef
 8008f40:	08008fbb 	.word	0x08008fbb
 8008f44:	08008fef 	.word	0x08008fef
 8008f48:	08008fef 	.word	0x08008fef
 8008f4c:	08008fef 	.word	0x08008fef
 8008f50:	08008fef 	.word	0x08008fef
 8008f54:	08008fef 	.word	0x08008fef
 8008f58:	08008fef 	.word	0x08008fef
 8008f5c:	08008fef 	.word	0x08008fef
 8008f60:	08008fef 	.word	0x08008fef
 8008f64:	08008fef 	.word	0x08008fef
 8008f68:	08008fef 	.word	0x08008fef
 8008f6c:	08008fef 	.word	0x08008fef
 8008f70:	08008fef 	.word	0x08008fef
 8008f74:	08008fef 	.word	0x08008fef
 8008f78:	08008fef 	.word	0x08008fef
 8008f7c:	08008fef 	.word	0x08008fef
 8008f80:	08008fe1 	.word	0x08008fe1
 8008f84:	2b40      	cmp	r3, #64	; 0x40
 8008f86:	d02e      	beq.n	8008fe6 <UART_SetConfig+0xab2>
 8008f88:	e031      	b.n	8008fee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f8a:	f7fc fd67 	bl	8005a5c <HAL_RCC_GetPCLK1Freq>
 8008f8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f90:	e033      	b.n	8008ffa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f92:	f7fc fd79 	bl	8005a88 <HAL_RCC_GetPCLK2Freq>
 8008f96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f98:	e02f      	b.n	8008ffa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fd ff5c 	bl	8006e5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fa8:	e027      	b.n	8008ffa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008faa:	f107 0318 	add.w	r3, r7, #24
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe f8a8 	bl	8007104 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb8:	e01f      	b.n	8008ffa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fba:	4b69      	ldr	r3, [pc, #420]	; (8009160 <UART_SetConfig+0xc2c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fc6:	4b66      	ldr	r3, [pc, #408]	; (8009160 <UART_SetConfig+0xc2c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	08db      	lsrs	r3, r3, #3
 8008fcc:	f003 0303 	and.w	r3, r3, #3
 8008fd0:	4a64      	ldr	r2, [pc, #400]	; (8009164 <UART_SetConfig+0xc30>)
 8008fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fd8:	e00f      	b.n	8008ffa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008fda:	4b62      	ldr	r3, [pc, #392]	; (8009164 <UART_SetConfig+0xc30>)
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fde:	e00c      	b.n	8008ffa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fe0:	4b61      	ldr	r3, [pc, #388]	; (8009168 <UART_SetConfig+0xc34>)
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe4:	e009      	b.n	8008ffa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fec:	e005      	b.n	8008ffa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ff8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 80ea 	beq.w	80091d6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	4a55      	ldr	r2, [pc, #340]	; (800915c <UART_SetConfig+0xc28>)
 8009008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800900c:	461a      	mov	r2, r3
 800900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009010:	fbb3 f3f2 	udiv	r3, r3, r2
 8009014:	005a      	lsls	r2, r3, #1
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	085b      	lsrs	r3, r3, #1
 800901c:	441a      	add	r2, r3
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	fbb2 f3f3 	udiv	r3, r2, r3
 8009026:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	2b0f      	cmp	r3, #15
 800902c:	d916      	bls.n	800905c <UART_SetConfig+0xb28>
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009034:	d212      	bcs.n	800905c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	b29b      	uxth	r3, r3
 800903a:	f023 030f 	bic.w	r3, r3, #15
 800903e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	085b      	lsrs	r3, r3, #1
 8009044:	b29b      	uxth	r3, r3
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	b29a      	uxth	r2, r3
 800904c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800904e:	4313      	orrs	r3, r2
 8009050:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009058:	60da      	str	r2, [r3, #12]
 800905a:	e0bc      	b.n	80091d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009062:	e0b8      	b.n	80091d6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009064:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009068:	2b20      	cmp	r3, #32
 800906a:	dc4b      	bgt.n	8009104 <UART_SetConfig+0xbd0>
 800906c:	2b00      	cmp	r3, #0
 800906e:	f2c0 8087 	blt.w	8009180 <UART_SetConfig+0xc4c>
 8009072:	2b20      	cmp	r3, #32
 8009074:	f200 8084 	bhi.w	8009180 <UART_SetConfig+0xc4c>
 8009078:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <UART_SetConfig+0xb4c>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	0800910b 	.word	0x0800910b
 8009084:	08009113 	.word	0x08009113
 8009088:	08009181 	.word	0x08009181
 800908c:	08009181 	.word	0x08009181
 8009090:	0800911b 	.word	0x0800911b
 8009094:	08009181 	.word	0x08009181
 8009098:	08009181 	.word	0x08009181
 800909c:	08009181 	.word	0x08009181
 80090a0:	0800912b 	.word	0x0800912b
 80090a4:	08009181 	.word	0x08009181
 80090a8:	08009181 	.word	0x08009181
 80090ac:	08009181 	.word	0x08009181
 80090b0:	08009181 	.word	0x08009181
 80090b4:	08009181 	.word	0x08009181
 80090b8:	08009181 	.word	0x08009181
 80090bc:	08009181 	.word	0x08009181
 80090c0:	0800913b 	.word	0x0800913b
 80090c4:	08009181 	.word	0x08009181
 80090c8:	08009181 	.word	0x08009181
 80090cc:	08009181 	.word	0x08009181
 80090d0:	08009181 	.word	0x08009181
 80090d4:	08009181 	.word	0x08009181
 80090d8:	08009181 	.word	0x08009181
 80090dc:	08009181 	.word	0x08009181
 80090e0:	08009181 	.word	0x08009181
 80090e4:	08009181 	.word	0x08009181
 80090e8:	08009181 	.word	0x08009181
 80090ec:	08009181 	.word	0x08009181
 80090f0:	08009181 	.word	0x08009181
 80090f4:	08009181 	.word	0x08009181
 80090f8:	08009181 	.word	0x08009181
 80090fc:	08009181 	.word	0x08009181
 8009100:	08009173 	.word	0x08009173
 8009104:	2b40      	cmp	r3, #64	; 0x40
 8009106:	d037      	beq.n	8009178 <UART_SetConfig+0xc44>
 8009108:	e03a      	b.n	8009180 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800910a:	f7fc fca7 	bl	8005a5c <HAL_RCC_GetPCLK1Freq>
 800910e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009110:	e03c      	b.n	800918c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009112:	f7fc fcb9 	bl	8005a88 <HAL_RCC_GetPCLK2Freq>
 8009116:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009118:	e038      	b.n	800918c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800911a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800911e:	4618      	mov	r0, r3
 8009120:	f7fd fe9c 	bl	8006e5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009128:	e030      	b.n	800918c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800912a:	f107 0318 	add.w	r3, r7, #24
 800912e:	4618      	mov	r0, r3
 8009130:	f7fd ffe8 	bl	8007104 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009138:	e028      	b.n	800918c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <UART_SetConfig+0xc2c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d012      	beq.n	800916c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009146:	4b06      	ldr	r3, [pc, #24]	; (8009160 <UART_SetConfig+0xc2c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	08db      	lsrs	r3, r3, #3
 800914c:	f003 0303 	and.w	r3, r3, #3
 8009150:	4a04      	ldr	r2, [pc, #16]	; (8009164 <UART_SetConfig+0xc30>)
 8009152:	fa22 f303 	lsr.w	r3, r2, r3
 8009156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009158:	e018      	b.n	800918c <UART_SetConfig+0xc58>
 800915a:	bf00      	nop
 800915c:	08009d50 	.word	0x08009d50
 8009160:	58024400 	.word	0x58024400
 8009164:	03d09000 	.word	0x03d09000
 8009168:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800916c:	4b24      	ldr	r3, [pc, #144]	; (8009200 <UART_SetConfig+0xccc>)
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009170:	e00c      	b.n	800918c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009172:	4b24      	ldr	r3, [pc, #144]	; (8009204 <UART_SetConfig+0xcd0>)
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009176:	e009      	b.n	800918c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800917e:	e005      	b.n	800918c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800918a:	bf00      	nop
    }

    if (pclk != 0U)
 800918c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d021      	beq.n	80091d6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	4a1c      	ldr	r2, [pc, #112]	; (8009208 <UART_SetConfig+0xcd4>)
 8009198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800919c:	461a      	mov	r2, r3
 800919e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	085b      	lsrs	r3, r3, #1
 80091aa:	441a      	add	r2, r3
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	2b0f      	cmp	r3, #15
 80091ba:	d909      	bls.n	80091d0 <UART_SetConfig+0xc9c>
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c2:	d205      	bcs.n	80091d0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	e002      	b.n	80091d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2201      	movs	r2, #1
 80091da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2200      	movs	r2, #0
 80091ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2200      	movs	r2, #0
 80091f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80091f2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3748      	adds	r7, #72	; 0x48
 80091fa:	46bd      	mov	sp, r7
 80091fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009200:	03d09000 	.word	0x03d09000
 8009204:	003d0900 	.word	0x003d0900
 8009208:	08009d50 	.word	0x08009d50

0800920c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00a      	beq.n	8009236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00a      	beq.n	8009258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00a      	beq.n	800927a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927e:	f003 0304 	and.w	r3, r3, #4
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00a      	beq.n	80092be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01a      	beq.n	8009322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800930a:	d10a      	bne.n	8009322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b098      	sub	sp, #96	; 0x60
 8009354:	af02      	add	r7, sp, #8
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009360:	f7f7 feaa 	bl	80010b8 <HAL_GetTick>
 8009364:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0308 	and.w	r3, r3, #8
 8009370:	2b08      	cmp	r3, #8
 8009372:	d12f      	bne.n	80093d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937c:	2200      	movs	r2, #0
 800937e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f88e 	bl	80094a4 <UART_WaitOnFlagUntilTimeout>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d022      	beq.n	80093d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	e853 3f00 	ldrex	r3, [r3]
 800939a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800939c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093a2:	653b      	str	r3, [r7, #80]	; 0x50
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ac:	647b      	str	r3, [r7, #68]	; 0x44
 80093ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093b4:	e841 2300 	strex	r3, r2, [r1]
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e6      	bne.n	800938e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e063      	b.n	800949c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d149      	bne.n	8009476 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ea:	2200      	movs	r2, #0
 80093ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f857 	bl	80094a4 <UART_WaitOnFlagUntilTimeout>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d03c      	beq.n	8009476 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	623b      	str	r3, [r7, #32]
   return(result);
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941a:	633b      	str	r3, [r7, #48]	; 0x30
 800941c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e6      	bne.n	80093fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3308      	adds	r3, #8
 8009434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	60fb      	str	r3, [r7, #12]
   return(result);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f023 0301 	bic.w	r3, r3, #1
 8009444:	64bb      	str	r3, [r7, #72]	; 0x48
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800944e:	61fa      	str	r2, [r7, #28]
 8009450:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	69b9      	ldr	r1, [r7, #24]
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	617b      	str	r3, [r7, #20]
   return(result);
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e5      	bne.n	800942e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e012      	b.n	800949c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2220      	movs	r2, #32
 8009482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3758      	adds	r7, #88	; 0x58
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	603b      	str	r3, [r7, #0]
 80094b0:	4613      	mov	r3, r2
 80094b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b4:	e04f      	b.n	8009556 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094bc:	d04b      	beq.n	8009556 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094be:	f7f7 fdfb 	bl	80010b8 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d302      	bcc.n	80094d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e04e      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0304 	and.w	r3, r3, #4
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d037      	beq.n	8009556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2b80      	cmp	r3, #128	; 0x80
 80094ea:	d034      	beq.n	8009556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	d031      	beq.n	8009556 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	f003 0308 	and.w	r3, r3, #8
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d110      	bne.n	8009522 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2208      	movs	r2, #8
 8009506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 f921 	bl	8009750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2208      	movs	r2, #8
 8009512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e029      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800952c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009530:	d111      	bne.n	8009556 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800953a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f907 	bl	8009750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e00f      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69da      	ldr	r2, [r3, #28]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	4013      	ands	r3, r2
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	429a      	cmp	r2, r3
 8009564:	bf0c      	ite	eq
 8009566:	2301      	moveq	r3, #1
 8009568:	2300      	movne	r3, #0
 800956a:	b2db      	uxtb	r3, r3
 800956c:	461a      	mov	r2, r3
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	429a      	cmp	r2, r3
 8009572:	d0a0      	beq.n	80094b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b096      	sub	sp, #88	; 0x58
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	88fa      	ldrh	r2, [r7, #6]
 8009598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2222      	movs	r2, #34	; 0x22
 80095a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d02d      	beq.n	8009612 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095bc:	4a40      	ldr	r2, [pc, #256]	; (80096c0 <UART_Start_Receive_DMA+0x140>)
 80095be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c6:	4a3f      	ldr	r2, [pc, #252]	; (80096c4 <UART_Start_Receive_DMA+0x144>)
 80095c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095d0:	4a3d      	ldr	r2, [pc, #244]	; (80096c8 <UART_Start_Receive_DMA+0x148>)
 80095d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095da:	2200      	movs	r2, #0
 80095dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3324      	adds	r3, #36	; 0x24
 80095ea:	4619      	mov	r1, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f0:	461a      	mov	r2, r3
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	f7f8 fbd2 	bl	8001d9c <HAL_DMA_Start_IT>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d009      	beq.n	8009612 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2210      	movs	r2, #16
 8009602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e051      	b.n	80096b6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d018      	beq.n	800964c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800962e:	657b      	str	r3, [r7, #84]	; 0x54
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	461a      	mov	r2, r3
 8009636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009638:	64bb      	str	r3, [r7, #72]	; 0x48
 800963a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800963e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009640:	e841 2300 	strex	r3, r2, [r1]
 8009644:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1e6      	bne.n	800961a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	f043 0301 	orr.w	r3, r3, #1
 8009662:	653b      	str	r3, [r7, #80]	; 0x50
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3308      	adds	r3, #8
 800966a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800966c:	637a      	str	r2, [r7, #52]	; 0x34
 800966e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e5      	bne.n	800964c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3308      	adds	r3, #8
 8009686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	613b      	str	r3, [r7, #16]
   return(result);
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096a0:	623a      	str	r2, [r7, #32]
 80096a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	69f9      	ldr	r1, [r7, #28]
 80096a6:	6a3a      	ldr	r2, [r7, #32]
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e5      	bne.n	8009680 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3758      	adds	r7, #88	; 0x58
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	0800981d 	.word	0x0800981d
 80096c4:	08009945 	.word	0x08009945
 80096c8:	08009983 	.word	0x08009983

080096cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b08f      	sub	sp, #60	; 0x3c
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e6      	bne.n	80096d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	60bb      	str	r3, [r7, #8]
   return(result);
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800971c:	633b      	str	r3, [r7, #48]	; 0x30
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3308      	adds	r3, #8
 8009724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009726:	61ba      	str	r2, [r7, #24]
 8009728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	6979      	ldr	r1, [r7, #20]
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	613b      	str	r3, [r7, #16]
   return(result);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e5      	bne.n	8009706 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009742:	bf00      	nop
 8009744:	373c      	adds	r7, #60	; 0x3c
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
	...

08009750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b095      	sub	sp, #84	; 0x54
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800976c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009776:	643b      	str	r3, [r7, #64]	; 0x40
 8009778:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800977c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e6      	bne.n	8009758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	61fb      	str	r3, [r7, #28]
   return(result);
 800979a:	69fa      	ldr	r2, [r7, #28]
 800979c:	4b1e      	ldr	r3, [pc, #120]	; (8009818 <UART_EndRxTransfer+0xc8>)
 800979e:	4013      	ands	r3, r2
 80097a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e5      	bne.n	800978a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d118      	bne.n	80097f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f023 0310 	bic.w	r3, r3, #16
 80097da:	647b      	str	r3, [r7, #68]	; 0x44
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6979      	ldr	r1, [r7, #20]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	613b      	str	r3, [r7, #16]
   return(result);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e6      	bne.n	80097c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800980c:	bf00      	nop
 800980e:	3754      	adds	r7, #84	; 0x54
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	effffffe 	.word	0xeffffffe

0800981c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b09c      	sub	sp, #112	; 0x70
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009832:	d071      	beq.n	8009918 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009836:	2200      	movs	r2, #0
 8009838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800983c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800984a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009850:	66bb      	str	r3, [r7, #104]	; 0x68
 8009852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800985a:	65bb      	str	r3, [r7, #88]	; 0x58
 800985c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e6      	bne.n	800983c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800986e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3308      	adds	r3, #8
 8009874:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800987e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009880:	f023 0301 	bic.w	r3, r3, #1
 8009884:	667b      	str	r3, [r7, #100]	; 0x64
 8009886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3308      	adds	r3, #8
 800988c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800988e:	647a      	str	r2, [r7, #68]	; 0x44
 8009890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800989c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e5      	bne.n	800986e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3308      	adds	r3, #8
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	e853 3f00 	ldrex	r3, [r3]
 80098b0:	623b      	str	r3, [r7, #32]
   return(result);
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098b8:	663b      	str	r3, [r7, #96]	; 0x60
 80098ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098c2:	633a      	str	r2, [r7, #48]	; 0x30
 80098c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ca:	e841 2300 	strex	r3, r2, [r1]
 80098ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1e5      	bne.n	80098a2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d8:	2220      	movs	r2, #32
 80098da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d118      	bne.n	8009918 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	e853 3f00 	ldrex	r3, [r3]
 80098f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 0310 	bic.w	r3, r3, #16
 80098fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	69b9      	ldr	r1, [r7, #24]
 800990a:	69fa      	ldr	r2, [r7, #28]
 800990c:	e841 2300 	strex	r3, r2, [r1]
 8009910:	617b      	str	r3, [r7, #20]
   return(result);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e6      	bne.n	80098e6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800991a:	2200      	movs	r2, #0
 800991c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d107      	bne.n	8009936 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800992c:	4619      	mov	r1, r3
 800992e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009930:	f7fe fdf4 	bl	800851c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009934:	e002      	b.n	800993c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009936:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009938:	f7f7 f8ba 	bl	8000ab0 <HAL_UART_RxCpltCallback>
}
 800993c:	bf00      	nop
 800993e:	3770      	adds	r7, #112	; 0x70
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2201      	movs	r2, #1
 8009956:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995c:	2b01      	cmp	r3, #1
 800995e:	d109      	bne.n	8009974 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009966:	085b      	lsrs	r3, r3, #1
 8009968:	b29b      	uxth	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7fe fdd5 	bl	800851c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009972:	e002      	b.n	800997a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7fe fdbd 	bl	80084f4 <HAL_UART_RxHalfCpltCallback>
}
 800997a:	bf00      	nop
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009996:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800999e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099aa:	2b80      	cmp	r3, #128	; 0x80
 80099ac:	d109      	bne.n	80099c2 <UART_DMAError+0x40>
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	2b21      	cmp	r3, #33	; 0x21
 80099b2:	d106      	bne.n	80099c2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80099bc:	6978      	ldr	r0, [r7, #20]
 80099be:	f7ff fe85 	bl	80096cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d109      	bne.n	80099e4 <UART_DMAError+0x62>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b22      	cmp	r3, #34	; 0x22
 80099d4:	d106      	bne.n	80099e4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2200      	movs	r2, #0
 80099da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80099de:	6978      	ldr	r0, [r7, #20]
 80099e0:	f7ff feb6 	bl	8009750 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ea:	f043 0210 	orr.w	r2, r3, #16
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099f4:	6978      	ldr	r0, [r7, #20]
 80099f6:	f7fe fd87 	bl	8008508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099fa:	bf00      	nop
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7fe fd71 	bl	8008508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b088      	sub	sp, #32
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a4a:	61fb      	str	r3, [r7, #28]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	61bb      	str	r3, [r7, #24]
 8009a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	6979      	ldr	r1, [r7, #20]
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	613b      	str	r3, [r7, #16]
   return(result);
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e6      	bne.n	8009a36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7fe fd32 	bl	80084e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a7c:	bf00      	nop
 8009a7e:	3720      	adds	r7, #32
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d101      	bne.n	8009ad6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e027      	b.n	8009b26 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2224      	movs	r2, #36	; 0x24
 8009ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0201 	bic.w	r2, r2, #1
 8009afc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b084      	sub	sp, #16
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e02d      	b.n	8009ba6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2224      	movs	r2, #36	; 0x24
 8009b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0201 	bic.w	r2, r2, #1
 8009b70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f850 	bl	8009c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2220      	movs	r2, #32
 8009b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d101      	bne.n	8009bc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e02d      	b.n	8009c22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2224      	movs	r2, #36	; 0x24
 8009bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 0201 	bic.w	r2, r2, #1
 8009bec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f812 	bl	8009c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2220      	movs	r2, #32
 8009c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d108      	bne.n	8009c4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c4c:	e031      	b.n	8009cb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c4e:	2310      	movs	r3, #16
 8009c50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c52:	2310      	movs	r3, #16
 8009c54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	0e5b      	lsrs	r3, r3, #25
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	0f5b      	lsrs	r3, r3, #29
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	7b3a      	ldrb	r2, [r7, #12]
 8009c7a:	4911      	ldr	r1, [pc, #68]	; (8009cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8009c7c:	5c8a      	ldrb	r2, [r1, r2]
 8009c7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c82:	7b3a      	ldrb	r2, [r7, #12]
 8009c84:	490f      	ldr	r1, [pc, #60]	; (8009cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8009c86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c88:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	7b7a      	ldrb	r2, [r7, #13]
 8009c98:	4909      	ldr	r1, [pc, #36]	; (8009cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8009c9a:	5c8a      	ldrb	r2, [r1, r2]
 8009c9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ca0:	7b7a      	ldrb	r2, [r7, #13]
 8009ca2:	4908      	ldr	r1, [pc, #32]	; (8009cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8009ca4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ca6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009cb2:	bf00      	nop
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	08009d68 	.word	0x08009d68
 8009cc4:	08009d70 	.word	0x08009d70

08009cc8 <__libc_init_array>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	4d0d      	ldr	r5, [pc, #52]	; (8009d00 <__libc_init_array+0x38>)
 8009ccc:	4c0d      	ldr	r4, [pc, #52]	; (8009d04 <__libc_init_array+0x3c>)
 8009cce:	1b64      	subs	r4, r4, r5
 8009cd0:	10a4      	asrs	r4, r4, #2
 8009cd2:	2600      	movs	r6, #0
 8009cd4:	42a6      	cmp	r6, r4
 8009cd6:	d109      	bne.n	8009cec <__libc_init_array+0x24>
 8009cd8:	4d0b      	ldr	r5, [pc, #44]	; (8009d08 <__libc_init_array+0x40>)
 8009cda:	4c0c      	ldr	r4, [pc, #48]	; (8009d0c <__libc_init_array+0x44>)
 8009cdc:	f000 f820 	bl	8009d20 <_init>
 8009ce0:	1b64      	subs	r4, r4, r5
 8009ce2:	10a4      	asrs	r4, r4, #2
 8009ce4:	2600      	movs	r6, #0
 8009ce6:	42a6      	cmp	r6, r4
 8009ce8:	d105      	bne.n	8009cf6 <__libc_init_array+0x2e>
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf0:	4798      	blx	r3
 8009cf2:	3601      	adds	r6, #1
 8009cf4:	e7ee      	b.n	8009cd4 <__libc_init_array+0xc>
 8009cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfa:	4798      	blx	r3
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	e7f2      	b.n	8009ce6 <__libc_init_array+0x1e>
 8009d00:	08009d80 	.word	0x08009d80
 8009d04:	08009d80 	.word	0x08009d80
 8009d08:	08009d80 	.word	0x08009d80
 8009d0c:	08009d84 	.word	0x08009d84

08009d10 <memset>:
 8009d10:	4402      	add	r2, r0
 8009d12:	4603      	mov	r3, r0
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d100      	bne.n	8009d1a <memset+0xa>
 8009d18:	4770      	bx	lr
 8009d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d1e:	e7f9      	b.n	8009d14 <memset+0x4>

08009d20 <_init>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	bf00      	nop
 8009d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d26:	bc08      	pop	{r3}
 8009d28:	469e      	mov	lr, r3
 8009d2a:	4770      	bx	lr

08009d2c <_fini>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr
