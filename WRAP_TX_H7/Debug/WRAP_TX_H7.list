
WRAP_TX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b008  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  0800b2b8  0800b2b8  0000c2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bce0  0800bce0  0000cce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bce8  0800bce8  0000cce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bcec  0800bcec  0000ccec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00003850  24000000  0800bcf0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006b68  24003850  0800f540  00010850  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400a3b8  0800f540  000113b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010850  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019062  00000000  00000000  0001087e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fac  00000000  00000000  000298e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001360  00000000  00000000  0002c890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f05  00000000  00000000  0002dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000318df  00000000  00000000  0002eaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b212  00000000  00000000  000603d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143c83  00000000  00000000  0007b5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001bf269  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000053ac  00000000  00000000  001bf324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001c46d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00001363  00000000  00000000  001c473f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000010  00000000  00000000  001c5aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24003850 	.word	0x24003850
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b2a0 	.word	0x0800b2a0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24003854 	.word	0x24003854
 80002ec:	0800b2a0 	.word	0x0800b2a0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <recalculate_output>:
	for (int i = 0; i < 2300; i++) {
		dac_buf[i] = single_val;
	}
}

void recalculate_output(uint8_t * message, uint16_t len) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < NUM_SYMBS; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
 80005f0:	e007      	b.n	8000602 <recalculate_output+0x22>
		symbol_buffer[i] = 0;
 80005f2:	4a65      	ldr	r2, [pc, #404]	@ (8000788 <recalculate_output+0x1a8>)
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	2100      	movs	r1, #0
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_SYMBS; i++) {
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	3301      	adds	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b1e      	cmp	r3, #30
 8000606:	ddf4      	ble.n	80005f2 <recalculate_output+0x12>
	}

	// put the packet header in the symbol buffer
	memcpy(symbol_buffer, packet_header, 4*PACKET_HEADER_LEN);
 8000608:	4a5f      	ldr	r2, [pc, #380]	@ (8000788 <recalculate_output+0x1a8>)
 800060a:	4b60      	ldr	r3, [pc, #384]	@ (800078c <recalculate_output+0x1ac>)
 800060c:	4614      	mov	r4, r2
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// put the message in the symbol buffer
	for(int i = 0; i < len; i++) {
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
 8000628:	e026      	b.n	8000678 <recalculate_output+0x98>
		for(int j = 0; j < 8; j++) {
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e01d      	b.n	800066c <recalculate_output+0x8c>
			symbol_buffer[PACKET_HEADER_LEN + 8*i + j] = 2 * (int)(message[i] & 0x01) - 1;
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	005a      	lsls	r2, r3, #1
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	f103 010f 	add.w	r1, r3, #15
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	440b      	add	r3, r1
 800064a:	3a01      	subs	r2, #1
 800064c:	494e      	ldr	r1, [pc, #312]	@ (8000788 <recalculate_output+0x1a8>)
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			message[i] = message[i] >> 1;
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	6879      	ldr	r1, [r7, #4]
 800065e:	440b      	add	r3, r1
 8000660:	0852      	lsrs	r2, r2, #1
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	2b07      	cmp	r3, #7
 8000670:	ddde      	ble.n	8000630 <recalculate_output+0x50>
	for(int i = 0; i < len; i++) {
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	3301      	adds	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	69ba      	ldr	r2, [r7, #24]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbd4      	blt.n	800062a <recalculate_output+0x4a>
		}
	}

    // upsample symbols
    for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	e02b      	b.n	80006de <recalculate_output+0xfe>
	    if (i % SPS == 0) {
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	4b41      	ldr	r3, [pc, #260]	@ (8000790 <recalculate_output+0x1b0>)
 800068a:	fb83 1302 	smull	r1, r3, r3, r2
 800068e:	1159      	asrs	r1, r3, #5
 8000690:	17d3      	asrs	r3, r2, #31
 8000692:	1acb      	subs	r3, r1, r3
 8000694:	2164      	movs	r1, #100	@ 0x64
 8000696:	fb01 f303 	mul.w	r3, r1, r3
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d114      	bne.n	80006ca <recalculate_output+0xea>
		    buf1[i] = (symbol_buffer[i / SPS]);
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000790 <recalculate_output+0x1b0>)
 80006a4:	fb82 1203 	smull	r1, r2, r2, r3
 80006a8:	1152      	asrs	r2, r2, #5
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	4a36      	ldr	r2, [pc, #216]	@ (8000788 <recalculate_output+0x1a8>)
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006bc:	4a35      	ldr	r2, [pc, #212]	@ (8000794 <recalculate_output+0x1b4>)
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	edc3 7a00 	vstr	s15, [r3]
 80006c8:	e006      	b.n	80006d8 <recalculate_output+0xf8>
	    }
	    else {
		    buf1[i] = 0;
 80006ca:	4a32      	ldr	r2, [pc, #200]	@ (8000794 <recalculate_output+0x1b4>)
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < DAC_BUF_LEN; i++) {
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	3301      	adds	r3, #1
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	f640 421b 	movw	r2, #3099	@ 0xc1b
 80006e4:	4293      	cmp	r3, r2
 80006e6:	ddce      	ble.n	8000686 <recalculate_output+0xa6>
	    }
    }

    // filter
    arm_conv_f32(buf1, DAC_BUF_LEN, RRC, RRC_LEN, buf2);
 80006e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <recalculate_output+0x1b8>)
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80006f0:	4a2a      	ldr	r2, [pc, #168]	@ (800079c <recalculate_output+0x1bc>)
 80006f2:	f640 411c 	movw	r1, #3100	@ 0xc1c
 80006f6:	4827      	ldr	r0, [pc, #156]	@ (8000794 <recalculate_output+0x1b4>)
 80006f8:	f009 fd3e 	bl	800a178 <arm_conv_f32>

    // modulate
	for (int i = 0; i < DAC_BUF_LEN + RRC_LEN - 1; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e02b      	b.n	800075a <recalculate_output+0x17a>
		dac_buf[i] = 0x800 + 5.5 * 0x7FF*cos(2 * M_PI * FC / FS * i) *  buf2[i];
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800070c:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000770 <recalculate_output+0x190>
 8000710:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000714:	eeb0 0b47 	vmov.f64	d0, d7
 8000718:	f009 fff6 	bl	800a708 <cos>
 800071c:	eeb0 7b40 	vmov.f64	d7, d0
 8000720:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8000778 <recalculate_output+0x198>
 8000724:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000728:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <recalculate_output+0x1b8>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	edd3 7a00 	vldr	s15, [r3]
 8000734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000738:	ee26 7b07 	vmul.f64	d7, d6, d7
 800073c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8000780 <recalculate_output+0x1a0>
 8000740:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000744:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000748:	ee17 1a90 	vmov	r1, s15
 800074c:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <recalculate_output+0x1c0>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < DAC_BUF_LEN + RRC_LEN - 1; i++) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3301      	adds	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8000760:	dbcf      	blt.n	8000702 <recalculate_output+0x122>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bdb0      	pop	{r4, r5, r7, pc}
 800076c:	f3af 8000 	nop.w
 8000770:	769cf0e0 	.word	0x769cf0e0
 8000774:	3ff41b2f 	.word	0x3ff41b2f
 8000778:	00000000 	.word	0x00000000
 800077c:	40c5fd40 	.word	0x40c5fd40
 8000780:	00000000 	.word	0x00000000
 8000784:	40a00000 	.word	0x40a00000
 8000788:	24003a84 	.word	0x24003a84
 800078c:	0800ba8c 	.word	0x0800ba8c
 8000790:	51eb851f 	.word	0x51eb851f
 8000794:	24003b00 	.word	0x24003b00
 8000798:	24006b70 	.word	0x24006b70
 800079c:	0800b2b8 	.word	0x0800b2b8
 80007a0:	24000000 	.word	0x24000000

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f000 fcf1 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f833 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f9f1 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b6:	f000 f9c7 	bl	8000b48 <MX_DMA_Init>
  MX_TIM6_Init();
 80007ba:	f000 f943 	bl	8000a44 <MX_TIM6_Init>
  MX_DAC1_Init();
 80007be:	f000 f8ef 	bl	80009a0 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 80007c2:	f000 f91f 	bl	8000a04 <MX_OPAMP1_Init>
  MX_USART3_UART_Init();
 80007c6:	f000 f973 	bl	8000ab0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <main+0x5c>)
 80007cc:	f004 fb06 	bl	8004ddc <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim6);
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <main+0x60>)
 80007d2:	f007 fa55 	bl	8007c80 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80007d6:	2100      	movs	r1, #0
 80007d8:	480b      	ldr	r0, [pc, #44]	@ (8000808 <main+0x64>)
 80007da:	f000 fea8 	bl	800152e <HAL_DAC_Start>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg));
 80007de:	2202      	movs	r2, #2
 80007e0:	490a      	ldr	r1, [pc, #40]	@ (800080c <main+0x68>)
 80007e2:	480b      	ldr	r0, [pc, #44]	@ (8000810 <main+0x6c>)
 80007e4:	f007 fcce 	bl	8008184 <HAL_UART_Receive_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buf, DAC_BUF_LEN + RRC_LEN - 1, DAC_ALIGN_12B_R);
 80007e8:	2300      	movs	r3, #0
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80007f0:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <main+0x70>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <main+0x64>)
 80007f6:	f000 fef1 	bl	80015dc <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fa:	bf00      	nop
 80007fc:	e7fd      	b.n	80007fa <main+0x56>
 80007fe:	bf00      	nop
 8000800:	240038f8 	.word	0x240038f8
 8000804:	2400392c 	.word	0x2400392c
 8000808:	2400386c 	.word	0x2400386c
 800080c:	2400a3b0 	.word	0x2400a3b0
 8000810:	24003978 	.word	0x24003978
 8000814:	24000000 	.word	0x24000000

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0a4      	sub	sp, #144	@ 0x90
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000822:	224c      	movs	r2, #76	@ 0x4c
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f009 ff40 	bl	800a6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000830:	2220      	movs	r2, #32
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f009 ff39 	bl	800a6ac <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800084c:	4b52      	ldr	r3, [pc, #328]	@ (8000998 <SystemClock_Config+0x180>)
 800084e:	f04f 32ff 	mov.w	r2, #4294967295
 8000852:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000856:	2004      	movs	r0, #4
 8000858:	f004 fb02 	bl	8004e60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b4e      	ldr	r3, [pc, #312]	@ (800099c <SystemClock_Config+0x184>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a4d      	ldr	r2, [pc, #308]	@ (800099c <SystemClock_Config+0x184>)
 8000866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <SystemClock_Config+0x184>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000878:	bf00      	nop
 800087a:	4b48      	ldr	r3, [pc, #288]	@ (800099c <SystemClock_Config+0x184>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000886:	d1f8      	bne.n	800087a <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000888:	f004 fada 	bl	8004e40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800088c:	4b42      	ldr	r3, [pc, #264]	@ (8000998 <SystemClock_Config+0x180>)
 800088e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000890:	4a41      	ldr	r2, [pc, #260]	@ (8000998 <SystemClock_Config+0x180>)
 8000892:	f023 0318 	bic.w	r3, r3, #24
 8000896:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000898:	232f      	movs	r3, #47	@ 0x2f
 800089a:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008a2:	2301      	movs	r3, #1
 80008a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008aa:	2340      	movs	r3, #64	@ 0x40
 80008ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ae:	2301      	movs	r3, #1
 80008b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008b2:	2301      	movs	r3, #1
 80008b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	2302      	movs	r3, #2
 80008bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80008c2:	2346      	movs	r3, #70	@ 0x46
 80008c4:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ca:	2304      	movs	r3, #4
 80008cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d4:	230c      	movs	r3, #12
 80008d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fb12 	bl	8004f14 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008f6:	f000 f9d9 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	233f      	movs	r3, #63	@ 0x3f
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800090a:	2340      	movs	r3, #64	@ 0x40
 800090c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090e:	2340      	movs	r3, #64	@ 0x40
 8000910:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000918:	2340      	movs	r3, #64	@ 0x40
 800091a:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800091c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000920:	2106      	movs	r1, #6
 8000922:	4618      	mov	r0, r3
 8000924:	f004 ff28 	bl	8005778 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800092e:	f000 f9bd 	bl	8000cac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000932:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f005 f8d3 	bl	8005ae4 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800093e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000942:	2100      	movs	r1, #0
 8000944:	2001      	movs	r0, #1
 8000946:	f005 f8cd 	bl	8005ae4 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <SystemClock_Config+0x180>)
 800094c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000950:	4a11      	ldr	r2, [pc, #68]	@ (8000998 <SystemClock_Config+0x180>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <SystemClock_Config+0x180>)
 800095c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800096c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000970:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8000976:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800097a:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800097c:	2322      	movs	r3, #34	@ 0x22
 800097e:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000980:	2320      	movs	r3, #32
 8000982:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4618      	mov	r0, r3
 800098a:	f006 ff67 	bl	800785c <HAL_RCCEx_CRSConfig>
}
 800098e:	bf00      	nop
 8000990:	3790      	adds	r7, #144	@ 0x90
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	58024400 	.word	0x58024400
 800099c:	58024800 	.word	0x58024800

080009a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2224      	movs	r2, #36	@ 0x24
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f009 fe7d 	bl	800a6ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_DAC1_Init+0x5c>)
 80009b4:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <MX_DAC1_Init+0x60>)
 80009b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009b8:	4810      	ldr	r0, [pc, #64]	@ (80009fc <MX_DAC1_Init+0x5c>)
 80009ba:	f000 fd96 	bl	80014ea <HAL_DAC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009c4:	f000 f972 	bl	8000cac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80009cc:	2316      	movs	r3, #22
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80009d0:	2302      	movs	r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80009d4:	2302      	movs	r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <MX_DAC1_Init+0x5c>)
 80009e4:	f000 fed8 	bl	8001798 <HAL_DAC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f95d 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2400386c 	.word	0x2400386c
 8000a00:	40007400 	.word	0x40007400

08000a04 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_OPAMP1_Init+0x38>)
 8000a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <MX_OPAMP1_Init+0x3c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_OPAMP1_Init+0x38>)
 8000a10:	2260      	movs	r2, #96	@ 0x60
 8000a12:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC_CH;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_OPAMP1_Init+0x38>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_OPAMP1_Init+0x38>)
 8000a1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a20:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_OPAMP1_Init+0x38>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_OPAMP1_Init+0x38>)
 8000a2a:	f004 f90f 	bl	8004c4c <HAL_OPAMP_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_OPAMP1_Init+0x34>
  {
    Error_Handler();
 8000a34:	f000 f93a 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	240038f8 	.word	0x240038f8
 8000a40:	40009000 	.word	0x40009000

08000a44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_TIM6_Init+0x64>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <MX_TIM6_Init+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_TIM6_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_TIM6_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55;
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <MX_TIM6_Init+0x64>)
 8000a68:	2237      	movs	r2, #55	@ 0x37
 8000a6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_TIM6_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a72:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <MX_TIM6_Init+0x64>)
 8000a74:	f007 f8ac 	bl	8007bd0 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a7e:	f000 f915 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a82:	2320      	movs	r3, #32
 8000a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	@ (8000aa8 <MX_TIM6_Init+0x64>)
 8000a90:	f007 fa0c 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a9a:	f000 f907 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2400392c 	.word	0x2400392c
 8000aac:	40001000 	.word	0x40001000

08000ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000ab6:	4a23      	ldr	r2, [pc, #140]	@ (8000b44 <MX_USART3_UART_Init+0x94>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aba:	4b21      	ldr	r3, [pc, #132]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af2:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af8:	4811      	ldr	r0, [pc, #68]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000afa:	f007 fa65 	bl	8007fc8 <HAL_UART_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 f8d2 	bl	8000cac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000b0c:	f009 fa69 	bl	8009fe2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b16:	f000 f8c9 	bl	8000cac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000b1e:	f009 fa9e 	bl	800a05e <HAL_UARTEx_SetRxFifoThreshold>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f000 f8c0 	bl	8000cac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <MX_USART3_UART_Init+0x90>)
 8000b2e:	f009 fa1f 	bl	8009f70 <HAL_UARTEx_DisableFifoMode>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b38:	f000 f8b8 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	24003978 	.word	0x24003978
 8000b44:	40004800 	.word	0x40004800

08000b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_DMA_Init+0x4c>)
 8000b50:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b54:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <MX_DMA_Init+0x4c>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <MX_DMA_Init+0x4c>)
 8000b60:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	200b      	movs	r0, #11
 8000b72:	f000 fc86 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b76:	200b      	movs	r0, #11
 8000b78:	f000 fc9d 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	200c      	movs	r0, #12
 8000b82:	f000 fc7e 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b86:	200c      	movs	r0, #12
 8000b88:	f000 fc95 	bl	80014b6 <HAL_NVIC_EnableIRQ>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58024400 	.word	0x58024400

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b31      	ldr	r3, [pc, #196]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bcc:	4b29      	ldr	r3, [pc, #164]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd2:	4a28      	ldr	r2, [pc, #160]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bdc:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bf0:	4a20      	ldr	r2, [pc, #128]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000bfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c00:	f003 0308 	and.w	r3, r3, #8
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000c0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c0e:	4a19      	ldr	r2, [pc, #100]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <MX_GPIO_Init+0xdc>)
 8000c1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_GPIO_Init+0xe0>)
 8000c44:	f003 fe52 	bl	80048ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_GPIO_Init+0xe4>)
 8000c66:	f003 fe41 	bl	80048ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	@ 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020000 	.word	0x58020000

08000c80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	// TODO: Call a function to generate the waveform corresponding to the new message!
	HAL_UART_Transmit(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg), 1);
 8000c88:	2301      	movs	r3, #1
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	4905      	ldr	r1, [pc, #20]	@ (8000ca4 <HAL_UART_RxCpltCallback+0x24>)
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <HAL_UART_RxCpltCallback+0x28>)
 8000c90:	f007 f9ea 	bl	8008068 <HAL_UART_Transmit>
	recalculate_output((uint8_t *) rx_msg, sizeof(rx_msg));
 8000c94:	2102      	movs	r1, #2
 8000c96:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <HAL_UART_RxCpltCallback+0x24>)
 8000c98:	f7ff fca2 	bl	80005e0 <recalculate_output>

}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2400a3b0 	.word	0x2400a3b0
 8000ca8:	24003978 	.word	0x24003978

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_MspInit+0x30>)
 8000cc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000cc4:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <HAL_MspInit+0x30>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_MspInit+0x30>)
 8000cd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	58024400 	.word	0x58024400

08000cec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a23      	ldr	r2, [pc, #140]	@ (8000d88 <HAL_DAC_MspInit+0x9c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d13f      	bne.n	8000d7e <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000cfe:	4b23      	ldr	r3, [pc, #140]	@ (8000d8c <HAL_DAC_MspInit+0xa0>)
 8000d00:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d04:	4a21      	ldr	r2, [pc, #132]	@ (8000d8c <HAL_DAC_MspInit+0xa0>)
 8000d06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d0a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <HAL_DAC_MspInit+0xa0>)
 8000d10:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <HAL_DAC_MspInit+0xa8>)
 8000d20:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d24:	2243      	movs	r2, #67	@ 0x43
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d28:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d2a:	2240      	movs	r2, #64	@ 0x40
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d3a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d42:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d4a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d52:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d5a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000d62:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d64:	f000 fee4 	bl	8001b30 <HAL_DMA_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_DAC_MspInit+0x86>
    {
      Error_Handler();
 8000d6e:	f7ff ff9d 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <HAL_DAC_MspInit+0xa4>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40007400 	.word	0x40007400
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	24003880 	.word	0x24003880
 8000d94:	40020010 	.word	0x40020010

08000d98 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a18      	ldr	r2, [pc, #96]	@ (8000e18 <HAL_OPAMP_MspInit+0x80>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d129      	bne.n	8000e0e <HAL_OPAMP_MspInit+0x76>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <HAL_OPAMP_MspInit+0x84>)
 8000dbc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000dc0:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <HAL_OPAMP_MspInit+0x84>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <HAL_OPAMP_MspInit+0x84>)
 8000dcc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <HAL_OPAMP_MspInit+0x84>)
 8000dda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dde:	4a0f      	ldr	r2, [pc, #60]	@ (8000e1c <HAL_OPAMP_MspInit+0x84>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <HAL_OPAMP_MspInit+0x84>)
 8000dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000df6:	2310      	movs	r3, #16
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <HAL_OPAMP_MspInit+0x88>)
 8000e0a:	f003 fd6f 	bl	80048ec <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40009000 	.word	0x40009000
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020800 	.word	0x58020800

08000e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <HAL_TIM_Base_MspInit+0x3c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_TIM_Base_MspInit+0x40>)
 8000e38:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e3c:	4a09      	ldr	r2, [pc, #36]	@ (8000e64 <HAL_TIM_Base_MspInit+0x40>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <HAL_TIM_Base_MspInit+0x40>)
 8000e48:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40001000 	.word	0x40001000
 8000e64:	58024400 	.word	0x58024400

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	22c0      	movs	r2, #192	@ 0xc0
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f009 fc0f 	bl	800a6ac <memset>
  if(huart->Instance==USART3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a42      	ldr	r2, [pc, #264]	@ (8000f9c <HAL_UART_MspInit+0x134>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d17d      	bne.n	8000f94 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e98:	f04f 0202 	mov.w	r2, #2
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 f858 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eba:	f7ff fef7 	bl	8000cac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ebe:	4b38      	ldr	r3, [pc, #224]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000ec0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ec4:	4a36      	ldr	r2, [pc, #216]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000ec6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eca:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ece:	4b34      	ldr	r3, [pc, #208]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000ed0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000edc:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000ede:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eec:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000eee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000efa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f14:	2307      	movs	r3, #7
 8000f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000f22:	f003 fce3 	bl	80048ec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f28:	4a20      	ldr	r2, [pc, #128]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f2e:	222d      	movs	r2, #45	@ 0x2d
 8000f30:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f44:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f58:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f66:	4810      	ldr	r0, [pc, #64]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f68:	f000 fde2 	bl	8001b30 <HAL_DMA_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f72:	f7ff fe9b 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2027      	movs	r0, #39	@ 0x27
 8000f8a:	f000 fa7a 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f8e:	2027      	movs	r0, #39	@ 0x27
 8000f90:	f000 fa91 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	37e8      	adds	r7, #232	@ 0xe8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40004800 	.word	0x40004800
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	58020c00 	.word	0x58020c00
 8000fa8:	24003a0c 	.word	0x24003a0c
 8000fac:	40020028 	.word	0x40020028

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f935 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <DMA1_Stream0_IRQHandler+0x10>)
 8001016:	f002 f8e7 	bl	80031e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	24003880 	.word	0x24003880

08001024 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <DMA1_Stream1_IRQHandler+0x10>)
 800102a:	f002 f8dd 	bl	80031e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	24003a0c 	.word	0x24003a0c

08001038 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <USART3_IRQHandler+0x10>)
 800103e:	f007 f8ed 	bl	800821c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	24003978 	.word	0x24003978

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001050:	4b32      	ldr	r3, [pc, #200]	@ (800111c <SystemInit+0xd0>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a31      	ldr	r2, [pc, #196]	@ (800111c <SystemInit+0xd0>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001060:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <SystemInit+0xd4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	2b02      	cmp	r3, #2
 800106a:	d807      	bhi.n	800107c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800106c:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <SystemInit+0xd4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f023 030f 	bic.w	r3, r3, #15
 8001074:	4a2a      	ldr	r2, [pc, #168]	@ (8001120 <SystemInit+0xd4>)
 8001076:	f043 0303 	orr.w	r3, r3, #3
 800107a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800107c:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <SystemInit+0xd8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a28      	ldr	r2, [pc, #160]	@ (8001124 <SystemInit+0xd8>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001088:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <SystemInit+0xd8>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <SystemInit+0xd8>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4924      	ldr	r1, [pc, #144]	@ (8001124 <SystemInit+0xd8>)
 8001094:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <SystemInit+0xdc>)
 8001096:	4013      	ands	r3, r2
 8001098:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <SystemInit+0xd4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <SystemInit+0xd4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 030f 	bic.w	r3, r3, #15
 80010ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <SystemInit+0xd4>)
 80010b0:	f043 0303 	orr.w	r3, r3, #3
 80010b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <SystemInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <SystemInit+0xd8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <SystemInit+0xd8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <SystemInit+0xd8>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <SystemInit+0xe0>)
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <SystemInit+0xd8>)
 80010d0:	4a17      	ldr	r2, [pc, #92]	@ (8001130 <SystemInit+0xe4>)
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <SystemInit+0xd8>)
 80010d6:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <SystemInit+0xe8>)
 80010d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010da:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <SystemInit+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010e0:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <SystemInit+0xd8>)
 80010e2:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <SystemInit+0xe8>)
 80010e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <SystemInit+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <SystemInit+0xd8>)
 80010ee:	4a11      	ldr	r2, [pc, #68]	@ (8001134 <SystemInit+0xe8>)
 80010f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <SystemInit+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <SystemInit+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <SystemInit+0xd8>)
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001102:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <SystemInit+0xd8>)
 8001106:	2200      	movs	r2, #0
 8001108:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <SystemInit+0xec>)
 800110c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001110:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	52002000 	.word	0x52002000
 8001124:	58024400 	.word	0x58024400
 8001128:	eaf6ed7f 	.word	0xeaf6ed7f
 800112c:	02020200 	.word	0x02020200
 8001130:	01ff0000 	.word	0x01ff0000
 8001134:	01010280 	.word	0x01010280
 8001138:	52004000 	.word	0x52004000

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001174 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001140:	f7ff ff84 	bl	800104c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	@ (800117c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	@ (8001188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800116a:	f009 faa7 	bl	800a6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fb19 	bl	80007a4 <main>
  bx  lr
 8001172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001178:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800117c:	24003850 	.word	0x24003850
  ldr r2, =_sidata
 8001180:	0800bcf0 	.word	0x0800bcf0
  ldr r2, =_sbss
 8001184:	24003850 	.word	0x24003850
  ldr r4, =_ebss
 8001188:	2400a3b8 	.word	0x2400a3b8

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001196:	2003      	movs	r0, #3
 8001198:	f000 f968 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800119c:	f004 fd0c 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 80011a0:	4602      	mov	r2, r0
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_Init+0x68>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	4913      	ldr	r1, [pc, #76]	@ (80011fc <HAL_Init+0x6c>)
 80011ae:	5ccb      	ldrb	r3, [r1, r3]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_Init+0x68>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <HAL_Init+0x6c>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <HAL_Init+0x70>)
 80011d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <HAL_Init+0x74>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f814 	bl	8001208 <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e002      	b.n	80011f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ea:	f7ff fd65 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400
 80011fc:	0800bac8 	.word	0x0800bac8
 8001200:	24003844 	.word	0x24003844
 8001204:	24003840 	.word	0x24003840

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_InitTick+0x60>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e021      	b.n	8001260 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <HAL_InitTick+0x64>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <HAL_InitTick+0x60>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f94d 	bl	80014d2 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f917 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_InitTick+0x68>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2400384c 	.word	0x2400384c
 800126c:	24003840 	.word	0x24003840
 8001270:	24003848 	.word	0x24003848

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2400384c 	.word	0x2400384c
 8001298:	2400a3b4 	.word	0x2400a3b4

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2400a3b4 	.word	0x2400a3b4

080012b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_GetREVID+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0c1b      	lsrs	r3, r3, #16
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	5c001000 	.word	0x5c001000

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	@ (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0000 	.word	0x05fa0000

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	@ (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	@ (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff40 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff90 	bl	80013c0 <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff5f 	bl	800136c <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff33 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffa4 	bl	8001428 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e014      	b.n	8001526 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	791b      	ldrb	r3, [r3, #4]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fbed 	bl	8000cec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2202      	movs	r2, #2
 8001516:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e046      	b.n	80015d0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	795b      	ldrb	r3, [r3, #5]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_DAC_Start+0x20>
 800154a:	2302      	movs	r3, #2
 800154c:	e040      	b.n	80015d0 <HAL_DAC_Start+0xa2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2201      	movs	r2, #1
 8001568:	409a      	lsls	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10f      	bne.n	8001598 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001582:	2b02      	cmp	r3, #2
 8001584:	d11d      	bne.n	80015c2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	e014      	b.n	80015c2 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2102      	movs	r1, #2
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d107      	bne.n	80015c2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0202 	orr.w	r2, r2, #2
 80015c0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0a2      	b.n	800173a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	795b      	ldrb	r3, [r3, #5]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_DAC_Start_DMA+0x24>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e09c      	b.n	800173a <HAL_DAC_Start_DMA+0x15e>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2202      	movs	r2, #2
 800160a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d129      	bne.n	8001666 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <HAL_DAC_Start_DMA+0x168>)
 8001618:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	4a4a      	ldr	r2, [pc, #296]	@ (8001748 <HAL_DAC_Start_DMA+0x16c>)
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4a49      	ldr	r2, [pc, #292]	@ (800174c <HAL_DAC_Start_DMA+0x170>)
 8001628:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001638:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_DAC_Start_DMA+0x6c>
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d005      	beq.n	8001652 <HAL_DAC_Start_DMA+0x76>
 8001646:	e009      	b.n	800165c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3308      	adds	r3, #8
 800164e:	613b      	str	r3, [r7, #16]
        break;
 8001650:	e033      	b.n	80016ba <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	330c      	adds	r3, #12
 8001658:	613b      	str	r3, [r7, #16]
        break;
 800165a:	e02e      	b.n	80016ba <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3310      	adds	r3, #16
 8001662:	613b      	str	r3, [r7, #16]
        break;
 8001664:	e029      	b.n	80016ba <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	4a39      	ldr	r2, [pc, #228]	@ (8001750 <HAL_DAC_Start_DMA+0x174>)
 800166c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	4a38      	ldr	r2, [pc, #224]	@ (8001754 <HAL_DAC_Start_DMA+0x178>)
 8001674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	4a37      	ldr	r2, [pc, #220]	@ (8001758 <HAL_DAC_Start_DMA+0x17c>)
 800167c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800168c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_DAC_Start_DMA+0xc0>
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	2b04      	cmp	r3, #4
 8001698:	d005      	beq.n	80016a6 <HAL_DAC_Start_DMA+0xca>
 800169a:	e009      	b.n	80016b0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3314      	adds	r3, #20
 80016a2:	613b      	str	r3, [r7, #16]
        break;
 80016a4:	e009      	b.n	80016ba <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3318      	adds	r3, #24
 80016ac:	613b      	str	r3, [r7, #16]
        break;
 80016ae:	e004      	b.n	80016ba <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	331c      	adds	r3, #28
 80016b6:	613b      	str	r3, [r7, #16]
        break;
 80016b8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d111      	bne.n	80016e4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6898      	ldr	r0, [r3, #8]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	f000 fdb7 	bl	800224c <HAL_DMA_Start_IT>
 80016de:	4603      	mov	r3, r0
 80016e0:	75fb      	strb	r3, [r7, #23]
 80016e2:	e010      	b.n	8001706 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80016f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	68d8      	ldr	r0, [r3, #12]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	f000 fda5 	bl	800224c <HAL_DMA_Start_IT>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6819      	ldr	r1, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	2201      	movs	r2, #1
 8001720:	409a      	lsls	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e005      	b.n	8001738 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	f043 0204 	orr.w	r2, r3, #4
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001738:	7dfb      	ldrb	r3, [r7, #23]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	08001a1d 	.word	0x08001a1d
 8001748:	08001a3f 	.word	0x08001a3f
 800174c:	08001a5b 	.word	0x08001a5b
 8001750:	08001ac5 	.word	0x08001ac5
 8001754:	08001ae7 	.word	0x08001ae7
 8001758:	08001b03 	.word	0x08001b03

0800175c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <HAL_DAC_ConfigChannel+0x1e>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e12a      	b.n	8001a10 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	795b      	ldrb	r3, [r3, #5]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_DAC_ConfigChannel+0x2e>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e124      	b.n	8001a10 <HAL_DAC_ConfigChannel+0x278>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2202      	movs	r2, #2
 80017d0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d17a      	bne.n	80018d0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80017da:	f7ff fd5f 	bl	800129c <HAL_GetTick>
 80017de:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d13d      	bne.n	8001862 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017e6:	e018      	b.n	800181a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017e8:	f7ff fd58 	bl	800129c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d911      	bls.n	800181a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017fc:	4b86      	ldr	r3, [pc, #536]	@ (8001a18 <HAL_DAC_ConfigChannel+0x280>)
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f043 0208 	orr.w	r2, r3, #8
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2203      	movs	r2, #3
 8001814:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0fa      	b.n	8001a10 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001820:	4b7d      	ldr	r3, [pc, #500]	@ (8001a18 <HAL_DAC_ConfigChannel+0x280>)
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1df      	bne.n	80017e8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	6992      	ldr	r2, [r2, #24]
 8001830:	641a      	str	r2, [r3, #64]	@ 0x40
 8001832:	e020      	b.n	8001876 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001834:	f7ff fd32 	bl	800129c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d90f      	bls.n	8001862 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001848:	2b00      	cmp	r3, #0
 800184a:	da0a      	bge.n	8001862 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f043 0208 	orr.w	r2, r3, #8
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2203      	movs	r2, #3
 800185c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0d6      	b.n	8001a10 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001868:	2b00      	cmp	r3, #0
 800186a:	dbe3      	blt.n	8001834 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	6992      	ldr	r2, [r2, #24]
 8001874:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	ea02 0103 	and.w	r1, r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	409a      	lsls	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	21ff      	movs	r1, #255	@ 0xff
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	ea02 0103 	and.w	r1, r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d11d      	bne.n	8001914 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018de:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	221f      	movs	r2, #31
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2207      	movs	r2, #7
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d102      	bne.n	800193e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
 800193c:	e00f      	b.n	800195e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d102      	bne.n	800194c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001946:	2301      	movs	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
 800194a:	e008      	b.n	800195e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001954:	2301      	movs	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
 8001958:	e001      	b.n	800195e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4313      	orrs	r3, r2
 8001968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43da      	mvns	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	400a      	ands	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	22c0      	movs	r2, #192	@ 0xc0
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	400a      	ands	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3728      	adds	r7, #40	@ 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20008000 	.word	0x20008000

08001a1c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a28:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff fe96 	bl	800175c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	711a      	strb	r2, [r3, #4]
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff fe8f 	bl	8001770 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f043 0204 	orr.w	r2, r3, #4
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fe85 	bl	8001784 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	711a      	strb	r2, [r3, #4]
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff ffd8 	bl	8001a88 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	711a      	strb	r2, [r3, #4]
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff ffd1 	bl	8001a9c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f043 0204 	orr.w	r2, r3, #4
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff ffc7 	bl	8001ab0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	711a      	strb	r2, [r3, #4]
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff fbb0 	bl	800129c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e37d      	b.n	8002244 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a66      	ldr	r2, [pc, #408]	@ (8001ce8 <HAL_DMA_Init+0x1b8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d04a      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a65      	ldr	r2, [pc, #404]	@ (8001cec <HAL_DMA_Init+0x1bc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d045      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a63      	ldr	r2, [pc, #396]	@ (8001cf0 <HAL_DMA_Init+0x1c0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d040      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a62      	ldr	r2, [pc, #392]	@ (8001cf4 <HAL_DMA_Init+0x1c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d03b      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a60      	ldr	r2, [pc, #384]	@ (8001cf8 <HAL_DMA_Init+0x1c8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d036      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001cfc <HAL_DMA_Init+0x1cc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d031      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5d      	ldr	r2, [pc, #372]	@ (8001d00 <HAL_DMA_Init+0x1d0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d02c      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5c      	ldr	r2, [pc, #368]	@ (8001d04 <HAL_DMA_Init+0x1d4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d027      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8001d08 <HAL_DMA_Init+0x1d8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d022      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a59      	ldr	r2, [pc, #356]	@ (8001d0c <HAL_DMA_Init+0x1dc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d01d      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a57      	ldr	r2, [pc, #348]	@ (8001d10 <HAL_DMA_Init+0x1e0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d018      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a56      	ldr	r2, [pc, #344]	@ (8001d14 <HAL_DMA_Init+0x1e4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a54      	ldr	r2, [pc, #336]	@ (8001d18 <HAL_DMA_Init+0x1e8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00e      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a53      	ldr	r2, [pc, #332]	@ (8001d1c <HAL_DMA_Init+0x1ec>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d009      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a51      	ldr	r2, [pc, #324]	@ (8001d20 <HAL_DMA_Init+0x1f0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d004      	beq.n	8001be8 <HAL_DMA_Init+0xb8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a50      	ldr	r2, [pc, #320]	@ (8001d24 <HAL_DMA_Init+0x1f4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_DMA_Init+0xbc>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_DMA_Init+0xbe>
 8001bec:	2300      	movs	r3, #0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 813c 	beq.w	8001e6c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a37      	ldr	r2, [pc, #220]	@ (8001ce8 <HAL_DMA_Init+0x1b8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d04a      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a36      	ldr	r2, [pc, #216]	@ (8001cec <HAL_DMA_Init+0x1bc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d045      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a34      	ldr	r2, [pc, #208]	@ (8001cf0 <HAL_DMA_Init+0x1c0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d040      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a33      	ldr	r2, [pc, #204]	@ (8001cf4 <HAL_DMA_Init+0x1c4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d03b      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a31      	ldr	r2, [pc, #196]	@ (8001cf8 <HAL_DMA_Init+0x1c8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d036      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a30      	ldr	r2, [pc, #192]	@ (8001cfc <HAL_DMA_Init+0x1cc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d031      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2e      	ldr	r2, [pc, #184]	@ (8001d00 <HAL_DMA_Init+0x1d0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02c      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d04 <HAL_DMA_Init+0x1d4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d027      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2b      	ldr	r2, [pc, #172]	@ (8001d08 <HAL_DMA_Init+0x1d8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d022      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a2a      	ldr	r2, [pc, #168]	@ (8001d0c <HAL_DMA_Init+0x1dc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d01d      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a28      	ldr	r2, [pc, #160]	@ (8001d10 <HAL_DMA_Init+0x1e0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d018      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a27      	ldr	r2, [pc, #156]	@ (8001d14 <HAL_DMA_Init+0x1e4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d013      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a25      	ldr	r2, [pc, #148]	@ (8001d18 <HAL_DMA_Init+0x1e8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00e      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a24      	ldr	r2, [pc, #144]	@ (8001d1c <HAL_DMA_Init+0x1ec>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a22      	ldr	r2, [pc, #136]	@ (8001d20 <HAL_DMA_Init+0x1f0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d004      	beq.n	8001ca4 <HAL_DMA_Init+0x174>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	@ (8001d24 <HAL_DMA_Init+0x1f4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d108      	bne.n	8001cb6 <HAL_DMA_Init+0x186>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e007      	b.n	8001cc6 <HAL_DMA_Init+0x196>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cc6:	e02f      	b.n	8001d28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc8:	f7ff fae8 	bl	800129c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d928      	bls.n	8001d28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e2ad      	b.n	8002244 <HAL_DMA_Init+0x714>
 8001ce8:	40020010 	.word	0x40020010
 8001cec:	40020028 	.word	0x40020028
 8001cf0:	40020040 	.word	0x40020040
 8001cf4:	40020058 	.word	0x40020058
 8001cf8:	40020070 	.word	0x40020070
 8001cfc:	40020088 	.word	0x40020088
 8001d00:	400200a0 	.word	0x400200a0
 8001d04:	400200b8 	.word	0x400200b8
 8001d08:	40020410 	.word	0x40020410
 8001d0c:	40020428 	.word	0x40020428
 8001d10:	40020440 	.word	0x40020440
 8001d14:	40020458 	.word	0x40020458
 8001d18:	40020470 	.word	0x40020470
 8001d1c:	40020488 	.word	0x40020488
 8001d20:	400204a0 	.word	0x400204a0
 8001d24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1c8      	bne.n	8001cc8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4b73      	ldr	r3, [pc, #460]	@ (8001f10 <HAL_DMA_Init+0x3e0>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4313      	orrs	r3, r2
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b28      	cmp	r3, #40	@ 0x28
 8001d92:	d903      	bls.n	8001d9c <HAL_DMA_Init+0x26c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d9a:	d91f      	bls.n	8001ddc <HAL_DMA_Init+0x2ac>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b3e      	cmp	r3, #62	@ 0x3e
 8001da2:	d903      	bls.n	8001dac <HAL_DMA_Init+0x27c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b42      	cmp	r3, #66	@ 0x42
 8001daa:	d917      	bls.n	8001ddc <HAL_DMA_Init+0x2ac>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b46      	cmp	r3, #70	@ 0x46
 8001db2:	d903      	bls.n	8001dbc <HAL_DMA_Init+0x28c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b48      	cmp	r3, #72	@ 0x48
 8001dba:	d90f      	bls.n	8001ddc <HAL_DMA_Init+0x2ac>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b4e      	cmp	r3, #78	@ 0x4e
 8001dc2:	d903      	bls.n	8001dcc <HAL_DMA_Init+0x29c>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b52      	cmp	r3, #82	@ 0x52
 8001dca:	d907      	bls.n	8001ddc <HAL_DMA_Init+0x2ac>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b73      	cmp	r3, #115	@ 0x73
 8001dd2:	d905      	bls.n	8001de0 <HAL_DMA_Init+0x2b0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b77      	cmp	r3, #119	@ 0x77
 8001dda:	d801      	bhi.n	8001de0 <HAL_DMA_Init+0x2b0>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_DMA_Init+0x2b2>
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f023 0307 	bic.w	r3, r3, #7
 8001e04:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d117      	bne.n	8001e48 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00e      	beq.n	8001e48 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f002 fbd4 	bl	80045d8 <DMA_CheckFifoParam>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2240      	movs	r2, #64	@ 0x40
 8001e3a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e1fd      	b.n	8002244 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f002 fb0f 	bl	8004474 <DMA_CalcBaseAndBitshift>
 8001e56:	4603      	mov	r3, r0
 8001e58:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	223f      	movs	r2, #63	@ 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	e0fd      	b.n	8002068 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a28      	ldr	r2, [pc, #160]	@ (8001f14 <HAL_DMA_Init+0x3e4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d04a      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a27      	ldr	r2, [pc, #156]	@ (8001f18 <HAL_DMA_Init+0x3e8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d045      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <HAL_DMA_Init+0x3ec>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d040      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <HAL_DMA_Init+0x3f0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d03b      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a22      	ldr	r2, [pc, #136]	@ (8001f24 <HAL_DMA_Init+0x3f4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d036      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a21      	ldr	r2, [pc, #132]	@ (8001f28 <HAL_DMA_Init+0x3f8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d031      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1f      	ldr	r2, [pc, #124]	@ (8001f2c <HAL_DMA_Init+0x3fc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d02c      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <HAL_DMA_Init+0x400>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d027      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f34 <HAL_DMA_Init+0x404>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d022      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_DMA_Init+0x408>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d01d      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	@ (8001f3c <HAL_DMA_Init+0x40c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d018      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a18      	ldr	r2, [pc, #96]	@ (8001f40 <HAL_DMA_Init+0x410>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d013      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a16      	ldr	r2, [pc, #88]	@ (8001f44 <HAL_DMA_Init+0x414>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00e      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a15      	ldr	r2, [pc, #84]	@ (8001f48 <HAL_DMA_Init+0x418>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <HAL_DMA_Init+0x41c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_DMA_Init+0x3dc>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <HAL_DMA_Init+0x420>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d123      	bne.n	8001f54 <HAL_DMA_Init+0x424>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e022      	b.n	8001f56 <HAL_DMA_Init+0x426>
 8001f10:	fe10803f 	.word	0xfe10803f
 8001f14:	48022c08 	.word	0x48022c08
 8001f18:	48022c1c 	.word	0x48022c1c
 8001f1c:	48022c30 	.word	0x48022c30
 8001f20:	48022c44 	.word	0x48022c44
 8001f24:	48022c58 	.word	0x48022c58
 8001f28:	48022c6c 	.word	0x48022c6c
 8001f2c:	48022c80 	.word	0x48022c80
 8001f30:	48022c94 	.word	0x48022c94
 8001f34:	58025408 	.word	0x58025408
 8001f38:	5802541c 	.word	0x5802541c
 8001f3c:	58025430 	.word	0x58025430
 8001f40:	58025444 	.word	0x58025444
 8001f44:	58025458 	.word	0x58025458
 8001f48:	5802546c 	.word	0x5802546c
 8001f4c:	58025480 	.word	0x58025480
 8001f50:	58025494 	.word	0x58025494
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d07d      	beq.n	8002056 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7f      	ldr	r2, [pc, #508]	@ (800215c <HAL_DMA_Init+0x62c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d021      	beq.n	8001fa8 <HAL_DMA_Init+0x478>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a7d      	ldr	r2, [pc, #500]	@ (8002160 <HAL_DMA_Init+0x630>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01c      	beq.n	8001fa8 <HAL_DMA_Init+0x478>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7c      	ldr	r2, [pc, #496]	@ (8002164 <HAL_DMA_Init+0x634>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d017      	beq.n	8001fa8 <HAL_DMA_Init+0x478>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a7a      	ldr	r2, [pc, #488]	@ (8002168 <HAL_DMA_Init+0x638>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d012      	beq.n	8001fa8 <HAL_DMA_Init+0x478>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a79      	ldr	r2, [pc, #484]	@ (800216c <HAL_DMA_Init+0x63c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_DMA_Init+0x478>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a77      	ldr	r2, [pc, #476]	@ (8002170 <HAL_DMA_Init+0x640>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d008      	beq.n	8001fa8 <HAL_DMA_Init+0x478>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a76      	ldr	r2, [pc, #472]	@ (8002174 <HAL_DMA_Init+0x644>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d003      	beq.n	8001fa8 <HAL_DMA_Init+0x478>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a74      	ldr	r2, [pc, #464]	@ (8002178 <HAL_DMA_Init+0x648>)
 8001fa6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4b6e      	ldr	r3, [pc, #440]	@ (800217c <HAL_DMA_Init+0x64c>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b40      	cmp	r3, #64	@ 0x40
 8001fce:	d008      	beq.n	8001fe2 <HAL_DMA_Init+0x4b2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b80      	cmp	r3, #128	@ 0x80
 8001fd6:	d102      	bne.n	8001fde <HAL_DMA_Init+0x4ae>
 8001fd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fdc:	e002      	b.n	8001fe4 <HAL_DMA_Init+0x4b4>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_DMA_Init+0x4b4>
 8001fe2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68d2      	ldr	r2, [r2, #12]
 8001fe8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ff2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ffa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002002:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800200a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002012:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4b55      	ldr	r3, [pc, #340]	@ (8002180 <HAL_DMA_Init+0x650>)
 800202a:	4413      	add	r3, r2
 800202c:	4a55      	ldr	r2, [pc, #340]	@ (8002184 <HAL_DMA_Init+0x654>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	009a      	lsls	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f002 fa1a 	bl	8004474 <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2201      	movs	r2, #1
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	e008      	b.n	8002068 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2240      	movs	r2, #64	@ 0x40
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2203      	movs	r2, #3
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0ed      	b.n	8002244 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a46      	ldr	r2, [pc, #280]	@ (8002188 <HAL_DMA_Init+0x658>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d072      	beq.n	8002158 <HAL_DMA_Init+0x628>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a45      	ldr	r2, [pc, #276]	@ (800218c <HAL_DMA_Init+0x65c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d06d      	beq.n	8002158 <HAL_DMA_Init+0x628>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a43      	ldr	r2, [pc, #268]	@ (8002190 <HAL_DMA_Init+0x660>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d068      	beq.n	8002158 <HAL_DMA_Init+0x628>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a42      	ldr	r2, [pc, #264]	@ (8002194 <HAL_DMA_Init+0x664>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d063      	beq.n	8002158 <HAL_DMA_Init+0x628>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a40      	ldr	r2, [pc, #256]	@ (8002198 <HAL_DMA_Init+0x668>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d05e      	beq.n	8002158 <HAL_DMA_Init+0x628>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a3f      	ldr	r2, [pc, #252]	@ (800219c <HAL_DMA_Init+0x66c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d059      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a3d      	ldr	r2, [pc, #244]	@ (80021a0 <HAL_DMA_Init+0x670>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d054      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a3c      	ldr	r2, [pc, #240]	@ (80021a4 <HAL_DMA_Init+0x674>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04f      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3a      	ldr	r2, [pc, #232]	@ (80021a8 <HAL_DMA_Init+0x678>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a39      	ldr	r2, [pc, #228]	@ (80021ac <HAL_DMA_Init+0x67c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a37      	ldr	r2, [pc, #220]	@ (80021b0 <HAL_DMA_Init+0x680>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a36      	ldr	r2, [pc, #216]	@ (80021b4 <HAL_DMA_Init+0x684>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a34      	ldr	r2, [pc, #208]	@ (80021b8 <HAL_DMA_Init+0x688>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <HAL_DMA_Init+0x68c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a31      	ldr	r2, [pc, #196]	@ (80021c0 <HAL_DMA_Init+0x690>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_Init+0x628>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a30      	ldr	r2, [pc, #192]	@ (80021c4 <HAL_DMA_Init+0x694>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_Init+0x628>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a13      	ldr	r2, [pc, #76]	@ (800215c <HAL_DMA_Init+0x62c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Init+0x628>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <HAL_DMA_Init+0x630>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_Init+0x628>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a10      	ldr	r2, [pc, #64]	@ (8002164 <HAL_DMA_Init+0x634>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_Init+0x628>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0f      	ldr	r2, [pc, #60]	@ (8002168 <HAL_DMA_Init+0x638>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_Init+0x628>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <HAL_DMA_Init+0x63c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_Init+0x628>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <HAL_DMA_Init+0x640>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_Init+0x628>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <HAL_DMA_Init+0x644>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Init+0x628>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <HAL_DMA_Init+0x648>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d137      	bne.n	80021c8 <HAL_DMA_Init+0x698>
 8002158:	2301      	movs	r3, #1
 800215a:	e036      	b.n	80021ca <HAL_DMA_Init+0x69a>
 800215c:	58025408 	.word	0x58025408
 8002160:	5802541c 	.word	0x5802541c
 8002164:	58025430 	.word	0x58025430
 8002168:	58025444 	.word	0x58025444
 800216c:	58025458 	.word	0x58025458
 8002170:	5802546c 	.word	0x5802546c
 8002174:	58025480 	.word	0x58025480
 8002178:	58025494 	.word	0x58025494
 800217c:	fffe000f 	.word	0xfffe000f
 8002180:	a7fdabf8 	.word	0xa7fdabf8
 8002184:	cccccccd 	.word	0xcccccccd
 8002188:	40020010 	.word	0x40020010
 800218c:	40020028 	.word	0x40020028
 8002190:	40020040 	.word	0x40020040
 8002194:	40020058 	.word	0x40020058
 8002198:	40020070 	.word	0x40020070
 800219c:	40020088 	.word	0x40020088
 80021a0:	400200a0 	.word	0x400200a0
 80021a4:	400200b8 	.word	0x400200b8
 80021a8:	40020410 	.word	0x40020410
 80021ac:	40020428 	.word	0x40020428
 80021b0:	40020440 	.word	0x40020440
 80021b4:	40020458 	.word	0x40020458
 80021b8:	40020470 	.word	0x40020470
 80021bc:	40020488 	.word	0x40020488
 80021c0:	400204a0 	.word	0x400204a0
 80021c4:	400204b8 	.word	0x400204b8
 80021c8:	2300      	movs	r3, #0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d032      	beq.n	8002234 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f002 fa7e 	bl	80046d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b80      	cmp	r3, #128	@ 0x80
 80021da:	d102      	bne.n	80021e2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021f6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d010      	beq.n	8002222 <HAL_DMA_Init+0x6f2>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d80c      	bhi.n	8002222 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f002 fafb 	bl	8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	e008      	b.n	8002234 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e226      	b.n	80026b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_DMA_Start_IT+0x2a>
 8002272:	2302      	movs	r3, #2
 8002274:	e21f      	b.n	80026b6 <HAL_DMA_Start_IT+0x46a>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	f040 820a 	bne.w	80026a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a68      	ldr	r2, [pc, #416]	@ (8002440 <HAL_DMA_Start_IT+0x1f4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d04a      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a66      	ldr	r2, [pc, #408]	@ (8002444 <HAL_DMA_Start_IT+0x1f8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d045      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a65      	ldr	r2, [pc, #404]	@ (8002448 <HAL_DMA_Start_IT+0x1fc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d040      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <HAL_DMA_Start_IT+0x200>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d03b      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a62      	ldr	r2, [pc, #392]	@ (8002450 <HAL_DMA_Start_IT+0x204>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d036      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a60      	ldr	r2, [pc, #384]	@ (8002454 <HAL_DMA_Start_IT+0x208>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d031      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5f      	ldr	r2, [pc, #380]	@ (8002458 <HAL_DMA_Start_IT+0x20c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d02c      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a5d      	ldr	r2, [pc, #372]	@ (800245c <HAL_DMA_Start_IT+0x210>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d027      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002460 <HAL_DMA_Start_IT+0x214>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d022      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002464 <HAL_DMA_Start_IT+0x218>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01d      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a59      	ldr	r2, [pc, #356]	@ (8002468 <HAL_DMA_Start_IT+0x21c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d018      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a57      	ldr	r2, [pc, #348]	@ (800246c <HAL_DMA_Start_IT+0x220>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a56      	ldr	r2, [pc, #344]	@ (8002470 <HAL_DMA_Start_IT+0x224>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00e      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a54      	ldr	r2, [pc, #336]	@ (8002474 <HAL_DMA_Start_IT+0x228>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d009      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a53      	ldr	r2, [pc, #332]	@ (8002478 <HAL_DMA_Start_IT+0x22c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d004      	beq.n	800233a <HAL_DMA_Start_IT+0xee>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a51      	ldr	r2, [pc, #324]	@ (800247c <HAL_DMA_Start_IT+0x230>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d108      	bne.n	800234c <HAL_DMA_Start_IT+0x100>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e007      	b.n	800235c <HAL_DMA_Start_IT+0x110>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f001 fea2 	bl	80040ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a34      	ldr	r2, [pc, #208]	@ (8002440 <HAL_DMA_Start_IT+0x1f4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d04a      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a33      	ldr	r2, [pc, #204]	@ (8002444 <HAL_DMA_Start_IT+0x1f8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d045      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a31      	ldr	r2, [pc, #196]	@ (8002448 <HAL_DMA_Start_IT+0x1fc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d040      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a30      	ldr	r2, [pc, #192]	@ (800244c <HAL_DMA_Start_IT+0x200>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d03b      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2e      	ldr	r2, [pc, #184]	@ (8002450 <HAL_DMA_Start_IT+0x204>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d036      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2d      	ldr	r2, [pc, #180]	@ (8002454 <HAL_DMA_Start_IT+0x208>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d031      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002458 <HAL_DMA_Start_IT+0x20c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02c      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2a      	ldr	r2, [pc, #168]	@ (800245c <HAL_DMA_Start_IT+0x210>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d027      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <HAL_DMA_Start_IT+0x214>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d022      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a27      	ldr	r2, [pc, #156]	@ (8002464 <HAL_DMA_Start_IT+0x218>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d01d      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a25      	ldr	r2, [pc, #148]	@ (8002468 <HAL_DMA_Start_IT+0x21c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d018      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a24      	ldr	r2, [pc, #144]	@ (800246c <HAL_DMA_Start_IT+0x220>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a22      	ldr	r2, [pc, #136]	@ (8002470 <HAL_DMA_Start_IT+0x224>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00e      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_DMA_Start_IT+0x228>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002478 <HAL_DMA_Start_IT+0x22c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_DMA_Start_IT+0x1bc>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1e      	ldr	r2, [pc, #120]	@ (800247c <HAL_DMA_Start_IT+0x230>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_DMA_Start_IT+0x1c0>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_DMA_Start_IT+0x1c2>
 800240c:	2300      	movs	r3, #0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d036      	beq.n	8002480 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 021e 	bic.w	r2, r3, #30
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0216 	orr.w	r2, r2, #22
 8002424:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03e      	beq.n	80024ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0208 	orr.w	r2, r2, #8
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e035      	b.n	80024ac <HAL_DMA_Start_IT+0x260>
 8002440:	40020010 	.word	0x40020010
 8002444:	40020028 	.word	0x40020028
 8002448:	40020040 	.word	0x40020040
 800244c:	40020058 	.word	0x40020058
 8002450:	40020070 	.word	0x40020070
 8002454:	40020088 	.word	0x40020088
 8002458:	400200a0 	.word	0x400200a0
 800245c:	400200b8 	.word	0x400200b8
 8002460:	40020410 	.word	0x40020410
 8002464:	40020428 	.word	0x40020428
 8002468:	40020440 	.word	0x40020440
 800246c:	40020458 	.word	0x40020458
 8002470:	40020470 	.word	0x40020470
 8002474:	40020488 	.word	0x40020488
 8002478:	400204a0 	.word	0x400204a0
 800247c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 020e 	bic.w	r2, r3, #14
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 020a 	orr.w	r2, r2, #10
 8002492:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0204 	orr.w	r2, r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a83      	ldr	r2, [pc, #524]	@ (80026c0 <HAL_DMA_Start_IT+0x474>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d072      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a82      	ldr	r2, [pc, #520]	@ (80026c4 <HAL_DMA_Start_IT+0x478>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d06d      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a80      	ldr	r2, [pc, #512]	@ (80026c8 <HAL_DMA_Start_IT+0x47c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d068      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7f      	ldr	r2, [pc, #508]	@ (80026cc <HAL_DMA_Start_IT+0x480>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d063      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a7d      	ldr	r2, [pc, #500]	@ (80026d0 <HAL_DMA_Start_IT+0x484>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d05e      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7c      	ldr	r2, [pc, #496]	@ (80026d4 <HAL_DMA_Start_IT+0x488>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d059      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a7a      	ldr	r2, [pc, #488]	@ (80026d8 <HAL_DMA_Start_IT+0x48c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d054      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a79      	ldr	r2, [pc, #484]	@ (80026dc <HAL_DMA_Start_IT+0x490>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d04f      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a77      	ldr	r2, [pc, #476]	@ (80026e0 <HAL_DMA_Start_IT+0x494>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d04a      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a76      	ldr	r2, [pc, #472]	@ (80026e4 <HAL_DMA_Start_IT+0x498>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d045      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a74      	ldr	r2, [pc, #464]	@ (80026e8 <HAL_DMA_Start_IT+0x49c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d040      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a73      	ldr	r2, [pc, #460]	@ (80026ec <HAL_DMA_Start_IT+0x4a0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d03b      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a71      	ldr	r2, [pc, #452]	@ (80026f0 <HAL_DMA_Start_IT+0x4a4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d036      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a70      	ldr	r2, [pc, #448]	@ (80026f4 <HAL_DMA_Start_IT+0x4a8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d031      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6e      	ldr	r2, [pc, #440]	@ (80026f8 <HAL_DMA_Start_IT+0x4ac>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d02c      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a6d      	ldr	r2, [pc, #436]	@ (80026fc <HAL_DMA_Start_IT+0x4b0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d027      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6b      	ldr	r2, [pc, #428]	@ (8002700 <HAL_DMA_Start_IT+0x4b4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d022      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6a      	ldr	r2, [pc, #424]	@ (8002704 <HAL_DMA_Start_IT+0x4b8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d01d      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a68      	ldr	r2, [pc, #416]	@ (8002708 <HAL_DMA_Start_IT+0x4bc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d018      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a67      	ldr	r2, [pc, #412]	@ (800270c <HAL_DMA_Start_IT+0x4c0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a65      	ldr	r2, [pc, #404]	@ (8002710 <HAL_DMA_Start_IT+0x4c4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00e      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a64      	ldr	r2, [pc, #400]	@ (8002714 <HAL_DMA_Start_IT+0x4c8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d009      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a62      	ldr	r2, [pc, #392]	@ (8002718 <HAL_DMA_Start_IT+0x4cc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_DMA_Start_IT+0x350>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a61      	ldr	r2, [pc, #388]	@ (800271c <HAL_DMA_Start_IT+0x4d0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_DMA_Start_IT+0x354>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_DMA_Start_IT+0x356>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01a      	beq.n	80025dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a37      	ldr	r2, [pc, #220]	@ (80026c0 <HAL_DMA_Start_IT+0x474>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d04a      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a36      	ldr	r2, [pc, #216]	@ (80026c4 <HAL_DMA_Start_IT+0x478>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d045      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a34      	ldr	r2, [pc, #208]	@ (80026c8 <HAL_DMA_Start_IT+0x47c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d040      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a33      	ldr	r2, [pc, #204]	@ (80026cc <HAL_DMA_Start_IT+0x480>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d03b      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a31      	ldr	r2, [pc, #196]	@ (80026d0 <HAL_DMA_Start_IT+0x484>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d036      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a30      	ldr	r2, [pc, #192]	@ (80026d4 <HAL_DMA_Start_IT+0x488>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d031      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2e      	ldr	r2, [pc, #184]	@ (80026d8 <HAL_DMA_Start_IT+0x48c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d02c      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2d      	ldr	r2, [pc, #180]	@ (80026dc <HAL_DMA_Start_IT+0x490>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d027      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2b      	ldr	r2, [pc, #172]	@ (80026e0 <HAL_DMA_Start_IT+0x494>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d022      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2a      	ldr	r2, [pc, #168]	@ (80026e4 <HAL_DMA_Start_IT+0x498>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d01d      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a28      	ldr	r2, [pc, #160]	@ (80026e8 <HAL_DMA_Start_IT+0x49c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d018      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a27      	ldr	r2, [pc, #156]	@ (80026ec <HAL_DMA_Start_IT+0x4a0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a25      	ldr	r2, [pc, #148]	@ (80026f0 <HAL_DMA_Start_IT+0x4a4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a24      	ldr	r2, [pc, #144]	@ (80026f4 <HAL_DMA_Start_IT+0x4a8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a22      	ldr	r2, [pc, #136]	@ (80026f8 <HAL_DMA_Start_IT+0x4ac>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_DMA_Start_IT+0x430>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a21      	ldr	r2, [pc, #132]	@ (80026fc <HAL_DMA_Start_IT+0x4b0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <HAL_DMA_Start_IT+0x442>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e012      	b.n	80026b4 <HAL_DMA_Start_IT+0x468>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e009      	b.n	80026b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40020010 	.word	0x40020010
 80026c4:	40020028 	.word	0x40020028
 80026c8:	40020040 	.word	0x40020040
 80026cc:	40020058 	.word	0x40020058
 80026d0:	40020070 	.word	0x40020070
 80026d4:	40020088 	.word	0x40020088
 80026d8:	400200a0 	.word	0x400200a0
 80026dc:	400200b8 	.word	0x400200b8
 80026e0:	40020410 	.word	0x40020410
 80026e4:	40020428 	.word	0x40020428
 80026e8:	40020440 	.word	0x40020440
 80026ec:	40020458 	.word	0x40020458
 80026f0:	40020470 	.word	0x40020470
 80026f4:	40020488 	.word	0x40020488
 80026f8:	400204a0 	.word	0x400204a0
 80026fc:	400204b8 	.word	0x400204b8
 8002700:	58025408 	.word	0x58025408
 8002704:	5802541c 	.word	0x5802541c
 8002708:	58025430 	.word	0x58025430
 800270c:	58025444 	.word	0x58025444
 8002710:	58025458 	.word	0x58025458
 8002714:	5802546c 	.word	0x5802546c
 8002718:	58025480 	.word	0x58025480
 800271c:	58025494 	.word	0x58025494

08002720 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002728:	f7fe fdb8 	bl	800129c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e2dc      	b.n	8002cf2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d008      	beq.n	8002756 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2280      	movs	r2, #128	@ 0x80
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e2cd      	b.n	8002cf2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a76      	ldr	r2, [pc, #472]	@ (8002934 <HAL_DMA_Abort+0x214>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d04a      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a74      	ldr	r2, [pc, #464]	@ (8002938 <HAL_DMA_Abort+0x218>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d045      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	@ (800293c <HAL_DMA_Abort+0x21c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d040      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a71      	ldr	r2, [pc, #452]	@ (8002940 <HAL_DMA_Abort+0x220>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d03b      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a70      	ldr	r2, [pc, #448]	@ (8002944 <HAL_DMA_Abort+0x224>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d036      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6e      	ldr	r2, [pc, #440]	@ (8002948 <HAL_DMA_Abort+0x228>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d031      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6d      	ldr	r2, [pc, #436]	@ (800294c <HAL_DMA_Abort+0x22c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d02c      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002950 <HAL_DMA_Abort+0x230>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d027      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002954 <HAL_DMA_Abort+0x234>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d022      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a68      	ldr	r2, [pc, #416]	@ (8002958 <HAL_DMA_Abort+0x238>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01d      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a67      	ldr	r2, [pc, #412]	@ (800295c <HAL_DMA_Abort+0x23c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d018      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a65      	ldr	r2, [pc, #404]	@ (8002960 <HAL_DMA_Abort+0x240>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a64      	ldr	r2, [pc, #400]	@ (8002964 <HAL_DMA_Abort+0x244>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00e      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a62      	ldr	r2, [pc, #392]	@ (8002968 <HAL_DMA_Abort+0x248>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a61      	ldr	r2, [pc, #388]	@ (800296c <HAL_DMA_Abort+0x24c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_DMA_Abort+0xd6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002970 <HAL_DMA_Abort+0x250>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_DMA_Abort+0xda>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_DMA_Abort+0xdc>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 021e 	bic.w	r2, r2, #30
 800280e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800281e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e00a      	b.n	800283e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 020e 	bic.w	r2, r2, #14
 8002836:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3c      	ldr	r2, [pc, #240]	@ (8002934 <HAL_DMA_Abort+0x214>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d072      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3a      	ldr	r2, [pc, #232]	@ (8002938 <HAL_DMA_Abort+0x218>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d06d      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a39      	ldr	r2, [pc, #228]	@ (800293c <HAL_DMA_Abort+0x21c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d068      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a37      	ldr	r2, [pc, #220]	@ (8002940 <HAL_DMA_Abort+0x220>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d063      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a36      	ldr	r2, [pc, #216]	@ (8002944 <HAL_DMA_Abort+0x224>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05e      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <HAL_DMA_Abort+0x228>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d059      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a33      	ldr	r2, [pc, #204]	@ (800294c <HAL_DMA_Abort+0x22c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d054      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a31      	ldr	r2, [pc, #196]	@ (8002950 <HAL_DMA_Abort+0x230>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04f      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_DMA_Abort+0x234>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04a      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	@ (8002958 <HAL_DMA_Abort+0x238>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d045      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	@ (800295c <HAL_DMA_Abort+0x23c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d040      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002960 <HAL_DMA_Abort+0x240>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d03b      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <HAL_DMA_Abort+0x244>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d036      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <HAL_DMA_Abort+0x248>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a27      	ldr	r2, [pc, #156]	@ (800296c <HAL_DMA_Abort+0x24c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02c      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	@ (8002970 <HAL_DMA_Abort+0x250>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d027      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	@ (8002974 <HAL_DMA_Abort+0x254>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	@ (8002978 <HAL_DMA_Abort+0x258>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	@ (800297c <HAL_DMA_Abort+0x25c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	@ (8002980 <HAL_DMA_Abort+0x260>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	@ (8002984 <HAL_DMA_Abort+0x264>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1c      	ldr	r2, [pc, #112]	@ (8002988 <HAL_DMA_Abort+0x268>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1b      	ldr	r2, [pc, #108]	@ (800298c <HAL_DMA_Abort+0x26c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_Abort+0x20e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	@ (8002990 <HAL_DMA_Abort+0x270>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d132      	bne.n	8002994 <HAL_DMA_Abort+0x274>
 800292e:	2301      	movs	r3, #1
 8002930:	e031      	b.n	8002996 <HAL_DMA_Abort+0x276>
 8002932:	bf00      	nop
 8002934:	40020010 	.word	0x40020010
 8002938:	40020028 	.word	0x40020028
 800293c:	40020040 	.word	0x40020040
 8002940:	40020058 	.word	0x40020058
 8002944:	40020070 	.word	0x40020070
 8002948:	40020088 	.word	0x40020088
 800294c:	400200a0 	.word	0x400200a0
 8002950:	400200b8 	.word	0x400200b8
 8002954:	40020410 	.word	0x40020410
 8002958:	40020428 	.word	0x40020428
 800295c:	40020440 	.word	0x40020440
 8002960:	40020458 	.word	0x40020458
 8002964:	40020470 	.word	0x40020470
 8002968:	40020488 	.word	0x40020488
 800296c:	400204a0 	.word	0x400204a0
 8002970:	400204b8 	.word	0x400204b8
 8002974:	58025408 	.word	0x58025408
 8002978:	5802541c 	.word	0x5802541c
 800297c:	58025430 	.word	0x58025430
 8002980:	58025444 	.word	0x58025444
 8002984:	58025458 	.word	0x58025458
 8002988:	5802546c 	.word	0x5802546c
 800298c:	58025480 	.word	0x58025480
 8002990:	58025494 	.word	0x58025494
 8002994:	2300      	movs	r3, #0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6d      	ldr	r2, [pc, #436]	@ (8002b64 <HAL_DMA_Abort+0x444>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d04a      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b68 <HAL_DMA_Abort+0x448>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d045      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6a      	ldr	r2, [pc, #424]	@ (8002b6c <HAL_DMA_Abort+0x44c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d040      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a68      	ldr	r2, [pc, #416]	@ (8002b70 <HAL_DMA_Abort+0x450>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d03b      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a67      	ldr	r2, [pc, #412]	@ (8002b74 <HAL_DMA_Abort+0x454>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d036      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a65      	ldr	r2, [pc, #404]	@ (8002b78 <HAL_DMA_Abort+0x458>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d031      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a64      	ldr	r2, [pc, #400]	@ (8002b7c <HAL_DMA_Abort+0x45c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d02c      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a62      	ldr	r2, [pc, #392]	@ (8002b80 <HAL_DMA_Abort+0x460>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d027      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a61      	ldr	r2, [pc, #388]	@ (8002b84 <HAL_DMA_Abort+0x464>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5f      	ldr	r2, [pc, #380]	@ (8002b88 <HAL_DMA_Abort+0x468>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01d      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5e      	ldr	r2, [pc, #376]	@ (8002b8c <HAL_DMA_Abort+0x46c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d018      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002b90 <HAL_DMA_Abort+0x470>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5b      	ldr	r2, [pc, #364]	@ (8002b94 <HAL_DMA_Abort+0x474>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a59      	ldr	r2, [pc, #356]	@ (8002b98 <HAL_DMA_Abort+0x478>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a58      	ldr	r2, [pc, #352]	@ (8002b9c <HAL_DMA_Abort+0x47c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_DMA_Abort+0x32a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a56      	ldr	r2, [pc, #344]	@ (8002ba0 <HAL_DMA_Abort+0x480>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d108      	bne.n	8002a5c <HAL_DMA_Abort+0x33c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e007      	b.n	8002a6c <HAL_DMA_Abort+0x34c>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a6c:	e013      	b.n	8002a96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a6e:	f7fe fc15 	bl	800129c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d90c      	bls.n	8002a96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2203      	movs	r2, #3
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e12d      	b.n	8002cf2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e5      	bne.n	8002a6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b64 <HAL_DMA_Abort+0x444>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04a      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b68 <HAL_DMA_Abort+0x448>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d045      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2c      	ldr	r2, [pc, #176]	@ (8002b6c <HAL_DMA_Abort+0x44c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d040      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b70 <HAL_DMA_Abort+0x450>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d03b      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a29      	ldr	r2, [pc, #164]	@ (8002b74 <HAL_DMA_Abort+0x454>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d036      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a27      	ldr	r2, [pc, #156]	@ (8002b78 <HAL_DMA_Abort+0x458>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d031      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a26      	ldr	r2, [pc, #152]	@ (8002b7c <HAL_DMA_Abort+0x45c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02c      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <HAL_DMA_Abort+0x460>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d027      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a23      	ldr	r2, [pc, #140]	@ (8002b84 <HAL_DMA_Abort+0x464>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a21      	ldr	r2, [pc, #132]	@ (8002b88 <HAL_DMA_Abort+0x468>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01d      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a20      	ldr	r2, [pc, #128]	@ (8002b8c <HAL_DMA_Abort+0x46c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1e      	ldr	r2, [pc, #120]	@ (8002b90 <HAL_DMA_Abort+0x470>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b94 <HAL_DMA_Abort+0x474>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <HAL_DMA_Abort+0x478>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1a      	ldr	r2, [pc, #104]	@ (8002b9c <HAL_DMA_Abort+0x47c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_DMA_Abort+0x422>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <HAL_DMA_Abort+0x480>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Abort+0x426>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_Abort+0x428>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02b      	beq.n	8002ba4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b50:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	223f      	movs	r2, #63	@ 0x3f
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	e02a      	b.n	8002bba <HAL_DMA_Abort+0x49a>
 8002b64:	40020010 	.word	0x40020010
 8002b68:	40020028 	.word	0x40020028
 8002b6c:	40020040 	.word	0x40020040
 8002b70:	40020058 	.word	0x40020058
 8002b74:	40020070 	.word	0x40020070
 8002b78:	40020088 	.word	0x40020088
 8002b7c:	400200a0 	.word	0x400200a0
 8002b80:	400200b8 	.word	0x400200b8
 8002b84:	40020410 	.word	0x40020410
 8002b88:	40020428 	.word	0x40020428
 8002b8c:	40020440 	.word	0x40020440
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40020470 	.word	0x40020470
 8002b98:	40020488 	.word	0x40020488
 8002b9c:	400204a0 	.word	0x400204a0
 8002ba0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4f      	ldr	r2, [pc, #316]	@ (8002cfc <HAL_DMA_Abort+0x5dc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d072      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d00 <HAL_DMA_Abort+0x5e0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d06d      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a4c      	ldr	r2, [pc, #304]	@ (8002d04 <HAL_DMA_Abort+0x5e4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d068      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8002d08 <HAL_DMA_Abort+0x5e8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d063      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a49      	ldr	r2, [pc, #292]	@ (8002d0c <HAL_DMA_Abort+0x5ec>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d05e      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a47      	ldr	r2, [pc, #284]	@ (8002d10 <HAL_DMA_Abort+0x5f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d059      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a46      	ldr	r2, [pc, #280]	@ (8002d14 <HAL_DMA_Abort+0x5f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d054      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a44      	ldr	r2, [pc, #272]	@ (8002d18 <HAL_DMA_Abort+0x5f8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d04f      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a43      	ldr	r2, [pc, #268]	@ (8002d1c <HAL_DMA_Abort+0x5fc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d04a      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a41      	ldr	r2, [pc, #260]	@ (8002d20 <HAL_DMA_Abort+0x600>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d045      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a40      	ldr	r2, [pc, #256]	@ (8002d24 <HAL_DMA_Abort+0x604>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d040      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d28 <HAL_DMA_Abort+0x608>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d03b      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a3d      	ldr	r2, [pc, #244]	@ (8002d2c <HAL_DMA_Abort+0x60c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d036      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3b      	ldr	r2, [pc, #236]	@ (8002d30 <HAL_DMA_Abort+0x610>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d031      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d34 <HAL_DMA_Abort+0x614>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d02c      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a38      	ldr	r2, [pc, #224]	@ (8002d38 <HAL_DMA_Abort+0x618>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d027      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a37      	ldr	r2, [pc, #220]	@ (8002d3c <HAL_DMA_Abort+0x61c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d022      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a35      	ldr	r2, [pc, #212]	@ (8002d40 <HAL_DMA_Abort+0x620>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01d      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a34      	ldr	r2, [pc, #208]	@ (8002d44 <HAL_DMA_Abort+0x624>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d018      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a32      	ldr	r2, [pc, #200]	@ (8002d48 <HAL_DMA_Abort+0x628>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a31      	ldr	r2, [pc, #196]	@ (8002d4c <HAL_DMA_Abort+0x62c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00e      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2f      	ldr	r2, [pc, #188]	@ (8002d50 <HAL_DMA_Abort+0x630>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d009      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d54 <HAL_DMA_Abort+0x634>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_DMA_Abort+0x58a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d58 <HAL_DMA_Abort+0x638>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA_Abort+0x58e>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_DMA_Abort+0x590>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d015      	beq.n	8002ce0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cbc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cde:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40020010 	.word	0x40020010
 8002d00:	40020028 	.word	0x40020028
 8002d04:	40020040 	.word	0x40020040
 8002d08:	40020058 	.word	0x40020058
 8002d0c:	40020070 	.word	0x40020070
 8002d10:	40020088 	.word	0x40020088
 8002d14:	400200a0 	.word	0x400200a0
 8002d18:	400200b8 	.word	0x400200b8
 8002d1c:	40020410 	.word	0x40020410
 8002d20:	40020428 	.word	0x40020428
 8002d24:	40020440 	.word	0x40020440
 8002d28:	40020458 	.word	0x40020458
 8002d2c:	40020470 	.word	0x40020470
 8002d30:	40020488 	.word	0x40020488
 8002d34:	400204a0 	.word	0x400204a0
 8002d38:	400204b8 	.word	0x400204b8
 8002d3c:	58025408 	.word	0x58025408
 8002d40:	5802541c 	.word	0x5802541c
 8002d44:	58025430 	.word	0x58025430
 8002d48:	58025444 	.word	0x58025444
 8002d4c:	58025458 	.word	0x58025458
 8002d50:	5802546c 	.word	0x5802546c
 8002d54:	58025480 	.word	0x58025480
 8002d58:	58025494 	.word	0x58025494

08002d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e237      	b.n	80031de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d004      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2280      	movs	r2, #128	@ 0x80
 8002d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e22c      	b.n	80031de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a5c      	ldr	r2, [pc, #368]	@ (8002efc <HAL_DMA_Abort_IT+0x1a0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d04a      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a5b      	ldr	r2, [pc, #364]	@ (8002f00 <HAL_DMA_Abort_IT+0x1a4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d045      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a59      	ldr	r2, [pc, #356]	@ (8002f04 <HAL_DMA_Abort_IT+0x1a8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d040      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a58      	ldr	r2, [pc, #352]	@ (8002f08 <HAL_DMA_Abort_IT+0x1ac>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d03b      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a56      	ldr	r2, [pc, #344]	@ (8002f0c <HAL_DMA_Abort_IT+0x1b0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d036      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a55      	ldr	r2, [pc, #340]	@ (8002f10 <HAL_DMA_Abort_IT+0x1b4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d031      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a53      	ldr	r2, [pc, #332]	@ (8002f14 <HAL_DMA_Abort_IT+0x1b8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d02c      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a52      	ldr	r2, [pc, #328]	@ (8002f18 <HAL_DMA_Abort_IT+0x1bc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d027      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a50      	ldr	r2, [pc, #320]	@ (8002f1c <HAL_DMA_Abort_IT+0x1c0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d022      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4f      	ldr	r2, [pc, #316]	@ (8002f20 <HAL_DMA_Abort_IT+0x1c4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d01d      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a4d      	ldr	r2, [pc, #308]	@ (8002f24 <HAL_DMA_Abort_IT+0x1c8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d018      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4c      	ldr	r2, [pc, #304]	@ (8002f28 <HAL_DMA_Abort_IT+0x1cc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a4a      	ldr	r2, [pc, #296]	@ (8002f2c <HAL_DMA_Abort_IT+0x1d0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00e      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a49      	ldr	r2, [pc, #292]	@ (8002f30 <HAL_DMA_Abort_IT+0x1d4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d009      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a47      	ldr	r2, [pc, #284]	@ (8002f34 <HAL_DMA_Abort_IT+0x1d8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_DMA_Abort_IT+0xc8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a46      	ldr	r2, [pc, #280]	@ (8002f38 <HAL_DMA_Abort_IT+0x1dc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA_Abort_IT+0xcc>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_DMA_Abort_IT+0xce>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8086 	beq.w	8002f3c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002efc <HAL_DMA_Abort_IT+0x1a0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d04a      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <HAL_DMA_Abort_IT+0x1a4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d045      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	@ (8002f04 <HAL_DMA_Abort_IT+0x1a8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d040      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f08 <HAL_DMA_Abort_IT+0x1ac>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d03b      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a29      	ldr	r2, [pc, #164]	@ (8002f0c <HAL_DMA_Abort_IT+0x1b0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d036      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a28      	ldr	r2, [pc, #160]	@ (8002f10 <HAL_DMA_Abort_IT+0x1b4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <HAL_DMA_Abort_IT+0x1b8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a25      	ldr	r2, [pc, #148]	@ (8002f18 <HAL_DMA_Abort_IT+0x1bc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d027      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a23      	ldr	r2, [pc, #140]	@ (8002f1c <HAL_DMA_Abort_IT+0x1c0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d022      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a22      	ldr	r2, [pc, #136]	@ (8002f20 <HAL_DMA_Abort_IT+0x1c4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01d      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a20      	ldr	r2, [pc, #128]	@ (8002f24 <HAL_DMA_Abort_IT+0x1c8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8002f28 <HAL_DMA_Abort_IT+0x1cc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f2c <HAL_DMA_Abort_IT+0x1d0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f30 <HAL_DMA_Abort_IT+0x1d4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f34 <HAL_DMA_Abort_IT+0x1d8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x17c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <HAL_DMA_Abort_IT+0x1dc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <HAL_DMA_Abort_IT+0x18e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	e178      	b.n	80031dc <HAL_DMA_Abort_IT+0x480>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e16f      	b.n	80031dc <HAL_DMA_Abort_IT+0x480>
 8002efc:	40020010 	.word	0x40020010
 8002f00:	40020028 	.word	0x40020028
 8002f04:	40020040 	.word	0x40020040
 8002f08:	40020058 	.word	0x40020058
 8002f0c:	40020070 	.word	0x40020070
 8002f10:	40020088 	.word	0x40020088
 8002f14:	400200a0 	.word	0x400200a0
 8002f18:	400200b8 	.word	0x400200b8
 8002f1c:	40020410 	.word	0x40020410
 8002f20:	40020428 	.word	0x40020428
 8002f24:	40020440 	.word	0x40020440
 8002f28:	40020458 	.word	0x40020458
 8002f2c:	40020470 	.word	0x40020470
 8002f30:	40020488 	.word	0x40020488
 8002f34:	400204a0 	.word	0x400204a0
 8002f38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 020e 	bic.w	r2, r2, #14
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6c      	ldr	r2, [pc, #432]	@ (8003104 <HAL_DMA_Abort_IT+0x3a8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04a      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6b      	ldr	r2, [pc, #428]	@ (8003108 <HAL_DMA_Abort_IT+0x3ac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d045      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a69      	ldr	r2, [pc, #420]	@ (800310c <HAL_DMA_Abort_IT+0x3b0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d040      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a68      	ldr	r2, [pc, #416]	@ (8003110 <HAL_DMA_Abort_IT+0x3b4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d03b      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a66      	ldr	r2, [pc, #408]	@ (8003114 <HAL_DMA_Abort_IT+0x3b8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d036      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a65      	ldr	r2, [pc, #404]	@ (8003118 <HAL_DMA_Abort_IT+0x3bc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d031      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a63      	ldr	r2, [pc, #396]	@ (800311c <HAL_DMA_Abort_IT+0x3c0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02c      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a62      	ldr	r2, [pc, #392]	@ (8003120 <HAL_DMA_Abort_IT+0x3c4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d027      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <HAL_DMA_Abort_IT+0x3c8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d022      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5f      	ldr	r2, [pc, #380]	@ (8003128 <HAL_DMA_Abort_IT+0x3cc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d01d      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800312c <HAL_DMA_Abort_IT+0x3d0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d018      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8003130 <HAL_DMA_Abort_IT+0x3d4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8003134 <HAL_DMA_Abort_IT+0x3d8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00e      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a59      	ldr	r2, [pc, #356]	@ (8003138 <HAL_DMA_Abort_IT+0x3dc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a57      	ldr	r2, [pc, #348]	@ (800313c <HAL_DMA_Abort_IT+0x3e0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_Abort_IT+0x290>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a56      	ldr	r2, [pc, #344]	@ (8003140 <HAL_DMA_Abort_IT+0x3e4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d108      	bne.n	8002ffe <HAL_DMA_Abort_IT+0x2a2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e007      	b.n	800300e <HAL_DMA_Abort_IT+0x2b2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a3c      	ldr	r2, [pc, #240]	@ (8003104 <HAL_DMA_Abort_IT+0x3a8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d072      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a3a      	ldr	r2, [pc, #232]	@ (8003108 <HAL_DMA_Abort_IT+0x3ac>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d06d      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a39      	ldr	r2, [pc, #228]	@ (800310c <HAL_DMA_Abort_IT+0x3b0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d068      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a37      	ldr	r2, [pc, #220]	@ (8003110 <HAL_DMA_Abort_IT+0x3b4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d063      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a36      	ldr	r2, [pc, #216]	@ (8003114 <HAL_DMA_Abort_IT+0x3b8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d05e      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a34      	ldr	r2, [pc, #208]	@ (8003118 <HAL_DMA_Abort_IT+0x3bc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d059      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a33      	ldr	r2, [pc, #204]	@ (800311c <HAL_DMA_Abort_IT+0x3c0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d054      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a31      	ldr	r2, [pc, #196]	@ (8003120 <HAL_DMA_Abort_IT+0x3c4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d04f      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a30      	ldr	r2, [pc, #192]	@ (8003124 <HAL_DMA_Abort_IT+0x3c8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04a      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2e      	ldr	r2, [pc, #184]	@ (8003128 <HAL_DMA_Abort_IT+0x3cc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d045      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2d      	ldr	r2, [pc, #180]	@ (800312c <HAL_DMA_Abort_IT+0x3d0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d040      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2b      	ldr	r2, [pc, #172]	@ (8003130 <HAL_DMA_Abort_IT+0x3d4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d03b      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2a      	ldr	r2, [pc, #168]	@ (8003134 <HAL_DMA_Abort_IT+0x3d8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d036      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a28      	ldr	r2, [pc, #160]	@ (8003138 <HAL_DMA_Abort_IT+0x3dc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d031      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a27      	ldr	r2, [pc, #156]	@ (800313c <HAL_DMA_Abort_IT+0x3e0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d02c      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a25      	ldr	r2, [pc, #148]	@ (8003140 <HAL_DMA_Abort_IT+0x3e4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d027      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a24      	ldr	r2, [pc, #144]	@ (8003144 <HAL_DMA_Abort_IT+0x3e8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d022      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a22      	ldr	r2, [pc, #136]	@ (8003148 <HAL_DMA_Abort_IT+0x3ec>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01d      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a21      	ldr	r2, [pc, #132]	@ (800314c <HAL_DMA_Abort_IT+0x3f0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d018      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003150 <HAL_DMA_Abort_IT+0x3f4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1e      	ldr	r2, [pc, #120]	@ (8003154 <HAL_DMA_Abort_IT+0x3f8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003158 <HAL_DMA_Abort_IT+0x3fc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1b      	ldr	r2, [pc, #108]	@ (800315c <HAL_DMA_Abort_IT+0x400>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_DMA_Abort_IT+0x3a2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_DMA_Abort_IT+0x404>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d132      	bne.n	8003164 <HAL_DMA_Abort_IT+0x408>
 80030fe:	2301      	movs	r3, #1
 8003100:	e031      	b.n	8003166 <HAL_DMA_Abort_IT+0x40a>
 8003102:	bf00      	nop
 8003104:	40020010 	.word	0x40020010
 8003108:	40020028 	.word	0x40020028
 800310c:	40020040 	.word	0x40020040
 8003110:	40020058 	.word	0x40020058
 8003114:	40020070 	.word	0x40020070
 8003118:	40020088 	.word	0x40020088
 800311c:	400200a0 	.word	0x400200a0
 8003120:	400200b8 	.word	0x400200b8
 8003124:	40020410 	.word	0x40020410
 8003128:	40020428 	.word	0x40020428
 800312c:	40020440 	.word	0x40020440
 8003130:	40020458 	.word	0x40020458
 8003134:	40020470 	.word	0x40020470
 8003138:	40020488 	.word	0x40020488
 800313c:	400204a0 	.word	0x400204a0
 8003140:	400204b8 	.word	0x400204b8
 8003144:	58025408 	.word	0x58025408
 8003148:	5802541c 	.word	0x5802541c
 800314c:	58025430 	.word	0x58025430
 8003150:	58025444 	.word	0x58025444
 8003154:	58025458 	.word	0x58025458
 8003158:	5802546c 	.word	0x5802546c
 800315c:	58025480 	.word	0x58025480
 8003160:	58025494 	.word	0x58025494
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d028      	beq.n	80031bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003178:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	2201      	movs	r2, #1
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003198:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	@ 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031f4:	4b67      	ldr	r3, [pc, #412]	@ (8003394 <HAL_DMA_IRQHandler+0x1ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a67      	ldr	r2, [pc, #412]	@ (8003398 <HAL_DMA_IRQHandler+0x1b0>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0a9b      	lsrs	r3, r3, #10
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003206:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a5f      	ldr	r2, [pc, #380]	@ (800339c <HAL_DMA_IRQHandler+0x1b4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d04a      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5d      	ldr	r2, [pc, #372]	@ (80033a0 <HAL_DMA_IRQHandler+0x1b8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d045      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a5c      	ldr	r2, [pc, #368]	@ (80033a4 <HAL_DMA_IRQHandler+0x1bc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d040      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5a      	ldr	r2, [pc, #360]	@ (80033a8 <HAL_DMA_IRQHandler+0x1c0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d03b      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a59      	ldr	r2, [pc, #356]	@ (80033ac <HAL_DMA_IRQHandler+0x1c4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d036      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a57      	ldr	r2, [pc, #348]	@ (80033b0 <HAL_DMA_IRQHandler+0x1c8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d031      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a56      	ldr	r2, [pc, #344]	@ (80033b4 <HAL_DMA_IRQHandler+0x1cc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d02c      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a54      	ldr	r2, [pc, #336]	@ (80033b8 <HAL_DMA_IRQHandler+0x1d0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d027      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a53      	ldr	r2, [pc, #332]	@ (80033bc <HAL_DMA_IRQHandler+0x1d4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a51      	ldr	r2, [pc, #324]	@ (80033c0 <HAL_DMA_IRQHandler+0x1d8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a50      	ldr	r2, [pc, #320]	@ (80033c4 <HAL_DMA_IRQHandler+0x1dc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4e      	ldr	r2, [pc, #312]	@ (80033c8 <HAL_DMA_IRQHandler+0x1e0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4d      	ldr	r2, [pc, #308]	@ (80033cc <HAL_DMA_IRQHandler+0x1e4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a4b      	ldr	r2, [pc, #300]	@ (80033d0 <HAL_DMA_IRQHandler+0x1e8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a4a      	ldr	r2, [pc, #296]	@ (80033d4 <HAL_DMA_IRQHandler+0x1ec>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_DMA_IRQHandler+0xd2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a48      	ldr	r2, [pc, #288]	@ (80033d8 <HAL_DMA_IRQHandler+0x1f0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_DMA_IRQHandler+0xd6>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_DMA_IRQHandler+0xd8>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 842b 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2208      	movs	r2, #8
 80032d0:	409a      	lsls	r2, r3
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80a2 	beq.w	8003420 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2e      	ldr	r2, [pc, #184]	@ (800339c <HAL_DMA_IRQHandler+0x1b4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d04a      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2d      	ldr	r2, [pc, #180]	@ (80033a0 <HAL_DMA_IRQHandler+0x1b8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d045      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	@ (80033a4 <HAL_DMA_IRQHandler+0x1bc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d040      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2a      	ldr	r2, [pc, #168]	@ (80033a8 <HAL_DMA_IRQHandler+0x1c0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03b      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a28      	ldr	r2, [pc, #160]	@ (80033ac <HAL_DMA_IRQHandler+0x1c4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d036      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a27      	ldr	r2, [pc, #156]	@ (80033b0 <HAL_DMA_IRQHandler+0x1c8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d031      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a25      	ldr	r2, [pc, #148]	@ (80033b4 <HAL_DMA_IRQHandler+0x1cc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02c      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a24      	ldr	r2, [pc, #144]	@ (80033b8 <HAL_DMA_IRQHandler+0x1d0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d027      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a22      	ldr	r2, [pc, #136]	@ (80033bc <HAL_DMA_IRQHandler+0x1d4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a21      	ldr	r2, [pc, #132]	@ (80033c0 <HAL_DMA_IRQHandler+0x1d8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01d      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1f      	ldr	r2, [pc, #124]	@ (80033c4 <HAL_DMA_IRQHandler+0x1dc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1e      	ldr	r2, [pc, #120]	@ (80033c8 <HAL_DMA_IRQHandler+0x1e0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1c      	ldr	r2, [pc, #112]	@ (80033cc <HAL_DMA_IRQHandler+0x1e4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_DMA_IRQHandler+0x1e8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <HAL_DMA_IRQHandler+0x1ec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_DMA_IRQHandler+0x194>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_DMA_IRQHandler+0x1f0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d12f      	bne.n	80033dc <HAL_DMA_IRQHandler+0x1f4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e02e      	b.n	80033f0 <HAL_DMA_IRQHandler+0x208>
 8003392:	bf00      	nop
 8003394:	24003840 	.word	0x24003840
 8003398:	1b4e81b5 	.word	0x1b4e81b5
 800339c:	40020010 	.word	0x40020010
 80033a0:	40020028 	.word	0x40020028
 80033a4:	40020040 	.word	0x40020040
 80033a8:	40020058 	.word	0x40020058
 80033ac:	40020070 	.word	0x40020070
 80033b0:	40020088 	.word	0x40020088
 80033b4:	400200a0 	.word	0x400200a0
 80033b8:	400200b8 	.word	0x400200b8
 80033bc:	40020410 	.word	0x40020410
 80033c0:	40020428 	.word	0x40020428
 80033c4:	40020440 	.word	0x40020440
 80033c8:	40020458 	.word	0x40020458
 80033cc:	40020470 	.word	0x40020470
 80033d0:	40020488 	.word	0x40020488
 80033d4:	400204a0 	.word	0x400204a0
 80033d8:	400204b8 	.word	0x400204b8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d015      	beq.n	8003420 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0204 	bic.w	r2, r2, #4
 8003402:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2208      	movs	r2, #8
 800340e:	409a      	lsls	r2, r3
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d06e      	beq.n	8003514 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a69      	ldr	r2, [pc, #420]	@ (80035e0 <HAL_DMA_IRQHandler+0x3f8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d04a      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a67      	ldr	r2, [pc, #412]	@ (80035e4 <HAL_DMA_IRQHandler+0x3fc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d045      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a66      	ldr	r2, [pc, #408]	@ (80035e8 <HAL_DMA_IRQHandler+0x400>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d040      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a64      	ldr	r2, [pc, #400]	@ (80035ec <HAL_DMA_IRQHandler+0x404>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d03b      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a63      	ldr	r2, [pc, #396]	@ (80035f0 <HAL_DMA_IRQHandler+0x408>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d036      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a61      	ldr	r2, [pc, #388]	@ (80035f4 <HAL_DMA_IRQHandler+0x40c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d031      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a60      	ldr	r2, [pc, #384]	@ (80035f8 <HAL_DMA_IRQHandler+0x410>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d02c      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5e      	ldr	r2, [pc, #376]	@ (80035fc <HAL_DMA_IRQHandler+0x414>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d027      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5d      	ldr	r2, [pc, #372]	@ (8003600 <HAL_DMA_IRQHandler+0x418>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5b      	ldr	r2, [pc, #364]	@ (8003604 <HAL_DMA_IRQHandler+0x41c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01d      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a5a      	ldr	r2, [pc, #360]	@ (8003608 <HAL_DMA_IRQHandler+0x420>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a58      	ldr	r2, [pc, #352]	@ (800360c <HAL_DMA_IRQHandler+0x424>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a57      	ldr	r2, [pc, #348]	@ (8003610 <HAL_DMA_IRQHandler+0x428>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a55      	ldr	r2, [pc, #340]	@ (8003614 <HAL_DMA_IRQHandler+0x42c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a54      	ldr	r2, [pc, #336]	@ (8003618 <HAL_DMA_IRQHandler+0x430>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2ee>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a52      	ldr	r2, [pc, #328]	@ (800361c <HAL_DMA_IRQHandler+0x434>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10a      	bne.n	80034ec <HAL_DMA_IRQHandler+0x304>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e003      	b.n	80034f4 <HAL_DMA_IRQHandler+0x30c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2201      	movs	r2, #1
 8003502:	409a      	lsls	r2, r3
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350c:	f043 0202 	orr.w	r2, r3, #2
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2204      	movs	r2, #4
 800351e:	409a      	lsls	r2, r3
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 808f 	beq.w	8003648 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2c      	ldr	r2, [pc, #176]	@ (80035e0 <HAL_DMA_IRQHandler+0x3f8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04a      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2a      	ldr	r2, [pc, #168]	@ (80035e4 <HAL_DMA_IRQHandler+0x3fc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d045      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a29      	ldr	r2, [pc, #164]	@ (80035e8 <HAL_DMA_IRQHandler+0x400>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d040      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a27      	ldr	r2, [pc, #156]	@ (80035ec <HAL_DMA_IRQHandler+0x404>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d03b      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a26      	ldr	r2, [pc, #152]	@ (80035f0 <HAL_DMA_IRQHandler+0x408>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d036      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a24      	ldr	r2, [pc, #144]	@ (80035f4 <HAL_DMA_IRQHandler+0x40c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a23      	ldr	r2, [pc, #140]	@ (80035f8 <HAL_DMA_IRQHandler+0x410>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d02c      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a21      	ldr	r2, [pc, #132]	@ (80035fc <HAL_DMA_IRQHandler+0x414>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d027      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a20      	ldr	r2, [pc, #128]	@ (8003600 <HAL_DMA_IRQHandler+0x418>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d022      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1e      	ldr	r2, [pc, #120]	@ (8003604 <HAL_DMA_IRQHandler+0x41c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <HAL_DMA_IRQHandler+0x420>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1b      	ldr	r2, [pc, #108]	@ (800360c <HAL_DMA_IRQHandler+0x424>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003610 <HAL_DMA_IRQHandler+0x428>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <HAL_DMA_IRQHandler+0x42c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <HAL_DMA_IRQHandler+0x430>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3e2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a15      	ldr	r2, [pc, #84]	@ (800361c <HAL_DMA_IRQHandler+0x434>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d12a      	bne.n	8003620 <HAL_DMA_IRQHandler+0x438>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e023      	b.n	8003628 <HAL_DMA_IRQHandler+0x440>
 80035e0:	40020010 	.word	0x40020010
 80035e4:	40020028 	.word	0x40020028
 80035e8:	40020040 	.word	0x40020040
 80035ec:	40020058 	.word	0x40020058
 80035f0:	40020070 	.word	0x40020070
 80035f4:	40020088 	.word	0x40020088
 80035f8:	400200a0 	.word	0x400200a0
 80035fc:	400200b8 	.word	0x400200b8
 8003600:	40020410 	.word	0x40020410
 8003604:	40020428 	.word	0x40020428
 8003608:	40020440 	.word	0x40020440
 800360c:	40020458 	.word	0x40020458
 8003610:	40020470 	.word	0x40020470
 8003614:	40020488 	.word	0x40020488
 8003618:	400204a0 	.word	0x400204a0
 800361c:	400204b8 	.word	0x400204b8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2204      	movs	r2, #4
 8003636:	409a      	lsls	r2, r3
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f043 0204 	orr.w	r2, r3, #4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2210      	movs	r2, #16
 8003652:	409a      	lsls	r2, r3
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80a6 	beq.w	80037aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a85      	ldr	r2, [pc, #532]	@ (8003878 <HAL_DMA_IRQHandler+0x690>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d04a      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a83      	ldr	r2, [pc, #524]	@ (800387c <HAL_DMA_IRQHandler+0x694>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d045      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a82      	ldr	r2, [pc, #520]	@ (8003880 <HAL_DMA_IRQHandler+0x698>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d040      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a80      	ldr	r2, [pc, #512]	@ (8003884 <HAL_DMA_IRQHandler+0x69c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d03b      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7f      	ldr	r2, [pc, #508]	@ (8003888 <HAL_DMA_IRQHandler+0x6a0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d036      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a7d      	ldr	r2, [pc, #500]	@ (800388c <HAL_DMA_IRQHandler+0x6a4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d031      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7c      	ldr	r2, [pc, #496]	@ (8003890 <HAL_DMA_IRQHandler+0x6a8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02c      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7a      	ldr	r2, [pc, #488]	@ (8003894 <HAL_DMA_IRQHandler+0x6ac>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d027      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a79      	ldr	r2, [pc, #484]	@ (8003898 <HAL_DMA_IRQHandler+0x6b0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a77      	ldr	r2, [pc, #476]	@ (800389c <HAL_DMA_IRQHandler+0x6b4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01d      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a76      	ldr	r2, [pc, #472]	@ (80038a0 <HAL_DMA_IRQHandler+0x6b8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d018      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a74      	ldr	r2, [pc, #464]	@ (80038a4 <HAL_DMA_IRQHandler+0x6bc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a73      	ldr	r2, [pc, #460]	@ (80038a8 <HAL_DMA_IRQHandler+0x6c0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a71      	ldr	r2, [pc, #452]	@ (80038ac <HAL_DMA_IRQHandler+0x6c4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a70      	ldr	r2, [pc, #448]	@ (80038b0 <HAL_DMA_IRQHandler+0x6c8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_DMA_IRQHandler+0x516>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6e      	ldr	r2, [pc, #440]	@ (80038b4 <HAL_DMA_IRQHandler+0x6cc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10a      	bne.n	8003714 <HAL_DMA_IRQHandler+0x52c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e009      	b.n	8003728 <HAL_DMA_IRQHandler+0x540>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d03e      	beq.n	80037aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2210      	movs	r2, #16
 8003736:	409a      	lsls	r2, r3
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d108      	bne.n	800376a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d024      	beq.n	80037aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e01f      	b.n	80037aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01b      	beq.n	80037aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
 800377a:	e016      	b.n	80037aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0208 	bic.w	r2, r2, #8
 8003798:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	2220      	movs	r2, #32
 80037b4:	409a      	lsls	r2, r3
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8110 	beq.w	80039e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003878 <HAL_DMA_IRQHandler+0x690>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d04a      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2b      	ldr	r2, [pc, #172]	@ (800387c <HAL_DMA_IRQHandler+0x694>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d045      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a29      	ldr	r2, [pc, #164]	@ (8003880 <HAL_DMA_IRQHandler+0x698>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d040      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a28      	ldr	r2, [pc, #160]	@ (8003884 <HAL_DMA_IRQHandler+0x69c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d03b      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a26      	ldr	r2, [pc, #152]	@ (8003888 <HAL_DMA_IRQHandler+0x6a0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d036      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a25      	ldr	r2, [pc, #148]	@ (800388c <HAL_DMA_IRQHandler+0x6a4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d031      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a23      	ldr	r2, [pc, #140]	@ (8003890 <HAL_DMA_IRQHandler+0x6a8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d02c      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <HAL_DMA_IRQHandler+0x6ac>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d027      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a20      	ldr	r2, [pc, #128]	@ (8003898 <HAL_DMA_IRQHandler+0x6b0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d022      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1f      	ldr	r2, [pc, #124]	@ (800389c <HAL_DMA_IRQHandler+0x6b4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d01d      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1d      	ldr	r2, [pc, #116]	@ (80038a0 <HAL_DMA_IRQHandler+0x6b8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d018      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1c      	ldr	r2, [pc, #112]	@ (80038a4 <HAL_DMA_IRQHandler+0x6bc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1a      	ldr	r2, [pc, #104]	@ (80038a8 <HAL_DMA_IRQHandler+0x6c0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a19      	ldr	r2, [pc, #100]	@ (80038ac <HAL_DMA_IRQHandler+0x6c4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a17      	ldr	r2, [pc, #92]	@ (80038b0 <HAL_DMA_IRQHandler+0x6c8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_DMA_IRQHandler+0x678>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a16      	ldr	r2, [pc, #88]	@ (80038b4 <HAL_DMA_IRQHandler+0x6cc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d12b      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x6d0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	e02a      	b.n	80038cc <HAL_DMA_IRQHandler+0x6e4>
 8003876:	bf00      	nop
 8003878:	40020010 	.word	0x40020010
 800387c:	40020028 	.word	0x40020028
 8003880:	40020040 	.word	0x40020040
 8003884:	40020058 	.word	0x40020058
 8003888:	40020070 	.word	0x40020070
 800388c:	40020088 	.word	0x40020088
 8003890:	400200a0 	.word	0x400200a0
 8003894:	400200b8 	.word	0x400200b8
 8003898:	40020410 	.word	0x40020410
 800389c:	40020428 	.word	0x40020428
 80038a0:	40020440 	.word	0x40020440
 80038a4:	40020458 	.word	0x40020458
 80038a8:	40020470 	.word	0x40020470
 80038ac:	40020488 	.word	0x40020488
 80038b0:	400204a0 	.word	0x400204a0
 80038b4:	400204b8 	.word	0x400204b8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8087 	beq.w	80039e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2220      	movs	r2, #32
 80038dc:	409a      	lsls	r2, r3
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d139      	bne.n	8003962 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0216 	bic.w	r2, r2, #22
 80038fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800390c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <HAL_DMA_IRQHandler+0x736>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0208 	bic.w	r2, r2, #8
 800392c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	223f      	movs	r2, #63	@ 0x3f
 8003938:	409a      	lsls	r2, r3
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8382 	beq.w	800405c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
          }
          return;
 8003960:	e37c      	b.n	800405c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	2b00      	cmp	r3, #0
 8003984:	d02c      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
 800398e:	e027      	b.n	80039e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d023      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
 80039a0:	e01e      	b.n	80039e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10f      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0210 	bic.w	r2, r2, #16
 80039be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 833e 	beq.w	8004066 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8088 	beq.w	8003b08 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2204      	movs	r2, #4
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a89      	ldr	r2, [pc, #548]	@ (8003c2c <HAL_DMA_IRQHandler+0xa44>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d04a      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a88      	ldr	r2, [pc, #544]	@ (8003c30 <HAL_DMA_IRQHandler+0xa48>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d045      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a86      	ldr	r2, [pc, #536]	@ (8003c34 <HAL_DMA_IRQHandler+0xa4c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d040      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a85      	ldr	r2, [pc, #532]	@ (8003c38 <HAL_DMA_IRQHandler+0xa50>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d03b      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a83      	ldr	r2, [pc, #524]	@ (8003c3c <HAL_DMA_IRQHandler+0xa54>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d036      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a82      	ldr	r2, [pc, #520]	@ (8003c40 <HAL_DMA_IRQHandler+0xa58>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d031      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a80      	ldr	r2, [pc, #512]	@ (8003c44 <HAL_DMA_IRQHandler+0xa5c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02c      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7f      	ldr	r2, [pc, #508]	@ (8003c48 <HAL_DMA_IRQHandler+0xa60>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d027      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a7d      	ldr	r2, [pc, #500]	@ (8003c4c <HAL_DMA_IRQHandler+0xa64>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c50 <HAL_DMA_IRQHandler+0xa68>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01d      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a7a      	ldr	r2, [pc, #488]	@ (8003c54 <HAL_DMA_IRQHandler+0xa6c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a79      	ldr	r2, [pc, #484]	@ (8003c58 <HAL_DMA_IRQHandler+0xa70>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a77      	ldr	r2, [pc, #476]	@ (8003c5c <HAL_DMA_IRQHandler+0xa74>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a76      	ldr	r2, [pc, #472]	@ (8003c60 <HAL_DMA_IRQHandler+0xa78>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a74      	ldr	r2, [pc, #464]	@ (8003c64 <HAL_DMA_IRQHandler+0xa7c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x8b8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a73      	ldr	r2, [pc, #460]	@ (8003c68 <HAL_DMA_IRQHandler+0xa80>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d108      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x8ca>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e007      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x8da>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d307      	bcc.n	8003ade <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f2      	bne.n	8003ac2 <HAL_DMA_IRQHandler+0x8da>
 8003adc:	e000      	b.n	8003ae0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ade:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2203      	movs	r2, #3
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003af6:	e003      	b.n	8003b00 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 82aa 	beq.w	8004066 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
 8003b1a:	e2a4      	b.n	8004066 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a52      	ldr	r2, [pc, #328]	@ (8003c6c <HAL_DMA_IRQHandler+0xa84>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d04a      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a51      	ldr	r2, [pc, #324]	@ (8003c70 <HAL_DMA_IRQHandler+0xa88>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d045      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4f      	ldr	r2, [pc, #316]	@ (8003c74 <HAL_DMA_IRQHandler+0xa8c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d040      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a4e      	ldr	r2, [pc, #312]	@ (8003c78 <HAL_DMA_IRQHandler+0xa90>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d03b      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a4c      	ldr	r2, [pc, #304]	@ (8003c7c <HAL_DMA_IRQHandler+0xa94>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d036      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <HAL_DMA_IRQHandler+0xa98>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d031      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a49      	ldr	r2, [pc, #292]	@ (8003c84 <HAL_DMA_IRQHandler+0xa9c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02c      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a48      	ldr	r2, [pc, #288]	@ (8003c88 <HAL_DMA_IRQHandler+0xaa0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d027      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a46      	ldr	r2, [pc, #280]	@ (8003c8c <HAL_DMA_IRQHandler+0xaa4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d022      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a45      	ldr	r2, [pc, #276]	@ (8003c90 <HAL_DMA_IRQHandler+0xaa8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d01d      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a43      	ldr	r2, [pc, #268]	@ (8003c94 <HAL_DMA_IRQHandler+0xaac>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d018      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a42      	ldr	r2, [pc, #264]	@ (8003c98 <HAL_DMA_IRQHandler+0xab0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d013      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a40      	ldr	r2, [pc, #256]	@ (8003c9c <HAL_DMA_IRQHandler+0xab4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00e      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca0 <HAL_DMA_IRQHandler+0xab8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d009      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a3d      	ldr	r2, [pc, #244]	@ (8003ca4 <HAL_DMA_IRQHandler+0xabc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x9d4>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca8 <HAL_DMA_IRQHandler+0xac0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x9d8>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x9da>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 824f 	beq.w	8004066 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2204      	movs	r2, #4
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80dd 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xbb8>
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80d7 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d059      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d14a      	bne.n	8003cac <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8220 	beq.w	8004060 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c28:	e21a      	b.n	8004060 <HAL_DMA_IRQHandler+0xe78>
 8003c2a:	bf00      	nop
 8003c2c:	40020010 	.word	0x40020010
 8003c30:	40020028 	.word	0x40020028
 8003c34:	40020040 	.word	0x40020040
 8003c38:	40020058 	.word	0x40020058
 8003c3c:	40020070 	.word	0x40020070
 8003c40:	40020088 	.word	0x40020088
 8003c44:	400200a0 	.word	0x400200a0
 8003c48:	400200b8 	.word	0x400200b8
 8003c4c:	40020410 	.word	0x40020410
 8003c50:	40020428 	.word	0x40020428
 8003c54:	40020440 	.word	0x40020440
 8003c58:	40020458 	.word	0x40020458
 8003c5c:	40020470 	.word	0x40020470
 8003c60:	40020488 	.word	0x40020488
 8003c64:	400204a0 	.word	0x400204a0
 8003c68:	400204b8 	.word	0x400204b8
 8003c6c:	48022c08 	.word	0x48022c08
 8003c70:	48022c1c 	.word	0x48022c1c
 8003c74:	48022c30 	.word	0x48022c30
 8003c78:	48022c44 	.word	0x48022c44
 8003c7c:	48022c58 	.word	0x48022c58
 8003c80:	48022c6c 	.word	0x48022c6c
 8003c84:	48022c80 	.word	0x48022c80
 8003c88:	48022c94 	.word	0x48022c94
 8003c8c:	58025408 	.word	0x58025408
 8003c90:	5802541c 	.word	0x5802541c
 8003c94:	58025430 	.word	0x58025430
 8003c98:	58025444 	.word	0x58025444
 8003c9c:	58025458 	.word	0x58025458
 8003ca0:	5802546c 	.word	0x5802546c
 8003ca4:	58025480 	.word	0x58025480
 8003ca8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 81d5 	beq.w	8004060 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cbe:	e1cf      	b.n	8004060 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d160      	bne.n	8003d8c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7f      	ldr	r2, [pc, #508]	@ (8003ecc <HAL_DMA_IRQHandler+0xce4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d04a      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a7d      	ldr	r2, [pc, #500]	@ (8003ed0 <HAL_DMA_IRQHandler+0xce8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d045      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ed4 <HAL_DMA_IRQHandler+0xcec>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d040      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7a      	ldr	r2, [pc, #488]	@ (8003ed8 <HAL_DMA_IRQHandler+0xcf0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d03b      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a79      	ldr	r2, [pc, #484]	@ (8003edc <HAL_DMA_IRQHandler+0xcf4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d036      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a77      	ldr	r2, [pc, #476]	@ (8003ee0 <HAL_DMA_IRQHandler+0xcf8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a76      	ldr	r2, [pc, #472]	@ (8003ee4 <HAL_DMA_IRQHandler+0xcfc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d02c      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a74      	ldr	r2, [pc, #464]	@ (8003ee8 <HAL_DMA_IRQHandler+0xd00>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d027      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a73      	ldr	r2, [pc, #460]	@ (8003eec <HAL_DMA_IRQHandler+0xd04>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a71      	ldr	r2, [pc, #452]	@ (8003ef0 <HAL_DMA_IRQHandler+0xd08>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01d      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a70      	ldr	r2, [pc, #448]	@ (8003ef4 <HAL_DMA_IRQHandler+0xd0c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ef8 <HAL_DMA_IRQHandler+0xd10>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6d      	ldr	r2, [pc, #436]	@ (8003efc <HAL_DMA_IRQHandler+0xd14>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6b      	ldr	r2, [pc, #428]	@ (8003f00 <HAL_DMA_IRQHandler+0xd18>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a6a      	ldr	r2, [pc, #424]	@ (8003f04 <HAL_DMA_IRQHandler+0xd1c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xb82>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a68      	ldr	r2, [pc, #416]	@ (8003f08 <HAL_DMA_IRQHandler+0xd20>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d108      	bne.n	8003d7c <HAL_DMA_IRQHandler+0xb94>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0208 	bic.w	r2, r2, #8
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e007      	b.n	8003d8c <HAL_DMA_IRQHandler+0xba4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0204 	bic.w	r2, r2, #4
 8003d8a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8165 	beq.w	8004060 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d9e:	e15f      	b.n	8004060 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2202      	movs	r2, #2
 8003daa:	409a      	lsls	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80c5 	beq.w	8003f40 <HAL_DMA_IRQHandler+0xd58>
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80bf 	beq.w	8003f40 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2202      	movs	r2, #2
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d018      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 813a 	beq.w	8004064 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df8:	e134      	b.n	8004064 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8130 	beq.w	8004064 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0c:	e12a      	b.n	8004064 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f040 8089 	bne.w	8003f2c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003ecc <HAL_DMA_IRQHandler+0xce4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d04a      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a29      	ldr	r2, [pc, #164]	@ (8003ed0 <HAL_DMA_IRQHandler+0xce8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d045      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a28      	ldr	r2, [pc, #160]	@ (8003ed4 <HAL_DMA_IRQHandler+0xcec>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d040      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ed8 <HAL_DMA_IRQHandler+0xcf0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d03b      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a25      	ldr	r2, [pc, #148]	@ (8003edc <HAL_DMA_IRQHandler+0xcf4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d036      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a23      	ldr	r2, [pc, #140]	@ (8003ee0 <HAL_DMA_IRQHandler+0xcf8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d031      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a22      	ldr	r2, [pc, #136]	@ (8003ee4 <HAL_DMA_IRQHandler+0xcfc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d02c      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a20      	ldr	r2, [pc, #128]	@ (8003ee8 <HAL_DMA_IRQHandler+0xd00>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d027      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003eec <HAL_DMA_IRQHandler+0xd04>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_DMA_IRQHandler+0xd08>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01d      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef4 <HAL_DMA_IRQHandler+0xd0c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d018      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef8 <HAL_DMA_IRQHandler+0xd10>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <HAL_DMA_IRQHandler+0xd14>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	@ (8003f00 <HAL_DMA_IRQHandler+0xd18>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a16      	ldr	r2, [pc, #88]	@ (8003f04 <HAL_DMA_IRQHandler+0xd1c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_DMA_IRQHandler+0xcd2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	@ (8003f08 <HAL_DMA_IRQHandler+0xd20>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d128      	bne.n	8003f0c <HAL_DMA_IRQHandler+0xd24>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0214 	bic.w	r2, r2, #20
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e027      	b.n	8003f1c <HAL_DMA_IRQHandler+0xd34>
 8003ecc:	40020010 	.word	0x40020010
 8003ed0:	40020028 	.word	0x40020028
 8003ed4:	40020040 	.word	0x40020040
 8003ed8:	40020058 	.word	0x40020058
 8003edc:	40020070 	.word	0x40020070
 8003ee0:	40020088 	.word	0x40020088
 8003ee4:	400200a0 	.word	0x400200a0
 8003ee8:	400200b8 	.word	0x400200b8
 8003eec:	40020410 	.word	0x40020410
 8003ef0:	40020428 	.word	0x40020428
 8003ef4:	40020440 	.word	0x40020440
 8003ef8:	40020458 	.word	0x40020458
 8003efc:	40020470 	.word	0x40020470
 8003f00:	40020488 	.word	0x40020488
 8003f04:	400204a0 	.word	0x400204a0
 8003f08:	400204b8 	.word	0x400204b8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 020a 	bic.w	r2, r2, #10
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8097 	beq.w	8004064 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f3e:	e091      	b.n	8004064 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2208      	movs	r2, #8
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8088 	beq.w	8004066 <HAL_DMA_IRQHandler+0xe7e>
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8082 	beq.w	8004066 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a41      	ldr	r2, [pc, #260]	@ (800406c <HAL_DMA_IRQHandler+0xe84>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d04a      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a3f      	ldr	r2, [pc, #252]	@ (8004070 <HAL_DMA_IRQHandler+0xe88>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d045      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004074 <HAL_DMA_IRQHandler+0xe8c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d040      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a3c      	ldr	r2, [pc, #240]	@ (8004078 <HAL_DMA_IRQHandler+0xe90>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d03b      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800407c <HAL_DMA_IRQHandler+0xe94>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d036      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a39      	ldr	r2, [pc, #228]	@ (8004080 <HAL_DMA_IRQHandler+0xe98>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d031      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a38      	ldr	r2, [pc, #224]	@ (8004084 <HAL_DMA_IRQHandler+0xe9c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d02c      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a36      	ldr	r2, [pc, #216]	@ (8004088 <HAL_DMA_IRQHandler+0xea0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d027      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a35      	ldr	r2, [pc, #212]	@ (800408c <HAL_DMA_IRQHandler+0xea4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a33      	ldr	r2, [pc, #204]	@ (8004090 <HAL_DMA_IRQHandler+0xea8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <HAL_DMA_IRQHandler+0xeac>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d018      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a30      	ldr	r2, [pc, #192]	@ (8004098 <HAL_DMA_IRQHandler+0xeb0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2f      	ldr	r2, [pc, #188]	@ (800409c <HAL_DMA_IRQHandler+0xeb4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80040a0 <HAL_DMA_IRQHandler+0xeb8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80040a4 <HAL_DMA_IRQHandler+0xebc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe1a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80040a8 <HAL_DMA_IRQHandler+0xec0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <HAL_DMA_IRQHandler+0xe2c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 021c 	bic.w	r2, r2, #28
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e007      	b.n	8004024 <HAL_DMA_IRQHandler+0xe3c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 020e 	bic.w	r2, r2, #14
 8004022:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	2201      	movs	r2, #1
 800402e:	409a      	lsls	r2, r3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
 800405a:	e004      	b.n	8004066 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800405c:	bf00      	nop
 800405e:	e002      	b.n	8004066 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004060:	bf00      	nop
 8004062:	e000      	b.n	8004066 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004064:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004066:	3728      	adds	r7, #40	@ 0x28
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40020010 	.word	0x40020010
 8004070:	40020028 	.word	0x40020028
 8004074:	40020040 	.word	0x40020040
 8004078:	40020058 	.word	0x40020058
 800407c:	40020070 	.word	0x40020070
 8004080:	40020088 	.word	0x40020088
 8004084:	400200a0 	.word	0x400200a0
 8004088:	400200b8 	.word	0x400200b8
 800408c:	40020410 	.word	0x40020410
 8004090:	40020428 	.word	0x40020428
 8004094:	40020440 	.word	0x40020440
 8004098:	40020458 	.word	0x40020458
 800409c:	40020470 	.word	0x40020470
 80040a0:	40020488 	.word	0x40020488
 80040a4:	400204a0 	.word	0x400204a0
 80040a8:	400204b8 	.word	0x400204b8

080040ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a7f      	ldr	r2, [pc, #508]	@ (80042c8 <DMA_SetConfig+0x21c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d072      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a7d      	ldr	r2, [pc, #500]	@ (80042cc <DMA_SetConfig+0x220>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d06d      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7c      	ldr	r2, [pc, #496]	@ (80042d0 <DMA_SetConfig+0x224>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d068      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a7a      	ldr	r2, [pc, #488]	@ (80042d4 <DMA_SetConfig+0x228>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d063      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a79      	ldr	r2, [pc, #484]	@ (80042d8 <DMA_SetConfig+0x22c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d05e      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a77      	ldr	r2, [pc, #476]	@ (80042dc <DMA_SetConfig+0x230>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d059      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a76      	ldr	r2, [pc, #472]	@ (80042e0 <DMA_SetConfig+0x234>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d054      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a74      	ldr	r2, [pc, #464]	@ (80042e4 <DMA_SetConfig+0x238>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d04f      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a73      	ldr	r2, [pc, #460]	@ (80042e8 <DMA_SetConfig+0x23c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d04a      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a71      	ldr	r2, [pc, #452]	@ (80042ec <DMA_SetConfig+0x240>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d045      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a70      	ldr	r2, [pc, #448]	@ (80042f0 <DMA_SetConfig+0x244>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d040      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a6e      	ldr	r2, [pc, #440]	@ (80042f4 <DMA_SetConfig+0x248>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d03b      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a6d      	ldr	r2, [pc, #436]	@ (80042f8 <DMA_SetConfig+0x24c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d036      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6b      	ldr	r2, [pc, #428]	@ (80042fc <DMA_SetConfig+0x250>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d031      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a6a      	ldr	r2, [pc, #424]	@ (8004300 <DMA_SetConfig+0x254>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d02c      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a68      	ldr	r2, [pc, #416]	@ (8004304 <DMA_SetConfig+0x258>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d027      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a67      	ldr	r2, [pc, #412]	@ (8004308 <DMA_SetConfig+0x25c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d022      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a65      	ldr	r2, [pc, #404]	@ (800430c <DMA_SetConfig+0x260>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01d      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a64      	ldr	r2, [pc, #400]	@ (8004310 <DMA_SetConfig+0x264>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d018      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a62      	ldr	r2, [pc, #392]	@ (8004314 <DMA_SetConfig+0x268>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a61      	ldr	r2, [pc, #388]	@ (8004318 <DMA_SetConfig+0x26c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a5f      	ldr	r2, [pc, #380]	@ (800431c <DMA_SetConfig+0x270>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004320 <DMA_SetConfig+0x274>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <DMA_SetConfig+0x10a>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a5c      	ldr	r2, [pc, #368]	@ (8004324 <DMA_SetConfig+0x278>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <DMA_SetConfig+0x10e>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <DMA_SetConfig+0x110>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a39      	ldr	r2, [pc, #228]	@ (80042c8 <DMA_SetConfig+0x21c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04a      	beq.n	800427c <DMA_SetConfig+0x1d0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a38      	ldr	r2, [pc, #224]	@ (80042cc <DMA_SetConfig+0x220>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d045      	beq.n	800427c <DMA_SetConfig+0x1d0>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a36      	ldr	r2, [pc, #216]	@ (80042d0 <DMA_SetConfig+0x224>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d040      	beq.n	800427c <DMA_SetConfig+0x1d0>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a35      	ldr	r2, [pc, #212]	@ (80042d4 <DMA_SetConfig+0x228>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d03b      	beq.n	800427c <DMA_SetConfig+0x1d0>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a33      	ldr	r2, [pc, #204]	@ (80042d8 <DMA_SetConfig+0x22c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d036      	beq.n	800427c <DMA_SetConfig+0x1d0>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a32      	ldr	r2, [pc, #200]	@ (80042dc <DMA_SetConfig+0x230>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d031      	beq.n	800427c <DMA_SetConfig+0x1d0>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a30      	ldr	r2, [pc, #192]	@ (80042e0 <DMA_SetConfig+0x234>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02c      	beq.n	800427c <DMA_SetConfig+0x1d0>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2f      	ldr	r2, [pc, #188]	@ (80042e4 <DMA_SetConfig+0x238>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d027      	beq.n	800427c <DMA_SetConfig+0x1d0>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2d      	ldr	r2, [pc, #180]	@ (80042e8 <DMA_SetConfig+0x23c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d022      	beq.n	800427c <DMA_SetConfig+0x1d0>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2c      	ldr	r2, [pc, #176]	@ (80042ec <DMA_SetConfig+0x240>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d01d      	beq.n	800427c <DMA_SetConfig+0x1d0>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2a      	ldr	r2, [pc, #168]	@ (80042f0 <DMA_SetConfig+0x244>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d018      	beq.n	800427c <DMA_SetConfig+0x1d0>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a29      	ldr	r2, [pc, #164]	@ (80042f4 <DMA_SetConfig+0x248>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <DMA_SetConfig+0x1d0>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a27      	ldr	r2, [pc, #156]	@ (80042f8 <DMA_SetConfig+0x24c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00e      	beq.n	800427c <DMA_SetConfig+0x1d0>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <DMA_SetConfig+0x250>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <DMA_SetConfig+0x1d0>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a24      	ldr	r2, [pc, #144]	@ (8004300 <DMA_SetConfig+0x254>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <DMA_SetConfig+0x1d0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a23      	ldr	r2, [pc, #140]	@ (8004304 <DMA_SetConfig+0x258>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d101      	bne.n	8004280 <DMA_SetConfig+0x1d4>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <DMA_SetConfig+0x1d6>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d059      	beq.n	800433a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	223f      	movs	r2, #63	@ 0x3f
 8004290:	409a      	lsls	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b40      	cmp	r3, #64	@ 0x40
 80042b4:	d138      	bne.n	8004328 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042c6:	e0ae      	b.n	8004426 <DMA_SetConfig+0x37a>
 80042c8:	40020010 	.word	0x40020010
 80042cc:	40020028 	.word	0x40020028
 80042d0:	40020040 	.word	0x40020040
 80042d4:	40020058 	.word	0x40020058
 80042d8:	40020070 	.word	0x40020070
 80042dc:	40020088 	.word	0x40020088
 80042e0:	400200a0 	.word	0x400200a0
 80042e4:	400200b8 	.word	0x400200b8
 80042e8:	40020410 	.word	0x40020410
 80042ec:	40020428 	.word	0x40020428
 80042f0:	40020440 	.word	0x40020440
 80042f4:	40020458 	.word	0x40020458
 80042f8:	40020470 	.word	0x40020470
 80042fc:	40020488 	.word	0x40020488
 8004300:	400204a0 	.word	0x400204a0
 8004304:	400204b8 	.word	0x400204b8
 8004308:	58025408 	.word	0x58025408
 800430c:	5802541c 	.word	0x5802541c
 8004310:	58025430 	.word	0x58025430
 8004314:	58025444 	.word	0x58025444
 8004318:	58025458 	.word	0x58025458
 800431c:	5802546c 	.word	0x5802546c
 8004320:	58025480 	.word	0x58025480
 8004324:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]
}
 8004338:	e075      	b.n	8004426 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a3d      	ldr	r2, [pc, #244]	@ (8004434 <DMA_SetConfig+0x388>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d04a      	beq.n	80043da <DMA_SetConfig+0x32e>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3b      	ldr	r2, [pc, #236]	@ (8004438 <DMA_SetConfig+0x38c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d045      	beq.n	80043da <DMA_SetConfig+0x32e>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a3a      	ldr	r2, [pc, #232]	@ (800443c <DMA_SetConfig+0x390>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d040      	beq.n	80043da <DMA_SetConfig+0x32e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a38      	ldr	r2, [pc, #224]	@ (8004440 <DMA_SetConfig+0x394>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d03b      	beq.n	80043da <DMA_SetConfig+0x32e>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a37      	ldr	r2, [pc, #220]	@ (8004444 <DMA_SetConfig+0x398>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d036      	beq.n	80043da <DMA_SetConfig+0x32e>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a35      	ldr	r2, [pc, #212]	@ (8004448 <DMA_SetConfig+0x39c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d031      	beq.n	80043da <DMA_SetConfig+0x32e>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a34      	ldr	r2, [pc, #208]	@ (800444c <DMA_SetConfig+0x3a0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d02c      	beq.n	80043da <DMA_SetConfig+0x32e>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a32      	ldr	r2, [pc, #200]	@ (8004450 <DMA_SetConfig+0x3a4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d027      	beq.n	80043da <DMA_SetConfig+0x32e>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a31      	ldr	r2, [pc, #196]	@ (8004454 <DMA_SetConfig+0x3a8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d022      	beq.n	80043da <DMA_SetConfig+0x32e>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2f      	ldr	r2, [pc, #188]	@ (8004458 <DMA_SetConfig+0x3ac>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01d      	beq.n	80043da <DMA_SetConfig+0x32e>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2e      	ldr	r2, [pc, #184]	@ (800445c <DMA_SetConfig+0x3b0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <DMA_SetConfig+0x32e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004460 <DMA_SetConfig+0x3b4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <DMA_SetConfig+0x32e>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004464 <DMA_SetConfig+0x3b8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <DMA_SetConfig+0x32e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a29      	ldr	r2, [pc, #164]	@ (8004468 <DMA_SetConfig+0x3bc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <DMA_SetConfig+0x32e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a28      	ldr	r2, [pc, #160]	@ (800446c <DMA_SetConfig+0x3c0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <DMA_SetConfig+0x32e>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <DMA_SetConfig+0x3c4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <DMA_SetConfig+0x332>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <DMA_SetConfig+0x334>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	2201      	movs	r2, #1
 80043ee:	409a      	lsls	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d108      	bne.n	8004416 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	60da      	str	r2, [r3, #12]
}
 8004414:	e007      	b.n	8004426 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	60da      	str	r2, [r3, #12]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	48022c08 	.word	0x48022c08
 8004438:	48022c1c 	.word	0x48022c1c
 800443c:	48022c30 	.word	0x48022c30
 8004440:	48022c44 	.word	0x48022c44
 8004444:	48022c58 	.word	0x48022c58
 8004448:	48022c6c 	.word	0x48022c6c
 800444c:	48022c80 	.word	0x48022c80
 8004450:	48022c94 	.word	0x48022c94
 8004454:	58025408 	.word	0x58025408
 8004458:	5802541c 	.word	0x5802541c
 800445c:	58025430 	.word	0x58025430
 8004460:	58025444 	.word	0x58025444
 8004464:	58025458 	.word	0x58025458
 8004468:	5802546c 	.word	0x5802546c
 800446c:	58025480 	.word	0x58025480
 8004470:	58025494 	.word	0x58025494

08004474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a42      	ldr	r2, [pc, #264]	@ (800458c <DMA_CalcBaseAndBitshift+0x118>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d04a      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a41      	ldr	r2, [pc, #260]	@ (8004590 <DMA_CalcBaseAndBitshift+0x11c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d045      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3f      	ldr	r2, [pc, #252]	@ (8004594 <DMA_CalcBaseAndBitshift+0x120>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d040      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a3e      	ldr	r2, [pc, #248]	@ (8004598 <DMA_CalcBaseAndBitshift+0x124>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d03b      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a3c      	ldr	r2, [pc, #240]	@ (800459c <DMA_CalcBaseAndBitshift+0x128>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d036      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3b      	ldr	r2, [pc, #236]	@ (80045a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d031      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a39      	ldr	r2, [pc, #228]	@ (80045a4 <DMA_CalcBaseAndBitshift+0x130>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02c      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a38      	ldr	r2, [pc, #224]	@ (80045a8 <DMA_CalcBaseAndBitshift+0x134>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d027      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a36      	ldr	r2, [pc, #216]	@ (80045ac <DMA_CalcBaseAndBitshift+0x138>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a35      	ldr	r2, [pc, #212]	@ (80045b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a33      	ldr	r2, [pc, #204]	@ (80045b4 <DMA_CalcBaseAndBitshift+0x140>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a32      	ldr	r2, [pc, #200]	@ (80045b8 <DMA_CalcBaseAndBitshift+0x144>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a30      	ldr	r2, [pc, #192]	@ (80045bc <DMA_CalcBaseAndBitshift+0x148>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2f      	ldr	r2, [pc, #188]	@ (80045c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2d      	ldr	r2, [pc, #180]	@ (80045c4 <DMA_CalcBaseAndBitshift+0x150>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <DMA_CalcBaseAndBitshift+0xa8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <DMA_CalcBaseAndBitshift+0x154>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <DMA_CalcBaseAndBitshift+0xac>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <DMA_CalcBaseAndBitshift+0xae>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d024      	beq.n	8004570 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	3b10      	subs	r3, #16
 800452e:	4a27      	ldr	r2, [pc, #156]	@ (80045cc <DMA_CalcBaseAndBitshift+0x158>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	4a24      	ldr	r2, [pc, #144]	@ (80045d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004540:	5cd3      	ldrb	r3, [r2, r3]
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d908      	bls.n	8004560 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <DMA_CalcBaseAndBitshift+0x160>)
 8004556:	4013      	ands	r3, r2
 8004558:	1d1a      	adds	r2, r3, #4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	659a      	str	r2, [r3, #88]	@ 0x58
 800455e:	e00d      	b.n	800457c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	4b1b      	ldr	r3, [pc, #108]	@ (80045d4 <DMA_CalcBaseAndBitshift+0x160>)
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6593      	str	r3, [r2, #88]	@ 0x58
 800456e:	e005      	b.n	800457c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40020010 	.word	0x40020010
 8004590:	40020028 	.word	0x40020028
 8004594:	40020040 	.word	0x40020040
 8004598:	40020058 	.word	0x40020058
 800459c:	40020070 	.word	0x40020070
 80045a0:	40020088 	.word	0x40020088
 80045a4:	400200a0 	.word	0x400200a0
 80045a8:	400200b8 	.word	0x400200b8
 80045ac:	40020410 	.word	0x40020410
 80045b0:	40020428 	.word	0x40020428
 80045b4:	40020440 	.word	0x40020440
 80045b8:	40020458 	.word	0x40020458
 80045bc:	40020470 	.word	0x40020470
 80045c0:	40020488 	.word	0x40020488
 80045c4:	400204a0 	.word	0x400204a0
 80045c8:	400204b8 	.word	0x400204b8
 80045cc:	aaaaaaab 	.word	0xaaaaaaab
 80045d0:	0800bad8 	.word	0x0800bad8
 80045d4:	fffffc00 	.word	0xfffffc00

080045d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d120      	bne.n	800462e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d858      	bhi.n	80046a6 <DMA_CheckFifoParam+0xce>
 80045f4:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <DMA_CheckFifoParam+0x24>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	0800460d 	.word	0x0800460d
 8004600:	0800461f 	.word	0x0800461f
 8004604:	0800460d 	.word	0x0800460d
 8004608:	080046a7 	.word	0x080046a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d048      	beq.n	80046aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800461c:	e045      	b.n	80046aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004626:	d142      	bne.n	80046ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800462c:	e03f      	b.n	80046ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004636:	d123      	bne.n	8004680 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463c:	2b03      	cmp	r3, #3
 800463e:	d838      	bhi.n	80046b2 <DMA_CheckFifoParam+0xda>
 8004640:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <DMA_CheckFifoParam+0x70>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	08004659 	.word	0x08004659
 800464c:	0800465f 	.word	0x0800465f
 8004650:	08004659 	.word	0x08004659
 8004654:	08004671 	.word	0x08004671
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
        break;
 800465c:	e030      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d025      	beq.n	80046b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800466e:	e022      	b.n	80046b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004678:	d11f      	bne.n	80046ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800467e:	e01c      	b.n	80046ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	2b02      	cmp	r3, #2
 8004686:	d902      	bls.n	800468e <DMA_CheckFifoParam+0xb6>
 8004688:	2b03      	cmp	r3, #3
 800468a:	d003      	beq.n	8004694 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800468c:	e018      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
        break;
 8004692:	e015      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
    break;
 80046a4:	e00b      	b.n	80046be <DMA_CheckFifoParam+0xe6>
        break;
 80046a6:	bf00      	nop
 80046a8:	e00a      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
        break;
 80046aa:	bf00      	nop
 80046ac:	e008      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
        break;
 80046ae:	bf00      	nop
 80046b0:	e006      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
        break;
 80046b2:	bf00      	nop
 80046b4:	e004      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
        break;
 80046b6:	bf00      	nop
 80046b8:	e002      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
        break;
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
    break;
 80046be:	bf00      	nop
    }
  }

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop

080046d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a38      	ldr	r2, [pc, #224]	@ (80047c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d022      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a36      	ldr	r2, [pc, #216]	@ (80047c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d01d      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a35      	ldr	r2, [pc, #212]	@ (80047cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d018      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a33      	ldr	r2, [pc, #204]	@ (80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a32      	ldr	r2, [pc, #200]	@ (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00e      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a30      	ldr	r2, [pc, #192]	@ (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d009      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2f      	ldr	r2, [pc, #188]	@ (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2d      	ldr	r2, [pc, #180]	@ (80047e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d101      	bne.n	8004732 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01a      	beq.n	800476e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	3b08      	subs	r3, #8
 8004740:	4a28      	ldr	r2, [pc, #160]	@ (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4b26      	ldr	r3, [pc, #152]	@ (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	461a      	mov	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a24      	ldr	r2, [pc, #144]	@ (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800475c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	2201      	movs	r2, #1
 8004766:	409a      	lsls	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800476c:	e024      	b.n	80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3b10      	subs	r3, #16
 8004776:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d806      	bhi.n	8004796 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d902      	bls.n	8004796 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3308      	adds	r3, #8
 8004794:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4b18      	ldr	r3, [pc, #96]	@ (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	461a      	mov	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a16      	ldr	r2, [pc, #88]	@ (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80047a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2201      	movs	r2, #1
 80047b2:	409a      	lsls	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	58025408 	.word	0x58025408
 80047c8:	5802541c 	.word	0x5802541c
 80047cc:	58025430 	.word	0x58025430
 80047d0:	58025444 	.word	0x58025444
 80047d4:	58025458 	.word	0x58025458
 80047d8:	5802546c 	.word	0x5802546c
 80047dc:	58025480 	.word	0x58025480
 80047e0:	58025494 	.word	0x58025494
 80047e4:	cccccccd 	.word	0xcccccccd
 80047e8:	16009600 	.word	0x16009600
 80047ec:	58025880 	.word	0x58025880
 80047f0:	aaaaaaab 	.word	0xaaaaaaab
 80047f4:	400204b8 	.word	0x400204b8
 80047f8:	4002040f 	.word	0x4002040f
 80047fc:	10008200 	.word	0x10008200
 8004800:	40020880 	.word	0x40020880

08004804 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04a      	beq.n	80048b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d847      	bhi.n	80048b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a25      	ldr	r2, [pc, #148]	@ (80048bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a24      	ldr	r2, [pc, #144]	@ (80048c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01d      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a22      	ldr	r2, [pc, #136]	@ (80048c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a21      	ldr	r2, [pc, #132]	@ (80048c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1f      	ldr	r2, [pc, #124]	@ (80048cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1e      	ldr	r2, [pc, #120]	@ (80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1c      	ldr	r2, [pc, #112]	@ (80048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1b      	ldr	r2, [pc, #108]	@ (80048d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4b17      	ldr	r3, [pc, #92]	@ (80048dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a15      	ldr	r2, [pc, #84]	@ (80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800488c:	671a      	str	r2, [r3, #112]	@ 0x70
 800488e:	e009      	b.n	80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a11      	ldr	r2, [pc, #68]	@ (80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80048a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	2201      	movs	r2, #1
 80048aa:	409a      	lsls	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	58025408 	.word	0x58025408
 80048c0:	5802541c 	.word	0x5802541c
 80048c4:	58025430 	.word	0x58025430
 80048c8:	58025444 	.word	0x58025444
 80048cc:	58025458 	.word	0x58025458
 80048d0:	5802546c 	.word	0x5802546c
 80048d4:	58025480 	.word	0x58025480
 80048d8:	58025494 	.word	0x58025494
 80048dc:	1600963f 	.word	0x1600963f
 80048e0:	58025940 	.word	0x58025940
 80048e4:	1000823f 	.word	0x1000823f
 80048e8:	40020940 	.word	0x40020940

080048ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	@ 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048fa:	4b89      	ldr	r3, [pc, #548]	@ (8004b20 <HAL_GPIO_Init+0x234>)
 80048fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048fe:	e194      	b.n	8004c2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	2101      	movs	r1, #1
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa01 f303 	lsl.w	r3, r1, r3
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8186 	beq.w	8004c24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d005      	beq.n	8004930 <HAL_GPIO_Init+0x44>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d130      	bne.n	8004992 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004966:	2201      	movs	r2, #1
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 0201 	and.w	r2, r3, #1
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b03      	cmp	r3, #3
 800499c:	d017      	beq.n	80049ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	2203      	movs	r2, #3
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d123      	bne.n	8004a22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	08da      	lsrs	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3208      	adds	r2, #8
 80049e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	08da      	lsrs	r2, r3, #3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3208      	adds	r2, #8
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0203 	and.w	r2, r3, #3
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80e0 	beq.w	8004c24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a64:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <HAL_GPIO_Init+0x238>)
 8004a66:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b24 <HAL_GPIO_Init+0x238>)
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004a74:	4b2b      	ldr	r3, [pc, #172]	@ (8004b24 <HAL_GPIO_Init+0x238>)
 8004a76:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a82:	4a29      	ldr	r2, [pc, #164]	@ (8004b28 <HAL_GPIO_Init+0x23c>)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	3302      	adds	r3, #2
 8004a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	220f      	movs	r2, #15
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a20      	ldr	r2, [pc, #128]	@ (8004b2c <HAL_GPIO_Init+0x240>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d052      	beq.n	8004b54 <HAL_GPIO_Init+0x268>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b30 <HAL_GPIO_Init+0x244>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d031      	beq.n	8004b1a <HAL_GPIO_Init+0x22e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b34 <HAL_GPIO_Init+0x248>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d02b      	beq.n	8004b16 <HAL_GPIO_Init+0x22a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b38 <HAL_GPIO_Init+0x24c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d025      	beq.n	8004b12 <HAL_GPIO_Init+0x226>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b3c <HAL_GPIO_Init+0x250>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01f      	beq.n	8004b0e <HAL_GPIO_Init+0x222>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b40 <HAL_GPIO_Init+0x254>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d019      	beq.n	8004b0a <HAL_GPIO_Init+0x21e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b44 <HAL_GPIO_Init+0x258>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_GPIO_Init+0x21a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a19      	ldr	r2, [pc, #100]	@ (8004b48 <HAL_GPIO_Init+0x25c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00d      	beq.n	8004b02 <HAL_GPIO_Init+0x216>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	@ (8004b4c <HAL_GPIO_Init+0x260>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <HAL_GPIO_Init+0x212>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a17      	ldr	r2, [pc, #92]	@ (8004b50 <HAL_GPIO_Init+0x264>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d101      	bne.n	8004afa <HAL_GPIO_Init+0x20e>
 8004af6:	2309      	movs	r3, #9
 8004af8:	e02d      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004afa:	230a      	movs	r3, #10
 8004afc:	e02b      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004afe:	2308      	movs	r3, #8
 8004b00:	e029      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004b02:	2307      	movs	r3, #7
 8004b04:	e027      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004b06:	2306      	movs	r3, #6
 8004b08:	e025      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004b0a:	2305      	movs	r3, #5
 8004b0c:	e023      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004b0e:	2304      	movs	r3, #4
 8004b10:	e021      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004b12:	2303      	movs	r3, #3
 8004b14:	e01f      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e01d      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e01b      	b.n	8004b56 <HAL_GPIO_Init+0x26a>
 8004b1e:	bf00      	nop
 8004b20:	58000080 	.word	0x58000080
 8004b24:	58024400 	.word	0x58024400
 8004b28:	58000400 	.word	0x58000400
 8004b2c:	58020000 	.word	0x58020000
 8004b30:	58020400 	.word	0x58020400
 8004b34:	58020800 	.word	0x58020800
 8004b38:	58020c00 	.word	0x58020c00
 8004b3c:	58021000 	.word	0x58021000
 8004b40:	58021400 	.word	0x58021400
 8004b44:	58021800 	.word	0x58021800
 8004b48:	58021c00 	.word	0x58021c00
 8004b4c:	58022000 	.word	0x58022000
 8004b50:	58022400 	.word	0x58022400
 8004b54:	2300      	movs	r3, #0
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	f002 0203 	and.w	r2, r2, #3
 8004b5c:	0092      	lsls	r2, r2, #2
 8004b5e:	4093      	lsls	r3, r2
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b66:	4938      	ldr	r1, [pc, #224]	@ (8004c48 <HAL_GPIO_Init+0x35c>)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f47f ae63 	bne.w	8004900 <HAL_GPIO_Init+0x14>
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	3724      	adds	r7, #36	@ 0x24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	58000400 	.word	0x58000400

08004c4c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0b1      	b.n	8004dc6 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d101      	bne.n	8004c72 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0a9      	b.n	8004dc6 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d101      	bne.n	8004c82 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e0a1      	b.n	8004dc6 <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fc f87a 	bl	8000d98 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb2:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b40      	cmp	r3, #64	@ 0x40
 8004cba:	d119      	bne.n	8004cf0 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b43      	ldr	r3, [pc, #268]	@ (8004dd0 <HAL_OPAMP_Init+0x184>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6851      	ldr	r1, [r2, #4]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6892      	ldr	r2, [r2, #8]
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6952      	ldr	r2, [r2, #20]
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6992      	ldr	r2, [r2, #24]
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6912      	ldr	r2, [r2, #16]
 8004ce0:	4311      	orrs	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	69d2      	ldr	r2, [r2, #28]
 8004ce6:	4311      	orrs	r1, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b60      	cmp	r3, #96	@ 0x60
 8004cf6:	d113      	bne.n	8004d20 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <HAL_OPAMP_Init+0x188>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6851      	ldr	r1, [r2, #4]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6892      	ldr	r2, [r2, #8]
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6912      	ldr	r2, [r2, #16]
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	69d2      	ldr	r2, [r2, #28]
 8004d16:	4311      	orrs	r1, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d116      	bne.n	8004d56 <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b29      	ldr	r3, [pc, #164]	@ (8004dd4 <HAL_OPAMP_Init+0x188>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6851      	ldr	r1, [r2, #4]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6892      	ldr	r2, [r2, #8]
 8004d3a:	4311      	orrs	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68d2      	ldr	r2, [r2, #12]
 8004d40:	4311      	orrs	r1, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6912      	ldr	r2, [r2, #16]
 8004d46:	4311      	orrs	r1, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	69d2      	ldr	r2, [r2, #28]
 8004d4c:	4311      	orrs	r1, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	430b      	orrs	r3, r1
 8004d54:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d5e:	d127      	bne.n	8004db0 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d68:	d011      	beq.n	8004d8e <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	4b16      	ldr	r3, [pc, #88]	@ (8004dd8 <HAL_OPAMP_Init+0x18c>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6053      	str	r3, [r2, #4]
 8004d8c:	e010      	b.n	8004db0 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <HAL_OPAMP_Init+0x18c>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	fff83e93 	.word	0xfff83e93
 8004dd4:	fffbfe93 	.word	0xfffbfe93
 8004dd8:	ffffe0e0 	.word	0xffffe0e0

08004ddc <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e01d      	b.n	8004e30 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b05      	cmp	r3, #5
 8004dfe:	d102      	bne.n	8004e06 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e014      	b.n	8004e30 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d10c      	bne.n	8004e2c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2204      	movs	r2, #4
 8004e26:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8004e2a:	e001      	b.n	8004e30 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a04      	ldr	r2, [pc, #16]	@ (8004e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4e:	6013      	str	r3, [r2, #0]
}
 8004e50:	bf00      	nop
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	58024800 	.word	0x58024800

08004e60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e68:	4b29      	ldr	r3, [pc, #164]	@ (8004f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	2b06      	cmp	r3, #6
 8004e72:	d00a      	beq.n	8004e8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e74:	4b26      	ldr	r3, [pc, #152]	@ (8004f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d001      	beq.n	8004e86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e040      	b.n	8004f08 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e03e      	b.n	8004f08 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e8a:	4b21      	ldr	r3, [pc, #132]	@ (8004f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004e92:	491f      	ldr	r1, [pc, #124]	@ (8004f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e9a:	f7fc f9ff 	bl	800129c <HAL_GetTick>
 8004e9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ea0:	e009      	b.n	8004eb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ea2:	f7fc f9fb 	bl	800129c <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eb0:	d901      	bls.n	8004eb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e028      	b.n	8004f08 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004eb6:	4b16      	ldr	r3, [pc, #88]	@ (8004f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec2:	d1ee      	bne.n	8004ea2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b1e      	cmp	r3, #30
 8004ec8:	d008      	beq.n	8004edc <HAL_PWREx_ConfigSupply+0x7c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ece:	d005      	beq.n	8004edc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b1d      	cmp	r3, #29
 8004ed4:	d002      	beq.n	8004edc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b2d      	cmp	r3, #45	@ 0x2d
 8004eda:	d114      	bne.n	8004f06 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004edc:	f7fc f9de 	bl	800129c <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004ee2:	e009      	b.n	8004ef8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ee4:	f7fc f9da 	bl	800129c <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ef2:	d901      	bls.n	8004ef8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e007      	b.n	8004f08 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f04:	d1ee      	bne.n	8004ee4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	58024800 	.word	0x58024800

08004f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	@ 0x30
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 bc1f 	b.w	8005766 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80b3 	beq.w	800509c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f36:	4b95      	ldr	r3, [pc, #596]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f40:	4b92      	ldr	r3, [pc, #584]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d007      	beq.n	8004f5c <HAL_RCC_OscConfig+0x48>
 8004f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4e:	2b18      	cmp	r3, #24
 8004f50:	d112      	bne.n	8004f78 <HAL_RCC_OscConfig+0x64>
 8004f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d10d      	bne.n	8004f78 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	4b8b      	ldr	r3, [pc, #556]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8098 	beq.w	800509a <HAL_RCC_OscConfig+0x186>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 8093 	bne.w	800509a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e3f6      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f80:	d106      	bne.n	8004f90 <HAL_RCC_OscConfig+0x7c>
 8004f82:	4b82      	ldr	r3, [pc, #520]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a81      	ldr	r2, [pc, #516]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e058      	b.n	8005042 <HAL_RCC_OscConfig+0x12e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d112      	bne.n	8004fbe <HAL_RCC_OscConfig+0xaa>
 8004f98:	4b7c      	ldr	r3, [pc, #496]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a7b      	ldr	r2, [pc, #492]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b79      	ldr	r3, [pc, #484]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a78      	ldr	r2, [pc, #480]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004faa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	4b76      	ldr	r3, [pc, #472]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a75      	ldr	r2, [pc, #468]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	e041      	b.n	8005042 <HAL_RCC_OscConfig+0x12e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fc6:	d112      	bne.n	8004fee <HAL_RCC_OscConfig+0xda>
 8004fc8:	4b70      	ldr	r3, [pc, #448]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a6f      	ldr	r2, [pc, #444]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	4b6d      	ldr	r3, [pc, #436]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a6c      	ldr	r2, [pc, #432]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fda:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a69      	ldr	r2, [pc, #420]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	e029      	b.n	8005042 <HAL_RCC_OscConfig+0x12e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004ff6:	d112      	bne.n	800501e <HAL_RCC_OscConfig+0x10a>
 8004ff8:	4b64      	ldr	r3, [pc, #400]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a63      	ldr	r2, [pc, #396]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8004ffe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b61      	ldr	r3, [pc, #388]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a60      	ldr	r2, [pc, #384]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 800500a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	4b5e      	ldr	r3, [pc, #376]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5d      	ldr	r2, [pc, #372]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	e011      	b.n	8005042 <HAL_RCC_OscConfig+0x12e>
 800501e:	4b5b      	ldr	r3, [pc, #364]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a5a      	ldr	r2, [pc, #360]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	4b58      	ldr	r3, [pc, #352]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a57      	ldr	r2, [pc, #348]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005030:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b55      	ldr	r3, [pc, #340]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a54      	ldr	r2, [pc, #336]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 800503c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005040:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d013      	beq.n	8005072 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fc f927 	bl	800129c <HAL_GetTick>
 800504e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005052:	f7fc f923 	bl	800129c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b64      	cmp	r3, #100	@ 0x64
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e380      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005064:	4b49      	ldr	r3, [pc, #292]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x13e>
 8005070:	e014      	b.n	800509c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fc f913 	bl	800129c <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800507a:	f7fc f90f 	bl	800129c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b64      	cmp	r3, #100	@ 0x64
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e36c      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800508c:	4b3f      	ldr	r3, [pc, #252]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <HAL_RCC_OscConfig+0x166>
 8005098:	e000      	b.n	800509c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 808c 	beq.w	80051c2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050aa:	4b38      	ldr	r3, [pc, #224]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050b4:	4b35      	ldr	r3, [pc, #212]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_RCC_OscConfig+0x1bc>
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	2b18      	cmp	r3, #24
 80050c4:	d137      	bne.n	8005136 <HAL_RCC_OscConfig+0x222>
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d132      	bne.n	8005136 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050d0:	4b2e      	ldr	r3, [pc, #184]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_RCC_OscConfig+0x1d4>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e33e      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050e8:	4b28      	ldr	r3, [pc, #160]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f023 0219 	bic.w	r2, r3, #25
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4925      	ldr	r1, [pc, #148]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fc f8cf 	bl	800129c <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fc f8cb 	bl	800129c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e328      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005114:	4b1d      	ldr	r3, [pc, #116]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005120:	4b1a      	ldr	r3, [pc, #104]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	061b      	lsls	r3, r3, #24
 800512e:	4917      	ldr	r1, [pc, #92]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005134:	e045      	b.n	80051c2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d028      	beq.n	8005190 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800513e:	4b13      	ldr	r3, [pc, #76]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f023 0219 	bic.w	r2, r3, #25
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4910      	ldr	r1, [pc, #64]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fc f8a4 	bl	800129c <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005158:	f7fc f8a0 	bl	800129c <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e2fd      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800516a:	4b08      	ldr	r3, [pc, #32]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005176:	4b05      	ldr	r3, [pc, #20]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	4901      	ldr	r1, [pc, #4]	@ (800518c <HAL_RCC_OscConfig+0x278>)
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
 800518a:	e01a      	b.n	80051c2 <HAL_RCC_OscConfig+0x2ae>
 800518c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005190:	4b97      	ldr	r3, [pc, #604]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a96      	ldr	r2, [pc, #600]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fc f87e 	bl	800129c <HAL_GetTick>
 80051a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a4:	f7fc f87a 	bl	800129c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e2d7      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051b6:	4b8e      	ldr	r3, [pc, #568]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d06a      	beq.n	80052a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ce:	4b88      	ldr	r3, [pc, #544]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051d8:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d007      	beq.n	80051f4 <HAL_RCC_OscConfig+0x2e0>
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b18      	cmp	r3, #24
 80051e8:	d11b      	bne.n	8005222 <HAL_RCC_OscConfig+0x30e>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d116      	bne.n	8005222 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051f4:	4b7e      	ldr	r3, [pc, #504]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_OscConfig+0x2f8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	2b80      	cmp	r3, #128	@ 0x80
 8005206:	d001      	beq.n	800520c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e2ac      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800520c:	4b78      	ldr	r3, [pc, #480]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	061b      	lsls	r3, r3, #24
 800521a:	4975      	ldr	r1, [pc, #468]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800521c:	4313      	orrs	r3, r2
 800521e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005220:	e040      	b.n	80052a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d023      	beq.n	8005272 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800522a:	4b71      	ldr	r3, [pc, #452]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a70      	ldr	r2, [pc, #448]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005236:	f7fc f831 	bl	800129c <HAL_GetTick>
 800523a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800523e:	f7fc f82d 	bl	800129c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e28a      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005250:	4b67      	ldr	r3, [pc, #412]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800525c:	4b64      	ldr	r3, [pc, #400]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	4961      	ldr	r1, [pc, #388]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	60cb      	str	r3, [r1, #12]
 8005270:	e018      	b.n	80052a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005272:	4b5f      	ldr	r3, [pc, #380]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a5e      	ldr	r2, [pc, #376]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800527c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527e:	f7fc f80d 	bl	800129c <HAL_GetTick>
 8005282:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005286:	f7fc f809 	bl	800129c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e266      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005298:	4b55      	ldr	r3, [pc, #340]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f0      	bne.n	8005286 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d036      	beq.n	800531e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d019      	beq.n	80052ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052b8:	4b4d      	ldr	r3, [pc, #308]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80052ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052bc:	4a4c      	ldr	r2, [pc, #304]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fb ffea 	bl	800129c <HAL_GetTick>
 80052c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052cc:	f7fb ffe6 	bl	800129c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e243      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052de:	4b44      	ldr	r3, [pc, #272]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80052e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x3b8>
 80052ea:	e018      	b.n	800531e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ec:	4b40      	ldr	r3, [pc, #256]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80052ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f0:	4a3f      	ldr	r2, [pc, #252]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fb ffd0 	bl	800129c <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005300:	f7fb ffcc 	bl	800129c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e229      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005312:	4b37      	ldr	r3, [pc, #220]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d036      	beq.n	8005398 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d019      	beq.n	8005366 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005332:	4b2f      	ldr	r3, [pc, #188]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a2e      	ldr	r2, [pc, #184]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005338:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800533c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800533e:	f7fb ffad 	bl	800129c <HAL_GetTick>
 8005342:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005346:	f7fb ffa9 	bl	800129c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e206      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005358:	4b25      	ldr	r3, [pc, #148]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <HAL_RCC_OscConfig+0x432>
 8005364:	e018      	b.n	8005398 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005366:	4b22      	ldr	r3, [pc, #136]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a21      	ldr	r2, [pc, #132]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800536c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005370:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005372:	f7fb ff93 	bl	800129c <HAL_GetTick>
 8005376:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800537a:	f7fb ff8f 	bl	800129c <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e1ec      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800538c:	4b18      	ldr	r3, [pc, #96]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80af 	beq.w	8005504 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053a6:	4b13      	ldr	r3, [pc, #76]	@ (80053f4 <HAL_RCC_OscConfig+0x4e0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a12      	ldr	r2, [pc, #72]	@ (80053f4 <HAL_RCC_OscConfig+0x4e0>)
 80053ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053b2:	f7fb ff73 	bl	800129c <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ba:	f7fb ff6f 	bl	800129c <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b64      	cmp	r3, #100	@ 0x64
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e1cc      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053cc:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <HAL_RCC_OscConfig+0x4e0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10b      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4e4>
 80053e0:	4b03      	ldr	r3, [pc, #12]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e4:	4a02      	ldr	r2, [pc, #8]	@ (80053f0 <HAL_RCC_OscConfig+0x4dc>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ec:	e05b      	b.n	80054a6 <HAL_RCC_OscConfig+0x592>
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	58024800 	.word	0x58024800
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d112      	bne.n	8005426 <HAL_RCC_OscConfig+0x512>
 8005400:	4b9d      	ldr	r3, [pc, #628]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005404:	4a9c      	ldr	r2, [pc, #624]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	6713      	str	r3, [r2, #112]	@ 0x70
 800540c:	4b9a      	ldr	r3, [pc, #616]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005410:	4a99      	ldr	r2, [pc, #612]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005416:	6713      	str	r3, [r2, #112]	@ 0x70
 8005418:	4b97      	ldr	r3, [pc, #604]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800541a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541c:	4a96      	ldr	r2, [pc, #600]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800541e:	f023 0304 	bic.w	r3, r3, #4
 8005422:	6713      	str	r3, [r2, #112]	@ 0x70
 8005424:	e03f      	b.n	80054a6 <HAL_RCC_OscConfig+0x592>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b05      	cmp	r3, #5
 800542c:	d112      	bne.n	8005454 <HAL_RCC_OscConfig+0x540>
 800542e:	4b92      	ldr	r3, [pc, #584]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005432:	4a91      	ldr	r2, [pc, #580]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005434:	f043 0304 	orr.w	r3, r3, #4
 8005438:	6713      	str	r3, [r2, #112]	@ 0x70
 800543a:	4b8f      	ldr	r3, [pc, #572]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800543c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543e:	4a8e      	ldr	r2, [pc, #568]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005444:	6713      	str	r3, [r2, #112]	@ 0x70
 8005446:	4b8c      	ldr	r3, [pc, #560]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	4a8b      	ldr	r2, [pc, #556]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	6713      	str	r3, [r2, #112]	@ 0x70
 8005452:	e028      	b.n	80054a6 <HAL_RCC_OscConfig+0x592>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b85      	cmp	r3, #133	@ 0x85
 800545a:	d112      	bne.n	8005482 <HAL_RCC_OscConfig+0x56e>
 800545c:	4b86      	ldr	r3, [pc, #536]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005460:	4a85      	ldr	r2, [pc, #532]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	6713      	str	r3, [r2, #112]	@ 0x70
 8005468:	4b83      	ldr	r3, [pc, #524]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546c:	4a82      	ldr	r2, [pc, #520]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800546e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005472:	6713      	str	r3, [r2, #112]	@ 0x70
 8005474:	4b80      	ldr	r3, [pc, #512]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005478:	4a7f      	ldr	r2, [pc, #508]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005480:	e011      	b.n	80054a6 <HAL_RCC_OscConfig+0x592>
 8005482:	4b7d      	ldr	r3, [pc, #500]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	4a7c      	ldr	r2, [pc, #496]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	6713      	str	r3, [r2, #112]	@ 0x70
 800548e:	4b7a      	ldr	r3, [pc, #488]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005492:	4a79      	ldr	r2, [pc, #484]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005494:	f023 0304 	bic.w	r3, r3, #4
 8005498:	6713      	str	r3, [r2, #112]	@ 0x70
 800549a:	4b77      	ldr	r3, [pc, #476]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549e:	4a76      	ldr	r2, [pc, #472]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80054a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d015      	beq.n	80054da <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ae:	f7fb fef5 	bl	800129c <HAL_GetTick>
 80054b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b4:	e00a      	b.n	80054cc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b6:	f7fb fef1 	bl	800129c <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e14c      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0ee      	beq.n	80054b6 <HAL_RCC_OscConfig+0x5a2>
 80054d8:	e014      	b.n	8005504 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054da:	f7fb fedf 	bl	800129c <HAL_GetTick>
 80054de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054e0:	e00a      	b.n	80054f8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7fb fedb 	bl	800129c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e136      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ee      	bne.n	80054e2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 812b 	beq.w	8005764 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800550e:	4b5a      	ldr	r3, [pc, #360]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005516:	2b18      	cmp	r3, #24
 8005518:	f000 80bb 	beq.w	8005692 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	2b02      	cmp	r3, #2
 8005522:	f040 8095 	bne.w	8005650 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005526:	4b54      	ldr	r3, [pc, #336]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a53      	ldr	r2, [pc, #332]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800552c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fb feb3 	bl	800129c <HAL_GetTick>
 8005536:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553a:	f7fb feaf 	bl	800129c <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e10c      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800554c:	4b4a      	ldr	r3, [pc, #296]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1f0      	bne.n	800553a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005558:	4b47      	ldr	r3, [pc, #284]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800555a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800555c:	4b47      	ldr	r3, [pc, #284]	@ (800567c <HAL_RCC_OscConfig+0x768>)
 800555e:	4013      	ands	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005568:	0112      	lsls	r2, r2, #4
 800556a:	430a      	orrs	r2, r1
 800556c:	4942      	ldr	r1, [pc, #264]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800556e:	4313      	orrs	r3, r2
 8005570:	628b      	str	r3, [r1, #40]	@ 0x28
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	3b01      	subs	r3, #1
 8005578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005580:	3b01      	subs	r3, #1
 8005582:	025b      	lsls	r3, r3, #9
 8005584:	b29b      	uxth	r3, r3
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	3b01      	subs	r3, #1
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559a:	3b01      	subs	r3, #1
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055a2:	4935      	ldr	r1, [pc, #212]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055a8:	4b33      	ldr	r3, [pc, #204]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	4a32      	ldr	r2, [pc, #200]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055b4:	4b30      	ldr	r3, [pc, #192]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055b8:	4b31      	ldr	r3, [pc, #196]	@ (8005680 <HAL_RCC_OscConfig+0x76c>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055c0:	00d2      	lsls	r2, r2, #3
 80055c2:	492d      	ldr	r1, [pc, #180]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	f023 020c 	bic.w	r2, r3, #12
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	4928      	ldr	r1, [pc, #160]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055da:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	f023 0202 	bic.w	r2, r3, #2
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	4924      	ldr	r1, [pc, #144]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055ec:	4b22      	ldr	r3, [pc, #136]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	4a21      	ldr	r2, [pc, #132]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005604:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	4a1b      	ldr	r2, [pc, #108]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800560a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800560e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005610:	4b19      	ldr	r3, [pc, #100]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800561c:	4b16      	ldr	r3, [pc, #88]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a15      	ldr	r2, [pc, #84]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fb fe38 	bl	800129c <HAL_GetTick>
 800562c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fb fe34 	bl	800129c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e091      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x71c>
 800564e:	e089      	b.n	8005764 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005650:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a08      	ldr	r2, [pc, #32]	@ (8005678 <HAL_RCC_OscConfig+0x764>)
 8005656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800565a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fb fe1e 	bl	800129c <HAL_GetTick>
 8005660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005662:	e00f      	b.n	8005684 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005664:	f7fb fe1a 	bl	800129c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d908      	bls.n	8005684 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e077      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
 800567c:	fffffc0c 	.word	0xfffffc0c
 8005680:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005684:	4b3a      	ldr	r3, [pc, #232]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e9      	bne.n	8005664 <HAL_RCC_OscConfig+0x750>
 8005690:	e068      	b.n	8005764 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005692:	4b37      	ldr	r3, [pc, #220]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 8005694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005696:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005698:	4b35      	ldr	r3, [pc, #212]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d031      	beq.n	800570a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f003 0203 	and.w	r2, r3, #3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d12a      	bne.n	800570a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	091b      	lsrs	r3, r3, #4
 80056b8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d122      	bne.n	800570a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d11a      	bne.n	800570a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	0a5b      	lsrs	r3, r3, #9
 80056d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d111      	bne.n	800570a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d108      	bne.n	800570a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	0e1b      	lsrs	r3, r3, #24
 80056fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005704:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d001      	beq.n	800570e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e02b      	b.n	8005766 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800570e:	4b18      	ldr	r3, [pc, #96]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 8005710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005712:	08db      	lsrs	r3, r3, #3
 8005714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005718:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d01f      	beq.n	8005764 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005724:	4b12      	ldr	r3, [pc, #72]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	4a11      	ldr	r2, [pc, #68]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005730:	f7fb fdb4 	bl	800129c <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005736:	bf00      	nop
 8005738:	f7fb fdb0 	bl	800129c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	4293      	cmp	r3, r2
 8005742:	d0f9      	beq.n	8005738 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005744:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 8005746:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005748:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <HAL_RCC_OscConfig+0x860>)
 800574a:	4013      	ands	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005750:	00d2      	lsls	r2, r2, #3
 8005752:	4907      	ldr	r1, [pc, #28]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 8005754:	4313      	orrs	r3, r2
 8005756:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	4a04      	ldr	r2, [pc, #16]	@ (8005770 <HAL_RCC_OscConfig+0x85c>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3730      	adds	r7, #48	@ 0x30
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	58024400 	.word	0x58024400
 8005774:	ffff0007 	.word	0xffff0007

08005778 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e19c      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800578c:	4b8a      	ldr	r3, [pc, #552]	@ (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d910      	bls.n	80057bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579a:	4b87      	ldr	r3, [pc, #540]	@ (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f023 020f 	bic.w	r2, r3, #15
 80057a2:	4985      	ldr	r1, [pc, #532]	@ (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b83      	ldr	r3, [pc, #524]	@ (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e184      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	4b7b      	ldr	r3, [pc, #492]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d908      	bls.n	80057ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057d8:	4b78      	ldr	r3, [pc, #480]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	4975      	ldr	r1, [pc, #468]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	4b70      	ldr	r3, [pc, #448]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005802:	429a      	cmp	r2, r3
 8005804:	d908      	bls.n	8005818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005806:	4b6d      	ldr	r3, [pc, #436]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	496a      	ldr	r1, [pc, #424]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005814:	4313      	orrs	r3, r2
 8005816:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d010      	beq.n	8005846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	4b64      	ldr	r3, [pc, #400]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005830:	429a      	cmp	r2, r3
 8005832:	d908      	bls.n	8005846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005834:	4b61      	ldr	r3, [pc, #388]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	495e      	ldr	r1, [pc, #376]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005842:	4313      	orrs	r3, r2
 8005844:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d010      	beq.n	8005874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	4b59      	ldr	r3, [pc, #356]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800585e:	429a      	cmp	r2, r3
 8005860:	d908      	bls.n	8005874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005862:	4b56      	ldr	r3, [pc, #344]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	4953      	ldr	r1, [pc, #332]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005870:	4313      	orrs	r3, r2
 8005872:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	4b4d      	ldr	r3, [pc, #308]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	429a      	cmp	r2, r3
 800588e:	d908      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005890:	4b4a      	ldr	r3, [pc, #296]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f023 020f 	bic.w	r2, r3, #15
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4947      	ldr	r1, [pc, #284]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d055      	beq.n	800595a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058ae:	4b43      	ldr	r3, [pc, #268]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4940      	ldr	r1, [pc, #256]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058c8:	4b3c      	ldr	r3, [pc, #240]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d121      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0f6      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d107      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058e0:	4b36      	ldr	r3, [pc, #216]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d115      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0ea      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f8:	4b30      	ldr	r3, [pc, #192]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0de      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005908:	4b2c      	ldr	r3, [pc, #176]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0d6      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005918:	4b28      	ldr	r3, [pc, #160]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f023 0207 	bic.w	r2, r3, #7
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4925      	ldr	r1, [pc, #148]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005926:	4313      	orrs	r3, r2
 8005928:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592a:	f7fb fcb7 	bl	800129c <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005930:	e00a      	b.n	8005948 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005932:	f7fb fcb3 	bl	800129c <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0be      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005948:	4b1c      	ldr	r3, [pc, #112]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	429a      	cmp	r2, r3
 8005958:	d1eb      	bne.n	8005932 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	4b14      	ldr	r3, [pc, #80]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	429a      	cmp	r2, r3
 8005974:	d208      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005976:	4b11      	ldr	r3, [pc, #68]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f023 020f 	bic.w	r2, r3, #15
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	490e      	ldr	r1, [pc, #56]	@ (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005984:	4313      	orrs	r3, r2
 8005986:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005988:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d214      	bcs.n	80059c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005996:	4b08      	ldr	r3, [pc, #32]	@ (80059b8 <HAL_RCC_ClockConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 020f 	bic.w	r2, r3, #15
 800599e:	4906      	ldr	r1, [pc, #24]	@ (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e086      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
 80059b8:	52002000 	.word	0x52002000
 80059bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d010      	beq.n	80059ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059d8:	429a      	cmp	r2, r3
 80059da:	d208      	bcs.n	80059ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059dc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	4939      	ldr	r1, [pc, #228]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d010      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	4b34      	ldr	r3, [pc, #208]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d208      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	492e      	ldr	r1, [pc, #184]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	4b28      	ldr	r3, [pc, #160]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d208      	bcs.n	8005a4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a38:	4b25      	ldr	r3, [pc, #148]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4922      	ldr	r1, [pc, #136]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d010      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d208      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a66:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	4917      	ldr	r1, [pc, #92]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005a78:	f000 f89e 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b14      	ldr	r3, [pc, #80]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	4912      	ldr	r1, [pc, #72]	@ (8005ad4 <HAL_RCC_ClockConfig+0x35c>)
 8005a8a:	5ccb      	ldrb	r3, [r1, r3]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
 8005a94:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005a96:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad4 <HAL_RCC_ClockConfig+0x35c>)
 8005aa0:	5cd3      	ldrb	r3, [r2, r3]
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aac:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad8 <HAL_RCC_ClockConfig+0x360>)
 8005aae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8005adc <HAL_RCC_ClockConfig+0x364>)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <HAL_RCC_ClockConfig+0x368>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fb fba4 	bl	8001208 <HAL_InitTick>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	0800bac8 	.word	0x0800bac8
 8005ad8:	24003844 	.word	0x24003844
 8005adc:	24003840 	.word	0x24003840
 8005ae0:	24003848 	.word	0x24003848

08005ae4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08c      	sub	sp, #48	@ 0x30
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d12a      	bne.n	8005b4c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005af6:	4b2d      	ldr	r3, [pc, #180]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005afc:	4a2b      	ldr	r2, [pc, #172]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005b06:	4b29      	ldr	r3, [pc, #164]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b26:	2300      	movs	r3, #0
 8005b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b2a:	f107 031c 	add.w	r3, r7, #28
 8005b2e:	4619      	mov	r1, r3
 8005b30:	481f      	ldr	r0, [pc, #124]	@ (8005bb0 <HAL_RCC_MCOConfig+0xcc>)
 8005b32:	f7fe fedb 	bl	80048ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005b36:	4b1d      	ldr	r3, [pc, #116]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	430b      	orrs	r3, r1
 8005b44:	4919      	ldr	r1, [pc, #100]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005b4a:	e02a      	b.n	8005ba2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005b4c:	4b17      	ldr	r3, [pc, #92]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b52:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005b54:	f043 0304 	orr.w	r3, r3, #4
 8005b58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005b5c:	4b13      	ldr	r3, [pc, #76]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b70:	2302      	movs	r3, #2
 8005b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b74:	2303      	movs	r3, #3
 8005b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005b80:	f107 031c 	add.w	r3, r7, #28
 8005b84:	4619      	mov	r1, r3
 8005b86:	480b      	ldr	r0, [pc, #44]	@ (8005bb4 <HAL_RCC_MCOConfig+0xd0>)
 8005b88:	f7fe feb0 	bl	80048ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005b8c:	4b07      	ldr	r3, [pc, #28]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	01d9      	lsls	r1, r3, #7
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	4903      	ldr	r1, [pc, #12]	@ (8005bac <HAL_RCC_MCOConfig+0xc8>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	610b      	str	r3, [r1, #16]
}
 8005ba2:	bf00      	nop
 8005ba4:	3730      	adds	r7, #48	@ 0x30
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	58024400 	.word	0x58024400
 8005bb0:	58020000 	.word	0x58020000
 8005bb4:	58020800 	.word	0x58020800

08005bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b089      	sub	sp, #36	@ 0x24
 8005bbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bbe:	4bb3      	ldr	r3, [pc, #716]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bc6:	2b18      	cmp	r3, #24
 8005bc8:	f200 8155 	bhi.w	8005e76 <HAL_RCC_GetSysClockFreq+0x2be>
 8005bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005c39 	.word	0x08005c39
 8005bd8:	08005e77 	.word	0x08005e77
 8005bdc:	08005e77 	.word	0x08005e77
 8005be0:	08005e77 	.word	0x08005e77
 8005be4:	08005e77 	.word	0x08005e77
 8005be8:	08005e77 	.word	0x08005e77
 8005bec:	08005e77 	.word	0x08005e77
 8005bf0:	08005e77 	.word	0x08005e77
 8005bf4:	08005c5f 	.word	0x08005c5f
 8005bf8:	08005e77 	.word	0x08005e77
 8005bfc:	08005e77 	.word	0x08005e77
 8005c00:	08005e77 	.word	0x08005e77
 8005c04:	08005e77 	.word	0x08005e77
 8005c08:	08005e77 	.word	0x08005e77
 8005c0c:	08005e77 	.word	0x08005e77
 8005c10:	08005e77 	.word	0x08005e77
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005e77 	.word	0x08005e77
 8005c1c:	08005e77 	.word	0x08005e77
 8005c20:	08005e77 	.word	0x08005e77
 8005c24:	08005e77 	.word	0x08005e77
 8005c28:	08005e77 	.word	0x08005e77
 8005c2c:	08005e77 	.word	0x08005e77
 8005c30:	08005e77 	.word	0x08005e77
 8005c34:	08005c6b 	.word	0x08005c6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c38:	4b94      	ldr	r3, [pc, #592]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c44:	4b91      	ldr	r3, [pc, #580]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	08db      	lsrs	r3, r3, #3
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	4a90      	ldr	r2, [pc, #576]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c56:	e111      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c58:	4b8d      	ldr	r3, [pc, #564]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c5a:	61bb      	str	r3, [r7, #24]
      break;
 8005c5c:	e10e      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c60:	61bb      	str	r3, [r7, #24]
      break;
 8005c62:	e10b      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c64:	4b8c      	ldr	r3, [pc, #560]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c66:	61bb      	str	r3, [r7, #24]
      break;
 8005c68:	e108      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c6a:	4b88      	ldr	r3, [pc, #544]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c74:	4b85      	ldr	r3, [pc, #532]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c80:	4b82      	ldr	r3, [pc, #520]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c8a:	4b80      	ldr	r3, [pc, #512]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8e:	08db      	lsrs	r3, r3, #3
 8005c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80e1 	beq.w	8005e70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	f000 8083 	beq.w	8005dbc <HAL_RCC_GetSysClockFreq+0x204>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	f200 80a1 	bhi.w	8005e00 <HAL_RCC_GetSysClockFreq+0x248>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x114>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d056      	beq.n	8005d78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cca:	e099      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d02d      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	08db      	lsrs	r3, r3, #3
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d02:	4b62      	ldr	r3, [pc, #392]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d32:	e087      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ea0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b51      	ldr	r3, [pc, #324]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d76:	e065      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ea4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8a:	4b40      	ldr	r3, [pc, #256]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dba:	e043      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ea8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dce:	4b2f      	ldr	r3, [pc, #188]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8005de2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dfe:	e021      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ea4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e12:	4b1e      	ldr	r3, [pc, #120]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e44:	4b11      	ldr	r3, [pc, #68]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e48:	0a5b      	lsrs	r3, r3, #9
 8005e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e4e:	3301      	adds	r3, #1
 8005e50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	ee07 3a90 	vmov	s15, r3
 8005e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e68:	ee17 3a90 	vmov	r3, s15
 8005e6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e6e:	e005      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61bb      	str	r3, [r7, #24]
      break;
 8005e74:	e002      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e76:	4b07      	ldr	r3, [pc, #28]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e78:	61bb      	str	r3, [r7, #24]
      break;
 8005e7a:	bf00      	nop
  }

  return sysclockfreq;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3724      	adds	r7, #36	@ 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	03d09000 	.word	0x03d09000
 8005e94:	003d0900 	.word	0x003d0900
 8005e98:	007a1200 	.word	0x007a1200
 8005e9c:	46000000 	.word	0x46000000
 8005ea0:	4c742400 	.word	0x4c742400
 8005ea4:	4a742400 	.word	0x4a742400
 8005ea8:	4af42400 	.word	0x4af42400

08005eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005eb2:	f7ff fe81 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b10      	ldr	r3, [pc, #64]	@ (8005efc <HAL_RCC_GetHCLKFreq+0x50>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	490f      	ldr	r1, [pc, #60]	@ (8005f00 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ec4:	5ccb      	ldrb	r3, [r1, r3]
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	fa22 f303 	lsr.w	r3, r2, r3
 8005ece:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <HAL_RCC_GetHCLKFreq+0x50>)
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	4a09      	ldr	r2, [pc, #36]	@ (8005f00 <HAL_RCC_GetHCLKFreq+0x54>)
 8005eda:	5cd3      	ldrb	r3, [r2, r3]
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee6:	4a07      	ldr	r2, [pc, #28]	@ (8005f04 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ee8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eea:	4a07      	ldr	r2, [pc, #28]	@ (8005f08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ef0:	4b04      	ldr	r3, [pc, #16]	@ (8005f04 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	58024400 	.word	0x58024400
 8005f00:	0800bac8 	.word	0x0800bac8
 8005f04:	24003844 	.word	0x24003844
 8005f08:	24003840 	.word	0x24003840

08005f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005f10:	f7ff ffcc 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005f14:	4602      	mov	r2, r0
 8005f16:	4b06      	ldr	r3, [pc, #24]	@ (8005f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	091b      	lsrs	r3, r3, #4
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	4904      	ldr	r1, [pc, #16]	@ (8005f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f22:	5ccb      	ldrb	r3, [r1, r3]
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	58024400 	.word	0x58024400
 8005f34:	0800bac8 	.word	0x0800bac8

08005f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005f3c:	f7ff ffb6 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4904      	ldr	r1, [pc, #16]	@ (8005f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	0800bac8 	.word	0x0800bac8

08005f64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f68:	b0c8      	sub	sp, #288	@ 0x120
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f76:	2300      	movs	r3, #0
 8005f78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005f88:	2500      	movs	r5, #0
 8005f8a:	ea54 0305 	orrs.w	r3, r4, r5
 8005f8e:	d049      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f9a:	d02f      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005f9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fa0:	d828      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fa6:	d01a      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fac:	d822      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fb6:	d007      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fb8:	e01c      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fba:	4ba7      	ldr	r3, [pc, #668]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	4aa6      	ldr	r2, [pc, #664]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fc6:	e01a      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fcc:	3308      	adds	r3, #8
 8005fce:	2102      	movs	r1, #2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fc99 	bl	8007908 <RCCEx_PLL2_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fdc:	e00f      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fe2:	3328      	adds	r3, #40	@ 0x28
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fd40 	bl	8007a6c <RCCEx_PLL3_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ff2:	e004      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006006:	4b94      	ldr	r3, [pc, #592]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800600a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800600e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006014:	4a90      	ldr	r2, [pc, #576]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006016:	430b      	orrs	r3, r1
 8006018:	6513      	str	r3, [r2, #80]	@ 0x50
 800601a:	e003      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006020:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006030:	f04f 0900 	mov.w	r9, #0
 8006034:	ea58 0309 	orrs.w	r3, r8, r9
 8006038:	d047      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800603a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800603e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006040:	2b04      	cmp	r3, #4
 8006042:	d82a      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006044:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006061 	.word	0x08006061
 8006050:	0800606f 	.word	0x0800606f
 8006054:	08006085 	.word	0x08006085
 8006058:	080060a3 	.word	0x080060a3
 800605c:	080060a3 	.word	0x080060a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006060:	4b7d      	ldr	r3, [pc, #500]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006064:	4a7c      	ldr	r2, [pc, #496]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800606a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800606c:	e01a      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800606e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006072:	3308      	adds	r3, #8
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f001 fc46 	bl	8007908 <RCCEx_PLL2_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006082:	e00f      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006088:	3328      	adds	r3, #40	@ 0x28
 800608a:	2100      	movs	r1, #0
 800608c:	4618      	mov	r0, r3
 800608e:	f001 fced 	bl	8007a6c <RCCEx_PLL3_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006098:	e004      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80060a0:	e000      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80060a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b0:	f023 0107 	bic.w	r1, r3, #7
 80060b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ba:	4a67      	ldr	r2, [pc, #412]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060bc:	430b      	orrs	r3, r1
 80060be:	6513      	str	r3, [r2, #80]	@ 0x50
 80060c0:	e003      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80060ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80060d6:	f04f 0b00 	mov.w	fp, #0
 80060da:	ea5a 030b 	orrs.w	r3, sl, fp
 80060de:	d054      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80060e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80060ea:	d036      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80060ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80060f0:	d82f      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f6:	d032      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060fc:	d829      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006100:	d02f      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006102:	2bc0      	cmp	r3, #192	@ 0xc0
 8006104:	d825      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006106:	2b80      	cmp	r3, #128	@ 0x80
 8006108:	d018      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800610a:	2b80      	cmp	r3, #128	@ 0x80
 800610c:	d821      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006112:	2b40      	cmp	r3, #64	@ 0x40
 8006114:	d007      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006116:	e01c      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006118:	4b4f      	ldr	r3, [pc, #316]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	4a4e      	ldr	r2, [pc, #312]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006124:	e01e      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800612a:	3308      	adds	r3, #8
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f001 fbea 	bl	8007908 <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800613a:	e013      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800613c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006140:	3328      	adds	r3, #40	@ 0x28
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f001 fc91 	bl	8007a6c <RCCEx_PLL3_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006150:	e008      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006158:	e004      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800616c:	4b3a      	ldr	r3, [pc, #232]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800616e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006170:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617a:	4a37      	ldr	r2, [pc, #220]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800617c:	430b      	orrs	r3, r1
 800617e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006180:	e003      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006186:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800618a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006196:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80061a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d05c      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80061aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80061b4:	d03b      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061b6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80061ba:	d834      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80061bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c0:	d037      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80061c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c6:	d82e      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80061c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061cc:	d033      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80061ce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061d2:	d828      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d8:	d01a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80061da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061de:	d822      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x288>
 80061e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e8:	d007      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x296>
 80061ea:	e01c      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	4a19      	ldr	r2, [pc, #100]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061f8:	e01e      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061fe:	3308      	adds	r3, #8
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f001 fb80 	bl	8007908 <RCCEx_PLL2_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800620e:	e013      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006214:	3328      	adds	r3, #40	@ 0x28
 8006216:	2100      	movs	r1, #0
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fc27 	bl	8007a6c <RCCEx_PLL3_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006224:	e008      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800622c:	e004      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800622e:	bf00      	nop
 8006230:	e002      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006238:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10d      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006240:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800624c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624e:	4a02      	ldr	r2, [pc, #8]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006250:	430b      	orrs	r3, r1
 8006252:	6513      	str	r3, [r2, #80]	@ 0x50
 8006254:	e006      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006256:	bf00      	nop
 8006258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006260:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800627a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800627e:	460b      	mov	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	d03a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628a:	2b30      	cmp	r3, #48	@ 0x30
 800628c:	d01f      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800628e:	2b30      	cmp	r3, #48	@ 0x30
 8006290:	d819      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006292:	2b20      	cmp	r3, #32
 8006294:	d00c      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006296:	2b20      	cmp	r3, #32
 8006298:	d815      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d019      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d111      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a2:	4bae      	ldr	r3, [pc, #696]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	4aad      	ldr	r2, [pc, #692]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80062ae:	e011      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b4:	3308      	adds	r3, #8
 80062b6:	2102      	movs	r1, #2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 fb25 	bl	8007908 <RCCEx_PLL2_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80062cc:	e002      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80062ce:	bf00      	nop
 80062d0:	e000      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80062d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80062dc:	4b9f      	ldr	r3, [pc, #636]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80062e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ea:	4a9c      	ldr	r2, [pc, #624]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062f0:	e003      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006306:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800630a:	2300      	movs	r3, #0
 800630c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006310:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006314:	460b      	mov	r3, r1
 8006316:	4313      	orrs	r3, r2
 8006318:	d051      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800631a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800631e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006324:	d035      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800632a:	d82e      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800632c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006330:	d031      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006332:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006336:	d828      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800633c:	d01a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006342:	d822      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800634c:	d007      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800634e:	e01c      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006350:	4b82      	ldr	r3, [pc, #520]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	4a81      	ldr	r2, [pc, #516]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800635a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800635c:	e01c      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800635e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006362:	3308      	adds	r3, #8
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f001 face 	bl	8007908 <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006372:	e011      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006378:	3328      	adds	r3, #40	@ 0x28
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f001 fb75 	bl	8007a6c <RCCEx_PLL3_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006388:	e006      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006398:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063a0:	4b6e      	ldr	r3, [pc, #440]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ae:	4a6b      	ldr	r2, [pc, #428]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80063ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063ce:	2300      	movs	r3, #0
 80063d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80063d8:	460b      	mov	r3, r1
 80063da:	4313      	orrs	r3, r2
 80063dc:	d053      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80063de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063e8:	d033      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80063ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063ee:	d82c      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063f4:	d02f      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80063f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063fa:	d826      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006400:	d02b      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006402:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006406:	d820      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800640c:	d012      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800640e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006412:	d81a      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d022      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800641c:	d115      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800641e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006422:	3308      	adds	r3, #8
 8006424:	2101      	movs	r1, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fa6e 	bl	8007908 <RCCEx_PLL2_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006432:	e015      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006438:	3328      	adds	r3, #40	@ 0x28
 800643a:	2101      	movs	r1, #1
 800643c:	4618      	mov	r0, r3
 800643e:	f001 fb15 	bl	8007a6c <RCCEx_PLL3_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006448:	e00a      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006450:	e006      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006452:	bf00      	nop
 8006454:	e004      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800645e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006460:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006468:	4b3c      	ldr	r3, [pc, #240]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800646a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006476:	4a39      	ldr	r2, [pc, #228]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006478:	430b      	orrs	r3, r1
 800647a:	6513      	str	r3, [r2, #80]	@ 0x50
 800647c:	e003      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006482:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006492:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006496:	2300      	movs	r3, #0
 8006498:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800649c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4313      	orrs	r3, r2
 80064a4:	d060      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80064a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064ae:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80064b2:	d039      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80064b4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80064b8:	d832      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064be:	d035      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80064c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064c4:	d82c      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ca:	d031      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d0:	d826      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064d6:	d02d      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80064d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064dc:	d820      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e2:	d012      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80064e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e8:	d81a      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d024      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80064ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064f2:	d115      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064f8:	3308      	adds	r3, #8
 80064fa:	2101      	movs	r1, #1
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 fa03 	bl	8007908 <RCCEx_PLL2_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006508:	e017      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800650a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800650e:	3328      	adds	r3, #40	@ 0x28
 8006510:	2101      	movs	r1, #1
 8006512:	4618      	mov	r0, r3
 8006514:	f001 faaa 	bl	8007a6c <RCCEx_PLL3_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800651e:	e00c      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006526:	e008      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006528:	bf00      	nop
 800652a:	e006      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800652c:	bf00      	nop
 800652e:	e004      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006530:	bf00      	nop
 8006532:	e002      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800653a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10e      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006542:	4b06      	ldr	r3, [pc, #24]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006546:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800654a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800654e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006552:	4a02      	ldr	r2, [pc, #8]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006554:	430b      	orrs	r3, r1
 8006556:	6593      	str	r3, [r2, #88]	@ 0x58
 8006558:	e006      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800655a:	bf00      	nop
 800655c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006564:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006578:	2300      	movs	r3, #0
 800657a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800657e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006582:	460b      	mov	r3, r1
 8006584:	4313      	orrs	r3, r2
 8006586:	d037      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800658c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800658e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006592:	d00e      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006598:	d816      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800659e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a2:	d111      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a4:	4bc4      	ldr	r3, [pc, #784]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	4ac3      	ldr	r2, [pc, #780]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065b0:	e00f      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b6:	3308      	adds	r3, #8
 80065b8:	2101      	movs	r1, #1
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 f9a4 	bl	8007908 <RCCEx_PLL2_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065c6:	e004      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065ce:	e000      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80065d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065da:	4bb7      	ldr	r3, [pc, #732]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80065e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065e8:	4ab3      	ldr	r2, [pc, #716]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ea:	430b      	orrs	r3, r1
 80065ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80065ee:	e003      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006608:	2300      	movs	r3, #0
 800660a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800660e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d039      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800661c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800661e:	2b03      	cmp	r3, #3
 8006620:	d81c      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006622:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006628:	08006665 	.word	0x08006665
 800662c:	08006639 	.word	0x08006639
 8006630:	08006647 	.word	0x08006647
 8006634:	08006665 	.word	0x08006665
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006638:	4b9f      	ldr	r3, [pc, #636]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800663a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663c:	4a9e      	ldr	r2, [pc, #632]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800663e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006644:	e00f      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800664a:	3308      	adds	r3, #8
 800664c:	2102      	movs	r1, #2
 800664e:	4618      	mov	r0, r3
 8006650:	f001 f95a 	bl	8007908 <RCCEx_PLL2_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800665a:	e004      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006662:	e000      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006666:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800666e:	4b92      	ldr	r3, [pc, #584]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006672:	f023 0103 	bic.w	r1, r3, #3
 8006676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800667a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800667c:	4a8e      	ldr	r2, [pc, #568]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800667e:	430b      	orrs	r3, r1
 8006680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006682:	e003      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006684:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006688:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800668c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006698:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800669c:	2300      	movs	r3, #0
 800669e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80066a6:	460b      	mov	r3, r1
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f000 8099 	beq.w	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066ae:	4b83      	ldr	r3, [pc, #524]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a82      	ldr	r2, [pc, #520]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80066b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066ba:	f7fa fdef 	bl	800129c <HAL_GetTick>
 80066be:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c2:	e00b      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c4:	f7fa fdea 	bl	800129c <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b64      	cmp	r3, #100	@ 0x64
 80066d2:	d903      	bls.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80066da:	e005      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066dc:	4b77      	ldr	r3, [pc, #476]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0ed      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80066e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d173      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066f0:	4b71      	ldr	r3, [pc, #452]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066fc:	4053      	eors	r3, r2
 80066fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006702:	2b00      	cmp	r3, #0
 8006704:	d015      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006706:	4b6c      	ldr	r3, [pc, #432]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800670e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006712:	4b69      	ldr	r3, [pc, #420]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006716:	4a68      	ldr	r2, [pc, #416]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800671c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800671e:	4b66      	ldr	r3, [pc, #408]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006722:	4a65      	ldr	r2, [pc, #404]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006728:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800672a:	4a63      	ldr	r2, [pc, #396]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006736:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800673a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800673e:	d118      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7fa fdac 	bl	800129c <HAL_GetTick>
 8006744:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006748:	e00d      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674a:	f7fa fda7 	bl	800129c <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006754:	1ad2      	subs	r2, r2, r3
 8006756:	f241 3388 	movw	r3, #5000	@ 0x1388
 800675a:	429a      	cmp	r2, r3
 800675c:	d903      	bls.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006764:	e005      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006766:	4b54      	ldr	r3, [pc, #336]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0eb      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006772:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006776:	2b00      	cmp	r3, #0
 8006778:	d129      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800677a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800677e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800678a:	d10e      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800678c:	4b4a      	ldr	r3, [pc, #296]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006798:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800679c:	091a      	lsrs	r2, r3, #4
 800679e:	4b48      	ldr	r3, [pc, #288]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	4a45      	ldr	r2, [pc, #276]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067a4:	430b      	orrs	r3, r1
 80067a6:	6113      	str	r3, [r2, #16]
 80067a8:	e005      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80067aa:	4b43      	ldr	r3, [pc, #268]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	4a42      	ldr	r2, [pc, #264]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80067b4:	6113      	str	r3, [r2, #16]
 80067b6:	4b40      	ldr	r3, [pc, #256]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80067ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c6:	4a3c      	ldr	r2, [pc, #240]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80067cc:	e008      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80067d6:	e003      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f002 0301 	and.w	r3, r2, #1
 80067ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067f0:	2300      	movs	r3, #0
 80067f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f000 8090 	beq.w	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800680a:	2b28      	cmp	r3, #40	@ 0x28
 800680c:	d870      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800680e:	a201      	add	r2, pc, #4	@ (adr r2, 8006814 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	080068f9 	.word	0x080068f9
 8006818:	080068f1 	.word	0x080068f1
 800681c:	080068f1 	.word	0x080068f1
 8006820:	080068f1 	.word	0x080068f1
 8006824:	080068f1 	.word	0x080068f1
 8006828:	080068f1 	.word	0x080068f1
 800682c:	080068f1 	.word	0x080068f1
 8006830:	080068f1 	.word	0x080068f1
 8006834:	080068c5 	.word	0x080068c5
 8006838:	080068f1 	.word	0x080068f1
 800683c:	080068f1 	.word	0x080068f1
 8006840:	080068f1 	.word	0x080068f1
 8006844:	080068f1 	.word	0x080068f1
 8006848:	080068f1 	.word	0x080068f1
 800684c:	080068f1 	.word	0x080068f1
 8006850:	080068f1 	.word	0x080068f1
 8006854:	080068db 	.word	0x080068db
 8006858:	080068f1 	.word	0x080068f1
 800685c:	080068f1 	.word	0x080068f1
 8006860:	080068f1 	.word	0x080068f1
 8006864:	080068f1 	.word	0x080068f1
 8006868:	080068f1 	.word	0x080068f1
 800686c:	080068f1 	.word	0x080068f1
 8006870:	080068f1 	.word	0x080068f1
 8006874:	080068f9 	.word	0x080068f9
 8006878:	080068f1 	.word	0x080068f1
 800687c:	080068f1 	.word	0x080068f1
 8006880:	080068f1 	.word	0x080068f1
 8006884:	080068f1 	.word	0x080068f1
 8006888:	080068f1 	.word	0x080068f1
 800688c:	080068f1 	.word	0x080068f1
 8006890:	080068f1 	.word	0x080068f1
 8006894:	080068f9 	.word	0x080068f9
 8006898:	080068f1 	.word	0x080068f1
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	080068f1 	.word	0x080068f1
 80068a4:	080068f1 	.word	0x080068f1
 80068a8:	080068f1 	.word	0x080068f1
 80068ac:	080068f1 	.word	0x080068f1
 80068b0:	080068f1 	.word	0x080068f1
 80068b4:	080068f9 	.word	0x080068f9
 80068b8:	58024400 	.word	0x58024400
 80068bc:	58024800 	.word	0x58024800
 80068c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068c8:	3308      	adds	r3, #8
 80068ca:	2101      	movs	r1, #1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 f81b 	bl	8007908 <RCCEx_PLL2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068d8:	e00f      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068de:	3328      	adds	r3, #40	@ 0x28
 80068e0:	2101      	movs	r1, #1
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 f8c2 	bl	8007a6c <RCCEx_PLL3_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068ee:	e004      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068f6:	e000      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80068f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10b      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006902:	4bc0      	ldr	r3, [pc, #768]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006906:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800690a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800690e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006912:	4abc      	ldr	r2, [pc, #752]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006914:	430b      	orrs	r3, r1
 8006916:	6553      	str	r3, [r2, #84]	@ 0x54
 8006918:	e003      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800691e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f002 0302 	and.w	r3, r2, #2
 800692e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006932:	2300      	movs	r3, #0
 8006934:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006938:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800693c:	460b      	mov	r3, r1
 800693e:	4313      	orrs	r3, r2
 8006940:	d043      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694a:	2b05      	cmp	r3, #5
 800694c:	d824      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800694e:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	080069a1 	.word	0x080069a1
 8006958:	0800696d 	.word	0x0800696d
 800695c:	08006983 	.word	0x08006983
 8006960:	080069a1 	.word	0x080069a1
 8006964:	080069a1 	.word	0x080069a1
 8006968:	080069a1 	.word	0x080069a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800696c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006970:	3308      	adds	r3, #8
 8006972:	2101      	movs	r1, #1
 8006974:	4618      	mov	r0, r3
 8006976:	f000 ffc7 	bl	8007908 <RCCEx_PLL2_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006980:	e00f      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006986:	3328      	adds	r3, #40	@ 0x28
 8006988:	2101      	movs	r1, #1
 800698a:	4618      	mov	r0, r3
 800698c:	f001 f86e 	bl	8007a6c <RCCEx_PLL3_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006996:	e004      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80069a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069aa:	4b96      	ldr	r3, [pc, #600]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ae:	f023 0107 	bic.w	r1, r3, #7
 80069b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ba:	4a92      	ldr	r2, [pc, #584]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80069bc:	430b      	orrs	r3, r1
 80069be:	6553      	str	r3, [r2, #84]	@ 0x54
 80069c0:	e003      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f002 0304 	and.w	r3, r2, #4
 80069d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069da:	2300      	movs	r3, #0
 80069dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069e0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4313      	orrs	r3, r2
 80069e8:	d043      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80069ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d824      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80069f6:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a49 	.word	0x08006a49
 8006a00:	08006a15 	.word	0x08006a15
 8006a04:	08006a2b 	.word	0x08006a2b
 8006a08:	08006a49 	.word	0x08006a49
 8006a0c:	08006a49 	.word	0x08006a49
 8006a10:	08006a49 	.word	0x08006a49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a18:	3308      	adds	r3, #8
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 ff73 	bl	8007908 <RCCEx_PLL2_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a28:	e00f      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a2e:	3328      	adds	r3, #40	@ 0x28
 8006a30:	2101      	movs	r1, #1
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 f81a 	bl	8007a6c <RCCEx_PLL3_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a3e:	e004      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a46:	e000      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a52:	4b6c      	ldr	r3, [pc, #432]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a56:	f023 0107 	bic.w	r1, r3, #7
 8006a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a62:	4a68      	ldr	r2, [pc, #416]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a68:	e003      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f002 0320 	and.w	r3, r2, #32
 8006a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a82:	2300      	movs	r3, #0
 8006a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	d055      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a9e:	d033      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aa4:	d82c      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aaa:	d02f      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab0:	d826      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006ab2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ab6:	d02b      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006ab8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006abc:	d820      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ac2:	d012      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ac8:	d81a      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d022      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ad2:	d115      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ad8:	3308      	adds	r3, #8
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 ff13 	bl	8007908 <RCCEx_PLL2_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ae8:	e015      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aee:	3328      	adds	r3, #40	@ 0x28
 8006af0:	2102      	movs	r1, #2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 ffba 	bl	8007a6c <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006afe:	e00a      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b06:	e006      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006b08:	bf00      	nop
 8006b0a:	e004      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006b0c:	bf00      	nop
 8006b0e:	e002      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006b10:	bf00      	nop
 8006b12:	e000      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10b      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b1e:	4b39      	ldr	r3, [pc, #228]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b2e:	4a35      	ldr	r2, [pc, #212]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b34:	e003      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	d058      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b6a:	d033      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006b6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b70:	d82c      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b76:	d02f      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7c:	d826      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b82:	d02b      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006b84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b88:	d820      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b8e:	d012      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b94:	d81a      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d022      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b9e:	d115      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fead 	bl	8007908 <RCCEx_PLL2_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bb4:	e015      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bba:	3328      	adds	r3, #40	@ 0x28
 8006bbc:	2102      	movs	r1, #2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 ff54 	bl	8007a6c <RCCEx_PLL3_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bca:	e00a      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006bd2:	e006      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006bd4:	bf00      	nop
 8006bd6:	e004      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006bd8:	bf00      	nop
 8006bda:	e002      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006bdc:	bf00      	nop
 8006bde:	e000      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10e      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bea:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bfa:	4a02      	ldr	r2, [pc, #8]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c00:	e006      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006c02:	bf00      	nop
 8006c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d055      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006c3c:	d033      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006c3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006c42:	d82c      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c48:	d02f      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c4e:	d826      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c54:	d02b      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006c56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c5a:	d820      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c60:	d012      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006c62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c66:	d81a      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d022      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c70:	d115      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c76:	3308      	adds	r3, #8
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fe44 	bl	8007908 <RCCEx_PLL2_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c86:	e015      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c8c:	3328      	adds	r3, #40	@ 0x28
 8006c8e:	2102      	movs	r1, #2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 feeb 	bl	8007a6c <RCCEx_PLL3_Config>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c9c:	e00a      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ca4:	e006      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006ca6:	bf00      	nop
 8006ca8:	e004      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006caa:	bf00      	nop
 8006cac:	e002      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10b      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ccc:	4a9d      	ldr	r2, [pc, #628]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cd2:	e003      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f002 0308 	and.w	r3, r2, #8
 8006ce8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cf2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	d01e      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d08:	d10c      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d0e:	3328      	adds	r3, #40	@ 0x28
 8006d10:	2102      	movs	r1, #2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 feaa 	bl	8007a6c <RCCEx_PLL3_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d24:	4b87      	ldr	r3, [pc, #540]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d34:	4a83      	ldr	r2, [pc, #524]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d36:	430b      	orrs	r3, r1
 8006d38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f002 0310 	and.w	r3, r2, #16
 8006d46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006d54:	460b      	mov	r3, r1
 8006d56:	4313      	orrs	r3, r2
 8006d58:	d01e      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d66:	d10c      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d6c:	3328      	adds	r3, #40	@ 0x28
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fe7b 	bl	8007a6c <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d82:	4b70      	ldr	r3, [pc, #448]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d92:	4a6c      	ldr	r2, [pc, #432]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d94:	430b      	orrs	r3, r1
 8006d96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006da4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006da8:	2300      	movs	r3, #0
 8006daa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006db2:	460b      	mov	r3, r1
 8006db4:	4313      	orrs	r3, r2
 8006db6:	d03e      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dc4:	d022      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dca:	d81b      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd4:	d00b      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006dd6:	e015      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ddc:	3308      	adds	r3, #8
 8006dde:	2100      	movs	r1, #0
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fd91 	bl	8007908 <RCCEx_PLL2_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dec:	e00f      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df2:	3328      	adds	r3, #40	@ 0x28
 8006df4:	2102      	movs	r1, #2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fe38 	bl	8007a6c <RCCEx_PLL3_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e02:	e004      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e16:	4b4b      	ldr	r3, [pc, #300]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e26:	4a47      	ldr	r2, [pc, #284]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e2c:	e003      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006e42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e44:	2300      	movs	r3, #0
 8006e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	d03b      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e5e:	d01f      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006e60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e64:	d818      	bhi.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e6a:	d003      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006e6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e70:	d007      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006e72:	e011      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e74:	4b33      	ldr	r3, [pc, #204]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e78:	4a32      	ldr	r2, [pc, #200]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e80:	e00f      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e86:	3328      	adds	r3, #40	@ 0x28
 8006e88:	2101      	movs	r1, #1
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fdee 	bl	8007a6c <RCCEx_PLL3_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e96:	e004      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006eaa:	4b26      	ldr	r3, [pc, #152]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eba:	4a22      	ldr	r2, [pc, #136]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ec0:	e003      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ec6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006ed6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ed8:	2300      	movs	r3, #0
 8006eda:	677b      	str	r3, [r7, #116]	@ 0x74
 8006edc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	d034      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef4:	d007      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006ef6:	e011      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef8:	4b12      	ldr	r3, [pc, #72]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	4a11      	ldr	r2, [pc, #68]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f04:	e00e      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fcfa 	bl	8007908 <RCCEx_PLL2_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f1a:	e003      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10d      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f2c:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3a:	4a02      	ldr	r2, [pc, #8]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f40:	e006      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006f42:	bf00      	nop
 8006f44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f5e:	2300      	movs	r3, #0
 8006f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f66:	460b      	mov	r3, r1
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	d00c      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f70:	3328      	adds	r3, #40	@ 0x28
 8006f72:	2102      	movs	r1, #2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fd79 	bl	8007a6c <RCCEx_PLL3_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006f92:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f94:	2300      	movs	r3, #0
 8006f96:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	d038      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fae:	d018      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fb4:	d811      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fba:	d014      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc0:	d80b      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d011      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fca:	d106      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fcc:	4bc3      	ldr	r3, [pc, #780]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	4ac2      	ldr	r2, [pc, #776]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fd8:	e008      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006fe0:	e004      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006fe2:	bf00      	nop
 8006fe4:	e002      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ff4:	4bb9      	ldr	r3, [pc, #740]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007004:	4ab5      	ldr	r2, [pc, #724]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007006:	430b      	orrs	r3, r1
 8007008:	6553      	str	r3, [r2, #84]	@ 0x54
 800700a:	e003      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007010:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007020:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007022:	2300      	movs	r3, #0
 8007024:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007026:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800702a:	460b      	mov	r3, r1
 800702c:	4313      	orrs	r3, r2
 800702e:	d009      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007030:	4baa      	ldr	r3, [pc, #680]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007034:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800703c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800703e:	4aa7      	ldr	r2, [pc, #668]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007040:	430b      	orrs	r3, r1
 8007042:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007050:	653b      	str	r3, [r7, #80]	@ 0x50
 8007052:	2300      	movs	r3, #0
 8007054:	657b      	str	r3, [r7, #84]	@ 0x54
 8007056:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800705a:	460b      	mov	r3, r1
 800705c:	4313      	orrs	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007060:	4b9e      	ldr	r3, [pc, #632]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007064:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800706c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706e:	4a9b      	ldr	r2, [pc, #620]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007070:	430b      	orrs	r3, r1
 8007072:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007082:	2300      	movs	r3, #0
 8007084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007086:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800708a:	460b      	mov	r3, r1
 800708c:	4313      	orrs	r3, r2
 800708e:	d009      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007090:	4b92      	ldr	r3, [pc, #584]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007094:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800709c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800709e:	4a8f      	ldr	r2, [pc, #572]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070a0:	430b      	orrs	r3, r1
 80070a2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80070b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80070b2:	2300      	movs	r3, #0
 80070b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80070ba:	460b      	mov	r3, r1
 80070bc:	4313      	orrs	r3, r2
 80070be:	d00e      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070c0:	4b86      	ldr	r3, [pc, #536]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	4a85      	ldr	r2, [pc, #532]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070ca:	6113      	str	r3, [r2, #16]
 80070cc:	4b83      	ldr	r3, [pc, #524]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070ce:	6919      	ldr	r1, [r3, #16]
 80070d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80070d8:	4a80      	ldr	r2, [pc, #512]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070da:	430b      	orrs	r3, r1
 80070dc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80070ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80070f4:	460b      	mov	r3, r1
 80070f6:	4313      	orrs	r3, r2
 80070f8:	d009      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070fa:	4b78      	ldr	r3, [pc, #480]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007108:	4a74      	ldr	r2, [pc, #464]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800710a:	430b      	orrs	r3, r1
 800710c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800710e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800711a:	633b      	str	r3, [r7, #48]	@ 0x30
 800711c:	2300      	movs	r3, #0
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007120:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007124:	460b      	mov	r3, r1
 8007126:	4313      	orrs	r3, r2
 8007128:	d00a      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800712a:	4b6c      	ldr	r3, [pc, #432]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800712c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800713a:	4a68      	ldr	r2, [pc, #416]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800713c:	430b      	orrs	r3, r1
 800713e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	2100      	movs	r1, #0
 800714a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007152:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007156:	460b      	mov	r3, r1
 8007158:	4313      	orrs	r3, r2
 800715a:	d011      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800715c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007160:	3308      	adds	r3, #8
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fbcf 	bl	8007908 <RCCEx_PLL2_Config>
 800716a:	4603      	mov	r3, r0
 800716c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007170:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800717c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	2100      	movs	r1, #0
 800718a:	6239      	str	r1, [r7, #32]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
 8007192:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007196:	460b      	mov	r3, r1
 8007198:	4313      	orrs	r3, r2
 800719a:	d011      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800719c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a0:	3308      	adds	r3, #8
 80071a2:	2101      	movs	r1, #1
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fbaf 	bl	8007908 <RCCEx_PLL2_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80071b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	2100      	movs	r1, #0
 80071ca:	61b9      	str	r1, [r7, #24]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071d6:	460b      	mov	r3, r1
 80071d8:	4313      	orrs	r3, r2
 80071da:	d011      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e0:	3308      	adds	r3, #8
 80071e2:	2102      	movs	r1, #2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fb8f 	bl	8007908 <RCCEx_PLL2_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80071f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	2100      	movs	r1, #0
 800720a:	6139      	str	r1, [r7, #16]
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007216:	460b      	mov	r3, r1
 8007218:	4313      	orrs	r3, r2
 800721a:	d011      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800721c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007220:	3328      	adds	r3, #40	@ 0x28
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fc21 	bl	8007a6c <RCCEx_PLL3_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007230:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007238:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800723c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	2100      	movs	r1, #0
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007256:	460b      	mov	r3, r1
 8007258:	4313      	orrs	r3, r2
 800725a:	d011      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800725c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007260:	3328      	adds	r3, #40	@ 0x28
 8007262:	2101      	movs	r1, #1
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fc01 	bl	8007a6c <RCCEx_PLL3_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007270:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800727c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	2100      	movs	r1, #0
 800728a:	6039      	str	r1, [r7, #0]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007296:	460b      	mov	r3, r1
 8007298:	4313      	orrs	r3, r2
 800729a:	d011      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a0:	3328      	adds	r3, #40	@ 0x28
 80072a2:	2102      	movs	r1, #2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 fbe1 	bl	8007a6c <RCCEx_PLL3_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80072b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80072c0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e000      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80072d4:	46bd      	mov	sp, r7
 80072d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072da:	bf00      	nop
 80072dc:	58024400 	.word	0x58024400

080072e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80072e4:	f7fe fde2 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 80072e8:	4602      	mov	r2, r0
 80072ea:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	091b      	lsrs	r3, r3, #4
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	4904      	ldr	r1, [pc, #16]	@ (8007308 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072f6:	5ccb      	ldrb	r3, [r1, r3]
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007300:	4618      	mov	r0, r3
 8007302:	bd80      	pop	{r7, pc}
 8007304:	58024400 	.word	0x58024400
 8007308:	0800bac8 	.word	0x0800bac8

0800730c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800730c:	b480      	push	{r7}
 800730e:	b089      	sub	sp, #36	@ 0x24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007314:	4ba1      	ldr	r3, [pc, #644]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f003 0303 	and.w	r3, r3, #3
 800731c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800731e:	4b9f      	ldr	r3, [pc, #636]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	0b1b      	lsrs	r3, r3, #12
 8007324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007328:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800732a:	4b9c      	ldr	r3, [pc, #624]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007336:	4b99      	ldr	r3, [pc, #612]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733a:	08db      	lsrs	r3, r3, #3
 800733c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	fb02 f303 	mul.w	r3, r2, r3
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8111 	beq.w	800757c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b02      	cmp	r3, #2
 800735e:	f000 8083 	beq.w	8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b02      	cmp	r3, #2
 8007366:	f200 80a1 	bhi.w	80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d056      	beq.n	8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007376:	e099      	b.n	80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007378:	4b88      	ldr	r3, [pc, #544]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b00      	cmp	r3, #0
 8007382:	d02d      	beq.n	80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007384:	4b85      	ldr	r3, [pc, #532]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	08db      	lsrs	r3, r3, #3
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	4a84      	ldr	r2, [pc, #528]	@ (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007390:	fa22 f303 	lsr.w	r3, r2, r3
 8007394:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ae:	4b7b      	ldr	r3, [pc, #492]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073be:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073de:	e087      	b.n	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f2:	4b6a      	ldr	r3, [pc, #424]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007402:	ed97 6a03 	vldr	s12, [r7, #12]
 8007406:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800740a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007422:	e065      	b.n	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007436:	4b59      	ldr	r3, [pc, #356]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007446:	ed97 6a03 	vldr	s12, [r7, #12]
 800744a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800744e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800745a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007466:	e043      	b.n	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007472:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800747a:	4b48      	ldr	r3, [pc, #288]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748a:	ed97 6a03 	vldr	s12, [r7, #12]
 800748e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800749a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800749e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074aa:	e021      	b.n	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074be:	4b37      	ldr	r3, [pc, #220]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074f0:	4b2a      	ldr	r3, [pc, #168]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f4:	0a5b      	lsrs	r3, r3, #9
 80074f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800750a:	edd7 6a07 	vldr	s13, [r7, #28]
 800750e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007516:	ee17 2a90 	vmov	r2, s15
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800751e:	4b1f      	ldr	r3, [pc, #124]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007522:	0c1b      	lsrs	r3, r3, #16
 8007524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007534:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007538:	edd7 6a07 	vldr	s13, [r7, #28]
 800753c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007544:	ee17 2a90 	vmov	r2, s15
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800754c:	4b13      	ldr	r3, [pc, #76]	@ (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800754e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007550:	0e1b      	lsrs	r3, r3, #24
 8007552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007566:	edd7 6a07 	vldr	s13, [r7, #28]
 800756a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007572:	ee17 2a90 	vmov	r2, s15
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800757a:	e008      	b.n	800758e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	609a      	str	r2, [r3, #8]
}
 800758e:	bf00      	nop
 8007590:	3724      	adds	r7, #36	@ 0x24
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	58024400 	.word	0x58024400
 80075a0:	03d09000 	.word	0x03d09000
 80075a4:	46000000 	.word	0x46000000
 80075a8:	4c742400 	.word	0x4c742400
 80075ac:	4a742400 	.word	0x4a742400
 80075b0:	4af42400 	.word	0x4af42400

080075b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b089      	sub	sp, #36	@ 0x24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075bc:	4ba1      	ldr	r3, [pc, #644]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075c6:	4b9f      	ldr	r3, [pc, #636]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ca:	0d1b      	lsrs	r3, r3, #20
 80075cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075d2:	4b9c      	ldr	r3, [pc, #624]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	0a1b      	lsrs	r3, r3, #8
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075de:	4b99      	ldr	r3, [pc, #612]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e2:	08db      	lsrs	r3, r3, #3
 80075e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8111 	beq.w	8007824 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b02      	cmp	r3, #2
 8007606:	f000 8083 	beq.w	8007710 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b02      	cmp	r3, #2
 800760e:	f200 80a1 	bhi.w	8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d056      	beq.n	80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800761e:	e099      	b.n	8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007620:	4b88      	ldr	r3, [pc, #544]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	d02d      	beq.n	8007688 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800762c:	4b85      	ldr	r3, [pc, #532]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	08db      	lsrs	r3, r3, #3
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	4a84      	ldr	r2, [pc, #528]	@ (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
 800763c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	ee07 3a90 	vmov	s15, r3
 8007644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007656:	4b7b      	ldr	r3, [pc, #492]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007666:	ed97 6a03 	vldr	s12, [r7, #12]
 800766a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800784c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800766e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800767a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007682:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007686:	e087      	b.n	8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769a:	4b6a      	ldr	r3, [pc, #424]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800784c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ca:	e065      	b.n	8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076de:	4b59      	ldr	r3, [pc, #356]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800784c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800770e:	e043      	b.n	8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800771e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007722:	4b48      	ldr	r3, [pc, #288]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007732:	ed97 6a03 	vldr	s12, [r7, #12]
 8007736:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800784c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800773a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007752:	e021      	b.n	8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007766:	4b37      	ldr	r3, [pc, #220]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007776:	ed97 6a03 	vldr	s12, [r7, #12]
 800777a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800784c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800777e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800778a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007796:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007798:	4b2a      	ldr	r3, [pc, #168]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800779a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779c:	0a5b      	lsrs	r3, r3, #9
 800779e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077be:	ee17 2a90 	vmov	r2, s15
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	0c1b      	lsrs	r3, r3, #16
 80077cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ec:	ee17 2a90 	vmov	r2, s15
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077f4:	4b13      	ldr	r3, [pc, #76]	@ (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f8:	0e1b      	lsrs	r3, r3, #24
 80077fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800780a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781a:	ee17 2a90 	vmov	r2, s15
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007822:	e008      	b.n	8007836 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	609a      	str	r2, [r3, #8]
}
 8007836:	bf00      	nop
 8007838:	3724      	adds	r7, #36	@ 0x24
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	58024400 	.word	0x58024400
 8007848:	03d09000 	.word	0x03d09000
 800784c:	46000000 	.word	0x46000000
 8007850:	4c742400 	.word	0x4c742400
 8007854:	4a742400 	.word	0x4a742400
 8007858:	4af42400 	.word	0x4af42400

0800785c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007864:	4b26      	ldr	r3, [pc, #152]	@ (8007900 <HAL_RCCEx_CRSConfig+0xa4>)
 8007866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800786a:	4a25      	ldr	r2, [pc, #148]	@ (8007900 <HAL_RCCEx_CRSConfig+0xa4>)
 800786c:	f043 0302 	orr.w	r3, r3, #2
 8007870:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007874:	4b22      	ldr	r3, [pc, #136]	@ (8007900 <HAL_RCCEx_CRSConfig+0xa4>)
 8007876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800787a:	4a21      	ldr	r2, [pc, #132]	@ (8007900 <HAL_RCCEx_CRSConfig+0xa4>)
 800787c:	f023 0302 	bic.w	r3, r3, #2
 8007880:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007884:	f7f9 fd16 	bl	80012b4 <HAL_GetREVID>
 8007888:	4603      	mov	r3, r0
 800788a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800788e:	4293      	cmp	r3, r2
 8007890:	d80b      	bhi.n	80078aa <HAL_RCCEx_CRSConfig+0x4e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800789a:	d106      	bne.n	80078aa <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e008      	b.n	80078bc <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	041b      	lsls	r3, r3, #16
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80078d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007904 <HAL_RCCEx_CRSConfig+0xa8>)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80078d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007904 <HAL_RCCEx_CRSConfig+0xa8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	021b      	lsls	r3, r3, #8
 80078e6:	4907      	ldr	r1, [pc, #28]	@ (8007904 <HAL_RCCEx_CRSConfig+0xa8>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80078ec:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <HAL_RCCEx_CRSConfig+0xa8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a04      	ldr	r2, [pc, #16]	@ (8007904 <HAL_RCCEx_CRSConfig+0xa8>)
 80078f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80078f6:	6013      	str	r3, [r2, #0]
}
 80078f8:	bf00      	nop
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	58024400 	.word	0x58024400
 8007904:	40008400 	.word	0x40008400

08007908 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007916:	4b53      	ldr	r3, [pc, #332]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	2b03      	cmp	r3, #3
 8007920:	d101      	bne.n	8007926 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e099      	b.n	8007a5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007926:	4b4f      	ldr	r3, [pc, #316]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a4e      	ldr	r2, [pc, #312]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 800792c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007932:	f7f9 fcb3 	bl	800129c <HAL_GetTick>
 8007936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007938:	e008      	b.n	800794c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800793a:	f7f9 fcaf 	bl	800129c <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d901      	bls.n	800794c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e086      	b.n	8007a5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800794c:	4b45      	ldr	r3, [pc, #276]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f0      	bne.n	800793a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007958:	4b42      	ldr	r3, [pc, #264]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 800795a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	031b      	lsls	r3, r3, #12
 8007966:	493f      	ldr	r1, [pc, #252]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007968:	4313      	orrs	r3, r2
 800796a:	628b      	str	r3, [r1, #40]	@ 0x28
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	3b01      	subs	r3, #1
 8007972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	3b01      	subs	r3, #1
 800797c:	025b      	lsls	r3, r3, #9
 800797e:	b29b      	uxth	r3, r3
 8007980:	431a      	orrs	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	3b01      	subs	r3, #1
 8007988:	041b      	lsls	r3, r3, #16
 800798a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	3b01      	subs	r3, #1
 8007996:	061b      	lsls	r3, r3, #24
 8007998:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800799c:	4931      	ldr	r1, [pc, #196]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079a2:	4b30      	ldr	r3, [pc, #192]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	492d      	ldr	r1, [pc, #180]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	f023 0220 	bic.w	r2, r3, #32
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	4928      	ldr	r1, [pc, #160]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079c6:	4b27      	ldr	r3, [pc, #156]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	4a26      	ldr	r2, [pc, #152]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079cc:	f023 0310 	bic.w	r3, r3, #16
 80079d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079d2:	4b24      	ldr	r3, [pc, #144]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079d6:	4b24      	ldr	r3, [pc, #144]	@ (8007a68 <RCCEx_PLL2_Config+0x160>)
 80079d8:	4013      	ands	r3, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	69d2      	ldr	r2, [r2, #28]
 80079de:	00d2      	lsls	r2, r2, #3
 80079e0:	4920      	ldr	r1, [pc, #128]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079ec:	f043 0310 	orr.w	r3, r3, #16
 80079f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	4a19      	ldr	r2, [pc, #100]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 80079fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a04:	e00f      	b.n	8007a26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a0c:	4b15      	ldr	r3, [pc, #84]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a10:	4a14      	ldr	r2, [pc, #80]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a18:	e005      	b.n	8007a26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a1a:	4b12      	ldr	r3, [pc, #72]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	4a11      	ldr	r2, [pc, #68]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007a20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a26:	4b0f      	ldr	r3, [pc, #60]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007a2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a32:	f7f9 fc33 	bl	800129c <HAL_GetTick>
 8007a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a38:	e008      	b.n	8007a4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a3a:	f7f9 fc2f 	bl	800129c <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d901      	bls.n	8007a4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e006      	b.n	8007a5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a4c:	4b05      	ldr	r3, [pc, #20]	@ (8007a64 <RCCEx_PLL2_Config+0x15c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f0      	beq.n	8007a3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	58024400 	.word	0x58024400
 8007a68:	ffff0007 	.word	0xffff0007

08007a6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a7a:	4b53      	ldr	r3, [pc, #332]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d101      	bne.n	8007a8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e099      	b.n	8007bbe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007a90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a96:	f7f9 fc01 	bl	800129c <HAL_GetTick>
 8007a9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a9c:	e008      	b.n	8007ab0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a9e:	f7f9 fbfd 	bl	800129c <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e086      	b.n	8007bbe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ab0:	4b45      	ldr	r3, [pc, #276]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1f0      	bne.n	8007a9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007abc:	4b42      	ldr	r3, [pc, #264]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	051b      	lsls	r3, r3, #20
 8007aca:	493f      	ldr	r1, [pc, #252]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	025b      	lsls	r3, r3, #9
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	041b      	lsls	r3, r3, #16
 8007aee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	061b      	lsls	r3, r3, #24
 8007afc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b00:	4931      	ldr	r1, [pc, #196]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b06:	4b30      	ldr	r3, [pc, #192]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	492d      	ldr	r1, [pc, #180]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b18:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	4928      	ldr	r1, [pc, #160]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b2a:	4b27      	ldr	r3, [pc, #156]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	4a26      	ldr	r2, [pc, #152]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b36:	4b24      	ldr	r3, [pc, #144]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b3a:	4b24      	ldr	r3, [pc, #144]	@ (8007bcc <RCCEx_PLL3_Config+0x160>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	69d2      	ldr	r2, [r2, #28]
 8007b42:	00d2      	lsls	r2, r2, #3
 8007b44:	4920      	ldr	r1, [pc, #128]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d106      	bne.n	8007b6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	4a19      	ldr	r2, [pc, #100]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b68:	e00f      	b.n	8007b8a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d106      	bne.n	8007b7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b70:	4b15      	ldr	r3, [pc, #84]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b74:	4a14      	ldr	r2, [pc, #80]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b7c:	e005      	b.n	8007b8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b7e:	4b12      	ldr	r3, [pc, #72]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b82:	4a11      	ldr	r2, [pc, #68]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b96:	f7f9 fb81 	bl	800129c <HAL_GetTick>
 8007b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b9c:	e008      	b.n	8007bb0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b9e:	f7f9 fb7d 	bl	800129c <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d901      	bls.n	8007bb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e006      	b.n	8007bbe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bb0:	4b05      	ldr	r3, [pc, #20]	@ (8007bc8 <RCCEx_PLL3_Config+0x15c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0f0      	beq.n	8007b9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	58024400 	.word	0x58024400
 8007bcc:	ffff0007 	.word	0xffff0007

08007bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e049      	b.n	8007c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7f9 f914 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f000 f8a6 	bl	8007d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d001      	beq.n	8007c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e04c      	b.n	8007d32 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a26      	ldr	r2, [pc, #152]	@ (8007d40 <HAL_TIM_Base_Start+0xc0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d022      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb2:	d01d      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a22      	ldr	r2, [pc, #136]	@ (8007d44 <HAL_TIM_Base_Start+0xc4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d018      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a21      	ldr	r2, [pc, #132]	@ (8007d48 <HAL_TIM_Base_Start+0xc8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d013      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8007d4c <HAL_TIM_Base_Start+0xcc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d00e      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d50 <HAL_TIM_Base_Start+0xd0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d009      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d54 <HAL_TIM_Base_Start+0xd4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1b      	ldr	r2, [pc, #108]	@ (8007d58 <HAL_TIM_Base_Start+0xd8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d115      	bne.n	8007d1c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	4b19      	ldr	r3, [pc, #100]	@ (8007d5c <HAL_TIM_Base_Start+0xdc>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b06      	cmp	r3, #6
 8007d00:	d015      	beq.n	8007d2e <HAL_TIM_Base_Start+0xae>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d08:	d011      	beq.n	8007d2e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0201 	orr.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1a:	e008      	b.n	8007d2e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	e000      	b.n	8007d30 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40010000 	.word	0x40010000
 8007d44:	40000400 	.word	0x40000400
 8007d48:	40000800 	.word	0x40000800
 8007d4c:	40000c00 	.word	0x40000c00
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40001800 	.word	0x40001800
 8007d58:	40014000 	.word	0x40014000
 8007d5c:	00010007 	.word	0x00010007

08007d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a46      	ldr	r2, [pc, #280]	@ (8007e8c <TIM_Base_SetConfig+0x12c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d013      	beq.n	8007da0 <TIM_Base_SetConfig+0x40>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d7e:	d00f      	beq.n	8007da0 <TIM_Base_SetConfig+0x40>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a43      	ldr	r2, [pc, #268]	@ (8007e90 <TIM_Base_SetConfig+0x130>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00b      	beq.n	8007da0 <TIM_Base_SetConfig+0x40>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a42      	ldr	r2, [pc, #264]	@ (8007e94 <TIM_Base_SetConfig+0x134>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_Base_SetConfig+0x40>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a41      	ldr	r2, [pc, #260]	@ (8007e98 <TIM_Base_SetConfig+0x138>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_Base_SetConfig+0x40>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a40      	ldr	r2, [pc, #256]	@ (8007e9c <TIM_Base_SetConfig+0x13c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d108      	bne.n	8007db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a35      	ldr	r2, [pc, #212]	@ (8007e8c <TIM_Base_SetConfig+0x12c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d01f      	beq.n	8007dfa <TIM_Base_SetConfig+0x9a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc0:	d01b      	beq.n	8007dfa <TIM_Base_SetConfig+0x9a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a32      	ldr	r2, [pc, #200]	@ (8007e90 <TIM_Base_SetConfig+0x130>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d017      	beq.n	8007dfa <TIM_Base_SetConfig+0x9a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a31      	ldr	r2, [pc, #196]	@ (8007e94 <TIM_Base_SetConfig+0x134>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <TIM_Base_SetConfig+0x9a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a30      	ldr	r2, [pc, #192]	@ (8007e98 <TIM_Base_SetConfig+0x138>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00f      	beq.n	8007dfa <TIM_Base_SetConfig+0x9a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8007e9c <TIM_Base_SetConfig+0x13c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00b      	beq.n	8007dfa <TIM_Base_SetConfig+0x9a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a2e      	ldr	r2, [pc, #184]	@ (8007ea0 <TIM_Base_SetConfig+0x140>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d007      	beq.n	8007dfa <TIM_Base_SetConfig+0x9a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a2d      	ldr	r2, [pc, #180]	@ (8007ea4 <TIM_Base_SetConfig+0x144>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d003      	beq.n	8007dfa <TIM_Base_SetConfig+0x9a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a2c      	ldr	r2, [pc, #176]	@ (8007ea8 <TIM_Base_SetConfig+0x148>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d108      	bne.n	8007e0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	689a      	ldr	r2, [r3, #8]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a16      	ldr	r2, [pc, #88]	@ (8007e8c <TIM_Base_SetConfig+0x12c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00f      	beq.n	8007e58 <TIM_Base_SetConfig+0xf8>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a18      	ldr	r2, [pc, #96]	@ (8007e9c <TIM_Base_SetConfig+0x13c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00b      	beq.n	8007e58 <TIM_Base_SetConfig+0xf8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a17      	ldr	r2, [pc, #92]	@ (8007ea0 <TIM_Base_SetConfig+0x140>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d007      	beq.n	8007e58 <TIM_Base_SetConfig+0xf8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a16      	ldr	r2, [pc, #88]	@ (8007ea4 <TIM_Base_SetConfig+0x144>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d003      	beq.n	8007e58 <TIM_Base_SetConfig+0xf8>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a15      	ldr	r2, [pc, #84]	@ (8007ea8 <TIM_Base_SetConfig+0x148>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d103      	bne.n	8007e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	691a      	ldr	r2, [r3, #16]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d105      	bne.n	8007e7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	f023 0201 	bic.w	r2, r3, #1
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	611a      	str	r2, [r3, #16]
  }
}
 8007e7e:	bf00      	nop
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40010000 	.word	0x40010000
 8007e90:	40000400 	.word	0x40000400
 8007e94:	40000800 	.word	0x40000800
 8007e98:	40000c00 	.word	0x40000c00
 8007e9c:	40010400 	.word	0x40010400
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	40014400 	.word	0x40014400
 8007ea8:	40014800 	.word	0x40014800

08007eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e06d      	b.n	8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a30      	ldr	r2, [pc, #192]	@ (8007fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d108      	bne.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007efe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a20      	ldr	r2, [pc, #128]	@ (8007fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d022      	beq.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f36:	d01d      	beq.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d018      	beq.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d013      	beq.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1a      	ldr	r2, [pc, #104]	@ (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00e      	beq.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a15      	ldr	r2, [pc, #84]	@ (8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d009      	beq.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a16      	ldr	r2, [pc, #88]	@ (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d004      	beq.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a15      	ldr	r2, [pc, #84]	@ (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d10c      	bne.n	8007f8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40010400 	.word	0x40010400
 8007fb4:	40000400 	.word	0x40000400
 8007fb8:	40000800 	.word	0x40000800
 8007fbc:	40000c00 	.word	0x40000c00
 8007fc0:	40001800 	.word	0x40001800
 8007fc4:	40014000 	.word	0x40014000

08007fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e042      	b.n	8008060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7f8 ff3b 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2224      	movs	r2, #36	@ 0x24
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0201 	bic.w	r2, r2, #1
 8008008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fb52 	bl	80096bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fce3 	bl	80089e4 <UART_SetConfig>
 800801e:	4603      	mov	r3, r0
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e01b      	b.n	8008060 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f001 fbd1 	bl	8009800 <UART_CheckIdleState>
 800805e:	4603      	mov	r3, r0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	@ 0x28
 800806c:	af02      	add	r7, sp, #8
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807e:	2b20      	cmp	r3, #32
 8008080:	d17b      	bne.n	800817a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_UART_Transmit+0x26>
 8008088:	88fb      	ldrh	r3, [r7, #6]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e074      	b.n	800817c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2221      	movs	r2, #33	@ 0x21
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080a2:	f7f9 f8fb 	bl	800129c <HAL_GetTick>
 80080a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	88fa      	ldrh	r2, [r7, #6]
 80080ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	88fa      	ldrh	r2, [r7, #6]
 80080b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080c0:	d108      	bne.n	80080d4 <HAL_UART_Transmit+0x6c>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d104      	bne.n	80080d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	61bb      	str	r3, [r7, #24]
 80080d2:	e003      	b.n	80080dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080dc:	e030      	b.n	8008140 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2200      	movs	r2, #0
 80080e6:	2180      	movs	r1, #128	@ 0x80
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f001 fc33 	bl	8009954 <UART_WaitOnFlagUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e03d      	b.n	800817c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008114:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	3302      	adds	r3, #2
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	e007      	b.n	800812e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	3301      	adds	r3, #1
 800812c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1c8      	bne.n	80080de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2200      	movs	r2, #0
 8008154:	2140      	movs	r1, #64	@ 0x40
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f001 fbfc 	bl	8009954 <UART_WaitOnFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e006      	b.n	800817c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800817a:	2302      	movs	r3, #2
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	3720      	adds	r7, #32
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08a      	sub	sp, #40	@ 0x28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008198:	2b20      	cmp	r3, #32
 800819a:	d137      	bne.n	800820c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <HAL_UART_Receive_DMA+0x24>
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e030      	b.n	800820e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a18      	ldr	r2, [pc, #96]	@ (8008218 <HAL_UART_Receive_DMA+0x94>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d01f      	beq.n	80081fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d018      	beq.n	80081fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	613b      	str	r3, [r7, #16]
   return(result);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081de:	627b      	str	r3, [r7, #36]	@ 0x24
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	461a      	mov	r2, r3
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	623b      	str	r3, [r7, #32]
 80081ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	69f9      	ldr	r1, [r7, #28]
 80081ee:	6a3a      	ldr	r2, [r7, #32]
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e6      	bne.n	80081ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	461a      	mov	r2, r3
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f001 fc14 	bl	8009a30 <UART_Start_Receive_DMA>
 8008208:	4603      	mov	r3, r0
 800820a:	e000      	b.n	800820e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800820c:	2302      	movs	r3, #2
  }
}
 800820e:	4618      	mov	r0, r3
 8008210:	3728      	adds	r7, #40	@ 0x28
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	58000c00 	.word	0x58000c00

0800821c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b0ba      	sub	sp, #232	@ 0xe8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008242:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008246:	f640 030f 	movw	r3, #2063	@ 0x80f
 800824a:	4013      	ands	r3, r2
 800824c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008254:	2b00      	cmp	r3, #0
 8008256:	d11b      	bne.n	8008290 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d015      	beq.n	8008290 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008268:	f003 0320 	and.w	r3, r3, #32
 800826c:	2b00      	cmp	r3, #0
 800826e:	d105      	bne.n	800827c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 8377 	beq.w	8008974 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
      }
      return;
 800828e:	e371      	b.n	8008974 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8123 	beq.w	80084e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800829a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800829e:	4b8d      	ldr	r3, [pc, #564]	@ (80084d4 <HAL_UART_IRQHandler+0x2b8>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80082aa:	4b8b      	ldr	r3, [pc, #556]	@ (80084d8 <HAL_UART_IRQHandler+0x2bc>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8116 	beq.w	80084e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d011      	beq.n	80082e4 <HAL_UART_IRQHandler+0xc8>
 80082c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2201      	movs	r2, #1
 80082d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082da:	f043 0201 	orr.w	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d011      	beq.n	8008314 <HAL_UART_IRQHandler+0xf8>
 80082f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2202      	movs	r2, #2
 8008302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800830a:	f043 0204 	orr.w	r2, r3, #4
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d011      	beq.n	8008344 <HAL_UART_IRQHandler+0x128>
 8008320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2204      	movs	r2, #4
 8008332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800833a:	f043 0202 	orr.w	r2, r3, #2
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008348:	f003 0308 	and.w	r3, r3, #8
 800834c:	2b00      	cmp	r3, #0
 800834e:	d017      	beq.n	8008380 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d105      	bne.n	8008368 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800835c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008360:	4b5c      	ldr	r3, [pc, #368]	@ (80084d4 <HAL_UART_IRQHandler+0x2b8>)
 8008362:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2208      	movs	r2, #8
 800836e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008376:	f043 0208 	orr.w	r2, r3, #8
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008388:	2b00      	cmp	r3, #0
 800838a:	d012      	beq.n	80083b2 <HAL_UART_IRQHandler+0x196>
 800838c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008390:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00c      	beq.n	80083b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a8:	f043 0220 	orr.w	r2, r3, #32
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 82dd 	beq.w	8008978 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d013      	beq.n	80083f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d105      	bne.n	80083e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d007      	beq.n	80083f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008406:	2b40      	cmp	r3, #64	@ 0x40
 8008408:	d005      	beq.n	8008416 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800840a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800840e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008412:	2b00      	cmp	r3, #0
 8008414:	d054      	beq.n	80084c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fbf2 	bl	8009c00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008426:	2b40      	cmp	r3, #64	@ 0x40
 8008428:	d146      	bne.n	80084b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3308      	adds	r3, #8
 8008452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008456:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800845a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800846e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1d9      	bne.n	800842a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800847c:	2b00      	cmp	r3, #0
 800847e:	d017      	beq.n	80084b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008486:	4a15      	ldr	r2, [pc, #84]	@ (80084dc <HAL_UART_IRQHandler+0x2c0>)
 8008488:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008490:	4618      	mov	r0, r3
 8008492:	f7fa fc63 	bl	8002d5c <HAL_DMA_Abort_IT>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d019      	beq.n	80084d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80084aa:	4610      	mov	r0, r2
 80084ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ae:	e00f      	b.n	80084d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fa81 	bl	80089b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b6:	e00b      	b.n	80084d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fa7d 	bl	80089b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084be:	e007      	b.n	80084d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fa79 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80084ce:	e253      	b.n	8008978 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d0:	bf00      	nop
    return;
 80084d2:	e251      	b.n	8008978 <HAL_UART_IRQHandler+0x75c>
 80084d4:	10000001 	.word	0x10000001
 80084d8:	04000120 	.word	0x04000120
 80084dc:	08009eb3 	.word	0x08009eb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	f040 81e7 	bne.w	80088b8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ee:	f003 0310 	and.w	r3, r3, #16
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 81e0 	beq.w	80088b8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084fc:	f003 0310 	and.w	r3, r3, #16
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 81d9 	beq.w	80088b8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2210      	movs	r2, #16
 800850c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008518:	2b40      	cmp	r3, #64	@ 0x40
 800851a:	f040 8151 	bne.w	80087c0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a96      	ldr	r2, [pc, #600]	@ (8008780 <HAL_UART_IRQHandler+0x564>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d068      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a93      	ldr	r2, [pc, #588]	@ (8008784 <HAL_UART_IRQHandler+0x568>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d061      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a91      	ldr	r2, [pc, #580]	@ (8008788 <HAL_UART_IRQHandler+0x56c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d05a      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a8e      	ldr	r2, [pc, #568]	@ (800878c <HAL_UART_IRQHandler+0x570>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d053      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a8c      	ldr	r2, [pc, #560]	@ (8008790 <HAL_UART_IRQHandler+0x574>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d04c      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a89      	ldr	r2, [pc, #548]	@ (8008794 <HAL_UART_IRQHandler+0x578>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d045      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a87      	ldr	r2, [pc, #540]	@ (8008798 <HAL_UART_IRQHandler+0x57c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d03e      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a84      	ldr	r2, [pc, #528]	@ (800879c <HAL_UART_IRQHandler+0x580>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d037      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a82      	ldr	r2, [pc, #520]	@ (80087a0 <HAL_UART_IRQHandler+0x584>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d030      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a7f      	ldr	r2, [pc, #508]	@ (80087a4 <HAL_UART_IRQHandler+0x588>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d029      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a7d      	ldr	r2, [pc, #500]	@ (80087a8 <HAL_UART_IRQHandler+0x58c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d022      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a7a      	ldr	r2, [pc, #488]	@ (80087ac <HAL_UART_IRQHandler+0x590>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d01b      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a78      	ldr	r2, [pc, #480]	@ (80087b0 <HAL_UART_IRQHandler+0x594>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d014      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a75      	ldr	r2, [pc, #468]	@ (80087b4 <HAL_UART_IRQHandler+0x598>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00d      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a73      	ldr	r2, [pc, #460]	@ (80087b8 <HAL_UART_IRQHandler+0x59c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d006      	beq.n	80085fe <HAL_UART_IRQHandler+0x3e2>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a70      	ldr	r2, [pc, #448]	@ (80087bc <HAL_UART_IRQHandler+0x5a0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d106      	bne.n	800860c <HAL_UART_IRQHandler+0x3f0>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	b29b      	uxth	r3, r3
 800860a:	e005      	b.n	8008618 <HAL_UART_IRQHandler+0x3fc>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800861c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 81ab 	beq.w	800897c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800862c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008630:	429a      	cmp	r2, r3
 8008632:	f080 81a3 	bcs.w	800897c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800863c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800864c:	f000 8087 	beq.w	800875e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800866c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800867a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800867e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008686:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1da      	bne.n	8008650 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3308      	adds	r3, #8
 80086a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086ac:	f023 0301 	bic.w	r3, r3, #1
 80086b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3308      	adds	r3, #8
 80086ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80086be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80086c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80086c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e1      	bne.n	800869a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3308      	adds	r3, #8
 80086f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80086fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008700:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e3      	bne.n	80086d6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800872a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800872c:	f023 0310 	bic.w	r3, r3, #16
 8008730:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800873e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008740:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800874c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e4      	bne.n	800871c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008758:	4618      	mov	r0, r3
 800875a:	f7f9 ffe1 	bl	8002720 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2202      	movs	r2, #2
 8008762:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008770:	b29b      	uxth	r3, r3
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	b29b      	uxth	r3, r3
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f927 	bl	80089cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800877e:	e0fd      	b.n	800897c <HAL_UART_IRQHandler+0x760>
 8008780:	40020010 	.word	0x40020010
 8008784:	40020028 	.word	0x40020028
 8008788:	40020040 	.word	0x40020040
 800878c:	40020058 	.word	0x40020058
 8008790:	40020070 	.word	0x40020070
 8008794:	40020088 	.word	0x40020088
 8008798:	400200a0 	.word	0x400200a0
 800879c:	400200b8 	.word	0x400200b8
 80087a0:	40020410 	.word	0x40020410
 80087a4:	40020428 	.word	0x40020428
 80087a8:	40020440 	.word	0x40020440
 80087ac:	40020458 	.word	0x40020458
 80087b0:	40020470 	.word	0x40020470
 80087b4:	40020488 	.word	0x40020488
 80087b8:	400204a0 	.word	0x400204a0
 80087bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 80cf 	beq.w	8008980 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80087e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 80ca 	beq.w	8008980 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800880e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008810:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800881c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e4      	bne.n	80087ec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	623b      	str	r3, [r7, #32]
   return(result);
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	4b55      	ldr	r3, [pc, #340]	@ (800898c <HAL_UART_IRQHandler+0x770>)
 8008836:	4013      	ands	r3, r2
 8008838:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3308      	adds	r3, #8
 8008842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008846:	633a      	str	r2, [r7, #48]	@ 0x30
 8008848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800884c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e3      	bne.n	8008822 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	60fb      	str	r3, [r7, #12]
   return(result);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0310 	bic.w	r3, r3, #16
 8008882:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008890:	61fb      	str	r3, [r7, #28]
 8008892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	69b9      	ldr	r1, [r7, #24]
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	617b      	str	r3, [r7, #20]
   return(result);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e4      	bne.n	800886e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f88b 	bl	80089cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088b6:	e063      	b.n	8008980 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00e      	beq.n	80088e2 <HAL_UART_IRQHandler+0x6c6>
 80088c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80088d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fb2a 	bl	8009f34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088e0:	e051      	b.n	8008986 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d014      	beq.n	8008918 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d105      	bne.n	8008906 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800890a:	2b00      	cmp	r3, #0
 800890c:	d03a      	beq.n	8008984 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
    }
    return;
 8008916:	e035      	b.n	8008984 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800891c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	d009      	beq.n	8008938 <HAL_UART_IRQHandler+0x71c>
 8008924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 fad4 	bl	8009ede <UART_EndTransmit_IT>
    return;
 8008936:	e026      	b.n	8008986 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d009      	beq.n	8008958 <HAL_UART_IRQHandler+0x73c>
 8008944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008948:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 fb03 	bl	8009f5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008956:	e016      	b.n	8008986 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800895c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d010      	beq.n	8008986 <HAL_UART_IRQHandler+0x76a>
 8008964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008968:	2b00      	cmp	r3, #0
 800896a:	da0c      	bge.n	8008986 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 faeb 	bl	8009f48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008972:	e008      	b.n	8008986 <HAL_UART_IRQHandler+0x76a>
      return;
 8008974:	bf00      	nop
 8008976:	e006      	b.n	8008986 <HAL_UART_IRQHandler+0x76a>
    return;
 8008978:	bf00      	nop
 800897a:	e004      	b.n	8008986 <HAL_UART_IRQHandler+0x76a>
      return;
 800897c:	bf00      	nop
 800897e:	e002      	b.n	8008986 <HAL_UART_IRQHandler+0x76a>
      return;
 8008980:	bf00      	nop
 8008982:	e000      	b.n	8008986 <HAL_UART_IRQHandler+0x76a>
    return;
 8008984:	bf00      	nop
  }
}
 8008986:	37e8      	adds	r7, #232	@ 0xe8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	effffffe 	.word	0xeffffffe

08008990 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089e8:	b092      	sub	sp, #72	@ 0x48
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	431a      	orrs	r2, r3
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4bbe      	ldr	r3, [pc, #760]	@ (8008d0c <UART_SetConfig+0x328>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	6812      	ldr	r2, [r2, #0]
 8008a1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4ab3      	ldr	r2, [pc, #716]	@ (8008d10 <UART_SetConfig+0x32c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d004      	beq.n	8008a50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	4baf      	ldr	r3, [pc, #700]	@ (8008d14 <UART_SetConfig+0x330>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	6812      	ldr	r2, [r2, #0]
 8008a5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a60:	430b      	orrs	r3, r1
 8008a62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6a:	f023 010f 	bic.w	r1, r3, #15
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4aa6      	ldr	r2, [pc, #664]	@ (8008d18 <UART_SetConfig+0x334>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d177      	bne.n	8008b74 <UART_SetConfig+0x190>
 8008a84:	4ba5      	ldr	r3, [pc, #660]	@ (8008d1c <UART_SetConfig+0x338>)
 8008a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a8c:	2b28      	cmp	r3, #40	@ 0x28
 8008a8e:	d86d      	bhi.n	8008b6c <UART_SetConfig+0x188>
 8008a90:	a201      	add	r2, pc, #4	@ (adr r2, 8008a98 <UART_SetConfig+0xb4>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008b3d 	.word	0x08008b3d
 8008a9c:	08008b6d 	.word	0x08008b6d
 8008aa0:	08008b6d 	.word	0x08008b6d
 8008aa4:	08008b6d 	.word	0x08008b6d
 8008aa8:	08008b6d 	.word	0x08008b6d
 8008aac:	08008b6d 	.word	0x08008b6d
 8008ab0:	08008b6d 	.word	0x08008b6d
 8008ab4:	08008b6d 	.word	0x08008b6d
 8008ab8:	08008b45 	.word	0x08008b45
 8008abc:	08008b6d 	.word	0x08008b6d
 8008ac0:	08008b6d 	.word	0x08008b6d
 8008ac4:	08008b6d 	.word	0x08008b6d
 8008ac8:	08008b6d 	.word	0x08008b6d
 8008acc:	08008b6d 	.word	0x08008b6d
 8008ad0:	08008b6d 	.word	0x08008b6d
 8008ad4:	08008b6d 	.word	0x08008b6d
 8008ad8:	08008b4d 	.word	0x08008b4d
 8008adc:	08008b6d 	.word	0x08008b6d
 8008ae0:	08008b6d 	.word	0x08008b6d
 8008ae4:	08008b6d 	.word	0x08008b6d
 8008ae8:	08008b6d 	.word	0x08008b6d
 8008aec:	08008b6d 	.word	0x08008b6d
 8008af0:	08008b6d 	.word	0x08008b6d
 8008af4:	08008b6d 	.word	0x08008b6d
 8008af8:	08008b55 	.word	0x08008b55
 8008afc:	08008b6d 	.word	0x08008b6d
 8008b00:	08008b6d 	.word	0x08008b6d
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008b6d 	.word	0x08008b6d
 8008b0c:	08008b6d 	.word	0x08008b6d
 8008b10:	08008b6d 	.word	0x08008b6d
 8008b14:	08008b6d 	.word	0x08008b6d
 8008b18:	08008b5d 	.word	0x08008b5d
 8008b1c:	08008b6d 	.word	0x08008b6d
 8008b20:	08008b6d 	.word	0x08008b6d
 8008b24:	08008b6d 	.word	0x08008b6d
 8008b28:	08008b6d 	.word	0x08008b6d
 8008b2c:	08008b6d 	.word	0x08008b6d
 8008b30:	08008b6d 	.word	0x08008b6d
 8008b34:	08008b6d 	.word	0x08008b6d
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b42:	e326      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008b44:	2304      	movs	r3, #4
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4a:	e322      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b52:	e31e      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008b54:	2310      	movs	r3, #16
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5a:	e31a      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008b5c:	2320      	movs	r3, #32
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b62:	e316      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008b64:	2340      	movs	r3, #64	@ 0x40
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6a:	e312      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008b6c:	2380      	movs	r3, #128	@ 0x80
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e30e      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a69      	ldr	r2, [pc, #420]	@ (8008d20 <UART_SetConfig+0x33c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d130      	bne.n	8008be0 <UART_SetConfig+0x1fc>
 8008b7e:	4b67      	ldr	r3, [pc, #412]	@ (8008d1c <UART_SetConfig+0x338>)
 8008b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	2b05      	cmp	r3, #5
 8008b88:	d826      	bhi.n	8008bd8 <UART_SetConfig+0x1f4>
 8008b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b90 <UART_SetConfig+0x1ac>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba9 	.word	0x08008ba9
 8008b94:	08008bb1 	.word	0x08008bb1
 8008b98:	08008bb9 	.word	0x08008bb9
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc9 	.word	0x08008bc9
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e2f0      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e2ec      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bbe:	e2e8      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e2e4      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e2e0      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008bd0:	2340      	movs	r3, #64	@ 0x40
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e2dc      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008bd8:	2380      	movs	r3, #128	@ 0x80
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e2d8      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a4f      	ldr	r2, [pc, #316]	@ (8008d24 <UART_SetConfig+0x340>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d130      	bne.n	8008c4c <UART_SetConfig+0x268>
 8008bea:	4b4c      	ldr	r3, [pc, #304]	@ (8008d1c <UART_SetConfig+0x338>)
 8008bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	d826      	bhi.n	8008c44 <UART_SetConfig+0x260>
 8008bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bfc <UART_SetConfig+0x218>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c1d 	.word	0x08008c1d
 8008c04:	08008c25 	.word	0x08008c25
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c35 	.word	0x08008c35
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e2ba      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e2b6      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2a:	e2b2      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c32:	e2ae      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c34:	2320      	movs	r3, #32
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e2aa      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c3c:	2340      	movs	r3, #64	@ 0x40
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e2a6      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c44:	2380      	movs	r3, #128	@ 0x80
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e2a2      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a35      	ldr	r2, [pc, #212]	@ (8008d28 <UART_SetConfig+0x344>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d130      	bne.n	8008cb8 <UART_SetConfig+0x2d4>
 8008c56:	4b31      	ldr	r3, [pc, #196]	@ (8008d1c <UART_SetConfig+0x338>)
 8008c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d826      	bhi.n	8008cb0 <UART_SetConfig+0x2cc>
 8008c62:	a201      	add	r2, pc, #4	@ (adr r2, 8008c68 <UART_SetConfig+0x284>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008ca1 	.word	0x08008ca1
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e284      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e280      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e27c      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e278      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008ca0:	2320      	movs	r3, #32
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e274      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008ca8:	2340      	movs	r3, #64	@ 0x40
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e270      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008cb0:	2380      	movs	r3, #128	@ 0x80
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e26c      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8008d2c <UART_SetConfig+0x348>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d142      	bne.n	8008d48 <UART_SetConfig+0x364>
 8008cc2:	4b16      	ldr	r3, [pc, #88]	@ (8008d1c <UART_SetConfig+0x338>)
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d838      	bhi.n	8008d40 <UART_SetConfig+0x35c>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <UART_SetConfig+0x2f0>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008ced 	.word	0x08008ced
 8008cd8:	08008cf5 	.word	0x08008cf5
 8008cdc:	08008cfd 	.word	0x08008cfd
 8008ce0:	08008d05 	.word	0x08008d05
 8008ce4:	08008d31 	.word	0x08008d31
 8008ce8:	08008d39 	.word	0x08008d39
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e24e      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e24a      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008cfc:	2308      	movs	r3, #8
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e246      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008d04:	2310      	movs	r3, #16
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e242      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008d0c:	cfff69f3 	.word	0xcfff69f3
 8008d10:	58000c00 	.word	0x58000c00
 8008d14:	11fff4ff 	.word	0x11fff4ff
 8008d18:	40011000 	.word	0x40011000
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	40004400 	.word	0x40004400
 8008d24:	40004800 	.word	0x40004800
 8008d28:	40004c00 	.word	0x40004c00
 8008d2c:	40005000 	.word	0x40005000
 8008d30:	2320      	movs	r3, #32
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d36:	e22c      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008d38:	2340      	movs	r3, #64	@ 0x40
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3e:	e228      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008d40:	2380      	movs	r3, #128	@ 0x80
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d46:	e224      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4ab1      	ldr	r2, [pc, #708]	@ (8009014 <UART_SetConfig+0x630>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d176      	bne.n	8008e40 <UART_SetConfig+0x45c>
 8008d52:	4bb1      	ldr	r3, [pc, #708]	@ (8009018 <UART_SetConfig+0x634>)
 8008d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d5a:	2b28      	cmp	r3, #40	@ 0x28
 8008d5c:	d86c      	bhi.n	8008e38 <UART_SetConfig+0x454>
 8008d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <UART_SetConfig+0x380>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008e09 	.word	0x08008e09
 8008d68:	08008e39 	.word	0x08008e39
 8008d6c:	08008e39 	.word	0x08008e39
 8008d70:	08008e39 	.word	0x08008e39
 8008d74:	08008e39 	.word	0x08008e39
 8008d78:	08008e39 	.word	0x08008e39
 8008d7c:	08008e39 	.word	0x08008e39
 8008d80:	08008e39 	.word	0x08008e39
 8008d84:	08008e11 	.word	0x08008e11
 8008d88:	08008e39 	.word	0x08008e39
 8008d8c:	08008e39 	.word	0x08008e39
 8008d90:	08008e39 	.word	0x08008e39
 8008d94:	08008e39 	.word	0x08008e39
 8008d98:	08008e39 	.word	0x08008e39
 8008d9c:	08008e39 	.word	0x08008e39
 8008da0:	08008e39 	.word	0x08008e39
 8008da4:	08008e19 	.word	0x08008e19
 8008da8:	08008e39 	.word	0x08008e39
 8008dac:	08008e39 	.word	0x08008e39
 8008db0:	08008e39 	.word	0x08008e39
 8008db4:	08008e39 	.word	0x08008e39
 8008db8:	08008e39 	.word	0x08008e39
 8008dbc:	08008e39 	.word	0x08008e39
 8008dc0:	08008e39 	.word	0x08008e39
 8008dc4:	08008e21 	.word	0x08008e21
 8008dc8:	08008e39 	.word	0x08008e39
 8008dcc:	08008e39 	.word	0x08008e39
 8008dd0:	08008e39 	.word	0x08008e39
 8008dd4:	08008e39 	.word	0x08008e39
 8008dd8:	08008e39 	.word	0x08008e39
 8008ddc:	08008e39 	.word	0x08008e39
 8008de0:	08008e39 	.word	0x08008e39
 8008de4:	08008e29 	.word	0x08008e29
 8008de8:	08008e39 	.word	0x08008e39
 8008dec:	08008e39 	.word	0x08008e39
 8008df0:	08008e39 	.word	0x08008e39
 8008df4:	08008e39 	.word	0x08008e39
 8008df8:	08008e39 	.word	0x08008e39
 8008dfc:	08008e39 	.word	0x08008e39
 8008e00:	08008e39 	.word	0x08008e39
 8008e04:	08008e31 	.word	0x08008e31
 8008e08:	2301      	movs	r3, #1
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0e:	e1c0      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e10:	2304      	movs	r3, #4
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e16:	e1bc      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e18:	2308      	movs	r3, #8
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1e:	e1b8      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e20:	2310      	movs	r3, #16
 8008e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e26:	e1b4      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e28:	2320      	movs	r3, #32
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2e:	e1b0      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e30:	2340      	movs	r3, #64	@ 0x40
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e36:	e1ac      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e38:	2380      	movs	r3, #128	@ 0x80
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e1a8      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a75      	ldr	r2, [pc, #468]	@ (800901c <UART_SetConfig+0x638>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d130      	bne.n	8008eac <UART_SetConfig+0x4c8>
 8008e4a:	4b73      	ldr	r3, [pc, #460]	@ (8009018 <UART_SetConfig+0x634>)
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	d826      	bhi.n	8008ea4 <UART_SetConfig+0x4c0>
 8008e56:	a201      	add	r2, pc, #4	@ (adr r2, 8008e5c <UART_SetConfig+0x478>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008e75 	.word	0x08008e75
 8008e60:	08008e7d 	.word	0x08008e7d
 8008e64:	08008e85 	.word	0x08008e85
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e95 	.word	0x08008e95
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e18a      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e186      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8a:	e182      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e92:	e17e      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e94:	2320      	movs	r3, #32
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e17a      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008e9c:	2340      	movs	r3, #64	@ 0x40
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e176      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008ea4:	2380      	movs	r3, #128	@ 0x80
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e172      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a5b      	ldr	r2, [pc, #364]	@ (8009020 <UART_SetConfig+0x63c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d130      	bne.n	8008f18 <UART_SetConfig+0x534>
 8008eb6:	4b58      	ldr	r3, [pc, #352]	@ (8009018 <UART_SetConfig+0x634>)
 8008eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d826      	bhi.n	8008f10 <UART_SetConfig+0x52c>
 8008ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <UART_SetConfig+0x4e4>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee1 	.word	0x08008ee1
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e154      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e150      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e14c      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e148      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e144      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008f08:	2340      	movs	r3, #64	@ 0x40
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e140      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e13c      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a41      	ldr	r2, [pc, #260]	@ (8009024 <UART_SetConfig+0x640>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	f040 8082 	bne.w	8009028 <UART_SetConfig+0x644>
 8008f24:	4b3c      	ldr	r3, [pc, #240]	@ (8009018 <UART_SetConfig+0x634>)
 8008f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f2c:	2b28      	cmp	r3, #40	@ 0x28
 8008f2e:	d86d      	bhi.n	800900c <UART_SetConfig+0x628>
 8008f30:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <UART_SetConfig+0x554>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008fdd 	.word	0x08008fdd
 8008f3c:	0800900d 	.word	0x0800900d
 8008f40:	0800900d 	.word	0x0800900d
 8008f44:	0800900d 	.word	0x0800900d
 8008f48:	0800900d 	.word	0x0800900d
 8008f4c:	0800900d 	.word	0x0800900d
 8008f50:	0800900d 	.word	0x0800900d
 8008f54:	0800900d 	.word	0x0800900d
 8008f58:	08008fe5 	.word	0x08008fe5
 8008f5c:	0800900d 	.word	0x0800900d
 8008f60:	0800900d 	.word	0x0800900d
 8008f64:	0800900d 	.word	0x0800900d
 8008f68:	0800900d 	.word	0x0800900d
 8008f6c:	0800900d 	.word	0x0800900d
 8008f70:	0800900d 	.word	0x0800900d
 8008f74:	0800900d 	.word	0x0800900d
 8008f78:	08008fed 	.word	0x08008fed
 8008f7c:	0800900d 	.word	0x0800900d
 8008f80:	0800900d 	.word	0x0800900d
 8008f84:	0800900d 	.word	0x0800900d
 8008f88:	0800900d 	.word	0x0800900d
 8008f8c:	0800900d 	.word	0x0800900d
 8008f90:	0800900d 	.word	0x0800900d
 8008f94:	0800900d 	.word	0x0800900d
 8008f98:	08008ff5 	.word	0x08008ff5
 8008f9c:	0800900d 	.word	0x0800900d
 8008fa0:	0800900d 	.word	0x0800900d
 8008fa4:	0800900d 	.word	0x0800900d
 8008fa8:	0800900d 	.word	0x0800900d
 8008fac:	0800900d 	.word	0x0800900d
 8008fb0:	0800900d 	.word	0x0800900d
 8008fb4:	0800900d 	.word	0x0800900d
 8008fb8:	08008ffd 	.word	0x08008ffd
 8008fbc:	0800900d 	.word	0x0800900d
 8008fc0:	0800900d 	.word	0x0800900d
 8008fc4:	0800900d 	.word	0x0800900d
 8008fc8:	0800900d 	.word	0x0800900d
 8008fcc:	0800900d 	.word	0x0800900d
 8008fd0:	0800900d 	.word	0x0800900d
 8008fd4:	0800900d 	.word	0x0800900d
 8008fd8:	08009005 	.word	0x08009005
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e0d6      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008fe4:	2304      	movs	r3, #4
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e0d2      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008fec:	2308      	movs	r3, #8
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff2:	e0ce      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffa:	e0ca      	b.n	8009192 <UART_SetConfig+0x7ae>
 8008ffc:	2320      	movs	r3, #32
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009002:	e0c6      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009004:	2340      	movs	r3, #64	@ 0x40
 8009006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900a:	e0c2      	b.n	8009192 <UART_SetConfig+0x7ae>
 800900c:	2380      	movs	r3, #128	@ 0x80
 800900e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009012:	e0be      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009014:	40011400 	.word	0x40011400
 8009018:	58024400 	.word	0x58024400
 800901c:	40007800 	.word	0x40007800
 8009020:	40007c00 	.word	0x40007c00
 8009024:	40011800 	.word	0x40011800
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4aad      	ldr	r2, [pc, #692]	@ (80092e4 <UART_SetConfig+0x900>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d176      	bne.n	8009120 <UART_SetConfig+0x73c>
 8009032:	4bad      	ldr	r3, [pc, #692]	@ (80092e8 <UART_SetConfig+0x904>)
 8009034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800903a:	2b28      	cmp	r3, #40	@ 0x28
 800903c:	d86c      	bhi.n	8009118 <UART_SetConfig+0x734>
 800903e:	a201      	add	r2, pc, #4	@ (adr r2, 8009044 <UART_SetConfig+0x660>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	080090e9 	.word	0x080090e9
 8009048:	08009119 	.word	0x08009119
 800904c:	08009119 	.word	0x08009119
 8009050:	08009119 	.word	0x08009119
 8009054:	08009119 	.word	0x08009119
 8009058:	08009119 	.word	0x08009119
 800905c:	08009119 	.word	0x08009119
 8009060:	08009119 	.word	0x08009119
 8009064:	080090f1 	.word	0x080090f1
 8009068:	08009119 	.word	0x08009119
 800906c:	08009119 	.word	0x08009119
 8009070:	08009119 	.word	0x08009119
 8009074:	08009119 	.word	0x08009119
 8009078:	08009119 	.word	0x08009119
 800907c:	08009119 	.word	0x08009119
 8009080:	08009119 	.word	0x08009119
 8009084:	080090f9 	.word	0x080090f9
 8009088:	08009119 	.word	0x08009119
 800908c:	08009119 	.word	0x08009119
 8009090:	08009119 	.word	0x08009119
 8009094:	08009119 	.word	0x08009119
 8009098:	08009119 	.word	0x08009119
 800909c:	08009119 	.word	0x08009119
 80090a0:	08009119 	.word	0x08009119
 80090a4:	08009101 	.word	0x08009101
 80090a8:	08009119 	.word	0x08009119
 80090ac:	08009119 	.word	0x08009119
 80090b0:	08009119 	.word	0x08009119
 80090b4:	08009119 	.word	0x08009119
 80090b8:	08009119 	.word	0x08009119
 80090bc:	08009119 	.word	0x08009119
 80090c0:	08009119 	.word	0x08009119
 80090c4:	08009109 	.word	0x08009109
 80090c8:	08009119 	.word	0x08009119
 80090cc:	08009119 	.word	0x08009119
 80090d0:	08009119 	.word	0x08009119
 80090d4:	08009119 	.word	0x08009119
 80090d8:	08009119 	.word	0x08009119
 80090dc:	08009119 	.word	0x08009119
 80090e0:	08009119 	.word	0x08009119
 80090e4:	08009111 	.word	0x08009111
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e050      	b.n	8009192 <UART_SetConfig+0x7ae>
 80090f0:	2304      	movs	r3, #4
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e04c      	b.n	8009192 <UART_SetConfig+0x7ae>
 80090f8:	2308      	movs	r3, #8
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e048      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009100:	2310      	movs	r3, #16
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e044      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009108:	2320      	movs	r3, #32
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e040      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009110:	2340      	movs	r3, #64	@ 0x40
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e03c      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009118:	2380      	movs	r3, #128	@ 0x80
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e038      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a71      	ldr	r2, [pc, #452]	@ (80092ec <UART_SetConfig+0x908>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d130      	bne.n	800918c <UART_SetConfig+0x7a8>
 800912a:	4b6f      	ldr	r3, [pc, #444]	@ (80092e8 <UART_SetConfig+0x904>)
 800912c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	2b05      	cmp	r3, #5
 8009134:	d826      	bhi.n	8009184 <UART_SetConfig+0x7a0>
 8009136:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <UART_SetConfig+0x758>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	08009155 	.word	0x08009155
 8009140:	0800915d 	.word	0x0800915d
 8009144:	08009165 	.word	0x08009165
 8009148:	0800916d 	.word	0x0800916d
 800914c:	08009175 	.word	0x08009175
 8009150:	0800917d 	.word	0x0800917d
 8009154:	2302      	movs	r3, #2
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e01a      	b.n	8009192 <UART_SetConfig+0x7ae>
 800915c:	2304      	movs	r3, #4
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e016      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009164:	2308      	movs	r3, #8
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e012      	b.n	8009192 <UART_SetConfig+0x7ae>
 800916c:	2310      	movs	r3, #16
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009172:	e00e      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009174:	2320      	movs	r3, #32
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e00a      	b.n	8009192 <UART_SetConfig+0x7ae>
 800917c:	2340      	movs	r3, #64	@ 0x40
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009182:	e006      	b.n	8009192 <UART_SetConfig+0x7ae>
 8009184:	2380      	movs	r3, #128	@ 0x80
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918a:	e002      	b.n	8009192 <UART_SetConfig+0x7ae>
 800918c:	2380      	movs	r3, #128	@ 0x80
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a55      	ldr	r2, [pc, #340]	@ (80092ec <UART_SetConfig+0x908>)
 8009198:	4293      	cmp	r3, r2
 800919a:	f040 80f8 	bne.w	800938e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800919e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091a2:	2b20      	cmp	r3, #32
 80091a4:	dc46      	bgt.n	8009234 <UART_SetConfig+0x850>
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	db75      	blt.n	8009296 <UART_SetConfig+0x8b2>
 80091aa:	3b02      	subs	r3, #2
 80091ac:	2b1e      	cmp	r3, #30
 80091ae:	d872      	bhi.n	8009296 <UART_SetConfig+0x8b2>
 80091b0:	a201      	add	r2, pc, #4	@ (adr r2, 80091b8 <UART_SetConfig+0x7d4>)
 80091b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	0800923b 	.word	0x0800923b
 80091bc:	08009297 	.word	0x08009297
 80091c0:	08009243 	.word	0x08009243
 80091c4:	08009297 	.word	0x08009297
 80091c8:	08009297 	.word	0x08009297
 80091cc:	08009297 	.word	0x08009297
 80091d0:	08009253 	.word	0x08009253
 80091d4:	08009297 	.word	0x08009297
 80091d8:	08009297 	.word	0x08009297
 80091dc:	08009297 	.word	0x08009297
 80091e0:	08009297 	.word	0x08009297
 80091e4:	08009297 	.word	0x08009297
 80091e8:	08009297 	.word	0x08009297
 80091ec:	08009297 	.word	0x08009297
 80091f0:	08009263 	.word	0x08009263
 80091f4:	08009297 	.word	0x08009297
 80091f8:	08009297 	.word	0x08009297
 80091fc:	08009297 	.word	0x08009297
 8009200:	08009297 	.word	0x08009297
 8009204:	08009297 	.word	0x08009297
 8009208:	08009297 	.word	0x08009297
 800920c:	08009297 	.word	0x08009297
 8009210:	08009297 	.word	0x08009297
 8009214:	08009297 	.word	0x08009297
 8009218:	08009297 	.word	0x08009297
 800921c:	08009297 	.word	0x08009297
 8009220:	08009297 	.word	0x08009297
 8009224:	08009297 	.word	0x08009297
 8009228:	08009297 	.word	0x08009297
 800922c:	08009297 	.word	0x08009297
 8009230:	08009289 	.word	0x08009289
 8009234:	2b40      	cmp	r3, #64	@ 0x40
 8009236:	d02a      	beq.n	800928e <UART_SetConfig+0x8aa>
 8009238:	e02d      	b.n	8009296 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800923a:	f7fe f851 	bl	80072e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800923e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009240:	e02f      	b.n	80092a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f860 	bl	800730c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800924c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009250:	e027      	b.n	80092a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009252:	f107 0318 	add.w	r3, r7, #24
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe f9ac 	bl	80075b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009260:	e01f      	b.n	80092a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009262:	4b21      	ldr	r3, [pc, #132]	@ (80092e8 <UART_SetConfig+0x904>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d009      	beq.n	8009282 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800926e:	4b1e      	ldr	r3, [pc, #120]	@ (80092e8 <UART_SetConfig+0x904>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	08db      	lsrs	r3, r3, #3
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	4a1d      	ldr	r2, [pc, #116]	@ (80092f0 <UART_SetConfig+0x90c>)
 800927a:	fa22 f303 	lsr.w	r3, r2, r3
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009280:	e00f      	b.n	80092a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009282:	4b1b      	ldr	r3, [pc, #108]	@ (80092f0 <UART_SetConfig+0x90c>)
 8009284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009286:	e00c      	b.n	80092a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009288:	4b1a      	ldr	r3, [pc, #104]	@ (80092f4 <UART_SetConfig+0x910>)
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928c:	e009      	b.n	80092a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800928e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009294:	e005      	b.n	80092a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 81ee 	beq.w	8009686 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ae:	4a12      	ldr	r2, [pc, #72]	@ (80092f8 <UART_SetConfig+0x914>)
 80092b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	4613      	mov	r3, r2
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	4413      	add	r3, r2
 80092c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d305      	bcc.n	80092da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d910      	bls.n	80092fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092e0:	e1d1      	b.n	8009686 <UART_SetConfig+0xca2>
 80092e2:	bf00      	nop
 80092e4:	40011c00 	.word	0x40011c00
 80092e8:	58024400 	.word	0x58024400
 80092ec:	58000c00 	.word	0x58000c00
 80092f0:	03d09000 	.word	0x03d09000
 80092f4:	003d0900 	.word	0x003d0900
 80092f8:	0800bae0 	.word	0x0800bae0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fe:	2200      	movs	r2, #0
 8009300:	60bb      	str	r3, [r7, #8]
 8009302:	60fa      	str	r2, [r7, #12]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009308:	4ac0      	ldr	r2, [pc, #768]	@ (800960c <UART_SetConfig+0xc28>)
 800930a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800930e:	b29b      	uxth	r3, r3
 8009310:	2200      	movs	r2, #0
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800931a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800931e:	f7f6 ffe7 	bl	80002f0 <__aeabi_uldivmod>
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	4610      	mov	r0, r2
 8009328:	4619      	mov	r1, r3
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	020b      	lsls	r3, r1, #8
 8009334:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009338:	0202      	lsls	r2, r0, #8
 800933a:	6979      	ldr	r1, [r7, #20]
 800933c:	6849      	ldr	r1, [r1, #4]
 800933e:	0849      	lsrs	r1, r1, #1
 8009340:	2000      	movs	r0, #0
 8009342:	460c      	mov	r4, r1
 8009344:	4605      	mov	r5, r0
 8009346:	eb12 0804 	adds.w	r8, r2, r4
 800934a:	eb43 0905 	adc.w	r9, r3, r5
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	469a      	mov	sl, r3
 8009356:	4693      	mov	fp, r2
 8009358:	4652      	mov	r2, sl
 800935a:	465b      	mov	r3, fp
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f6 ffc6 	bl	80002f0 <__aeabi_uldivmod>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4613      	mov	r3, r2
 800936a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009372:	d308      	bcc.n	8009386 <UART_SetConfig+0x9a2>
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800937a:	d204      	bcs.n	8009386 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009382:	60da      	str	r2, [r3, #12]
 8009384:	e17f      	b.n	8009686 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800938c:	e17b      	b.n	8009686 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009396:	f040 80bd 	bne.w	8009514 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800939a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800939e:	2b20      	cmp	r3, #32
 80093a0:	dc48      	bgt.n	8009434 <UART_SetConfig+0xa50>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	db7b      	blt.n	800949e <UART_SetConfig+0xaba>
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	d879      	bhi.n	800949e <UART_SetConfig+0xaba>
 80093aa:	a201      	add	r2, pc, #4	@ (adr r2, 80093b0 <UART_SetConfig+0x9cc>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	0800943b 	.word	0x0800943b
 80093b4:	08009443 	.word	0x08009443
 80093b8:	0800949f 	.word	0x0800949f
 80093bc:	0800949f 	.word	0x0800949f
 80093c0:	0800944b 	.word	0x0800944b
 80093c4:	0800949f 	.word	0x0800949f
 80093c8:	0800949f 	.word	0x0800949f
 80093cc:	0800949f 	.word	0x0800949f
 80093d0:	0800945b 	.word	0x0800945b
 80093d4:	0800949f 	.word	0x0800949f
 80093d8:	0800949f 	.word	0x0800949f
 80093dc:	0800949f 	.word	0x0800949f
 80093e0:	0800949f 	.word	0x0800949f
 80093e4:	0800949f 	.word	0x0800949f
 80093e8:	0800949f 	.word	0x0800949f
 80093ec:	0800949f 	.word	0x0800949f
 80093f0:	0800946b 	.word	0x0800946b
 80093f4:	0800949f 	.word	0x0800949f
 80093f8:	0800949f 	.word	0x0800949f
 80093fc:	0800949f 	.word	0x0800949f
 8009400:	0800949f 	.word	0x0800949f
 8009404:	0800949f 	.word	0x0800949f
 8009408:	0800949f 	.word	0x0800949f
 800940c:	0800949f 	.word	0x0800949f
 8009410:	0800949f 	.word	0x0800949f
 8009414:	0800949f 	.word	0x0800949f
 8009418:	0800949f 	.word	0x0800949f
 800941c:	0800949f 	.word	0x0800949f
 8009420:	0800949f 	.word	0x0800949f
 8009424:	0800949f 	.word	0x0800949f
 8009428:	0800949f 	.word	0x0800949f
 800942c:	0800949f 	.word	0x0800949f
 8009430:	08009491 	.word	0x08009491
 8009434:	2b40      	cmp	r3, #64	@ 0x40
 8009436:	d02e      	beq.n	8009496 <UART_SetConfig+0xab2>
 8009438:	e031      	b.n	800949e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800943a:	f7fc fd67 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 800943e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009440:	e033      	b.n	80094aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009442:	f7fc fd79 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 8009446:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009448:	e02f      	b.n	80094aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800944a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800944e:	4618      	mov	r0, r3
 8009450:	f7fd ff5c 	bl	800730c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009458:	e027      	b.n	80094aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800945a:	f107 0318 	add.w	r3, r7, #24
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe f8a8 	bl	80075b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009468:	e01f      	b.n	80094aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800946a:	4b69      	ldr	r3, [pc, #420]	@ (8009610 <UART_SetConfig+0xc2c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d009      	beq.n	800948a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009476:	4b66      	ldr	r3, [pc, #408]	@ (8009610 <UART_SetConfig+0xc2c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	08db      	lsrs	r3, r3, #3
 800947c:	f003 0303 	and.w	r3, r3, #3
 8009480:	4a64      	ldr	r2, [pc, #400]	@ (8009614 <UART_SetConfig+0xc30>)
 8009482:	fa22 f303 	lsr.w	r3, r2, r3
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009488:	e00f      	b.n	80094aa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800948a:	4b62      	ldr	r3, [pc, #392]	@ (8009614 <UART_SetConfig+0xc30>)
 800948c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800948e:	e00c      	b.n	80094aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009490:	4b61      	ldr	r3, [pc, #388]	@ (8009618 <UART_SetConfig+0xc34>)
 8009492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009494:	e009      	b.n	80094aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800949c:	e005      	b.n	80094aa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 80ea 	beq.w	8009686 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b6:	4a55      	ldr	r2, [pc, #340]	@ (800960c <UART_SetConfig+0xc28>)
 80094b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094bc:	461a      	mov	r2, r3
 80094be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80094c4:	005a      	lsls	r2, r3, #1
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	441a      	add	r2, r3
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094da:	2b0f      	cmp	r3, #15
 80094dc:	d916      	bls.n	800950c <UART_SetConfig+0xb28>
 80094de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094e4:	d212      	bcs.n	800950c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	f023 030f 	bic.w	r3, r3, #15
 80094ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	085b      	lsrs	r3, r3, #1
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094fe:	4313      	orrs	r3, r2
 8009500:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009508:	60da      	str	r2, [r3, #12]
 800950a:	e0bc      	b.n	8009686 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009512:	e0b8      	b.n	8009686 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009514:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009518:	2b20      	cmp	r3, #32
 800951a:	dc4b      	bgt.n	80095b4 <UART_SetConfig+0xbd0>
 800951c:	2b00      	cmp	r3, #0
 800951e:	f2c0 8087 	blt.w	8009630 <UART_SetConfig+0xc4c>
 8009522:	2b20      	cmp	r3, #32
 8009524:	f200 8084 	bhi.w	8009630 <UART_SetConfig+0xc4c>
 8009528:	a201      	add	r2, pc, #4	@ (adr r2, 8009530 <UART_SetConfig+0xb4c>)
 800952a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952e:	bf00      	nop
 8009530:	080095bb 	.word	0x080095bb
 8009534:	080095c3 	.word	0x080095c3
 8009538:	08009631 	.word	0x08009631
 800953c:	08009631 	.word	0x08009631
 8009540:	080095cb 	.word	0x080095cb
 8009544:	08009631 	.word	0x08009631
 8009548:	08009631 	.word	0x08009631
 800954c:	08009631 	.word	0x08009631
 8009550:	080095db 	.word	0x080095db
 8009554:	08009631 	.word	0x08009631
 8009558:	08009631 	.word	0x08009631
 800955c:	08009631 	.word	0x08009631
 8009560:	08009631 	.word	0x08009631
 8009564:	08009631 	.word	0x08009631
 8009568:	08009631 	.word	0x08009631
 800956c:	08009631 	.word	0x08009631
 8009570:	080095eb 	.word	0x080095eb
 8009574:	08009631 	.word	0x08009631
 8009578:	08009631 	.word	0x08009631
 800957c:	08009631 	.word	0x08009631
 8009580:	08009631 	.word	0x08009631
 8009584:	08009631 	.word	0x08009631
 8009588:	08009631 	.word	0x08009631
 800958c:	08009631 	.word	0x08009631
 8009590:	08009631 	.word	0x08009631
 8009594:	08009631 	.word	0x08009631
 8009598:	08009631 	.word	0x08009631
 800959c:	08009631 	.word	0x08009631
 80095a0:	08009631 	.word	0x08009631
 80095a4:	08009631 	.word	0x08009631
 80095a8:	08009631 	.word	0x08009631
 80095ac:	08009631 	.word	0x08009631
 80095b0:	08009623 	.word	0x08009623
 80095b4:	2b40      	cmp	r3, #64	@ 0x40
 80095b6:	d037      	beq.n	8009628 <UART_SetConfig+0xc44>
 80095b8:	e03a      	b.n	8009630 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095ba:	f7fc fca7 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 80095be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095c0:	e03c      	b.n	800963c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095c2:	f7fc fcb9 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 80095c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095c8:	e038      	b.n	800963c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd fe9c 	bl	800730c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	e030      	b.n	800963c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095da:	f107 0318 	add.w	r3, r7, #24
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd ffe8 	bl	80075b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e8:	e028      	b.n	800963c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ea:	4b09      	ldr	r3, [pc, #36]	@ (8009610 <UART_SetConfig+0xc2c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d012      	beq.n	800961c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f6:	4b06      	ldr	r3, [pc, #24]	@ (8009610 <UART_SetConfig+0xc2c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	08db      	lsrs	r3, r3, #3
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	4a04      	ldr	r2, [pc, #16]	@ (8009614 <UART_SetConfig+0xc30>)
 8009602:	fa22 f303 	lsr.w	r3, r2, r3
 8009606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009608:	e018      	b.n	800963c <UART_SetConfig+0xc58>
 800960a:	bf00      	nop
 800960c:	0800bae0 	.word	0x0800bae0
 8009610:	58024400 	.word	0x58024400
 8009614:	03d09000 	.word	0x03d09000
 8009618:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800961c:	4b24      	ldr	r3, [pc, #144]	@ (80096b0 <UART_SetConfig+0xccc>)
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009620:	e00c      	b.n	800963c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009622:	4b24      	ldr	r3, [pc, #144]	@ (80096b4 <UART_SetConfig+0xcd0>)
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009626:	e009      	b.n	800963c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800962c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962e:	e005      	b.n	800963c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800963a:	bf00      	nop
    }

    if (pclk != 0U)
 800963c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d021      	beq.n	8009686 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009646:	4a1c      	ldr	r2, [pc, #112]	@ (80096b8 <UART_SetConfig+0xcd4>)
 8009648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800964c:	461a      	mov	r2, r3
 800964e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009650:	fbb3 f2f2 	udiv	r2, r3, r2
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	085b      	lsrs	r3, r3, #1
 800965a:	441a      	add	r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	fbb2 f3f3 	udiv	r3, r2, r3
 8009664:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009668:	2b0f      	cmp	r3, #15
 800966a:	d909      	bls.n	8009680 <UART_SetConfig+0xc9c>
 800966c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009672:	d205      	bcs.n	8009680 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009676:	b29a      	uxth	r2, r3
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60da      	str	r2, [r3, #12]
 800967e:	e002      	b.n	8009686 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2201      	movs	r2, #1
 800968a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2201      	movs	r2, #1
 8009692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2200      	movs	r2, #0
 800969a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2200      	movs	r2, #0
 80096a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80096a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3748      	adds	r7, #72	@ 0x48
 80096aa:	46bd      	mov	sp, r7
 80096ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096b0:	03d09000 	.word	0x03d09000
 80096b4:	003d0900 	.word	0x003d0900
 80096b8:	0800bae0 	.word	0x0800bae0

080096bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c8:	f003 0308 	and.w	r3, r3, #8
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00a      	beq.n	800972a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00a      	beq.n	800976e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	430a      	orrs	r2, r1
 800978e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01a      	beq.n	80097d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097ba:	d10a      	bne.n	80097d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	605a      	str	r2, [r3, #4]
  }
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b098      	sub	sp, #96	@ 0x60
 8009804:	af02      	add	r7, sp, #8
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009810:	f7f7 fd44 	bl	800129c <HAL_GetTick>
 8009814:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	2b08      	cmp	r3, #8
 8009822:	d12f      	bne.n	8009884 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009824:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800982c:	2200      	movs	r2, #0
 800982e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f88e 	bl	8009954 <UART_WaitOnFlagUntilTimeout>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d022      	beq.n	8009884 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009846:	e853 3f00 	ldrex	r3, [r3]
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800984c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800984e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009852:	653b      	str	r3, [r7, #80]	@ 0x50
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	461a      	mov	r2, r3
 800985a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800985c:	647b      	str	r3, [r7, #68]	@ 0x44
 800985e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009864:	e841 2300 	strex	r3, r2, [r1]
 8009868:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800986a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e6      	bne.n	800983e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e063      	b.n	800994c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b04      	cmp	r3, #4
 8009890:	d149      	bne.n	8009926 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009892:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800989a:	2200      	movs	r2, #0
 800989c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f857 	bl	8009954 <UART_WaitOnFlagUntilTimeout>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d03c      	beq.n	8009926 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	623b      	str	r3, [r7, #32]
   return(result);
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80098cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098d2:	e841 2300 	strex	r3, r2, [r1]
 80098d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e6      	bne.n	80098ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3308      	adds	r3, #8
 80098e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3308      	adds	r3, #8
 80098fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098fe:	61fa      	str	r2, [r7, #28]
 8009900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	69b9      	ldr	r1, [r7, #24]
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	e841 2300 	strex	r3, r2, [r1]
 800990a:	617b      	str	r3, [r7, #20]
   return(result);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1e5      	bne.n	80098de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e012      	b.n	800994c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2220      	movs	r2, #32
 800992a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2220      	movs	r2, #32
 8009932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3758      	adds	r7, #88	@ 0x58
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	603b      	str	r3, [r7, #0]
 8009960:	4613      	mov	r3, r2
 8009962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009964:	e04f      	b.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996c:	d04b      	beq.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800996e:	f7f7 fc95 	bl	800129c <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	429a      	cmp	r2, r3
 800997c:	d302      	bcc.n	8009984 <UART_WaitOnFlagUntilTimeout+0x30>
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e04e      	b.n	8009a26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0304 	and.w	r3, r3, #4
 8009992:	2b00      	cmp	r3, #0
 8009994:	d037      	beq.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b80      	cmp	r3, #128	@ 0x80
 800999a:	d034      	beq.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b40      	cmp	r3, #64	@ 0x40
 80099a0:	d031      	beq.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d110      	bne.n	80099d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2208      	movs	r2, #8
 80099b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 f921 	bl	8009c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2208      	movs	r2, #8
 80099c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e029      	b.n	8009a26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099e0:	d111      	bne.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 f907 	bl	8009c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e00f      	b.n	8009a26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69da      	ldr	r2, [r3, #28]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	bf0c      	ite	eq
 8009a16:	2301      	moveq	r3, #1
 8009a18:	2300      	movne	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d0a0      	beq.n	8009966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b096      	sub	sp, #88	@ 0x58
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	88fa      	ldrh	r2, [r7, #6]
 8009a48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2222      	movs	r2, #34	@ 0x22
 8009a58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d02d      	beq.n	8009ac2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a6c:	4a40      	ldr	r2, [pc, #256]	@ (8009b70 <UART_Start_Receive_DMA+0x140>)
 8009a6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a76:	4a3f      	ldr	r2, [pc, #252]	@ (8009b74 <UART_Start_Receive_DMA+0x144>)
 8009a78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a80:	4a3d      	ldr	r2, [pc, #244]	@ (8009b78 <UART_Start_Receive_DMA+0x148>)
 8009a82:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3324      	adds	r3, #36	@ 0x24
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	88fb      	ldrh	r3, [r7, #6]
 8009aa4:	f7f8 fbd2 	bl	800224c <HAL_DMA_Start_IT>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2210      	movs	r2, #16
 8009ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e051      	b.n	8009b66 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d018      	beq.n	8009afc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad2:	e853 3f00 	ldrex	r3, [r3]
 8009ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e6      	bne.n	8009aca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b06:	e853 3f00 	ldrex	r3, [r3]
 8009b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0e:	f043 0301 	orr.w	r3, r3, #1
 8009b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b1c:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e5      	bne.n	8009afc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3308      	adds	r3, #8
 8009b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b50:	623a      	str	r2, [r7, #32]
 8009b52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b54:	69f9      	ldr	r1, [r7, #28]
 8009b56:	6a3a      	ldr	r2, [r7, #32]
 8009b58:	e841 2300 	strex	r3, r2, [r1]
 8009b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e5      	bne.n	8009b30 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3758      	adds	r7, #88	@ 0x58
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	08009ccd 	.word	0x08009ccd
 8009b74:	08009df5 	.word	0x08009df5
 8009b78:	08009e33 	.word	0x08009e33

08009b7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b08f      	sub	sp, #60	@ 0x3c
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ba4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e6      	bne.n	8009b84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3308      	adds	r3, #8
 8009bbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd6:	61ba      	str	r2, [r7, #24]
 8009bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	6979      	ldr	r1, [r7, #20]
 8009bdc:	69ba      	ldr	r2, [r7, #24]
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	613b      	str	r3, [r7, #16]
   return(result);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e5      	bne.n	8009bb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2220      	movs	r2, #32
 8009bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009bf2:	bf00      	nop
 8009bf4:	373c      	adds	r7, #60	@ 0x3c
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
	...

08009c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b095      	sub	sp, #84	@ 0x54
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c10:	e853 3f00 	ldrex	r3, [r3]
 8009c14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c26:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c2e:	e841 2300 	strex	r3, r2, [r1]
 8009c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1e6      	bne.n	8009c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3308      	adds	r3, #8
 8009c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	e853 3f00 	ldrex	r3, [r3]
 8009c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c4a:	69fa      	ldr	r2, [r7, #28]
 8009c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009cc8 <UART_EndRxTransfer+0xc8>)
 8009c4e:	4013      	ands	r3, r2
 8009c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3308      	adds	r3, #8
 8009c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e5      	bne.n	8009c3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d118      	bne.n	8009ca8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	e853 3f00 	ldrex	r3, [r3]
 8009c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f023 0310 	bic.w	r3, r3, #16
 8009c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
 8009c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c98:	6979      	ldr	r1, [r7, #20]
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	e841 2300 	strex	r3, r2, [r1]
 8009ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e6      	bne.n	8009c76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2220      	movs	r2, #32
 8009cac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009cbc:	bf00      	nop
 8009cbe:	3754      	adds	r7, #84	@ 0x54
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	effffffe 	.word	0xeffffffe

08009ccc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b09c      	sub	sp, #112	@ 0x70
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce2:	d071      	beq.n	8009dc8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e6      	bne.n	8009cec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d28:	e853 3f00 	ldrex	r3, [r3]
 8009d2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d30:	f023 0301 	bic.w	r3, r3, #1
 8009d34:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1e5      	bne.n	8009d1e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3308      	adds	r3, #8
 8009d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	623b      	str	r3, [r7, #32]
   return(result);
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d68:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d72:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e5      	bne.n	8009d52 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d118      	bne.n	8009dc8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f023 0310 	bic.w	r3, r3, #16
 8009daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009db4:	61fb      	str	r3, [r7, #28]
 8009db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e6      	bne.n	8009d96 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dca:	2200      	movs	r2, #0
 8009dcc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d107      	bne.n	8009de6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009de0:	f7fe fdf4 	bl	80089cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009de4:	e002      	b.n	8009dec <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009de6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009de8:	f7f6 ff4a 	bl	8000c80 <HAL_UART_RxCpltCallback>
}
 8009dec:	bf00      	nop
 8009dee:	3770      	adds	r7, #112	@ 0x70
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d109      	bne.n	8009e24 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e16:	085b      	lsrs	r3, r3, #1
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7fe fdd5 	bl	80089cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e22:	e002      	b.n	8009e2a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7fe fdbd 	bl	80089a4 <HAL_UART_RxHalfCpltCallback>
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e5a:	2b80      	cmp	r3, #128	@ 0x80
 8009e5c:	d109      	bne.n	8009e72 <UART_DMAError+0x40>
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	2b21      	cmp	r3, #33	@ 0x21
 8009e62:	d106      	bne.n	8009e72 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009e6c:	6978      	ldr	r0, [r7, #20]
 8009e6e:	f7ff fe85 	bl	8009b7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e7c:	2b40      	cmp	r3, #64	@ 0x40
 8009e7e:	d109      	bne.n	8009e94 <UART_DMAError+0x62>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b22      	cmp	r3, #34	@ 0x22
 8009e84:	d106      	bne.n	8009e94 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009e8e:	6978      	ldr	r0, [r7, #20]
 8009e90:	f7ff feb6 	bl	8009c00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e9a:	f043 0210 	orr.w	r2, r3, #16
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ea4:	6978      	ldr	r0, [r7, #20]
 8009ea6:	f7fe fd87 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eaa:	bf00      	nop
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7fe fd71 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b088      	sub	sp, #32
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	e853 3f00 	ldrex	r3, [r3]
 8009ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009efa:	61fb      	str	r3, [r7, #28]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	461a      	mov	r2, r3
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	61bb      	str	r3, [r7, #24]
 8009f06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	6979      	ldr	r1, [r7, #20]
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	e841 2300 	strex	r3, r2, [r1]
 8009f10:	613b      	str	r3, [r7, #16]
   return(result);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e6      	bne.n	8009ee6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7fe fd32 	bl	8008990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f2c:	bf00      	nop
 8009f2e:	3720      	adds	r7, #32
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d101      	bne.n	8009f86 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f82:	2302      	movs	r3, #2
 8009f84:	e027      	b.n	8009fd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2224      	movs	r2, #36	@ 0x24
 8009f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f022 0201 	bic.w	r2, r2, #1
 8009fac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	e02d      	b.n	800a056 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2224      	movs	r2, #36	@ 0x24
 800a006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 0201 	bic.w	r2, r2, #1
 800a020:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f850 	bl	800a0dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2220      	movs	r2, #32
 800a048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d101      	bne.n	800a076 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a072:	2302      	movs	r3, #2
 800a074:	e02d      	b.n	800a0d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2224      	movs	r2, #36	@ 0x24
 800a082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f022 0201 	bic.w	r2, r2, #1
 800a09c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f812 	bl	800a0dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2220      	movs	r2, #32
 800a0c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d108      	bne.n	800a0fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0fc:	e031      	b.n	800a162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0fe:	2310      	movs	r3, #16
 800a100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a102:	2310      	movs	r3, #16
 800a104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	0e5b      	lsrs	r3, r3, #25
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	f003 0307 	and.w	r3, r3, #7
 800a114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	0f5b      	lsrs	r3, r3, #29
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	f003 0307 	and.w	r3, r3, #7
 800a124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a126:	7bbb      	ldrb	r3, [r7, #14]
 800a128:	7b3a      	ldrb	r2, [r7, #12]
 800a12a:	4911      	ldr	r1, [pc, #68]	@ (800a170 <UARTEx_SetNbDataToProcess+0x94>)
 800a12c:	5c8a      	ldrb	r2, [r1, r2]
 800a12e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a132:	7b3a      	ldrb	r2, [r7, #12]
 800a134:	490f      	ldr	r1, [pc, #60]	@ (800a174 <UARTEx_SetNbDataToProcess+0x98>)
 800a136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a138:	fb93 f3f2 	sdiv	r3, r3, r2
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	7b7a      	ldrb	r2, [r7, #13]
 800a148:	4909      	ldr	r1, [pc, #36]	@ (800a170 <UARTEx_SetNbDataToProcess+0x94>)
 800a14a:	5c8a      	ldrb	r2, [r1, r2]
 800a14c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a150:	7b7a      	ldrb	r2, [r7, #13]
 800a152:	4908      	ldr	r1, [pc, #32]	@ (800a174 <UARTEx_SetNbDataToProcess+0x98>)
 800a154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a156:	fb93 f3f2 	sdiv	r3, r3, r2
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a162:	bf00      	nop
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	0800baf8 	.word	0x0800baf8
 800a174:	0800bb00 	.word	0x0800bb00

0800a178 <arm_conv_f32>:
 800a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	b08b      	sub	sp, #44	@ 0x2c
 800a17e:	4299      	cmp	r1, r3
 800a180:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a182:	d205      	bcs.n	800a190 <arm_conv_f32+0x18>
 800a184:	4606      	mov	r6, r0
 800a186:	460c      	mov	r4, r1
 800a188:	4610      	mov	r0, r2
 800a18a:	4619      	mov	r1, r3
 800a18c:	4632      	mov	r2, r6
 800a18e:	4623      	mov	r3, r4
 800a190:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800a194:	3101      	adds	r1, #1
 800a196:	1ac9      	subs	r1, r1, r3
 800a198:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a19c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800a1a0:	9101      	str	r1, [sp, #4]
 800a1a2:	1e59      	subs	r1, r3, #1
 800a1a4:	eb02 070b 	add.w	r7, r2, fp
 800a1a8:	f000 8277 	beq.w	800a69a <arm_conv_f32+0x522>
 800a1ac:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800a46c <arm_conv_f32+0x2f4>
 800a1b0:	f102 0904 	add.w	r9, r2, #4
 800a1b4:	46aa      	mov	sl, r5
 800a1b6:	4680      	mov	r8, r0
 800a1b8:	2401      	movs	r4, #1
 800a1ba:	f014 0603 	ands.w	r6, r4, #3
 800a1be:	d01b      	beq.n	800a1f8 <arm_conv_f32+0x80>
 800a1c0:	ed92 7a00 	vldr	s14, [r2]
 800a1c4:	edd8 6a00 	vldr	s13, [r8]
 800a1c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a1cc:	3e01      	subs	r6, #1
 800a1ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1d2:	d011      	beq.n	800a1f8 <arm_conv_f32+0x80>
 800a1d4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a1d8:	edd8 6a01 	vldr	s13, [r8, #4]
 800a1dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a1e0:	2e01      	cmp	r6, #1
 800a1e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1e6:	d007      	beq.n	800a1f8 <arm_conv_f32+0x80>
 800a1e8:	ed98 7a02 	vldr	s14, [r8, #8]
 800a1ec:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a1f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a1f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1f8:	3401      	adds	r4, #1
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	ecea 7a01 	vstmia	sl!, {s15}
 800a200:	464a      	mov	r2, r9
 800a202:	d03a      	beq.n	800a27a <arm_conv_f32+0x102>
 800a204:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800a208:	f000 824c 	beq.w	800a6a4 <arm_conv_f32+0x52c>
 800a20c:	f100 0210 	add.w	r2, r0, #16
 800a210:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800a214:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800a46c <arm_conv_f32+0x2f4>
 800a218:	eb02 0c08 	add.w	ip, r2, r8
 800a21c:	f1a9 0610 	sub.w	r6, r9, #16
 800a220:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a224:	edd6 3a04 	vldr	s7, [r6, #16]
 800a228:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a22c:	ed96 4a03 	vldr	s8, [r6, #12]
 800a230:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a234:	edd6 4a02 	vldr	s9, [r6, #8]
 800a238:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a23c:	ed96 5a01 	vldr	s10, [r6, #4]
 800a240:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a244:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a24c:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800a250:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a254:	ee65 6a85 	vmul.f32	s13, s11, s10
 800a258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a25c:	3210      	adds	r2, #16
 800a25e:	4594      	cmp	ip, r2
 800a260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a264:	f1a6 0610 	sub.w	r6, r6, #16
 800a268:	d1da      	bne.n	800a220 <arm_conv_f32+0xa8>
 800a26a:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800a26e:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800a272:	4480      	add	r8, r0
 800a274:	f109 0904 	add.w	r9, r9, #4
 800a278:	e79f      	b.n	800a1ba <arm_conv_f32+0x42>
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	445d      	add	r5, fp
 800a27e:	f240 80e9 	bls.w	800a454 <arm_conv_f32+0x2dc>
 800a282:	9b01      	ldr	r3, [sp, #4]
 800a284:	089a      	lsrs	r2, r3, #2
 800a286:	9202      	str	r2, [sp, #8]
 800a288:	f000 8203 	beq.w	800a692 <arm_conv_f32+0x51a>
 800a28c:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800a290:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800a294:	0112      	lsls	r2, r2, #4
 800a296:	f004 0603 	and.w	r6, r4, #3
 800a29a:	9203      	str	r2, [sp, #12]
 800a29c:	f1a3 0a10 	sub.w	sl, r3, #16
 800a2a0:	f1a3 020c 	sub.w	r2, r3, #12
 800a2a4:	3b08      	subs	r3, #8
 800a2a6:	9204      	str	r2, [sp, #16]
 800a2a8:	9305      	str	r3, [sp, #20]
 800a2aa:	f106 39ff 	add.w	r9, r6, #4294967295
 800a2ae:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800a2b2:	9a03      	ldr	r2, [sp, #12]
 800a2b4:	f100 0c1c 	add.w	ip, r0, #28
 800a2b8:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800a2bc:	464c      	mov	r4, r9
 800a2be:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800a2c2:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800a2c6:	f1a7 0310 	sub.w	r3, r7, #16
 800a2ca:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800a2ce:	eb05 0b02 	add.w	fp, r5, r2
 800a2d2:	461f      	mov	r7, r3
 800a2d4:	3510      	adds	r5, #16
 800a2d6:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800a46c <arm_conv_f32+0x2f4>
 800a2da:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800a2de:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800a2e2:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800a2e6:	eeb0 5a46 	vmov.f32	s10, s12
 800a2ea:	eef0 4a46 	vmov.f32	s9, s12
 800a2ee:	eef0 5a46 	vmov.f32	s11, s12
 800a2f2:	463a      	mov	r2, r7
 800a2f4:	4663      	mov	r3, ip
 800a2f6:	4641      	mov	r1, r8
 800a2f8:	edd2 6a04 	vldr	s13, [r2, #16]
 800a2fc:	ed13 0a04 	vldr	s0, [r3, #-16]
 800a300:	ed92 7a03 	vldr	s14, [r2, #12]
 800a304:	edd2 7a02 	vldr	s15, [r2, #8]
 800a308:	edd2 0a01 	vldr	s1, [r2, #4]
 800a30c:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800a310:	ee62 3a26 	vmul.f32	s7, s4, s13
 800a314:	ee61 2a26 	vmul.f32	s5, s2, s13
 800a318:	ed13 1a03 	vldr	s2, [r3, #-12]
 800a31c:	ee66 6a80 	vmul.f32	s13, s13, s0
 800a320:	ee21 4a87 	vmul.f32	s8, s3, s14
 800a324:	ee73 4a24 	vadd.f32	s9, s6, s9
 800a328:	ee33 5a85 	vadd.f32	s10, s7, s10
 800a32c:	ee22 3a07 	vmul.f32	s6, s4, s14
 800a330:	ed53 1a02 	vldr	s3, [r3, #-8]
 800a334:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800a338:	ee36 6a86 	vadd.f32	s12, s13, s12
 800a33c:	ee60 3a07 	vmul.f32	s7, s0, s14
 800a340:	ee27 7a01 	vmul.f32	s14, s14, s2
 800a344:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a348:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a34c:	ee74 2a22 	vadd.f32	s5, s8, s5
 800a350:	ee60 4a27 	vmul.f32	s9, s0, s15
 800a354:	ee22 4a27 	vmul.f32	s8, s4, s15
 800a358:	ee73 3a85 	vadd.f32	s7, s7, s10
 800a35c:	ed13 2a01 	vldr	s4, [r3, #-4]
 800a360:	ee21 5a27 	vmul.f32	s10, s2, s15
 800a364:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800a368:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a36c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a370:	ee34 4a22 	vadd.f32	s8, s8, s5
 800a374:	ee60 5a20 	vmul.f32	s11, s0, s1
 800a378:	ee21 3a20 	vmul.f32	s6, s2, s1
 800a37c:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a380:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800a384:	ee20 6a82 	vmul.f32	s12, s1, s4
 800a388:	3901      	subs	r1, #1
 800a38a:	f1a2 0210 	sub.w	r2, r2, #16
 800a38e:	ee75 5a84 	vadd.f32	s11, s11, s8
 800a392:	ee73 4a24 	vadd.f32	s9, s6, s9
 800a396:	ee37 5a05 	vadd.f32	s10, s14, s10
 800a39a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a39e:	f103 0310 	add.w	r3, r3, #16
 800a3a2:	d1a9      	bne.n	800a2f8 <arm_conv_f32+0x180>
 800a3a4:	eb0a 030c 	add.w	r3, sl, ip
 800a3a8:	2e00      	cmp	r6, #0
 800a3aa:	d042      	beq.n	800a432 <arm_conv_f32+0x2ba>
 800a3ac:	edde 7a00 	vldr	s15, [lr]
 800a3b0:	ed93 4a00 	vldr	s8, [r3]
 800a3b4:	ee61 6a27 	vmul.f32	s13, s2, s15
 800a3b8:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800a3bc:	ee22 7a27 	vmul.f32	s14, s4, s15
 800a3c0:	ee64 7a27 	vmul.f32	s15, s8, s15
 800a3c4:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800a3c8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a3cc:	ee35 5a07 	vadd.f32	s10, s10, s14
 800a3d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a3d4:	eb09 030c 	add.w	r3, r9, ip
 800a3d8:	b35c      	cbz	r4, 800a432 <arm_conv_f32+0x2ba>
 800a3da:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800a3de:	edd3 6a00 	vldr	s13, [r3]
 800a3e2:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800a3e6:	ee22 3a27 	vmul.f32	s6, s4, s15
 800a3ea:	ee67 3a84 	vmul.f32	s7, s15, s8
 800a3ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3f2:	2c01      	cmp	r4, #1
 800a3f4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a3f8:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a3fc:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a400:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a404:	eb00 030c 	add.w	r3, r0, ip
 800a408:	d013      	beq.n	800a432 <arm_conv_f32+0x2ba>
 800a40a:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800a40e:	edd3 3a00 	vldr	s7, [r3]
 800a412:	ee62 7a07 	vmul.f32	s15, s4, s14
 800a416:	ee27 4a04 	vmul.f32	s8, s14, s8
 800a41a:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a41e:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a422:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a426:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a42a:	ee35 5a26 	vadd.f32	s10, s10, s13
 800a42e:	ee36 6a07 	vadd.f32	s12, s12, s14
 800a432:	45ab      	cmp	fp, r5
 800a434:	ed45 5a04 	vstr	s11, [r5, #-16]
 800a438:	ed45 4a03 	vstr	s9, [r5, #-12]
 800a43c:	ed05 5a02 	vstr	s10, [r5, #-8]
 800a440:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a444:	f10c 0c10 	add.w	ip, ip, #16
 800a448:	f105 0310 	add.w	r3, r5, #16
 800a44c:	f000 809e 	beq.w	800a58c <arm_conv_f32+0x414>
 800a450:	461d      	mov	r5, r3
 800a452:	e740      	b.n	800a2d6 <arm_conv_f32+0x15e>
 800a454:	9a01      	ldr	r2, [sp, #4]
 800a456:	46ac      	mov	ip, r5
 800a458:	2a00      	cmp	r2, #0
 800a45a:	d037      	beq.n	800a4cc <arm_conv_f32+0x354>
 800a45c:	9a01      	ldr	r2, [sp, #4]
 800a45e:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800a46c <arm_conv_f32+0x2f4>
 800a462:	0096      	lsls	r6, r2, #2
 800a464:	eb05 0c06 	add.w	ip, r5, r6
 800a468:	4604      	mov	r4, r0
 800a46a:	e021      	b.n	800a4b0 <arm_conv_f32+0x338>
 800a46c:	00000000 	.word	0x00000000
 800a470:	edd7 7a00 	vldr	s15, [r7]
 800a474:	ecb2 7a01 	vldmia	r2!, {s14}
 800a478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a47c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a480:	b189      	cbz	r1, 800a4a6 <arm_conv_f32+0x32e>
 800a482:	ed17 7a01 	vldr	s14, [r7, #-4]
 800a486:	edd4 6a01 	vldr	s13, [r4, #4]
 800a48a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a48e:	2b02      	cmp	r3, #2
 800a490:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a494:	d007      	beq.n	800a4a6 <arm_conv_f32+0x32e>
 800a496:	ed94 7a02 	vldr	s14, [r4, #8]
 800a49a:	ed57 6a02 	vldr	s13, [r7, #-8]
 800a49e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a4a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4a6:	ece5 7a01 	vstmia	r5!, {s15}
 800a4aa:	4565      	cmp	r5, ip
 800a4ac:	4614      	mov	r4, r2
 800a4ae:	d00a      	beq.n	800a4c6 <arm_conv_f32+0x34e>
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1dc      	bne.n	800a470 <arm_conv_f32+0x2f8>
 800a4b6:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800a46c <arm_conv_f32+0x2f4>
 800a4ba:	ece5 7a01 	vstmia	r5!, {s15}
 800a4be:	1d22      	adds	r2, r4, #4
 800a4c0:	4565      	cmp	r5, ip
 800a4c2:	4614      	mov	r4, r2
 800a4c4:	d1f4      	bne.n	800a4b0 <arm_conv_f32+0x338>
 800a4c6:	4430      	add	r0, r6
 800a4c8:	2900      	cmp	r1, #0
 800a4ca:	d059      	beq.n	800a580 <arm_conv_f32+0x408>
 800a4cc:	088d      	lsrs	r5, r1, #2
 800a4ce:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800a46c <arm_conv_f32+0x2f4>
 800a4d2:	d058      	beq.n	800a586 <arm_conv_f32+0x40e>
 800a4d4:	f100 0210 	add.w	r2, r0, #16
 800a4d8:	f1a7 0310 	sub.w	r3, r7, #16
 800a4dc:	462c      	mov	r4, r5
 800a4de:	ed52 6a04 	vldr	s13, [r2, #-16]
 800a4e2:	edd3 3a04 	vldr	s7, [r3, #16]
 800a4e6:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a4ea:	ed93 4a03 	vldr	s8, [r3, #12]
 800a4ee:	ed52 7a02 	vldr	s15, [r2, #-8]
 800a4f2:	edd3 4a02 	vldr	s9, [r3, #8]
 800a4f6:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a4fa:	ed93 5a01 	vldr	s10, [r3, #4]
 800a4fe:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a502:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a506:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a50a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a50e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a512:	ee66 6a05 	vmul.f32	s13, s12, s10
 800a516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a51a:	3c01      	subs	r4, #1
 800a51c:	f102 0210 	add.w	r2, r2, #16
 800a520:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800a524:	f1a3 0310 	sub.w	r3, r3, #16
 800a528:	d1d9      	bne.n	800a4de <arm_conv_f32+0x366>
 800a52a:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800a52e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800a532:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800a536:	f011 0203 	ands.w	r2, r1, #3
 800a53a:	d01b      	beq.n	800a574 <arm_conv_f32+0x3fc>
 800a53c:	edd3 7a00 	vldr	s15, [r3]
 800a540:	ed95 7a00 	vldr	s14, [r5]
 800a544:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a548:	3a01      	subs	r2, #1
 800a54a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a54e:	d011      	beq.n	800a574 <arm_conv_f32+0x3fc>
 800a550:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a554:	ed95 7a01 	vldr	s14, [r5, #4]
 800a558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a55c:	2a01      	cmp	r2, #1
 800a55e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a562:	d007      	beq.n	800a574 <arm_conv_f32+0x3fc>
 800a564:	edd5 7a02 	vldr	s15, [r5, #8]
 800a568:	ed13 7a02 	vldr	s14, [r3, #-8]
 800a56c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a570:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a574:	3901      	subs	r1, #1
 800a576:	ecec 5a01 	vstmia	ip!, {s11}
 800a57a:	f100 0004 	add.w	r0, r0, #4
 800a57e:	d1a5      	bne.n	800a4cc <arm_conv_f32+0x354>
 800a580:	b00b      	add	sp, #44	@ 0x2c
 800a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a586:	463b      	mov	r3, r7
 800a588:	4605      	mov	r5, r0
 800a58a:	e7d4      	b.n	800a536 <arm_conv_f32+0x3be>
 800a58c:	9b02      	ldr	r3, [sp, #8]
 800a58e:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	9302      	str	r3, [sp, #8]
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800a59c:	4403      	add	r3, r0
 800a59e:	465d      	mov	r5, fp
 800a5a0:	469e      	mov	lr, r3
 800a5a2:	9b01      	ldr	r3, [sp, #4]
 800a5a4:	f013 0c03 	ands.w	ip, r3, #3
 800a5a8:	d075      	beq.n	800a696 <arm_conv_f32+0x51e>
 800a5aa:	9b02      	ldr	r3, [sp, #8]
 800a5ac:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800a5b0:	f004 0403 	and.w	r4, r4, #3
 800a5b4:	f104 3bff 	add.w	fp, r4, #4294967295
 800a5b8:	f103 0801 	add.w	r8, r3, #1
 800a5bc:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800a5c0:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800a5c4:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800a5c8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800a5cc:	f1a7 0210 	sub.w	r2, r7, #16
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	465b      	mov	r3, fp
 800a5d4:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800a5d8:	468b      	mov	fp, r1
 800a5da:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4617      	mov	r7, r2
 800a5e2:	461c      	mov	r4, r3
 800a5e4:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800a46c <arm_conv_f32+0x2f4>
 800a5e8:	f10e 0210 	add.w	r2, lr, #16
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	4656      	mov	r6, sl
 800a5f0:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a5f4:	edd3 3a04 	vldr	s7, [r3, #16]
 800a5f8:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a5fc:	ed93 4a03 	vldr	s8, [r3, #12]
 800a600:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a604:	edd3 4a02 	vldr	s9, [r3, #8]
 800a608:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a60c:	ed93 5a01 	vldr	s10, [r3, #4]
 800a610:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a614:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a61c:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800a620:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a624:	ee65 6a85 	vmul.f32	s13, s11, s10
 800a628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a62c:	3e01      	subs	r6, #1
 800a62e:	f102 0210 	add.w	r2, r2, #16
 800a632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a636:	f1a3 0310 	sub.w	r3, r3, #16
 800a63a:	d1d9      	bne.n	800a5f0 <arm_conv_f32+0x478>
 800a63c:	4486      	add	lr, r0
 800a63e:	b1d1      	cbz	r1, 800a676 <arm_conv_f32+0x4fe>
 800a640:	ed99 7a00 	vldr	s14, [r9]
 800a644:	edde 6a00 	vldr	s13, [lr]
 800a648:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a64c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a650:	b18c      	cbz	r4, 800a676 <arm_conv_f32+0x4fe>
 800a652:	ed19 7a01 	vldr	s14, [r9, #-4]
 800a656:	edde 6a01 	vldr	s13, [lr, #4]
 800a65a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a65e:	2c01      	cmp	r4, #1
 800a660:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a664:	d007      	beq.n	800a676 <arm_conv_f32+0x4fe>
 800a666:	ed9e 7a02 	vldr	s14, [lr, #8]
 800a66a:	ed59 6a02 	vldr	s13, [r9, #-8]
 800a66e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a672:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a676:	ece5 7a01 	vstmia	r5!, {s15}
 800a67a:	4565      	cmp	r5, ip
 800a67c:	46c6      	mov	lr, r8
 800a67e:	f108 0804 	add.w	r8, r8, #4
 800a682:	d1af      	bne.n	800a5e4 <arm_conv_f32+0x46c>
 800a684:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800a688:	4659      	mov	r1, fp
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a690:	e71c      	b.n	800a4cc <arm_conv_f32+0x354>
 800a692:	4686      	mov	lr, r0
 800a694:	e785      	b.n	800a5a2 <arm_conv_f32+0x42a>
 800a696:	46ac      	mov	ip, r5
 800a698:	e7f7      	b.n	800a68a <arm_conv_f32+0x512>
 800a69a:	9a01      	ldr	r2, [sp, #4]
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	f47f aedd 	bne.w	800a45c <arm_conv_f32+0x2e4>
 800a6a2:	e76d      	b.n	800a580 <arm_conv_f32+0x408>
 800a6a4:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800a46c <arm_conv_f32+0x2f4>
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	e5e3      	b.n	800a274 <arm_conv_f32+0xfc>

0800a6ac <memset>:
 800a6ac:	4402      	add	r2, r0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d100      	bne.n	800a6b6 <memset+0xa>
 800a6b4:	4770      	bx	lr
 800a6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6ba:	e7f9      	b.n	800a6b0 <memset+0x4>

0800a6bc <__libc_init_array>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	4d0d      	ldr	r5, [pc, #52]	@ (800a6f4 <__libc_init_array+0x38>)
 800a6c0:	4c0d      	ldr	r4, [pc, #52]	@ (800a6f8 <__libc_init_array+0x3c>)
 800a6c2:	1b64      	subs	r4, r4, r5
 800a6c4:	10a4      	asrs	r4, r4, #2
 800a6c6:	2600      	movs	r6, #0
 800a6c8:	42a6      	cmp	r6, r4
 800a6ca:	d109      	bne.n	800a6e0 <__libc_init_array+0x24>
 800a6cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a6fc <__libc_init_array+0x40>)
 800a6ce:	4c0c      	ldr	r4, [pc, #48]	@ (800a700 <__libc_init_array+0x44>)
 800a6d0:	f000 fde6 	bl	800b2a0 <_init>
 800a6d4:	1b64      	subs	r4, r4, r5
 800a6d6:	10a4      	asrs	r4, r4, #2
 800a6d8:	2600      	movs	r6, #0
 800a6da:	42a6      	cmp	r6, r4
 800a6dc:	d105      	bne.n	800a6ea <__libc_init_array+0x2e>
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e4:	4798      	blx	r3
 800a6e6:	3601      	adds	r6, #1
 800a6e8:	e7ee      	b.n	800a6c8 <__libc_init_array+0xc>
 800a6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ee:	4798      	blx	r3
 800a6f0:	3601      	adds	r6, #1
 800a6f2:	e7f2      	b.n	800a6da <__libc_init_array+0x1e>
 800a6f4:	0800bce8 	.word	0x0800bce8
 800a6f8:	0800bce8 	.word	0x0800bce8
 800a6fc:	0800bce8 	.word	0x0800bce8
 800a700:	0800bcec 	.word	0x0800bcec
 800a704:	00000000 	.word	0x00000000

0800a708 <cos>:
 800a708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a70a:	eeb0 7b40 	vmov.f64	d7, d0
 800a70e:	ee17 3a90 	vmov	r3, s15
 800a712:	4a21      	ldr	r2, [pc, #132]	@ (800a798 <cos+0x90>)
 800a714:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a718:	4293      	cmp	r3, r2
 800a71a:	d806      	bhi.n	800a72a <cos+0x22>
 800a71c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800a790 <cos+0x88>
 800a720:	b005      	add	sp, #20
 800a722:	f85d eb04 	ldr.w	lr, [sp], #4
 800a726:	f000 b83b 	b.w	800a7a0 <__kernel_cos>
 800a72a:	4a1c      	ldr	r2, [pc, #112]	@ (800a79c <cos+0x94>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d904      	bls.n	800a73a <cos+0x32>
 800a730:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a734:	b005      	add	sp, #20
 800a736:	f85d fb04 	ldr.w	pc, [sp], #4
 800a73a:	4668      	mov	r0, sp
 800a73c:	f000 f8f0 	bl	800a920 <__ieee754_rem_pio2>
 800a740:	f000 0003 	and.w	r0, r0, #3
 800a744:	2801      	cmp	r0, #1
 800a746:	d009      	beq.n	800a75c <cos+0x54>
 800a748:	2802      	cmp	r0, #2
 800a74a:	d010      	beq.n	800a76e <cos+0x66>
 800a74c:	b9b0      	cbnz	r0, 800a77c <cos+0x74>
 800a74e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a752:	ed9d 0b00 	vldr	d0, [sp]
 800a756:	f000 f823 	bl	800a7a0 <__kernel_cos>
 800a75a:	e7eb      	b.n	800a734 <cos+0x2c>
 800a75c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a760:	ed9d 0b00 	vldr	d0, [sp]
 800a764:	f000 f884 	bl	800a870 <__kernel_sin>
 800a768:	eeb1 0b40 	vneg.f64	d0, d0
 800a76c:	e7e2      	b.n	800a734 <cos+0x2c>
 800a76e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a772:	ed9d 0b00 	vldr	d0, [sp]
 800a776:	f000 f813 	bl	800a7a0 <__kernel_cos>
 800a77a:	e7f5      	b.n	800a768 <cos+0x60>
 800a77c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a780:	ed9d 0b00 	vldr	d0, [sp]
 800a784:	2001      	movs	r0, #1
 800a786:	f000 f873 	bl	800a870 <__kernel_sin>
 800a78a:	e7d3      	b.n	800a734 <cos+0x2c>
 800a78c:	f3af 8000 	nop.w
	...
 800a798:	3fe921fb 	.word	0x3fe921fb
 800a79c:	7fefffff 	.word	0x7fefffff

0800a7a0 <__kernel_cos>:
 800a7a0:	eeb0 5b40 	vmov.f64	d5, d0
 800a7a4:	ee15 1a90 	vmov	r1, s11
 800a7a8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a7ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a7b0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800a7b4:	d204      	bcs.n	800a7c0 <__kernel_cos+0x20>
 800a7b6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800a7ba:	ee17 3a90 	vmov	r3, s15
 800a7be:	b343      	cbz	r3, 800a812 <__kernel_cos+0x72>
 800a7c0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800a7c4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800a7c8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800a838 <__kernel_cos+0x98>
 800a7cc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a840 <__kernel_cos+0xa0>
 800a7d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a7d4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a848 <__kernel_cos+0xa8>
 800a7d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a7dc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a850 <__kernel_cos+0xb0>
 800a7e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a7e4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a858 <__kernel_cos+0xb8>
 800a7e8:	4b1f      	ldr	r3, [pc, #124]	@ (800a868 <__kernel_cos+0xc8>)
 800a7ea:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a7ee:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a860 <__kernel_cos+0xc0>
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a7f8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a7fc:	ee24 4b06 	vmul.f64	d4, d4, d6
 800a800:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a804:	eea6 1b04 	vfma.f64	d1, d6, d4
 800a808:	d804      	bhi.n	800a814 <__kernel_cos+0x74>
 800a80a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a80e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a812:	4770      	bx	lr
 800a814:	4b15      	ldr	r3, [pc, #84]	@ (800a86c <__kernel_cos+0xcc>)
 800a816:	4299      	cmp	r1, r3
 800a818:	d809      	bhi.n	800a82e <__kernel_cos+0x8e>
 800a81a:	2200      	movs	r2, #0
 800a81c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800a820:	ec43 2b16 	vmov	d6, r2, r3
 800a824:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a828:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a82c:	e7ed      	b.n	800a80a <__kernel_cos+0x6a>
 800a82e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800a832:	e7f7      	b.n	800a824 <__kernel_cos+0x84>
 800a834:	f3af 8000 	nop.w
 800a838:	be8838d4 	.word	0xbe8838d4
 800a83c:	bda8fae9 	.word	0xbda8fae9
 800a840:	bdb4b1c4 	.word	0xbdb4b1c4
 800a844:	3e21ee9e 	.word	0x3e21ee9e
 800a848:	809c52ad 	.word	0x809c52ad
 800a84c:	be927e4f 	.word	0xbe927e4f
 800a850:	19cb1590 	.word	0x19cb1590
 800a854:	3efa01a0 	.word	0x3efa01a0
 800a858:	16c15177 	.word	0x16c15177
 800a85c:	bf56c16c 	.word	0xbf56c16c
 800a860:	5555554c 	.word	0x5555554c
 800a864:	3fa55555 	.word	0x3fa55555
 800a868:	3fd33332 	.word	0x3fd33332
 800a86c:	3fe90000 	.word	0x3fe90000

0800a870 <__kernel_sin>:
 800a870:	ee10 3a90 	vmov	r3, s1
 800a874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a878:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a87c:	d204      	bcs.n	800a888 <__kernel_sin+0x18>
 800a87e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a882:	ee17 3a90 	vmov	r3, s15
 800a886:	b35b      	cbz	r3, 800a8e0 <__kernel_sin+0x70>
 800a888:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a88c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a890:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800a8e8 <__kernel_sin+0x78>
 800a894:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a8f0 <__kernel_sin+0x80>
 800a898:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a89c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a8f8 <__kernel_sin+0x88>
 800a8a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a8a4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a900 <__kernel_sin+0x90>
 800a8a8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a8ac:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a908 <__kernel_sin+0x98>
 800a8b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a8b4:	b930      	cbnz	r0, 800a8c4 <__kernel_sin+0x54>
 800a8b6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a910 <__kernel_sin+0xa0>
 800a8ba:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a8be:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a8c2:	4770      	bx	lr
 800a8c4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a8c8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800a8cc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a8d0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a8d4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a918 <__kernel_sin+0xa8>
 800a8d8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a8dc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	f3af 8000 	nop.w
 800a8e8:	5acfd57c 	.word	0x5acfd57c
 800a8ec:	3de5d93a 	.word	0x3de5d93a
 800a8f0:	8a2b9ceb 	.word	0x8a2b9ceb
 800a8f4:	be5ae5e6 	.word	0xbe5ae5e6
 800a8f8:	57b1fe7d 	.word	0x57b1fe7d
 800a8fc:	3ec71de3 	.word	0x3ec71de3
 800a900:	19c161d5 	.word	0x19c161d5
 800a904:	bf2a01a0 	.word	0xbf2a01a0
 800a908:	1110f8a6 	.word	0x1110f8a6
 800a90c:	3f811111 	.word	0x3f811111
 800a910:	55555549 	.word	0x55555549
 800a914:	bfc55555 	.word	0xbfc55555
 800a918:	55555549 	.word	0x55555549
 800a91c:	3fc55555 	.word	0x3fc55555

0800a920 <__ieee754_rem_pio2>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	eeb0 7b40 	vmov.f64	d7, d0
 800a926:	ee17 5a90 	vmov	r5, s15
 800a92a:	4b99      	ldr	r3, [pc, #612]	@ (800ab90 <__ieee754_rem_pio2+0x270>)
 800a92c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a930:	429e      	cmp	r6, r3
 800a932:	b088      	sub	sp, #32
 800a934:	4604      	mov	r4, r0
 800a936:	d807      	bhi.n	800a948 <__ieee754_rem_pio2+0x28>
 800a938:	2200      	movs	r2, #0
 800a93a:	2300      	movs	r3, #0
 800a93c:	ed84 0b00 	vstr	d0, [r4]
 800a940:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a944:	2000      	movs	r0, #0
 800a946:	e01b      	b.n	800a980 <__ieee754_rem_pio2+0x60>
 800a948:	4b92      	ldr	r3, [pc, #584]	@ (800ab94 <__ieee754_rem_pio2+0x274>)
 800a94a:	429e      	cmp	r6, r3
 800a94c:	d83b      	bhi.n	800a9c6 <__ieee754_rem_pio2+0xa6>
 800a94e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800a952:	2d00      	cmp	r5, #0
 800a954:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ab50 <__ieee754_rem_pio2+0x230>
 800a958:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800a95c:	dd19      	ble.n	800a992 <__ieee754_rem_pio2+0x72>
 800a95e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a962:	429e      	cmp	r6, r3
 800a964:	d00e      	beq.n	800a984 <__ieee754_rem_pio2+0x64>
 800a966:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800ab58 <__ieee754_rem_pio2+0x238>
 800a96a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800a96e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a972:	ed84 6b00 	vstr	d6, [r4]
 800a976:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a97a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a97e:	2001      	movs	r0, #1
 800a980:	b008      	add	sp, #32
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ab60 <__ieee754_rem_pio2+0x240>
 800a988:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ab68 <__ieee754_rem_pio2+0x248>
 800a98c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a990:	e7eb      	b.n	800a96a <__ieee754_rem_pio2+0x4a>
 800a992:	429e      	cmp	r6, r3
 800a994:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a998:	d00e      	beq.n	800a9b8 <__ieee754_rem_pio2+0x98>
 800a99a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800ab58 <__ieee754_rem_pio2+0x238>
 800a99e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a9a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9a6:	ed84 6b00 	vstr	d6, [r4]
 800a9aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b2:	ed84 7b02 	vstr	d7, [r4, #8]
 800a9b6:	e7e3      	b.n	800a980 <__ieee754_rem_pio2+0x60>
 800a9b8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ab60 <__ieee754_rem_pio2+0x240>
 800a9bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ab68 <__ieee754_rem_pio2+0x248>
 800a9c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a9c4:	e7eb      	b.n	800a99e <__ieee754_rem_pio2+0x7e>
 800a9c6:	4b74      	ldr	r3, [pc, #464]	@ (800ab98 <__ieee754_rem_pio2+0x278>)
 800a9c8:	429e      	cmp	r6, r3
 800a9ca:	d870      	bhi.n	800aaae <__ieee754_rem_pio2+0x18e>
 800a9cc:	f000 f8ec 	bl	800aba8 <fabs>
 800a9d0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a9d4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ab70 <__ieee754_rem_pio2+0x250>
 800a9d8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a9dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a9e0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a9e4:	ee17 0a90 	vmov	r0, s15
 800a9e8:	eeb1 4b45 	vneg.f64	d4, d5
 800a9ec:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ab50 <__ieee754_rem_pio2+0x230>
 800a9f0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a9f4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ab58 <__ieee754_rem_pio2+0x238>
 800a9f8:	281f      	cmp	r0, #31
 800a9fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a9fe:	ee30 6b47 	vsub.f64	d6, d0, d7
 800aa02:	dc05      	bgt.n	800aa10 <__ieee754_rem_pio2+0xf0>
 800aa04:	4b65      	ldr	r3, [pc, #404]	@ (800ab9c <__ieee754_rem_pio2+0x27c>)
 800aa06:	1e42      	subs	r2, r0, #1
 800aa08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0c:	42b3      	cmp	r3, r6
 800aa0e:	d109      	bne.n	800aa24 <__ieee754_rem_pio2+0x104>
 800aa10:	ee16 3a90 	vmov	r3, s13
 800aa14:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800aa18:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800aa22:	dc02      	bgt.n	800aa2a <__ieee754_rem_pio2+0x10a>
 800aa24:	ed84 6b00 	vstr	d6, [r4]
 800aa28:	e01a      	b.n	800aa60 <__ieee754_rem_pio2+0x140>
 800aa2a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ab60 <__ieee754_rem_pio2+0x240>
 800aa2e:	eeb0 6b40 	vmov.f64	d6, d0
 800aa32:	eea4 6b03 	vfma.f64	d6, d4, d3
 800aa36:	ee30 7b46 	vsub.f64	d7, d0, d6
 800aa3a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800aa3e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ab68 <__ieee754_rem_pio2+0x248>
 800aa42:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800aa46:	ee36 3b47 	vsub.f64	d3, d6, d7
 800aa4a:	ee13 3a90 	vmov	r3, s7
 800aa4e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	2b31      	cmp	r3, #49	@ 0x31
 800aa56:	dc17      	bgt.n	800aa88 <__ieee754_rem_pio2+0x168>
 800aa58:	eeb0 0b46 	vmov.f64	d0, d6
 800aa5c:	ed84 3b00 	vstr	d3, [r4]
 800aa60:	ed94 6b00 	vldr	d6, [r4]
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	ee30 0b46 	vsub.f64	d0, d0, d6
 800aa6a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800aa6e:	ed84 0b02 	vstr	d0, [r4, #8]
 800aa72:	da85      	bge.n	800a980 <__ieee754_rem_pio2+0x60>
 800aa74:	eeb1 6b46 	vneg.f64	d6, d6
 800aa78:	eeb1 0b40 	vneg.f64	d0, d0
 800aa7c:	ed84 6b00 	vstr	d6, [r4]
 800aa80:	ed84 0b02 	vstr	d0, [r4, #8]
 800aa84:	4240      	negs	r0, r0
 800aa86:	e77b      	b.n	800a980 <__ieee754_rem_pio2+0x60>
 800aa88:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ab78 <__ieee754_rem_pio2+0x258>
 800aa8c:	eeb0 0b46 	vmov.f64	d0, d6
 800aa90:	eea4 0b07 	vfma.f64	d0, d4, d7
 800aa94:	ee36 6b40 	vsub.f64	d6, d6, d0
 800aa98:	eea4 6b07 	vfma.f64	d6, d4, d7
 800aa9c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800ab80 <__ieee754_rem_pio2+0x260>
 800aaa0:	eeb0 7b46 	vmov.f64	d7, d6
 800aaa4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800aaa8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800aaac:	e7ba      	b.n	800aa24 <__ieee754_rem_pio2+0x104>
 800aaae:	4b3c      	ldr	r3, [pc, #240]	@ (800aba0 <__ieee754_rem_pio2+0x280>)
 800aab0:	429e      	cmp	r6, r3
 800aab2:	d906      	bls.n	800aac2 <__ieee754_rem_pio2+0x1a2>
 800aab4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800aab8:	ed80 7b02 	vstr	d7, [r0, #8]
 800aabc:	ed80 7b00 	vstr	d7, [r0]
 800aac0:	e740      	b.n	800a944 <__ieee754_rem_pio2+0x24>
 800aac2:	ee10 3a10 	vmov	r3, s0
 800aac6:	1532      	asrs	r2, r6, #20
 800aac8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800aacc:	4618      	mov	r0, r3
 800aace:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800aad2:	ec41 0b17 	vmov	d7, r0, r1
 800aad6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aada:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800ab88 <__ieee754_rem_pio2+0x268>
 800aade:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aae2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aae6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800aaea:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aaee:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aaf2:	a808      	add	r0, sp, #32
 800aaf4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aaf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aafc:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ab00:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ab04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab08:	2103      	movs	r1, #3
 800ab0a:	ed30 7b02 	vldmdb	r0!, {d7}
 800ab0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab16:	460b      	mov	r3, r1
 800ab18:	f101 31ff 	add.w	r1, r1, #4294967295
 800ab1c:	d0f5      	beq.n	800ab0a <__ieee754_rem_pio2+0x1ea>
 800ab1e:	4921      	ldr	r1, [pc, #132]	@ (800aba4 <__ieee754_rem_pio2+0x284>)
 800ab20:	9101      	str	r1, [sp, #4]
 800ab22:	2102      	movs	r1, #2
 800ab24:	9100      	str	r1, [sp, #0]
 800ab26:	a802      	add	r0, sp, #8
 800ab28:	4621      	mov	r1, r4
 800ab2a:	f000 f845 	bl	800abb8 <__kernel_rem_pio2>
 800ab2e:	2d00      	cmp	r5, #0
 800ab30:	f6bf af26 	bge.w	800a980 <__ieee754_rem_pio2+0x60>
 800ab34:	ed94 7b00 	vldr	d7, [r4]
 800ab38:	eeb1 7b47 	vneg.f64	d7, d7
 800ab3c:	ed84 7b00 	vstr	d7, [r4]
 800ab40:	ed94 7b02 	vldr	d7, [r4, #8]
 800ab44:	eeb1 7b47 	vneg.f64	d7, d7
 800ab48:	ed84 7b02 	vstr	d7, [r4, #8]
 800ab4c:	e79a      	b.n	800aa84 <__ieee754_rem_pio2+0x164>
 800ab4e:	bf00      	nop
 800ab50:	54400000 	.word	0x54400000
 800ab54:	3ff921fb 	.word	0x3ff921fb
 800ab58:	1a626331 	.word	0x1a626331
 800ab5c:	3dd0b461 	.word	0x3dd0b461
 800ab60:	1a600000 	.word	0x1a600000
 800ab64:	3dd0b461 	.word	0x3dd0b461
 800ab68:	2e037073 	.word	0x2e037073
 800ab6c:	3ba3198a 	.word	0x3ba3198a
 800ab70:	6dc9c883 	.word	0x6dc9c883
 800ab74:	3fe45f30 	.word	0x3fe45f30
 800ab78:	2e000000 	.word	0x2e000000
 800ab7c:	3ba3198a 	.word	0x3ba3198a
 800ab80:	252049c1 	.word	0x252049c1
 800ab84:	397b839a 	.word	0x397b839a
 800ab88:	00000000 	.word	0x00000000
 800ab8c:	41700000 	.word	0x41700000
 800ab90:	3fe921fb 	.word	0x3fe921fb
 800ab94:	4002d97b 	.word	0x4002d97b
 800ab98:	413921fb 	.word	0x413921fb
 800ab9c:	0800bb08 	.word	0x0800bb08
 800aba0:	7fefffff 	.word	0x7fefffff
 800aba4:	0800bb88 	.word	0x0800bb88

0800aba8 <fabs>:
 800aba8:	ec51 0b10 	vmov	r0, r1, d0
 800abac:	4602      	mov	r2, r0
 800abae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800abb2:	ec43 2b10 	vmov	d0, r2, r3
 800abb6:	4770      	bx	lr

0800abb8 <__kernel_rem_pio2>:
 800abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	ed2d 8b06 	vpush	{d8-d10}
 800abc0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800abc4:	469b      	mov	fp, r3
 800abc6:	9001      	str	r0, [sp, #4]
 800abc8:	4bbb      	ldr	r3, [pc, #748]	@ (800aeb8 <__kernel_rem_pio2+0x300>)
 800abca:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800abcc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800abd0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800abd4:	f112 0f14 	cmn.w	r2, #20
 800abd8:	bfa8      	it	ge
 800abda:	1ed3      	subge	r3, r2, #3
 800abdc:	f10b 3aff 	add.w	sl, fp, #4294967295
 800abe0:	bfb8      	it	lt
 800abe2:	2300      	movlt	r3, #0
 800abe4:	f06f 0517 	mvn.w	r5, #23
 800abe8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800aea0 <__kernel_rem_pio2+0x2e8>
 800abec:	bfa4      	itt	ge
 800abee:	2018      	movge	r0, #24
 800abf0:	fb93 f3f0 	sdivge	r3, r3, r0
 800abf4:	fb03 5505 	mla	r5, r3, r5, r5
 800abf8:	eba3 040a 	sub.w	r4, r3, sl
 800abfc:	4415      	add	r5, r2
 800abfe:	460f      	mov	r7, r1
 800ac00:	eb09 060a 	add.w	r6, r9, sl
 800ac04:	a81a      	add	r0, sp, #104	@ 0x68
 800ac06:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	42b2      	cmp	r2, r6
 800ac0e:	dd0e      	ble.n	800ac2e <__kernel_rem_pio2+0x76>
 800ac10:	aa1a      	add	r2, sp, #104	@ 0x68
 800ac12:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ac16:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800ac1a:	2600      	movs	r6, #0
 800ac1c:	454e      	cmp	r6, r9
 800ac1e:	dc25      	bgt.n	800ac6c <__kernel_rem_pio2+0xb4>
 800ac20:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800aea0 <__kernel_rem_pio2+0x2e8>
 800ac24:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ac28:	4614      	mov	r4, r2
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e015      	b.n	800ac5a <__kernel_rem_pio2+0xa2>
 800ac2e:	42d4      	cmn	r4, r2
 800ac30:	d409      	bmi.n	800ac46 <__kernel_rem_pio2+0x8e>
 800ac32:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800ac36:	ee07 1a90 	vmov	s15, r1
 800ac3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac3e:	eca0 7b02 	vstmia	r0!, {d7}
 800ac42:	3201      	adds	r2, #1
 800ac44:	e7e2      	b.n	800ac0c <__kernel_rem_pio2+0x54>
 800ac46:	eeb0 7b46 	vmov.f64	d7, d6
 800ac4a:	e7f8      	b.n	800ac3e <__kernel_rem_pio2+0x86>
 800ac4c:	ecbc 5b02 	vldmia	ip!, {d5}
 800ac50:	ed94 6b00 	vldr	d6, [r4]
 800ac54:	3001      	adds	r0, #1
 800ac56:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac5a:	4550      	cmp	r0, sl
 800ac5c:	f1a4 0408 	sub.w	r4, r4, #8
 800ac60:	ddf4      	ble.n	800ac4c <__kernel_rem_pio2+0x94>
 800ac62:	ecae 7b02 	vstmia	lr!, {d7}
 800ac66:	3601      	adds	r6, #1
 800ac68:	3208      	adds	r2, #8
 800ac6a:	e7d7      	b.n	800ac1c <__kernel_rem_pio2+0x64>
 800ac6c:	aa06      	add	r2, sp, #24
 800ac6e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800aea8 <__kernel_rem_pio2+0x2f0>
 800ac72:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800aeb0 <__kernel_rem_pio2+0x2f8>
 800ac76:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ac7a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800ac7e:	9203      	str	r2, [sp, #12]
 800ac80:	9302      	str	r3, [sp, #8]
 800ac82:	464c      	mov	r4, r9
 800ac84:	00e3      	lsls	r3, r4, #3
 800ac86:	9304      	str	r3, [sp, #16]
 800ac88:	ab92      	add	r3, sp, #584	@ 0x248
 800ac8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac8e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800ac92:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800ac94:	ab06      	add	r3, sp, #24
 800ac96:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ac9a:	461e      	mov	r6, r3
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f1a2 0208 	sub.w	r2, r2, #8
 800aca4:	dc4a      	bgt.n	800ad3c <__kernel_rem_pio2+0x184>
 800aca6:	4628      	mov	r0, r5
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	f000 fa01 	bl	800b0b0 <scalbn>
 800acae:	eeb0 8b40 	vmov.f64	d8, d0
 800acb2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800acb6:	ee28 0b00 	vmul.f64	d0, d8, d0
 800acba:	f000 fa79 	bl	800b1b0 <floor>
 800acbe:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800acc2:	eea0 8b47 	vfms.f64	d8, d0, d7
 800acc6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800acca:	2d00      	cmp	r5, #0
 800accc:	ee17 8a90 	vmov	r8, s15
 800acd0:	9b05      	ldr	r3, [sp, #20]
 800acd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800acd6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800acda:	dd41      	ble.n	800ad60 <__kernel_rem_pio2+0x1a8>
 800acdc:	1e60      	subs	r0, r4, #1
 800acde:	aa06      	add	r2, sp, #24
 800ace0:	f1c5 0c18 	rsb	ip, r5, #24
 800ace4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ace8:	fa46 f20c 	asr.w	r2, r6, ip
 800acec:	4490      	add	r8, r2
 800acee:	fa02 f20c 	lsl.w	r2, r2, ip
 800acf2:	1ab6      	subs	r6, r6, r2
 800acf4:	aa06      	add	r2, sp, #24
 800acf6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800acfa:	f1c5 0217 	rsb	r2, r5, #23
 800acfe:	4116      	asrs	r6, r2
 800ad00:	2e00      	cmp	r6, #0
 800ad02:	dd3c      	ble.n	800ad7e <__kernel_rem_pio2+0x1c6>
 800ad04:	f04f 0c00 	mov.w	ip, #0
 800ad08:	f108 0801 	add.w	r8, r8, #1
 800ad0c:	4660      	mov	r0, ip
 800ad0e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800ad12:	4564      	cmp	r4, ip
 800ad14:	dc66      	bgt.n	800ade4 <__kernel_rem_pio2+0x22c>
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	dd03      	ble.n	800ad22 <__kernel_rem_pio2+0x16a>
 800ad1a:	2d01      	cmp	r5, #1
 800ad1c:	d072      	beq.n	800ae04 <__kernel_rem_pio2+0x24c>
 800ad1e:	2d02      	cmp	r5, #2
 800ad20:	d07a      	beq.n	800ae18 <__kernel_rem_pio2+0x260>
 800ad22:	2e02      	cmp	r6, #2
 800ad24:	d12b      	bne.n	800ad7e <__kernel_rem_pio2+0x1c6>
 800ad26:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ad2a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ad2e:	b330      	cbz	r0, 800ad7e <__kernel_rem_pio2+0x1c6>
 800ad30:	4628      	mov	r0, r5
 800ad32:	f000 f9bd 	bl	800b0b0 <scalbn>
 800ad36:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ad3a:	e020      	b.n	800ad7e <__kernel_rem_pio2+0x1c6>
 800ad3c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ad40:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ad44:	3801      	subs	r0, #1
 800ad46:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ad4a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ad4e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ad52:	eca6 0a01 	vstmia	r6!, {s0}
 800ad56:	ed92 0b00 	vldr	d0, [r2]
 800ad5a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ad5e:	e79e      	b.n	800ac9e <__kernel_rem_pio2+0xe6>
 800ad60:	d105      	bne.n	800ad6e <__kernel_rem_pio2+0x1b6>
 800ad62:	1e62      	subs	r2, r4, #1
 800ad64:	a906      	add	r1, sp, #24
 800ad66:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800ad6a:	15f6      	asrs	r6, r6, #23
 800ad6c:	e7c8      	b.n	800ad00 <__kernel_rem_pio2+0x148>
 800ad6e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ad72:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7a:	da31      	bge.n	800ade0 <__kernel_rem_pio2+0x228>
 800ad7c:	2600      	movs	r6, #0
 800ad7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad86:	f040 809b 	bne.w	800aec0 <__kernel_rem_pio2+0x308>
 800ad8a:	1e62      	subs	r2, r4, #1
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	454a      	cmp	r2, r9
 800ad90:	da49      	bge.n	800ae26 <__kernel_rem_pio2+0x26e>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d062      	beq.n	800ae5c <__kernel_rem_pio2+0x2a4>
 800ad96:	3c01      	subs	r4, #1
 800ad98:	ab06      	add	r3, sp, #24
 800ad9a:	3d18      	subs	r5, #24
 800ad9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0f8      	beq.n	800ad96 <__kernel_rem_pio2+0x1de>
 800ada4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ada8:	4628      	mov	r0, r5
 800adaa:	f000 f981 	bl	800b0b0 <scalbn>
 800adae:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800aea8 <__kernel_rem_pio2+0x2f0>
 800adb2:	1c62      	adds	r2, r4, #1
 800adb4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800adb6:	00d3      	lsls	r3, r2, #3
 800adb8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800adbc:	4622      	mov	r2, r4
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	f280 80a8 	bge.w	800af14 <__kernel_rem_pio2+0x35c>
 800adc4:	4622      	mov	r2, r4
 800adc6:	2a00      	cmp	r2, #0
 800adc8:	f2c0 80c6 	blt.w	800af58 <__kernel_rem_pio2+0x3a0>
 800adcc:	a96a      	add	r1, sp, #424	@ 0x1a8
 800adce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800add2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800aea0 <__kernel_rem_pio2+0x2e8>
 800add6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800aebc <__kernel_rem_pio2+0x304>
 800adda:	2000      	movs	r0, #0
 800addc:	1aa1      	subs	r1, r4, r2
 800adde:	e0b0      	b.n	800af42 <__kernel_rem_pio2+0x38a>
 800ade0:	2602      	movs	r6, #2
 800ade2:	e78f      	b.n	800ad04 <__kernel_rem_pio2+0x14c>
 800ade4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade8:	b948      	cbnz	r0, 800adfe <__kernel_rem_pio2+0x246>
 800adea:	b122      	cbz	r2, 800adf6 <__kernel_rem_pio2+0x23e>
 800adec:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800adf0:	f843 2c04 	str.w	r2, [r3, #-4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f10c 0c01 	add.w	ip, ip, #1
 800adfa:	4610      	mov	r0, r2
 800adfc:	e789      	b.n	800ad12 <__kernel_rem_pio2+0x15a>
 800adfe:	ebae 0202 	sub.w	r2, lr, r2
 800ae02:	e7f5      	b.n	800adf0 <__kernel_rem_pio2+0x238>
 800ae04:	1e62      	subs	r2, r4, #1
 800ae06:	ab06      	add	r3, sp, #24
 800ae08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ae10:	a906      	add	r1, sp, #24
 800ae12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ae16:	e784      	b.n	800ad22 <__kernel_rem_pio2+0x16a>
 800ae18:	1e62      	subs	r2, r4, #1
 800ae1a:	ab06      	add	r3, sp, #24
 800ae1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ae24:	e7f4      	b.n	800ae10 <__kernel_rem_pio2+0x258>
 800ae26:	ab06      	add	r3, sp, #24
 800ae28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2c:	3a01      	subs	r2, #1
 800ae2e:	4318      	orrs	r0, r3
 800ae30:	e7ad      	b.n	800ad8e <__kernel_rem_pio2+0x1d6>
 800ae32:	3301      	adds	r3, #1
 800ae34:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d0fa      	beq.n	800ae32 <__kernel_rem_pio2+0x27a>
 800ae3c:	9a04      	ldr	r2, [sp, #16]
 800ae3e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800ae42:	446a      	add	r2, sp
 800ae44:	eb04 000b 	add.w	r0, r4, fp
 800ae48:	a91a      	add	r1, sp, #104	@ 0x68
 800ae4a:	1c66      	adds	r6, r4, #1
 800ae4c:	3a98      	subs	r2, #152	@ 0x98
 800ae4e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ae52:	4423      	add	r3, r4
 800ae54:	42b3      	cmp	r3, r6
 800ae56:	da04      	bge.n	800ae62 <__kernel_rem_pio2+0x2aa>
 800ae58:	461c      	mov	r4, r3
 800ae5a:	e713      	b.n	800ac84 <__kernel_rem_pio2+0xcc>
 800ae5c:	9a03      	ldr	r2, [sp, #12]
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e7e8      	b.n	800ae34 <__kernel_rem_pio2+0x27c>
 800ae62:	9902      	ldr	r1, [sp, #8]
 800ae64:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ae68:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ae6c:	9104      	str	r1, [sp, #16]
 800ae6e:	ee07 1a90 	vmov	s15, r1
 800ae72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae76:	2400      	movs	r4, #0
 800ae78:	eca0 7b02 	vstmia	r0!, {d7}
 800ae7c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800aea0 <__kernel_rem_pio2+0x2e8>
 800ae80:	4686      	mov	lr, r0
 800ae82:	4554      	cmp	r4, sl
 800ae84:	dd03      	ble.n	800ae8e <__kernel_rem_pio2+0x2d6>
 800ae86:	eca2 7b02 	vstmia	r2!, {d7}
 800ae8a:	3601      	adds	r6, #1
 800ae8c:	e7e2      	b.n	800ae54 <__kernel_rem_pio2+0x29c>
 800ae8e:	ecbc 5b02 	vldmia	ip!, {d5}
 800ae92:	ed3e 6b02 	vldmdb	lr!, {d6}
 800ae96:	3401      	adds	r4, #1
 800ae98:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ae9c:	e7f1      	b.n	800ae82 <__kernel_rem_pio2+0x2ca>
 800ae9e:	bf00      	nop
	...
 800aeac:	3e700000 	.word	0x3e700000
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	41700000 	.word	0x41700000
 800aeb8:	0800bcd0 	.word	0x0800bcd0
 800aebc:	0800bc90 	.word	0x0800bc90
 800aec0:	4268      	negs	r0, r5
 800aec2:	eeb0 0b48 	vmov.f64	d0, d8
 800aec6:	f000 f8f3 	bl	800b0b0 <scalbn>
 800aeca:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800b098 <__kernel_rem_pio2+0x4e0>
 800aece:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed6:	db17      	blt.n	800af08 <__kernel_rem_pio2+0x350>
 800aed8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800b0a0 <__kernel_rem_pio2+0x4e8>
 800aedc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800aee0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800aee4:	aa06      	add	r2, sp, #24
 800aee6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800aeea:	eea5 0b46 	vfms.f64	d0, d5, d6
 800aeee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aef2:	3518      	adds	r5, #24
 800aef4:	ee10 3a10 	vmov	r3, s0
 800aef8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aefc:	ee17 3a10 	vmov	r3, s14
 800af00:	3401      	adds	r4, #1
 800af02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800af06:	e74d      	b.n	800ada4 <__kernel_rem_pio2+0x1ec>
 800af08:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800af0c:	aa06      	add	r2, sp, #24
 800af0e:	ee10 3a10 	vmov	r3, s0
 800af12:	e7f6      	b.n	800af02 <__kernel_rem_pio2+0x34a>
 800af14:	a806      	add	r0, sp, #24
 800af16:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800af1a:	9001      	str	r0, [sp, #4]
 800af1c:	ee07 0a90 	vmov	s15, r0
 800af20:	3a01      	subs	r2, #1
 800af22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af26:	ee27 7b00 	vmul.f64	d7, d7, d0
 800af2a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800af2e:	ed21 7b02 	vstmdb	r1!, {d7}
 800af32:	e744      	b.n	800adbe <__kernel_rem_pio2+0x206>
 800af34:	ecbc 5b02 	vldmia	ip!, {d5}
 800af38:	ecb5 6b02 	vldmia	r5!, {d6}
 800af3c:	3001      	adds	r0, #1
 800af3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800af42:	4548      	cmp	r0, r9
 800af44:	dc01      	bgt.n	800af4a <__kernel_rem_pio2+0x392>
 800af46:	4281      	cmp	r1, r0
 800af48:	daf4      	bge.n	800af34 <__kernel_rem_pio2+0x37c>
 800af4a:	a842      	add	r0, sp, #264	@ 0x108
 800af4c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800af50:	ed81 7b00 	vstr	d7, [r1]
 800af54:	3a01      	subs	r2, #1
 800af56:	e736      	b.n	800adc6 <__kernel_rem_pio2+0x20e>
 800af58:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800af5a:	2a02      	cmp	r2, #2
 800af5c:	dc0a      	bgt.n	800af74 <__kernel_rem_pio2+0x3bc>
 800af5e:	2a00      	cmp	r2, #0
 800af60:	dc2d      	bgt.n	800afbe <__kernel_rem_pio2+0x406>
 800af62:	d046      	beq.n	800aff2 <__kernel_rem_pio2+0x43a>
 800af64:	f008 0007 	and.w	r0, r8, #7
 800af68:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800af6c:	ecbd 8b06 	vpop	{d8-d10}
 800af70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af74:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800af76:	2a03      	cmp	r2, #3
 800af78:	d1f4      	bne.n	800af64 <__kernel_rem_pio2+0x3ac>
 800af7a:	a942      	add	r1, sp, #264	@ 0x108
 800af7c:	f1a3 0208 	sub.w	r2, r3, #8
 800af80:	440a      	add	r2, r1
 800af82:	4611      	mov	r1, r2
 800af84:	4620      	mov	r0, r4
 800af86:	2800      	cmp	r0, #0
 800af88:	f1a1 0108 	sub.w	r1, r1, #8
 800af8c:	dc52      	bgt.n	800b034 <__kernel_rem_pio2+0x47c>
 800af8e:	4621      	mov	r1, r4
 800af90:	2901      	cmp	r1, #1
 800af92:	f1a2 0208 	sub.w	r2, r2, #8
 800af96:	dc5d      	bgt.n	800b054 <__kernel_rem_pio2+0x49c>
 800af98:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800b0a8 <__kernel_rem_pio2+0x4f0>
 800af9c:	aa42      	add	r2, sp, #264	@ 0x108
 800af9e:	4413      	add	r3, r2
 800afa0:	2c01      	cmp	r4, #1
 800afa2:	dc67      	bgt.n	800b074 <__kernel_rem_pio2+0x4bc>
 800afa4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800afa8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800afac:	2e00      	cmp	r6, #0
 800afae:	d167      	bne.n	800b080 <__kernel_rem_pio2+0x4c8>
 800afb0:	ed87 5b00 	vstr	d5, [r7]
 800afb4:	ed87 6b02 	vstr	d6, [r7, #8]
 800afb8:	ed87 7b04 	vstr	d7, [r7, #16]
 800afbc:	e7d2      	b.n	800af64 <__kernel_rem_pio2+0x3ac>
 800afbe:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800b0a8 <__kernel_rem_pio2+0x4f0>
 800afc2:	aa42      	add	r2, sp, #264	@ 0x108
 800afc4:	4413      	add	r3, r2
 800afc6:	4622      	mov	r2, r4
 800afc8:	2a00      	cmp	r2, #0
 800afca:	da24      	bge.n	800b016 <__kernel_rem_pio2+0x45e>
 800afcc:	b34e      	cbz	r6, 800b022 <__kernel_rem_pio2+0x46a>
 800afce:	eeb1 7b46 	vneg.f64	d7, d6
 800afd2:	ed87 7b00 	vstr	d7, [r7]
 800afd6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800afda:	aa44      	add	r2, sp, #272	@ 0x110
 800afdc:	2301      	movs	r3, #1
 800afde:	ee37 7b46 	vsub.f64	d7, d7, d6
 800afe2:	429c      	cmp	r4, r3
 800afe4:	da20      	bge.n	800b028 <__kernel_rem_pio2+0x470>
 800afe6:	b10e      	cbz	r6, 800afec <__kernel_rem_pio2+0x434>
 800afe8:	eeb1 7b47 	vneg.f64	d7, d7
 800afec:	ed87 7b02 	vstr	d7, [r7, #8]
 800aff0:	e7b8      	b.n	800af64 <__kernel_rem_pio2+0x3ac>
 800aff2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800b0a8 <__kernel_rem_pio2+0x4f0>
 800aff6:	aa42      	add	r2, sp, #264	@ 0x108
 800aff8:	4413      	add	r3, r2
 800affa:	2c00      	cmp	r4, #0
 800affc:	da05      	bge.n	800b00a <__kernel_rem_pio2+0x452>
 800affe:	b10e      	cbz	r6, 800b004 <__kernel_rem_pio2+0x44c>
 800b000:	eeb1 7b47 	vneg.f64	d7, d7
 800b004:	ed87 7b00 	vstr	d7, [r7]
 800b008:	e7ac      	b.n	800af64 <__kernel_rem_pio2+0x3ac>
 800b00a:	ed33 6b02 	vldmdb	r3!, {d6}
 800b00e:	3c01      	subs	r4, #1
 800b010:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b014:	e7f1      	b.n	800affa <__kernel_rem_pio2+0x442>
 800b016:	ed33 7b02 	vldmdb	r3!, {d7}
 800b01a:	3a01      	subs	r2, #1
 800b01c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b020:	e7d2      	b.n	800afc8 <__kernel_rem_pio2+0x410>
 800b022:	eeb0 7b46 	vmov.f64	d7, d6
 800b026:	e7d4      	b.n	800afd2 <__kernel_rem_pio2+0x41a>
 800b028:	ecb2 6b02 	vldmia	r2!, {d6}
 800b02c:	3301      	adds	r3, #1
 800b02e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b032:	e7d6      	b.n	800afe2 <__kernel_rem_pio2+0x42a>
 800b034:	ed91 7b00 	vldr	d7, [r1]
 800b038:	ed91 5b02 	vldr	d5, [r1, #8]
 800b03c:	3801      	subs	r0, #1
 800b03e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b042:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b046:	ed81 6b00 	vstr	d6, [r1]
 800b04a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b04e:	ed81 7b02 	vstr	d7, [r1, #8]
 800b052:	e798      	b.n	800af86 <__kernel_rem_pio2+0x3ce>
 800b054:	ed92 7b00 	vldr	d7, [r2]
 800b058:	ed92 5b02 	vldr	d5, [r2, #8]
 800b05c:	3901      	subs	r1, #1
 800b05e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b062:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b066:	ed82 6b00 	vstr	d6, [r2]
 800b06a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b06e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b072:	e78d      	b.n	800af90 <__kernel_rem_pio2+0x3d8>
 800b074:	ed33 6b02 	vldmdb	r3!, {d6}
 800b078:	3c01      	subs	r4, #1
 800b07a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b07e:	e78f      	b.n	800afa0 <__kernel_rem_pio2+0x3e8>
 800b080:	eeb1 5b45 	vneg.f64	d5, d5
 800b084:	eeb1 6b46 	vneg.f64	d6, d6
 800b088:	ed87 5b00 	vstr	d5, [r7]
 800b08c:	eeb1 7b47 	vneg.f64	d7, d7
 800b090:	ed87 6b02 	vstr	d6, [r7, #8]
 800b094:	e790      	b.n	800afb8 <__kernel_rem_pio2+0x400>
 800b096:	bf00      	nop
 800b098:	00000000 	.word	0x00000000
 800b09c:	41700000 	.word	0x41700000
 800b0a0:	00000000 	.word	0x00000000
 800b0a4:	3e700000 	.word	0x3e700000
	...

0800b0b0 <scalbn>:
 800b0b0:	ee10 1a90 	vmov	r1, s1
 800b0b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0b8:	b98b      	cbnz	r3, 800b0de <scalbn+0x2e>
 800b0ba:	ee10 3a10 	vmov	r3, s0
 800b0be:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b0c2:	4319      	orrs	r1, r3
 800b0c4:	d00a      	beq.n	800b0dc <scalbn+0x2c>
 800b0c6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b178 <scalbn+0xc8>
 800b0ca:	4b37      	ldr	r3, [pc, #220]	@ (800b1a8 <scalbn+0xf8>)
 800b0cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b0d0:	4298      	cmp	r0, r3
 800b0d2:	da0b      	bge.n	800b0ec <scalbn+0x3c>
 800b0d4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b180 <scalbn+0xd0>
 800b0d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b0dc:	4770      	bx	lr
 800b0de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d107      	bne.n	800b0f6 <scalbn+0x46>
 800b0e6:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b0ea:	4770      	bx	lr
 800b0ec:	ee10 1a90 	vmov	r1, s1
 800b0f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0f4:	3b36      	subs	r3, #54	@ 0x36
 800b0f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b0fa:	4290      	cmp	r0, r2
 800b0fc:	dd0d      	ble.n	800b11a <scalbn+0x6a>
 800b0fe:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b188 <scalbn+0xd8>
 800b102:	ee10 3a90 	vmov	r3, s1
 800b106:	eeb0 6b47 	vmov.f64	d6, d7
 800b10a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800b190 <scalbn+0xe0>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b114:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b118:	4770      	bx	lr
 800b11a:	4418      	add	r0, r3
 800b11c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800b120:	4298      	cmp	r0, r3
 800b122:	dcec      	bgt.n	800b0fe <scalbn+0x4e>
 800b124:	2800      	cmp	r0, #0
 800b126:	dd0a      	ble.n	800b13e <scalbn+0x8e>
 800b128:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b12c:	ec53 2b10 	vmov	r2, r3, d0
 800b130:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b134:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b138:	ec43 2b10 	vmov	d0, r2, r3
 800b13c:	4770      	bx	lr
 800b13e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800b142:	da09      	bge.n	800b158 <scalbn+0xa8>
 800b144:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800b180 <scalbn+0xd0>
 800b148:	ee10 3a90 	vmov	r3, s1
 800b14c:	eeb0 6b47 	vmov.f64	d6, d7
 800b150:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800b198 <scalbn+0xe8>
 800b154:	2b00      	cmp	r3, #0
 800b156:	e7db      	b.n	800b110 <scalbn+0x60>
 800b158:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b15c:	ec53 2b10 	vmov	r2, r3, d0
 800b160:	3036      	adds	r0, #54	@ 0x36
 800b162:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b166:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b16a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800b1a0 <scalbn+0xf0>
 800b16e:	ec43 2b10 	vmov	d0, r2, r3
 800b172:	e7b1      	b.n	800b0d8 <scalbn+0x28>
 800b174:	f3af 8000 	nop.w
 800b178:	00000000 	.word	0x00000000
 800b17c:	43500000 	.word	0x43500000
 800b180:	c2f8f359 	.word	0xc2f8f359
 800b184:	01a56e1f 	.word	0x01a56e1f
 800b188:	8800759c 	.word	0x8800759c
 800b18c:	7e37e43c 	.word	0x7e37e43c
 800b190:	8800759c 	.word	0x8800759c
 800b194:	fe37e43c 	.word	0xfe37e43c
 800b198:	c2f8f359 	.word	0xc2f8f359
 800b19c:	81a56e1f 	.word	0x81a56e1f
 800b1a0:	00000000 	.word	0x00000000
 800b1a4:	3c900000 	.word	0x3c900000
 800b1a8:	ffff3cb0 	.word	0xffff3cb0
 800b1ac:	00000000 	.word	0x00000000

0800b1b0 <floor>:
 800b1b0:	ee10 3a90 	vmov	r3, s1
 800b1b4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800b1b8:	ee10 2a10 	vmov	r2, s0
 800b1bc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b1c0:	2913      	cmp	r1, #19
 800b1c2:	b530      	push	{r4, r5, lr}
 800b1c4:	4615      	mov	r5, r2
 800b1c6:	dc33      	bgt.n	800b230 <floor+0x80>
 800b1c8:	2900      	cmp	r1, #0
 800b1ca:	da18      	bge.n	800b1fe <floor+0x4e>
 800b1cc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800b290 <floor+0xe0>
 800b1d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b1d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1dc:	dd0a      	ble.n	800b1f4 <floor+0x44>
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	da50      	bge.n	800b284 <floor+0xd4>
 800b1e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	4b2a      	ldr	r3, [pc, #168]	@ (800b298 <floor+0xe8>)
 800b1ee:	bf08      	it	eq
 800b1f0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	ec41 0b10 	vmov	d0, r0, r1
 800b1fc:	e01f      	b.n	800b23e <floor+0x8e>
 800b1fe:	4827      	ldr	r0, [pc, #156]	@ (800b29c <floor+0xec>)
 800b200:	4108      	asrs	r0, r1
 800b202:	ea03 0400 	and.w	r4, r3, r0
 800b206:	4314      	orrs	r4, r2
 800b208:	d019      	beq.n	800b23e <floor+0x8e>
 800b20a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b290 <floor+0xe0>
 800b20e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b212:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21a:	ddeb      	ble.n	800b1f4 <floor+0x44>
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	bfbe      	ittt	lt
 800b220:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800b224:	410a      	asrlt	r2, r1
 800b226:	189b      	addlt	r3, r3, r2
 800b228:	ea23 0300 	bic.w	r3, r3, r0
 800b22c:	2200      	movs	r2, #0
 800b22e:	e7e1      	b.n	800b1f4 <floor+0x44>
 800b230:	2933      	cmp	r1, #51	@ 0x33
 800b232:	dd05      	ble.n	800b240 <floor+0x90>
 800b234:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b238:	d101      	bne.n	800b23e <floor+0x8e>
 800b23a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b23e:	bd30      	pop	{r4, r5, pc}
 800b240:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	40e0      	lsrs	r0, r4
 800b24a:	4210      	tst	r0, r2
 800b24c:	d0f7      	beq.n	800b23e <floor+0x8e>
 800b24e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b290 <floor+0xe0>
 800b252:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b256:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25e:	ddc9      	ble.n	800b1f4 <floor+0x44>
 800b260:	2b00      	cmp	r3, #0
 800b262:	da02      	bge.n	800b26a <floor+0xba>
 800b264:	2914      	cmp	r1, #20
 800b266:	d103      	bne.n	800b270 <floor+0xc0>
 800b268:	3301      	adds	r3, #1
 800b26a:	ea22 0200 	bic.w	r2, r2, r0
 800b26e:	e7c1      	b.n	800b1f4 <floor+0x44>
 800b270:	2401      	movs	r4, #1
 800b272:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800b276:	fa04 f101 	lsl.w	r1, r4, r1
 800b27a:	440a      	add	r2, r1
 800b27c:	42aa      	cmp	r2, r5
 800b27e:	bf38      	it	cc
 800b280:	191b      	addcc	r3, r3, r4
 800b282:	e7f2      	b.n	800b26a <floor+0xba>
 800b284:	2200      	movs	r2, #0
 800b286:	4613      	mov	r3, r2
 800b288:	e7b4      	b.n	800b1f4 <floor+0x44>
 800b28a:	bf00      	nop
 800b28c:	f3af 8000 	nop.w
 800b290:	8800759c 	.word	0x8800759c
 800b294:	7e37e43c 	.word	0x7e37e43c
 800b298:	bff00000 	.word	0xbff00000
 800b29c:	000fffff 	.word	0x000fffff

0800b2a0 <_init>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	bf00      	nop
 800b2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2a6:	bc08      	pop	{r3}
 800b2a8:	469e      	mov	lr, r3
 800b2aa:	4770      	bx	lr

0800b2ac <_fini>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	bf00      	nop
 800b2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b2:	bc08      	pop	{r3}
 800b2b4:	469e      	mov	lr, r3
 800b2b6:	4770      	bx	lr
