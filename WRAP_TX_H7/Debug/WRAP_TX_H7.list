
WRAP_TX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b028  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0800b2d8  0800b2d8  0000c2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bcf8  0800bcf8  0000ccf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bd00  0800bd00  0000cd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bd04  0800bd04  0000cd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000d7b0  24000000  0800bd08  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001abdc  2400d7b0  080194b8  0001a7b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2402838c  080194b8  0001b38c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a7b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001902f  00000000  00000000  0001a7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f90  00000000  00000000  0003380d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001358  00000000  00000000  000367a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eff  00000000  00000000  00037af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000318df  00000000  00000000  000389f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b1f7  00000000  00000000  0006a2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143c5f  00000000  00000000  000854cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001c912c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005384  00000000  00000000  001c91e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001ce568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00001363  00000000  00000000  001ce5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000010  00000000  00000000  001cf93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400d7b0 	.word	0x2400d7b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b2c0 	.word	0x0800b2c0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400d7b4 	.word	0x2400d7b4
 80002ec:	0800b2c0 	.word	0x0800b2c0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <recalculate_output>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void recalculate_output(uint8_t * message, uint16_t len) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]

	// Reset symbol buffer from last time
	for(int i = 0; i < NUM_SYMBS; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
 80005f0:	e007      	b.n	8000602 <recalculate_output+0x22>
		symbol_buffer[i] = 0;
 80005f2:	4a6d      	ldr	r2, [pc, #436]	@ (80007a8 <recalculate_output+0x1c8>)
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	2100      	movs	r1, #0
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_SYMBS; i++) {
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	3301      	adds	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b84      	cmp	r3, #132	@ 0x84
 8000606:	ddf4      	ble.n	80005f2 <recalculate_output+0x12>
	}

	// Copy received message into temp so we don't change the original (for debugging)
	for (size_t i = 0; i < sizeof(rx_msg); ++i) {
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	e00b      	b.n	8000626 <recalculate_output+0x46>
		temp_msg[i] = message[i];
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	4413      	add	r3, r2
 8000614:	7819      	ldrb	r1, [r3, #0]
 8000616:	4a65      	ldr	r2, [pc, #404]	@ (80007ac <recalculate_output+0x1cc>)
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	4413      	add	r3, r2
 800061c:	460a      	mov	r2, r1
 800061e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < sizeof(rx_msg); ++i) {
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	3301      	adds	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	2b0e      	cmp	r3, #14
 800062a:	d9f0      	bls.n	800060e <recalculate_output+0x2e>
	}

	// put the packet header in the symbol buffer
	memcpy(symbol_buffer, packet_header, 4*PACKET_HEADER_LEN);
 800062c:	4a5e      	ldr	r2, [pc, #376]	@ (80007a8 <recalculate_output+0x1c8>)
 800062e:	4b60      	ldr	r3, [pc, #384]	@ (80007b0 <recalculate_output+0x1d0>)
 8000630:	4614      	mov	r4, r2
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	682b      	ldr	r3, [r5, #0]
 8000642:	6023      	str	r3, [r4, #0]

	// put the message in the symbol buffer
	for(int i = 0; i < len; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e027      	b.n	800069a <recalculate_output+0xba>
		for(int j = 0; j < 8; j++) {
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	e01e      	b.n	800068e <recalculate_output+0xae>
			symbol_buffer[PACKET_HEADER_LEN + 8*i + 8 - 1 - j] = 2 * (int)(temp_msg[i] & 0x01) - 1;
 8000650:	4a56      	ldr	r2, [pc, #344]	@ (80007ac <recalculate_output+0x1cc>)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	005a      	lsls	r2, r3, #1
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	f103 0114 	add.w	r1, r3, #20
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	1acb      	subs	r3, r1, r3
 800066a:	3a01      	subs	r2, #1
 800066c:	494e      	ldr	r1, [pc, #312]	@ (80007a8 <recalculate_output+0x1c8>)
 800066e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			temp_msg[i] = temp_msg[i] >> 1;
 8000672:	4a4e      	ldr	r2, [pc, #312]	@ (80007ac <recalculate_output+0x1cc>)
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	085b      	lsrs	r3, r3, #1
 800067c:	b2d9      	uxtb	r1, r3
 800067e:	4a4b      	ldr	r2, [pc, #300]	@ (80007ac <recalculate_output+0x1cc>)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	4413      	add	r3, r2
 8000684:	460a      	mov	r2, r1
 8000686:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	3301      	adds	r3, #1
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	2b07      	cmp	r3, #7
 8000692:	dddd      	ble.n	8000650 <recalculate_output+0x70>
	for(int i = 0; i < len; i++) {
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	887b      	ldrh	r3, [r7, #2]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbd3      	blt.n	800064a <recalculate_output+0x6a>
		}
	}

    // upsample symbols
    for (int i = 0; i < DAC_BUF_LEN; i++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	e02b      	b.n	8000700 <recalculate_output+0x120>
	    if (i % SPS == 0) {
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	4b42      	ldr	r3, [pc, #264]	@ (80007b4 <recalculate_output+0x1d4>)
 80006ac:	fb83 1302 	smull	r1, r3, r3, r2
 80006b0:	1159      	asrs	r1, r3, #5
 80006b2:	17d3      	asrs	r3, r2, #31
 80006b4:	1acb      	subs	r3, r1, r3
 80006b6:	2164      	movs	r1, #100	@ 0x64
 80006b8:	fb01 f303 	mul.w	r3, r1, r3
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d114      	bne.n	80006ec <recalculate_output+0x10c>
		    buf1[i] = (symbol_buffer[i / SPS]);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4a3b      	ldr	r2, [pc, #236]	@ (80007b4 <recalculate_output+0x1d4>)
 80006c6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ca:	1152      	asrs	r2, r2, #5
 80006cc:	17db      	asrs	r3, r3, #31
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	4a35      	ldr	r2, [pc, #212]	@ (80007a8 <recalculate_output+0x1c8>)
 80006d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d6:	ee07 3a90 	vmov	s15, r3
 80006da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006de:	4a36      	ldr	r2, [pc, #216]	@ (80007b8 <recalculate_output+0x1d8>)
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	edc3 7a00 	vstr	s15, [r3]
 80006ea:	e006      	b.n	80006fa <recalculate_output+0x11a>
	    }
	    else {
		    buf1[i] = 0;
 80006ec:	4a32      	ldr	r2, [pc, #200]	@ (80007b8 <recalculate_output+0x1d8>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < DAC_BUF_LEN; i++) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f243 32f3 	movw	r2, #13299	@ 0x33f3
 8000706:	4293      	cmp	r3, r2
 8000708:	ddce      	ble.n	80006a8 <recalculate_output+0xc8>
	    }
    }

    // filter
    arm_conv_f32(buf1, DAC_BUF_LEN, RRC, RRC_LEN, buf2);
 800070a:	4b2c      	ldr	r3, [pc, #176]	@ (80007bc <recalculate_output+0x1dc>)
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8000712:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <recalculate_output+0x1e0>)
 8000714:	f243 31f4 	movw	r1, #13300	@ 0x33f4
 8000718:	4827      	ldr	r0, [pc, #156]	@ (80007b8 <recalculate_output+0x1d8>)
 800071a:	f009 fd3f 	bl	800a19c <arm_conv_f32>

    // modulate
	for (int i = 0; i < DAC_BUF_LEN + RRC_LEN - 1; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	e02b      	b.n	800077c <recalculate_output+0x19c>
		dac_buf[i] = 0x800 + 5.5 * 0x7FF*cos(2 * M_PI * FC / FS * i) *  buf2[i];
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800072e:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000790 <recalculate_output+0x1b0>
 8000732:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000736:	eeb0 0b47 	vmov.f64	d0, d7
 800073a:	f009 fff5 	bl	800a728 <cos>
 800073e:	eeb0 7b40 	vmov.f64	d7, d0
 8000742:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8000798 <recalculate_output+0x1b8>
 8000746:	ee27 6b06 	vmul.f64	d6, d7, d6
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <recalculate_output+0x1dc>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	edd3 7a00 	vldr	s15, [r3]
 8000756:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800075a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800075e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80007a0 <recalculate_output+0x1c0>
 8000762:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000766:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800076a:	ee17 1a90 	vmov	r1, s15
 800076e:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <recalculate_output+0x1e4>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < DAC_BUF_LEN + RRC_LEN - 1; i++) {
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	3301      	adds	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	f243 52e7 	movw	r2, #13799	@ 0x35e7
 8000782:	4293      	cmp	r3, r2
 8000784:	ddce      	ble.n	8000724 <recalculate_output+0x144>
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bdb0      	pop	{r4, r5, r7, pc}
 8000790:	769cf0e0 	.word	0x769cf0e0
 8000794:	3ff41b2f 	.word	0x3ff41b2f
 8000798:	00000000 	.word	0x00000000
 800079c:	40c5fd40 	.word	0x40c5fd40
 80007a0:	00000000 	.word	0x00000000
 80007a4:	40a00000 	.word	0x40a00000
 80007a8:	2400d9e4 	.word	0x2400d9e4
 80007ac:	24028378 	.word	0x24028378
 80007b0:	0800baac 	.word	0x0800baac
 80007b4:	51eb851f 	.word	0x51eb851f
 80007b8:	2400dbf8 	.word	0x2400dbf8
 80007bc:	2401abc8 	.word	0x2401abc8
 80007c0:	0800b2d8 	.word	0x0800b2d8
 80007c4:	24000000 	.word	0x24000000

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fcf1 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f833 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 f9f1 	bl	8000bbc <MX_GPIO_Init>
  MX_DMA_Init();
 80007da:	f000 f9c7 	bl	8000b6c <MX_DMA_Init>
  MX_TIM6_Init();
 80007de:	f000 f943 	bl	8000a68 <MX_TIM6_Init>
  MX_DAC1_Init();
 80007e2:	f000 f8ef 	bl	80009c4 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 80007e6:	f000 f91f 	bl	8000a28 <MX_OPAMP1_Init>
  MX_USART3_UART_Init();
 80007ea:	f000 f973 	bl	8000ad4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <main+0x5c>)
 80007f0:	f004 fb06 	bl	8004e00 <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim6);
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <main+0x60>)
 80007f6:	f007 fa55 	bl	8007ca4 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80007fa:	2100      	movs	r1, #0
 80007fc:	480b      	ldr	r0, [pc, #44]	@ (800082c <main+0x64>)
 80007fe:	f000 fea8 	bl	8001552 <HAL_DAC_Start>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg));
 8000802:	220f      	movs	r2, #15
 8000804:	490a      	ldr	r1, [pc, #40]	@ (8000830 <main+0x68>)
 8000806:	480b      	ldr	r0, [pc, #44]	@ (8000834 <main+0x6c>)
 8000808:	f007 fcce 	bl	80081a8 <HAL_UART_Receive_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buf, DAC_BUF_LEN + RRC_LEN - 1, DAC_ALIGN_12B_R);
 800080c:	2300      	movs	r3, #0
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	f243 53e8 	movw	r3, #13800	@ 0x35e8
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <main+0x70>)
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <main+0x64>)
 800081a:	f000 fef1 	bl	8001600 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081e:	bf00      	nop
 8000820:	e7fd      	b.n	800081e <main+0x56>
 8000822:	bf00      	nop
 8000824:	2400d858 	.word	0x2400d858
 8000828:	2400d88c 	.word	0x2400d88c
 800082c:	2400d7cc 	.word	0x2400d7cc
 8000830:	24028368 	.word	0x24028368
 8000834:	2400d8d8 	.word	0x2400d8d8
 8000838:	24000000 	.word	0x24000000

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b0a4      	sub	sp, #144	@ 0x90
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000846:	224c      	movs	r2, #76	@ 0x4c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f009 ff40 	bl	800a6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000854:	2220      	movs	r2, #32
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f009 ff39 	bl	800a6d0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000870:	4b52      	ldr	r3, [pc, #328]	@ (80009bc <SystemClock_Config+0x180>)
 8000872:	f04f 32ff 	mov.w	r2, #4294967295
 8000876:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800087a:	2004      	movs	r0, #4
 800087c:	f004 fb02 	bl	8004e84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b4e      	ldr	r3, [pc, #312]	@ (80009c0 <SystemClock_Config+0x184>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a4d      	ldr	r2, [pc, #308]	@ (80009c0 <SystemClock_Config+0x184>)
 800088a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b4b      	ldr	r3, [pc, #300]	@ (80009c0 <SystemClock_Config+0x184>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089c:	bf00      	nop
 800089e:	4b48      	ldr	r3, [pc, #288]	@ (80009c0 <SystemClock_Config+0x184>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008aa:	d1f8      	bne.n	800089e <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008ac:	f004 fada 	bl	8004e64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008b0:	4b42      	ldr	r3, [pc, #264]	@ (80009bc <SystemClock_Config+0x180>)
 80008b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80008b4:	4a41      	ldr	r2, [pc, #260]	@ (80009bc <SystemClock_Config+0x180>)
 80008b6:	f023 0318 	bic.w	r3, r3, #24
 80008ba:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80008bc:	232f      	movs	r3, #47	@ 0x2f
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008ce:	2340      	movs	r3, #64	@ 0x40
 80008d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d2:	2301      	movs	r3, #1
 80008d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	2302      	movs	r3, #2
 80008e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80008e6:	2346      	movs	r3, #70	@ 0x46
 80008e8:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ee:	2304      	movs	r3, #4
 80008f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008f8:	230c      	movs	r3, #12
 80008fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800090e:	4618      	mov	r0, r3
 8000910:	f004 fb12 	bl	8004f38 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800091a:	f000 f9d9 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	233f      	movs	r3, #63	@ 0x3f
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000932:	2340      	movs	r3, #64	@ 0x40
 8000934:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093c:	2340      	movs	r3, #64	@ 0x40
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000944:	2106      	movs	r1, #6
 8000946:	4618      	mov	r0, r3
 8000948:	f004 ff28 	bl	800579c <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8000952:	f000 f9bd 	bl	8000cd0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000956:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800095a:	2100      	movs	r1, #0
 800095c:	2000      	movs	r0, #0
 800095e:	f005 f8d3 	bl	8005b08 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000962:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000966:	2100      	movs	r1, #0
 8000968:	2001      	movs	r0, #1
 800096a:	f005 f8cd 	bl	8005b08 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <SystemClock_Config+0x180>)
 8000970:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000974:	4a11      	ldr	r2, [pc, #68]	@ (80009bc <SystemClock_Config+0x180>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <SystemClock_Config+0x180>)
 8000980:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000990:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000994:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800099a:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800099e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80009a0:	2322      	movs	r3, #34	@ 0x22
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80009a4:	2320      	movs	r3, #32
 80009a6:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4618      	mov	r0, r3
 80009ae:	f006 ff67 	bl	8007880 <HAL_RCCEx_CRSConfig>
}
 80009b2:	bf00      	nop
 80009b4:	3790      	adds	r7, #144	@ 0x90
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	58024400 	.word	0x58024400
 80009c0:	58024800 	.word	0x58024800

080009c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2224      	movs	r2, #36	@ 0x24
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f009 fe7d 	bl	800a6d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_DAC1_Init+0x5c>)
 80009d8:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <MX_DAC1_Init+0x60>)
 80009da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009dc:	4810      	ldr	r0, [pc, #64]	@ (8000a20 <MX_DAC1_Init+0x5c>)
 80009de:	f000 fd96 	bl	800150e <HAL_DAC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009e8:	f000 f972 	bl	8000cd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80009f0:	2316      	movs	r3, #22
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80009f4:	2302      	movs	r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80009f8:	2302      	movs	r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <MX_DAC1_Init+0x5c>)
 8000a08:	f000 fed8 	bl	80017bc <HAL_DAC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f95d 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	@ 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2400d7cc 	.word	0x2400d7cc
 8000a24:	40007400 	.word	0x40007400

08000a28 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_OPAMP1_Init+0x38>)
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <MX_OPAMP1_Init+0x3c>)
 8000a30:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MX_OPAMP1_Init+0x38>)
 8000a34:	2260      	movs	r2, #96	@ 0x60
 8000a36:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC_CH;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_OPAMP1_Init+0x38>)
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <MX_OPAMP1_Init+0x38>)
 8000a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a44:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_OPAMP1_Init+0x38>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <MX_OPAMP1_Init+0x38>)
 8000a4e:	f004 f90f 	bl	8004c70 <HAL_OPAMP_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_OPAMP1_Init+0x34>
  {
    Error_Handler();
 8000a58:	f000 f93a 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2400d858 	.word	0x2400d858
 8000a64:	40009000 	.word	0x40009000

08000a68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_TIM6_Init+0x64>)
 8000a7a:	4a15      	ldr	r2, [pc, #84]	@ (8000ad0 <MX_TIM6_Init+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_TIM6_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_TIM6_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_TIM6_Init+0x64>)
 8000a8c:	2237      	movs	r2, #55	@ 0x37
 8000a8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_TIM6_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a96:	480d      	ldr	r0, [pc, #52]	@ (8000acc <MX_TIM6_Init+0x64>)
 8000a98:	f007 f8ac 	bl	8007bf4 <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000aa2:	f000 f915 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	@ (8000acc <MX_TIM6_Init+0x64>)
 8000ab4:	f007 fa0c 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000abe:	f000 f907 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2400d88c 	.word	0x2400d88c
 8000ad0:	40001000 	.word	0x40001000

08000ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ada:	4a23      	ldr	r2, [pc, #140]	@ (8000b68 <MX_USART3_UART_Init+0x94>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ade:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1c:	4811      	ldr	r0, [pc, #68]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b1e:	f007 fa65 	bl	8007fec <HAL_UART_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b28:	f000 f8d2 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b30:	f009 fa69 	bl	800a006 <HAL_UARTEx_SetTxFifoThreshold>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3a:	f000 f8c9 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b42:	f009 fa9e 	bl	800a082 <HAL_UARTEx_SetRxFifoThreshold>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b4c:	f000 f8c0 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b52:	f009 fa1f 	bl	8009f94 <HAL_UARTEx_DisableFifoMode>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f8b8 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2400d8d8 	.word	0x2400d8d8
 8000b68:	40004800 	.word	0x40004800

08000b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_DMA_Init+0x4c>)
 8000b74:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b78:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <MX_DMA_Init+0x4c>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <MX_DMA_Init+0x4c>)
 8000b84:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	200b      	movs	r0, #11
 8000b96:	f000 fc86 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b9a:	200b      	movs	r0, #11
 8000b9c:	f000 fc9d 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	200c      	movs	r0, #12
 8000ba6:	f000 fc7e 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000baa:	200c      	movs	r0, #12
 8000bac:	f000 fc95 	bl	80014da <HAL_NVIC_EnableIRQ>

}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	58024400 	.word	0x58024400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf0:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bf6:	4a28      	ldr	r2, [pc, #160]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bfc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000c10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c14:	4a20      	ldr	r2, [pc, #128]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000c20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c24:	f003 0308 	and.w	r3, r3, #8
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000c2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c32:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_GPIO_Init+0xdc>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <MX_GPIO_Init+0xe0>)
 8000c68:	f003 fe52 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_GPIO_Init+0xe4>)
 8000c8a:	f003 fe41 	bl	8004910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	@ 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020800 	.word	0x58020800
 8000ca0:	58020000 	.word	0x58020000

08000ca4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	// TODO: Call a function to generate the waveform corresponding to the new message!
	HAL_UART_Transmit(&huart3, (uint8_t *)rx_msg, NUM_CHARS, 1);
 8000cac:	2301      	movs	r3, #1
 8000cae:	220f      	movs	r2, #15
 8000cb0:	4905      	ldr	r1, [pc, #20]	@ (8000cc8 <HAL_UART_RxCpltCallback+0x24>)
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <HAL_UART_RxCpltCallback+0x28>)
 8000cb4:	f007 f9ea 	bl	800808c <HAL_UART_Transmit>
	recalculate_output((uint8_t *) rx_msg, NUM_CHARS);
 8000cb8:	210f      	movs	r1, #15
 8000cba:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <HAL_UART_RxCpltCallback+0x24>)
 8000cbc:	f7ff fc90 	bl	80005e0 <recalculate_output>

}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24028368 	.word	0x24028368
 8000ccc:	2400d8d8 	.word	0x2400d8d8

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <Error_Handler+0x8>

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_MspInit+0x30>)
 8000ce4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ce8:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <HAL_MspInit+0x30>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_MspInit+0x30>)
 8000cf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	58024400 	.word	0x58024400

08000d10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a23      	ldr	r2, [pc, #140]	@ (8000dac <HAL_DAC_MspInit+0x9c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d13f      	bne.n	8000da2 <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000d22:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <HAL_DAC_MspInit+0xa0>)
 8000d24:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d28:	4a21      	ldr	r2, [pc, #132]	@ (8000db0 <HAL_DAC_MspInit+0xa0>)
 8000d2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d2e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d32:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <HAL_DAC_MspInit+0xa0>)
 8000d34:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d42:	4a1d      	ldr	r2, [pc, #116]	@ (8000db8 <HAL_DAC_MspInit+0xa8>)
 8000d44:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d48:	2243      	movs	r2, #67	@ 0x43
 8000d4a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d4e:	2240      	movs	r2, #64	@ 0x40
 8000d50:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d5e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d66:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d6e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d76:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d7e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000d86:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d88:	f000 fee4 	bl	8001b54 <HAL_DMA_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_DAC_MspInit+0x86>
    {
      Error_Handler();
 8000d92:	f7ff ff9d 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <HAL_DAC_MspInit+0xa4>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40007400 	.word	0x40007400
 8000db0:	58024400 	.word	0x58024400
 8000db4:	2400d7e0 	.word	0x2400d7e0
 8000db8:	40020010 	.word	0x40020010

08000dbc <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a18      	ldr	r2, [pc, #96]	@ (8000e3c <HAL_OPAMP_MspInit+0x80>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d129      	bne.n	8000e32 <HAL_OPAMP_MspInit+0x76>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_OPAMP_MspInit+0x84>)
 8000de0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000de4:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <HAL_OPAMP_MspInit+0x84>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_OPAMP_MspInit+0x84>)
 8000df0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HAL_OPAMP_MspInit+0x84>)
 8000dfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <HAL_OPAMP_MspInit+0x84>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <HAL_OPAMP_MspInit+0x84>)
 8000e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <HAL_OPAMP_MspInit+0x88>)
 8000e2e:	f003 fd6f 	bl	8004910 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	@ 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40009000 	.word	0x40009000
 8000e40:	58024400 	.word	0x58024400
 8000e44:	58020800 	.word	0x58020800

08000e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0b      	ldr	r2, [pc, #44]	@ (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10e      	bne.n	8000e78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e60:	4a09      	ldr	r2, [pc, #36]	@ (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40001000 	.word	0x40001000
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0ba      	sub	sp, #232	@ 0xe8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	22c0      	movs	r2, #192	@ 0xc0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f009 fc0f 	bl	800a6d0 <memset>
  if(huart->Instance==USART3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a42      	ldr	r2, [pc, #264]	@ (8000fc0 <HAL_UART_MspInit+0x134>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d17d      	bne.n	8000fb8 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ebc:	f04f 0202 	mov.w	r2, #2
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f005 f858 	bl	8005f88 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ede:	f7ff fef7 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <HAL_UART_MspInit+0x138>)
 8000ee4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ee8:	4a36      	ldr	r2, [pc, #216]	@ (8000fc4 <HAL_UART_MspInit+0x138>)
 8000eea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eee:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ef2:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <HAL_UART_MspInit+0x138>)
 8000ef4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ef8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <HAL_UART_MspInit+0x138>)
 8000f02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f06:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc4 <HAL_UART_MspInit+0x138>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f10:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <HAL_UART_MspInit+0x138>)
 8000f12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4820      	ldr	r0, [pc, #128]	@ (8000fc8 <HAL_UART_MspInit+0x13c>)
 8000f46:	f003 fce3 	bl	8004910 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <HAL_UART_MspInit+0x144>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f52:	222d      	movs	r2, #45	@ 0x2d
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f68:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f8a:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f8c:	f000 fde2 	bl	8001b54 <HAL_DMA_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f96:	f7ff fe9b 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000f9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_UART_MspInit+0x140>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2027      	movs	r0, #39	@ 0x27
 8000fae:	f000 fa7a 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fb2:	2027      	movs	r0, #39	@ 0x27
 8000fb4:	f000 fa91 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	37e8      	adds	r7, #232	@ 0xe8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40004800 	.word	0x40004800
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58020c00 	.word	0x58020c00
 8000fcc:	2400d96c 	.word	0x2400d96c
 8000fd0:	40020028 	.word	0x40020028

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <NMI_Handler+0x4>

08000fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102a:	f000 f935 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <DMA1_Stream0_IRQHandler+0x10>)
 800103a:	f002 f8e7 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2400d7e0 	.word	0x2400d7e0

08001048 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <DMA1_Stream1_IRQHandler+0x10>)
 800104e:	f002 f8dd 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2400d96c 	.word	0x2400d96c

0800105c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <USART3_IRQHandler+0x10>)
 8001062:	f007 f8ed 	bl	8008240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2400d8d8 	.word	0x2400d8d8

08001070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001074:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <SystemInit+0xd0>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107a:	4a31      	ldr	r2, [pc, #196]	@ (8001140 <SystemInit+0xd0>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001084:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <SystemInit+0xd4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	2b02      	cmp	r3, #2
 800108e:	d807      	bhi.n	80010a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <SystemInit+0xd4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 030f 	bic.w	r3, r3, #15
 8001098:	4a2a      	ldr	r2, [pc, #168]	@ (8001144 <SystemInit+0xd4>)
 800109a:	f043 0303 	orr.w	r3, r3, #3
 800109e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a0:	4b29      	ldr	r3, [pc, #164]	@ (8001148 <SystemInit+0xd8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a28      	ldr	r2, [pc, #160]	@ (8001148 <SystemInit+0xd8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010ac:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <SystemInit+0xd8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010b2:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <SystemInit+0xd8>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4924      	ldr	r1, [pc, #144]	@ (8001148 <SystemInit+0xd8>)
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <SystemInit+0xdc>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010be:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <SystemInit+0xd4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <SystemInit+0xd4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 030f 	bic.w	r3, r3, #15
 80010d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <SystemInit+0xd4>)
 80010d4:	f043 0303 	orr.w	r3, r3, #3
 80010d8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <SystemInit+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010e0:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <SystemInit+0xd8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <SystemInit+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <SystemInit+0xd8>)
 80010ee:	4a18      	ldr	r2, [pc, #96]	@ (8001150 <SystemInit+0xe0>)
 80010f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <SystemInit+0xd8>)
 80010f4:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <SystemInit+0xe4>)
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <SystemInit+0xd8>)
 80010fa:	4a17      	ldr	r2, [pc, #92]	@ (8001158 <SystemInit+0xe8>)
 80010fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <SystemInit+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <SystemInit+0xd8>)
 8001106:	4a14      	ldr	r2, [pc, #80]	@ (8001158 <SystemInit+0xe8>)
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <SystemInit+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <SystemInit+0xd8>)
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <SystemInit+0xe8>)
 8001114:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <SystemInit+0xd8>)
 8001118:	2200      	movs	r2, #0
 800111a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <SystemInit+0xd8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <SystemInit+0xd8>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001126:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <SystemInit+0xd8>)
 800112a:	2200      	movs	r2, #0
 800112c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <SystemInit+0xec>)
 8001130:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001134:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	52002000 	.word	0x52002000
 8001148:	58024400 	.word	0x58024400
 800114c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001150:	02020200 	.word	0x02020200
 8001154:	01ff0000 	.word	0x01ff0000
 8001158:	01010280 	.word	0x01010280
 800115c:	52004000 	.word	0x52004000

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f7ff ff84 	bl	8001070 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800118e:	f009 faa7 	bl	800a6e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fb19 	bl	80007c8 <main>
  bx  lr
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800119c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011a0:	2400d7b0 	.word	0x2400d7b0
  ldr r2, =_sidata
 80011a4:	0800bd08 	.word	0x0800bd08
  ldr r2, =_sbss
 80011a8:	2400d7b0 	.word	0x2400d7b0
  ldr r4, =_ebss
 80011ac:	2402838c 	.word	0x2402838c

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f968 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80011c0:	f004 fd0c 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_Init+0x68>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	4913      	ldr	r1, [pc, #76]	@ (8001220 <HAL_Init+0x6c>)
 80011d2:	5ccb      	ldrb	r3, [r1, r3]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_Init+0x68>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <HAL_Init+0x6c>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_Init+0x70>)
 80011f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001228 <HAL_Init+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f814 	bl	800122c <HAL_InitTick>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e002      	b.n	8001214 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800120e:	f7ff fd65 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400
 8001220:	0800bae0 	.word	0x0800bae0
 8001224:	2400d7a4 	.word	0x2400d7a4
 8001228:	2400d7a0 	.word	0x2400d7a0

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e021      	b.n	8001284 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HAL_InitTick+0x64>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_InitTick+0x60>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f94d 	bl	80014f6 <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f917 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <HAL_InitTick+0x68>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2400d7ac 	.word	0x2400d7ac
 8001290:	2400d7a0 	.word	0x2400d7a0
 8001294:	2400d7a8 	.word	0x2400d7a8

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	2400d7ac 	.word	0x2400d7ac
 80012bc:	24028388 	.word	0x24028388

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	24028388 	.word	0x24028388

080012d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_GetREVID+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0c1b      	lsrs	r3, r3, #16
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	5c001000 	.word	0x5c001000

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <__NVIC_SetPriorityGrouping+0x40>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	4313      	orrs	r3, r2
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <__NVIC_SetPriorityGrouping+0x40>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	05fa0000 	.word	0x05fa0000

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	@ (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	@ (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff40 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff33 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa4 	bl	800144c <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e014      	b.n	800154a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	791b      	ldrb	r3, [r3, #4]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fbed 	bl	8000d10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2202      	movs	r2, #2
 800153a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e046      	b.n	80015f4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	795b      	ldrb	r3, [r3, #5]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_DAC_Start+0x20>
 800156e:	2302      	movs	r3, #2
 8001570:	e040      	b.n	80015f4 <HAL_DAC_Start+0xa2>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2201      	movs	r2, #1
 800158c:	409a      	lsls	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10f      	bne.n	80015bc <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d11d      	bne.n	80015e6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0201 	orr.w	r2, r2, #1
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	e014      	b.n	80015e6 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2102      	movs	r1, #2
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d107      	bne.n	80015e6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0202 	orr.w	r2, r2, #2
 80015e4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0a2      	b.n	800175e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	795b      	ldrb	r3, [r3, #5]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_DAC_Start_DMA+0x24>
 8001620:	2302      	movs	r3, #2
 8001622:	e09c      	b.n	800175e <HAL_DAC_Start_DMA+0x15e>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2201      	movs	r2, #1
 8001628:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2202      	movs	r2, #2
 800162e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d129      	bne.n	800168a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4a4b      	ldr	r2, [pc, #300]	@ (8001768 <HAL_DAC_Start_DMA+0x168>)
 800163c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	4a4a      	ldr	r2, [pc, #296]	@ (800176c <HAL_DAC_Start_DMA+0x16c>)
 8001644:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4a49      	ldr	r2, [pc, #292]	@ (8001770 <HAL_DAC_Start_DMA+0x170>)
 800164c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800165c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_DAC_Start_DMA+0x6c>
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	2b04      	cmp	r3, #4
 8001668:	d005      	beq.n	8001676 <HAL_DAC_Start_DMA+0x76>
 800166a:	e009      	b.n	8001680 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3308      	adds	r3, #8
 8001672:	613b      	str	r3, [r7, #16]
        break;
 8001674:	e033      	b.n	80016de <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	330c      	adds	r3, #12
 800167c:	613b      	str	r3, [r7, #16]
        break;
 800167e:	e02e      	b.n	80016de <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3310      	adds	r3, #16
 8001686:	613b      	str	r3, [r7, #16]
        break;
 8001688:	e029      	b.n	80016de <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4a39      	ldr	r2, [pc, #228]	@ (8001774 <HAL_DAC_Start_DMA+0x174>)
 8001690:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4a38      	ldr	r2, [pc, #224]	@ (8001778 <HAL_DAC_Start_DMA+0x178>)
 8001698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4a37      	ldr	r2, [pc, #220]	@ (800177c <HAL_DAC_Start_DMA+0x17c>)
 80016a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80016b0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_DAC_Start_DMA+0xc0>
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d005      	beq.n	80016ca <HAL_DAC_Start_DMA+0xca>
 80016be:	e009      	b.n	80016d4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3314      	adds	r3, #20
 80016c6:	613b      	str	r3, [r7, #16]
        break;
 80016c8:	e009      	b.n	80016de <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3318      	adds	r3, #24
 80016d0:	613b      	str	r3, [r7, #16]
        break;
 80016d2:	e004      	b.n	80016de <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	331c      	adds	r3, #28
 80016da:	613b      	str	r3, [r7, #16]
        break;
 80016dc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d111      	bne.n	8001708 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6898      	ldr	r0, [r3, #8]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	f000 fdb7 	bl	8002270 <HAL_DMA_Start_IT>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
 8001706:	e010      	b.n	800172a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001716:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68d8      	ldr	r0, [r3, #12]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	f000 fda5 	bl	8002270 <HAL_DMA_Start_IT>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2201      	movs	r2, #1
 8001744:	409a      	lsls	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e005      	b.n	800175c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f043 0204 	orr.w	r2, r3, #4
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800175c:	7dfb      	ldrb	r3, [r7, #23]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08001a41 	.word	0x08001a41
 800176c:	08001a63 	.word	0x08001a63
 8001770:	08001a7f 	.word	0x08001a7f
 8001774:	08001ae9 	.word	0x08001ae9
 8001778:	08001b0b 	.word	0x08001b0b
 800177c:	08001b27 	.word	0x08001b27

08001780 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_DAC_ConfigChannel+0x1e>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e12a      	b.n	8001a34 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	795b      	ldrb	r3, [r3, #5]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_DAC_ConfigChannel+0x2e>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e124      	b.n	8001a34 <HAL_DAC_ConfigChannel+0x278>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2202      	movs	r2, #2
 80017f4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d17a      	bne.n	80018f4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80017fe:	f7ff fd5f 	bl	80012c0 <HAL_GetTick>
 8001802:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d13d      	bne.n	8001886 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800180a:	e018      	b.n	800183e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800180c:	f7ff fd58 	bl	80012c0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d911      	bls.n	800183e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001820:	4b86      	ldr	r3, [pc, #536]	@ (8001a3c <HAL_DAC_ConfigChannel+0x280>)
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f043 0208 	orr.w	r2, r3, #8
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2203      	movs	r2, #3
 8001838:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0fa      	b.n	8001a34 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001844:	4b7d      	ldr	r3, [pc, #500]	@ (8001a3c <HAL_DAC_ConfigChannel+0x280>)
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1df      	bne.n	800180c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	6992      	ldr	r2, [r2, #24]
 8001854:	641a      	str	r2, [r3, #64]	@ 0x40
 8001856:	e020      	b.n	800189a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001858:	f7ff fd32 	bl	80012c0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d90f      	bls.n	8001886 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186c:	2b00      	cmp	r3, #0
 800186e:	da0a      	bge.n	8001886 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	f043 0208 	orr.w	r2, r3, #8
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2203      	movs	r2, #3
 8001880:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0d6      	b.n	8001a34 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188c:	2b00      	cmp	r3, #0
 800188e:	dbe3      	blt.n	8001858 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	6992      	ldr	r2, [r2, #24]
 8001898:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	ea02 0103 	and.w	r1, r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	21ff      	movs	r1, #255	@ 0xff
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	ea02 0103 	and.w	r1, r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d11d      	bne.n	8001938 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001902:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2207      	movs	r2, #7
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d102      	bne.n	8001962 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001960:	e00f      	b.n	8001982 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d102      	bne.n	8001970 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800196a:	2301      	movs	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
 800196e:	e008      	b.n	8001982 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001978:	2301      	movs	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
 800197c:	e001      	b.n	8001982 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4313      	orrs	r3, r2
 800198c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198e:	4313      	orrs	r3, r2
 8001990:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6819      	ldr	r1, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43da      	mvns	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	22c0      	movs	r2, #192	@ 0xc0
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	400a      	ands	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001a30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3728      	adds	r7, #40	@ 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20008000 	.word	0x20008000

08001a40 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7ff fe96 	bl	8001780 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	711a      	strb	r2, [r3, #4]
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe8f 	bl	8001794 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f043 0204 	orr.w	r2, r3, #4
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff fe85 	bl	80017a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	711a      	strb	r2, [r3, #4]
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff ffd8 	bl	8001aac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	711a      	strb	r2, [r3, #4]
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b16:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff ffd1 	bl	8001ac0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f043 0204 	orr.w	r2, r3, #4
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff ffc7 	bl	8001ad4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	711a      	strb	r2, [r3, #4]
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff fbb0 	bl	80012c0 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e37d      	b.n	8002268 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a66      	ldr	r2, [pc, #408]	@ (8001d0c <HAL_DMA_Init+0x1b8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d04a      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a65      	ldr	r2, [pc, #404]	@ (8001d10 <HAL_DMA_Init+0x1bc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d045      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a63      	ldr	r2, [pc, #396]	@ (8001d14 <HAL_DMA_Init+0x1c0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d040      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a62      	ldr	r2, [pc, #392]	@ (8001d18 <HAL_DMA_Init+0x1c4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d03b      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a60      	ldr	r2, [pc, #384]	@ (8001d1c <HAL_DMA_Init+0x1c8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d036      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d20 <HAL_DMA_Init+0x1cc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d031      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a5d      	ldr	r2, [pc, #372]	@ (8001d24 <HAL_DMA_Init+0x1d0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d02c      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d28 <HAL_DMA_Init+0x1d4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d027      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d2c <HAL_DMA_Init+0x1d8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d022      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a59      	ldr	r2, [pc, #356]	@ (8001d30 <HAL_DMA_Init+0x1dc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d01d      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a57      	ldr	r2, [pc, #348]	@ (8001d34 <HAL_DMA_Init+0x1e0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a56      	ldr	r2, [pc, #344]	@ (8001d38 <HAL_DMA_Init+0x1e4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a54      	ldr	r2, [pc, #336]	@ (8001d3c <HAL_DMA_Init+0x1e8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a53      	ldr	r2, [pc, #332]	@ (8001d40 <HAL_DMA_Init+0x1ec>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	@ (8001d44 <HAL_DMA_Init+0x1f0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_DMA_Init+0xb8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a50      	ldr	r2, [pc, #320]	@ (8001d48 <HAL_DMA_Init+0x1f4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Init+0xbc>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_DMA_Init+0xbe>
 8001c10:	2300      	movs	r3, #0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 813c 	beq.w	8001e90 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a37      	ldr	r2, [pc, #220]	@ (8001d0c <HAL_DMA_Init+0x1b8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d04a      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <HAL_DMA_Init+0x1bc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d045      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a34      	ldr	r2, [pc, #208]	@ (8001d14 <HAL_DMA_Init+0x1c0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d040      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a33      	ldr	r2, [pc, #204]	@ (8001d18 <HAL_DMA_Init+0x1c4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d03b      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a31      	ldr	r2, [pc, #196]	@ (8001d1c <HAL_DMA_Init+0x1c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d036      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a30      	ldr	r2, [pc, #192]	@ (8001d20 <HAL_DMA_Init+0x1cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d031      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2e      	ldr	r2, [pc, #184]	@ (8001d24 <HAL_DMA_Init+0x1d0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02c      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2d      	ldr	r2, [pc, #180]	@ (8001d28 <HAL_DMA_Init+0x1d4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d027      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <HAL_DMA_Init+0x1d8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d022      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2a      	ldr	r2, [pc, #168]	@ (8001d30 <HAL_DMA_Init+0x1dc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d01d      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a28      	ldr	r2, [pc, #160]	@ (8001d34 <HAL_DMA_Init+0x1e0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d018      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a27      	ldr	r2, [pc, #156]	@ (8001d38 <HAL_DMA_Init+0x1e4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a25      	ldr	r2, [pc, #148]	@ (8001d3c <HAL_DMA_Init+0x1e8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a24      	ldr	r2, [pc, #144]	@ (8001d40 <HAL_DMA_Init+0x1ec>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <HAL_DMA_Init+0x1f0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_DMA_Init+0x174>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_DMA_Init+0x1f4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d108      	bne.n	8001cda <HAL_DMA_Init+0x186>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e007      	b.n	8001cea <HAL_DMA_Init+0x196>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cea:	e02f      	b.n	8001d4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cec:	f7ff fae8 	bl	80012c0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d928      	bls.n	8001d4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e2ad      	b.n	8002268 <HAL_DMA_Init+0x714>
 8001d0c:	40020010 	.word	0x40020010
 8001d10:	40020028 	.word	0x40020028
 8001d14:	40020040 	.word	0x40020040
 8001d18:	40020058 	.word	0x40020058
 8001d1c:	40020070 	.word	0x40020070
 8001d20:	40020088 	.word	0x40020088
 8001d24:	400200a0 	.word	0x400200a0
 8001d28:	400200b8 	.word	0x400200b8
 8001d2c:	40020410 	.word	0x40020410
 8001d30:	40020428 	.word	0x40020428
 8001d34:	40020440 	.word	0x40020440
 8001d38:	40020458 	.word	0x40020458
 8001d3c:	40020470 	.word	0x40020470
 8001d40:	40020488 	.word	0x40020488
 8001d44:	400204a0 	.word	0x400204a0
 8001d48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1c8      	bne.n	8001cec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4b73      	ldr	r3, [pc, #460]	@ (8001f34 <HAL_DMA_Init+0x3e0>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d107      	bne.n	8001db0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	4313      	orrs	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b28      	cmp	r3, #40	@ 0x28
 8001db6:	d903      	bls.n	8001dc0 <HAL_DMA_Init+0x26c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dbe:	d91f      	bls.n	8001e00 <HAL_DMA_Init+0x2ac>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8001dc6:	d903      	bls.n	8001dd0 <HAL_DMA_Init+0x27c>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b42      	cmp	r3, #66	@ 0x42
 8001dce:	d917      	bls.n	8001e00 <HAL_DMA_Init+0x2ac>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b46      	cmp	r3, #70	@ 0x46
 8001dd6:	d903      	bls.n	8001de0 <HAL_DMA_Init+0x28c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b48      	cmp	r3, #72	@ 0x48
 8001dde:	d90f      	bls.n	8001e00 <HAL_DMA_Init+0x2ac>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b4e      	cmp	r3, #78	@ 0x4e
 8001de6:	d903      	bls.n	8001df0 <HAL_DMA_Init+0x29c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b52      	cmp	r3, #82	@ 0x52
 8001dee:	d907      	bls.n	8001e00 <HAL_DMA_Init+0x2ac>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b73      	cmp	r3, #115	@ 0x73
 8001df6:	d905      	bls.n	8001e04 <HAL_DMA_Init+0x2b0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b77      	cmp	r3, #119	@ 0x77
 8001dfe:	d801      	bhi.n	8001e04 <HAL_DMA_Init+0x2b0>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_DMA_Init+0x2b2>
 8001e04:	2300      	movs	r3, #0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e10:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f023 0307 	bic.w	r3, r3, #7
 8001e28:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d117      	bne.n	8001e6c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00e      	beq.n	8001e6c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f002 fbd4 	bl	80045fc <DMA_CheckFifoParam>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2240      	movs	r2, #64	@ 0x40
 8001e5e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e1fd      	b.n	8002268 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f002 fb0f 	bl	8004498 <DMA_CalcBaseAndBitshift>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	223f      	movs	r2, #63	@ 0x3f
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	e0fd      	b.n	800208c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a28      	ldr	r2, [pc, #160]	@ (8001f38 <HAL_DMA_Init+0x3e4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d04a      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a27      	ldr	r2, [pc, #156]	@ (8001f3c <HAL_DMA_Init+0x3e8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d045      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <HAL_DMA_Init+0x3ec>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d040      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a24      	ldr	r2, [pc, #144]	@ (8001f44 <HAL_DMA_Init+0x3f0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d03b      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a22      	ldr	r2, [pc, #136]	@ (8001f48 <HAL_DMA_Init+0x3f4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d036      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a21      	ldr	r2, [pc, #132]	@ (8001f4c <HAL_DMA_Init+0x3f8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d031      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_DMA_Init+0x3fc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d02c      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1e      	ldr	r2, [pc, #120]	@ (8001f54 <HAL_DMA_Init+0x400>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d027      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <HAL_DMA_Init+0x404>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d022      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_DMA_Init+0x408>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d01d      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	@ (8001f60 <HAL_DMA_Init+0x40c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d018      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a18      	ldr	r2, [pc, #96]	@ (8001f64 <HAL_DMA_Init+0x410>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a16      	ldr	r2, [pc, #88]	@ (8001f68 <HAL_DMA_Init+0x414>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <HAL_DMA_Init+0x418>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <HAL_DMA_Init+0x41c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_DMA_Init+0x3dc>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <HAL_DMA_Init+0x420>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d123      	bne.n	8001f78 <HAL_DMA_Init+0x424>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e022      	b.n	8001f7a <HAL_DMA_Init+0x426>
 8001f34:	fe10803f 	.word	0xfe10803f
 8001f38:	48022c08 	.word	0x48022c08
 8001f3c:	48022c1c 	.word	0x48022c1c
 8001f40:	48022c30 	.word	0x48022c30
 8001f44:	48022c44 	.word	0x48022c44
 8001f48:	48022c58 	.word	0x48022c58
 8001f4c:	48022c6c 	.word	0x48022c6c
 8001f50:	48022c80 	.word	0x48022c80
 8001f54:	48022c94 	.word	0x48022c94
 8001f58:	58025408 	.word	0x58025408
 8001f5c:	5802541c 	.word	0x5802541c
 8001f60:	58025430 	.word	0x58025430
 8001f64:	58025444 	.word	0x58025444
 8001f68:	58025458 	.word	0x58025458
 8001f6c:	5802546c 	.word	0x5802546c
 8001f70:	58025480 	.word	0x58025480
 8001f74:	58025494 	.word	0x58025494
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d07d      	beq.n	800207a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7f      	ldr	r2, [pc, #508]	@ (8002180 <HAL_DMA_Init+0x62c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d021      	beq.n	8001fcc <HAL_DMA_Init+0x478>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7d      	ldr	r2, [pc, #500]	@ (8002184 <HAL_DMA_Init+0x630>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01c      	beq.n	8001fcc <HAL_DMA_Init+0x478>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7c      	ldr	r2, [pc, #496]	@ (8002188 <HAL_DMA_Init+0x634>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d017      	beq.n	8001fcc <HAL_DMA_Init+0x478>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a7a      	ldr	r2, [pc, #488]	@ (800218c <HAL_DMA_Init+0x638>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d012      	beq.n	8001fcc <HAL_DMA_Init+0x478>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a79      	ldr	r2, [pc, #484]	@ (8002190 <HAL_DMA_Init+0x63c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <HAL_DMA_Init+0x478>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a77      	ldr	r2, [pc, #476]	@ (8002194 <HAL_DMA_Init+0x640>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d008      	beq.n	8001fcc <HAL_DMA_Init+0x478>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a76      	ldr	r2, [pc, #472]	@ (8002198 <HAL_DMA_Init+0x644>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <HAL_DMA_Init+0x478>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a74      	ldr	r2, [pc, #464]	@ (800219c <HAL_DMA_Init+0x648>)
 8001fca:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80021a0 <HAL_DMA_Init+0x64c>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b40      	cmp	r3, #64	@ 0x40
 8001ff2:	d008      	beq.n	8002006 <HAL_DMA_Init+0x4b2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b80      	cmp	r3, #128	@ 0x80
 8001ffa:	d102      	bne.n	8002002 <HAL_DMA_Init+0x4ae>
 8001ffc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002000:	e002      	b.n	8002008 <HAL_DMA_Init+0x4b4>
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_DMA_Init+0x4b4>
 8002006:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68d2      	ldr	r2, [r2, #12]
 800200c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800200e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002016:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800201e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002026:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800202e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002036:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	4b55      	ldr	r3, [pc, #340]	@ (80021a4 <HAL_DMA_Init+0x650>)
 800204e:	4413      	add	r3, r2
 8002050:	4a55      	ldr	r2, [pc, #340]	@ (80021a8 <HAL_DMA_Init+0x654>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	009a      	lsls	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f002 fa1a 	bl	8004498 <DMA_CalcBaseAndBitshift>
 8002064:	4603      	mov	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2201      	movs	r2, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	e008      	b.n	800208c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2240      	movs	r2, #64	@ 0x40
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0ed      	b.n	8002268 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a46      	ldr	r2, [pc, #280]	@ (80021ac <HAL_DMA_Init+0x658>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d072      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a45      	ldr	r2, [pc, #276]	@ (80021b0 <HAL_DMA_Init+0x65c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d06d      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a43      	ldr	r2, [pc, #268]	@ (80021b4 <HAL_DMA_Init+0x660>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d068      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a42      	ldr	r2, [pc, #264]	@ (80021b8 <HAL_DMA_Init+0x664>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d063      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a40      	ldr	r2, [pc, #256]	@ (80021bc <HAL_DMA_Init+0x668>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d05e      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a3f      	ldr	r2, [pc, #252]	@ (80021c0 <HAL_DMA_Init+0x66c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d059      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a3d      	ldr	r2, [pc, #244]	@ (80021c4 <HAL_DMA_Init+0x670>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d054      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a3c      	ldr	r2, [pc, #240]	@ (80021c8 <HAL_DMA_Init+0x674>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d04f      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3a      	ldr	r2, [pc, #232]	@ (80021cc <HAL_DMA_Init+0x678>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d04a      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a39      	ldr	r2, [pc, #228]	@ (80021d0 <HAL_DMA_Init+0x67c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d045      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a37      	ldr	r2, [pc, #220]	@ (80021d4 <HAL_DMA_Init+0x680>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d040      	beq.n	800217c <HAL_DMA_Init+0x628>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a36      	ldr	r2, [pc, #216]	@ (80021d8 <HAL_DMA_Init+0x684>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d03b      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a34      	ldr	r2, [pc, #208]	@ (80021dc <HAL_DMA_Init+0x688>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d036      	beq.n	800217c <HAL_DMA_Init+0x628>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a33      	ldr	r2, [pc, #204]	@ (80021e0 <HAL_DMA_Init+0x68c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d031      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a31      	ldr	r2, [pc, #196]	@ (80021e4 <HAL_DMA_Init+0x690>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d02c      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a30      	ldr	r2, [pc, #192]	@ (80021e8 <HAL_DMA_Init+0x694>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d027      	beq.n	800217c <HAL_DMA_Init+0x628>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a13      	ldr	r2, [pc, #76]	@ (8002180 <HAL_DMA_Init+0x62c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d022      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <HAL_DMA_Init+0x630>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d01d      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <HAL_DMA_Init+0x634>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d018      	beq.n	800217c <HAL_DMA_Init+0x628>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0f      	ldr	r2, [pc, #60]	@ (800218c <HAL_DMA_Init+0x638>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <HAL_DMA_Init+0x63c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00e      	beq.n	800217c <HAL_DMA_Init+0x628>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <HAL_DMA_Init+0x640>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <HAL_DMA_Init+0x644>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_DMA_Init+0x628>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a09      	ldr	r2, [pc, #36]	@ (800219c <HAL_DMA_Init+0x648>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d137      	bne.n	80021ec <HAL_DMA_Init+0x698>
 800217c:	2301      	movs	r3, #1
 800217e:	e036      	b.n	80021ee <HAL_DMA_Init+0x69a>
 8002180:	58025408 	.word	0x58025408
 8002184:	5802541c 	.word	0x5802541c
 8002188:	58025430 	.word	0x58025430
 800218c:	58025444 	.word	0x58025444
 8002190:	58025458 	.word	0x58025458
 8002194:	5802546c 	.word	0x5802546c
 8002198:	58025480 	.word	0x58025480
 800219c:	58025494 	.word	0x58025494
 80021a0:	fffe000f 	.word	0xfffe000f
 80021a4:	a7fdabf8 	.word	0xa7fdabf8
 80021a8:	cccccccd 	.word	0xcccccccd
 80021ac:	40020010 	.word	0x40020010
 80021b0:	40020028 	.word	0x40020028
 80021b4:	40020040 	.word	0x40020040
 80021b8:	40020058 	.word	0x40020058
 80021bc:	40020070 	.word	0x40020070
 80021c0:	40020088 	.word	0x40020088
 80021c4:	400200a0 	.word	0x400200a0
 80021c8:	400200b8 	.word	0x400200b8
 80021cc:	40020410 	.word	0x40020410
 80021d0:	40020428 	.word	0x40020428
 80021d4:	40020440 	.word	0x40020440
 80021d8:	40020458 	.word	0x40020458
 80021dc:	40020470 	.word	0x40020470
 80021e0:	40020488 	.word	0x40020488
 80021e4:	400204a0 	.word	0x400204a0
 80021e8:	400204b8 	.word	0x400204b8
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d032      	beq.n	8002258 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f002 fa7e 	bl	80046f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b80      	cmp	r3, #128	@ 0x80
 80021fe:	d102      	bne.n	8002206 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800221a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <HAL_DMA_Init+0x6f2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d80c      	bhi.n	8002246 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f002 fafb 	bl	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	e008      	b.n	8002258 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e226      	b.n	80026da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_DMA_Start_IT+0x2a>
 8002296:	2302      	movs	r3, #2
 8002298:	e21f      	b.n	80026da <HAL_DMA_Start_IT+0x46a>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	f040 820a 	bne.w	80026c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a68      	ldr	r2, [pc, #416]	@ (8002464 <HAL_DMA_Start_IT+0x1f4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d04a      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a66      	ldr	r2, [pc, #408]	@ (8002468 <HAL_DMA_Start_IT+0x1f8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d045      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a65      	ldr	r2, [pc, #404]	@ (800246c <HAL_DMA_Start_IT+0x1fc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d040      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a63      	ldr	r2, [pc, #396]	@ (8002470 <HAL_DMA_Start_IT+0x200>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d03b      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a62      	ldr	r2, [pc, #392]	@ (8002474 <HAL_DMA_Start_IT+0x204>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d036      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a60      	ldr	r2, [pc, #384]	@ (8002478 <HAL_DMA_Start_IT+0x208>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d031      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5f      	ldr	r2, [pc, #380]	@ (800247c <HAL_DMA_Start_IT+0x20c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d02c      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a5d      	ldr	r2, [pc, #372]	@ (8002480 <HAL_DMA_Start_IT+0x210>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d027      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a5c      	ldr	r2, [pc, #368]	@ (8002484 <HAL_DMA_Start_IT+0x214>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d022      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5a      	ldr	r2, [pc, #360]	@ (8002488 <HAL_DMA_Start_IT+0x218>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01d      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a59      	ldr	r2, [pc, #356]	@ (800248c <HAL_DMA_Start_IT+0x21c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d018      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a57      	ldr	r2, [pc, #348]	@ (8002490 <HAL_DMA_Start_IT+0x220>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a56      	ldr	r2, [pc, #344]	@ (8002494 <HAL_DMA_Start_IT+0x224>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00e      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a54      	ldr	r2, [pc, #336]	@ (8002498 <HAL_DMA_Start_IT+0x228>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a53      	ldr	r2, [pc, #332]	@ (800249c <HAL_DMA_Start_IT+0x22c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d004      	beq.n	800235e <HAL_DMA_Start_IT+0xee>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a51      	ldr	r2, [pc, #324]	@ (80024a0 <HAL_DMA_Start_IT+0x230>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d108      	bne.n	8002370 <HAL_DMA_Start_IT+0x100>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e007      	b.n	8002380 <HAL_DMA_Start_IT+0x110>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f001 fea2 	bl	80040d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a34      	ldr	r2, [pc, #208]	@ (8002464 <HAL_DMA_Start_IT+0x1f4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d04a      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a33      	ldr	r2, [pc, #204]	@ (8002468 <HAL_DMA_Start_IT+0x1f8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d045      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a31      	ldr	r2, [pc, #196]	@ (800246c <HAL_DMA_Start_IT+0x1fc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d040      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a30      	ldr	r2, [pc, #192]	@ (8002470 <HAL_DMA_Start_IT+0x200>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d03b      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002474 <HAL_DMA_Start_IT+0x204>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d036      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002478 <HAL_DMA_Start_IT+0x208>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d031      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2b      	ldr	r2, [pc, #172]	@ (800247c <HAL_DMA_Start_IT+0x20c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d02c      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002480 <HAL_DMA_Start_IT+0x210>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d027      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a28      	ldr	r2, [pc, #160]	@ (8002484 <HAL_DMA_Start_IT+0x214>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d022      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a27      	ldr	r2, [pc, #156]	@ (8002488 <HAL_DMA_Start_IT+0x218>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d01d      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a25      	ldr	r2, [pc, #148]	@ (800248c <HAL_DMA_Start_IT+0x21c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d018      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a24      	ldr	r2, [pc, #144]	@ (8002490 <HAL_DMA_Start_IT+0x220>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a22      	ldr	r2, [pc, #136]	@ (8002494 <HAL_DMA_Start_IT+0x224>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00e      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	@ (8002498 <HAL_DMA_Start_IT+0x228>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1f      	ldr	r2, [pc, #124]	@ (800249c <HAL_DMA_Start_IT+0x22c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_DMA_Start_IT+0x1bc>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1e      	ldr	r2, [pc, #120]	@ (80024a0 <HAL_DMA_Start_IT+0x230>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_DMA_Start_IT+0x1c0>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_DMA_Start_IT+0x1c2>
 8002430:	2300      	movs	r3, #0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d036      	beq.n	80024a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 021e 	bic.w	r2, r3, #30
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0216 	orr.w	r2, r2, #22
 8002448:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03e      	beq.n	80024d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0208 	orr.w	r2, r2, #8
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e035      	b.n	80024d0 <HAL_DMA_Start_IT+0x260>
 8002464:	40020010 	.word	0x40020010
 8002468:	40020028 	.word	0x40020028
 800246c:	40020040 	.word	0x40020040
 8002470:	40020058 	.word	0x40020058
 8002474:	40020070 	.word	0x40020070
 8002478:	40020088 	.word	0x40020088
 800247c:	400200a0 	.word	0x400200a0
 8002480:	400200b8 	.word	0x400200b8
 8002484:	40020410 	.word	0x40020410
 8002488:	40020428 	.word	0x40020428
 800248c:	40020440 	.word	0x40020440
 8002490:	40020458 	.word	0x40020458
 8002494:	40020470 	.word	0x40020470
 8002498:	40020488 	.word	0x40020488
 800249c:	400204a0 	.word	0x400204a0
 80024a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 020e 	bic.w	r2, r3, #14
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 020a 	orr.w	r2, r2, #10
 80024b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0204 	orr.w	r2, r2, #4
 80024ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a83      	ldr	r2, [pc, #524]	@ (80026e4 <HAL_DMA_Start_IT+0x474>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d072      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a82      	ldr	r2, [pc, #520]	@ (80026e8 <HAL_DMA_Start_IT+0x478>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d06d      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a80      	ldr	r2, [pc, #512]	@ (80026ec <HAL_DMA_Start_IT+0x47c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d068      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7f      	ldr	r2, [pc, #508]	@ (80026f0 <HAL_DMA_Start_IT+0x480>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d063      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a7d      	ldr	r2, [pc, #500]	@ (80026f4 <HAL_DMA_Start_IT+0x484>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d05e      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7c      	ldr	r2, [pc, #496]	@ (80026f8 <HAL_DMA_Start_IT+0x488>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d059      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a7a      	ldr	r2, [pc, #488]	@ (80026fc <HAL_DMA_Start_IT+0x48c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d054      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a79      	ldr	r2, [pc, #484]	@ (8002700 <HAL_DMA_Start_IT+0x490>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d04f      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a77      	ldr	r2, [pc, #476]	@ (8002704 <HAL_DMA_Start_IT+0x494>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d04a      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a76      	ldr	r2, [pc, #472]	@ (8002708 <HAL_DMA_Start_IT+0x498>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d045      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a74      	ldr	r2, [pc, #464]	@ (800270c <HAL_DMA_Start_IT+0x49c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d040      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a73      	ldr	r2, [pc, #460]	@ (8002710 <HAL_DMA_Start_IT+0x4a0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d03b      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a71      	ldr	r2, [pc, #452]	@ (8002714 <HAL_DMA_Start_IT+0x4a4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d036      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a70      	ldr	r2, [pc, #448]	@ (8002718 <HAL_DMA_Start_IT+0x4a8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d031      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6e      	ldr	r2, [pc, #440]	@ (800271c <HAL_DMA_Start_IT+0x4ac>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d02c      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6d      	ldr	r2, [pc, #436]	@ (8002720 <HAL_DMA_Start_IT+0x4b0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d027      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6b      	ldr	r2, [pc, #428]	@ (8002724 <HAL_DMA_Start_IT+0x4b4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d022      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6a      	ldr	r2, [pc, #424]	@ (8002728 <HAL_DMA_Start_IT+0x4b8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d01d      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a68      	ldr	r2, [pc, #416]	@ (800272c <HAL_DMA_Start_IT+0x4bc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d018      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a67      	ldr	r2, [pc, #412]	@ (8002730 <HAL_DMA_Start_IT+0x4c0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d013      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a65      	ldr	r2, [pc, #404]	@ (8002734 <HAL_DMA_Start_IT+0x4c4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00e      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a64      	ldr	r2, [pc, #400]	@ (8002738 <HAL_DMA_Start_IT+0x4c8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d009      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a62      	ldr	r2, [pc, #392]	@ (800273c <HAL_DMA_Start_IT+0x4cc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d004      	beq.n	80025c0 <HAL_DMA_Start_IT+0x350>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a61      	ldr	r2, [pc, #388]	@ (8002740 <HAL_DMA_Start_IT+0x4d0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_DMA_Start_IT+0x354>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_DMA_Start_IT+0x356>
 80025c4:	2300      	movs	r3, #0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01a      	beq.n	8002600 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a37      	ldr	r2, [pc, #220]	@ (80026e4 <HAL_DMA_Start_IT+0x474>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d04a      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a36      	ldr	r2, [pc, #216]	@ (80026e8 <HAL_DMA_Start_IT+0x478>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d045      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a34      	ldr	r2, [pc, #208]	@ (80026ec <HAL_DMA_Start_IT+0x47c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d040      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a33      	ldr	r2, [pc, #204]	@ (80026f0 <HAL_DMA_Start_IT+0x480>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d03b      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a31      	ldr	r2, [pc, #196]	@ (80026f4 <HAL_DMA_Start_IT+0x484>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d036      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a30      	ldr	r2, [pc, #192]	@ (80026f8 <HAL_DMA_Start_IT+0x488>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d031      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2e      	ldr	r2, [pc, #184]	@ (80026fc <HAL_DMA_Start_IT+0x48c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02c      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2d      	ldr	r2, [pc, #180]	@ (8002700 <HAL_DMA_Start_IT+0x490>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d027      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2b      	ldr	r2, [pc, #172]	@ (8002704 <HAL_DMA_Start_IT+0x494>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d022      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2a      	ldr	r2, [pc, #168]	@ (8002708 <HAL_DMA_Start_IT+0x498>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d01d      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a28      	ldr	r2, [pc, #160]	@ (800270c <HAL_DMA_Start_IT+0x49c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d018      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a27      	ldr	r2, [pc, #156]	@ (8002710 <HAL_DMA_Start_IT+0x4a0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a25      	ldr	r2, [pc, #148]	@ (8002714 <HAL_DMA_Start_IT+0x4a4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00e      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_DMA_Start_IT+0x4a8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a22      	ldr	r2, [pc, #136]	@ (800271c <HAL_DMA_Start_IT+0x4ac>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_Start_IT+0x430>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a21      	ldr	r2, [pc, #132]	@ (8002720 <HAL_DMA_Start_IT+0x4b0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d108      	bne.n	80026b2 <HAL_DMA_Start_IT+0x442>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e012      	b.n	80026d8 <HAL_DMA_Start_IT+0x468>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e009      	b.n	80026d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40020010 	.word	0x40020010
 80026e8:	40020028 	.word	0x40020028
 80026ec:	40020040 	.word	0x40020040
 80026f0:	40020058 	.word	0x40020058
 80026f4:	40020070 	.word	0x40020070
 80026f8:	40020088 	.word	0x40020088
 80026fc:	400200a0 	.word	0x400200a0
 8002700:	400200b8 	.word	0x400200b8
 8002704:	40020410 	.word	0x40020410
 8002708:	40020428 	.word	0x40020428
 800270c:	40020440 	.word	0x40020440
 8002710:	40020458 	.word	0x40020458
 8002714:	40020470 	.word	0x40020470
 8002718:	40020488 	.word	0x40020488
 800271c:	400204a0 	.word	0x400204a0
 8002720:	400204b8 	.word	0x400204b8
 8002724:	58025408 	.word	0x58025408
 8002728:	5802541c 	.word	0x5802541c
 800272c:	58025430 	.word	0x58025430
 8002730:	58025444 	.word	0x58025444
 8002734:	58025458 	.word	0x58025458
 8002738:	5802546c 	.word	0x5802546c
 800273c:	58025480 	.word	0x58025480
 8002740:	58025494 	.word	0x58025494

08002744 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800274c:	f7fe fdb8 	bl	80012c0 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e2dc      	b.n	8002d16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d008      	beq.n	800277a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e2cd      	b.n	8002d16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a76      	ldr	r2, [pc, #472]	@ (8002958 <HAL_DMA_Abort+0x214>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04a      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a74      	ldr	r2, [pc, #464]	@ (800295c <HAL_DMA_Abort+0x218>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d045      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a73      	ldr	r2, [pc, #460]	@ (8002960 <HAL_DMA_Abort+0x21c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a71      	ldr	r2, [pc, #452]	@ (8002964 <HAL_DMA_Abort+0x220>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03b      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a70      	ldr	r2, [pc, #448]	@ (8002968 <HAL_DMA_Abort+0x224>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d036      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6e      	ldr	r2, [pc, #440]	@ (800296c <HAL_DMA_Abort+0x228>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002970 <HAL_DMA_Abort+0x22c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002974 <HAL_DMA_Abort+0x230>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d027      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6a      	ldr	r2, [pc, #424]	@ (8002978 <HAL_DMA_Abort+0x234>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a68      	ldr	r2, [pc, #416]	@ (800297c <HAL_DMA_Abort+0x238>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a67      	ldr	r2, [pc, #412]	@ (8002980 <HAL_DMA_Abort+0x23c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a65      	ldr	r2, [pc, #404]	@ (8002984 <HAL_DMA_Abort+0x240>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a64      	ldr	r2, [pc, #400]	@ (8002988 <HAL_DMA_Abort+0x244>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a62      	ldr	r2, [pc, #392]	@ (800298c <HAL_DMA_Abort+0x248>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a61      	ldr	r2, [pc, #388]	@ (8002990 <HAL_DMA_Abort+0x24c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_Abort+0xd6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5f      	ldr	r2, [pc, #380]	@ (8002994 <HAL_DMA_Abort+0x250>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_DMA_Abort+0xda>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_DMA_Abort+0xdc>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 021e 	bic.w	r2, r2, #30
 8002832:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002842:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e00a      	b.n	8002862 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020e 	bic.w	r2, r2, #14
 800285a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3c      	ldr	r2, [pc, #240]	@ (8002958 <HAL_DMA_Abort+0x214>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d072      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3a      	ldr	r2, [pc, #232]	@ (800295c <HAL_DMA_Abort+0x218>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d06d      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a39      	ldr	r2, [pc, #228]	@ (8002960 <HAL_DMA_Abort+0x21c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d068      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a37      	ldr	r2, [pc, #220]	@ (8002964 <HAL_DMA_Abort+0x220>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d063      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a36      	ldr	r2, [pc, #216]	@ (8002968 <HAL_DMA_Abort+0x224>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d05e      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a34      	ldr	r2, [pc, #208]	@ (800296c <HAL_DMA_Abort+0x228>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d059      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a33      	ldr	r2, [pc, #204]	@ (8002970 <HAL_DMA_Abort+0x22c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d054      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a31      	ldr	r2, [pc, #196]	@ (8002974 <HAL_DMA_Abort+0x230>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d04f      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a30      	ldr	r2, [pc, #192]	@ (8002978 <HAL_DMA_Abort+0x234>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d04a      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2e      	ldr	r2, [pc, #184]	@ (800297c <HAL_DMA_Abort+0x238>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d045      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002980 <HAL_DMA_Abort+0x23c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d040      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002984 <HAL_DMA_Abort+0x240>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d03b      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2a      	ldr	r2, [pc, #168]	@ (8002988 <HAL_DMA_Abort+0x244>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d036      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a28      	ldr	r2, [pc, #160]	@ (800298c <HAL_DMA_Abort+0x248>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d031      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a27      	ldr	r2, [pc, #156]	@ (8002990 <HAL_DMA_Abort+0x24c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d02c      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a25      	ldr	r2, [pc, #148]	@ (8002994 <HAL_DMA_Abort+0x250>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d027      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a24      	ldr	r2, [pc, #144]	@ (8002998 <HAL_DMA_Abort+0x254>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d022      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a22      	ldr	r2, [pc, #136]	@ (800299c <HAL_DMA_Abort+0x258>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01d      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <HAL_DMA_Abort+0x25c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d018      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1f      	ldr	r2, [pc, #124]	@ (80029a4 <HAL_DMA_Abort+0x260>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1e      	ldr	r2, [pc, #120]	@ (80029a8 <HAL_DMA_Abort+0x264>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1c      	ldr	r2, [pc, #112]	@ (80029ac <HAL_DMA_Abort+0x268>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1b      	ldr	r2, [pc, #108]	@ (80029b0 <HAL_DMA_Abort+0x26c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_DMA_Abort+0x20e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <HAL_DMA_Abort+0x270>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d132      	bne.n	80029b8 <HAL_DMA_Abort+0x274>
 8002952:	2301      	movs	r3, #1
 8002954:	e031      	b.n	80029ba <HAL_DMA_Abort+0x276>
 8002956:	bf00      	nop
 8002958:	40020010 	.word	0x40020010
 800295c:	40020028 	.word	0x40020028
 8002960:	40020040 	.word	0x40020040
 8002964:	40020058 	.word	0x40020058
 8002968:	40020070 	.word	0x40020070
 800296c:	40020088 	.word	0x40020088
 8002970:	400200a0 	.word	0x400200a0
 8002974:	400200b8 	.word	0x400200b8
 8002978:	40020410 	.word	0x40020410
 800297c:	40020428 	.word	0x40020428
 8002980:	40020440 	.word	0x40020440
 8002984:	40020458 	.word	0x40020458
 8002988:	40020470 	.word	0x40020470
 800298c:	40020488 	.word	0x40020488
 8002990:	400204a0 	.word	0x400204a0
 8002994:	400204b8 	.word	0x400204b8
 8002998:	58025408 	.word	0x58025408
 800299c:	5802541c 	.word	0x5802541c
 80029a0:	58025430 	.word	0x58025430
 80029a4:	58025444 	.word	0x58025444
 80029a8:	58025458 	.word	0x58025458
 80029ac:	5802546c 	.word	0x5802546c
 80029b0:	58025480 	.word	0x58025480
 80029b4:	58025494 	.word	0x58025494
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002b88 <HAL_DMA_Abort+0x444>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6b      	ldr	r2, [pc, #428]	@ (8002b8c <HAL_DMA_Abort+0x448>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002b90 <HAL_DMA_Abort+0x44c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a68      	ldr	r2, [pc, #416]	@ (8002b94 <HAL_DMA_Abort+0x450>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a67      	ldr	r2, [pc, #412]	@ (8002b98 <HAL_DMA_Abort+0x454>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a65      	ldr	r2, [pc, #404]	@ (8002b9c <HAL_DMA_Abort+0x458>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a64      	ldr	r2, [pc, #400]	@ (8002ba0 <HAL_DMA_Abort+0x45c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a62      	ldr	r2, [pc, #392]	@ (8002ba4 <HAL_DMA_Abort+0x460>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a61      	ldr	r2, [pc, #388]	@ (8002ba8 <HAL_DMA_Abort+0x464>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a5f      	ldr	r2, [pc, #380]	@ (8002bac <HAL_DMA_Abort+0x468>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb0 <HAL_DMA_Abort+0x46c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb4 <HAL_DMA_Abort+0x470>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb8 <HAL_DMA_Abort+0x474>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a59      	ldr	r2, [pc, #356]	@ (8002bbc <HAL_DMA_Abort+0x478>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a58      	ldr	r2, [pc, #352]	@ (8002bc0 <HAL_DMA_Abort+0x47c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Abort+0x32a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a56      	ldr	r2, [pc, #344]	@ (8002bc4 <HAL_DMA_Abort+0x480>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_Abort+0x33c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e007      	b.n	8002a90 <HAL_DMA_Abort+0x34c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a90:	e013      	b.n	8002aba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a92:	f7fe fc15 	bl	80012c0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d90c      	bls.n	8002aba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e12d      	b.n	8002d16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e5      	bne.n	8002a92 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2f      	ldr	r2, [pc, #188]	@ (8002b88 <HAL_DMA_Abort+0x444>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d04a      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b8c <HAL_DMA_Abort+0x448>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d045      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2c      	ldr	r2, [pc, #176]	@ (8002b90 <HAL_DMA_Abort+0x44c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d040      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <HAL_DMA_Abort+0x450>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d03b      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a29      	ldr	r2, [pc, #164]	@ (8002b98 <HAL_DMA_Abort+0x454>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d036      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a27      	ldr	r2, [pc, #156]	@ (8002b9c <HAL_DMA_Abort+0x458>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d031      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a26      	ldr	r2, [pc, #152]	@ (8002ba0 <HAL_DMA_Abort+0x45c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d02c      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a24      	ldr	r2, [pc, #144]	@ (8002ba4 <HAL_DMA_Abort+0x460>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d027      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ba8 <HAL_DMA_Abort+0x464>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a21      	ldr	r2, [pc, #132]	@ (8002bac <HAL_DMA_Abort+0x468>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01d      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a20      	ldr	r2, [pc, #128]	@ (8002bb0 <HAL_DMA_Abort+0x46c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d018      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb4 <HAL_DMA_Abort+0x470>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb8 <HAL_DMA_Abort+0x474>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00e      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <HAL_DMA_Abort+0x478>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <HAL_DMA_Abort+0x47c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_DMA_Abort+0x422>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <HAL_DMA_Abort+0x480>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_DMA_Abort+0x426>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_DMA_Abort+0x428>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d02b      	beq.n	8002bc8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	223f      	movs	r2, #63	@ 0x3f
 8002b80:	409a      	lsls	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	e02a      	b.n	8002bde <HAL_DMA_Abort+0x49a>
 8002b88:	40020010 	.word	0x40020010
 8002b8c:	40020028 	.word	0x40020028
 8002b90:	40020040 	.word	0x40020040
 8002b94:	40020058 	.word	0x40020058
 8002b98:	40020070 	.word	0x40020070
 8002b9c:	40020088 	.word	0x40020088
 8002ba0:	400200a0 	.word	0x400200a0
 8002ba4:	400200b8 	.word	0x400200b8
 8002ba8:	40020410 	.word	0x40020410
 8002bac:	40020428 	.word	0x40020428
 8002bb0:	40020440 	.word	0x40020440
 8002bb4:	40020458 	.word	0x40020458
 8002bb8:	40020470 	.word	0x40020470
 8002bbc:	40020488 	.word	0x40020488
 8002bc0:	400204a0 	.word	0x400204a0
 8002bc4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4f      	ldr	r2, [pc, #316]	@ (8002d20 <HAL_DMA_Abort+0x5dc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d072      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a4d      	ldr	r2, [pc, #308]	@ (8002d24 <HAL_DMA_Abort+0x5e0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d06d      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a4c      	ldr	r2, [pc, #304]	@ (8002d28 <HAL_DMA_Abort+0x5e4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d068      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a4a      	ldr	r2, [pc, #296]	@ (8002d2c <HAL_DMA_Abort+0x5e8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d063      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a49      	ldr	r2, [pc, #292]	@ (8002d30 <HAL_DMA_Abort+0x5ec>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d05e      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a47      	ldr	r2, [pc, #284]	@ (8002d34 <HAL_DMA_Abort+0x5f0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d059      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a46      	ldr	r2, [pc, #280]	@ (8002d38 <HAL_DMA_Abort+0x5f4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d054      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a44      	ldr	r2, [pc, #272]	@ (8002d3c <HAL_DMA_Abort+0x5f8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d04f      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a43      	ldr	r2, [pc, #268]	@ (8002d40 <HAL_DMA_Abort+0x5fc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d04a      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a41      	ldr	r2, [pc, #260]	@ (8002d44 <HAL_DMA_Abort+0x600>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d045      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a40      	ldr	r2, [pc, #256]	@ (8002d48 <HAL_DMA_Abort+0x604>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d040      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3e      	ldr	r2, [pc, #248]	@ (8002d4c <HAL_DMA_Abort+0x608>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d03b      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d50 <HAL_DMA_Abort+0x60c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d036      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3b      	ldr	r2, [pc, #236]	@ (8002d54 <HAL_DMA_Abort+0x610>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d031      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d58 <HAL_DMA_Abort+0x614>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d02c      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a38      	ldr	r2, [pc, #224]	@ (8002d5c <HAL_DMA_Abort+0x618>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d027      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a37      	ldr	r2, [pc, #220]	@ (8002d60 <HAL_DMA_Abort+0x61c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a35      	ldr	r2, [pc, #212]	@ (8002d64 <HAL_DMA_Abort+0x620>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a34      	ldr	r2, [pc, #208]	@ (8002d68 <HAL_DMA_Abort+0x624>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a32      	ldr	r2, [pc, #200]	@ (8002d6c <HAL_DMA_Abort+0x628>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a31      	ldr	r2, [pc, #196]	@ (8002d70 <HAL_DMA_Abort+0x62c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d74 <HAL_DMA_Abort+0x630>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8002d78 <HAL_DMA_Abort+0x634>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_Abort+0x58a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8002d7c <HAL_DMA_Abort+0x638>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA_Abort+0x58e>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMA_Abort+0x590>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ce0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40020010 	.word	0x40020010
 8002d24:	40020028 	.word	0x40020028
 8002d28:	40020040 	.word	0x40020040
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	40020070 	.word	0x40020070
 8002d34:	40020088 	.word	0x40020088
 8002d38:	400200a0 	.word	0x400200a0
 8002d3c:	400200b8 	.word	0x400200b8
 8002d40:	40020410 	.word	0x40020410
 8002d44:	40020428 	.word	0x40020428
 8002d48:	40020440 	.word	0x40020440
 8002d4c:	40020458 	.word	0x40020458
 8002d50:	40020470 	.word	0x40020470
 8002d54:	40020488 	.word	0x40020488
 8002d58:	400204a0 	.word	0x400204a0
 8002d5c:	400204b8 	.word	0x400204b8
 8002d60:	58025408 	.word	0x58025408
 8002d64:	5802541c 	.word	0x5802541c
 8002d68:	58025430 	.word	0x58025430
 8002d6c:	58025444 	.word	0x58025444
 8002d70:	58025458 	.word	0x58025458
 8002d74:	5802546c 	.word	0x5802546c
 8002d78:	58025480 	.word	0x58025480
 8002d7c:	58025494 	.word	0x58025494

08002d80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e237      	b.n	8003202 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d004      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2280      	movs	r2, #128	@ 0x80
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e22c      	b.n	8003202 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5c      	ldr	r2, [pc, #368]	@ (8002f20 <HAL_DMA_Abort_IT+0x1a0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d04a      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f24 <HAL_DMA_Abort_IT+0x1a4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d045      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <HAL_DMA_Abort_IT+0x1a8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d040      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a58      	ldr	r2, [pc, #352]	@ (8002f2c <HAL_DMA_Abort_IT+0x1ac>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d03b      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a56      	ldr	r2, [pc, #344]	@ (8002f30 <HAL_DMA_Abort_IT+0x1b0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d036      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a55      	ldr	r2, [pc, #340]	@ (8002f34 <HAL_DMA_Abort_IT+0x1b4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d031      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a53      	ldr	r2, [pc, #332]	@ (8002f38 <HAL_DMA_Abort_IT+0x1b8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02c      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a52      	ldr	r2, [pc, #328]	@ (8002f3c <HAL_DMA_Abort_IT+0x1bc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d027      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a50      	ldr	r2, [pc, #320]	@ (8002f40 <HAL_DMA_Abort_IT+0x1c0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d022      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a4f      	ldr	r2, [pc, #316]	@ (8002f44 <HAL_DMA_Abort_IT+0x1c4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d01d      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a4d      	ldr	r2, [pc, #308]	@ (8002f48 <HAL_DMA_Abort_IT+0x1c8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d018      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f4c <HAL_DMA_Abort_IT+0x1cc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4a      	ldr	r2, [pc, #296]	@ (8002f50 <HAL_DMA_Abort_IT+0x1d0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00e      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a49      	ldr	r2, [pc, #292]	@ (8002f54 <HAL_DMA_Abort_IT+0x1d4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a47      	ldr	r2, [pc, #284]	@ (8002f58 <HAL_DMA_Abort_IT+0x1d8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_DMA_Abort_IT+0xc8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a46      	ldr	r2, [pc, #280]	@ (8002f5c <HAL_DMA_Abort_IT+0x1dc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_DMA_Abort_IT+0xcc>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_DMA_Abort_IT+0xce>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8086 	beq.w	8002f60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2204      	movs	r2, #4
 8002e58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2f      	ldr	r2, [pc, #188]	@ (8002f20 <HAL_DMA_Abort_IT+0x1a0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d04a      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f24 <HAL_DMA_Abort_IT+0x1a4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d045      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2c      	ldr	r2, [pc, #176]	@ (8002f28 <HAL_DMA_Abort_IT+0x1a8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d040      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f2c <HAL_DMA_Abort_IT+0x1ac>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d03b      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a29      	ldr	r2, [pc, #164]	@ (8002f30 <HAL_DMA_Abort_IT+0x1b0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d036      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a28      	ldr	r2, [pc, #160]	@ (8002f34 <HAL_DMA_Abort_IT+0x1b4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d031      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a26      	ldr	r2, [pc, #152]	@ (8002f38 <HAL_DMA_Abort_IT+0x1b8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d02c      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a25      	ldr	r2, [pc, #148]	@ (8002f3c <HAL_DMA_Abort_IT+0x1bc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d027      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a23      	ldr	r2, [pc, #140]	@ (8002f40 <HAL_DMA_Abort_IT+0x1c0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d022      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a22      	ldr	r2, [pc, #136]	@ (8002f44 <HAL_DMA_Abort_IT+0x1c4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d01d      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a20      	ldr	r2, [pc, #128]	@ (8002f48 <HAL_DMA_Abort_IT+0x1c8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d018      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1f      	ldr	r2, [pc, #124]	@ (8002f4c <HAL_DMA_Abort_IT+0x1cc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d013      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f50 <HAL_DMA_Abort_IT+0x1d0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00e      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f54 <HAL_DMA_Abort_IT+0x1d4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d009      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1a      	ldr	r2, [pc, #104]	@ (8002f58 <HAL_DMA_Abort_IT+0x1d8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_DMA_Abort_IT+0x17c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a19      	ldr	r2, [pc, #100]	@ (8002f5c <HAL_DMA_Abort_IT+0x1dc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d108      	bne.n	8002f0e <HAL_DMA_Abort_IT+0x18e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e178      	b.n	8003200 <HAL_DMA_Abort_IT+0x480>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e16f      	b.n	8003200 <HAL_DMA_Abort_IT+0x480>
 8002f20:	40020010 	.word	0x40020010
 8002f24:	40020028 	.word	0x40020028
 8002f28:	40020040 	.word	0x40020040
 8002f2c:	40020058 	.word	0x40020058
 8002f30:	40020070 	.word	0x40020070
 8002f34:	40020088 	.word	0x40020088
 8002f38:	400200a0 	.word	0x400200a0
 8002f3c:	400200b8 	.word	0x400200b8
 8002f40:	40020410 	.word	0x40020410
 8002f44:	40020428 	.word	0x40020428
 8002f48:	40020440 	.word	0x40020440
 8002f4c:	40020458 	.word	0x40020458
 8002f50:	40020470 	.word	0x40020470
 8002f54:	40020488 	.word	0x40020488
 8002f58:	400204a0 	.word	0x400204a0
 8002f5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 020e 	bic.w	r2, r2, #14
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6c      	ldr	r2, [pc, #432]	@ (8003128 <HAL_DMA_Abort_IT+0x3a8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d04a      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6b      	ldr	r2, [pc, #428]	@ (800312c <HAL_DMA_Abort_IT+0x3ac>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d045      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a69      	ldr	r2, [pc, #420]	@ (8003130 <HAL_DMA_Abort_IT+0x3b0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d040      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a68      	ldr	r2, [pc, #416]	@ (8003134 <HAL_DMA_Abort_IT+0x3b4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d03b      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a66      	ldr	r2, [pc, #408]	@ (8003138 <HAL_DMA_Abort_IT+0x3b8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d036      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a65      	ldr	r2, [pc, #404]	@ (800313c <HAL_DMA_Abort_IT+0x3bc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d031      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a63      	ldr	r2, [pc, #396]	@ (8003140 <HAL_DMA_Abort_IT+0x3c0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02c      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a62      	ldr	r2, [pc, #392]	@ (8003144 <HAL_DMA_Abort_IT+0x3c4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d027      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a60      	ldr	r2, [pc, #384]	@ (8003148 <HAL_DMA_Abort_IT+0x3c8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d022      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5f      	ldr	r2, [pc, #380]	@ (800314c <HAL_DMA_Abort_IT+0x3cc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d01d      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8003150 <HAL_DMA_Abort_IT+0x3d0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d018      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a5c      	ldr	r2, [pc, #368]	@ (8003154 <HAL_DMA_Abort_IT+0x3d4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5a      	ldr	r2, [pc, #360]	@ (8003158 <HAL_DMA_Abort_IT+0x3d8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00e      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a59      	ldr	r2, [pc, #356]	@ (800315c <HAL_DMA_Abort_IT+0x3dc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a57      	ldr	r2, [pc, #348]	@ (8003160 <HAL_DMA_Abort_IT+0x3e0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_DMA_Abort_IT+0x290>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a56      	ldr	r2, [pc, #344]	@ (8003164 <HAL_DMA_Abort_IT+0x3e4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d108      	bne.n	8003022 <HAL_DMA_Abort_IT+0x2a2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e007      	b.n	8003032 <HAL_DMA_Abort_IT+0x2b2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3c      	ldr	r2, [pc, #240]	@ (8003128 <HAL_DMA_Abort_IT+0x3a8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d072      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3a      	ldr	r2, [pc, #232]	@ (800312c <HAL_DMA_Abort_IT+0x3ac>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d06d      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a39      	ldr	r2, [pc, #228]	@ (8003130 <HAL_DMA_Abort_IT+0x3b0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d068      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a37      	ldr	r2, [pc, #220]	@ (8003134 <HAL_DMA_Abort_IT+0x3b4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d063      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a36      	ldr	r2, [pc, #216]	@ (8003138 <HAL_DMA_Abort_IT+0x3b8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d05e      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a34      	ldr	r2, [pc, #208]	@ (800313c <HAL_DMA_Abort_IT+0x3bc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d059      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a33      	ldr	r2, [pc, #204]	@ (8003140 <HAL_DMA_Abort_IT+0x3c0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d054      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a31      	ldr	r2, [pc, #196]	@ (8003144 <HAL_DMA_Abort_IT+0x3c4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d04f      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a30      	ldr	r2, [pc, #192]	@ (8003148 <HAL_DMA_Abort_IT+0x3c8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d04a      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2e      	ldr	r2, [pc, #184]	@ (800314c <HAL_DMA_Abort_IT+0x3cc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d045      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2d      	ldr	r2, [pc, #180]	@ (8003150 <HAL_DMA_Abort_IT+0x3d0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d040      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003154 <HAL_DMA_Abort_IT+0x3d4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d03b      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003158 <HAL_DMA_Abort_IT+0x3d8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d036      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a28      	ldr	r2, [pc, #160]	@ (800315c <HAL_DMA_Abort_IT+0x3dc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d031      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a27      	ldr	r2, [pc, #156]	@ (8003160 <HAL_DMA_Abort_IT+0x3e0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d02c      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a25      	ldr	r2, [pc, #148]	@ (8003164 <HAL_DMA_Abort_IT+0x3e4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d027      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a24      	ldr	r2, [pc, #144]	@ (8003168 <HAL_DMA_Abort_IT+0x3e8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d022      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a22      	ldr	r2, [pc, #136]	@ (800316c <HAL_DMA_Abort_IT+0x3ec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01d      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a21      	ldr	r2, [pc, #132]	@ (8003170 <HAL_DMA_Abort_IT+0x3f0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d018      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003174 <HAL_DMA_Abort_IT+0x3f4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003178 <HAL_DMA_Abort_IT+0x3f8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00e      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1c      	ldr	r2, [pc, #112]	@ (800317c <HAL_DMA_Abort_IT+0x3fc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d009      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1b      	ldr	r2, [pc, #108]	@ (8003180 <HAL_DMA_Abort_IT+0x400>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d004      	beq.n	8003122 <HAL_DMA_Abort_IT+0x3a2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a19      	ldr	r2, [pc, #100]	@ (8003184 <HAL_DMA_Abort_IT+0x404>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d132      	bne.n	8003188 <HAL_DMA_Abort_IT+0x408>
 8003122:	2301      	movs	r3, #1
 8003124:	e031      	b.n	800318a <HAL_DMA_Abort_IT+0x40a>
 8003126:	bf00      	nop
 8003128:	40020010 	.word	0x40020010
 800312c:	40020028 	.word	0x40020028
 8003130:	40020040 	.word	0x40020040
 8003134:	40020058 	.word	0x40020058
 8003138:	40020070 	.word	0x40020070
 800313c:	40020088 	.word	0x40020088
 8003140:	400200a0 	.word	0x400200a0
 8003144:	400200b8 	.word	0x400200b8
 8003148:	40020410 	.word	0x40020410
 800314c:	40020428 	.word	0x40020428
 8003150:	40020440 	.word	0x40020440
 8003154:	40020458 	.word	0x40020458
 8003158:	40020470 	.word	0x40020470
 800315c:	40020488 	.word	0x40020488
 8003160:	400204a0 	.word	0x400204a0
 8003164:	400204b8 	.word	0x400204b8
 8003168:	58025408 	.word	0x58025408
 800316c:	5802541c 	.word	0x5802541c
 8003170:	58025430 	.word	0x58025430
 8003174:	58025444 	.word	0x58025444
 8003178:	58025458 	.word	0x58025458
 800317c:	5802546c 	.word	0x5802546c
 8003180:	58025480 	.word	0x58025480
 8003184:	58025494 	.word	0x58025494
 8003188:	2300      	movs	r3, #0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d028      	beq.n	80031e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800319c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2201      	movs	r2, #1
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	@ 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003218:	4b67      	ldr	r3, [pc, #412]	@ (80033b8 <HAL_DMA_IRQHandler+0x1ac>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a67      	ldr	r2, [pc, #412]	@ (80033bc <HAL_DMA_IRQHandler+0x1b0>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5f      	ldr	r2, [pc, #380]	@ (80033c0 <HAL_DMA_IRQHandler+0x1b4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d04a      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5d      	ldr	r2, [pc, #372]	@ (80033c4 <HAL_DMA_IRQHandler+0x1b8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d045      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5c      	ldr	r2, [pc, #368]	@ (80033c8 <HAL_DMA_IRQHandler+0x1bc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d040      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5a      	ldr	r2, [pc, #360]	@ (80033cc <HAL_DMA_IRQHandler+0x1c0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d03b      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a59      	ldr	r2, [pc, #356]	@ (80033d0 <HAL_DMA_IRQHandler+0x1c4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d036      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a57      	ldr	r2, [pc, #348]	@ (80033d4 <HAL_DMA_IRQHandler+0x1c8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d031      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a56      	ldr	r2, [pc, #344]	@ (80033d8 <HAL_DMA_IRQHandler+0x1cc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d02c      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a54      	ldr	r2, [pc, #336]	@ (80033dc <HAL_DMA_IRQHandler+0x1d0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d027      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a53      	ldr	r2, [pc, #332]	@ (80033e0 <HAL_DMA_IRQHandler+0x1d4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d022      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a51      	ldr	r2, [pc, #324]	@ (80033e4 <HAL_DMA_IRQHandler+0x1d8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01d      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a50      	ldr	r2, [pc, #320]	@ (80033e8 <HAL_DMA_IRQHandler+0x1dc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d018      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a4e      	ldr	r2, [pc, #312]	@ (80033ec <HAL_DMA_IRQHandler+0x1e0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a4d      	ldr	r2, [pc, #308]	@ (80033f0 <HAL_DMA_IRQHandler+0x1e4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00e      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a4b      	ldr	r2, [pc, #300]	@ (80033f4 <HAL_DMA_IRQHandler+0x1e8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a4a      	ldr	r2, [pc, #296]	@ (80033f8 <HAL_DMA_IRQHandler+0x1ec>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_IRQHandler+0xd2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a48      	ldr	r2, [pc, #288]	@ (80033fc <HAL_DMA_IRQHandler+0x1f0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_DMA_IRQHandler+0xd6>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 842b 	beq.w	8003b40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2208      	movs	r2, #8
 80032f4:	409a      	lsls	r2, r3
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80a2 	beq.w	8003444 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2e      	ldr	r2, [pc, #184]	@ (80033c0 <HAL_DMA_IRQHandler+0x1b4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2d      	ldr	r2, [pc, #180]	@ (80033c4 <HAL_DMA_IRQHandler+0x1b8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d045      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2b      	ldr	r2, [pc, #172]	@ (80033c8 <HAL_DMA_IRQHandler+0x1bc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d040      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2a      	ldr	r2, [pc, #168]	@ (80033cc <HAL_DMA_IRQHandler+0x1c0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d03b      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a28      	ldr	r2, [pc, #160]	@ (80033d0 <HAL_DMA_IRQHandler+0x1c4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d036      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a27      	ldr	r2, [pc, #156]	@ (80033d4 <HAL_DMA_IRQHandler+0x1c8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d031      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a25      	ldr	r2, [pc, #148]	@ (80033d8 <HAL_DMA_IRQHandler+0x1cc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02c      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a24      	ldr	r2, [pc, #144]	@ (80033dc <HAL_DMA_IRQHandler+0x1d0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d027      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a22      	ldr	r2, [pc, #136]	@ (80033e0 <HAL_DMA_IRQHandler+0x1d4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a21      	ldr	r2, [pc, #132]	@ (80033e4 <HAL_DMA_IRQHandler+0x1d8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01d      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1f      	ldr	r2, [pc, #124]	@ (80033e8 <HAL_DMA_IRQHandler+0x1dc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1e      	ldr	r2, [pc, #120]	@ (80033ec <HAL_DMA_IRQHandler+0x1e0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1c      	ldr	r2, [pc, #112]	@ (80033f0 <HAL_DMA_IRQHandler+0x1e4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1b      	ldr	r2, [pc, #108]	@ (80033f4 <HAL_DMA_IRQHandler+0x1e8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a19      	ldr	r2, [pc, #100]	@ (80033f8 <HAL_DMA_IRQHandler+0x1ec>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x194>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a18      	ldr	r2, [pc, #96]	@ (80033fc <HAL_DMA_IRQHandler+0x1f0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d12f      	bne.n	8003400 <HAL_DMA_IRQHandler+0x1f4>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e02e      	b.n	8003414 <HAL_DMA_IRQHandler+0x208>
 80033b6:	bf00      	nop
 80033b8:	2400d7a0 	.word	0x2400d7a0
 80033bc:	1b4e81b5 	.word	0x1b4e81b5
 80033c0:	40020010 	.word	0x40020010
 80033c4:	40020028 	.word	0x40020028
 80033c8:	40020040 	.word	0x40020040
 80033cc:	40020058 	.word	0x40020058
 80033d0:	40020070 	.word	0x40020070
 80033d4:	40020088 	.word	0x40020088
 80033d8:	400200a0 	.word	0x400200a0
 80033dc:	400200b8 	.word	0x400200b8
 80033e0:	40020410 	.word	0x40020410
 80033e4:	40020428 	.word	0x40020428
 80033e8:	40020440 	.word	0x40020440
 80033ec:	40020458 	.word	0x40020458
 80033f0:	40020470 	.word	0x40020470
 80033f4:	40020488 	.word	0x40020488
 80033f8:	400204a0 	.word	0x400204a0
 80033fc:	400204b8 	.word	0x400204b8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0204 	bic.w	r2, r2, #4
 8003426:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2208      	movs	r2, #8
 8003432:	409a      	lsls	r2, r3
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d06e      	beq.n	8003538 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a69      	ldr	r2, [pc, #420]	@ (8003604 <HAL_DMA_IRQHandler+0x3f8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d04a      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a67      	ldr	r2, [pc, #412]	@ (8003608 <HAL_DMA_IRQHandler+0x3fc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d045      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a66      	ldr	r2, [pc, #408]	@ (800360c <HAL_DMA_IRQHandler+0x400>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d040      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a64      	ldr	r2, [pc, #400]	@ (8003610 <HAL_DMA_IRQHandler+0x404>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d03b      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a63      	ldr	r2, [pc, #396]	@ (8003614 <HAL_DMA_IRQHandler+0x408>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d036      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a61      	ldr	r2, [pc, #388]	@ (8003618 <HAL_DMA_IRQHandler+0x40c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d031      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a60      	ldr	r2, [pc, #384]	@ (800361c <HAL_DMA_IRQHandler+0x410>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d02c      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003620 <HAL_DMA_IRQHandler+0x414>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d027      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003624 <HAL_DMA_IRQHandler+0x418>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a5b      	ldr	r2, [pc, #364]	@ (8003628 <HAL_DMA_IRQHandler+0x41c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01d      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a5a      	ldr	r2, [pc, #360]	@ (800362c <HAL_DMA_IRQHandler+0x420>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a58      	ldr	r2, [pc, #352]	@ (8003630 <HAL_DMA_IRQHandler+0x424>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a57      	ldr	r2, [pc, #348]	@ (8003634 <HAL_DMA_IRQHandler+0x428>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a55      	ldr	r2, [pc, #340]	@ (8003638 <HAL_DMA_IRQHandler+0x42c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a54      	ldr	r2, [pc, #336]	@ (800363c <HAL_DMA_IRQHandler+0x430>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2ee>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a52      	ldr	r2, [pc, #328]	@ (8003640 <HAL_DMA_IRQHandler+0x434>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10a      	bne.n	8003510 <HAL_DMA_IRQHandler+0x304>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e003      	b.n	8003518 <HAL_DMA_IRQHandler+0x30c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2201      	movs	r2, #1
 8003526:	409a      	lsls	r2, r3
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003530:	f043 0202 	orr.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2204      	movs	r2, #4
 8003542:	409a      	lsls	r2, r3
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 808f 	beq.w	800366c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <HAL_DMA_IRQHandler+0x3f8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d04a      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2a      	ldr	r2, [pc, #168]	@ (8003608 <HAL_DMA_IRQHandler+0x3fc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d045      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a29      	ldr	r2, [pc, #164]	@ (800360c <HAL_DMA_IRQHandler+0x400>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d040      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a27      	ldr	r2, [pc, #156]	@ (8003610 <HAL_DMA_IRQHandler+0x404>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d03b      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a26      	ldr	r2, [pc, #152]	@ (8003614 <HAL_DMA_IRQHandler+0x408>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d036      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a24      	ldr	r2, [pc, #144]	@ (8003618 <HAL_DMA_IRQHandler+0x40c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d031      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a23      	ldr	r2, [pc, #140]	@ (800361c <HAL_DMA_IRQHandler+0x410>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d02c      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a21      	ldr	r2, [pc, #132]	@ (8003620 <HAL_DMA_IRQHandler+0x414>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d027      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a20      	ldr	r2, [pc, #128]	@ (8003624 <HAL_DMA_IRQHandler+0x418>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003628 <HAL_DMA_IRQHandler+0x41c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01d      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	@ (800362c <HAL_DMA_IRQHandler+0x420>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <HAL_DMA_IRQHandler+0x424>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003634 <HAL_DMA_IRQHandler+0x428>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	@ (8003638 <HAL_DMA_IRQHandler+0x42c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a17      	ldr	r2, [pc, #92]	@ (800363c <HAL_DMA_IRQHandler+0x430>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_DMA_IRQHandler+0x3e2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <HAL_DMA_IRQHandler+0x434>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d12a      	bne.n	8003644 <HAL_DMA_IRQHandler+0x438>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e023      	b.n	800364c <HAL_DMA_IRQHandler+0x440>
 8003604:	40020010 	.word	0x40020010
 8003608:	40020028 	.word	0x40020028
 800360c:	40020040 	.word	0x40020040
 8003610:	40020058 	.word	0x40020058
 8003614:	40020070 	.word	0x40020070
 8003618:	40020088 	.word	0x40020088
 800361c:	400200a0 	.word	0x400200a0
 8003620:	400200b8 	.word	0x400200b8
 8003624:	40020410 	.word	0x40020410
 8003628:	40020428 	.word	0x40020428
 800362c:	40020440 	.word	0x40020440
 8003630:	40020458 	.word	0x40020458
 8003634:	40020470 	.word	0x40020470
 8003638:	40020488 	.word	0x40020488
 800363c:	400204a0 	.word	0x400204a0
 8003640:	400204b8 	.word	0x400204b8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2204      	movs	r2, #4
 800365a:	409a      	lsls	r2, r3
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2210      	movs	r2, #16
 8003676:	409a      	lsls	r2, r3
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a6 	beq.w	80037ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a85      	ldr	r2, [pc, #532]	@ (800389c <HAL_DMA_IRQHandler+0x690>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d04a      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a83      	ldr	r2, [pc, #524]	@ (80038a0 <HAL_DMA_IRQHandler+0x694>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d045      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a82      	ldr	r2, [pc, #520]	@ (80038a4 <HAL_DMA_IRQHandler+0x698>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d040      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a80      	ldr	r2, [pc, #512]	@ (80038a8 <HAL_DMA_IRQHandler+0x69c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d03b      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7f      	ldr	r2, [pc, #508]	@ (80038ac <HAL_DMA_IRQHandler+0x6a0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d036      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7d      	ldr	r2, [pc, #500]	@ (80038b0 <HAL_DMA_IRQHandler+0x6a4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7c      	ldr	r2, [pc, #496]	@ (80038b4 <HAL_DMA_IRQHandler+0x6a8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d02c      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a7a      	ldr	r2, [pc, #488]	@ (80038b8 <HAL_DMA_IRQHandler+0x6ac>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d027      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a79      	ldr	r2, [pc, #484]	@ (80038bc <HAL_DMA_IRQHandler+0x6b0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a77      	ldr	r2, [pc, #476]	@ (80038c0 <HAL_DMA_IRQHandler+0x6b4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a76      	ldr	r2, [pc, #472]	@ (80038c4 <HAL_DMA_IRQHandler+0x6b8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a74      	ldr	r2, [pc, #464]	@ (80038c8 <HAL_DMA_IRQHandler+0x6bc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a73      	ldr	r2, [pc, #460]	@ (80038cc <HAL_DMA_IRQHandler+0x6c0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a71      	ldr	r2, [pc, #452]	@ (80038d0 <HAL_DMA_IRQHandler+0x6c4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a70      	ldr	r2, [pc, #448]	@ (80038d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_IRQHandler+0x516>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6e      	ldr	r2, [pc, #440]	@ (80038d8 <HAL_DMA_IRQHandler+0x6cc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10a      	bne.n	8003738 <HAL_DMA_IRQHandler+0x52c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e009      	b.n	800374c <HAL_DMA_IRQHandler+0x540>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03e      	beq.n	80037ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2210      	movs	r2, #16
 800375a:	409a      	lsls	r2, r3
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d024      	beq.n	80037ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
 800378c:	e01f      	b.n	80037ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01b      	beq.n	80037ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
 800379e:	e016      	b.n	80037ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0208 	bic.w	r2, r2, #8
 80037bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2220      	movs	r2, #32
 80037d8:	409a      	lsls	r2, r3
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8110 	beq.w	8003a04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2c      	ldr	r2, [pc, #176]	@ (800389c <HAL_DMA_IRQHandler+0x690>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2b      	ldr	r2, [pc, #172]	@ (80038a0 <HAL_DMA_IRQHandler+0x694>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a29      	ldr	r2, [pc, #164]	@ (80038a4 <HAL_DMA_IRQHandler+0x698>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a28      	ldr	r2, [pc, #160]	@ (80038a8 <HAL_DMA_IRQHandler+0x69c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a26      	ldr	r2, [pc, #152]	@ (80038ac <HAL_DMA_IRQHandler+0x6a0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a25      	ldr	r2, [pc, #148]	@ (80038b0 <HAL_DMA_IRQHandler+0x6a4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a23      	ldr	r2, [pc, #140]	@ (80038b4 <HAL_DMA_IRQHandler+0x6a8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a22      	ldr	r2, [pc, #136]	@ (80038b8 <HAL_DMA_IRQHandler+0x6ac>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a20      	ldr	r2, [pc, #128]	@ (80038bc <HAL_DMA_IRQHandler+0x6b0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1f      	ldr	r2, [pc, #124]	@ (80038c0 <HAL_DMA_IRQHandler+0x6b4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1d      	ldr	r2, [pc, #116]	@ (80038c4 <HAL_DMA_IRQHandler+0x6b8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1c      	ldr	r2, [pc, #112]	@ (80038c8 <HAL_DMA_IRQHandler+0x6bc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1a      	ldr	r2, [pc, #104]	@ (80038cc <HAL_DMA_IRQHandler+0x6c0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <HAL_DMA_IRQHandler+0x6c4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a17      	ldr	r2, [pc, #92]	@ (80038d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_IRQHandler+0x678>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <HAL_DMA_IRQHandler+0x6cc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d12b      	bne.n	80038dc <HAL_DMA_IRQHandler+0x6d0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e02a      	b.n	80038f0 <HAL_DMA_IRQHandler+0x6e4>
 800389a:	bf00      	nop
 800389c:	40020010 	.word	0x40020010
 80038a0:	40020028 	.word	0x40020028
 80038a4:	40020040 	.word	0x40020040
 80038a8:	40020058 	.word	0x40020058
 80038ac:	40020070 	.word	0x40020070
 80038b0:	40020088 	.word	0x40020088
 80038b4:	400200a0 	.word	0x400200a0
 80038b8:	400200b8 	.word	0x400200b8
 80038bc:	40020410 	.word	0x40020410
 80038c0:	40020428 	.word	0x40020428
 80038c4:	40020440 	.word	0x40020440
 80038c8:	40020458 	.word	0x40020458
 80038cc:	40020470 	.word	0x40020470
 80038d0:	40020488 	.word	0x40020488
 80038d4:	400204a0 	.word	0x400204a0
 80038d8:	400204b8 	.word	0x400204b8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf14      	ite	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	2300      	moveq	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8087 	beq.w	8003a04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	2220      	movs	r2, #32
 8003900:	409a      	lsls	r2, r3
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b04      	cmp	r3, #4
 8003910:	d139      	bne.n	8003986 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0216 	bic.w	r2, r2, #22
 8003920:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003930:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <HAL_DMA_IRQHandler+0x736>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0208 	bic.w	r2, r2, #8
 8003950:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	223f      	movs	r2, #63	@ 0x3f
 800395c:	409a      	lsls	r2, r3
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8382 	beq.w	8004080 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
          }
          return;
 8003984:	e37c      	b.n	8004080 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d018      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d108      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d02c      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
 80039b2:	e027      	b.n	8003a04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d023      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
 80039c4:	e01e      	b.n	8003a04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10f      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0210 	bic.w	r2, r2, #16
 80039e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 833e 	beq.w	800408a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8088 	beq.w	8003b2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a89      	ldr	r2, [pc, #548]	@ (8003c50 <HAL_DMA_IRQHandler+0xa44>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d04a      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a88      	ldr	r2, [pc, #544]	@ (8003c54 <HAL_DMA_IRQHandler+0xa48>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d045      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a86      	ldr	r2, [pc, #536]	@ (8003c58 <HAL_DMA_IRQHandler+0xa4c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d040      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a85      	ldr	r2, [pc, #532]	@ (8003c5c <HAL_DMA_IRQHandler+0xa50>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d03b      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a83      	ldr	r2, [pc, #524]	@ (8003c60 <HAL_DMA_IRQHandler+0xa54>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d036      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a82      	ldr	r2, [pc, #520]	@ (8003c64 <HAL_DMA_IRQHandler+0xa58>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d031      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a80      	ldr	r2, [pc, #512]	@ (8003c68 <HAL_DMA_IRQHandler+0xa5c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02c      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7f      	ldr	r2, [pc, #508]	@ (8003c6c <HAL_DMA_IRQHandler+0xa60>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d027      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a7d      	ldr	r2, [pc, #500]	@ (8003c70 <HAL_DMA_IRQHandler+0xa64>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d022      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a7c      	ldr	r2, [pc, #496]	@ (8003c74 <HAL_DMA_IRQHandler+0xa68>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d01d      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c78 <HAL_DMA_IRQHandler+0xa6c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d018      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a79      	ldr	r2, [pc, #484]	@ (8003c7c <HAL_DMA_IRQHandler+0xa70>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a77      	ldr	r2, [pc, #476]	@ (8003c80 <HAL_DMA_IRQHandler+0xa74>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a76      	ldr	r2, [pc, #472]	@ (8003c84 <HAL_DMA_IRQHandler+0xa78>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a74      	ldr	r2, [pc, #464]	@ (8003c88 <HAL_DMA_IRQHandler+0xa7c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x8b8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a73      	ldr	r2, [pc, #460]	@ (8003c8c <HAL_DMA_IRQHandler+0xa80>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <HAL_DMA_IRQHandler+0x8ca>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e007      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x8da>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d307      	bcc.n	8003b02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f2      	bne.n	8003ae6 <HAL_DMA_IRQHandler+0x8da>
 8003b00:	e000      	b.n	8003b04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b1a:	e003      	b.n	8003b24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 82aa 	beq.w	800408a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
 8003b3e:	e2a4      	b.n	800408a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a52      	ldr	r2, [pc, #328]	@ (8003c90 <HAL_DMA_IRQHandler+0xa84>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d04a      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a51      	ldr	r2, [pc, #324]	@ (8003c94 <HAL_DMA_IRQHandler+0xa88>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d045      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4f      	ldr	r2, [pc, #316]	@ (8003c98 <HAL_DMA_IRQHandler+0xa8c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d040      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4e      	ldr	r2, [pc, #312]	@ (8003c9c <HAL_DMA_IRQHandler+0xa90>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d03b      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ca0 <HAL_DMA_IRQHandler+0xa94>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d036      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca4 <HAL_DMA_IRQHandler+0xa98>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d031      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a49      	ldr	r2, [pc, #292]	@ (8003ca8 <HAL_DMA_IRQHandler+0xa9c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d02c      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a48      	ldr	r2, [pc, #288]	@ (8003cac <HAL_DMA_IRQHandler+0xaa0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d027      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a46      	ldr	r2, [pc, #280]	@ (8003cb0 <HAL_DMA_IRQHandler+0xaa4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d022      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a45      	ldr	r2, [pc, #276]	@ (8003cb4 <HAL_DMA_IRQHandler+0xaa8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01d      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a43      	ldr	r2, [pc, #268]	@ (8003cb8 <HAL_DMA_IRQHandler+0xaac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a42      	ldr	r2, [pc, #264]	@ (8003cbc <HAL_DMA_IRQHandler+0xab0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a40      	ldr	r2, [pc, #256]	@ (8003cc0 <HAL_DMA_IRQHandler+0xab4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc4 <HAL_DMA_IRQHandler+0xab8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8003cc8 <HAL_DMA_IRQHandler+0xabc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x9d4>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3c      	ldr	r2, [pc, #240]	@ (8003ccc <HAL_DMA_IRQHandler+0xac0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_DMA_IRQHandler+0x9d8>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_DMA_IRQHandler+0x9da>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 824f 	beq.w	800408a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80dd 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0xbb8>
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80d7 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2204      	movs	r2, #4
 8003c20:	409a      	lsls	r2, r3
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d059      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d14a      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8220 	beq.w	8004084 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c4c:	e21a      	b.n	8004084 <HAL_DMA_IRQHandler+0xe78>
 8003c4e:	bf00      	nop
 8003c50:	40020010 	.word	0x40020010
 8003c54:	40020028 	.word	0x40020028
 8003c58:	40020040 	.word	0x40020040
 8003c5c:	40020058 	.word	0x40020058
 8003c60:	40020070 	.word	0x40020070
 8003c64:	40020088 	.word	0x40020088
 8003c68:	400200a0 	.word	0x400200a0
 8003c6c:	400200b8 	.word	0x400200b8
 8003c70:	40020410 	.word	0x40020410
 8003c74:	40020428 	.word	0x40020428
 8003c78:	40020440 	.word	0x40020440
 8003c7c:	40020458 	.word	0x40020458
 8003c80:	40020470 	.word	0x40020470
 8003c84:	40020488 	.word	0x40020488
 8003c88:	400204a0 	.word	0x400204a0
 8003c8c:	400204b8 	.word	0x400204b8
 8003c90:	48022c08 	.word	0x48022c08
 8003c94:	48022c1c 	.word	0x48022c1c
 8003c98:	48022c30 	.word	0x48022c30
 8003c9c:	48022c44 	.word	0x48022c44
 8003ca0:	48022c58 	.word	0x48022c58
 8003ca4:	48022c6c 	.word	0x48022c6c
 8003ca8:	48022c80 	.word	0x48022c80
 8003cac:	48022c94 	.word	0x48022c94
 8003cb0:	58025408 	.word	0x58025408
 8003cb4:	5802541c 	.word	0x5802541c
 8003cb8:	58025430 	.word	0x58025430
 8003cbc:	58025444 	.word	0x58025444
 8003cc0:	58025458 	.word	0x58025458
 8003cc4:	5802546c 	.word	0x5802546c
 8003cc8:	58025480 	.word	0x58025480
 8003ccc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 81d5 	beq.w	8004084 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce2:	e1cf      	b.n	8004084 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d160      	bne.n	8003db0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef0 <HAL_DMA_IRQHandler+0xce4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d04a      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a7d      	ldr	r2, [pc, #500]	@ (8003ef4 <HAL_DMA_IRQHandler+0xce8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d045      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a7c      	ldr	r2, [pc, #496]	@ (8003ef8 <HAL_DMA_IRQHandler+0xcec>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d040      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a7a      	ldr	r2, [pc, #488]	@ (8003efc <HAL_DMA_IRQHandler+0xcf0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d03b      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a79      	ldr	r2, [pc, #484]	@ (8003f00 <HAL_DMA_IRQHandler+0xcf4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d036      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a77      	ldr	r2, [pc, #476]	@ (8003f04 <HAL_DMA_IRQHandler+0xcf8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d031      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a76      	ldr	r2, [pc, #472]	@ (8003f08 <HAL_DMA_IRQHandler+0xcfc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d02c      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a74      	ldr	r2, [pc, #464]	@ (8003f0c <HAL_DMA_IRQHandler+0xd00>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d027      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a73      	ldr	r2, [pc, #460]	@ (8003f10 <HAL_DMA_IRQHandler+0xd04>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d022      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a71      	ldr	r2, [pc, #452]	@ (8003f14 <HAL_DMA_IRQHandler+0xd08>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a70      	ldr	r2, [pc, #448]	@ (8003f18 <HAL_DMA_IRQHandler+0xd0c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a6e      	ldr	r2, [pc, #440]	@ (8003f1c <HAL_DMA_IRQHandler+0xd10>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6d      	ldr	r2, [pc, #436]	@ (8003f20 <HAL_DMA_IRQHandler+0xd14>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6b      	ldr	r2, [pc, #428]	@ (8003f24 <HAL_DMA_IRQHandler+0xd18>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003f28 <HAL_DMA_IRQHandler+0xd1c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xb82>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a68      	ldr	r2, [pc, #416]	@ (8003f2c <HAL_DMA_IRQHandler+0xd20>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <HAL_DMA_IRQHandler+0xb94>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0208 	bic.w	r2, r2, #8
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e007      	b.n	8003db0 <HAL_DMA_IRQHandler+0xba4>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8165 	beq.w	8004084 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc2:	e15f      	b.n	8004084 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2202      	movs	r2, #2
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80c5 	beq.w	8003f64 <HAL_DMA_IRQHandler+0xd58>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80bf 	beq.w	8003f64 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	2202      	movs	r2, #2
 8003df0:	409a      	lsls	r2, r3
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d018      	beq.n	8003e32 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 813a 	beq.w	8004088 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e1c:	e134      	b.n	8004088 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8130 	beq.w	8004088 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e30:	e12a      	b.n	8004088 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 8089 	bne.w	8003f50 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef0 <HAL_DMA_IRQHandler+0xce4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d04a      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a29      	ldr	r2, [pc, #164]	@ (8003ef4 <HAL_DMA_IRQHandler+0xce8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d045      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a28      	ldr	r2, [pc, #160]	@ (8003ef8 <HAL_DMA_IRQHandler+0xcec>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d040      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a26      	ldr	r2, [pc, #152]	@ (8003efc <HAL_DMA_IRQHandler+0xcf0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d03b      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <HAL_DMA_IRQHandler+0xcf4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d036      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a23      	ldr	r2, [pc, #140]	@ (8003f04 <HAL_DMA_IRQHandler+0xcf8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d031      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a22      	ldr	r2, [pc, #136]	@ (8003f08 <HAL_DMA_IRQHandler+0xcfc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d02c      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a20      	ldr	r2, [pc, #128]	@ (8003f0c <HAL_DMA_IRQHandler+0xd00>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d027      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1f      	ldr	r2, [pc, #124]	@ (8003f10 <HAL_DMA_IRQHandler+0xd04>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f14 <HAL_DMA_IRQHandler+0xd08>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01d      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f18 <HAL_DMA_IRQHandler+0xd0c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f1c <HAL_DMA_IRQHandler+0xd10>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a19      	ldr	r2, [pc, #100]	@ (8003f20 <HAL_DMA_IRQHandler+0xd14>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a17      	ldr	r2, [pc, #92]	@ (8003f24 <HAL_DMA_IRQHandler+0xd18>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a16      	ldr	r2, [pc, #88]	@ (8003f28 <HAL_DMA_IRQHandler+0xd1c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_IRQHandler+0xcd2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <HAL_DMA_IRQHandler+0xd20>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d128      	bne.n	8003f30 <HAL_DMA_IRQHandler+0xd24>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0214 	bic.w	r2, r2, #20
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e027      	b.n	8003f40 <HAL_DMA_IRQHandler+0xd34>
 8003ef0:	40020010 	.word	0x40020010
 8003ef4:	40020028 	.word	0x40020028
 8003ef8:	40020040 	.word	0x40020040
 8003efc:	40020058 	.word	0x40020058
 8003f00:	40020070 	.word	0x40020070
 8003f04:	40020088 	.word	0x40020088
 8003f08:	400200a0 	.word	0x400200a0
 8003f0c:	400200b8 	.word	0x400200b8
 8003f10:	40020410 	.word	0x40020410
 8003f14:	40020428 	.word	0x40020428
 8003f18:	40020440 	.word	0x40020440
 8003f1c:	40020458 	.word	0x40020458
 8003f20:	40020470 	.word	0x40020470
 8003f24:	40020488 	.word	0x40020488
 8003f28:	400204a0 	.word	0x400204a0
 8003f2c:	400204b8 	.word	0x400204b8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 020a 	bic.w	r2, r2, #10
 8003f3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8097 	beq.w	8004088 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f62:	e091      	b.n	8004088 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8088 	beq.w	800408a <HAL_DMA_IRQHandler+0xe7e>
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8082 	beq.w	800408a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a41      	ldr	r2, [pc, #260]	@ (8004090 <HAL_DMA_IRQHandler+0xe84>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04a      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3f      	ldr	r2, [pc, #252]	@ (8004094 <HAL_DMA_IRQHandler+0xe88>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d045      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8004098 <HAL_DMA_IRQHandler+0xe8c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d040      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800409c <HAL_DMA_IRQHandler+0xe90>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d03b      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80040a0 <HAL_DMA_IRQHandler+0xe94>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d036      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a39      	ldr	r2, [pc, #228]	@ (80040a4 <HAL_DMA_IRQHandler+0xe98>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d031      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a38      	ldr	r2, [pc, #224]	@ (80040a8 <HAL_DMA_IRQHandler+0xe9c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d02c      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a36      	ldr	r2, [pc, #216]	@ (80040ac <HAL_DMA_IRQHandler+0xea0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d027      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a35      	ldr	r2, [pc, #212]	@ (80040b0 <HAL_DMA_IRQHandler+0xea4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a33      	ldr	r2, [pc, #204]	@ (80040b4 <HAL_DMA_IRQHandler+0xea8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a32      	ldr	r2, [pc, #200]	@ (80040b8 <HAL_DMA_IRQHandler+0xeac>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a30      	ldr	r2, [pc, #192]	@ (80040bc <HAL_DMA_IRQHandler+0xeb0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2f      	ldr	r2, [pc, #188]	@ (80040c0 <HAL_DMA_IRQHandler+0xeb4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2d      	ldr	r2, [pc, #180]	@ (80040c4 <HAL_DMA_IRQHandler+0xeb8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2c      	ldr	r2, [pc, #176]	@ (80040c8 <HAL_DMA_IRQHandler+0xebc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_DMA_IRQHandler+0xe1a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <HAL_DMA_IRQHandler+0xec0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <HAL_DMA_IRQHandler+0xe2c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 021c 	bic.w	r2, r2, #28
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e007      	b.n	8004048 <HAL_DMA_IRQHandler+0xe3c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 020e 	bic.w	r2, r2, #14
 8004046:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
 800407e:	e004      	b.n	800408a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004080:	bf00      	nop
 8004082:	e002      	b.n	800408a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004088:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800408a:	3728      	adds	r7, #40	@ 0x28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40020010 	.word	0x40020010
 8004094:	40020028 	.word	0x40020028
 8004098:	40020040 	.word	0x40020040
 800409c:	40020058 	.word	0x40020058
 80040a0:	40020070 	.word	0x40020070
 80040a4:	40020088 	.word	0x40020088
 80040a8:	400200a0 	.word	0x400200a0
 80040ac:	400200b8 	.word	0x400200b8
 80040b0:	40020410 	.word	0x40020410
 80040b4:	40020428 	.word	0x40020428
 80040b8:	40020440 	.word	0x40020440
 80040bc:	40020458 	.word	0x40020458
 80040c0:	40020470 	.word	0x40020470
 80040c4:	40020488 	.word	0x40020488
 80040c8:	400204a0 	.word	0x400204a0
 80040cc:	400204b8 	.word	0x400204b8

080040d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7f      	ldr	r2, [pc, #508]	@ (80042ec <DMA_SetConfig+0x21c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d072      	beq.n	80041da <DMA_SetConfig+0x10a>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a7d      	ldr	r2, [pc, #500]	@ (80042f0 <DMA_SetConfig+0x220>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d06d      	beq.n	80041da <DMA_SetConfig+0x10a>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7c      	ldr	r2, [pc, #496]	@ (80042f4 <DMA_SetConfig+0x224>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d068      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7a      	ldr	r2, [pc, #488]	@ (80042f8 <DMA_SetConfig+0x228>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d063      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a79      	ldr	r2, [pc, #484]	@ (80042fc <DMA_SetConfig+0x22c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d05e      	beq.n	80041da <DMA_SetConfig+0x10a>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a77      	ldr	r2, [pc, #476]	@ (8004300 <DMA_SetConfig+0x230>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d059      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a76      	ldr	r2, [pc, #472]	@ (8004304 <DMA_SetConfig+0x234>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d054      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a74      	ldr	r2, [pc, #464]	@ (8004308 <DMA_SetConfig+0x238>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d04f      	beq.n	80041da <DMA_SetConfig+0x10a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a73      	ldr	r2, [pc, #460]	@ (800430c <DMA_SetConfig+0x23c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d04a      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a71      	ldr	r2, [pc, #452]	@ (8004310 <DMA_SetConfig+0x240>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d045      	beq.n	80041da <DMA_SetConfig+0x10a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a70      	ldr	r2, [pc, #448]	@ (8004314 <DMA_SetConfig+0x244>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d040      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a6e      	ldr	r2, [pc, #440]	@ (8004318 <DMA_SetConfig+0x248>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d03b      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a6d      	ldr	r2, [pc, #436]	@ (800431c <DMA_SetConfig+0x24c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d036      	beq.n	80041da <DMA_SetConfig+0x10a>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6b      	ldr	r2, [pc, #428]	@ (8004320 <DMA_SetConfig+0x250>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d031      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6a      	ldr	r2, [pc, #424]	@ (8004324 <DMA_SetConfig+0x254>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d02c      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a68      	ldr	r2, [pc, #416]	@ (8004328 <DMA_SetConfig+0x258>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d027      	beq.n	80041da <DMA_SetConfig+0x10a>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a67      	ldr	r2, [pc, #412]	@ (800432c <DMA_SetConfig+0x25c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d022      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a65      	ldr	r2, [pc, #404]	@ (8004330 <DMA_SetConfig+0x260>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01d      	beq.n	80041da <DMA_SetConfig+0x10a>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a64      	ldr	r2, [pc, #400]	@ (8004334 <DMA_SetConfig+0x264>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a62      	ldr	r2, [pc, #392]	@ (8004338 <DMA_SetConfig+0x268>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a61      	ldr	r2, [pc, #388]	@ (800433c <DMA_SetConfig+0x26c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a5f      	ldr	r2, [pc, #380]	@ (8004340 <DMA_SetConfig+0x270>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004344 <DMA_SetConfig+0x274>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a5c      	ldr	r2, [pc, #368]	@ (8004348 <DMA_SetConfig+0x278>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <DMA_SetConfig+0x10e>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <DMA_SetConfig+0x110>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00d      	beq.n	8004200 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a39      	ldr	r2, [pc, #228]	@ (80042ec <DMA_SetConfig+0x21c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04a      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a38      	ldr	r2, [pc, #224]	@ (80042f0 <DMA_SetConfig+0x220>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d045      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a36      	ldr	r2, [pc, #216]	@ (80042f4 <DMA_SetConfig+0x224>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a35      	ldr	r2, [pc, #212]	@ (80042f8 <DMA_SetConfig+0x228>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d03b      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a33      	ldr	r2, [pc, #204]	@ (80042fc <DMA_SetConfig+0x22c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d036      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a32      	ldr	r2, [pc, #200]	@ (8004300 <DMA_SetConfig+0x230>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d031      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a30      	ldr	r2, [pc, #192]	@ (8004304 <DMA_SetConfig+0x234>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02c      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2f      	ldr	r2, [pc, #188]	@ (8004308 <DMA_SetConfig+0x238>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d027      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2d      	ldr	r2, [pc, #180]	@ (800430c <DMA_SetConfig+0x23c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2c      	ldr	r2, [pc, #176]	@ (8004310 <DMA_SetConfig+0x240>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2a      	ldr	r2, [pc, #168]	@ (8004314 <DMA_SetConfig+0x244>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a29      	ldr	r2, [pc, #164]	@ (8004318 <DMA_SetConfig+0x248>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a27      	ldr	r2, [pc, #156]	@ (800431c <DMA_SetConfig+0x24c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a26      	ldr	r2, [pc, #152]	@ (8004320 <DMA_SetConfig+0x250>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a24      	ldr	r2, [pc, #144]	@ (8004324 <DMA_SetConfig+0x254>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a23      	ldr	r2, [pc, #140]	@ (8004328 <DMA_SetConfig+0x258>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <DMA_SetConfig+0x1d4>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <DMA_SetConfig+0x1d6>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d059      	beq.n	800435e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	223f      	movs	r2, #63	@ 0x3f
 80042b4:	409a      	lsls	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b40      	cmp	r3, #64	@ 0x40
 80042d8:	d138      	bne.n	800434c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042ea:	e0ae      	b.n	800444a <DMA_SetConfig+0x37a>
 80042ec:	40020010 	.word	0x40020010
 80042f0:	40020028 	.word	0x40020028
 80042f4:	40020040 	.word	0x40020040
 80042f8:	40020058 	.word	0x40020058
 80042fc:	40020070 	.word	0x40020070
 8004300:	40020088 	.word	0x40020088
 8004304:	400200a0 	.word	0x400200a0
 8004308:	400200b8 	.word	0x400200b8
 800430c:	40020410 	.word	0x40020410
 8004310:	40020428 	.word	0x40020428
 8004314:	40020440 	.word	0x40020440
 8004318:	40020458 	.word	0x40020458
 800431c:	40020470 	.word	0x40020470
 8004320:	40020488 	.word	0x40020488
 8004324:	400204a0 	.word	0x400204a0
 8004328:	400204b8 	.word	0x400204b8
 800432c:	58025408 	.word	0x58025408
 8004330:	5802541c 	.word	0x5802541c
 8004334:	58025430 	.word	0x58025430
 8004338:	58025444 	.word	0x58025444
 800433c:	58025458 	.word	0x58025458
 8004340:	5802546c 	.word	0x5802546c
 8004344:	58025480 	.word	0x58025480
 8004348:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
}
 800435c:	e075      	b.n	800444a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a3d      	ldr	r2, [pc, #244]	@ (8004458 <DMA_SetConfig+0x388>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d04a      	beq.n	80043fe <DMA_SetConfig+0x32e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3b      	ldr	r2, [pc, #236]	@ (800445c <DMA_SetConfig+0x38c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d045      	beq.n	80043fe <DMA_SetConfig+0x32e>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a3a      	ldr	r2, [pc, #232]	@ (8004460 <DMA_SetConfig+0x390>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d040      	beq.n	80043fe <DMA_SetConfig+0x32e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a38      	ldr	r2, [pc, #224]	@ (8004464 <DMA_SetConfig+0x394>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d03b      	beq.n	80043fe <DMA_SetConfig+0x32e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a37      	ldr	r2, [pc, #220]	@ (8004468 <DMA_SetConfig+0x398>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d036      	beq.n	80043fe <DMA_SetConfig+0x32e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a35      	ldr	r2, [pc, #212]	@ (800446c <DMA_SetConfig+0x39c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d031      	beq.n	80043fe <DMA_SetConfig+0x32e>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a34      	ldr	r2, [pc, #208]	@ (8004470 <DMA_SetConfig+0x3a0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d02c      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a32      	ldr	r2, [pc, #200]	@ (8004474 <DMA_SetConfig+0x3a4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d027      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a31      	ldr	r2, [pc, #196]	@ (8004478 <DMA_SetConfig+0x3a8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d022      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a2f      	ldr	r2, [pc, #188]	@ (800447c <DMA_SetConfig+0x3ac>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01d      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004480 <DMA_SetConfig+0x3b0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d018      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004484 <DMA_SetConfig+0x3b4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2b      	ldr	r2, [pc, #172]	@ (8004488 <DMA_SetConfig+0x3b8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00e      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a29      	ldr	r2, [pc, #164]	@ (800448c <DMA_SetConfig+0x3bc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d009      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a28      	ldr	r2, [pc, #160]	@ (8004490 <DMA_SetConfig+0x3c0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <DMA_SetConfig+0x32e>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a26      	ldr	r2, [pc, #152]	@ (8004494 <DMA_SetConfig+0x3c4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <DMA_SetConfig+0x332>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <DMA_SetConfig+0x334>
 8004402:	2300      	movs	r3, #0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b40      	cmp	r3, #64	@ 0x40
 8004426:	d108      	bne.n	800443a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	60da      	str	r2, [r3, #12]
}
 8004438:	e007      	b.n	800444a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	60da      	str	r2, [r3, #12]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	48022c08 	.word	0x48022c08
 800445c:	48022c1c 	.word	0x48022c1c
 8004460:	48022c30 	.word	0x48022c30
 8004464:	48022c44 	.word	0x48022c44
 8004468:	48022c58 	.word	0x48022c58
 800446c:	48022c6c 	.word	0x48022c6c
 8004470:	48022c80 	.word	0x48022c80
 8004474:	48022c94 	.word	0x48022c94
 8004478:	58025408 	.word	0x58025408
 800447c:	5802541c 	.word	0x5802541c
 8004480:	58025430 	.word	0x58025430
 8004484:	58025444 	.word	0x58025444
 8004488:	58025458 	.word	0x58025458
 800448c:	5802546c 	.word	0x5802546c
 8004490:	58025480 	.word	0x58025480
 8004494:	58025494 	.word	0x58025494

08004498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a42      	ldr	r2, [pc, #264]	@ (80045b0 <DMA_CalcBaseAndBitshift+0x118>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d04a      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a41      	ldr	r2, [pc, #260]	@ (80045b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d045      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3f      	ldr	r2, [pc, #252]	@ (80045b8 <DMA_CalcBaseAndBitshift+0x120>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d040      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3e      	ldr	r2, [pc, #248]	@ (80045bc <DMA_CalcBaseAndBitshift+0x124>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d03b      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3c      	ldr	r2, [pc, #240]	@ (80045c0 <DMA_CalcBaseAndBitshift+0x128>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d036      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3b      	ldr	r2, [pc, #236]	@ (80045c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d031      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a39      	ldr	r2, [pc, #228]	@ (80045c8 <DMA_CalcBaseAndBitshift+0x130>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d02c      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a38      	ldr	r2, [pc, #224]	@ (80045cc <DMA_CalcBaseAndBitshift+0x134>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d027      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a36      	ldr	r2, [pc, #216]	@ (80045d0 <DMA_CalcBaseAndBitshift+0x138>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d022      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a35      	ldr	r2, [pc, #212]	@ (80045d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d01d      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a33      	ldr	r2, [pc, #204]	@ (80045d8 <DMA_CalcBaseAndBitshift+0x140>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d018      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a32      	ldr	r2, [pc, #200]	@ (80045dc <DMA_CalcBaseAndBitshift+0x144>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a30      	ldr	r2, [pc, #192]	@ (80045e0 <DMA_CalcBaseAndBitshift+0x148>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2f      	ldr	r2, [pc, #188]	@ (80045e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2d      	ldr	r2, [pc, #180]	@ (80045e8 <DMA_CalcBaseAndBitshift+0x150>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <DMA_CalcBaseAndBitshift+0xa8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2c      	ldr	r2, [pc, #176]	@ (80045ec <DMA_CalcBaseAndBitshift+0x154>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d101      	bne.n	8004544 <DMA_CalcBaseAndBitshift+0xac>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <DMA_CalcBaseAndBitshift+0xae>
 8004544:	2300      	movs	r3, #0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d024      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3b10      	subs	r3, #16
 8004552:	4a27      	ldr	r2, [pc, #156]	@ (80045f0 <DMA_CalcBaseAndBitshift+0x158>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	4a24      	ldr	r2, [pc, #144]	@ (80045f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004564:	5cd3      	ldrb	r3, [r2, r3]
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d908      	bls.n	8004584 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	4b1f      	ldr	r3, [pc, #124]	@ (80045f8 <DMA_CalcBaseAndBitshift+0x160>)
 800457a:	4013      	ands	r3, r2
 800457c:	1d1a      	adds	r2, r3, #4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	659a      	str	r2, [r3, #88]	@ 0x58
 8004582:	e00d      	b.n	80045a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <DMA_CalcBaseAndBitshift+0x160>)
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6593      	str	r3, [r2, #88]	@ 0x58
 8004592:	e005      	b.n	80045a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40020010 	.word	0x40020010
 80045b4:	40020028 	.word	0x40020028
 80045b8:	40020040 	.word	0x40020040
 80045bc:	40020058 	.word	0x40020058
 80045c0:	40020070 	.word	0x40020070
 80045c4:	40020088 	.word	0x40020088
 80045c8:	400200a0 	.word	0x400200a0
 80045cc:	400200b8 	.word	0x400200b8
 80045d0:	40020410 	.word	0x40020410
 80045d4:	40020428 	.word	0x40020428
 80045d8:	40020440 	.word	0x40020440
 80045dc:	40020458 	.word	0x40020458
 80045e0:	40020470 	.word	0x40020470
 80045e4:	40020488 	.word	0x40020488
 80045e8:	400204a0 	.word	0x400204a0
 80045ec:	400204b8 	.word	0x400204b8
 80045f0:	aaaaaaab 	.word	0xaaaaaaab
 80045f4:	0800baf0 	.word	0x0800baf0
 80045f8:	fffffc00 	.word	0xfffffc00

080045fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d120      	bne.n	8004652 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004614:	2b03      	cmp	r3, #3
 8004616:	d858      	bhi.n	80046ca <DMA_CheckFifoParam+0xce>
 8004618:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <DMA_CheckFifoParam+0x24>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004631 	.word	0x08004631
 8004624:	08004643 	.word	0x08004643
 8004628:	08004631 	.word	0x08004631
 800462c:	080046cb 	.word	0x080046cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d048      	beq.n	80046ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004640:	e045      	b.n	80046ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800464a:	d142      	bne.n	80046d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004650:	e03f      	b.n	80046d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800465a:	d123      	bne.n	80046a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	2b03      	cmp	r3, #3
 8004662:	d838      	bhi.n	80046d6 <DMA_CheckFifoParam+0xda>
 8004664:	a201      	add	r2, pc, #4	@ (adr r2, 800466c <DMA_CheckFifoParam+0x70>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	0800467d 	.word	0x0800467d
 8004670:	08004683 	.word	0x08004683
 8004674:	0800467d 	.word	0x0800467d
 8004678:	08004695 	.word	0x08004695
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
        break;
 8004680:	e030      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d025      	beq.n	80046da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004692:	e022      	b.n	80046da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800469c:	d11f      	bne.n	80046de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046a2:	e01c      	b.n	80046de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d902      	bls.n	80046b2 <DMA_CheckFifoParam+0xb6>
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d003      	beq.n	80046b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80046b0:	e018      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
        break;
 80046b6:	e015      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00e      	beq.n	80046e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
    break;
 80046c8:	e00b      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
        break;
 80046ca:	bf00      	nop
 80046cc:	e00a      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>
        break;
 80046ce:	bf00      	nop
 80046d0:	e008      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>
        break;
 80046d2:	bf00      	nop
 80046d4:	e006      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>
        break;
 80046d6:	bf00      	nop
 80046d8:	e004      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>
        break;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>
        break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <DMA_CheckFifoParam+0xe8>
    break;
 80046e2:	bf00      	nop
    }
  }

  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop

080046f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a38      	ldr	r2, [pc, #224]	@ (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a36      	ldr	r2, [pc, #216]	@ (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a35      	ldr	r2, [pc, #212]	@ (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a33      	ldr	r2, [pc, #204]	@ (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a32      	ldr	r2, [pc, #200]	@ (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a30      	ldr	r2, [pc, #192]	@ (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2f      	ldr	r2, [pc, #188]	@ (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2d      	ldr	r2, [pc, #180]	@ (8004804 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d101      	bne.n	8004756 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004756:	2300      	movs	r3, #0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01a      	beq.n	8004792 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	3b08      	subs	r3, #8
 8004764:	4a28      	ldr	r2, [pc, #160]	@ (8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4b26      	ldr	r3, [pc, #152]	@ (800480c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a24      	ldr	r2, [pc, #144]	@ (8004810 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004780:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2201      	movs	r2, #1
 800478a:	409a      	lsls	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004790:	e024      	b.n	80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	3b10      	subs	r3, #16
 800479a:	4a1e      	ldr	r2, [pc, #120]	@ (8004814 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004818 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d806      	bhi.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	@ (800481c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d902      	bls.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3308      	adds	r3, #8
 80047b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4b18      	ldr	r3, [pc, #96]	@ (8004820 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a16      	ldr	r2, [pc, #88]	@ (8004824 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80047cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	2201      	movs	r2, #1
 80047d6:	409a      	lsls	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	58025408 	.word	0x58025408
 80047ec:	5802541c 	.word	0x5802541c
 80047f0:	58025430 	.word	0x58025430
 80047f4:	58025444 	.word	0x58025444
 80047f8:	58025458 	.word	0x58025458
 80047fc:	5802546c 	.word	0x5802546c
 8004800:	58025480 	.word	0x58025480
 8004804:	58025494 	.word	0x58025494
 8004808:	cccccccd 	.word	0xcccccccd
 800480c:	16009600 	.word	0x16009600
 8004810:	58025880 	.word	0x58025880
 8004814:	aaaaaaab 	.word	0xaaaaaaab
 8004818:	400204b8 	.word	0x400204b8
 800481c:	4002040f 	.word	0x4002040f
 8004820:	10008200 	.word	0x10008200
 8004824:	40020880 	.word	0x40020880

08004828 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d04a      	beq.n	80048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d847      	bhi.n	80048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a25      	ldr	r2, [pc, #148]	@ (80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d022      	beq.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a24      	ldr	r2, [pc, #144]	@ (80048e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d01d      	beq.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a22      	ldr	r2, [pc, #136]	@ (80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d018      	beq.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a21      	ldr	r2, [pc, #132]	@ (80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1f      	ldr	r2, [pc, #124]	@ (80048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1e      	ldr	r2, [pc, #120]	@ (80048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1c      	ldr	r2, [pc, #112]	@ (80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1b      	ldr	r2, [pc, #108]	@ (80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004898:	2300      	movs	r3, #0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4b17      	ldr	r3, [pc, #92]	@ (8004900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	461a      	mov	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a15      	ldr	r2, [pc, #84]	@ (8004904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80048b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80048b2:	e009      	b.n	80048c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4b14      	ldr	r3, [pc, #80]	@ (8004908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	461a      	mov	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a11      	ldr	r2, [pc, #68]	@ (800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80048c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	58025408 	.word	0x58025408
 80048e4:	5802541c 	.word	0x5802541c
 80048e8:	58025430 	.word	0x58025430
 80048ec:	58025444 	.word	0x58025444
 80048f0:	58025458 	.word	0x58025458
 80048f4:	5802546c 	.word	0x5802546c
 80048f8:	58025480 	.word	0x58025480
 80048fc:	58025494 	.word	0x58025494
 8004900:	1600963f 	.word	0x1600963f
 8004904:	58025940 	.word	0x58025940
 8004908:	1000823f 	.word	0x1000823f
 800490c:	40020940 	.word	0x40020940

08004910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	@ 0x24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800491e:	4b89      	ldr	r3, [pc, #548]	@ (8004b44 <HAL_GPIO_Init+0x234>)
 8004920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004922:	e194      	b.n	8004c4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	2101      	movs	r1, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa01 f303 	lsl.w	r3, r1, r3
 8004930:	4013      	ands	r3, r2
 8004932:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8186 	beq.w	8004c48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d005      	beq.n	8004954 <HAL_GPIO_Init+0x44>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d130      	bne.n	80049b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	2203      	movs	r2, #3
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800498a:	2201      	movs	r2, #1
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f003 0201 	and.w	r2, r3, #1
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d017      	beq.n	80049f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d123      	bne.n	8004a46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	08da      	lsrs	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3208      	adds	r2, #8
 8004a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	220f      	movs	r2, #15
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	08da      	lsrs	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3208      	adds	r2, #8
 8004a40:	69b9      	ldr	r1, [r7, #24]
 8004a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0203 	and.w	r2, r3, #3
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80e0 	beq.w	8004c48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a88:	4b2f      	ldr	r3, [pc, #188]	@ (8004b48 <HAL_GPIO_Init+0x238>)
 8004a8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b48 <HAL_GPIO_Init+0x238>)
 8004a90:	f043 0302 	orr.w	r3, r3, #2
 8004a94:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004a98:	4b2b      	ldr	r3, [pc, #172]	@ (8004b48 <HAL_GPIO_Init+0x238>)
 8004a9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aa6:	4a29      	ldr	r2, [pc, #164]	@ (8004b4c <HAL_GPIO_Init+0x23c>)
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	089b      	lsrs	r3, r3, #2
 8004aac:	3302      	adds	r3, #2
 8004aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	220f      	movs	r2, #15
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a20      	ldr	r2, [pc, #128]	@ (8004b50 <HAL_GPIO_Init+0x240>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d052      	beq.n	8004b78 <HAL_GPIO_Init+0x268>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b54 <HAL_GPIO_Init+0x244>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d031      	beq.n	8004b3e <HAL_GPIO_Init+0x22e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b58 <HAL_GPIO_Init+0x248>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d02b      	beq.n	8004b3a <HAL_GPIO_Init+0x22a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b5c <HAL_GPIO_Init+0x24c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d025      	beq.n	8004b36 <HAL_GPIO_Init+0x226>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a1c      	ldr	r2, [pc, #112]	@ (8004b60 <HAL_GPIO_Init+0x250>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01f      	beq.n	8004b32 <HAL_GPIO_Init+0x222>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b64 <HAL_GPIO_Init+0x254>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d019      	beq.n	8004b2e <HAL_GPIO_Init+0x21e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b68 <HAL_GPIO_Init+0x258>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_GPIO_Init+0x21a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a19      	ldr	r2, [pc, #100]	@ (8004b6c <HAL_GPIO_Init+0x25c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00d      	beq.n	8004b26 <HAL_GPIO_Init+0x216>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_GPIO_Init+0x260>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d007      	beq.n	8004b22 <HAL_GPIO_Init+0x212>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a17      	ldr	r2, [pc, #92]	@ (8004b74 <HAL_GPIO_Init+0x264>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d101      	bne.n	8004b1e <HAL_GPIO_Init+0x20e>
 8004b1a:	2309      	movs	r3, #9
 8004b1c:	e02d      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b1e:	230a      	movs	r3, #10
 8004b20:	e02b      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b22:	2308      	movs	r3, #8
 8004b24:	e029      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b26:	2307      	movs	r3, #7
 8004b28:	e027      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b2a:	2306      	movs	r3, #6
 8004b2c:	e025      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b2e:	2305      	movs	r3, #5
 8004b30:	e023      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b32:	2304      	movs	r3, #4
 8004b34:	e021      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b36:	2303      	movs	r3, #3
 8004b38:	e01f      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e01d      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e01b      	b.n	8004b7a <HAL_GPIO_Init+0x26a>
 8004b42:	bf00      	nop
 8004b44:	58000080 	.word	0x58000080
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	58000400 	.word	0x58000400
 8004b50:	58020000 	.word	0x58020000
 8004b54:	58020400 	.word	0x58020400
 8004b58:	58020800 	.word	0x58020800
 8004b5c:	58020c00 	.word	0x58020c00
 8004b60:	58021000 	.word	0x58021000
 8004b64:	58021400 	.word	0x58021400
 8004b68:	58021800 	.word	0x58021800
 8004b6c:	58021c00 	.word	0x58021c00
 8004b70:	58022000 	.word	0x58022000
 8004b74:	58022400 	.word	0x58022400
 8004b78:	2300      	movs	r3, #0
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	f002 0203 	and.w	r2, r2, #3
 8004b80:	0092      	lsls	r2, r2, #2
 8004b82:	4093      	lsls	r3, r2
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b8a:	4938      	ldr	r1, [pc, #224]	@ (8004c6c <HAL_GPIO_Init+0x35c>)
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	089b      	lsrs	r3, r3, #2
 8004b90:	3302      	adds	r3, #2
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f47f ae63 	bne.w	8004924 <HAL_GPIO_Init+0x14>
  }
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	3724      	adds	r7, #36	@ 0x24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	58000400 	.word	0x58000400

08004c70 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0b1      	b.n	8004dea <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d101      	bne.n	8004c96 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e0a9      	b.n	8004dea <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0a1      	b.n	8004dea <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fc f87a 	bl	8000dbc <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd6:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b40      	cmp	r3, #64	@ 0x40
 8004cde:	d119      	bne.n	8004d14 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b43      	ldr	r3, [pc, #268]	@ (8004df4 <HAL_OPAMP_Init+0x184>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6851      	ldr	r1, [r2, #4]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6892      	ldr	r2, [r2, #8]
 8004cf2:	4311      	orrs	r1, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6952      	ldr	r2, [r2, #20]
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6992      	ldr	r2, [r2, #24]
 8004cfe:	4311      	orrs	r1, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6912      	ldr	r2, [r2, #16]
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	69d2      	ldr	r2, [r2, #28]
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b60      	cmp	r3, #96	@ 0x60
 8004d1a:	d113      	bne.n	8004d44 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b35      	ldr	r3, [pc, #212]	@ (8004df8 <HAL_OPAMP_Init+0x188>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6851      	ldr	r1, [r2, #4]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6892      	ldr	r2, [r2, #8]
 8004d2e:	4311      	orrs	r1, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6912      	ldr	r2, [r2, #16]
 8004d34:	4311      	orrs	r1, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	69d2      	ldr	r2, [r2, #28]
 8004d3a:	4311      	orrs	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d116      	bne.n	8004d7a <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b29      	ldr	r3, [pc, #164]	@ (8004df8 <HAL_OPAMP_Init+0x188>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6851      	ldr	r1, [r2, #4]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6892      	ldr	r2, [r2, #8]
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68d2      	ldr	r2, [r2, #12]
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6912      	ldr	r2, [r2, #16]
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	69d2      	ldr	r2, [r2, #28]
 8004d70:	4311      	orrs	r1, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	430b      	orrs	r3, r1
 8004d78:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d82:	d127      	bne.n	8004dd4 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d8c:	d011      	beq.n	8004db2 <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	4b16      	ldr	r3, [pc, #88]	@ (8004dfc <HAL_OPAMP_Init+0x18c>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6053      	str	r3, [r2, #4]
 8004db0:	e010      	b.n	8004dd4 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <HAL_OPAMP_Init+0x18c>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	fff83e93 	.word	0xfff83e93
 8004df8:	fffbfe93 	.word	0xfffbfe93
 8004dfc:	ffffe0e0 	.word	0xffffe0e0

08004e00 <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e01d      	b.n	8004e54 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b05      	cmp	r3, #5
 8004e22:	d102      	bne.n	8004e2a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
 8004e28:	e014      	b.n	8004e54 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d10c      	bne.n	8004e50 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8004e4e:	e001      	b.n	8004e54 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	58024800 	.word	0x58024800

08004e84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e8c:	4b29      	ldr	r3, [pc, #164]	@ (8004f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	d00a      	beq.n	8004eae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e98:	4b26      	ldr	r3, [pc, #152]	@ (8004f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d001      	beq.n	8004eaa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e040      	b.n	8004f2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e03e      	b.n	8004f2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004eae:	4b21      	ldr	r3, [pc, #132]	@ (8004f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004eb6:	491f      	ldr	r1, [pc, #124]	@ (8004f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ebe:	f7fc f9ff 	bl	80012c0 <HAL_GetTick>
 8004ec2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ec4:	e009      	b.n	8004eda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ec6:	f7fc f9fb 	bl	80012c0 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ed4:	d901      	bls.n	8004eda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e028      	b.n	8004f2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004eda:	4b16      	ldr	r3, [pc, #88]	@ (8004f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee6:	d1ee      	bne.n	8004ec6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b1e      	cmp	r3, #30
 8004eec:	d008      	beq.n	8004f00 <HAL_PWREx_ConfigSupply+0x7c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ef2:	d005      	beq.n	8004f00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b1d      	cmp	r3, #29
 8004ef8:	d002      	beq.n	8004f00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b2d      	cmp	r3, #45	@ 0x2d
 8004efe:	d114      	bne.n	8004f2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004f00:	f7fc f9de 	bl	80012c0 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004f06:	e009      	b.n	8004f1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f08:	f7fc f9da 	bl	80012c0 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f16:	d901      	bls.n	8004f1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e007      	b.n	8004f2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f28:	d1ee      	bne.n	8004f08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	58024800 	.word	0x58024800

08004f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08c      	sub	sp, #48	@ 0x30
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f000 bc1f 	b.w	800578a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80b3 	beq.w	80050c0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5a:	4b95      	ldr	r3, [pc, #596]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f64:	4b92      	ldr	r3, [pc, #584]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d007      	beq.n	8004f80 <HAL_RCC_OscConfig+0x48>
 8004f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f72:	2b18      	cmp	r3, #24
 8004f74:	d112      	bne.n	8004f9c <HAL_RCC_OscConfig+0x64>
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d10d      	bne.n	8004f9c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	4b8b      	ldr	r3, [pc, #556]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8098 	beq.w	80050be <HAL_RCC_OscConfig+0x186>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 8093 	bne.w	80050be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e3f6      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x7c>
 8004fa6:	4b82      	ldr	r3, [pc, #520]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a81      	ldr	r2, [pc, #516]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e058      	b.n	8005066 <HAL_RCC_OscConfig+0x12e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d112      	bne.n	8004fe2 <HAL_RCC_OscConfig+0xaa>
 8004fbc:	4b7c      	ldr	r3, [pc, #496]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a7b      	ldr	r2, [pc, #492]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b79      	ldr	r3, [pc, #484]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a78      	ldr	r2, [pc, #480]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	4b76      	ldr	r3, [pc, #472]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a75      	ldr	r2, [pc, #468]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	e041      	b.n	8005066 <HAL_RCC_OscConfig+0x12e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fea:	d112      	bne.n	8005012 <HAL_RCC_OscConfig+0xda>
 8004fec:	4b70      	ldr	r3, [pc, #448]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a6f      	ldr	r2, [pc, #444]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004ff2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b6d      	ldr	r3, [pc, #436]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a6c      	ldr	r2, [pc, #432]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8004ffe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b6a      	ldr	r3, [pc, #424]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a69      	ldr	r2, [pc, #420]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800500a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	e029      	b.n	8005066 <HAL_RCC_OscConfig+0x12e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800501a:	d112      	bne.n	8005042 <HAL_RCC_OscConfig+0x10a>
 800501c:	4b64      	ldr	r3, [pc, #400]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a63      	ldr	r2, [pc, #396]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005022:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	4b61      	ldr	r3, [pc, #388]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a60      	ldr	r2, [pc, #384]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800502e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b5e      	ldr	r3, [pc, #376]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5d      	ldr	r2, [pc, #372]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e011      	b.n	8005066 <HAL_RCC_OscConfig+0x12e>
 8005042:	4b5b      	ldr	r3, [pc, #364]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a5a      	ldr	r2, [pc, #360]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a57      	ldr	r2, [pc, #348]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b55      	ldr	r3, [pc, #340]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a54      	ldr	r2, [pc, #336]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005060:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005064:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d013      	beq.n	8005096 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fc f927 	bl	80012c0 <HAL_GetTick>
 8005072:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005076:	f7fc f923 	bl	80012c0 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	@ 0x64
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e380      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005088:	4b49      	ldr	r3, [pc, #292]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x13e>
 8005094:	e014      	b.n	80050c0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005096:	f7fc f913 	bl	80012c0 <HAL_GetTick>
 800509a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800509e:	f7fc f90f 	bl	80012c0 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b64      	cmp	r3, #100	@ 0x64
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e36c      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050b0:	4b3f      	ldr	r3, [pc, #252]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f0      	bne.n	800509e <HAL_RCC_OscConfig+0x166>
 80050bc:	e000      	b.n	80050c0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 808c 	beq.w	80051e6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ce:	4b38      	ldr	r3, [pc, #224]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050d8:	4b35      	ldr	r3, [pc, #212]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_RCC_OscConfig+0x1bc>
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2b18      	cmp	r3, #24
 80050e8:	d137      	bne.n	800515a <HAL_RCC_OscConfig+0x222>
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d132      	bne.n	800515a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f4:	4b2e      	ldr	r3, [pc, #184]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_OscConfig+0x1d4>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e33e      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800510c:	4b28      	ldr	r3, [pc, #160]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 0219 	bic.w	r2, r3, #25
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4925      	ldr	r1, [pc, #148]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511e:	f7fc f8cf 	bl	80012c0 <HAL_GetTick>
 8005122:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005126:	f7fc f8cb 	bl	80012c0 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e328      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005138:	4b1d      	ldr	r3, [pc, #116]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005144:	4b1a      	ldr	r3, [pc, #104]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	4917      	ldr	r1, [pc, #92]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005154:	4313      	orrs	r3, r2
 8005156:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005158:	e045      	b.n	80051e6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d028      	beq.n	80051b4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005162:	4b13      	ldr	r3, [pc, #76]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 0219 	bic.w	r2, r3, #25
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	4910      	ldr	r1, [pc, #64]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005170:	4313      	orrs	r3, r2
 8005172:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fc f8a4 	bl	80012c0 <HAL_GetTick>
 8005178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517c:	f7fc f8a0 	bl	80012c0 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e2fd      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800518e:	4b08      	ldr	r3, [pc, #32]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519a:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	061b      	lsls	r3, r3, #24
 80051a8:	4901      	ldr	r1, [pc, #4]	@ (80051b0 <HAL_RCC_OscConfig+0x278>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	604b      	str	r3, [r1, #4]
 80051ae:	e01a      	b.n	80051e6 <HAL_RCC_OscConfig+0x2ae>
 80051b0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b4:	4b97      	ldr	r3, [pc, #604]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a96      	ldr	r2, [pc, #600]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fc f87e 	bl	80012c0 <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c8:	f7fc f87a 	bl	80012c0 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e2d7      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051da:	4b8e      	ldr	r3, [pc, #568]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d06a      	beq.n	80052c8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f2:	4b88      	ldr	r3, [pc, #544]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051fc:	4b85      	ldr	r3, [pc, #532]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d007      	beq.n	8005218 <HAL_RCC_OscConfig+0x2e0>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b18      	cmp	r3, #24
 800520c:	d11b      	bne.n	8005246 <HAL_RCC_OscConfig+0x30e>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d116      	bne.n	8005246 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005218:	4b7e      	ldr	r3, [pc, #504]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_OscConfig+0x2f8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	2b80      	cmp	r3, #128	@ 0x80
 800522a:	d001      	beq.n	8005230 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e2ac      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005230:	4b78      	ldr	r3, [pc, #480]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	4975      	ldr	r1, [pc, #468]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005240:	4313      	orrs	r3, r2
 8005242:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005244:	e040      	b.n	80052c8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d023      	beq.n	8005296 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800524e:	4b71      	ldr	r3, [pc, #452]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a70      	ldr	r2, [pc, #448]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525a:	f7fc f831 	bl	80012c0 <HAL_GetTick>
 800525e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005262:	f7fc f82d 	bl	80012c0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e28a      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005274:	4b67      	ldr	r3, [pc, #412]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005280:	4b64      	ldr	r3, [pc, #400]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	4961      	ldr	r1, [pc, #388]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005290:	4313      	orrs	r3, r2
 8005292:	60cb      	str	r3, [r1, #12]
 8005294:	e018      	b.n	80052c8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005296:	4b5f      	ldr	r3, [pc, #380]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a5e      	ldr	r2, [pc, #376]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 800529c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fc f80d 	bl	80012c0 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052aa:	f7fc f809 	bl	80012c0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e266      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052bc:	4b55      	ldr	r3, [pc, #340]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d036      	beq.n	8005342 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d019      	beq.n	8005310 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80052de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e0:	4a4c      	ldr	r2, [pc, #304]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e8:	f7fb ffea 	bl	80012c0 <HAL_GetTick>
 80052ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f0:	f7fb ffe6 	bl	80012c0 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e243      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005302:	4b44      	ldr	r3, [pc, #272]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x3b8>
 800530e:	e018      	b.n	8005342 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005310:	4b40      	ldr	r3, [pc, #256]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005314:	4a3f      	ldr	r2, [pc, #252]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005316:	f023 0301 	bic.w	r3, r3, #1
 800531a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fb ffd0 	bl	80012c0 <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005324:	f7fb ffcc 	bl	80012c0 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e229      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005336:	4b37      	ldr	r3, [pc, #220]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d036      	beq.n	80053bc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d019      	beq.n	800538a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005356:	4b2f      	ldr	r3, [pc, #188]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2e      	ldr	r2, [pc, #184]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 800535c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005360:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005362:	f7fb ffad 	bl	80012c0 <HAL_GetTick>
 8005366:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800536a:	f7fb ffa9 	bl	80012c0 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e206      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800537c:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x432>
 8005388:	e018      	b.n	80053bc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800538a:	4b22      	ldr	r3, [pc, #136]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a21      	ldr	r2, [pc, #132]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005390:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005394:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005396:	f7fb ff93 	bl	80012c0 <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800539e:	f7fb ff8f 	bl	80012c0 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e1ec      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053b0:	4b18      	ldr	r3, [pc, #96]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f0      	bne.n	800539e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80af 	beq.w	8005528 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053ca:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <HAL_RCC_OscConfig+0x4e0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a12      	ldr	r2, [pc, #72]	@ (8005418 <HAL_RCC_OscConfig+0x4e0>)
 80053d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d6:	f7fb ff73 	bl	80012c0 <HAL_GetTick>
 80053da:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053de:	f7fb ff6f 	bl	80012c0 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b64      	cmp	r3, #100	@ 0x64
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e1cc      	b.n	800578a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f0:	4b09      	ldr	r3, [pc, #36]	@ (8005418 <HAL_RCC_OscConfig+0x4e0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10b      	bne.n	800541c <HAL_RCC_OscConfig+0x4e4>
 8005404:	4b03      	ldr	r3, [pc, #12]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005408:	4a02      	ldr	r2, [pc, #8]	@ (8005414 <HAL_RCC_OscConfig+0x4dc>)
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005410:	e05b      	b.n	80054ca <HAL_RCC_OscConfig+0x592>
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	58024800 	.word	0x58024800
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d112      	bne.n	800544a <HAL_RCC_OscConfig+0x512>
 8005424:	4b9d      	ldr	r3, [pc, #628]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	4a9c      	ldr	r2, [pc, #624]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005430:	4b9a      	ldr	r3, [pc, #616]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005434:	4a99      	ldr	r2, [pc, #612]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800543a:	6713      	str	r3, [r2, #112]	@ 0x70
 800543c:	4b97      	ldr	r3, [pc, #604]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005440:	4a96      	ldr	r2, [pc, #600]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005442:	f023 0304 	bic.w	r3, r3, #4
 8005446:	6713      	str	r3, [r2, #112]	@ 0x70
 8005448:	e03f      	b.n	80054ca <HAL_RCC_OscConfig+0x592>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b05      	cmp	r3, #5
 8005450:	d112      	bne.n	8005478 <HAL_RCC_OscConfig+0x540>
 8005452:	4b92      	ldr	r3, [pc, #584]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	4a91      	ldr	r2, [pc, #580]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005458:	f043 0304 	orr.w	r3, r3, #4
 800545c:	6713      	str	r3, [r2, #112]	@ 0x70
 800545e:	4b8f      	ldr	r3, [pc, #572]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005462:	4a8e      	ldr	r2, [pc, #568]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005468:	6713      	str	r3, [r2, #112]	@ 0x70
 800546a:	4b8c      	ldr	r3, [pc, #560]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546e:	4a8b      	ldr	r2, [pc, #556]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	6713      	str	r3, [r2, #112]	@ 0x70
 8005476:	e028      	b.n	80054ca <HAL_RCC_OscConfig+0x592>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b85      	cmp	r3, #133	@ 0x85
 800547e:	d112      	bne.n	80054a6 <HAL_RCC_OscConfig+0x56e>
 8005480:	4b86      	ldr	r3, [pc, #536]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005484:	4a85      	ldr	r2, [pc, #532]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	6713      	str	r3, [r2, #112]	@ 0x70
 800548c:	4b83      	ldr	r3, [pc, #524]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005490:	4a82      	ldr	r2, [pc, #520]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005496:	6713      	str	r3, [r2, #112]	@ 0x70
 8005498:	4b80      	ldr	r3, [pc, #512]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549c:	4a7f      	ldr	r2, [pc, #508]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a4:	e011      	b.n	80054ca <HAL_RCC_OscConfig+0x592>
 80054a6:	4b7d      	ldr	r3, [pc, #500]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054aa:	4a7c      	ldr	r2, [pc, #496]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80054b2:	4b7a      	ldr	r3, [pc, #488]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b6:	4a79      	ldr	r2, [pc, #484]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80054b8:	f023 0304 	bic.w	r3, r3, #4
 80054bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80054be:	4b77      	ldr	r3, [pc, #476]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c2:	4a76      	ldr	r2, [pc, #472]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80054c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d015      	beq.n	80054fe <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d2:	f7fb fef5 	bl	80012c0 <HAL_GetTick>
 80054d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d8:	e00a      	b.n	80054f0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054da:	f7fb fef1 	bl	80012c0 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e14c      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054f0:	4b6a      	ldr	r3, [pc, #424]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0ee      	beq.n	80054da <HAL_RCC_OscConfig+0x5a2>
 80054fc:	e014      	b.n	8005528 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fe:	f7fb fedf 	bl	80012c0 <HAL_GetTick>
 8005502:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005504:	e00a      	b.n	800551c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fb fedb 	bl	80012c0 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e136      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800551c:	4b5f      	ldr	r3, [pc, #380]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1ee      	bne.n	8005506 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 812b 	beq.w	8005788 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005532:	4b5a      	ldr	r3, [pc, #360]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800553a:	2b18      	cmp	r3, #24
 800553c:	f000 80bb 	beq.w	80056b6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	2b02      	cmp	r3, #2
 8005546:	f040 8095 	bne.w	8005674 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554a:	4b54      	ldr	r3, [pc, #336]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a53      	ldr	r2, [pc, #332]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005550:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fb feb3 	bl	80012c0 <HAL_GetTick>
 800555a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555e:	f7fb feaf 	bl	80012c0 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e10c      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005570:	4b4a      	ldr	r3, [pc, #296]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f0      	bne.n	800555e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800557c:	4b47      	ldr	r3, [pc, #284]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800557e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005580:	4b47      	ldr	r3, [pc, #284]	@ (80056a0 <HAL_RCC_OscConfig+0x768>)
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800558c:	0112      	lsls	r2, r2, #4
 800558e:	430a      	orrs	r2, r1
 8005590:	4942      	ldr	r1, [pc, #264]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005592:	4313      	orrs	r3, r2
 8005594:	628b      	str	r3, [r1, #40]	@ 0x28
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559a:	3b01      	subs	r3, #1
 800559c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a4:	3b01      	subs	r3, #1
 80055a6:	025b      	lsls	r3, r3, #9
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b0:	3b01      	subs	r3, #1
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055be:	3b01      	subs	r3, #1
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055c6:	4935      	ldr	r1, [pc, #212]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055cc:	4b33      	ldr	r3, [pc, #204]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	4a32      	ldr	r2, [pc, #200]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055d8:	4b30      	ldr	r3, [pc, #192]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80055da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055dc:	4b31      	ldr	r3, [pc, #196]	@ (80056a4 <HAL_RCC_OscConfig+0x76c>)
 80055de:	4013      	ands	r3, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055e4:	00d2      	lsls	r2, r2, #3
 80055e6:	492d      	ldr	r1, [pc, #180]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055ec:	4b2b      	ldr	r3, [pc, #172]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	f023 020c 	bic.w	r2, r3, #12
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	4928      	ldr	r1, [pc, #160]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055fe:	4b27      	ldr	r3, [pc, #156]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	f023 0202 	bic.w	r2, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560a:	4924      	ldr	r1, [pc, #144]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800560c:	4313      	orrs	r3, r2
 800560e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005610:	4b22      	ldr	r3, [pc, #136]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	4a21      	ldr	r2, [pc, #132]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800561a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800561c:	4b1f      	ldr	r3, [pc, #124]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	4a1e      	ldr	r2, [pc, #120]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005628:	4b1c      	ldr	r3, [pc, #112]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	4a1b      	ldr	r2, [pc, #108]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800562e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005634:	4b19      	ldr	r3, [pc, #100]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	4a18      	ldr	r2, [pc, #96]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005640:	4b16      	ldr	r3, [pc, #88]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a15      	ldr	r2, [pc, #84]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800564a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fb fe38 	bl	80012c0 <HAL_GetTick>
 8005650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7fb fe34 	bl	80012c0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e091      	b.n	800578a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0x71c>
 8005672:	e089      	b.n	8005788 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005674:	4b09      	ldr	r3, [pc, #36]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a08      	ldr	r2, [pc, #32]	@ (800569c <HAL_RCC_OscConfig+0x764>)
 800567a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800567e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fb fe1e 	bl	80012c0 <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005686:	e00f      	b.n	80056a8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005688:	f7fb fe1a 	bl	80012c0 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d908      	bls.n	80056a8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e077      	b.n	800578a <HAL_RCC_OscConfig+0x852>
 800569a:	bf00      	nop
 800569c:	58024400 	.word	0x58024400
 80056a0:	fffffc0c 	.word	0xfffffc0c
 80056a4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e9      	bne.n	8005688 <HAL_RCC_OscConfig+0x750>
 80056b4:	e068      	b.n	8005788 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056b6:	4b37      	ldr	r3, [pc, #220]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056bc:	4b35      	ldr	r3, [pc, #212]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d031      	beq.n	800572e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f003 0203 	and.w	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d12a      	bne.n	800572e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d122      	bne.n	800572e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d11a      	bne.n	800572e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	0a5b      	lsrs	r3, r3, #9
 80056fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005704:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d111      	bne.n	800572e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005716:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d108      	bne.n	800572e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	0e1b      	lsrs	r3, r3, #24
 8005720:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005728:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d001      	beq.n	8005732 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e02b      	b.n	800578a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005732:	4b18      	ldr	r3, [pc, #96]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 8005734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005736:	08db      	lsrs	r3, r3, #3
 8005738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800573c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	429a      	cmp	r2, r3
 8005746:	d01f      	beq.n	8005788 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005748:	4b12      	ldr	r3, [pc, #72]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	4a11      	ldr	r2, [pc, #68]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005754:	f7fb fdb4 	bl	80012c0 <HAL_GetTick>
 8005758:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800575a:	bf00      	nop
 800575c:	f7fb fdb0 	bl	80012c0 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	4293      	cmp	r3, r2
 8005766:	d0f9      	beq.n	800575c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005768:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 800576a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800576c:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <HAL_RCC_OscConfig+0x860>)
 800576e:	4013      	ands	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005774:	00d2      	lsls	r2, r2, #3
 8005776:	4907      	ldr	r1, [pc, #28]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 8005778:	4313      	orrs	r3, r2
 800577a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	4a04      	ldr	r2, [pc, #16]	@ (8005794 <HAL_RCC_OscConfig+0x85c>)
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3730      	adds	r7, #48	@ 0x30
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	58024400 	.word	0x58024400
 8005798:	ffff0007 	.word	0xffff0007

0800579c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e19c      	b.n	8005aea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057b0:	4b8a      	ldr	r3, [pc, #552]	@ (80059dc <HAL_RCC_ClockConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d910      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b87      	ldr	r3, [pc, #540]	@ (80059dc <HAL_RCC_ClockConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 020f 	bic.w	r2, r3, #15
 80057c6:	4985      	ldr	r1, [pc, #532]	@ (80059dc <HAL_RCC_ClockConfig+0x240>)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b83      	ldr	r3, [pc, #524]	@ (80059dc <HAL_RCC_ClockConfig+0x240>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e184      	b.n	8005aea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d010      	beq.n	800580e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	4b7b      	ldr	r3, [pc, #492]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d908      	bls.n	800580e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057fc:	4b78      	ldr	r3, [pc, #480]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	4975      	ldr	r1, [pc, #468]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800580a:	4313      	orrs	r3, r2
 800580c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d010      	beq.n	800583c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	4b70      	ldr	r3, [pc, #448]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005826:	429a      	cmp	r2, r3
 8005828:	d908      	bls.n	800583c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800582a:	4b6d      	ldr	r3, [pc, #436]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	496a      	ldr	r1, [pc, #424]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 8005838:	4313      	orrs	r3, r2
 800583a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	4b64      	ldr	r3, [pc, #400]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005854:	429a      	cmp	r2, r3
 8005856:	d908      	bls.n	800586a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005858:	4b61      	ldr	r3, [pc, #388]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	495e      	ldr	r1, [pc, #376]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 8005866:	4313      	orrs	r3, r2
 8005868:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d010      	beq.n	8005898 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69da      	ldr	r2, [r3, #28]
 800587a:	4b59      	ldr	r3, [pc, #356]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005882:	429a      	cmp	r2, r3
 8005884:	d908      	bls.n	8005898 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005886:	4b56      	ldr	r3, [pc, #344]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	4953      	ldr	r1, [pc, #332]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 8005894:	4313      	orrs	r3, r2
 8005896:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	4b4d      	ldr	r3, [pc, #308]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d908      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b4:	4b4a      	ldr	r3, [pc, #296]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f023 020f 	bic.w	r2, r3, #15
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4947      	ldr	r1, [pc, #284]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d055      	beq.n	800597e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058d2:	4b43      	ldr	r3, [pc, #268]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	4940      	ldr	r1, [pc, #256]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d107      	bne.n	80058fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058ec:	4b3c      	ldr	r3, [pc, #240]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d121      	bne.n	800593c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0f6      	b.n	8005aea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d107      	bne.n	8005914 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005904:	4b36      	ldr	r3, [pc, #216]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d115      	bne.n	800593c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0ea      	b.n	8005aea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d107      	bne.n	800592c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800591c:	4b30      	ldr	r3, [pc, #192]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0de      	b.n	8005aea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800592c:	4b2c      	ldr	r3, [pc, #176]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0d6      	b.n	8005aea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800593c:	4b28      	ldr	r3, [pc, #160]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f023 0207 	bic.w	r2, r3, #7
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4925      	ldr	r1, [pc, #148]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800594a:	4313      	orrs	r3, r2
 800594c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594e:	f7fb fcb7 	bl	80012c0 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005954:	e00a      	b.n	800596c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005956:	f7fb fcb3 	bl	80012c0 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005964:	4293      	cmp	r3, r2
 8005966:	d901      	bls.n	800596c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e0be      	b.n	8005aea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596c:	4b1c      	ldr	r3, [pc, #112]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	429a      	cmp	r2, r3
 800597c:	d1eb      	bne.n	8005956 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d010      	beq.n	80059ac <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	4b14      	ldr	r3, [pc, #80]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	429a      	cmp	r2, r3
 8005998:	d208      	bcs.n	80059ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800599a:	4b11      	ldr	r3, [pc, #68]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f023 020f 	bic.w	r2, r3, #15
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	490e      	ldr	r1, [pc, #56]	@ (80059e0 <HAL_RCC_ClockConfig+0x244>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059ac:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <HAL_RCC_ClockConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d214      	bcs.n	80059e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b08      	ldr	r3, [pc, #32]	@ (80059dc <HAL_RCC_ClockConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 020f 	bic.w	r2, r3, #15
 80059c2:	4906      	ldr	r1, [pc, #24]	@ (80059dc <HAL_RCC_ClockConfig+0x240>)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <HAL_RCC_ClockConfig+0x240>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e086      	b.n	8005aea <HAL_RCC_ClockConfig+0x34e>
 80059dc:	52002000 	.word	0x52002000
 80059e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d010      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	4b3f      	ldr	r3, [pc, #252]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d208      	bcs.n	8005a12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a00:	4b3c      	ldr	r3, [pc, #240]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	4939      	ldr	r1, [pc, #228]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d010      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	4b34      	ldr	r3, [pc, #208]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d208      	bcs.n	8005a40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a2e:	4b31      	ldr	r3, [pc, #196]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	492e      	ldr	r1, [pc, #184]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d010      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	4b28      	ldr	r3, [pc, #160]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d208      	bcs.n	8005a6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a5c:	4b25      	ldr	r3, [pc, #148]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	4922      	ldr	r1, [pc, #136]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d010      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d208      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	4917      	ldr	r1, [pc, #92]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005a9c:	f000 f89e 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	4b14      	ldr	r3, [pc, #80]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	4912      	ldr	r1, [pc, #72]	@ (8005af8 <HAL_RCC_ClockConfig+0x35c>)
 8005aae:	5ccb      	ldrb	r3, [r1, r3]
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005aba:	4b0e      	ldr	r3, [pc, #56]	@ (8005af4 <HAL_RCC_ClockConfig+0x358>)
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8005af8 <HAL_RCC_ClockConfig+0x35c>)
 8005ac4:	5cd3      	ldrb	r3, [r2, r3]
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <HAL_RCC_ClockConfig+0x360>)
 8005ad2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8005b00 <HAL_RCC_ClockConfig+0x364>)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ada:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <HAL_RCC_ClockConfig+0x368>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fb fba4 	bl	800122c <HAL_InitTick>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	58024400 	.word	0x58024400
 8005af8:	0800bae0 	.word	0x0800bae0
 8005afc:	2400d7a4 	.word	0x2400d7a4
 8005b00:	2400d7a0 	.word	0x2400d7a0
 8005b04:	2400d7a8 	.word	0x2400d7a8

08005b08 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08c      	sub	sp, #48	@ 0x30
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d12a      	bne.n	8005b70 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005b1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b20:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005b2a:	4b29      	ldr	r3, [pc, #164]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005b2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b3e:	2302      	movs	r3, #2
 8005b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b42:	2303      	movs	r3, #3
 8005b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b4e:	f107 031c 	add.w	r3, r7, #28
 8005b52:	4619      	mov	r1, r3
 8005b54:	481f      	ldr	r0, [pc, #124]	@ (8005bd4 <HAL_RCC_MCOConfig+0xcc>)
 8005b56:	f7fe fedb 	bl	8004910 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	430b      	orrs	r3, r1
 8005b68:	4919      	ldr	r1, [pc, #100]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005b6e:	e02a      	b.n	8005bc6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005b70:	4b17      	ldr	r3, [pc, #92]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b76:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005b78:	f043 0304 	orr.w	r3, r3, #4
 8005b7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005b80:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b94:	2302      	movs	r3, #2
 8005b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005ba4:	f107 031c 	add.w	r3, r7, #28
 8005ba8:	4619      	mov	r1, r3
 8005baa:	480b      	ldr	r0, [pc, #44]	@ (8005bd8 <HAL_RCC_MCOConfig+0xd0>)
 8005bac:	f7fe feb0 	bl	8004910 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005bb0:	4b07      	ldr	r3, [pc, #28]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	01d9      	lsls	r1, r3, #7
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	4903      	ldr	r1, [pc, #12]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc8>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	610b      	str	r3, [r1, #16]
}
 8005bc6:	bf00      	nop
 8005bc8:	3730      	adds	r7, #48	@ 0x30
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	58020000 	.word	0x58020000
 8005bd8:	58020800 	.word	0x58020800

08005bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	@ 0x24
 8005be0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005be2:	4bb3      	ldr	r3, [pc, #716]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bea:	2b18      	cmp	r3, #24
 8005bec:	f200 8155 	bhi.w	8005e9a <HAL_RCC_GetSysClockFreq+0x2be>
 8005bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c5d 	.word	0x08005c5d
 8005bfc:	08005e9b 	.word	0x08005e9b
 8005c00:	08005e9b 	.word	0x08005e9b
 8005c04:	08005e9b 	.word	0x08005e9b
 8005c08:	08005e9b 	.word	0x08005e9b
 8005c0c:	08005e9b 	.word	0x08005e9b
 8005c10:	08005e9b 	.word	0x08005e9b
 8005c14:	08005e9b 	.word	0x08005e9b
 8005c18:	08005c83 	.word	0x08005c83
 8005c1c:	08005e9b 	.word	0x08005e9b
 8005c20:	08005e9b 	.word	0x08005e9b
 8005c24:	08005e9b 	.word	0x08005e9b
 8005c28:	08005e9b 	.word	0x08005e9b
 8005c2c:	08005e9b 	.word	0x08005e9b
 8005c30:	08005e9b 	.word	0x08005e9b
 8005c34:	08005e9b 	.word	0x08005e9b
 8005c38:	08005c89 	.word	0x08005c89
 8005c3c:	08005e9b 	.word	0x08005e9b
 8005c40:	08005e9b 	.word	0x08005e9b
 8005c44:	08005e9b 	.word	0x08005e9b
 8005c48:	08005e9b 	.word	0x08005e9b
 8005c4c:	08005e9b 	.word	0x08005e9b
 8005c50:	08005e9b 	.word	0x08005e9b
 8005c54:	08005e9b 	.word	0x08005e9b
 8005c58:	08005c8f 	.word	0x08005c8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c5c:	4b94      	ldr	r3, [pc, #592]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c68:	4b91      	ldr	r3, [pc, #580]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	08db      	lsrs	r3, r3, #3
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	4a90      	ldr	r2, [pc, #576]	@ (8005eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
 8005c78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c7a:	e111      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c7c:	4b8d      	ldr	r3, [pc, #564]	@ (8005eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c7e:	61bb      	str	r3, [r7, #24]
      break;
 8005c80:	e10e      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c82:	4b8d      	ldr	r3, [pc, #564]	@ (8005eb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c84:	61bb      	str	r3, [r7, #24]
      break;
 8005c86:	e10b      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c88:	4b8c      	ldr	r3, [pc, #560]	@ (8005ebc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c8a:	61bb      	str	r3, [r7, #24]
      break;
 8005c8c:	e108      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c8e:	4b88      	ldr	r3, [pc, #544]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c98:	4b85      	ldr	r3, [pc, #532]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ca2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ca4:	4b82      	ldr	r3, [pc, #520]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cae:	4b80      	ldr	r3, [pc, #512]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	08db      	lsrs	r3, r3, #3
 8005cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80e1 	beq.w	8005e94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	f000 8083 	beq.w	8005de0 <HAL_RCC_GetSysClockFreq+0x204>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	f200 80a1 	bhi.w	8005e24 <HAL_RCC_GetSysClockFreq+0x248>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x114>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d056      	beq.n	8005d9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cee:	e099      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02d      	beq.n	8005d58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	08db      	lsrs	r3, r3, #3
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	4a6b      	ldr	r2, [pc, #428]	@ (8005eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d26:	4b62      	ldr	r3, [pc, #392]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d56:	e087      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ec4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6a:	4b51      	ldr	r3, [pc, #324]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d9a:	e065      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ec8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dae:	4b40      	ldr	r3, [pc, #256]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dde:	e043      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ecc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df2:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e22:	e021      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ec8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e68:	4b11      	ldr	r3, [pc, #68]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	0a5b      	lsrs	r3, r3, #9
 8005e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e72:	3301      	adds	r3, #1
 8005e74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e8c:	ee17 3a90 	vmov	r3, s15
 8005e90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e92:	e005      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	61bb      	str	r3, [r7, #24]
      break;
 8005e98:	e002      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e9a:	4b07      	ldr	r3, [pc, #28]	@ (8005eb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e9c:	61bb      	str	r3, [r7, #24]
      break;
 8005e9e:	bf00      	nop
  }

  return sysclockfreq;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3724      	adds	r7, #36	@ 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	03d09000 	.word	0x03d09000
 8005eb8:	003d0900 	.word	0x003d0900
 8005ebc:	007a1200 	.word	0x007a1200
 8005ec0:	46000000 	.word	0x46000000
 8005ec4:	4c742400 	.word	0x4c742400
 8005ec8:	4a742400 	.word	0x4a742400
 8005ecc:	4af42400 	.word	0x4af42400

08005ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005ed6:	f7ff fe81 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005eda:	4602      	mov	r2, r0
 8005edc:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	490f      	ldr	r1, [pc, #60]	@ (8005f24 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ee8:	5ccb      	ldrb	r3, [r1, r3]
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f20 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	f003 030f 	and.w	r3, r3, #15
 8005efc:	4a09      	ldr	r2, [pc, #36]	@ (8005f24 <HAL_RCC_GetHCLKFreq+0x54>)
 8005efe:	5cd3      	ldrb	r3, [r2, r3]
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0a:	4a07      	ldr	r2, [pc, #28]	@ (8005f28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f0e:	4a07      	ldr	r2, [pc, #28]	@ (8005f2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f14:	4b04      	ldr	r3, [pc, #16]	@ (8005f28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f16:	681b      	ldr	r3, [r3, #0]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	58024400 	.word	0x58024400
 8005f24:	0800bae0 	.word	0x0800bae0
 8005f28:	2400d7a4 	.word	0x2400d7a4
 8005f2c:	2400d7a0 	.word	0x2400d7a0

08005f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005f34:	f7ff ffcc 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	4904      	ldr	r1, [pc, #16]	@ (8005f58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f46:	5ccb      	ldrb	r3, [r1, r3]
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	58024400 	.word	0x58024400
 8005f58:	0800bae0 	.word	0x0800bae0

08005f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005f60:	f7ff ffb6 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8005f64:	4602      	mov	r2, r0
 8005f66:	4b06      	ldr	r3, [pc, #24]	@ (8005f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	0a1b      	lsrs	r3, r3, #8
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	4904      	ldr	r1, [pc, #16]	@ (8005f84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f72:	5ccb      	ldrb	r3, [r1, r3]
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	58024400 	.word	0x58024400
 8005f84:	0800bae0 	.word	0x0800bae0

08005f88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f8c:	b0c8      	sub	sp, #288	@ 0x120
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005fac:	2500      	movs	r5, #0
 8005fae:	ea54 0305 	orrs.w	r3, r4, r5
 8005fb2:	d049      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fbe:	d02f      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005fc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fc4:	d828      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fca:	d01a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fd0:	d822      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fda:	d007      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fdc:	e01c      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fde:	4ba7      	ldr	r3, [pc, #668]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	4aa6      	ldr	r2, [pc, #664]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fea:	e01a      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fc99 	bl	800792c <RCCEx_PLL2_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006000:	e00f      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006006:	3328      	adds	r3, #40	@ 0x28
 8006008:	2102      	movs	r1, #2
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fd40 	bl	8007a90 <RCCEx_PLL3_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006016:	e004      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800602a:	4b94      	ldr	r3, [pc, #592]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800602c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006038:	4a90      	ldr	r2, [pc, #576]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800603a:	430b      	orrs	r3, r1
 800603c:	6513      	str	r3, [r2, #80]	@ 0x50
 800603e:	e003      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006044:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006054:	f04f 0900 	mov.w	r9, #0
 8006058:	ea58 0309 	orrs.w	r3, r8, r9
 800605c:	d047      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800605e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006064:	2b04      	cmp	r3, #4
 8006066:	d82a      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006068:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006085 	.word	0x08006085
 8006074:	08006093 	.word	0x08006093
 8006078:	080060a9 	.word	0x080060a9
 800607c:	080060c7 	.word	0x080060c7
 8006080:	080060c7 	.word	0x080060c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006084:	4b7d      	ldr	r3, [pc, #500]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	4a7c      	ldr	r2, [pc, #496]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800608a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006090:	e01a      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006096:	3308      	adds	r3, #8
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fc46 	bl	800792c <RCCEx_PLL2_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060a6:	e00f      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ac:	3328      	adds	r3, #40	@ 0x28
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fced 	bl	8007a90 <RCCEx_PLL3_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060bc:	e004      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060d0:	4b6a      	ldr	r3, [pc, #424]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d4:	f023 0107 	bic.w	r1, r3, #7
 80060d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060de:	4a67      	ldr	r2, [pc, #412]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060e0:	430b      	orrs	r3, r1
 80060e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80060e4:	e003      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80060ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80060fa:	f04f 0b00 	mov.w	fp, #0
 80060fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8006102:	d054      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800610a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800610e:	d036      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006110:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006114:	d82f      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611a:	d032      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800611c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006120:	d829      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006122:	2bc0      	cmp	r3, #192	@ 0xc0
 8006124:	d02f      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006126:	2bc0      	cmp	r3, #192	@ 0xc0
 8006128:	d825      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800612a:	2b80      	cmp	r3, #128	@ 0x80
 800612c:	d018      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800612e:	2b80      	cmp	r3, #128	@ 0x80
 8006130:	d821      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d007      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800613a:	e01c      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613c:	4b4f      	ldr	r3, [pc, #316]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	4a4e      	ldr	r2, [pc, #312]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006148:	e01e      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800614a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800614e:	3308      	adds	r3, #8
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f001 fbea 	bl	800792c <RCCEx_PLL2_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800615e:	e013      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006164:	3328      	adds	r3, #40	@ 0x28
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fc91 	bl	8007a90 <RCCEx_PLL3_Config>
 800616e:	4603      	mov	r3, r0
 8006170:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006174:	e008      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800617c:	e004      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800617e:	bf00      	nop
 8006180:	e002      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006188:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006190:	4b3a      	ldr	r3, [pc, #232]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006194:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800619c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800619e:	4a37      	ldr	r2, [pc, #220]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80061a4:	e003      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80061ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80061ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061be:	2300      	movs	r3, #0
 80061c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80061c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80061c8:	460b      	mov	r3, r1
 80061ca:	4313      	orrs	r3, r2
 80061cc:	d05c      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80061ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80061d8:	d03b      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061da:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80061de:	d834      	bhi.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80061e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e4:	d037      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ea:	d82e      	bhi.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80061ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061f0:	d033      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80061f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061f6:	d828      	bhi.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061fc:	d01a      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006202:	d822      	bhi.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800620c:	d007      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800620e:	e01c      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006210:	4b1a      	ldr	r3, [pc, #104]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	4a19      	ldr	r2, [pc, #100]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800621a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800621c:	e01e      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800621e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006222:	3308      	adds	r3, #8
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f001 fb80 	bl	800792c <RCCEx_PLL2_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006232:	e013      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006238:	3328      	adds	r3, #40	@ 0x28
 800623a:	2100      	movs	r1, #0
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fc27 	bl	8007a90 <RCCEx_PLL3_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006248:	e008      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006250:	e004      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800625a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10d      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006264:	4b05      	ldr	r3, [pc, #20]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006268:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800626c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006272:	4a02      	ldr	r2, [pc, #8]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006274:	430b      	orrs	r3, r1
 8006276:	6513      	str	r3, [r2, #80]	@ 0x50
 8006278:	e006      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800627a:	bf00      	nop
 800627c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006284:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006298:	2300      	movs	r3, #0
 800629a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800629e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80062a2:	460b      	mov	r3, r1
 80062a4:	4313      	orrs	r3, r2
 80062a6:	d03a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80062a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ae:	2b30      	cmp	r3, #48	@ 0x30
 80062b0:	d01f      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80062b2:	2b30      	cmp	r3, #48	@ 0x30
 80062b4:	d819      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x362>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d00c      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d815      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x362>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d019      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80062c2:	2b10      	cmp	r3, #16
 80062c4:	d111      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c6:	4bae      	ldr	r3, [pc, #696]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ca:	4aad      	ldr	r2, [pc, #692]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80062d2:	e011      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d8:	3308      	adds	r3, #8
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fb25 	bl	800792c <RCCEx_PLL2_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80062e8:	e006      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80062f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006300:	4b9f      	ldr	r3, [pc, #636]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006304:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800630c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800630e:	4a9c      	ldr	r2, [pc, #624]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006310:	430b      	orrs	r3, r1
 8006312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006314:	e003      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006316:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800631a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800631e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800632a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800632e:	2300      	movs	r3, #0
 8006330:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006334:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006338:	460b      	mov	r3, r1
 800633a:	4313      	orrs	r3, r2
 800633c:	d051      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800633e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006348:	d035      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800634a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800634e:	d82e      	bhi.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006350:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006354:	d031      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006356:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800635a:	d828      	bhi.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 800635c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006360:	d01a      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006366:	d822      	bhi.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006370:	d007      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006372:	e01c      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006374:	4b82      	ldr	r3, [pc, #520]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	4a81      	ldr	r2, [pc, #516]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800637a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800637e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006380:	e01c      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006386:	3308      	adds	r3, #8
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f001 face 	bl	800792c <RCCEx_PLL2_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006396:	e011      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800639c:	3328      	adds	r3, #40	@ 0x28
 800639e:	2100      	movs	r1, #0
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 fb75 	bl	8007a90 <RCCEx_PLL3_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80063ac:	e006      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80063ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063c4:	4b6e      	ldr	r3, [pc, #440]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d2:	4a6b      	ldr	r2, [pc, #428]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80063ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063f2:	2300      	movs	r3, #0
 80063f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80063fc:	460b      	mov	r3, r1
 80063fe:	4313      	orrs	r3, r2
 8006400:	d053      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800640c:	d033      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800640e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006412:	d82c      	bhi.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006414:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006418:	d02f      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800641a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800641e:	d826      	bhi.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006420:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006424:	d02b      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006426:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800642a:	d820      	bhi.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800642c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006430:	d012      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006436:	d81a      	bhi.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d022      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006440:	d115      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006446:	3308      	adds	r3, #8
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f001 fa6e 	bl	800792c <RCCEx_PLL2_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006456:	e015      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800645c:	3328      	adds	r3, #40	@ 0x28
 800645e:	2101      	movs	r1, #1
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fb15 	bl	8007a90 <RCCEx_PLL3_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800646c:	e00a      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006474:	e006      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006476:	bf00      	nop
 8006478:	e004      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800647a:	bf00      	nop
 800647c:	e002      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800647e:	bf00      	nop
 8006480:	e000      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006484:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800648c:	4b3c      	ldr	r3, [pc, #240]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800648e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006490:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800649a:	4a39      	ldr	r2, [pc, #228]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800649c:	430b      	orrs	r3, r1
 800649e:	6513      	str	r3, [r2, #80]	@ 0x50
 80064a0:	e003      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80064aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80064b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064ba:	2300      	movs	r3, #0
 80064bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4313      	orrs	r3, r2
 80064c8:	d060      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80064ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80064d6:	d039      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80064d8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80064dc:	d832      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064e2:	d035      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80064e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064e8:	d82c      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ee:	d031      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f4:	d826      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064fa:	d02d      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80064fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006500:	d820      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006506:	d012      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800650c:	d81a      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d024      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006516:	d115      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800651c:	3308      	adds	r3, #8
 800651e:	2101      	movs	r1, #1
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fa03 	bl	800792c <RCCEx_PLL2_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800652c:	e017      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800652e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006532:	3328      	adds	r3, #40	@ 0x28
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f001 faaa 	bl	8007a90 <RCCEx_PLL3_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006542:	e00c      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800654a:	e008      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800654c:	bf00      	nop
 800654e:	e006      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006550:	bf00      	nop
 8006552:	e004      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006554:	bf00      	nop
 8006556:	e002      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800655c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10e      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006566:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800656e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006572:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006576:	4a02      	ldr	r2, [pc, #8]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006578:	430b      	orrs	r3, r1
 800657a:	6593      	str	r3, [r2, #88]	@ 0x58
 800657c:	e006      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006588:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800658c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800659c:	2300      	movs	r3, #0
 800659e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d037      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065b6:	d00e      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80065b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065bc:	d816      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d018      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80065c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065c6:	d111      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c8:	4bc4      	ldr	r3, [pc, #784]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	4ac3      	ldr	r2, [pc, #780]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065d4:	e00f      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065da:	3308      	adds	r3, #8
 80065dc:	2101      	movs	r1, #1
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f9a4 	bl	800792c <RCCEx_PLL2_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065ea:	e004      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065f2:	e000      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80065f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065fe:	4bb7      	ldr	r3, [pc, #732]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006602:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800660a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800660c:	4ab3      	ldr	r2, [pc, #716]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800660e:	430b      	orrs	r3, r1
 8006610:	6513      	str	r3, [r2, #80]	@ 0x50
 8006612:	e003      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006614:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006618:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800661c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800662c:	2300      	movs	r3, #0
 800662e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006632:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006636:	460b      	mov	r3, r1
 8006638:	4313      	orrs	r3, r2
 800663a:	d039      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800663c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006642:	2b03      	cmp	r3, #3
 8006644:	d81c      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006646:	a201      	add	r2, pc, #4	@ (adr r2, 800664c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	08006689 	.word	0x08006689
 8006650:	0800665d 	.word	0x0800665d
 8006654:	0800666b 	.word	0x0800666b
 8006658:	08006689 	.word	0x08006689
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800665c:	4b9f      	ldr	r3, [pc, #636]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	4a9e      	ldr	r2, [pc, #632]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006668:	e00f      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800666a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800666e:	3308      	adds	r3, #8
 8006670:	2102      	movs	r1, #2
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f95a 	bl	800792c <RCCEx_PLL2_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800667e:	e004      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006686:	e000      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006692:	4b92      	ldr	r3, [pc, #584]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006696:	f023 0103 	bic.w	r1, r3, #3
 800669a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800669e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066a0:	4a8e      	ldr	r2, [pc, #568]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066a6:	e003      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80066bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066c0:	2300      	movs	r3, #0
 80066c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80066ca:	460b      	mov	r3, r1
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f000 8099 	beq.w	8006804 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066d2:	4b83      	ldr	r3, [pc, #524]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a82      	ldr	r2, [pc, #520]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80066d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066de:	f7fa fdef 	bl	80012c0 <HAL_GetTick>
 80066e2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066e6:	e00b      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e8:	f7fa fdea 	bl	80012c0 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b64      	cmp	r3, #100	@ 0x64
 80066f6:	d903      	bls.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80066fe:	e005      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006700:	4b77      	ldr	r3, [pc, #476]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0ed      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800670c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006710:	2b00      	cmp	r3, #0
 8006712:	d173      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006714:	4b71      	ldr	r3, [pc, #452]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006716:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800671c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006720:	4053      	eors	r3, r2
 8006722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006726:	2b00      	cmp	r3, #0
 8006728:	d015      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800672a:	4b6c      	ldr	r3, [pc, #432]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006732:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006736:	4b69      	ldr	r3, [pc, #420]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800673a:	4a68      	ldr	r2, [pc, #416]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800673c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006740:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006742:	4b66      	ldr	r3, [pc, #408]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006746:	4a65      	ldr	r2, [pc, #404]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800674c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800674e:	4a63      	ldr	r2, [pc, #396]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006754:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800675e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006762:	d118      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fa fdac 	bl	80012c0 <HAL_GetTick>
 8006768:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800676c:	e00d      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800676e:	f7fa fda7 	bl	80012c0 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800677e:	429a      	cmp	r2, r3
 8006780:	d903      	bls.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006788:	e005      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800678a:	4b54      	ldr	r3, [pc, #336]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800678c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0eb      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006796:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800679a:	2b00      	cmp	r3, #0
 800679c:	d129      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800679e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ae:	d10e      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80067b0:	4b4a      	ldr	r3, [pc, #296]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80067b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067c0:	091a      	lsrs	r2, r3, #4
 80067c2:	4b48      	ldr	r3, [pc, #288]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	4a45      	ldr	r2, [pc, #276]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6113      	str	r3, [r2, #16]
 80067cc:	e005      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80067ce:	4b43      	ldr	r3, [pc, #268]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	4a42      	ldr	r2, [pc, #264]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80067d8:	6113      	str	r3, [r2, #16]
 80067da:	4b40      	ldr	r3, [pc, #256]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80067de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ea:	4a3c      	ldr	r2, [pc, #240]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067ec:	430b      	orrs	r3, r1
 80067ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f0:	e008      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80067fa:	e003      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006800:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f002 0301 	and.w	r3, r2, #1
 8006810:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800681a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	f000 8090 	beq.w	8006946 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800682e:	2b28      	cmp	r3, #40	@ 0x28
 8006830:	d870      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006832:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	0800691d 	.word	0x0800691d
 800683c:	08006915 	.word	0x08006915
 8006840:	08006915 	.word	0x08006915
 8006844:	08006915 	.word	0x08006915
 8006848:	08006915 	.word	0x08006915
 800684c:	08006915 	.word	0x08006915
 8006850:	08006915 	.word	0x08006915
 8006854:	08006915 	.word	0x08006915
 8006858:	080068e9 	.word	0x080068e9
 800685c:	08006915 	.word	0x08006915
 8006860:	08006915 	.word	0x08006915
 8006864:	08006915 	.word	0x08006915
 8006868:	08006915 	.word	0x08006915
 800686c:	08006915 	.word	0x08006915
 8006870:	08006915 	.word	0x08006915
 8006874:	08006915 	.word	0x08006915
 8006878:	080068ff 	.word	0x080068ff
 800687c:	08006915 	.word	0x08006915
 8006880:	08006915 	.word	0x08006915
 8006884:	08006915 	.word	0x08006915
 8006888:	08006915 	.word	0x08006915
 800688c:	08006915 	.word	0x08006915
 8006890:	08006915 	.word	0x08006915
 8006894:	08006915 	.word	0x08006915
 8006898:	0800691d 	.word	0x0800691d
 800689c:	08006915 	.word	0x08006915
 80068a0:	08006915 	.word	0x08006915
 80068a4:	08006915 	.word	0x08006915
 80068a8:	08006915 	.word	0x08006915
 80068ac:	08006915 	.word	0x08006915
 80068b0:	08006915 	.word	0x08006915
 80068b4:	08006915 	.word	0x08006915
 80068b8:	0800691d 	.word	0x0800691d
 80068bc:	08006915 	.word	0x08006915
 80068c0:	08006915 	.word	0x08006915
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006915 	.word	0x08006915
 80068cc:	08006915 	.word	0x08006915
 80068d0:	08006915 	.word	0x08006915
 80068d4:	08006915 	.word	0x08006915
 80068d8:	0800691d 	.word	0x0800691d
 80068dc:	58024400 	.word	0x58024400
 80068e0:	58024800 	.word	0x58024800
 80068e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ec:	3308      	adds	r3, #8
 80068ee:	2101      	movs	r1, #1
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 f81b 	bl	800792c <RCCEx_PLL2_Config>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068fc:	e00f      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006902:	3328      	adds	r3, #40	@ 0x28
 8006904:	2101      	movs	r1, #1
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f8c2 	bl	8007a90 <RCCEx_PLL3_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006912:	e004      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800691c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10b      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006926:	4bc0      	ldr	r3, [pc, #768]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800692a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800692e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006936:	4abc      	ldr	r2, [pc, #752]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006938:	430b      	orrs	r3, r1
 800693a:	6553      	str	r3, [r2, #84]	@ 0x54
 800693c:	e003      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006942:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f002 0302 	and.w	r3, r2, #2
 8006952:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006956:	2300      	movs	r3, #0
 8006958:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800695c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006960:	460b      	mov	r3, r1
 8006962:	4313      	orrs	r3, r2
 8006964:	d043      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696e:	2b05      	cmp	r3, #5
 8006970:	d824      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006972:	a201      	add	r2, pc, #4	@ (adr r2, 8006978 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	080069c5 	.word	0x080069c5
 800697c:	08006991 	.word	0x08006991
 8006980:	080069a7 	.word	0x080069a7
 8006984:	080069c5 	.word	0x080069c5
 8006988:	080069c5 	.word	0x080069c5
 800698c:	080069c5 	.word	0x080069c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006994:	3308      	adds	r3, #8
 8006996:	2101      	movs	r1, #1
 8006998:	4618      	mov	r0, r3
 800699a:	f000 ffc7 	bl	800792c <RCCEx_PLL2_Config>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80069a4:	e00f      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069aa:	3328      	adds	r3, #40	@ 0x28
 80069ac:	2101      	movs	r1, #1
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 f86e 	bl	8007a90 <RCCEx_PLL3_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80069ba:	e004      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069c2:	e000      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80069c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10b      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069ce:	4b96      	ldr	r3, [pc, #600]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80069d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d2:	f023 0107 	bic.w	r1, r3, #7
 80069d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069de:	4a92      	ldr	r2, [pc, #584]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80069e4:	e003      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f002 0304 	and.w	r3, r2, #4
 80069fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069fe:	2300      	movs	r3, #0
 8006a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a04:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	d043      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a16:	2b05      	cmp	r3, #5
 8006a18:	d824      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a6d 	.word	0x08006a6d
 8006a24:	08006a39 	.word	0x08006a39
 8006a28:	08006a4f 	.word	0x08006a4f
 8006a2c:	08006a6d 	.word	0x08006a6d
 8006a30:	08006a6d 	.word	0x08006a6d
 8006a34:	08006a6d 	.word	0x08006a6d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	2101      	movs	r1, #1
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 ff73 	bl	800792c <RCCEx_PLL2_Config>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a4c:	e00f      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a52:	3328      	adds	r3, #40	@ 0x28
 8006a54:	2101      	movs	r1, #1
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f81a 	bl	8007a90 <RCCEx_PLL3_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a62:	e004      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a6a:	e000      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10b      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a76:	4b6c      	ldr	r3, [pc, #432]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7a:	f023 0107 	bic.w	r1, r3, #7
 8006a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a86:	4a68      	ldr	r2, [pc, #416]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a8c:	e003      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f002 0320 	and.w	r3, r2, #32
 8006aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006aac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	d055      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ac2:	d033      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ac8:	d82c      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d02f      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad4:	d826      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006ad6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ada:	d02b      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006adc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ae0:	d820      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ae6:	d012      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aec:	d81a      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d022      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006af6:	d115      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006afc:	3308      	adds	r3, #8
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 ff13 	bl	800792c <RCCEx_PLL2_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b0c:	e015      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b12:	3328      	adds	r3, #40	@ 0x28
 8006b14:	2102      	movs	r1, #2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 ffba 	bl	8007a90 <RCCEx_PLL3_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b22:	e00a      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b2a:	e006      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006b2c:	bf00      	nop
 8006b2e:	e004      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006b30:	bf00      	nop
 8006b32:	e002      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006b34:	bf00      	nop
 8006b36:	e000      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10b      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b42:	4b39      	ldr	r3, [pc, #228]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b52:	4a35      	ldr	r2, [pc, #212]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006b54:	430b      	orrs	r3, r1
 8006b56:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b58:	e003      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b72:	2300      	movs	r3, #0
 8006b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	d058      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b8e:	d033      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006b90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b94:	d82c      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b9a:	d02f      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba0:	d826      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ba6:	d02b      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006ba8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bac:	d820      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bb2:	d012      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bb8:	d81a      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d022      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc2:	d115      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc8:	3308      	adds	r3, #8
 8006bca:	2100      	movs	r1, #0
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fead 	bl	800792c <RCCEx_PLL2_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bd8:	e015      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bde:	3328      	adds	r3, #40	@ 0x28
 8006be0:	2102      	movs	r1, #2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 ff54 	bl	8007a90 <RCCEx_PLL3_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bee:	e00a      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006bf6:	e006      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006bf8:	bf00      	nop
 8006bfa:	e004      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006bfc:	bf00      	nop
 8006bfe:	e002      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10e      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c0e:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c1e:	4a02      	ldr	r2, [pc, #8]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c24:	e006      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006c26:	bf00      	nop
 8006c28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c44:	2300      	movs	r3, #0
 8006c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	d055      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006c60:	d033      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006c62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006c66:	d82c      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c6c:	d02f      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c72:	d826      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c78:	d02b      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006c7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c7e:	d820      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c84:	d012      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006c86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c8a:	d81a      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d022      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c94:	d115      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fe44 	bl	800792c <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006caa:	e015      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cb0:	3328      	adds	r3, #40	@ 0x28
 8006cb2:	2102      	movs	r1, #2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 feeb 	bl	8007a90 <RCCEx_PLL3_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006cc0:	e00a      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006cc8:	e006      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e004      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e002      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006cd2:	bf00      	nop
 8006cd4:	e000      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ce0:	4ba1      	ldr	r3, [pc, #644]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006cf0:	4a9d      	ldr	r2, [pc, #628]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cf6:	e003      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f002 0308 	and.w	r3, r2, #8
 8006d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d10:	2300      	movs	r3, #0
 8006d12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	d01e      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2c:	d10c      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d32:	3328      	adds	r3, #40	@ 0x28
 8006d34:	2102      	movs	r1, #2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 feaa 	bl	8007a90 <RCCEx_PLL3_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d48:	4b87      	ldr	r3, [pc, #540]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d58:	4a83      	ldr	r2, [pc, #524]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f002 0310 	and.w	r3, r2, #16
 8006d6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d01e      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d8a:	d10c      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d90:	3328      	adds	r3, #40	@ 0x28
 8006d92:	2102      	movs	r1, #2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fe7b 	bl	8007a90 <RCCEx_PLL3_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006da6:	4b70      	ldr	r3, [pc, #448]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006daa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006db2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006db6:	4a6c      	ldr	r2, [pc, #432]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006dc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	d03e      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006de0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006de8:	d022      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dee:	d81b      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df8:	d00b      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006dfa:	e015      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e00:	3308      	adds	r3, #8
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fd91 	bl	800792c <RCCEx_PLL2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e10:	e00f      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e16:	3328      	adds	r3, #40	@ 0x28
 8006e18:	2102      	movs	r1, #2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fe38 	bl	8007a90 <RCCEx_PLL3_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e26:	e004      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e2e:	e000      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e4a:	4a47      	ldr	r2, [pc, #284]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e50:	e003      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006e66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e68:	2300      	movs	r3, #0
 8006e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006e70:	460b      	mov	r3, r1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	d03b      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e82:	d01f      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006e84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e88:	d818      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e8e:	d003      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e94:	d007      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006e96:	e011      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b33      	ldr	r3, [pc, #204]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4a32      	ldr	r2, [pc, #200]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ea4:	e00f      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eaa:	3328      	adds	r3, #40	@ 0x28
 8006eac:	2101      	movs	r1, #1
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fdee 	bl	8007a90 <RCCEx_PLL3_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006eba:	e004      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ece:	4b26      	ldr	r3, [pc, #152]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ede:	4a22      	ldr	r2, [pc, #136]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ee4:	e003      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006efa:	673b      	str	r3, [r7, #112]	@ 0x70
 8006efc:	2300      	movs	r3, #0
 8006efe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006f04:	460b      	mov	r3, r1
 8006f06:	4313      	orrs	r3, r2
 8006f08:	d034      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f18:	d007      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006f1a:	e011      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1c:	4b12      	ldr	r3, [pc, #72]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f20:	4a11      	ldr	r2, [pc, #68]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f28:	e00e      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f2e:	3308      	adds	r3, #8
 8006f30:	2102      	movs	r1, #2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fcfa 	bl	800792c <RCCEx_PLL2_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f3e:	e003      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f50:	4b05      	ldr	r3, [pc, #20]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5e:	4a02      	ldr	r2, [pc, #8]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f60:	430b      	orrs	r3, r1
 8006f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f64:	e006      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f82:	2300      	movs	r3, #0
 8006f84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	d00c      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f94:	3328      	adds	r3, #40	@ 0x28
 8006f96:	2102      	movs	r1, #2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fd79 	bl	8007a90 <RCCEx_PLL3_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006fb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fb8:	2300      	movs	r3, #0
 8006fba:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	d038      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd2:	d018      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd8:	d811      	bhi.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fde:	d014      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe4:	d80b      	bhi.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d011      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fee:	d106      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff0:	4bc3      	ldr	r3, [pc, #780]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff4:	4ac2      	ldr	r2, [pc, #776]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ffc:	e008      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007004:	e004      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007006:	bf00      	nop
 8007008:	e002      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800700a:	bf00      	nop
 800700c:	e000      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800700e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007010:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007018:	4bb9      	ldr	r3, [pc, #740]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800701a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800701c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007028:	4ab5      	ldr	r2, [pc, #724]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800702a:	430b      	orrs	r3, r1
 800702c:	6553      	str	r3, [r2, #84]	@ 0x54
 800702e:	e003      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007030:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007034:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007044:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007046:	2300      	movs	r3, #0
 8007048:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800704a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800704e:	460b      	mov	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	d009      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007054:	4baa      	ldr	r3, [pc, #680]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007058:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800705c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007062:	4aa7      	ldr	r2, [pc, #668]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007064:	430b      	orrs	r3, r1
 8007066:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007074:	653b      	str	r3, [r7, #80]	@ 0x50
 8007076:	2300      	movs	r3, #0
 8007078:	657b      	str	r3, [r7, #84]	@ 0x54
 800707a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800707e:	460b      	mov	r3, r1
 8007080:	4313      	orrs	r3, r2
 8007082:	d009      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007084:	4b9e      	ldr	r3, [pc, #632]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007088:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007092:	4a9b      	ldr	r2, [pc, #620]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007094:	430b      	orrs	r3, r1
 8007096:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a6:	2300      	movs	r3, #0
 80070a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80070ae:	460b      	mov	r3, r1
 80070b0:	4313      	orrs	r3, r2
 80070b2:	d009      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80070b4:	4b92      	ldr	r3, [pc, #584]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80070bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c2:	4a8f      	ldr	r2, [pc, #572]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80070d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070d6:	2300      	movs	r3, #0
 80070d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80070da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80070de:	460b      	mov	r3, r1
 80070e0:	4313      	orrs	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070e4:	4b86      	ldr	r3, [pc, #536]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	4a85      	ldr	r2, [pc, #532]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070ee:	6113      	str	r3, [r2, #16]
 80070f0:	4b83      	ldr	r3, [pc, #524]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070f2:	6919      	ldr	r1, [r3, #16]
 80070f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80070fc:	4a80      	ldr	r2, [pc, #512]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070fe:	430b      	orrs	r3, r1
 8007100:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800710e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007114:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007118:	460b      	mov	r3, r1
 800711a:	4313      	orrs	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800711e:	4b78      	ldr	r3, [pc, #480]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007122:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800712a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712c:	4a74      	ldr	r2, [pc, #464]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800712e:	430b      	orrs	r3, r1
 8007130:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800713e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007140:	2300      	movs	r3, #0
 8007142:	637b      	str	r3, [r7, #52]	@ 0x34
 8007144:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007148:	460b      	mov	r3, r1
 800714a:	4313      	orrs	r3, r2
 800714c:	d00a      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800714e:	4b6c      	ldr	r3, [pc, #432]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007152:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800715a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800715e:	4a68      	ldr	r2, [pc, #416]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007160:	430b      	orrs	r3, r1
 8007162:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	2100      	movs	r1, #0
 800716e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007176:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800717a:	460b      	mov	r3, r1
 800717c:	4313      	orrs	r3, r2
 800717e:	d011      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007184:	3308      	adds	r3, #8
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fbcf 	bl	800792c <RCCEx_PLL2_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007194:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80071a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	2100      	movs	r1, #0
 80071ae:	6239      	str	r1, [r7, #32]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80071ba:	460b      	mov	r3, r1
 80071bc:	4313      	orrs	r3, r2
 80071be:	d011      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071c4:	3308      	adds	r3, #8
 80071c6:	2101      	movs	r1, #1
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fbaf 	bl	800792c <RCCEx_PLL2_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80071d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	2100      	movs	r1, #0
 80071ee:	61b9      	str	r1, [r7, #24]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071fa:	460b      	mov	r3, r1
 80071fc:	4313      	orrs	r3, r2
 80071fe:	d011      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007204:	3308      	adds	r3, #8
 8007206:	2102      	movs	r1, #2
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fb8f 	bl	800792c <RCCEx_PLL2_Config>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007214:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007220:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	2100      	movs	r1, #0
 800722e:	6139      	str	r1, [r7, #16]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800723a:	460b      	mov	r3, r1
 800723c:	4313      	orrs	r3, r2
 800723e:	d011      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007244:	3328      	adds	r3, #40	@ 0x28
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fc21 	bl	8007a90 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007254:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007260:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	2100      	movs	r1, #0
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800727a:	460b      	mov	r3, r1
 800727c:	4313      	orrs	r3, r2
 800727e:	d011      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007284:	3328      	adds	r3, #40	@ 0x28
 8007286:	2101      	movs	r1, #1
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fc01 	bl	8007a90 <RCCEx_PLL3_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007294:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80072a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	2100      	movs	r1, #0
 80072ae:	6039      	str	r1, [r7, #0]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80072ba:	460b      	mov	r3, r1
 80072bc:	4313      	orrs	r3, r2
 80072be:	d011      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072c4:	3328      	adds	r3, #40	@ 0x28
 80072c6:	2102      	movs	r1, #2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fbe1 	bl	8007a90 <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80072d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80072e4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	e000      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80072f8:	46bd      	mov	sp, r7
 80072fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072fe:	bf00      	nop
 8007300:	58024400 	.word	0x58024400

08007304 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007308:	f7fe fde2 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 800730c:	4602      	mov	r2, r0
 800730e:	4b06      	ldr	r3, [pc, #24]	@ (8007328 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	091b      	lsrs	r3, r3, #4
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	4904      	ldr	r1, [pc, #16]	@ (800732c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800731a:	5ccb      	ldrb	r3, [r1, r3]
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007324:	4618      	mov	r0, r3
 8007326:	bd80      	pop	{r7, pc}
 8007328:	58024400 	.word	0x58024400
 800732c:	0800bae0 	.word	0x0800bae0

08007330 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007330:	b480      	push	{r7}
 8007332:	b089      	sub	sp, #36	@ 0x24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007338:	4ba1      	ldr	r3, [pc, #644]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007342:	4b9f      	ldr	r3, [pc, #636]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007346:	0b1b      	lsrs	r3, r3, #12
 8007348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800734c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800734e:	4b9c      	ldr	r3, [pc, #624]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007352:	091b      	lsrs	r3, r3, #4
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800735a:	4b99      	ldr	r3, [pc, #612]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800735c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735e:	08db      	lsrs	r3, r3, #3
 8007360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	fb02 f303 	mul.w	r3, r2, r3
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8111 	beq.w	80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b02      	cmp	r3, #2
 8007382:	f000 8083 	beq.w	800748c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b02      	cmp	r3, #2
 800738a:	f200 80a1 	bhi.w	80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d056      	beq.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800739a:	e099      	b.n	80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800739c:	4b88      	ldr	r3, [pc, #544]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d02d      	beq.n	8007404 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073a8:	4b85      	ldr	r3, [pc, #532]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	08db      	lsrs	r3, r3, #3
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	4a84      	ldr	r2, [pc, #528]	@ (80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073b4:	fa22 f303 	lsr.w	r3, r2, r3
 80073b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	ee07 3a90 	vmov	s15, r3
 80073c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d2:	4b7b      	ldr	r3, [pc, #492]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007402:	e087      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007416:	4b6a      	ldr	r3, [pc, #424]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007426:	ed97 6a03 	vldr	s12, [r7, #12]
 800742a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800742e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800743a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007446:	e065      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745a:	4b59      	ldr	r3, [pc, #356]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746a:	ed97 6a03 	vldr	s12, [r7, #12]
 800746e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800747e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800748a:	e043      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749e:	4b48      	ldr	r3, [pc, #288]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ce:	e021      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e2:	4b37      	ldr	r3, [pc, #220]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007512:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007514:	4b2a      	ldr	r3, [pc, #168]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007518:	0a5b      	lsrs	r3, r3, #9
 800751a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800752a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800752e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800753a:	ee17 2a90 	vmov	r2, s15
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007542:	4b1f      	ldr	r3, [pc, #124]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800755c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007568:	ee17 2a90 	vmov	r2, s15
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007570:	4b13      	ldr	r3, [pc, #76]	@ (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	0e1b      	lsrs	r3, r3, #24
 8007576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800758a:	edd7 6a07 	vldr	s13, [r7, #28]
 800758e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007596:	ee17 2a90 	vmov	r2, s15
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800759e:	e008      	b.n	80075b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	609a      	str	r2, [r3, #8]
}
 80075b2:	bf00      	nop
 80075b4:	3724      	adds	r7, #36	@ 0x24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	58024400 	.word	0x58024400
 80075c4:	03d09000 	.word	0x03d09000
 80075c8:	46000000 	.word	0x46000000
 80075cc:	4c742400 	.word	0x4c742400
 80075d0:	4a742400 	.word	0x4a742400
 80075d4:	4af42400 	.word	0x4af42400

080075d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075d8:	b480      	push	{r7}
 80075da:	b089      	sub	sp, #36	@ 0x24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075ea:	4b9f      	ldr	r3, [pc, #636]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ee:	0d1b      	lsrs	r3, r3, #20
 80075f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007602:	4b99      	ldr	r3, [pc, #612]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007606:	08db      	lsrs	r3, r3, #3
 8007608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8111 	beq.w	8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b02      	cmp	r3, #2
 800762a:	f000 8083 	beq.w	8007734 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	2b02      	cmp	r3, #2
 8007632:	f200 80a1 	bhi.w	8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d056      	beq.n	80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007642:	e099      	b.n	8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007644:	4b88      	ldr	r3, [pc, #544]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02d      	beq.n	80076ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007650:	4b85      	ldr	r3, [pc, #532]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	4a84      	ldr	r2, [pc, #528]	@ (800786c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767a:	4b7b      	ldr	r3, [pc, #492]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768a:	ed97 6a03 	vldr	s12, [r7, #12]
 800768e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800769e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076aa:	e087      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007874 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076be:	4b6a      	ldr	r3, [pc, #424]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ee:	e065      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007702:	4b59      	ldr	r3, [pc, #356]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007712:	ed97 6a03 	vldr	s12, [r7, #12]
 8007716:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800771a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007732:	e043      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800787c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007746:	4b48      	ldr	r3, [pc, #288]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007756:	ed97 6a03 	vldr	s12, [r7, #12]
 800775a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800775e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800776a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007776:	e021      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007782:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800778a:	4b37      	ldr	r3, [pc, #220]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779a:	ed97 6a03 	vldr	s12, [r7, #12]
 800779e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c0:	0a5b      	lsrs	r3, r3, #9
 80077c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e2:	ee17 2a90 	vmov	r2, s15
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f4:	ee07 3a90 	vmov	s15, r3
 80077f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007800:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007804:	edd7 6a07 	vldr	s13, [r7, #28]
 8007808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800780c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007810:	ee17 2a90 	vmov	r2, s15
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007818:	4b13      	ldr	r3, [pc, #76]	@ (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781c:	0e1b      	lsrs	r3, r3, #24
 800781e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800782e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007832:	edd7 6a07 	vldr	s13, [r7, #28]
 8007836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800783a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783e:	ee17 2a90 	vmov	r2, s15
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007846:	e008      	b.n	800785a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	609a      	str	r2, [r3, #8]
}
 800785a:	bf00      	nop
 800785c:	3724      	adds	r7, #36	@ 0x24
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	58024400 	.word	0x58024400
 800786c:	03d09000 	.word	0x03d09000
 8007870:	46000000 	.word	0x46000000
 8007874:	4c742400 	.word	0x4c742400
 8007878:	4a742400 	.word	0x4a742400
 800787c:	4af42400 	.word	0x4af42400

08007880 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007888:	4b26      	ldr	r3, [pc, #152]	@ (8007924 <HAL_RCCEx_CRSConfig+0xa4>)
 800788a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800788e:	4a25      	ldr	r2, [pc, #148]	@ (8007924 <HAL_RCCEx_CRSConfig+0xa4>)
 8007890:	f043 0302 	orr.w	r3, r3, #2
 8007894:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007898:	4b22      	ldr	r3, [pc, #136]	@ (8007924 <HAL_RCCEx_CRSConfig+0xa4>)
 800789a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800789e:	4a21      	ldr	r2, [pc, #132]	@ (8007924 <HAL_RCCEx_CRSConfig+0xa4>)
 80078a0:	f023 0302 	bic.w	r3, r3, #2
 80078a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80078a8:	f7f9 fd16 	bl	80012d8 <HAL_GetREVID>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d80b      	bhi.n	80078ce <HAL_RCCEx_CRSConfig+0x4e>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078be:	d106      	bne.n	80078ce <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e008      	b.n	80078e0 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	041b      	lsls	r3, r3, #16
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80078f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007928 <HAL_RCCEx_CRSConfig+0xa8>)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80078fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007928 <HAL_RCCEx_CRSConfig+0xa8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	4907      	ldr	r1, [pc, #28]	@ (8007928 <HAL_RCCEx_CRSConfig+0xa8>)
 800790c:	4313      	orrs	r3, r2
 800790e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007910:	4b05      	ldr	r3, [pc, #20]	@ (8007928 <HAL_RCCEx_CRSConfig+0xa8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a04      	ldr	r2, [pc, #16]	@ (8007928 <HAL_RCCEx_CRSConfig+0xa8>)
 8007916:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800791a:	6013      	str	r3, [r2, #0]
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	58024400 	.word	0x58024400
 8007928:	40008400 	.word	0x40008400

0800792c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800793a:	4b53      	ldr	r3, [pc, #332]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 800793c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	2b03      	cmp	r3, #3
 8007944:	d101      	bne.n	800794a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e099      	b.n	8007a7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800794a:	4b4f      	ldr	r3, [pc, #316]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a4e      	ldr	r2, [pc, #312]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007950:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007956:	f7f9 fcb3 	bl	80012c0 <HAL_GetTick>
 800795a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800795c:	e008      	b.n	8007970 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800795e:	f7f9 fcaf 	bl	80012c0 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e086      	b.n	8007a7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007970:	4b45      	ldr	r3, [pc, #276]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1f0      	bne.n	800795e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800797c:	4b42      	ldr	r3, [pc, #264]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 800797e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007980:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	493f      	ldr	r1, [pc, #252]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 800798c:	4313      	orrs	r3, r2
 800798e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	3b01      	subs	r3, #1
 8007996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	3b01      	subs	r3, #1
 80079a0:	025b      	lsls	r3, r3, #9
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	041b      	lsls	r3, r3, #16
 80079ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079b2:	431a      	orrs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	061b      	lsls	r3, r3, #24
 80079bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079c0:	4931      	ldr	r1, [pc, #196]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079c6:	4b30      	ldr	r3, [pc, #192]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	492d      	ldr	r1, [pc, #180]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 80079da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079dc:	f023 0220 	bic.w	r2, r3, #32
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	4928      	ldr	r1, [pc, #160]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079ea:	4b27      	ldr	r3, [pc, #156]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 80079ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ee:	4a26      	ldr	r2, [pc, #152]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 80079f0:	f023 0310 	bic.w	r3, r3, #16
 80079f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079f6:	4b24      	ldr	r3, [pc, #144]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 80079f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079fa:	4b24      	ldr	r3, [pc, #144]	@ (8007a8c <RCCEx_PLL2_Config+0x160>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	69d2      	ldr	r2, [r2, #28]
 8007a02:	00d2      	lsls	r2, r2, #3
 8007a04:	4920      	ldr	r1, [pc, #128]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a10:	f043 0310 	orr.w	r3, r3, #16
 8007a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d106      	bne.n	8007a2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a20:	4a19      	ldr	r2, [pc, #100]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a28:	e00f      	b.n	8007a4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d106      	bne.n	8007a3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a30:	4b15      	ldr	r3, [pc, #84]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	4a14      	ldr	r2, [pc, #80]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a3c:	e005      	b.n	8007a4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a3e:	4b12      	ldr	r3, [pc, #72]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a42:	4a11      	ldr	r2, [pc, #68]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a56:	f7f9 fc33 	bl	80012c0 <HAL_GetTick>
 8007a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a5c:	e008      	b.n	8007a70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a5e:	f7f9 fc2f 	bl	80012c0 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e006      	b.n	8007a7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a70:	4b05      	ldr	r3, [pc, #20]	@ (8007a88 <RCCEx_PLL2_Config+0x15c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0f0      	beq.n	8007a5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	ffff0007 	.word	0xffff0007

08007a90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a9e:	4b53      	ldr	r3, [pc, #332]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d101      	bne.n	8007aae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e099      	b.n	8007be2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007aae:	4b4f      	ldr	r3, [pc, #316]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a4e      	ldr	r2, [pc, #312]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aba:	f7f9 fc01 	bl	80012c0 <HAL_GetTick>
 8007abe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ac0:	e008      	b.n	8007ad4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ac2:	f7f9 fbfd 	bl	80012c0 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d901      	bls.n	8007ad4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e086      	b.n	8007be2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ad4:	4b45      	ldr	r3, [pc, #276]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f0      	bne.n	8007ac2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ae0:	4b42      	ldr	r3, [pc, #264]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	051b      	lsls	r3, r3, #20
 8007aee:	493f      	ldr	r1, [pc, #252]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	025b      	lsls	r3, r3, #9
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	041b      	lsls	r3, r3, #16
 8007b12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	061b      	lsls	r3, r3, #24
 8007b20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b24:	4931      	ldr	r1, [pc, #196]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b2a:	4b30      	ldr	r3, [pc, #192]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	492d      	ldr	r1, [pc, #180]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	4928      	ldr	r1, [pc, #160]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b4e:	4b27      	ldr	r3, [pc, #156]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	4a26      	ldr	r2, [pc, #152]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b5a:	4b24      	ldr	r3, [pc, #144]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b5e:	4b24      	ldr	r3, [pc, #144]	@ (8007bf0 <RCCEx_PLL3_Config+0x160>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	69d2      	ldr	r2, [r2, #28]
 8007b66:	00d2      	lsls	r2, r2, #3
 8007b68:	4920      	ldr	r1, [pc, #128]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b72:	4a1e      	ldr	r2, [pc, #120]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b80:	4b1a      	ldr	r3, [pc, #104]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	4a19      	ldr	r2, [pc, #100]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b8c:	e00f      	b.n	8007bae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d106      	bne.n	8007ba2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b94:	4b15      	ldr	r3, [pc, #84]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b98:	4a14      	ldr	r2, [pc, #80]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007b9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ba0:	e005      	b.n	8007bae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ba2:	4b12      	ldr	r3, [pc, #72]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba6:	4a11      	ldr	r2, [pc, #68]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bae:	4b0f      	ldr	r3, [pc, #60]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bba:	f7f9 fb81 	bl	80012c0 <HAL_GetTick>
 8007bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bc0:	e008      	b.n	8007bd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bc2:	f7f9 fb7d 	bl	80012c0 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d901      	bls.n	8007bd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e006      	b.n	8007be2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bd4:	4b05      	ldr	r3, [pc, #20]	@ (8007bec <RCCEx_PLL3_Config+0x15c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0f0      	beq.n	8007bc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	58024400 	.word	0x58024400
 8007bf0:	ffff0007 	.word	0xffff0007

08007bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e049      	b.n	8007c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7f9 f914 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f000 f8a6 	bl	8007d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d001      	beq.n	8007cbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e04c      	b.n	8007d56 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a26      	ldr	r2, [pc, #152]	@ (8007d64 <HAL_TIM_Base_Start+0xc0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d022      	beq.n	8007d14 <HAL_TIM_Base_Start+0x70>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd6:	d01d      	beq.n	8007d14 <HAL_TIM_Base_Start+0x70>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a22      	ldr	r2, [pc, #136]	@ (8007d68 <HAL_TIM_Base_Start+0xc4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d018      	beq.n	8007d14 <HAL_TIM_Base_Start+0x70>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a21      	ldr	r2, [pc, #132]	@ (8007d6c <HAL_TIM_Base_Start+0xc8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <HAL_TIM_Base_Start+0x70>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d70 <HAL_TIM_Base_Start+0xcc>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00e      	beq.n	8007d14 <HAL_TIM_Base_Start+0x70>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8007d74 <HAL_TIM_Base_Start+0xd0>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d009      	beq.n	8007d14 <HAL_TIM_Base_Start+0x70>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <HAL_TIM_Base_Start+0xd4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_TIM_Base_Start+0x70>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8007d7c <HAL_TIM_Base_Start+0xd8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d115      	bne.n	8007d40 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	4b19      	ldr	r3, [pc, #100]	@ (8007d80 <HAL_TIM_Base_Start+0xdc>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b06      	cmp	r3, #6
 8007d24:	d015      	beq.n	8007d52 <HAL_TIM_Base_Start+0xae>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d2c:	d011      	beq.n	8007d52 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0201 	orr.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3e:	e008      	b.n	8007d52 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0201 	orr.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e000      	b.n	8007d54 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40010000 	.word	0x40010000
 8007d68:	40000400 	.word	0x40000400
 8007d6c:	40000800 	.word	0x40000800
 8007d70:	40000c00 	.word	0x40000c00
 8007d74:	40010400 	.word	0x40010400
 8007d78:	40001800 	.word	0x40001800
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	00010007 	.word	0x00010007

08007d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a46      	ldr	r2, [pc, #280]	@ (8007eb0 <TIM_Base_SetConfig+0x12c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d013      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da2:	d00f      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a43      	ldr	r2, [pc, #268]	@ (8007eb4 <TIM_Base_SetConfig+0x130>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00b      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a42      	ldr	r2, [pc, #264]	@ (8007eb8 <TIM_Base_SetConfig+0x134>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a41      	ldr	r2, [pc, #260]	@ (8007ebc <TIM_Base_SetConfig+0x138>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a40      	ldr	r2, [pc, #256]	@ (8007ec0 <TIM_Base_SetConfig+0x13c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d108      	bne.n	8007dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a35      	ldr	r2, [pc, #212]	@ (8007eb0 <TIM_Base_SetConfig+0x12c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d01f      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de4:	d01b      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a32      	ldr	r2, [pc, #200]	@ (8007eb4 <TIM_Base_SetConfig+0x130>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d017      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a31      	ldr	r2, [pc, #196]	@ (8007eb8 <TIM_Base_SetConfig+0x134>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d013      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a30      	ldr	r2, [pc, #192]	@ (8007ebc <TIM_Base_SetConfig+0x138>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00f      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a2f      	ldr	r2, [pc, #188]	@ (8007ec0 <TIM_Base_SetConfig+0x13c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00b      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a2e      	ldr	r2, [pc, #184]	@ (8007ec4 <TIM_Base_SetConfig+0x140>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d007      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec8 <TIM_Base_SetConfig+0x144>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d003      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a2c      	ldr	r2, [pc, #176]	@ (8007ecc <TIM_Base_SetConfig+0x148>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d108      	bne.n	8007e30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a16      	ldr	r2, [pc, #88]	@ (8007eb0 <TIM_Base_SetConfig+0x12c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00f      	beq.n	8007e7c <TIM_Base_SetConfig+0xf8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ec0 <TIM_Base_SetConfig+0x13c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <TIM_Base_SetConfig+0xf8>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a17      	ldr	r2, [pc, #92]	@ (8007ec4 <TIM_Base_SetConfig+0x140>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d007      	beq.n	8007e7c <TIM_Base_SetConfig+0xf8>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a16      	ldr	r2, [pc, #88]	@ (8007ec8 <TIM_Base_SetConfig+0x144>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_Base_SetConfig+0xf8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a15      	ldr	r2, [pc, #84]	@ (8007ecc <TIM_Base_SetConfig+0x148>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d103      	bne.n	8007e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	691a      	ldr	r2, [r3, #16]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d105      	bne.n	8007ea2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	f023 0201 	bic.w	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	611a      	str	r2, [r3, #16]
  }
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	40010000 	.word	0x40010000
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800
 8007ebc:	40000c00 	.word	0x40000c00
 8007ec0:	40010400 	.word	0x40010400
 8007ec4:	40014000 	.word	0x40014000
 8007ec8:	40014400 	.word	0x40014400
 8007ecc:	40014800 	.word	0x40014800

08007ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e06d      	b.n	8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a30      	ldr	r2, [pc, #192]	@ (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a2f      	ldr	r2, [pc, #188]	@ (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d108      	bne.n	8007f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a20      	ldr	r2, [pc, #128]	@ (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d022      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5a:	d01d      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a1d      	ldr	r2, [pc, #116]	@ (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d018      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00e      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a15      	ldr	r2, [pc, #84]	@ (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a16      	ldr	r2, [pc, #88]	@ (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a15      	ldr	r2, [pc, #84]	@ (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d10c      	bne.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	40010000 	.word	0x40010000
 8007fd4:	40010400 	.word	0x40010400
 8007fd8:	40000400 	.word	0x40000400
 8007fdc:	40000800 	.word	0x40000800
 8007fe0:	40000c00 	.word	0x40000c00
 8007fe4:	40001800 	.word	0x40001800
 8007fe8:	40014000 	.word	0x40014000

08007fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e042      	b.n	8008084 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7f8 ff3b 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2224      	movs	r2, #36	@ 0x24
 800801a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0201 	bic.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fb52 	bl	80096e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fce3 	bl	8008a08 <UART_SetConfig>
 8008042:	4603      	mov	r3, r0
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e01b      	b.n	8008084 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800805a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800806a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 fbd1 	bl	8009824 <UART_CheckIdleState>
 8008082:	4603      	mov	r3, r0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	@ 0x28
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	d17b      	bne.n	800819e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <HAL_UART_Transmit+0x26>
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e074      	b.n	80081a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2221      	movs	r2, #33	@ 0x21
 80080c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080c6:	f7f9 f8fb 	bl	80012c0 <HAL_GetTick>
 80080ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	88fa      	ldrh	r2, [r7, #6]
 80080d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e4:	d108      	bne.n	80080f8 <HAL_UART_Transmit+0x6c>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d104      	bne.n	80080f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	e003      	b.n	8008100 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008100:	e030      	b.n	8008164 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2200      	movs	r2, #0
 800810a:	2180      	movs	r1, #128	@ 0x80
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f001 fc33 	bl	8009978 <UART_WaitOnFlagUntilTimeout>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2220      	movs	r2, #32
 800811c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e03d      	b.n	80081a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008138:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	3302      	adds	r3, #2
 800813e:	61bb      	str	r3, [r7, #24]
 8008140:	e007      	b.n	8008152 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	3301      	adds	r3, #1
 8008150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	b29a      	uxth	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1c8      	bne.n	8008102 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2200      	movs	r2, #0
 8008178:	2140      	movs	r1, #64	@ 0x40
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f001 fbfc 	bl	8009978 <UART_WaitOnFlagUntilTimeout>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2220      	movs	r2, #32
 800818a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e006      	b.n	80081a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2220      	movs	r2, #32
 8008196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	e000      	b.n	80081a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800819e:	2302      	movs	r3, #2
  }
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3720      	adds	r7, #32
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	@ 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d137      	bne.n	8008230 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <HAL_UART_Receive_DMA+0x24>
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e030      	b.n	8008232 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a18      	ldr	r2, [pc, #96]	@ (800823c <HAL_UART_Receive_DMA+0x94>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d01f      	beq.n	8008220 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d018      	beq.n	8008220 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	613b      	str	r3, [r7, #16]
   return(result);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	623b      	str	r3, [r7, #32]
 800820e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	69f9      	ldr	r1, [r7, #28]
 8008212:	6a3a      	ldr	r2, [r7, #32]
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	61bb      	str	r3, [r7, #24]
   return(result);
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e6      	bne.n	80081ee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008220:	88fb      	ldrh	r3, [r7, #6]
 8008222:	461a      	mov	r2, r3
 8008224:	68b9      	ldr	r1, [r7, #8]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f001 fc14 	bl	8009a54 <UART_Start_Receive_DMA>
 800822c:	4603      	mov	r3, r0
 800822e:	e000      	b.n	8008232 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008230:	2302      	movs	r3, #2
  }
}
 8008232:	4618      	mov	r0, r3
 8008234:	3728      	adds	r7, #40	@ 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	58000c00 	.word	0x58000c00

08008240 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b0ba      	sub	sp, #232	@ 0xe8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800826a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800826e:	4013      	ands	r3, r2
 8008270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d11b      	bne.n	80082b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800827c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d015      	beq.n	80082b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800828c:	f003 0320 	and.w	r3, r3, #32
 8008290:	2b00      	cmp	r3, #0
 8008292:	d105      	bne.n	80082a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d009      	beq.n	80082b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8377 	beq.w	8008998 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4798      	blx	r3
      }
      return;
 80082b2:	e371      	b.n	8008998 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8123 	beq.w	8008504 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80082c2:	4b8d      	ldr	r3, [pc, #564]	@ (80084f8 <HAL_UART_IRQHandler+0x2b8>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80082ce:	4b8b      	ldr	r3, [pc, #556]	@ (80084fc <HAL_UART_IRQHandler+0x2bc>)
 80082d0:	4013      	ands	r3, r2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 8116 	beq.w	8008504 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d011      	beq.n	8008308 <HAL_UART_IRQHandler+0xc8>
 80082e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2201      	movs	r2, #1
 80082f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082fe:	f043 0201 	orr.w	r2, r3, #1
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d011      	beq.n	8008338 <HAL_UART_IRQHandler+0xf8>
 8008314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2202      	movs	r2, #2
 8008326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800832e:	f043 0204 	orr.w	r2, r3, #4
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d011      	beq.n	8008368 <HAL_UART_IRQHandler+0x128>
 8008344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2204      	movs	r2, #4
 8008356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800835e:	f043 0202 	orr.w	r2, r3, #2
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b00      	cmp	r3, #0
 8008372:	d017      	beq.n	80083a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b00      	cmp	r3, #0
 800837e:	d105      	bne.n	800838c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008380:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008384:	4b5c      	ldr	r3, [pc, #368]	@ (80084f8 <HAL_UART_IRQHandler+0x2b8>)
 8008386:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2208      	movs	r2, #8
 8008392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839a:	f043 0208 	orr.w	r2, r3, #8
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d012      	beq.n	80083d6 <HAL_UART_IRQHandler+0x196>
 80083b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00c      	beq.n	80083d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083cc:	f043 0220 	orr.w	r2, r3, #32
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 82dd 	beq.w	800899c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d013      	beq.n	8008416 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d105      	bne.n	8008406 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800841c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800842a:	2b40      	cmp	r3, #64	@ 0x40
 800842c:	d005      	beq.n	800843a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800842e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008432:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008436:	2b00      	cmp	r3, #0
 8008438:	d054      	beq.n	80084e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fbf2 	bl	8009c24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844a:	2b40      	cmp	r3, #64	@ 0x40
 800844c:	d146      	bne.n	80084dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008464:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800846c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3308      	adds	r3, #8
 8008476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800847a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800847e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1d9      	bne.n	800844e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d017      	beq.n	80084d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084aa:	4a15      	ldr	r2, [pc, #84]	@ (8008500 <HAL_UART_IRQHandler+0x2c0>)
 80084ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fa fc63 	bl	8002d80 <HAL_DMA_Abort_IT>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d019      	beq.n	80084f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d2:	e00f      	b.n	80084f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fa81 	bl	80089dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084da:	e00b      	b.n	80084f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fa7d 	bl	80089dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e2:	e007      	b.n	80084f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fa79 	bl	80089dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80084f2:	e253      	b.n	800899c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f4:	bf00      	nop
    return;
 80084f6:	e251      	b.n	800899c <HAL_UART_IRQHandler+0x75c>
 80084f8:	10000001 	.word	0x10000001
 80084fc:	04000120 	.word	0x04000120
 8008500:	08009ed7 	.word	0x08009ed7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008508:	2b01      	cmp	r3, #1
 800850a:	f040 81e7 	bne.w	80088dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800850e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 81e0 	beq.w	80088dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800851c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 81d9 	beq.w	80088dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2210      	movs	r2, #16
 8008530:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853c:	2b40      	cmp	r3, #64	@ 0x40
 800853e:	f040 8151 	bne.w	80087e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a96      	ldr	r2, [pc, #600]	@ (80087a4 <HAL_UART_IRQHandler+0x564>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d068      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a93      	ldr	r2, [pc, #588]	@ (80087a8 <HAL_UART_IRQHandler+0x568>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d061      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a91      	ldr	r2, [pc, #580]	@ (80087ac <HAL_UART_IRQHandler+0x56c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d05a      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a8e      	ldr	r2, [pc, #568]	@ (80087b0 <HAL_UART_IRQHandler+0x570>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d053      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a8c      	ldr	r2, [pc, #560]	@ (80087b4 <HAL_UART_IRQHandler+0x574>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d04c      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a89      	ldr	r2, [pc, #548]	@ (80087b8 <HAL_UART_IRQHandler+0x578>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d045      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a87      	ldr	r2, [pc, #540]	@ (80087bc <HAL_UART_IRQHandler+0x57c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d03e      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a84      	ldr	r2, [pc, #528]	@ (80087c0 <HAL_UART_IRQHandler+0x580>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d037      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a82      	ldr	r2, [pc, #520]	@ (80087c4 <HAL_UART_IRQHandler+0x584>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d030      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a7f      	ldr	r2, [pc, #508]	@ (80087c8 <HAL_UART_IRQHandler+0x588>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d029      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a7d      	ldr	r2, [pc, #500]	@ (80087cc <HAL_UART_IRQHandler+0x58c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d022      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a7a      	ldr	r2, [pc, #488]	@ (80087d0 <HAL_UART_IRQHandler+0x590>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d01b      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a78      	ldr	r2, [pc, #480]	@ (80087d4 <HAL_UART_IRQHandler+0x594>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d014      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a75      	ldr	r2, [pc, #468]	@ (80087d8 <HAL_UART_IRQHandler+0x598>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d00d      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a73      	ldr	r2, [pc, #460]	@ (80087dc <HAL_UART_IRQHandler+0x59c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d006      	beq.n	8008622 <HAL_UART_IRQHandler+0x3e2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a70      	ldr	r2, [pc, #448]	@ (80087e0 <HAL_UART_IRQHandler+0x5a0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d106      	bne.n	8008630 <HAL_UART_IRQHandler+0x3f0>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	b29b      	uxth	r3, r3
 800862e:	e005      	b.n	800863c <HAL_UART_IRQHandler+0x3fc>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008640:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 81ab 	beq.w	80089a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008650:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008654:	429a      	cmp	r2, r3
 8008656:	f080 81a3 	bcs.w	80089a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008660:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008670:	f000 8087 	beq.w	8008782 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800868c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800869e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80086aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80086b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1da      	bne.n	8008674 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3308      	adds	r3, #8
 80086c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3308      	adds	r3, #8
 80086de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80086e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80086e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80086ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e1      	bne.n	80086be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800870a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800870c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800871e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008720:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008724:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800872c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e3      	bne.n	80086fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800874e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008750:	f023 0310 	bic.w	r3, r3, #16
 8008754:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008762:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008764:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008768:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e4      	bne.n	8008740 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877c:	4618      	mov	r0, r3
 800877e:	f7f9 ffe1 	bl	8002744 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008794:	b29b      	uxth	r3, r3
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	b29b      	uxth	r3, r3
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f927 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087a2:	e0fd      	b.n	80089a0 <HAL_UART_IRQHandler+0x760>
 80087a4:	40020010 	.word	0x40020010
 80087a8:	40020028 	.word	0x40020028
 80087ac:	40020040 	.word	0x40020040
 80087b0:	40020058 	.word	0x40020058
 80087b4:	40020070 	.word	0x40020070
 80087b8:	40020088 	.word	0x40020088
 80087bc:	400200a0 	.word	0x400200a0
 80087c0:	400200b8 	.word	0x400200b8
 80087c4:	40020410 	.word	0x40020410
 80087c8:	40020428 	.word	0x40020428
 80087cc:	40020440 	.word	0x40020440
 80087d0:	40020458 	.word	0x40020458
 80087d4:	40020470 	.word	0x40020470
 80087d8:	40020488 	.word	0x40020488
 80087dc:	400204a0 	.word	0x400204a0
 80087e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 80cf 	beq.w	80089a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80ca 	beq.w	80089a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800881e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008824:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008832:	647b      	str	r3, [r7, #68]	@ 0x44
 8008834:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e4      	bne.n	8008810 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3308      	adds	r3, #8
 800884c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	623b      	str	r3, [r7, #32]
   return(result);
 8008856:	6a3a      	ldr	r2, [r7, #32]
 8008858:	4b55      	ldr	r3, [pc, #340]	@ (80089b0 <HAL_UART_IRQHandler+0x770>)
 800885a:	4013      	ands	r3, r2
 800885c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3308      	adds	r3, #8
 8008866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800886a:	633a      	str	r2, [r7, #48]	@ 0x30
 800886c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e3      	bne.n	8008846 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2220      	movs	r2, #32
 8008882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	e853 3f00 	ldrex	r3, [r3]
 800889e:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 0310 	bic.w	r3, r3, #16
 80088a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088b4:	61fb      	str	r3, [r7, #28]
 80088b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	69b9      	ldr	r1, [r7, #24]
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	617b      	str	r3, [r7, #20]
   return(result);
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e4      	bne.n	8008892 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f88b 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088da:	e063      	b.n	80089a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00e      	beq.n	8008906 <HAL_UART_IRQHandler+0x6c6>
 80088e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80088fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f001 fb2a 	bl	8009f58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008904:	e051      	b.n	80089aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800890a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800890e:	2b00      	cmp	r3, #0
 8008910:	d014      	beq.n	800893c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800891a:	2b00      	cmp	r3, #0
 800891c:	d105      	bne.n	800892a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800891e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d008      	beq.n	800893c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800892e:	2b00      	cmp	r3, #0
 8008930:	d03a      	beq.n	80089a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
    }
    return;
 800893a:	e035      	b.n	80089a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800893c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d009      	beq.n	800895c <HAL_UART_IRQHandler+0x71c>
 8008948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800894c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fad4 	bl	8009f02 <UART_EndTransmit_IT>
    return;
 800895a:	e026      	b.n	80089aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800895c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d009      	beq.n	800897c <HAL_UART_IRQHandler+0x73c>
 8008968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800896c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 fb03 	bl	8009f80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800897a:	e016      	b.n	80089aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800897c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008980:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d010      	beq.n	80089aa <HAL_UART_IRQHandler+0x76a>
 8008988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800898c:	2b00      	cmp	r3, #0
 800898e:	da0c      	bge.n	80089aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 faeb 	bl	8009f6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008996:	e008      	b.n	80089aa <HAL_UART_IRQHandler+0x76a>
      return;
 8008998:	bf00      	nop
 800899a:	e006      	b.n	80089aa <HAL_UART_IRQHandler+0x76a>
    return;
 800899c:	bf00      	nop
 800899e:	e004      	b.n	80089aa <HAL_UART_IRQHandler+0x76a>
      return;
 80089a0:	bf00      	nop
 80089a2:	e002      	b.n	80089aa <HAL_UART_IRQHandler+0x76a>
      return;
 80089a4:	bf00      	nop
 80089a6:	e000      	b.n	80089aa <HAL_UART_IRQHandler+0x76a>
    return;
 80089a8:	bf00      	nop
  }
}
 80089aa:	37e8      	adds	r7, #232	@ 0xe8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	effffffe 	.word	0xeffffffe

080089b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a0c:	b092      	sub	sp, #72	@ 0x48
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	431a      	orrs	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	4bbe      	ldr	r3, [pc, #760]	@ (8008d30 <UART_SetConfig+0x328>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a40:	430b      	orrs	r3, r1
 8008a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4ab3      	ldr	r2, [pc, #716]	@ (8008d34 <UART_SetConfig+0x32c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d004      	beq.n	8008a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a70:	4313      	orrs	r3, r2
 8008a72:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689a      	ldr	r2, [r3, #8]
 8008a7a:	4baf      	ldr	r3, [pc, #700]	@ (8008d38 <UART_SetConfig+0x330>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a84:	430b      	orrs	r3, r1
 8008a86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8e:	f023 010f 	bic.w	r1, r3, #15
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4aa6      	ldr	r2, [pc, #664]	@ (8008d3c <UART_SetConfig+0x334>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d177      	bne.n	8008b98 <UART_SetConfig+0x190>
 8008aa8:	4ba5      	ldr	r3, [pc, #660]	@ (8008d40 <UART_SetConfig+0x338>)
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ab0:	2b28      	cmp	r3, #40	@ 0x28
 8008ab2:	d86d      	bhi.n	8008b90 <UART_SetConfig+0x188>
 8008ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8008abc <UART_SetConfig+0xb4>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008b61 	.word	0x08008b61
 8008ac0:	08008b91 	.word	0x08008b91
 8008ac4:	08008b91 	.word	0x08008b91
 8008ac8:	08008b91 	.word	0x08008b91
 8008acc:	08008b91 	.word	0x08008b91
 8008ad0:	08008b91 	.word	0x08008b91
 8008ad4:	08008b91 	.word	0x08008b91
 8008ad8:	08008b91 	.word	0x08008b91
 8008adc:	08008b69 	.word	0x08008b69
 8008ae0:	08008b91 	.word	0x08008b91
 8008ae4:	08008b91 	.word	0x08008b91
 8008ae8:	08008b91 	.word	0x08008b91
 8008aec:	08008b91 	.word	0x08008b91
 8008af0:	08008b91 	.word	0x08008b91
 8008af4:	08008b91 	.word	0x08008b91
 8008af8:	08008b91 	.word	0x08008b91
 8008afc:	08008b71 	.word	0x08008b71
 8008b00:	08008b91 	.word	0x08008b91
 8008b04:	08008b91 	.word	0x08008b91
 8008b08:	08008b91 	.word	0x08008b91
 8008b0c:	08008b91 	.word	0x08008b91
 8008b10:	08008b91 	.word	0x08008b91
 8008b14:	08008b91 	.word	0x08008b91
 8008b18:	08008b91 	.word	0x08008b91
 8008b1c:	08008b79 	.word	0x08008b79
 8008b20:	08008b91 	.word	0x08008b91
 8008b24:	08008b91 	.word	0x08008b91
 8008b28:	08008b91 	.word	0x08008b91
 8008b2c:	08008b91 	.word	0x08008b91
 8008b30:	08008b91 	.word	0x08008b91
 8008b34:	08008b91 	.word	0x08008b91
 8008b38:	08008b91 	.word	0x08008b91
 8008b3c:	08008b81 	.word	0x08008b81
 8008b40:	08008b91 	.word	0x08008b91
 8008b44:	08008b91 	.word	0x08008b91
 8008b48:	08008b91 	.word	0x08008b91
 8008b4c:	08008b91 	.word	0x08008b91
 8008b50:	08008b91 	.word	0x08008b91
 8008b54:	08008b91 	.word	0x08008b91
 8008b58:	08008b91 	.word	0x08008b91
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b66:	e326      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008b68:	2304      	movs	r3, #4
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6e:	e322      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008b70:	2308      	movs	r3, #8
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b76:	e31e      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008b78:	2310      	movs	r3, #16
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7e:	e31a      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008b80:	2320      	movs	r3, #32
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b86:	e316      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008b88:	2340      	movs	r3, #64	@ 0x40
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8e:	e312      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008b90:	2380      	movs	r3, #128	@ 0x80
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b96:	e30e      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a69      	ldr	r2, [pc, #420]	@ (8008d44 <UART_SetConfig+0x33c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d130      	bne.n	8008c04 <UART_SetConfig+0x1fc>
 8008ba2:	4b67      	ldr	r3, [pc, #412]	@ (8008d40 <UART_SetConfig+0x338>)
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d826      	bhi.n	8008bfc <UART_SetConfig+0x1f4>
 8008bae:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb4 <UART_SetConfig+0x1ac>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008bcd 	.word	0x08008bcd
 8008bb8:	08008bd5 	.word	0x08008bd5
 8008bbc:	08008bdd 	.word	0x08008bdd
 8008bc0:	08008be5 	.word	0x08008be5
 8008bc4:	08008bed 	.word	0x08008bed
 8008bc8:	08008bf5 	.word	0x08008bf5
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd2:	e2f0      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bda:	e2ec      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008bdc:	2308      	movs	r3, #8
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be2:	e2e8      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008be4:	2310      	movs	r3, #16
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bea:	e2e4      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008bec:	2320      	movs	r3, #32
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf2:	e2e0      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008bf4:	2340      	movs	r3, #64	@ 0x40
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfa:	e2dc      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008bfc:	2380      	movs	r3, #128	@ 0x80
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c02:	e2d8      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a4f      	ldr	r2, [pc, #316]	@ (8008d48 <UART_SetConfig+0x340>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d130      	bne.n	8008c70 <UART_SetConfig+0x268>
 8008c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8008d40 <UART_SetConfig+0x338>)
 8008c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d826      	bhi.n	8008c68 <UART_SetConfig+0x260>
 8008c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c20 <UART_SetConfig+0x218>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c39 	.word	0x08008c39
 8008c24:	08008c41 	.word	0x08008c41
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c61 	.word	0x08008c61
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e2ba      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008c40:	2304      	movs	r3, #4
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e2b6      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e2b2      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e2ae      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e2aa      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008c60:	2340      	movs	r3, #64	@ 0x40
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e2a6      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008c68:	2380      	movs	r3, #128	@ 0x80
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e2a2      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a35      	ldr	r2, [pc, #212]	@ (8008d4c <UART_SetConfig+0x344>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d130      	bne.n	8008cdc <UART_SetConfig+0x2d4>
 8008c7a:	4b31      	ldr	r3, [pc, #196]	@ (8008d40 <UART_SetConfig+0x338>)
 8008c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	d826      	bhi.n	8008cd4 <UART_SetConfig+0x2cc>
 8008c86:	a201      	add	r2, pc, #4	@ (adr r2, 8008c8c <UART_SetConfig+0x284>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008ca5 	.word	0x08008ca5
 8008c90:	08008cad 	.word	0x08008cad
 8008c94:	08008cb5 	.word	0x08008cb5
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e284      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e280      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e27c      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e278      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e274      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008ccc:	2340      	movs	r3, #64	@ 0x40
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e270      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008cd4:	2380      	movs	r3, #128	@ 0x80
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e26c      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d50 <UART_SetConfig+0x348>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d142      	bne.n	8008d6c <UART_SetConfig+0x364>
 8008ce6:	4b16      	ldr	r3, [pc, #88]	@ (8008d40 <UART_SetConfig+0x338>)
 8008ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d838      	bhi.n	8008d64 <UART_SetConfig+0x35c>
 8008cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf8 <UART_SetConfig+0x2f0>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d11 	.word	0x08008d11
 8008cfc:	08008d19 	.word	0x08008d19
 8008d00:	08008d21 	.word	0x08008d21
 8008d04:	08008d29 	.word	0x08008d29
 8008d08:	08008d55 	.word	0x08008d55
 8008d0c:	08008d5d 	.word	0x08008d5d
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d16:	e24e      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008d18:	2304      	movs	r3, #4
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1e:	e24a      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008d20:	2308      	movs	r3, #8
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d26:	e246      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008d28:	2310      	movs	r3, #16
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2e:	e242      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008d30:	cfff69f3 	.word	0xcfff69f3
 8008d34:	58000c00 	.word	0x58000c00
 8008d38:	11fff4ff 	.word	0x11fff4ff
 8008d3c:	40011000 	.word	0x40011000
 8008d40:	58024400 	.word	0x58024400
 8008d44:	40004400 	.word	0x40004400
 8008d48:	40004800 	.word	0x40004800
 8008d4c:	40004c00 	.word	0x40004c00
 8008d50:	40005000 	.word	0x40005000
 8008d54:	2320      	movs	r3, #32
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e22c      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008d5c:	2340      	movs	r3, #64	@ 0x40
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e228      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008d64:	2380      	movs	r3, #128	@ 0x80
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6a:	e224      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4ab1      	ldr	r2, [pc, #708]	@ (8009038 <UART_SetConfig+0x630>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d176      	bne.n	8008e64 <UART_SetConfig+0x45c>
 8008d76:	4bb1      	ldr	r3, [pc, #708]	@ (800903c <UART_SetConfig+0x634>)
 8008d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d7e:	2b28      	cmp	r3, #40	@ 0x28
 8008d80:	d86c      	bhi.n	8008e5c <UART_SetConfig+0x454>
 8008d82:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <UART_SetConfig+0x380>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008e2d 	.word	0x08008e2d
 8008d8c:	08008e5d 	.word	0x08008e5d
 8008d90:	08008e5d 	.word	0x08008e5d
 8008d94:	08008e5d 	.word	0x08008e5d
 8008d98:	08008e5d 	.word	0x08008e5d
 8008d9c:	08008e5d 	.word	0x08008e5d
 8008da0:	08008e5d 	.word	0x08008e5d
 8008da4:	08008e5d 	.word	0x08008e5d
 8008da8:	08008e35 	.word	0x08008e35
 8008dac:	08008e5d 	.word	0x08008e5d
 8008db0:	08008e5d 	.word	0x08008e5d
 8008db4:	08008e5d 	.word	0x08008e5d
 8008db8:	08008e5d 	.word	0x08008e5d
 8008dbc:	08008e5d 	.word	0x08008e5d
 8008dc0:	08008e5d 	.word	0x08008e5d
 8008dc4:	08008e5d 	.word	0x08008e5d
 8008dc8:	08008e3d 	.word	0x08008e3d
 8008dcc:	08008e5d 	.word	0x08008e5d
 8008dd0:	08008e5d 	.word	0x08008e5d
 8008dd4:	08008e5d 	.word	0x08008e5d
 8008dd8:	08008e5d 	.word	0x08008e5d
 8008ddc:	08008e5d 	.word	0x08008e5d
 8008de0:	08008e5d 	.word	0x08008e5d
 8008de4:	08008e5d 	.word	0x08008e5d
 8008de8:	08008e45 	.word	0x08008e45
 8008dec:	08008e5d 	.word	0x08008e5d
 8008df0:	08008e5d 	.word	0x08008e5d
 8008df4:	08008e5d 	.word	0x08008e5d
 8008df8:	08008e5d 	.word	0x08008e5d
 8008dfc:	08008e5d 	.word	0x08008e5d
 8008e00:	08008e5d 	.word	0x08008e5d
 8008e04:	08008e5d 	.word	0x08008e5d
 8008e08:	08008e4d 	.word	0x08008e4d
 8008e0c:	08008e5d 	.word	0x08008e5d
 8008e10:	08008e5d 	.word	0x08008e5d
 8008e14:	08008e5d 	.word	0x08008e5d
 8008e18:	08008e5d 	.word	0x08008e5d
 8008e1c:	08008e5d 	.word	0x08008e5d
 8008e20:	08008e5d 	.word	0x08008e5d
 8008e24:	08008e5d 	.word	0x08008e5d
 8008e28:	08008e55 	.word	0x08008e55
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e1c0      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008e34:	2304      	movs	r3, #4
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e1bc      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008e3c:	2308      	movs	r3, #8
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e1b8      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008e44:	2310      	movs	r3, #16
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e1b4      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008e4c:	2320      	movs	r3, #32
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e1b0      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008e54:	2340      	movs	r3, #64	@ 0x40
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e1ac      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008e5c:	2380      	movs	r3, #128	@ 0x80
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e1a8      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a75      	ldr	r2, [pc, #468]	@ (8009040 <UART_SetConfig+0x638>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d130      	bne.n	8008ed0 <UART_SetConfig+0x4c8>
 8008e6e:	4b73      	ldr	r3, [pc, #460]	@ (800903c <UART_SetConfig+0x634>)
 8008e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b05      	cmp	r3, #5
 8008e78:	d826      	bhi.n	8008ec8 <UART_SetConfig+0x4c0>
 8008e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e80 <UART_SetConfig+0x478>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008e99 	.word	0x08008e99
 8008e84:	08008ea1 	.word	0x08008ea1
 8008e88:	08008ea9 	.word	0x08008ea9
 8008e8c:	08008eb1 	.word	0x08008eb1
 8008e90:	08008eb9 	.word	0x08008eb9
 8008e94:	08008ec1 	.word	0x08008ec1
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e18a      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e186      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e182      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e17e      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008eb8:	2320      	movs	r3, #32
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e17a      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008ec0:	2340      	movs	r3, #64	@ 0x40
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e176      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008ec8:	2380      	movs	r3, #128	@ 0x80
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e172      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a5b      	ldr	r2, [pc, #364]	@ (8009044 <UART_SetConfig+0x63c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d130      	bne.n	8008f3c <UART_SetConfig+0x534>
 8008eda:	4b58      	ldr	r3, [pc, #352]	@ (800903c <UART_SetConfig+0x634>)
 8008edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ede:	f003 0307 	and.w	r3, r3, #7
 8008ee2:	2b05      	cmp	r3, #5
 8008ee4:	d826      	bhi.n	8008f34 <UART_SetConfig+0x52c>
 8008ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eec <UART_SetConfig+0x4e4>)
 8008ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eec:	08008f05 	.word	0x08008f05
 8008ef0:	08008f0d 	.word	0x08008f0d
 8008ef4:	08008f15 	.word	0x08008f15
 8008ef8:	08008f1d 	.word	0x08008f1d
 8008efc:	08008f25 	.word	0x08008f25
 8008f00:	08008f2d 	.word	0x08008f2d
 8008f04:	2300      	movs	r3, #0
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e154      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008f0c:	2304      	movs	r3, #4
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e150      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008f14:	2308      	movs	r3, #8
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e14c      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008f1c:	2310      	movs	r3, #16
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e148      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008f24:	2320      	movs	r3, #32
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e144      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008f2c:	2340      	movs	r3, #64	@ 0x40
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e140      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008f34:	2380      	movs	r3, #128	@ 0x80
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e13c      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a41      	ldr	r2, [pc, #260]	@ (8009048 <UART_SetConfig+0x640>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	f040 8082 	bne.w	800904c <UART_SetConfig+0x644>
 8008f48:	4b3c      	ldr	r3, [pc, #240]	@ (800903c <UART_SetConfig+0x634>)
 8008f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f50:	2b28      	cmp	r3, #40	@ 0x28
 8008f52:	d86d      	bhi.n	8009030 <UART_SetConfig+0x628>
 8008f54:	a201      	add	r2, pc, #4	@ (adr r2, 8008f5c <UART_SetConfig+0x554>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08009001 	.word	0x08009001
 8008f60:	08009031 	.word	0x08009031
 8008f64:	08009031 	.word	0x08009031
 8008f68:	08009031 	.word	0x08009031
 8008f6c:	08009031 	.word	0x08009031
 8008f70:	08009031 	.word	0x08009031
 8008f74:	08009031 	.word	0x08009031
 8008f78:	08009031 	.word	0x08009031
 8008f7c:	08009009 	.word	0x08009009
 8008f80:	08009031 	.word	0x08009031
 8008f84:	08009031 	.word	0x08009031
 8008f88:	08009031 	.word	0x08009031
 8008f8c:	08009031 	.word	0x08009031
 8008f90:	08009031 	.word	0x08009031
 8008f94:	08009031 	.word	0x08009031
 8008f98:	08009031 	.word	0x08009031
 8008f9c:	08009011 	.word	0x08009011
 8008fa0:	08009031 	.word	0x08009031
 8008fa4:	08009031 	.word	0x08009031
 8008fa8:	08009031 	.word	0x08009031
 8008fac:	08009031 	.word	0x08009031
 8008fb0:	08009031 	.word	0x08009031
 8008fb4:	08009031 	.word	0x08009031
 8008fb8:	08009031 	.word	0x08009031
 8008fbc:	08009019 	.word	0x08009019
 8008fc0:	08009031 	.word	0x08009031
 8008fc4:	08009031 	.word	0x08009031
 8008fc8:	08009031 	.word	0x08009031
 8008fcc:	08009031 	.word	0x08009031
 8008fd0:	08009031 	.word	0x08009031
 8008fd4:	08009031 	.word	0x08009031
 8008fd8:	08009031 	.word	0x08009031
 8008fdc:	08009021 	.word	0x08009021
 8008fe0:	08009031 	.word	0x08009031
 8008fe4:	08009031 	.word	0x08009031
 8008fe8:	08009031 	.word	0x08009031
 8008fec:	08009031 	.word	0x08009031
 8008ff0:	08009031 	.word	0x08009031
 8008ff4:	08009031 	.word	0x08009031
 8008ff8:	08009031 	.word	0x08009031
 8008ffc:	08009029 	.word	0x08009029
 8009000:	2301      	movs	r3, #1
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e0d6      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009008:	2304      	movs	r3, #4
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e0d2      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009010:	2308      	movs	r3, #8
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e0ce      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009018:	2310      	movs	r3, #16
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e0ca      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009020:	2320      	movs	r3, #32
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e0c6      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009028:	2340      	movs	r3, #64	@ 0x40
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e0c2      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009030:	2380      	movs	r3, #128	@ 0x80
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e0be      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009038:	40011400 	.word	0x40011400
 800903c:	58024400 	.word	0x58024400
 8009040:	40007800 	.word	0x40007800
 8009044:	40007c00 	.word	0x40007c00
 8009048:	40011800 	.word	0x40011800
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4aad      	ldr	r2, [pc, #692]	@ (8009308 <UART_SetConfig+0x900>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d176      	bne.n	8009144 <UART_SetConfig+0x73c>
 8009056:	4bad      	ldr	r3, [pc, #692]	@ (800930c <UART_SetConfig+0x904>)
 8009058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800905e:	2b28      	cmp	r3, #40	@ 0x28
 8009060:	d86c      	bhi.n	800913c <UART_SetConfig+0x734>
 8009062:	a201      	add	r2, pc, #4	@ (adr r2, 8009068 <UART_SetConfig+0x660>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	0800910d 	.word	0x0800910d
 800906c:	0800913d 	.word	0x0800913d
 8009070:	0800913d 	.word	0x0800913d
 8009074:	0800913d 	.word	0x0800913d
 8009078:	0800913d 	.word	0x0800913d
 800907c:	0800913d 	.word	0x0800913d
 8009080:	0800913d 	.word	0x0800913d
 8009084:	0800913d 	.word	0x0800913d
 8009088:	08009115 	.word	0x08009115
 800908c:	0800913d 	.word	0x0800913d
 8009090:	0800913d 	.word	0x0800913d
 8009094:	0800913d 	.word	0x0800913d
 8009098:	0800913d 	.word	0x0800913d
 800909c:	0800913d 	.word	0x0800913d
 80090a0:	0800913d 	.word	0x0800913d
 80090a4:	0800913d 	.word	0x0800913d
 80090a8:	0800911d 	.word	0x0800911d
 80090ac:	0800913d 	.word	0x0800913d
 80090b0:	0800913d 	.word	0x0800913d
 80090b4:	0800913d 	.word	0x0800913d
 80090b8:	0800913d 	.word	0x0800913d
 80090bc:	0800913d 	.word	0x0800913d
 80090c0:	0800913d 	.word	0x0800913d
 80090c4:	0800913d 	.word	0x0800913d
 80090c8:	08009125 	.word	0x08009125
 80090cc:	0800913d 	.word	0x0800913d
 80090d0:	0800913d 	.word	0x0800913d
 80090d4:	0800913d 	.word	0x0800913d
 80090d8:	0800913d 	.word	0x0800913d
 80090dc:	0800913d 	.word	0x0800913d
 80090e0:	0800913d 	.word	0x0800913d
 80090e4:	0800913d 	.word	0x0800913d
 80090e8:	0800912d 	.word	0x0800912d
 80090ec:	0800913d 	.word	0x0800913d
 80090f0:	0800913d 	.word	0x0800913d
 80090f4:	0800913d 	.word	0x0800913d
 80090f8:	0800913d 	.word	0x0800913d
 80090fc:	0800913d 	.word	0x0800913d
 8009100:	0800913d 	.word	0x0800913d
 8009104:	0800913d 	.word	0x0800913d
 8009108:	08009135 	.word	0x08009135
 800910c:	2301      	movs	r3, #1
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009112:	e050      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009114:	2304      	movs	r3, #4
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911a:	e04c      	b.n	80091b6 <UART_SetConfig+0x7ae>
 800911c:	2308      	movs	r3, #8
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e048      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009124:	2310      	movs	r3, #16
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e044      	b.n	80091b6 <UART_SetConfig+0x7ae>
 800912c:	2320      	movs	r3, #32
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e040      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009134:	2340      	movs	r3, #64	@ 0x40
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e03c      	b.n	80091b6 <UART_SetConfig+0x7ae>
 800913c:	2380      	movs	r3, #128	@ 0x80
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e038      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a71      	ldr	r2, [pc, #452]	@ (8009310 <UART_SetConfig+0x908>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d130      	bne.n	80091b0 <UART_SetConfig+0x7a8>
 800914e:	4b6f      	ldr	r3, [pc, #444]	@ (800930c <UART_SetConfig+0x904>)
 8009150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	2b05      	cmp	r3, #5
 8009158:	d826      	bhi.n	80091a8 <UART_SetConfig+0x7a0>
 800915a:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <UART_SetConfig+0x758>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009179 	.word	0x08009179
 8009164:	08009181 	.word	0x08009181
 8009168:	08009189 	.word	0x08009189
 800916c:	08009191 	.word	0x08009191
 8009170:	08009199 	.word	0x08009199
 8009174:	080091a1 	.word	0x080091a1
 8009178:	2302      	movs	r3, #2
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917e:	e01a      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009180:	2304      	movs	r3, #4
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009186:	e016      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009188:	2308      	movs	r3, #8
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918e:	e012      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009190:	2310      	movs	r3, #16
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009196:	e00e      	b.n	80091b6 <UART_SetConfig+0x7ae>
 8009198:	2320      	movs	r3, #32
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e00a      	b.n	80091b6 <UART_SetConfig+0x7ae>
 80091a0:	2340      	movs	r3, #64	@ 0x40
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e006      	b.n	80091b6 <UART_SetConfig+0x7ae>
 80091a8:	2380      	movs	r3, #128	@ 0x80
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e002      	b.n	80091b6 <UART_SetConfig+0x7ae>
 80091b0:	2380      	movs	r3, #128	@ 0x80
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a55      	ldr	r2, [pc, #340]	@ (8009310 <UART_SetConfig+0x908>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	f040 80f8 	bne.w	80093b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	dc46      	bgt.n	8009258 <UART_SetConfig+0x850>
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	db75      	blt.n	80092ba <UART_SetConfig+0x8b2>
 80091ce:	3b02      	subs	r3, #2
 80091d0:	2b1e      	cmp	r3, #30
 80091d2:	d872      	bhi.n	80092ba <UART_SetConfig+0x8b2>
 80091d4:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <UART_SetConfig+0x7d4>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	0800925f 	.word	0x0800925f
 80091e0:	080092bb 	.word	0x080092bb
 80091e4:	08009267 	.word	0x08009267
 80091e8:	080092bb 	.word	0x080092bb
 80091ec:	080092bb 	.word	0x080092bb
 80091f0:	080092bb 	.word	0x080092bb
 80091f4:	08009277 	.word	0x08009277
 80091f8:	080092bb 	.word	0x080092bb
 80091fc:	080092bb 	.word	0x080092bb
 8009200:	080092bb 	.word	0x080092bb
 8009204:	080092bb 	.word	0x080092bb
 8009208:	080092bb 	.word	0x080092bb
 800920c:	080092bb 	.word	0x080092bb
 8009210:	080092bb 	.word	0x080092bb
 8009214:	08009287 	.word	0x08009287
 8009218:	080092bb 	.word	0x080092bb
 800921c:	080092bb 	.word	0x080092bb
 8009220:	080092bb 	.word	0x080092bb
 8009224:	080092bb 	.word	0x080092bb
 8009228:	080092bb 	.word	0x080092bb
 800922c:	080092bb 	.word	0x080092bb
 8009230:	080092bb 	.word	0x080092bb
 8009234:	080092bb 	.word	0x080092bb
 8009238:	080092bb 	.word	0x080092bb
 800923c:	080092bb 	.word	0x080092bb
 8009240:	080092bb 	.word	0x080092bb
 8009244:	080092bb 	.word	0x080092bb
 8009248:	080092bb 	.word	0x080092bb
 800924c:	080092bb 	.word	0x080092bb
 8009250:	080092bb 	.word	0x080092bb
 8009254:	080092ad 	.word	0x080092ad
 8009258:	2b40      	cmp	r3, #64	@ 0x40
 800925a:	d02a      	beq.n	80092b2 <UART_SetConfig+0x8aa>
 800925c:	e02d      	b.n	80092ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800925e:	f7fe f851 	bl	8007304 <HAL_RCCEx_GetD3PCLK1Freq>
 8009262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009264:	e02f      	b.n	80092c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe f860 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009274:	e027      	b.n	80092c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009276:	f107 0318 	add.w	r3, r7, #24
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe f9ac 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009284:	e01f      	b.n	80092c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009286:	4b21      	ldr	r3, [pc, #132]	@ (800930c <UART_SetConfig+0x904>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d009      	beq.n	80092a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009292:	4b1e      	ldr	r3, [pc, #120]	@ (800930c <UART_SetConfig+0x904>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	08db      	lsrs	r3, r3, #3
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	4a1d      	ldr	r2, [pc, #116]	@ (8009314 <UART_SetConfig+0x90c>)
 800929e:	fa22 f303 	lsr.w	r3, r2, r3
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092a4:	e00f      	b.n	80092c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092a6:	4b1b      	ldr	r3, [pc, #108]	@ (8009314 <UART_SetConfig+0x90c>)
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092aa:	e00c      	b.n	80092c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009318 <UART_SetConfig+0x910>)
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b0:	e009      	b.n	80092c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b8:	e005      	b.n	80092c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 81ee 	beq.w	80096aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d2:	4a12      	ldr	r2, [pc, #72]	@ (800931c <UART_SetConfig+0x914>)
 80092d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092d8:	461a      	mov	r2, r3
 80092da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80092e0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	4613      	mov	r3, r2
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	4413      	add	r3, r2
 80092ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d305      	bcc.n	80092fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d910      	bls.n	8009320 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009304:	e1d1      	b.n	80096aa <UART_SetConfig+0xca2>
 8009306:	bf00      	nop
 8009308:	40011c00 	.word	0x40011c00
 800930c:	58024400 	.word	0x58024400
 8009310:	58000c00 	.word	0x58000c00
 8009314:	03d09000 	.word	0x03d09000
 8009318:	003d0900 	.word	0x003d0900
 800931c:	0800baf8 	.word	0x0800baf8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009322:	2200      	movs	r2, #0
 8009324:	60bb      	str	r3, [r7, #8]
 8009326:	60fa      	str	r2, [r7, #12]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800932c:	4ac0      	ldr	r2, [pc, #768]	@ (8009630 <UART_SetConfig+0xc28>)
 800932e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009332:	b29b      	uxth	r3, r3
 8009334:	2200      	movs	r2, #0
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	607a      	str	r2, [r7, #4]
 800933a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009342:	f7f6 ffd5 	bl	80002f0 <__aeabi_uldivmod>
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4610      	mov	r0, r2
 800934c:	4619      	mov	r1, r3
 800934e:	f04f 0200 	mov.w	r2, #0
 8009352:	f04f 0300 	mov.w	r3, #0
 8009356:	020b      	lsls	r3, r1, #8
 8009358:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800935c:	0202      	lsls	r2, r0, #8
 800935e:	6979      	ldr	r1, [r7, #20]
 8009360:	6849      	ldr	r1, [r1, #4]
 8009362:	0849      	lsrs	r1, r1, #1
 8009364:	2000      	movs	r0, #0
 8009366:	460c      	mov	r4, r1
 8009368:	4605      	mov	r5, r0
 800936a:	eb12 0804 	adds.w	r8, r2, r4
 800936e:	eb43 0905 	adc.w	r9, r3, r5
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	469a      	mov	sl, r3
 800937a:	4693      	mov	fp, r2
 800937c:	4652      	mov	r2, sl
 800937e:	465b      	mov	r3, fp
 8009380:	4640      	mov	r0, r8
 8009382:	4649      	mov	r1, r9
 8009384:	f7f6 ffb4 	bl	80002f0 <__aeabi_uldivmod>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4613      	mov	r3, r2
 800938e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009396:	d308      	bcc.n	80093aa <UART_SetConfig+0x9a2>
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800939e:	d204      	bcs.n	80093aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093a6:	60da      	str	r2, [r3, #12]
 80093a8:	e17f      	b.n	80096aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093b0:	e17b      	b.n	80096aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093ba:	f040 80bd 	bne.w	8009538 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80093be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093c2:	2b20      	cmp	r3, #32
 80093c4:	dc48      	bgt.n	8009458 <UART_SetConfig+0xa50>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	db7b      	blt.n	80094c2 <UART_SetConfig+0xaba>
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d879      	bhi.n	80094c2 <UART_SetConfig+0xaba>
 80093ce:	a201      	add	r2, pc, #4	@ (adr r2, 80093d4 <UART_SetConfig+0x9cc>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	0800945f 	.word	0x0800945f
 80093d8:	08009467 	.word	0x08009467
 80093dc:	080094c3 	.word	0x080094c3
 80093e0:	080094c3 	.word	0x080094c3
 80093e4:	0800946f 	.word	0x0800946f
 80093e8:	080094c3 	.word	0x080094c3
 80093ec:	080094c3 	.word	0x080094c3
 80093f0:	080094c3 	.word	0x080094c3
 80093f4:	0800947f 	.word	0x0800947f
 80093f8:	080094c3 	.word	0x080094c3
 80093fc:	080094c3 	.word	0x080094c3
 8009400:	080094c3 	.word	0x080094c3
 8009404:	080094c3 	.word	0x080094c3
 8009408:	080094c3 	.word	0x080094c3
 800940c:	080094c3 	.word	0x080094c3
 8009410:	080094c3 	.word	0x080094c3
 8009414:	0800948f 	.word	0x0800948f
 8009418:	080094c3 	.word	0x080094c3
 800941c:	080094c3 	.word	0x080094c3
 8009420:	080094c3 	.word	0x080094c3
 8009424:	080094c3 	.word	0x080094c3
 8009428:	080094c3 	.word	0x080094c3
 800942c:	080094c3 	.word	0x080094c3
 8009430:	080094c3 	.word	0x080094c3
 8009434:	080094c3 	.word	0x080094c3
 8009438:	080094c3 	.word	0x080094c3
 800943c:	080094c3 	.word	0x080094c3
 8009440:	080094c3 	.word	0x080094c3
 8009444:	080094c3 	.word	0x080094c3
 8009448:	080094c3 	.word	0x080094c3
 800944c:	080094c3 	.word	0x080094c3
 8009450:	080094c3 	.word	0x080094c3
 8009454:	080094b5 	.word	0x080094b5
 8009458:	2b40      	cmp	r3, #64	@ 0x40
 800945a:	d02e      	beq.n	80094ba <UART_SetConfig+0xab2>
 800945c:	e031      	b.n	80094c2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800945e:	f7fc fd67 	bl	8005f30 <HAL_RCC_GetPCLK1Freq>
 8009462:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009464:	e033      	b.n	80094ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009466:	f7fc fd79 	bl	8005f5c <HAL_RCC_GetPCLK2Freq>
 800946a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800946c:	e02f      	b.n	80094ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009472:	4618      	mov	r0, r3
 8009474:	f7fd ff5c 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800947c:	e027      	b.n	80094ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800947e:	f107 0318 	add.w	r3, r7, #24
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe f8a8 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800948c:	e01f      	b.n	80094ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800948e:	4b69      	ldr	r3, [pc, #420]	@ (8009634 <UART_SetConfig+0xc2c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b00      	cmp	r3, #0
 8009498:	d009      	beq.n	80094ae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800949a:	4b66      	ldr	r3, [pc, #408]	@ (8009634 <UART_SetConfig+0xc2c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	08db      	lsrs	r3, r3, #3
 80094a0:	f003 0303 	and.w	r3, r3, #3
 80094a4:	4a64      	ldr	r2, [pc, #400]	@ (8009638 <UART_SetConfig+0xc30>)
 80094a6:	fa22 f303 	lsr.w	r3, r2, r3
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094ac:	e00f      	b.n	80094ce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80094ae:	4b62      	ldr	r3, [pc, #392]	@ (8009638 <UART_SetConfig+0xc30>)
 80094b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b2:	e00c      	b.n	80094ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094b4:	4b61      	ldr	r3, [pc, #388]	@ (800963c <UART_SetConfig+0xc34>)
 80094b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b8:	e009      	b.n	80094ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c0:	e005      	b.n	80094ce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 80ea 	beq.w	80096aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	4a55      	ldr	r2, [pc, #340]	@ (8009630 <UART_SetConfig+0xc28>)
 80094dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e0:	461a      	mov	r2, r3
 80094e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e8:	005a      	lsls	r2, r3, #1
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	441a      	add	r2, r3
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	2b0f      	cmp	r3, #15
 8009500:	d916      	bls.n	8009530 <UART_SetConfig+0xb28>
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009508:	d212      	bcs.n	8009530 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	b29b      	uxth	r3, r3
 800950e:	f023 030f 	bic.w	r3, r3, #15
 8009512:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	b29b      	uxth	r3, r3
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	b29a      	uxth	r2, r3
 8009520:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009522:	4313      	orrs	r3, r2
 8009524:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800952c:	60da      	str	r2, [r3, #12]
 800952e:	e0bc      	b.n	80096aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009536:	e0b8      	b.n	80096aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009538:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800953c:	2b20      	cmp	r3, #32
 800953e:	dc4b      	bgt.n	80095d8 <UART_SetConfig+0xbd0>
 8009540:	2b00      	cmp	r3, #0
 8009542:	f2c0 8087 	blt.w	8009654 <UART_SetConfig+0xc4c>
 8009546:	2b20      	cmp	r3, #32
 8009548:	f200 8084 	bhi.w	8009654 <UART_SetConfig+0xc4c>
 800954c:	a201      	add	r2, pc, #4	@ (adr r2, 8009554 <UART_SetConfig+0xb4c>)
 800954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009552:	bf00      	nop
 8009554:	080095df 	.word	0x080095df
 8009558:	080095e7 	.word	0x080095e7
 800955c:	08009655 	.word	0x08009655
 8009560:	08009655 	.word	0x08009655
 8009564:	080095ef 	.word	0x080095ef
 8009568:	08009655 	.word	0x08009655
 800956c:	08009655 	.word	0x08009655
 8009570:	08009655 	.word	0x08009655
 8009574:	080095ff 	.word	0x080095ff
 8009578:	08009655 	.word	0x08009655
 800957c:	08009655 	.word	0x08009655
 8009580:	08009655 	.word	0x08009655
 8009584:	08009655 	.word	0x08009655
 8009588:	08009655 	.word	0x08009655
 800958c:	08009655 	.word	0x08009655
 8009590:	08009655 	.word	0x08009655
 8009594:	0800960f 	.word	0x0800960f
 8009598:	08009655 	.word	0x08009655
 800959c:	08009655 	.word	0x08009655
 80095a0:	08009655 	.word	0x08009655
 80095a4:	08009655 	.word	0x08009655
 80095a8:	08009655 	.word	0x08009655
 80095ac:	08009655 	.word	0x08009655
 80095b0:	08009655 	.word	0x08009655
 80095b4:	08009655 	.word	0x08009655
 80095b8:	08009655 	.word	0x08009655
 80095bc:	08009655 	.word	0x08009655
 80095c0:	08009655 	.word	0x08009655
 80095c4:	08009655 	.word	0x08009655
 80095c8:	08009655 	.word	0x08009655
 80095cc:	08009655 	.word	0x08009655
 80095d0:	08009655 	.word	0x08009655
 80095d4:	08009647 	.word	0x08009647
 80095d8:	2b40      	cmp	r3, #64	@ 0x40
 80095da:	d037      	beq.n	800964c <UART_SetConfig+0xc44>
 80095dc:	e03a      	b.n	8009654 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095de:	f7fc fca7 	bl	8005f30 <HAL_RCC_GetPCLK1Freq>
 80095e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095e4:	e03c      	b.n	8009660 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095e6:	f7fc fcb9 	bl	8005f5c <HAL_RCC_GetPCLK2Freq>
 80095ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095ec:	e038      	b.n	8009660 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fd fe9c 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095fc:	e030      	b.n	8009660 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095fe:	f107 0318 	add.w	r3, r7, #24
 8009602:	4618      	mov	r0, r3
 8009604:	f7fd ffe8 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800960c:	e028      	b.n	8009660 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800960e:	4b09      	ldr	r3, [pc, #36]	@ (8009634 <UART_SetConfig+0xc2c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b00      	cmp	r3, #0
 8009618:	d012      	beq.n	8009640 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800961a:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <UART_SetConfig+0xc2c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	08db      	lsrs	r3, r3, #3
 8009620:	f003 0303 	and.w	r3, r3, #3
 8009624:	4a04      	ldr	r2, [pc, #16]	@ (8009638 <UART_SetConfig+0xc30>)
 8009626:	fa22 f303 	lsr.w	r3, r2, r3
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800962c:	e018      	b.n	8009660 <UART_SetConfig+0xc58>
 800962e:	bf00      	nop
 8009630:	0800baf8 	.word	0x0800baf8
 8009634:	58024400 	.word	0x58024400
 8009638:	03d09000 	.word	0x03d09000
 800963c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009640:	4b24      	ldr	r3, [pc, #144]	@ (80096d4 <UART_SetConfig+0xccc>)
 8009642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009644:	e00c      	b.n	8009660 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009646:	4b24      	ldr	r3, [pc, #144]	@ (80096d8 <UART_SetConfig+0xcd0>)
 8009648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964a:	e009      	b.n	8009660 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800964c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009652:	e005      	b.n	8009660 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800965e:	bf00      	nop
    }

    if (pclk != 0U)
 8009660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d021      	beq.n	80096aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966a:	4a1c      	ldr	r2, [pc, #112]	@ (80096dc <UART_SetConfig+0xcd4>)
 800966c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009670:	461a      	mov	r2, r3
 8009672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009674:	fbb3 f2f2 	udiv	r2, r3, r2
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	085b      	lsrs	r3, r3, #1
 800967e:	441a      	add	r2, r3
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	fbb2 f3f3 	udiv	r3, r2, r3
 8009688:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	2b0f      	cmp	r3, #15
 800968e:	d909      	bls.n	80096a4 <UART_SetConfig+0xc9c>
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009696:	d205      	bcs.n	80096a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	b29a      	uxth	r2, r3
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60da      	str	r2, [r3, #12]
 80096a2:	e002      	b.n	80096aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2200      	movs	r2, #0
 80096be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	2200      	movs	r2, #0
 80096c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80096c6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3748      	adds	r7, #72	@ 0x48
 80096ce:	46bd      	mov	sp, r7
 80096d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096d4:	03d09000 	.word	0x03d09000
 80096d8:	003d0900 	.word	0x003d0900
 80096dc:	0800baf8 	.word	0x0800baf8

080096e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ec:	f003 0308 	and.w	r3, r3, #8
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009752:	f003 0304 	and.w	r3, r3, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009774:	f003 0310 	and.w	r3, r3, #16
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009796:	f003 0320 	and.w	r3, r3, #32
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	430a      	orrs	r2, r1
 80097b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01a      	beq.n	80097f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097de:	d10a      	bne.n	80097f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	430a      	orrs	r2, r1
 8009816:	605a      	str	r2, [r3, #4]
  }
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b098      	sub	sp, #96	@ 0x60
 8009828:	af02      	add	r7, sp, #8
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009834:	f7f7 fd44 	bl	80012c0 <HAL_GetTick>
 8009838:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0308 	and.w	r3, r3, #8
 8009844:	2b08      	cmp	r3, #8
 8009846:	d12f      	bne.n	80098a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009848:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009850:	2200      	movs	r2, #0
 8009852:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f88e 	bl	8009978 <UART_WaitOnFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d022      	beq.n	80098a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009876:	653b      	str	r3, [r7, #80]	@ 0x50
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	461a      	mov	r2, r3
 800987e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009880:	647b      	str	r3, [r7, #68]	@ 0x44
 8009882:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800988e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e6      	bne.n	8009862 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e063      	b.n	8009970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0304 	and.w	r3, r3, #4
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d149      	bne.n	800994a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098be:	2200      	movs	r2, #0
 80098c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f857 	bl	8009978 <UART_WaitOnFlagUntilTimeout>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d03c      	beq.n	800994a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	623b      	str	r3, [r7, #32]
   return(result);
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80098f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e6      	bne.n	80098d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	60fb      	str	r3, [r7, #12]
   return(result);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	64bb      	str	r3, [r7, #72]	@ 0x48
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009922:	61fa      	str	r2, [r7, #28]
 8009924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	69b9      	ldr	r1, [r7, #24]
 8009928:	69fa      	ldr	r2, [r7, #28]
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	617b      	str	r3, [r7, #20]
   return(result);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e5      	bne.n	8009902 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2220      	movs	r2, #32
 800993a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e012      	b.n	8009970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2220      	movs	r2, #32
 800994e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3758      	adds	r7, #88	@ 0x58
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	4613      	mov	r3, r2
 8009986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009988:	e04f      	b.n	8009a2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009990:	d04b      	beq.n	8009a2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009992:	f7f7 fc95 	bl	80012c0 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d302      	bcc.n	80099a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e04e      	b.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0304 	and.w	r3, r3, #4
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d037      	beq.n	8009a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	2b80      	cmp	r3, #128	@ 0x80
 80099be:	d034      	beq.n	8009a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b40      	cmp	r3, #64	@ 0x40
 80099c4:	d031      	beq.n	8009a2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f003 0308 	and.w	r3, r3, #8
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d110      	bne.n	80099f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2208      	movs	r2, #8
 80099da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 f921 	bl	8009c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2208      	movs	r2, #8
 80099e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e029      	b.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a04:	d111      	bne.n	8009a2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 f907 	bl	8009c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e00f      	b.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69da      	ldr	r2, [r3, #28]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4013      	ands	r3, r2
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	bf0c      	ite	eq
 8009a3a:	2301      	moveq	r3, #1
 8009a3c:	2300      	movne	r3, #0
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	461a      	mov	r2, r3
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d0a0      	beq.n	800998a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
	...

08009a54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b096      	sub	sp, #88	@ 0x58
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	88fa      	ldrh	r2, [r7, #6]
 8009a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2222      	movs	r2, #34	@ 0x22
 8009a7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d02d      	beq.n	8009ae6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a90:	4a40      	ldr	r2, [pc, #256]	@ (8009b94 <UART_Start_Receive_DMA+0x140>)
 8009a92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8009b98 <UART_Start_Receive_DMA+0x144>)
 8009a9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa4:	4a3d      	ldr	r2, [pc, #244]	@ (8009b9c <UART_Start_Receive_DMA+0x148>)
 8009aa6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aae:	2200      	movs	r2, #0
 8009ab0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3324      	adds	r3, #36	@ 0x24
 8009abe:	4619      	mov	r1, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	88fb      	ldrh	r3, [r7, #6]
 8009ac8:	f7f8 fbd2 	bl	8002270 <HAL_DMA_Start_IT>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2210      	movs	r2, #16
 8009ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e051      	b.n	8009b8a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d018      	beq.n	8009b20 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e6      	bne.n	8009aee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3308      	adds	r3, #8
 8009b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b32:	f043 0301 	orr.w	r3, r3, #1
 8009b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b40:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e5      	bne.n	8009b20 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3308      	adds	r3, #8
 8009b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	613b      	str	r3, [r7, #16]
   return(result);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3308      	adds	r3, #8
 8009b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b74:	623a      	str	r2, [r7, #32]
 8009b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	69f9      	ldr	r1, [r7, #28]
 8009b7a:	6a3a      	ldr	r2, [r7, #32]
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e5      	bne.n	8009b54 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3758      	adds	r7, #88	@ 0x58
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	08009cf1 	.word	0x08009cf1
 8009b98:	08009e19 	.word	0x08009e19
 8009b9c:	08009e57 	.word	0x08009e57

08009ba0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b08f      	sub	sp, #60	@ 0x3c
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	e853 3f00 	ldrex	r3, [r3]
 8009bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bc8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bce:	e841 2300 	strex	r3, r2, [r1]
 8009bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1e6      	bne.n	8009ba8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3308      	adds	r3, #8
 8009be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bfa:	61ba      	str	r2, [r7, #24]
 8009bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6979      	ldr	r1, [r7, #20]
 8009c00:	69ba      	ldr	r2, [r7, #24]
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	613b      	str	r3, [r7, #16]
   return(result);
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e5      	bne.n	8009bda <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009c16:	bf00      	nop
 8009c18:	373c      	adds	r7, #60	@ 0x3c
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
	...

08009c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b095      	sub	sp, #84	@ 0x54
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e6      	bne.n	8009c2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3308      	adds	r3, #8
 8009c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	4b1e      	ldr	r3, [pc, #120]	@ (8009cec <UART_EndRxTransfer+0xc8>)
 8009c72:	4013      	ands	r3, r2
 8009c74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e5      	bne.n	8009c5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d118      	bne.n	8009ccc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	f023 0310 	bic.w	r3, r3, #16
 8009cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cb8:	61bb      	str	r3, [r7, #24]
 8009cba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	6979      	ldr	r1, [r7, #20]
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e6      	bne.n	8009c9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ce0:	bf00      	nop
 8009ce2:	3754      	adds	r7, #84	@ 0x54
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	effffffe 	.word	0xeffffffe

08009cf0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b09c      	sub	sp, #112	@ 0x70
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d06:	d071      	beq.n	8009dec <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e6      	bne.n	8009d10 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3308      	adds	r3, #8
 8009d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3308      	adds	r3, #8
 8009d60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d62:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e5      	bne.n	8009d42 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	623b      	str	r3, [r7, #32]
   return(result);
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3308      	adds	r3, #8
 8009d94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d96:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e5      	bne.n	8009d76 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d118      	bne.n	8009dec <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	e853 3f00 	ldrex	r3, [r3]
 8009dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0310 	bic.w	r3, r3, #16
 8009dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dd8:	61fb      	str	r3, [r7, #28]
 8009dda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ddc:	69b9      	ldr	r1, [r7, #24]
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	e841 2300 	strex	r3, r2, [r1]
 8009de4:	617b      	str	r3, [r7, #20]
   return(result);
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e6      	bne.n	8009dba <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dee:	2200      	movs	r2, #0
 8009df0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d107      	bne.n	8009e0a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e00:	4619      	mov	r1, r3
 8009e02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e04:	f7fe fdf4 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e08:	e002      	b.n	8009e10 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009e0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e0c:	f7f6 ff4a 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 8009e10:	bf00      	nop
 8009e12:	3770      	adds	r7, #112	@ 0x70
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d109      	bne.n	8009e48 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4619      	mov	r1, r3
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7fe fdd5 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e46:	e002      	b.n	8009e4e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7fe fdbd 	bl	80089c8 <HAL_UART_RxHalfCpltCallback>
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b086      	sub	sp, #24
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e7e:	2b80      	cmp	r3, #128	@ 0x80
 8009e80:	d109      	bne.n	8009e96 <UART_DMAError+0x40>
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b21      	cmp	r3, #33	@ 0x21
 8009e86:	d106      	bne.n	8009e96 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009e90:	6978      	ldr	r0, [r7, #20]
 8009e92:	f7ff fe85 	bl	8009ba0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea0:	2b40      	cmp	r3, #64	@ 0x40
 8009ea2:	d109      	bne.n	8009eb8 <UART_DMAError+0x62>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b22      	cmp	r3, #34	@ 0x22
 8009ea8:	d106      	bne.n	8009eb8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009eb2:	6978      	ldr	r0, [r7, #20]
 8009eb4:	f7ff feb6 	bl	8009c24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ebe:	f043 0210 	orr.w	r2, r3, #16
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ec8:	6978      	ldr	r0, [r7, #20]
 8009eca:	f7fe fd87 	bl	80089dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ece:	bf00      	nop
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7fe fd71 	bl	80089dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009efa:	bf00      	nop
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b088      	sub	sp, #32
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f1e:	61fb      	str	r3, [r7, #28]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	461a      	mov	r2, r3
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	61bb      	str	r3, [r7, #24]
 8009f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	6979      	ldr	r1, [r7, #20]
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	613b      	str	r3, [r7, #16]
   return(result);
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e6      	bne.n	8009f0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7fe fd32 	bl	80089b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f50:	bf00      	nop
 8009f52:	3720      	adds	r7, #32
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <HAL_UARTEx_DisableFifoMode+0x16>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e027      	b.n	8009ffa <HAL_UARTEx_DisableFifoMode+0x66>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2224      	movs	r2, #36	@ 0x24
 8009fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 0201 	bic.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a016:	2b01      	cmp	r3, #1
 800a018:	d101      	bne.n	800a01e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a01a:	2302      	movs	r3, #2
 800a01c:	e02d      	b.n	800a07a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2224      	movs	r2, #36	@ 0x24
 800a02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0201 	bic.w	r2, r2, #1
 800a044:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f850 	bl	800a100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a096:	2302      	movs	r3, #2
 800a098:	e02d      	b.n	800a0f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2224      	movs	r2, #36	@ 0x24
 800a0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0201 	bic.w	r2, r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f812 	bl	800a100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d108      	bne.n	800a122 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a120:	e031      	b.n	800a186 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a122:	2310      	movs	r3, #16
 800a124:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a126:	2310      	movs	r3, #16
 800a128:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	0e5b      	lsrs	r3, r3, #25
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0307 	and.w	r3, r3, #7
 800a138:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	0f5b      	lsrs	r3, r3, #29
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f003 0307 	and.w	r3, r3, #7
 800a148:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	7b3a      	ldrb	r2, [r7, #12]
 800a14e:	4911      	ldr	r1, [pc, #68]	@ (800a194 <UARTEx_SetNbDataToProcess+0x94>)
 800a150:	5c8a      	ldrb	r2, [r1, r2]
 800a152:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a156:	7b3a      	ldrb	r2, [r7, #12]
 800a158:	490f      	ldr	r1, [pc, #60]	@ (800a198 <UARTEx_SetNbDataToProcess+0x98>)
 800a15a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a15c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a160:	b29a      	uxth	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	7b7a      	ldrb	r2, [r7, #13]
 800a16c:	4909      	ldr	r1, [pc, #36]	@ (800a194 <UARTEx_SetNbDataToProcess+0x94>)
 800a16e:	5c8a      	ldrb	r2, [r1, r2]
 800a170:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a174:	7b7a      	ldrb	r2, [r7, #13]
 800a176:	4908      	ldr	r1, [pc, #32]	@ (800a198 <UARTEx_SetNbDataToProcess+0x98>)
 800a178:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a17a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a17e:	b29a      	uxth	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a186:	bf00      	nop
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	0800bb10 	.word	0x0800bb10
 800a198:	0800bb18 	.word	0x0800bb18

0800a19c <arm_conv_f32>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	b08b      	sub	sp, #44	@ 0x2c
 800a1a2:	4299      	cmp	r1, r3
 800a1a4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a1a6:	d205      	bcs.n	800a1b4 <arm_conv_f32+0x18>
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	4623      	mov	r3, r4
 800a1b4:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800a1b8:	3101      	adds	r1, #1
 800a1ba:	1ac9      	subs	r1, r1, r3
 800a1bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800a1c4:	9101      	str	r1, [sp, #4]
 800a1c6:	1e59      	subs	r1, r3, #1
 800a1c8:	eb02 070b 	add.w	r7, r2, fp
 800a1cc:	f000 8277 	beq.w	800a6be <arm_conv_f32+0x522>
 800a1d0:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800a490 <arm_conv_f32+0x2f4>
 800a1d4:	f102 0904 	add.w	r9, r2, #4
 800a1d8:	46aa      	mov	sl, r5
 800a1da:	4680      	mov	r8, r0
 800a1dc:	2401      	movs	r4, #1
 800a1de:	f014 0603 	ands.w	r6, r4, #3
 800a1e2:	d01b      	beq.n	800a21c <arm_conv_f32+0x80>
 800a1e4:	ed92 7a00 	vldr	s14, [r2]
 800a1e8:	edd8 6a00 	vldr	s13, [r8]
 800a1ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a1f0:	3e01      	subs	r6, #1
 800a1f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1f6:	d011      	beq.n	800a21c <arm_conv_f32+0x80>
 800a1f8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a1fc:	edd8 6a01 	vldr	s13, [r8, #4]
 800a200:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a204:	2e01      	cmp	r6, #1
 800a206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a20a:	d007      	beq.n	800a21c <arm_conv_f32+0x80>
 800a20c:	ed98 7a02 	vldr	s14, [r8, #8]
 800a210:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a214:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a21c:	3401      	adds	r4, #1
 800a21e:	42a3      	cmp	r3, r4
 800a220:	ecea 7a01 	vstmia	sl!, {s15}
 800a224:	464a      	mov	r2, r9
 800a226:	d03a      	beq.n	800a29e <arm_conv_f32+0x102>
 800a228:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800a22c:	f000 824c 	beq.w	800a6c8 <arm_conv_f32+0x52c>
 800a230:	f100 0210 	add.w	r2, r0, #16
 800a234:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800a238:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800a490 <arm_conv_f32+0x2f4>
 800a23c:	eb02 0c08 	add.w	ip, r2, r8
 800a240:	f1a9 0610 	sub.w	r6, r9, #16
 800a244:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a248:	edd6 3a04 	vldr	s7, [r6, #16]
 800a24c:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a250:	ed96 4a03 	vldr	s8, [r6, #12]
 800a254:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a258:	edd6 4a02 	vldr	s9, [r6, #8]
 800a25c:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a260:	ed96 5a01 	vldr	s10, [r6, #4]
 800a264:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a268:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a26c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a270:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800a274:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a278:	ee65 6a85 	vmul.f32	s13, s11, s10
 800a27c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a280:	3210      	adds	r2, #16
 800a282:	4594      	cmp	ip, r2
 800a284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a288:	f1a6 0610 	sub.w	r6, r6, #16
 800a28c:	d1da      	bne.n	800a244 <arm_conv_f32+0xa8>
 800a28e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800a292:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800a296:	4480      	add	r8, r0
 800a298:	f109 0904 	add.w	r9, r9, #4
 800a29c:	e79f      	b.n	800a1de <arm_conv_f32+0x42>
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	445d      	add	r5, fp
 800a2a2:	f240 80e9 	bls.w	800a478 <arm_conv_f32+0x2dc>
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	089a      	lsrs	r2, r3, #2
 800a2aa:	9202      	str	r2, [sp, #8]
 800a2ac:	f000 8203 	beq.w	800a6b6 <arm_conv_f32+0x51a>
 800a2b0:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800a2b4:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800a2b8:	0112      	lsls	r2, r2, #4
 800a2ba:	f004 0603 	and.w	r6, r4, #3
 800a2be:	9203      	str	r2, [sp, #12]
 800a2c0:	f1a3 0a10 	sub.w	sl, r3, #16
 800a2c4:	f1a3 020c 	sub.w	r2, r3, #12
 800a2c8:	3b08      	subs	r3, #8
 800a2ca:	9204      	str	r2, [sp, #16]
 800a2cc:	9305      	str	r3, [sp, #20]
 800a2ce:	f106 39ff 	add.w	r9, r6, #4294967295
 800a2d2:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800a2d6:	9a03      	ldr	r2, [sp, #12]
 800a2d8:	f100 0c1c 	add.w	ip, r0, #28
 800a2dc:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800a2e0:	464c      	mov	r4, r9
 800a2e2:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800a2e6:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800a2ea:	f1a7 0310 	sub.w	r3, r7, #16
 800a2ee:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800a2f2:	eb05 0b02 	add.w	fp, r5, r2
 800a2f6:	461f      	mov	r7, r3
 800a2f8:	3510      	adds	r5, #16
 800a2fa:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800a490 <arm_conv_f32+0x2f4>
 800a2fe:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800a302:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800a306:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800a30a:	eeb0 5a46 	vmov.f32	s10, s12
 800a30e:	eef0 4a46 	vmov.f32	s9, s12
 800a312:	eef0 5a46 	vmov.f32	s11, s12
 800a316:	463a      	mov	r2, r7
 800a318:	4663      	mov	r3, ip
 800a31a:	4641      	mov	r1, r8
 800a31c:	edd2 6a04 	vldr	s13, [r2, #16]
 800a320:	ed13 0a04 	vldr	s0, [r3, #-16]
 800a324:	ed92 7a03 	vldr	s14, [r2, #12]
 800a328:	edd2 7a02 	vldr	s15, [r2, #8]
 800a32c:	edd2 0a01 	vldr	s1, [r2, #4]
 800a330:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800a334:	ee62 3a26 	vmul.f32	s7, s4, s13
 800a338:	ee61 2a26 	vmul.f32	s5, s2, s13
 800a33c:	ed13 1a03 	vldr	s2, [r3, #-12]
 800a340:	ee66 6a80 	vmul.f32	s13, s13, s0
 800a344:	ee21 4a87 	vmul.f32	s8, s3, s14
 800a348:	ee73 4a24 	vadd.f32	s9, s6, s9
 800a34c:	ee33 5a85 	vadd.f32	s10, s7, s10
 800a350:	ee22 3a07 	vmul.f32	s6, s4, s14
 800a354:	ed53 1a02 	vldr	s3, [r3, #-8]
 800a358:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800a35c:	ee36 6a86 	vadd.f32	s12, s13, s12
 800a360:	ee60 3a07 	vmul.f32	s7, s0, s14
 800a364:	ee27 7a01 	vmul.f32	s14, s14, s2
 800a368:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a36c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a370:	ee74 2a22 	vadd.f32	s5, s8, s5
 800a374:	ee60 4a27 	vmul.f32	s9, s0, s15
 800a378:	ee22 4a27 	vmul.f32	s8, s4, s15
 800a37c:	ee73 3a85 	vadd.f32	s7, s7, s10
 800a380:	ed13 2a01 	vldr	s4, [r3, #-4]
 800a384:	ee21 5a27 	vmul.f32	s10, s2, s15
 800a388:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800a38c:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a390:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a394:	ee34 4a22 	vadd.f32	s8, s8, s5
 800a398:	ee60 5a20 	vmul.f32	s11, s0, s1
 800a39c:	ee21 3a20 	vmul.f32	s6, s2, s1
 800a3a0:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a3a4:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800a3a8:	ee20 6a82 	vmul.f32	s12, s1, s4
 800a3ac:	3901      	subs	r1, #1
 800a3ae:	f1a2 0210 	sub.w	r2, r2, #16
 800a3b2:	ee75 5a84 	vadd.f32	s11, s11, s8
 800a3b6:	ee73 4a24 	vadd.f32	s9, s6, s9
 800a3ba:	ee37 5a05 	vadd.f32	s10, s14, s10
 800a3be:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a3c2:	f103 0310 	add.w	r3, r3, #16
 800a3c6:	d1a9      	bne.n	800a31c <arm_conv_f32+0x180>
 800a3c8:	eb0a 030c 	add.w	r3, sl, ip
 800a3cc:	2e00      	cmp	r6, #0
 800a3ce:	d042      	beq.n	800a456 <arm_conv_f32+0x2ba>
 800a3d0:	edde 7a00 	vldr	s15, [lr]
 800a3d4:	ed93 4a00 	vldr	s8, [r3]
 800a3d8:	ee61 6a27 	vmul.f32	s13, s2, s15
 800a3dc:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800a3e0:	ee22 7a27 	vmul.f32	s14, s4, s15
 800a3e4:	ee64 7a27 	vmul.f32	s15, s8, s15
 800a3e8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800a3ec:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a3f0:	ee35 5a07 	vadd.f32	s10, s10, s14
 800a3f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a3f8:	eb09 030c 	add.w	r3, r9, ip
 800a3fc:	b35c      	cbz	r4, 800a456 <arm_conv_f32+0x2ba>
 800a3fe:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800a402:	edd3 6a00 	vldr	s13, [r3]
 800a406:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800a40a:	ee22 3a27 	vmul.f32	s6, s4, s15
 800a40e:	ee67 3a84 	vmul.f32	s7, s15, s8
 800a412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a416:	2c01      	cmp	r4, #1
 800a418:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a41c:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a420:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a424:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a428:	eb00 030c 	add.w	r3, r0, ip
 800a42c:	d013      	beq.n	800a456 <arm_conv_f32+0x2ba>
 800a42e:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800a432:	edd3 3a00 	vldr	s7, [r3]
 800a436:	ee62 7a07 	vmul.f32	s15, s4, s14
 800a43a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800a43e:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a442:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a446:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a44a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a44e:	ee35 5a26 	vadd.f32	s10, s10, s13
 800a452:	ee36 6a07 	vadd.f32	s12, s12, s14
 800a456:	45ab      	cmp	fp, r5
 800a458:	ed45 5a04 	vstr	s11, [r5, #-16]
 800a45c:	ed45 4a03 	vstr	s9, [r5, #-12]
 800a460:	ed05 5a02 	vstr	s10, [r5, #-8]
 800a464:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a468:	f10c 0c10 	add.w	ip, ip, #16
 800a46c:	f105 0310 	add.w	r3, r5, #16
 800a470:	f000 809e 	beq.w	800a5b0 <arm_conv_f32+0x414>
 800a474:	461d      	mov	r5, r3
 800a476:	e740      	b.n	800a2fa <arm_conv_f32+0x15e>
 800a478:	9a01      	ldr	r2, [sp, #4]
 800a47a:	46ac      	mov	ip, r5
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	d037      	beq.n	800a4f0 <arm_conv_f32+0x354>
 800a480:	9a01      	ldr	r2, [sp, #4]
 800a482:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800a490 <arm_conv_f32+0x2f4>
 800a486:	0096      	lsls	r6, r2, #2
 800a488:	eb05 0c06 	add.w	ip, r5, r6
 800a48c:	4604      	mov	r4, r0
 800a48e:	e021      	b.n	800a4d4 <arm_conv_f32+0x338>
 800a490:	00000000 	.word	0x00000000
 800a494:	edd7 7a00 	vldr	s15, [r7]
 800a498:	ecb2 7a01 	vldmia	r2!, {s14}
 800a49c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a4a4:	b189      	cbz	r1, 800a4ca <arm_conv_f32+0x32e>
 800a4a6:	ed17 7a01 	vldr	s14, [r7, #-4]
 800a4aa:	edd4 6a01 	vldr	s13, [r4, #4]
 800a4ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4b8:	d007      	beq.n	800a4ca <arm_conv_f32+0x32e>
 800a4ba:	ed94 7a02 	vldr	s14, [r4, #8]
 800a4be:	ed57 6a02 	vldr	s13, [r7, #-8]
 800a4c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a4c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4ca:	ece5 7a01 	vstmia	r5!, {s15}
 800a4ce:	4565      	cmp	r5, ip
 800a4d0:	4614      	mov	r4, r2
 800a4d2:	d00a      	beq.n	800a4ea <arm_conv_f32+0x34e>
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1dc      	bne.n	800a494 <arm_conv_f32+0x2f8>
 800a4da:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800a490 <arm_conv_f32+0x2f4>
 800a4de:	ece5 7a01 	vstmia	r5!, {s15}
 800a4e2:	1d22      	adds	r2, r4, #4
 800a4e4:	4565      	cmp	r5, ip
 800a4e6:	4614      	mov	r4, r2
 800a4e8:	d1f4      	bne.n	800a4d4 <arm_conv_f32+0x338>
 800a4ea:	4430      	add	r0, r6
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	d059      	beq.n	800a5a4 <arm_conv_f32+0x408>
 800a4f0:	088d      	lsrs	r5, r1, #2
 800a4f2:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800a490 <arm_conv_f32+0x2f4>
 800a4f6:	d058      	beq.n	800a5aa <arm_conv_f32+0x40e>
 800a4f8:	f100 0210 	add.w	r2, r0, #16
 800a4fc:	f1a7 0310 	sub.w	r3, r7, #16
 800a500:	462c      	mov	r4, r5
 800a502:	ed52 6a04 	vldr	s13, [r2, #-16]
 800a506:	edd3 3a04 	vldr	s7, [r3, #16]
 800a50a:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a50e:	ed93 4a03 	vldr	s8, [r3, #12]
 800a512:	ed52 7a02 	vldr	s15, [r2, #-8]
 800a516:	edd3 4a02 	vldr	s9, [r3, #8]
 800a51a:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a51e:	ed93 5a01 	vldr	s10, [r3, #4]
 800a522:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a526:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a52a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a52e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a532:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a536:	ee66 6a05 	vmul.f32	s13, s12, s10
 800a53a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a53e:	3c01      	subs	r4, #1
 800a540:	f102 0210 	add.w	r2, r2, #16
 800a544:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800a548:	f1a3 0310 	sub.w	r3, r3, #16
 800a54c:	d1d9      	bne.n	800a502 <arm_conv_f32+0x366>
 800a54e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800a552:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800a556:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800a55a:	f011 0203 	ands.w	r2, r1, #3
 800a55e:	d01b      	beq.n	800a598 <arm_conv_f32+0x3fc>
 800a560:	edd3 7a00 	vldr	s15, [r3]
 800a564:	ed95 7a00 	vldr	s14, [r5]
 800a568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a56c:	3a01      	subs	r2, #1
 800a56e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a572:	d011      	beq.n	800a598 <arm_conv_f32+0x3fc>
 800a574:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a578:	ed95 7a01 	vldr	s14, [r5, #4]
 800a57c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a580:	2a01      	cmp	r2, #1
 800a582:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a586:	d007      	beq.n	800a598 <arm_conv_f32+0x3fc>
 800a588:	edd5 7a02 	vldr	s15, [r5, #8]
 800a58c:	ed13 7a02 	vldr	s14, [r3, #-8]
 800a590:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a594:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a598:	3901      	subs	r1, #1
 800a59a:	ecec 5a01 	vstmia	ip!, {s11}
 800a59e:	f100 0004 	add.w	r0, r0, #4
 800a5a2:	d1a5      	bne.n	800a4f0 <arm_conv_f32+0x354>
 800a5a4:	b00b      	add	sp, #44	@ 0x2c
 800a5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	e7d4      	b.n	800a55a <arm_conv_f32+0x3be>
 800a5b0:	9b02      	ldr	r3, [sp, #8]
 800a5b2:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	9302      	str	r3, [sp, #8]
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800a5c0:	4403      	add	r3, r0
 800a5c2:	465d      	mov	r5, fp
 800a5c4:	469e      	mov	lr, r3
 800a5c6:	9b01      	ldr	r3, [sp, #4]
 800a5c8:	f013 0c03 	ands.w	ip, r3, #3
 800a5cc:	d075      	beq.n	800a6ba <arm_conv_f32+0x51e>
 800a5ce:	9b02      	ldr	r3, [sp, #8]
 800a5d0:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800a5d4:	f004 0403 	and.w	r4, r4, #3
 800a5d8:	f104 3bff 	add.w	fp, r4, #4294967295
 800a5dc:	f103 0801 	add.w	r8, r3, #1
 800a5e0:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800a5e4:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800a5e8:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800a5ec:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800a5f0:	f1a7 0210 	sub.w	r2, r7, #16
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	465b      	mov	r3, fp
 800a5f8:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800a5fc:	468b      	mov	fp, r1
 800a5fe:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800a602:	4621      	mov	r1, r4
 800a604:	4617      	mov	r7, r2
 800a606:	461c      	mov	r4, r3
 800a608:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800a490 <arm_conv_f32+0x2f4>
 800a60c:	f10e 0210 	add.w	r2, lr, #16
 800a610:	463b      	mov	r3, r7
 800a612:	4656      	mov	r6, sl
 800a614:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a618:	edd3 3a04 	vldr	s7, [r3, #16]
 800a61c:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a620:	ed93 4a03 	vldr	s8, [r3, #12]
 800a624:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a628:	edd3 4a02 	vldr	s9, [r3, #8]
 800a62c:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a630:	ed93 5a01 	vldr	s10, [r3, #4]
 800a634:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a638:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a63c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a640:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800a644:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a648:	ee65 6a85 	vmul.f32	s13, s11, s10
 800a64c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a650:	3e01      	subs	r6, #1
 800a652:	f102 0210 	add.w	r2, r2, #16
 800a656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65a:	f1a3 0310 	sub.w	r3, r3, #16
 800a65e:	d1d9      	bne.n	800a614 <arm_conv_f32+0x478>
 800a660:	4486      	add	lr, r0
 800a662:	b1d1      	cbz	r1, 800a69a <arm_conv_f32+0x4fe>
 800a664:	ed99 7a00 	vldr	s14, [r9]
 800a668:	edde 6a00 	vldr	s13, [lr]
 800a66c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a670:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a674:	b18c      	cbz	r4, 800a69a <arm_conv_f32+0x4fe>
 800a676:	ed19 7a01 	vldr	s14, [r9, #-4]
 800a67a:	edde 6a01 	vldr	s13, [lr, #4]
 800a67e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a682:	2c01      	cmp	r4, #1
 800a684:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a688:	d007      	beq.n	800a69a <arm_conv_f32+0x4fe>
 800a68a:	ed9e 7a02 	vldr	s14, [lr, #8]
 800a68e:	ed59 6a02 	vldr	s13, [r9, #-8]
 800a692:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a69a:	ece5 7a01 	vstmia	r5!, {s15}
 800a69e:	4565      	cmp	r5, ip
 800a6a0:	46c6      	mov	lr, r8
 800a6a2:	f108 0804 	add.w	r8, r8, #4
 800a6a6:	d1af      	bne.n	800a608 <arm_conv_f32+0x46c>
 800a6a8:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800a6ac:	4659      	mov	r1, fp
 800a6ae:	9b01      	ldr	r3, [sp, #4]
 800a6b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a6b4:	e71c      	b.n	800a4f0 <arm_conv_f32+0x354>
 800a6b6:	4686      	mov	lr, r0
 800a6b8:	e785      	b.n	800a5c6 <arm_conv_f32+0x42a>
 800a6ba:	46ac      	mov	ip, r5
 800a6bc:	e7f7      	b.n	800a6ae <arm_conv_f32+0x512>
 800a6be:	9a01      	ldr	r2, [sp, #4]
 800a6c0:	2a00      	cmp	r2, #0
 800a6c2:	f47f aedd 	bne.w	800a480 <arm_conv_f32+0x2e4>
 800a6c6:	e76d      	b.n	800a5a4 <arm_conv_f32+0x408>
 800a6c8:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800a490 <arm_conv_f32+0x2f4>
 800a6cc:	4680      	mov	r8, r0
 800a6ce:	e5e3      	b.n	800a298 <arm_conv_f32+0xfc>

0800a6d0 <memset>:
 800a6d0:	4402      	add	r2, r0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d100      	bne.n	800a6da <memset+0xa>
 800a6d8:	4770      	bx	lr
 800a6da:	f803 1b01 	strb.w	r1, [r3], #1
 800a6de:	e7f9      	b.n	800a6d4 <memset+0x4>

0800a6e0 <__libc_init_array>:
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	4d0d      	ldr	r5, [pc, #52]	@ (800a718 <__libc_init_array+0x38>)
 800a6e4:	4c0d      	ldr	r4, [pc, #52]	@ (800a71c <__libc_init_array+0x3c>)
 800a6e6:	1b64      	subs	r4, r4, r5
 800a6e8:	10a4      	asrs	r4, r4, #2
 800a6ea:	2600      	movs	r6, #0
 800a6ec:	42a6      	cmp	r6, r4
 800a6ee:	d109      	bne.n	800a704 <__libc_init_array+0x24>
 800a6f0:	4d0b      	ldr	r5, [pc, #44]	@ (800a720 <__libc_init_array+0x40>)
 800a6f2:	4c0c      	ldr	r4, [pc, #48]	@ (800a724 <__libc_init_array+0x44>)
 800a6f4:	f000 fde4 	bl	800b2c0 <_init>
 800a6f8:	1b64      	subs	r4, r4, r5
 800a6fa:	10a4      	asrs	r4, r4, #2
 800a6fc:	2600      	movs	r6, #0
 800a6fe:	42a6      	cmp	r6, r4
 800a700:	d105      	bne.n	800a70e <__libc_init_array+0x2e>
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	f855 3b04 	ldr.w	r3, [r5], #4
 800a708:	4798      	blx	r3
 800a70a:	3601      	adds	r6, #1
 800a70c:	e7ee      	b.n	800a6ec <__libc_init_array+0xc>
 800a70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a712:	4798      	blx	r3
 800a714:	3601      	adds	r6, #1
 800a716:	e7f2      	b.n	800a6fe <__libc_init_array+0x1e>
 800a718:	0800bd00 	.word	0x0800bd00
 800a71c:	0800bd00 	.word	0x0800bd00
 800a720:	0800bd00 	.word	0x0800bd00
 800a724:	0800bd04 	.word	0x0800bd04

0800a728 <cos>:
 800a728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a72a:	eeb0 7b40 	vmov.f64	d7, d0
 800a72e:	ee17 3a90 	vmov	r3, s15
 800a732:	4a21      	ldr	r2, [pc, #132]	@ (800a7b8 <cos+0x90>)
 800a734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a738:	4293      	cmp	r3, r2
 800a73a:	d806      	bhi.n	800a74a <cos+0x22>
 800a73c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800a7b0 <cos+0x88>
 800a740:	b005      	add	sp, #20
 800a742:	f85d eb04 	ldr.w	lr, [sp], #4
 800a746:	f000 b83b 	b.w	800a7c0 <__kernel_cos>
 800a74a:	4a1c      	ldr	r2, [pc, #112]	@ (800a7bc <cos+0x94>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d904      	bls.n	800a75a <cos+0x32>
 800a750:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a754:	b005      	add	sp, #20
 800a756:	f85d fb04 	ldr.w	pc, [sp], #4
 800a75a:	4668      	mov	r0, sp
 800a75c:	f000 f8f0 	bl	800a940 <__ieee754_rem_pio2>
 800a760:	f000 0003 	and.w	r0, r0, #3
 800a764:	2801      	cmp	r0, #1
 800a766:	d009      	beq.n	800a77c <cos+0x54>
 800a768:	2802      	cmp	r0, #2
 800a76a:	d010      	beq.n	800a78e <cos+0x66>
 800a76c:	b9b0      	cbnz	r0, 800a79c <cos+0x74>
 800a76e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a772:	ed9d 0b00 	vldr	d0, [sp]
 800a776:	f000 f823 	bl	800a7c0 <__kernel_cos>
 800a77a:	e7eb      	b.n	800a754 <cos+0x2c>
 800a77c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a780:	ed9d 0b00 	vldr	d0, [sp]
 800a784:	f000 f884 	bl	800a890 <__kernel_sin>
 800a788:	eeb1 0b40 	vneg.f64	d0, d0
 800a78c:	e7e2      	b.n	800a754 <cos+0x2c>
 800a78e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a792:	ed9d 0b00 	vldr	d0, [sp]
 800a796:	f000 f813 	bl	800a7c0 <__kernel_cos>
 800a79a:	e7f5      	b.n	800a788 <cos+0x60>
 800a79c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7a0:	ed9d 0b00 	vldr	d0, [sp]
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	f000 f873 	bl	800a890 <__kernel_sin>
 800a7aa:	e7d3      	b.n	800a754 <cos+0x2c>
 800a7ac:	f3af 8000 	nop.w
	...
 800a7b8:	3fe921fb 	.word	0x3fe921fb
 800a7bc:	7fefffff 	.word	0x7fefffff

0800a7c0 <__kernel_cos>:
 800a7c0:	eeb0 5b40 	vmov.f64	d5, d0
 800a7c4:	ee15 1a90 	vmov	r1, s11
 800a7c8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a7cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a7d0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800a7d4:	d204      	bcs.n	800a7e0 <__kernel_cos+0x20>
 800a7d6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800a7da:	ee17 3a90 	vmov	r3, s15
 800a7de:	b343      	cbz	r3, 800a832 <__kernel_cos+0x72>
 800a7e0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800a7e4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800a7e8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800a858 <__kernel_cos+0x98>
 800a7ec:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a860 <__kernel_cos+0xa0>
 800a7f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a7f4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a868 <__kernel_cos+0xa8>
 800a7f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a7fc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a870 <__kernel_cos+0xb0>
 800a800:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a804:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a878 <__kernel_cos+0xb8>
 800a808:	4b1f      	ldr	r3, [pc, #124]	@ (800a888 <__kernel_cos+0xc8>)
 800a80a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a80e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a880 <__kernel_cos+0xc0>
 800a812:	4299      	cmp	r1, r3
 800a814:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a818:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a81c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800a820:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a824:	eea6 1b04 	vfma.f64	d1, d6, d4
 800a828:	d804      	bhi.n	800a834 <__kernel_cos+0x74>
 800a82a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a82e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a832:	4770      	bx	lr
 800a834:	4b15      	ldr	r3, [pc, #84]	@ (800a88c <__kernel_cos+0xcc>)
 800a836:	4299      	cmp	r1, r3
 800a838:	d809      	bhi.n	800a84e <__kernel_cos+0x8e>
 800a83a:	2200      	movs	r2, #0
 800a83c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800a840:	ec43 2b16 	vmov	d6, r2, r3
 800a844:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a848:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a84c:	e7ed      	b.n	800a82a <__kernel_cos+0x6a>
 800a84e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800a852:	e7f7      	b.n	800a844 <__kernel_cos+0x84>
 800a854:	f3af 8000 	nop.w
 800a858:	be8838d4 	.word	0xbe8838d4
 800a85c:	bda8fae9 	.word	0xbda8fae9
 800a860:	bdb4b1c4 	.word	0xbdb4b1c4
 800a864:	3e21ee9e 	.word	0x3e21ee9e
 800a868:	809c52ad 	.word	0x809c52ad
 800a86c:	be927e4f 	.word	0xbe927e4f
 800a870:	19cb1590 	.word	0x19cb1590
 800a874:	3efa01a0 	.word	0x3efa01a0
 800a878:	16c15177 	.word	0x16c15177
 800a87c:	bf56c16c 	.word	0xbf56c16c
 800a880:	5555554c 	.word	0x5555554c
 800a884:	3fa55555 	.word	0x3fa55555
 800a888:	3fd33332 	.word	0x3fd33332
 800a88c:	3fe90000 	.word	0x3fe90000

0800a890 <__kernel_sin>:
 800a890:	ee10 3a90 	vmov	r3, s1
 800a894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a898:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a89c:	d204      	bcs.n	800a8a8 <__kernel_sin+0x18>
 800a89e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a8a2:	ee17 3a90 	vmov	r3, s15
 800a8a6:	b35b      	cbz	r3, 800a900 <__kernel_sin+0x70>
 800a8a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a8ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a8b0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800a908 <__kernel_sin+0x78>
 800a8b4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a910 <__kernel_sin+0x80>
 800a8b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a8bc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a918 <__kernel_sin+0x88>
 800a8c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a8c4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a920 <__kernel_sin+0x90>
 800a8c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a8cc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a928 <__kernel_sin+0x98>
 800a8d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a8d4:	b930      	cbnz	r0, 800a8e4 <__kernel_sin+0x54>
 800a8d6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a930 <__kernel_sin+0xa0>
 800a8da:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a8de:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a8e2:	4770      	bx	lr
 800a8e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a8e8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800a8ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a8f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a8f4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a938 <__kernel_sin+0xa8>
 800a8f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a8fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	f3af 8000 	nop.w
 800a908:	5acfd57c 	.word	0x5acfd57c
 800a90c:	3de5d93a 	.word	0x3de5d93a
 800a910:	8a2b9ceb 	.word	0x8a2b9ceb
 800a914:	be5ae5e6 	.word	0xbe5ae5e6
 800a918:	57b1fe7d 	.word	0x57b1fe7d
 800a91c:	3ec71de3 	.word	0x3ec71de3
 800a920:	19c161d5 	.word	0x19c161d5
 800a924:	bf2a01a0 	.word	0xbf2a01a0
 800a928:	1110f8a6 	.word	0x1110f8a6
 800a92c:	3f811111 	.word	0x3f811111
 800a930:	55555549 	.word	0x55555549
 800a934:	bfc55555 	.word	0xbfc55555
 800a938:	55555549 	.word	0x55555549
 800a93c:	3fc55555 	.word	0x3fc55555

0800a940 <__ieee754_rem_pio2>:
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	eeb0 7b40 	vmov.f64	d7, d0
 800a946:	ee17 5a90 	vmov	r5, s15
 800a94a:	4b99      	ldr	r3, [pc, #612]	@ (800abb0 <__ieee754_rem_pio2+0x270>)
 800a94c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a950:	429e      	cmp	r6, r3
 800a952:	b088      	sub	sp, #32
 800a954:	4604      	mov	r4, r0
 800a956:	d807      	bhi.n	800a968 <__ieee754_rem_pio2+0x28>
 800a958:	2200      	movs	r2, #0
 800a95a:	2300      	movs	r3, #0
 800a95c:	ed84 0b00 	vstr	d0, [r4]
 800a960:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a964:	2000      	movs	r0, #0
 800a966:	e01b      	b.n	800a9a0 <__ieee754_rem_pio2+0x60>
 800a968:	4b92      	ldr	r3, [pc, #584]	@ (800abb4 <__ieee754_rem_pio2+0x274>)
 800a96a:	429e      	cmp	r6, r3
 800a96c:	d83b      	bhi.n	800a9e6 <__ieee754_rem_pio2+0xa6>
 800a96e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800a972:	2d00      	cmp	r5, #0
 800a974:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ab70 <__ieee754_rem_pio2+0x230>
 800a978:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800a97c:	dd19      	ble.n	800a9b2 <__ieee754_rem_pio2+0x72>
 800a97e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a982:	429e      	cmp	r6, r3
 800a984:	d00e      	beq.n	800a9a4 <__ieee754_rem_pio2+0x64>
 800a986:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800ab78 <__ieee754_rem_pio2+0x238>
 800a98a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800a98e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a992:	ed84 6b00 	vstr	d6, [r4]
 800a996:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a99a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a99e:	2001      	movs	r0, #1
 800a9a0:	b008      	add	sp, #32
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ab80 <__ieee754_rem_pio2+0x240>
 800a9a8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ab88 <__ieee754_rem_pio2+0x248>
 800a9ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9b0:	e7eb      	b.n	800a98a <__ieee754_rem_pio2+0x4a>
 800a9b2:	429e      	cmp	r6, r3
 800a9b4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a9b8:	d00e      	beq.n	800a9d8 <__ieee754_rem_pio2+0x98>
 800a9ba:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800ab78 <__ieee754_rem_pio2+0x238>
 800a9be:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a9c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9c6:	ed84 6b00 	vstr	d6, [r4]
 800a9ca:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d2:	ed84 7b02 	vstr	d7, [r4, #8]
 800a9d6:	e7e3      	b.n	800a9a0 <__ieee754_rem_pio2+0x60>
 800a9d8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ab80 <__ieee754_rem_pio2+0x240>
 800a9dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ab88 <__ieee754_rem_pio2+0x248>
 800a9e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a9e4:	e7eb      	b.n	800a9be <__ieee754_rem_pio2+0x7e>
 800a9e6:	4b74      	ldr	r3, [pc, #464]	@ (800abb8 <__ieee754_rem_pio2+0x278>)
 800a9e8:	429e      	cmp	r6, r3
 800a9ea:	d870      	bhi.n	800aace <__ieee754_rem_pio2+0x18e>
 800a9ec:	f000 f8ec 	bl	800abc8 <fabs>
 800a9f0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a9f4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ab90 <__ieee754_rem_pio2+0x250>
 800a9f8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a9fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800aa00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800aa04:	ee17 0a90 	vmov	r0, s15
 800aa08:	eeb1 4b45 	vneg.f64	d4, d5
 800aa0c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ab70 <__ieee754_rem_pio2+0x230>
 800aa10:	eea5 0b47 	vfms.f64	d0, d5, d7
 800aa14:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ab78 <__ieee754_rem_pio2+0x238>
 800aa18:	281f      	cmp	r0, #31
 800aa1a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800aa1e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800aa22:	dc05      	bgt.n	800aa30 <__ieee754_rem_pio2+0xf0>
 800aa24:	4b65      	ldr	r3, [pc, #404]	@ (800abbc <__ieee754_rem_pio2+0x27c>)
 800aa26:	1e42      	subs	r2, r0, #1
 800aa28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2c:	42b3      	cmp	r3, r6
 800aa2e:	d109      	bne.n	800aa44 <__ieee754_rem_pio2+0x104>
 800aa30:	ee16 3a90 	vmov	r3, s13
 800aa34:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800aa38:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800aa3c:	2b10      	cmp	r3, #16
 800aa3e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800aa42:	dc02      	bgt.n	800aa4a <__ieee754_rem_pio2+0x10a>
 800aa44:	ed84 6b00 	vstr	d6, [r4]
 800aa48:	e01a      	b.n	800aa80 <__ieee754_rem_pio2+0x140>
 800aa4a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ab80 <__ieee754_rem_pio2+0x240>
 800aa4e:	eeb0 6b40 	vmov.f64	d6, d0
 800aa52:	eea4 6b03 	vfma.f64	d6, d4, d3
 800aa56:	ee30 7b46 	vsub.f64	d7, d0, d6
 800aa5a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800aa5e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ab88 <__ieee754_rem_pio2+0x248>
 800aa62:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800aa66:	ee36 3b47 	vsub.f64	d3, d6, d7
 800aa6a:	ee13 3a90 	vmov	r3, s7
 800aa6e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	2b31      	cmp	r3, #49	@ 0x31
 800aa76:	dc17      	bgt.n	800aaa8 <__ieee754_rem_pio2+0x168>
 800aa78:	eeb0 0b46 	vmov.f64	d0, d6
 800aa7c:	ed84 3b00 	vstr	d3, [r4]
 800aa80:	ed94 6b00 	vldr	d6, [r4]
 800aa84:	2d00      	cmp	r5, #0
 800aa86:	ee30 0b46 	vsub.f64	d0, d0, d6
 800aa8a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800aa8e:	ed84 0b02 	vstr	d0, [r4, #8]
 800aa92:	da85      	bge.n	800a9a0 <__ieee754_rem_pio2+0x60>
 800aa94:	eeb1 6b46 	vneg.f64	d6, d6
 800aa98:	eeb1 0b40 	vneg.f64	d0, d0
 800aa9c:	ed84 6b00 	vstr	d6, [r4]
 800aaa0:	ed84 0b02 	vstr	d0, [r4, #8]
 800aaa4:	4240      	negs	r0, r0
 800aaa6:	e77b      	b.n	800a9a0 <__ieee754_rem_pio2+0x60>
 800aaa8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ab98 <__ieee754_rem_pio2+0x258>
 800aaac:	eeb0 0b46 	vmov.f64	d0, d6
 800aab0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800aab4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800aab8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800aabc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800aba0 <__ieee754_rem_pio2+0x260>
 800aac0:	eeb0 7b46 	vmov.f64	d7, d6
 800aac4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800aac8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800aacc:	e7ba      	b.n	800aa44 <__ieee754_rem_pio2+0x104>
 800aace:	4b3c      	ldr	r3, [pc, #240]	@ (800abc0 <__ieee754_rem_pio2+0x280>)
 800aad0:	429e      	cmp	r6, r3
 800aad2:	d906      	bls.n	800aae2 <__ieee754_rem_pio2+0x1a2>
 800aad4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800aad8:	ed80 7b02 	vstr	d7, [r0, #8]
 800aadc:	ed80 7b00 	vstr	d7, [r0]
 800aae0:	e740      	b.n	800a964 <__ieee754_rem_pio2+0x24>
 800aae2:	ee10 3a10 	vmov	r3, s0
 800aae6:	1532      	asrs	r2, r6, #20
 800aae8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800aaec:	4618      	mov	r0, r3
 800aaee:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800aaf2:	ec41 0b17 	vmov	d7, r0, r1
 800aaf6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aafa:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800aba8 <__ieee754_rem_pio2+0x268>
 800aafe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ab02:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ab06:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ab0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ab0e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ab12:	a808      	add	r0, sp, #32
 800ab14:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ab18:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ab1c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ab20:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ab24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab28:	2103      	movs	r1, #3
 800ab2a:	ed30 7b02 	vldmdb	r0!, {d7}
 800ab2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab36:	460b      	mov	r3, r1
 800ab38:	f101 31ff 	add.w	r1, r1, #4294967295
 800ab3c:	d0f5      	beq.n	800ab2a <__ieee754_rem_pio2+0x1ea>
 800ab3e:	4921      	ldr	r1, [pc, #132]	@ (800abc4 <__ieee754_rem_pio2+0x284>)
 800ab40:	9101      	str	r1, [sp, #4]
 800ab42:	2102      	movs	r1, #2
 800ab44:	9100      	str	r1, [sp, #0]
 800ab46:	a802      	add	r0, sp, #8
 800ab48:	4621      	mov	r1, r4
 800ab4a:	f000 f845 	bl	800abd8 <__kernel_rem_pio2>
 800ab4e:	2d00      	cmp	r5, #0
 800ab50:	f6bf af26 	bge.w	800a9a0 <__ieee754_rem_pio2+0x60>
 800ab54:	ed94 7b00 	vldr	d7, [r4]
 800ab58:	eeb1 7b47 	vneg.f64	d7, d7
 800ab5c:	ed84 7b00 	vstr	d7, [r4]
 800ab60:	ed94 7b02 	vldr	d7, [r4, #8]
 800ab64:	eeb1 7b47 	vneg.f64	d7, d7
 800ab68:	ed84 7b02 	vstr	d7, [r4, #8]
 800ab6c:	e79a      	b.n	800aaa4 <__ieee754_rem_pio2+0x164>
 800ab6e:	bf00      	nop
 800ab70:	54400000 	.word	0x54400000
 800ab74:	3ff921fb 	.word	0x3ff921fb
 800ab78:	1a626331 	.word	0x1a626331
 800ab7c:	3dd0b461 	.word	0x3dd0b461
 800ab80:	1a600000 	.word	0x1a600000
 800ab84:	3dd0b461 	.word	0x3dd0b461
 800ab88:	2e037073 	.word	0x2e037073
 800ab8c:	3ba3198a 	.word	0x3ba3198a
 800ab90:	6dc9c883 	.word	0x6dc9c883
 800ab94:	3fe45f30 	.word	0x3fe45f30
 800ab98:	2e000000 	.word	0x2e000000
 800ab9c:	3ba3198a 	.word	0x3ba3198a
 800aba0:	252049c1 	.word	0x252049c1
 800aba4:	397b839a 	.word	0x397b839a
 800aba8:	00000000 	.word	0x00000000
 800abac:	41700000 	.word	0x41700000
 800abb0:	3fe921fb 	.word	0x3fe921fb
 800abb4:	4002d97b 	.word	0x4002d97b
 800abb8:	413921fb 	.word	0x413921fb
 800abbc:	0800bb20 	.word	0x0800bb20
 800abc0:	7fefffff 	.word	0x7fefffff
 800abc4:	0800bba0 	.word	0x0800bba0

0800abc8 <fabs>:
 800abc8:	ec51 0b10 	vmov	r0, r1, d0
 800abcc:	4602      	mov	r2, r0
 800abce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800abd2:	ec43 2b10 	vmov	d0, r2, r3
 800abd6:	4770      	bx	lr

0800abd8 <__kernel_rem_pio2>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	ed2d 8b06 	vpush	{d8-d10}
 800abe0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800abe4:	469b      	mov	fp, r3
 800abe6:	9001      	str	r0, [sp, #4]
 800abe8:	4bbb      	ldr	r3, [pc, #748]	@ (800aed8 <__kernel_rem_pio2+0x300>)
 800abea:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800abec:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800abf0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800abf4:	f112 0f14 	cmn.w	r2, #20
 800abf8:	bfa8      	it	ge
 800abfa:	1ed3      	subge	r3, r2, #3
 800abfc:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ac00:	bfb8      	it	lt
 800ac02:	2300      	movlt	r3, #0
 800ac04:	f06f 0517 	mvn.w	r5, #23
 800ac08:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800aec0 <__kernel_rem_pio2+0x2e8>
 800ac0c:	bfa4      	itt	ge
 800ac0e:	2018      	movge	r0, #24
 800ac10:	fb93 f3f0 	sdivge	r3, r3, r0
 800ac14:	fb03 5505 	mla	r5, r3, r5, r5
 800ac18:	eba3 040a 	sub.w	r4, r3, sl
 800ac1c:	4415      	add	r5, r2
 800ac1e:	460f      	mov	r7, r1
 800ac20:	eb09 060a 	add.w	r6, r9, sl
 800ac24:	a81a      	add	r0, sp, #104	@ 0x68
 800ac26:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	42b2      	cmp	r2, r6
 800ac2e:	dd0e      	ble.n	800ac4e <__kernel_rem_pio2+0x76>
 800ac30:	aa1a      	add	r2, sp, #104	@ 0x68
 800ac32:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ac36:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800ac3a:	2600      	movs	r6, #0
 800ac3c:	454e      	cmp	r6, r9
 800ac3e:	dc25      	bgt.n	800ac8c <__kernel_rem_pio2+0xb4>
 800ac40:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800aec0 <__kernel_rem_pio2+0x2e8>
 800ac44:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ac48:	4614      	mov	r4, r2
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e015      	b.n	800ac7a <__kernel_rem_pio2+0xa2>
 800ac4e:	42d4      	cmn	r4, r2
 800ac50:	d409      	bmi.n	800ac66 <__kernel_rem_pio2+0x8e>
 800ac52:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800ac56:	ee07 1a90 	vmov	s15, r1
 800ac5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac5e:	eca0 7b02 	vstmia	r0!, {d7}
 800ac62:	3201      	adds	r2, #1
 800ac64:	e7e2      	b.n	800ac2c <__kernel_rem_pio2+0x54>
 800ac66:	eeb0 7b46 	vmov.f64	d7, d6
 800ac6a:	e7f8      	b.n	800ac5e <__kernel_rem_pio2+0x86>
 800ac6c:	ecbc 5b02 	vldmia	ip!, {d5}
 800ac70:	ed94 6b00 	vldr	d6, [r4]
 800ac74:	3001      	adds	r0, #1
 800ac76:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac7a:	4550      	cmp	r0, sl
 800ac7c:	f1a4 0408 	sub.w	r4, r4, #8
 800ac80:	ddf4      	ble.n	800ac6c <__kernel_rem_pio2+0x94>
 800ac82:	ecae 7b02 	vstmia	lr!, {d7}
 800ac86:	3601      	adds	r6, #1
 800ac88:	3208      	adds	r2, #8
 800ac8a:	e7d7      	b.n	800ac3c <__kernel_rem_pio2+0x64>
 800ac8c:	aa06      	add	r2, sp, #24
 800ac8e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800aec8 <__kernel_rem_pio2+0x2f0>
 800ac92:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800aed0 <__kernel_rem_pio2+0x2f8>
 800ac96:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ac9a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800ac9e:	9203      	str	r2, [sp, #12]
 800aca0:	9302      	str	r3, [sp, #8]
 800aca2:	464c      	mov	r4, r9
 800aca4:	00e3      	lsls	r3, r4, #3
 800aca6:	9304      	str	r3, [sp, #16]
 800aca8:	ab92      	add	r3, sp, #584	@ 0x248
 800acaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acae:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800acb2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800acb4:	ab06      	add	r3, sp, #24
 800acb6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800acba:	461e      	mov	r6, r3
 800acbc:	4620      	mov	r0, r4
 800acbe:	2800      	cmp	r0, #0
 800acc0:	f1a2 0208 	sub.w	r2, r2, #8
 800acc4:	dc4a      	bgt.n	800ad5c <__kernel_rem_pio2+0x184>
 800acc6:	4628      	mov	r0, r5
 800acc8:	9305      	str	r3, [sp, #20]
 800acca:	f000 fa01 	bl	800b0d0 <scalbn>
 800acce:	eeb0 8b40 	vmov.f64	d8, d0
 800acd2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800acd6:	ee28 0b00 	vmul.f64	d0, d8, d0
 800acda:	f000 fa79 	bl	800b1d0 <floor>
 800acde:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800ace2:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ace6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800acea:	2d00      	cmp	r5, #0
 800acec:	ee17 8a90 	vmov	r8, s15
 800acf0:	9b05      	ldr	r3, [sp, #20]
 800acf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800acf6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800acfa:	dd41      	ble.n	800ad80 <__kernel_rem_pio2+0x1a8>
 800acfc:	1e60      	subs	r0, r4, #1
 800acfe:	aa06      	add	r2, sp, #24
 800ad00:	f1c5 0c18 	rsb	ip, r5, #24
 800ad04:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ad08:	fa46 f20c 	asr.w	r2, r6, ip
 800ad0c:	4490      	add	r8, r2
 800ad0e:	fa02 f20c 	lsl.w	r2, r2, ip
 800ad12:	1ab6      	subs	r6, r6, r2
 800ad14:	aa06      	add	r2, sp, #24
 800ad16:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800ad1a:	f1c5 0217 	rsb	r2, r5, #23
 800ad1e:	4116      	asrs	r6, r2
 800ad20:	2e00      	cmp	r6, #0
 800ad22:	dd3c      	ble.n	800ad9e <__kernel_rem_pio2+0x1c6>
 800ad24:	f04f 0c00 	mov.w	ip, #0
 800ad28:	f108 0801 	add.w	r8, r8, #1
 800ad2c:	4660      	mov	r0, ip
 800ad2e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800ad32:	4564      	cmp	r4, ip
 800ad34:	dc66      	bgt.n	800ae04 <__kernel_rem_pio2+0x22c>
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	dd03      	ble.n	800ad42 <__kernel_rem_pio2+0x16a>
 800ad3a:	2d01      	cmp	r5, #1
 800ad3c:	d072      	beq.n	800ae24 <__kernel_rem_pio2+0x24c>
 800ad3e:	2d02      	cmp	r5, #2
 800ad40:	d07a      	beq.n	800ae38 <__kernel_rem_pio2+0x260>
 800ad42:	2e02      	cmp	r6, #2
 800ad44:	d12b      	bne.n	800ad9e <__kernel_rem_pio2+0x1c6>
 800ad46:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ad4a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ad4e:	b330      	cbz	r0, 800ad9e <__kernel_rem_pio2+0x1c6>
 800ad50:	4628      	mov	r0, r5
 800ad52:	f000 f9bd 	bl	800b0d0 <scalbn>
 800ad56:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ad5a:	e020      	b.n	800ad9e <__kernel_rem_pio2+0x1c6>
 800ad5c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ad60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ad64:	3801      	subs	r0, #1
 800ad66:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ad6a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ad6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ad72:	eca6 0a01 	vstmia	r6!, {s0}
 800ad76:	ed92 0b00 	vldr	d0, [r2]
 800ad7a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ad7e:	e79e      	b.n	800acbe <__kernel_rem_pio2+0xe6>
 800ad80:	d105      	bne.n	800ad8e <__kernel_rem_pio2+0x1b6>
 800ad82:	1e62      	subs	r2, r4, #1
 800ad84:	a906      	add	r1, sp, #24
 800ad86:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800ad8a:	15f6      	asrs	r6, r6, #23
 800ad8c:	e7c8      	b.n	800ad20 <__kernel_rem_pio2+0x148>
 800ad8e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ad92:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9a:	da31      	bge.n	800ae00 <__kernel_rem_pio2+0x228>
 800ad9c:	2600      	movs	r6, #0
 800ad9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ada2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada6:	f040 809b 	bne.w	800aee0 <__kernel_rem_pio2+0x308>
 800adaa:	1e62      	subs	r2, r4, #1
 800adac:	2000      	movs	r0, #0
 800adae:	454a      	cmp	r2, r9
 800adb0:	da49      	bge.n	800ae46 <__kernel_rem_pio2+0x26e>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d062      	beq.n	800ae7c <__kernel_rem_pio2+0x2a4>
 800adb6:	3c01      	subs	r4, #1
 800adb8:	ab06      	add	r3, sp, #24
 800adba:	3d18      	subs	r5, #24
 800adbc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d0f8      	beq.n	800adb6 <__kernel_rem_pio2+0x1de>
 800adc4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800adc8:	4628      	mov	r0, r5
 800adca:	f000 f981 	bl	800b0d0 <scalbn>
 800adce:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800aec8 <__kernel_rem_pio2+0x2f0>
 800add2:	1c62      	adds	r2, r4, #1
 800add4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800add6:	00d3      	lsls	r3, r2, #3
 800add8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800addc:	4622      	mov	r2, r4
 800adde:	2a00      	cmp	r2, #0
 800ade0:	f280 80a8 	bge.w	800af34 <__kernel_rem_pio2+0x35c>
 800ade4:	4622      	mov	r2, r4
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	f2c0 80c6 	blt.w	800af78 <__kernel_rem_pio2+0x3a0>
 800adec:	a96a      	add	r1, sp, #424	@ 0x1a8
 800adee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800adf2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800aec0 <__kernel_rem_pio2+0x2e8>
 800adf6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800aedc <__kernel_rem_pio2+0x304>
 800adfa:	2000      	movs	r0, #0
 800adfc:	1aa1      	subs	r1, r4, r2
 800adfe:	e0b0      	b.n	800af62 <__kernel_rem_pio2+0x38a>
 800ae00:	2602      	movs	r6, #2
 800ae02:	e78f      	b.n	800ad24 <__kernel_rem_pio2+0x14c>
 800ae04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae08:	b948      	cbnz	r0, 800ae1e <__kernel_rem_pio2+0x246>
 800ae0a:	b122      	cbz	r2, 800ae16 <__kernel_rem_pio2+0x23e>
 800ae0c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ae10:	f843 2c04 	str.w	r2, [r3, #-4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f10c 0c01 	add.w	ip, ip, #1
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	e789      	b.n	800ad32 <__kernel_rem_pio2+0x15a>
 800ae1e:	ebae 0202 	sub.w	r2, lr, r2
 800ae22:	e7f5      	b.n	800ae10 <__kernel_rem_pio2+0x238>
 800ae24:	1e62      	subs	r2, r4, #1
 800ae26:	ab06      	add	r3, sp, #24
 800ae28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ae30:	a906      	add	r1, sp, #24
 800ae32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ae36:	e784      	b.n	800ad42 <__kernel_rem_pio2+0x16a>
 800ae38:	1e62      	subs	r2, r4, #1
 800ae3a:	ab06      	add	r3, sp, #24
 800ae3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ae44:	e7f4      	b.n	800ae30 <__kernel_rem_pio2+0x258>
 800ae46:	ab06      	add	r3, sp, #24
 800ae48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4c:	3a01      	subs	r2, #1
 800ae4e:	4318      	orrs	r0, r3
 800ae50:	e7ad      	b.n	800adae <__kernel_rem_pio2+0x1d6>
 800ae52:	3301      	adds	r3, #1
 800ae54:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d0fa      	beq.n	800ae52 <__kernel_rem_pio2+0x27a>
 800ae5c:	9a04      	ldr	r2, [sp, #16]
 800ae5e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800ae62:	446a      	add	r2, sp
 800ae64:	eb04 000b 	add.w	r0, r4, fp
 800ae68:	a91a      	add	r1, sp, #104	@ 0x68
 800ae6a:	1c66      	adds	r6, r4, #1
 800ae6c:	3a98      	subs	r2, #152	@ 0x98
 800ae6e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ae72:	4423      	add	r3, r4
 800ae74:	42b3      	cmp	r3, r6
 800ae76:	da04      	bge.n	800ae82 <__kernel_rem_pio2+0x2aa>
 800ae78:	461c      	mov	r4, r3
 800ae7a:	e713      	b.n	800aca4 <__kernel_rem_pio2+0xcc>
 800ae7c:	9a03      	ldr	r2, [sp, #12]
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e7e8      	b.n	800ae54 <__kernel_rem_pio2+0x27c>
 800ae82:	9902      	ldr	r1, [sp, #8]
 800ae84:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ae88:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ae8c:	9104      	str	r1, [sp, #16]
 800ae8e:	ee07 1a90 	vmov	s15, r1
 800ae92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae96:	2400      	movs	r4, #0
 800ae98:	eca0 7b02 	vstmia	r0!, {d7}
 800ae9c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800aec0 <__kernel_rem_pio2+0x2e8>
 800aea0:	4686      	mov	lr, r0
 800aea2:	4554      	cmp	r4, sl
 800aea4:	dd03      	ble.n	800aeae <__kernel_rem_pio2+0x2d6>
 800aea6:	eca2 7b02 	vstmia	r2!, {d7}
 800aeaa:	3601      	adds	r6, #1
 800aeac:	e7e2      	b.n	800ae74 <__kernel_rem_pio2+0x29c>
 800aeae:	ecbc 5b02 	vldmia	ip!, {d5}
 800aeb2:	ed3e 6b02 	vldmdb	lr!, {d6}
 800aeb6:	3401      	adds	r4, #1
 800aeb8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aebc:	e7f1      	b.n	800aea2 <__kernel_rem_pio2+0x2ca>
 800aebe:	bf00      	nop
	...
 800aecc:	3e700000 	.word	0x3e700000
 800aed0:	00000000 	.word	0x00000000
 800aed4:	41700000 	.word	0x41700000
 800aed8:	0800bce8 	.word	0x0800bce8
 800aedc:	0800bca8 	.word	0x0800bca8
 800aee0:	4268      	negs	r0, r5
 800aee2:	eeb0 0b48 	vmov.f64	d0, d8
 800aee6:	f000 f8f3 	bl	800b0d0 <scalbn>
 800aeea:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800b0b8 <__kernel_rem_pio2+0x4e0>
 800aeee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800aef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef6:	db17      	blt.n	800af28 <__kernel_rem_pio2+0x350>
 800aef8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800b0c0 <__kernel_rem_pio2+0x4e8>
 800aefc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800af00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800af04:	aa06      	add	r2, sp, #24
 800af06:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800af0a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800af0e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800af12:	3518      	adds	r5, #24
 800af14:	ee10 3a10 	vmov	r3, s0
 800af18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800af1c:	ee17 3a10 	vmov	r3, s14
 800af20:	3401      	adds	r4, #1
 800af22:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800af26:	e74d      	b.n	800adc4 <__kernel_rem_pio2+0x1ec>
 800af28:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800af2c:	aa06      	add	r2, sp, #24
 800af2e:	ee10 3a10 	vmov	r3, s0
 800af32:	e7f6      	b.n	800af22 <__kernel_rem_pio2+0x34a>
 800af34:	a806      	add	r0, sp, #24
 800af36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800af3a:	9001      	str	r0, [sp, #4]
 800af3c:	ee07 0a90 	vmov	s15, r0
 800af40:	3a01      	subs	r2, #1
 800af42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af46:	ee27 7b00 	vmul.f64	d7, d7, d0
 800af4a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800af4e:	ed21 7b02 	vstmdb	r1!, {d7}
 800af52:	e744      	b.n	800adde <__kernel_rem_pio2+0x206>
 800af54:	ecbc 5b02 	vldmia	ip!, {d5}
 800af58:	ecb5 6b02 	vldmia	r5!, {d6}
 800af5c:	3001      	adds	r0, #1
 800af5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800af62:	4548      	cmp	r0, r9
 800af64:	dc01      	bgt.n	800af6a <__kernel_rem_pio2+0x392>
 800af66:	4281      	cmp	r1, r0
 800af68:	daf4      	bge.n	800af54 <__kernel_rem_pio2+0x37c>
 800af6a:	a842      	add	r0, sp, #264	@ 0x108
 800af6c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800af70:	ed81 7b00 	vstr	d7, [r1]
 800af74:	3a01      	subs	r2, #1
 800af76:	e736      	b.n	800ade6 <__kernel_rem_pio2+0x20e>
 800af78:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800af7a:	2a02      	cmp	r2, #2
 800af7c:	dc0a      	bgt.n	800af94 <__kernel_rem_pio2+0x3bc>
 800af7e:	2a00      	cmp	r2, #0
 800af80:	dc2d      	bgt.n	800afde <__kernel_rem_pio2+0x406>
 800af82:	d046      	beq.n	800b012 <__kernel_rem_pio2+0x43a>
 800af84:	f008 0007 	and.w	r0, r8, #7
 800af88:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800af8c:	ecbd 8b06 	vpop	{d8-d10}
 800af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af94:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800af96:	2a03      	cmp	r2, #3
 800af98:	d1f4      	bne.n	800af84 <__kernel_rem_pio2+0x3ac>
 800af9a:	a942      	add	r1, sp, #264	@ 0x108
 800af9c:	f1a3 0208 	sub.w	r2, r3, #8
 800afa0:	440a      	add	r2, r1
 800afa2:	4611      	mov	r1, r2
 800afa4:	4620      	mov	r0, r4
 800afa6:	2800      	cmp	r0, #0
 800afa8:	f1a1 0108 	sub.w	r1, r1, #8
 800afac:	dc52      	bgt.n	800b054 <__kernel_rem_pio2+0x47c>
 800afae:	4621      	mov	r1, r4
 800afb0:	2901      	cmp	r1, #1
 800afb2:	f1a2 0208 	sub.w	r2, r2, #8
 800afb6:	dc5d      	bgt.n	800b074 <__kernel_rem_pio2+0x49c>
 800afb8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800b0c8 <__kernel_rem_pio2+0x4f0>
 800afbc:	aa42      	add	r2, sp, #264	@ 0x108
 800afbe:	4413      	add	r3, r2
 800afc0:	2c01      	cmp	r4, #1
 800afc2:	dc67      	bgt.n	800b094 <__kernel_rem_pio2+0x4bc>
 800afc4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800afc8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800afcc:	2e00      	cmp	r6, #0
 800afce:	d167      	bne.n	800b0a0 <__kernel_rem_pio2+0x4c8>
 800afd0:	ed87 5b00 	vstr	d5, [r7]
 800afd4:	ed87 6b02 	vstr	d6, [r7, #8]
 800afd8:	ed87 7b04 	vstr	d7, [r7, #16]
 800afdc:	e7d2      	b.n	800af84 <__kernel_rem_pio2+0x3ac>
 800afde:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800b0c8 <__kernel_rem_pio2+0x4f0>
 800afe2:	aa42      	add	r2, sp, #264	@ 0x108
 800afe4:	4413      	add	r3, r2
 800afe6:	4622      	mov	r2, r4
 800afe8:	2a00      	cmp	r2, #0
 800afea:	da24      	bge.n	800b036 <__kernel_rem_pio2+0x45e>
 800afec:	b34e      	cbz	r6, 800b042 <__kernel_rem_pio2+0x46a>
 800afee:	eeb1 7b46 	vneg.f64	d7, d6
 800aff2:	ed87 7b00 	vstr	d7, [r7]
 800aff6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800affa:	aa44      	add	r2, sp, #272	@ 0x110
 800affc:	2301      	movs	r3, #1
 800affe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b002:	429c      	cmp	r4, r3
 800b004:	da20      	bge.n	800b048 <__kernel_rem_pio2+0x470>
 800b006:	b10e      	cbz	r6, 800b00c <__kernel_rem_pio2+0x434>
 800b008:	eeb1 7b47 	vneg.f64	d7, d7
 800b00c:	ed87 7b02 	vstr	d7, [r7, #8]
 800b010:	e7b8      	b.n	800af84 <__kernel_rem_pio2+0x3ac>
 800b012:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800b0c8 <__kernel_rem_pio2+0x4f0>
 800b016:	aa42      	add	r2, sp, #264	@ 0x108
 800b018:	4413      	add	r3, r2
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	da05      	bge.n	800b02a <__kernel_rem_pio2+0x452>
 800b01e:	b10e      	cbz	r6, 800b024 <__kernel_rem_pio2+0x44c>
 800b020:	eeb1 7b47 	vneg.f64	d7, d7
 800b024:	ed87 7b00 	vstr	d7, [r7]
 800b028:	e7ac      	b.n	800af84 <__kernel_rem_pio2+0x3ac>
 800b02a:	ed33 6b02 	vldmdb	r3!, {d6}
 800b02e:	3c01      	subs	r4, #1
 800b030:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b034:	e7f1      	b.n	800b01a <__kernel_rem_pio2+0x442>
 800b036:	ed33 7b02 	vldmdb	r3!, {d7}
 800b03a:	3a01      	subs	r2, #1
 800b03c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b040:	e7d2      	b.n	800afe8 <__kernel_rem_pio2+0x410>
 800b042:	eeb0 7b46 	vmov.f64	d7, d6
 800b046:	e7d4      	b.n	800aff2 <__kernel_rem_pio2+0x41a>
 800b048:	ecb2 6b02 	vldmia	r2!, {d6}
 800b04c:	3301      	adds	r3, #1
 800b04e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b052:	e7d6      	b.n	800b002 <__kernel_rem_pio2+0x42a>
 800b054:	ed91 7b00 	vldr	d7, [r1]
 800b058:	ed91 5b02 	vldr	d5, [r1, #8]
 800b05c:	3801      	subs	r0, #1
 800b05e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b062:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b066:	ed81 6b00 	vstr	d6, [r1]
 800b06a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b06e:	ed81 7b02 	vstr	d7, [r1, #8]
 800b072:	e798      	b.n	800afa6 <__kernel_rem_pio2+0x3ce>
 800b074:	ed92 7b00 	vldr	d7, [r2]
 800b078:	ed92 5b02 	vldr	d5, [r2, #8]
 800b07c:	3901      	subs	r1, #1
 800b07e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b082:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b086:	ed82 6b00 	vstr	d6, [r2]
 800b08a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b08e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b092:	e78d      	b.n	800afb0 <__kernel_rem_pio2+0x3d8>
 800b094:	ed33 6b02 	vldmdb	r3!, {d6}
 800b098:	3c01      	subs	r4, #1
 800b09a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b09e:	e78f      	b.n	800afc0 <__kernel_rem_pio2+0x3e8>
 800b0a0:	eeb1 5b45 	vneg.f64	d5, d5
 800b0a4:	eeb1 6b46 	vneg.f64	d6, d6
 800b0a8:	ed87 5b00 	vstr	d5, [r7]
 800b0ac:	eeb1 7b47 	vneg.f64	d7, d7
 800b0b0:	ed87 6b02 	vstr	d6, [r7, #8]
 800b0b4:	e790      	b.n	800afd8 <__kernel_rem_pio2+0x400>
 800b0b6:	bf00      	nop
 800b0b8:	00000000 	.word	0x00000000
 800b0bc:	41700000 	.word	0x41700000
 800b0c0:	00000000 	.word	0x00000000
 800b0c4:	3e700000 	.word	0x3e700000
	...

0800b0d0 <scalbn>:
 800b0d0:	ee10 1a90 	vmov	r1, s1
 800b0d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0d8:	b98b      	cbnz	r3, 800b0fe <scalbn+0x2e>
 800b0da:	ee10 3a10 	vmov	r3, s0
 800b0de:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b0e2:	4319      	orrs	r1, r3
 800b0e4:	d00a      	beq.n	800b0fc <scalbn+0x2c>
 800b0e6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b198 <scalbn+0xc8>
 800b0ea:	4b37      	ldr	r3, [pc, #220]	@ (800b1c8 <scalbn+0xf8>)
 800b0ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b0f0:	4298      	cmp	r0, r3
 800b0f2:	da0b      	bge.n	800b10c <scalbn+0x3c>
 800b0f4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b1a0 <scalbn+0xd0>
 800b0f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b0fc:	4770      	bx	lr
 800b0fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b102:	4293      	cmp	r3, r2
 800b104:	d107      	bne.n	800b116 <scalbn+0x46>
 800b106:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b10a:	4770      	bx	lr
 800b10c:	ee10 1a90 	vmov	r1, s1
 800b110:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b114:	3b36      	subs	r3, #54	@ 0x36
 800b116:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b11a:	4290      	cmp	r0, r2
 800b11c:	dd0d      	ble.n	800b13a <scalbn+0x6a>
 800b11e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b1a8 <scalbn+0xd8>
 800b122:	ee10 3a90 	vmov	r3, s1
 800b126:	eeb0 6b47 	vmov.f64	d6, d7
 800b12a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800b1b0 <scalbn+0xe0>
 800b12e:	2b00      	cmp	r3, #0
 800b130:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b134:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b138:	4770      	bx	lr
 800b13a:	4418      	add	r0, r3
 800b13c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800b140:	4298      	cmp	r0, r3
 800b142:	dcec      	bgt.n	800b11e <scalbn+0x4e>
 800b144:	2800      	cmp	r0, #0
 800b146:	dd0a      	ble.n	800b15e <scalbn+0x8e>
 800b148:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b14c:	ec53 2b10 	vmov	r2, r3, d0
 800b150:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b154:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b158:	ec43 2b10 	vmov	d0, r2, r3
 800b15c:	4770      	bx	lr
 800b15e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800b162:	da09      	bge.n	800b178 <scalbn+0xa8>
 800b164:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800b1a0 <scalbn+0xd0>
 800b168:	ee10 3a90 	vmov	r3, s1
 800b16c:	eeb0 6b47 	vmov.f64	d6, d7
 800b170:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800b1b8 <scalbn+0xe8>
 800b174:	2b00      	cmp	r3, #0
 800b176:	e7db      	b.n	800b130 <scalbn+0x60>
 800b178:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b17c:	ec53 2b10 	vmov	r2, r3, d0
 800b180:	3036      	adds	r0, #54	@ 0x36
 800b182:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b186:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b18a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800b1c0 <scalbn+0xf0>
 800b18e:	ec43 2b10 	vmov	d0, r2, r3
 800b192:	e7b1      	b.n	800b0f8 <scalbn+0x28>
 800b194:	f3af 8000 	nop.w
 800b198:	00000000 	.word	0x00000000
 800b19c:	43500000 	.word	0x43500000
 800b1a0:	c2f8f359 	.word	0xc2f8f359
 800b1a4:	01a56e1f 	.word	0x01a56e1f
 800b1a8:	8800759c 	.word	0x8800759c
 800b1ac:	7e37e43c 	.word	0x7e37e43c
 800b1b0:	8800759c 	.word	0x8800759c
 800b1b4:	fe37e43c 	.word	0xfe37e43c
 800b1b8:	c2f8f359 	.word	0xc2f8f359
 800b1bc:	81a56e1f 	.word	0x81a56e1f
 800b1c0:	00000000 	.word	0x00000000
 800b1c4:	3c900000 	.word	0x3c900000
 800b1c8:	ffff3cb0 	.word	0xffff3cb0
 800b1cc:	00000000 	.word	0x00000000

0800b1d0 <floor>:
 800b1d0:	ee10 3a90 	vmov	r3, s1
 800b1d4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800b1d8:	ee10 2a10 	vmov	r2, s0
 800b1dc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b1e0:	2913      	cmp	r1, #19
 800b1e2:	b530      	push	{r4, r5, lr}
 800b1e4:	4615      	mov	r5, r2
 800b1e6:	dc33      	bgt.n	800b250 <floor+0x80>
 800b1e8:	2900      	cmp	r1, #0
 800b1ea:	da18      	bge.n	800b21e <floor+0x4e>
 800b1ec:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800b2b0 <floor+0xe0>
 800b1f0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b1f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fc:	dd0a      	ble.n	800b214 <floor+0x44>
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	da50      	bge.n	800b2a4 <floor+0xd4>
 800b202:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b206:	4313      	orrs	r3, r2
 800b208:	2200      	movs	r2, #0
 800b20a:	4293      	cmp	r3, r2
 800b20c:	4b2a      	ldr	r3, [pc, #168]	@ (800b2b8 <floor+0xe8>)
 800b20e:	bf08      	it	eq
 800b210:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	ec41 0b10 	vmov	d0, r0, r1
 800b21c:	e01f      	b.n	800b25e <floor+0x8e>
 800b21e:	4827      	ldr	r0, [pc, #156]	@ (800b2bc <floor+0xec>)
 800b220:	4108      	asrs	r0, r1
 800b222:	ea03 0400 	and.w	r4, r3, r0
 800b226:	4314      	orrs	r4, r2
 800b228:	d019      	beq.n	800b25e <floor+0x8e>
 800b22a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b2b0 <floor+0xe0>
 800b22e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b232:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23a:	ddeb      	ble.n	800b214 <floor+0x44>
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bfbe      	ittt	lt
 800b240:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800b244:	410a      	asrlt	r2, r1
 800b246:	189b      	addlt	r3, r3, r2
 800b248:	ea23 0300 	bic.w	r3, r3, r0
 800b24c:	2200      	movs	r2, #0
 800b24e:	e7e1      	b.n	800b214 <floor+0x44>
 800b250:	2933      	cmp	r1, #51	@ 0x33
 800b252:	dd05      	ble.n	800b260 <floor+0x90>
 800b254:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b258:	d101      	bne.n	800b25e <floor+0x8e>
 800b25a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b25e:	bd30      	pop	{r4, r5, pc}
 800b260:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800b264:	f04f 30ff 	mov.w	r0, #4294967295
 800b268:	40e0      	lsrs	r0, r4
 800b26a:	4210      	tst	r0, r2
 800b26c:	d0f7      	beq.n	800b25e <floor+0x8e>
 800b26e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b2b0 <floor+0xe0>
 800b272:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b276:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27e:	ddc9      	ble.n	800b214 <floor+0x44>
 800b280:	2b00      	cmp	r3, #0
 800b282:	da02      	bge.n	800b28a <floor+0xba>
 800b284:	2914      	cmp	r1, #20
 800b286:	d103      	bne.n	800b290 <floor+0xc0>
 800b288:	3301      	adds	r3, #1
 800b28a:	ea22 0200 	bic.w	r2, r2, r0
 800b28e:	e7c1      	b.n	800b214 <floor+0x44>
 800b290:	2401      	movs	r4, #1
 800b292:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800b296:	fa04 f101 	lsl.w	r1, r4, r1
 800b29a:	440a      	add	r2, r1
 800b29c:	42aa      	cmp	r2, r5
 800b29e:	bf38      	it	cc
 800b2a0:	191b      	addcc	r3, r3, r4
 800b2a2:	e7f2      	b.n	800b28a <floor+0xba>
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	e7b4      	b.n	800b214 <floor+0x44>
 800b2aa:	bf00      	nop
 800b2ac:	f3af 8000 	nop.w
 800b2b0:	8800759c 	.word	0x8800759c
 800b2b4:	7e37e43c 	.word	0x7e37e43c
 800b2b8:	bff00000 	.word	0xbff00000
 800b2bc:	000fffff 	.word	0x000fffff

0800b2c0 <_init>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	bf00      	nop
 800b2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c6:	bc08      	pop	{r3}
 800b2c8:	469e      	mov	lr, r3
 800b2ca:	4770      	bx	lr

0800b2cc <_fini>:
 800b2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ce:	bf00      	nop
 800b2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2d2:	bc08      	pop	{r3}
 800b2d4:	469e      	mov	lr, r3
 800b2d6:	4770      	bx	lr
