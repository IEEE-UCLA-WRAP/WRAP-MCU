
WRAP_TX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a84  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009d30  08009d30  0000ad30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d70  08009d70  0000ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d78  08009d78  0000ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009d7c  08009d7c  0000ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009d80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000023c  24000010  08009d90  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400024c  08009d90  0000b24c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000175cb  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ae8  00000000  00000000  00022609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001288  00000000  00000000  000250f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e7a  00000000  00000000  00026380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031058  00000000  00000000  000271fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019892  00000000  00000000  00058252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001421c9  00000000  00000000  00071ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b3cad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ec8  00000000  00000000  001b3cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001b8bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08009d18 	.word	0x08009d18

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08009d18 	.word	0x08009d18

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fce2 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f828 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9e6 	bl	80009b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f9bc 	bl	8000968 <MX_DMA_Init>
  MX_TIM6_Init();
 80005f0:	f000 f938 	bl	8000864 <MX_TIM6_Init>
  MX_DAC1_Init();
 80005f4:	f000 f8e4 	bl	80007c0 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 80005f8:	f000 f914 	bl	8000824 <MX_OPAMP1_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f968 	bl	80008d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 8000600:	4808      	ldr	r0, [pc, #32]	@ (8000624 <main+0x48>)
 8000602:	f004 f98f 	bl	8004924 <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim6);
 8000606:	4808      	ldr	r0, [pc, #32]	@ (8000628 <main+0x4c>)
 8000608:	f007 f8de 	bl	80077c8 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800060c:	2100      	movs	r1, #0
 800060e:	4807      	ldr	r0, [pc, #28]	@ (800062c <main+0x50>)
 8000610:	f000 fe99 	bl	8001346 <HAL_DAC_Start>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg));
 8000614:	2202      	movs	r2, #2
 8000616:	4906      	ldr	r1, [pc, #24]	@ (8000630 <main+0x54>)
 8000618:	4806      	ldr	r0, [pc, #24]	@ (8000634 <main+0x58>)
 800061a:	f007 fb57 	bl	8007ccc <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	bf00      	nop
 8000620:	e7fd      	b.n	800061e <main+0x42>
 8000622:	bf00      	nop
 8000624:	240000b8 	.word	0x240000b8
 8000628:	240000ec 	.word	0x240000ec
 800062c:	2400002c 	.word	0x2400002c
 8000630:	24000244 	.word	0x24000244
 8000634:	24000138 	.word	0x24000138

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0a4      	sub	sp, #144	@ 0x90
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000642:	224c      	movs	r2, #76	@ 0x4c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f009 fb3a 	bl	8009cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000650:	2220      	movs	r2, #32
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f009 fb33 	bl	8009cc0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
 800066a:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800066c:	4b52      	ldr	r3, [pc, #328]	@ (80007b8 <SystemClock_Config+0x180>)
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000676:	2004      	movs	r0, #4
 8000678:	f004 f996 	bl	80049a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b4e      	ldr	r3, [pc, #312]	@ (80007bc <SystemClock_Config+0x184>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a4d      	ldr	r2, [pc, #308]	@ (80007bc <SystemClock_Config+0x184>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b4b      	ldr	r3, [pc, #300]	@ (80007bc <SystemClock_Config+0x184>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000698:	bf00      	nop
 800069a:	4b48      	ldr	r3, [pc, #288]	@ (80007bc <SystemClock_Config+0x184>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a6:	d1f8      	bne.n	800069a <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a8:	f004 f96e 	bl	8004988 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ac:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <SystemClock_Config+0x180>)
 80006ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80006b0:	4a41      	ldr	r2, [pc, #260]	@ (80007b8 <SystemClock_Config+0x180>)
 80006b2:	f023 0318 	bic.w	r3, r3, #24
 80006b6:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006b8:	232f      	movs	r3, #47	@ 0x2f
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c2:	2301      	movs	r3, #1
 80006c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006ca:	2340      	movs	r3, #64	@ 0x40
 80006cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	2302      	movs	r3, #2
 80006dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80006e2:	2346      	movs	r3, #70	@ 0x46
 80006e4:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f4:	230c      	movs	r3, #12
 80006f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f9a6 	bl	8004a5c <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000716:	f000 f9d5 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	233f      	movs	r3, #63	@ 0x3f
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072a:	2340      	movs	r3, #64	@ 0x40
 800072c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800072e:	2340      	movs	r3, #64	@ 0x40
 8000730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000738:	2340      	movs	r3, #64	@ 0x40
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800073c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000740:	2107      	movs	r1, #7
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fdbc 	bl	80052c0 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800074e:	f000 f9b9 	bl	8000ac4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000752:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000756:	2100      	movs	r1, #0
 8000758:	2000      	movs	r0, #0
 800075a:	f004 ff67 	bl	800562c <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800075e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000762:	2100      	movs	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f004 ff61 	bl	800562c <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <SystemClock_Config+0x180>)
 800076c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000770:	4a11      	ldr	r2, [pc, #68]	@ (80007b8 <SystemClock_Config+0x180>)
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <SystemClock_Config+0x180>)
 800077c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800078c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000790:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8000796:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800079c:	2322      	movs	r3, #34	@ 0x22
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80007a0:	2320      	movs	r3, #32
 80007a2:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 fdfb 	bl	80073a4 <HAL_RCCEx_CRSConfig>
}
 80007ae:	bf00      	nop
 80007b0:	3790      	adds	r7, #144	@ 0x90
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	58024400 	.word	0x58024400
 80007bc:	58024800 	.word	0x58024800

080007c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	@ 0x28
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2224      	movs	r2, #36	@ 0x24
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f009 fa77 	bl	8009cc0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_DAC1_Init+0x5c>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <MX_DAC1_Init+0x60>)
 80007d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007d8:	4810      	ldr	r0, [pc, #64]	@ (800081c <MX_DAC1_Init+0x5c>)
 80007da:	f000 fd92 	bl	8001302 <HAL_DAC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007e4:	f000 f96e 	bl	8000ac4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80007ec:	2316      	movs	r3, #22
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80007f0:	2302      	movs	r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80007f4:	2302      	movs	r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	@ (800081c <MX_DAC1_Init+0x5c>)
 8000804:	f000 fdf6 	bl	80013f4 <HAL_DAC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f959 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	@ 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2400002c 	.word	0x2400002c
 8000820:	40007400 	.word	0x40007400

08000824 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_OPAMP1_Init+0x38>)
 800082a:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <MX_OPAMP1_Init+0x3c>)
 800082c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_OPAMP1_Init+0x38>)
 8000830:	2260      	movs	r2, #96	@ 0x60
 8000832:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC_CH;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_OPAMP1_Init+0x38>)
 8000836:	2204      	movs	r2, #4
 8000838:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_OPAMP1_Init+0x38>)
 800083c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000840:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_OPAMP1_Init+0x38>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_OPAMP1_Init+0x38>)
 800084a:	f003 ffa3 	bl	8004794 <HAL_OPAMP_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_OPAMP1_Init+0x34>
  {
    Error_Handler();
 8000854:	f000 f936 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	240000b8 	.word	0x240000b8
 8000860:	40009000 	.word	0x40009000

08000864 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_TIM6_Init+0x64>)
 8000876:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <MX_TIM6_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_TIM6_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_TIM6_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_TIM6_Init+0x64>)
 8000888:	2237      	movs	r2, #55	@ 0x37
 800088a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_TIM6_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <MX_TIM6_Init+0x64>)
 8000894:	f006 ff40 	bl	8007718 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800089e:	f000 f911 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008a2:	2320      	movs	r3, #32
 80008a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_TIM6_Init+0x64>)
 80008b0:	f007 f8a0 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008ba:	f000 f903 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	240000ec 	.word	0x240000ec
 80008cc:	40001000 	.word	0x40001000

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_USART3_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800091a:	f007 f8f9 	bl	8007b10 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f8ce 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800092c:	f009 f8fd 	bl	8009b2a <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f8c5 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800093e:	f009 f932 	bl	8009ba6 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f8bc 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800094e:	f009 f8b3 	bl	8009ab8 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f8b4 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000138 	.word	0x24000138
 8000964:	40004800 	.word	0x40004800

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_DMA_Init+0x4c>)
 8000970:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000974:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <MX_DMA_Init+0x4c>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <MX_DMA_Init+0x4c>)
 8000980:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	200b      	movs	r0, #11
 8000992:	f000 fc82 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000996:	200b      	movs	r0, #11
 8000998:	f000 fc99 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	200c      	movs	r0, #12
 80009a2:	f000 fc7a 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009a6:	200c      	movs	r0, #12
 80009a8:	f000 fc91 	bl	80012ce <HAL_NVIC_EnableIRQ>

}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	58024400 	.word	0x58024400

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 80009d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 80009e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ec:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 80009ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009f2:	4a28      	ldr	r2, [pc, #160]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 80009fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 8000a0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a10:	4a20      	ldr	r2, [pc, #128]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 8000a1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 8000a2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a2e:	4a19      	ldr	r2, [pc, #100]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a38:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_GPIO_Init+0xdc>)
 8000a3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_GPIO_Init+0xe0>)
 8000a64:	f003 fce6 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_GPIO_Init+0xe4>)
 8000a86:	f003 fcd5 	bl	8004434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	58024400 	.word	0x58024400
 8000a98:	58020800 	.word	0x58020800
 8000a9c:	58020000 	.word	0x58020000

08000aa0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	// TODO: Call a function to generate the waveform corresponding to the new message!
	HAL_UART_Transmit(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg), 1);
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	2202      	movs	r2, #2
 8000aac:	4903      	ldr	r1, [pc, #12]	@ (8000abc <HAL_UART_RxCpltCallback+0x1c>)
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x20>)
 8000ab0:	f007 f87e 	bl	8007bb0 <HAL_UART_Transmit>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	24000244 	.word	0x24000244
 8000ac0:	24000138 	.word	0x24000138

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000adc:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ae8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	58024400 	.word	0x58024400

08000b04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a23      	ldr	r2, [pc, #140]	@ (8000ba0 <HAL_DAC_MspInit+0x9c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d13f      	bne.n	8000b96 <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b16:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <HAL_DAC_MspInit+0xa0>)
 8000b18:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ba4 <HAL_DAC_MspInit+0xa0>)
 8000b1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b22:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <HAL_DAC_MspInit+0xa0>)
 8000b28:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b36:	4a1d      	ldr	r2, [pc, #116]	@ (8000bac <HAL_DAC_MspInit+0xa8>)
 8000b38:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b3c:	2243      	movs	r2, #67	@ 0x43
 8000b3e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b42:	2240      	movs	r2, #64	@ 0x40
 8000b44:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b52:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b5a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b62:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b72:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000b7a:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b7c:	f000 fd7c 	bl	8001678 <HAL_DMA_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_DAC_MspInit+0x86>
    {
      Error_Handler();
 8000b86:	f7ff ff9d 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <HAL_DAC_MspInit+0xa4>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40007400 	.word	0x40007400
 8000ba4:	58024400 	.word	0x58024400
 8000ba8:	24000040 	.word	0x24000040
 8000bac:	40020010 	.word	0x40020010

08000bb0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <HAL_OPAMP_MspInit+0x80>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d129      	bne.n	8000c26 <HAL_OPAMP_MspInit+0x76>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_OPAMP_MspInit+0x84>)
 8000bd4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000bd8:	4a16      	ldr	r2, [pc, #88]	@ (8000c34 <HAL_OPAMP_MspInit+0x84>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_OPAMP_MspInit+0x84>)
 8000be4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <HAL_OPAMP_MspInit+0x84>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <HAL_OPAMP_MspInit+0x84>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_OPAMP_MspInit+0x84>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c12:	2303      	movs	r3, #3
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <HAL_OPAMP_MspInit+0x88>)
 8000c22:	f003 fc07 	bl	8004434 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40009000 	.word	0x40009000
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58020800 	.word	0x58020800

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <HAL_TIM_Base_MspInit+0x3c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10e      	bne.n	8000c6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_TIM_Base_MspInit+0x40>)
 8000c50:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c54:	4a09      	ldr	r2, [pc, #36]	@ (8000c7c <HAL_TIM_Base_MspInit+0x40>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <HAL_TIM_Base_MspInit+0x40>)
 8000c60:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c64:	f003 0310 	and.w	r3, r3, #16
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40001000 	.word	0x40001000
 8000c7c:	58024400 	.word	0x58024400

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ba      	sub	sp, #232	@ 0xe8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	22c0      	movs	r2, #192	@ 0xc0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f009 f80d 	bl	8009cc0 <memset>
  if(huart->Instance==USART3)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a42      	ldr	r2, [pc, #264]	@ (8000db4 <HAL_UART_MspInit+0x134>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d17d      	bne.n	8000dac <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb0:	f04f 0202 	mov.w	r2, #2
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 fef0 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cd2:	f7ff fef7 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd6:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000cd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cdc:	4a36      	ldr	r2, [pc, #216]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000cde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ce2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ce6:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000ce8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b30      	ldr	r3, [pc, #192]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000cf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d04:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4820      	ldr	r0, [pc, #128]	@ (8000dbc <HAL_UART_MspInit+0x13c>)
 8000d3a:	f003 fb7b 	bl	8004434 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d40:	4a20      	ldr	r2, [pc, #128]	@ (8000dc4 <HAL_UART_MspInit+0x144>)
 8000d42:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d46:	222d      	movs	r2, #45	@ 0x2d
 8000d48:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d70:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d7e:	4810      	ldr	r0, [pc, #64]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d80:	f000 fc7a 	bl	8001678 <HAL_DMA_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000d8a:	f7ff fe9b 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <HAL_UART_MspInit+0x140>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2027      	movs	r0, #39	@ 0x27
 8000da2:	f000 fa7a 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000da6:	2027      	movs	r0, #39	@ 0x27
 8000da8:	f000 fa91 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	37e8      	adds	r7, #232	@ 0xe8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40004800 	.word	0x40004800
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	58020c00 	.word	0x58020c00
 8000dc0:	240001cc 	.word	0x240001cc
 8000dc4:	40020028 	.word	0x40020028

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <NMI_Handler+0x4>

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <MemManage_Handler+0x4>

08000de0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <UsageFault_Handler+0x4>

08000df0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f935 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <DMA1_Stream0_IRQHandler+0x10>)
 8000e2e:	f001 ff7f 	bl	8002d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24000040 	.word	0x24000040

08000e3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <DMA1_Stream1_IRQHandler+0x10>)
 8000e42:	f001 ff75 	bl	8002d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	240001cc 	.word	0x240001cc

08000e50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <USART3_IRQHandler+0x10>)
 8000e56:	f006 ff85 	bl	8007d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	24000138 	.word	0x24000138

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e68:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <SystemInit+0xd0>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6e:	4a31      	ldr	r2, [pc, #196]	@ (8000f34 <SystemInit+0xd0>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e78:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <SystemInit+0xd4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 030f 	and.w	r3, r3, #15
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d807      	bhi.n	8000e94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e84:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <SystemInit+0xd4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 030f 	bic.w	r3, r3, #15
 8000e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8000f38 <SystemInit+0xd4>)
 8000e8e:	f043 0303 	orr.w	r3, r3, #3
 8000e92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e94:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <SystemInit+0xd8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a28      	ldr	r2, [pc, #160]	@ (8000f3c <SystemInit+0xd8>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea0:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <SystemInit+0xd8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <SystemInit+0xd8>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4924      	ldr	r1, [pc, #144]	@ (8000f3c <SystemInit+0xd8>)
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <SystemInit+0xdc>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <SystemInit+0xd4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <SystemInit+0xd4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 030f 	bic.w	r3, r3, #15
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <SystemInit+0xd4>)
 8000ec8:	f043 0303 	orr.w	r3, r3, #3
 8000ecc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <SystemInit+0xd8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <SystemInit+0xd8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <SystemInit+0xd8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <SystemInit+0xd8>)
 8000ee2:	4a18      	ldr	r2, [pc, #96]	@ (8000f44 <SystemInit+0xe0>)
 8000ee4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <SystemInit+0xd8>)
 8000ee8:	4a17      	ldr	r2, [pc, #92]	@ (8000f48 <SystemInit+0xe4>)
 8000eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <SystemInit+0xd8>)
 8000eee:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <SystemInit+0xe8>)
 8000ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <SystemInit+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <SystemInit+0xd8>)
 8000efa:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <SystemInit+0xe8>)
 8000efc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <SystemInit+0xd8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <SystemInit+0xd8>)
 8000f06:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <SystemInit+0xe8>)
 8000f08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <SystemInit+0xd8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <SystemInit+0xd8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a09      	ldr	r2, [pc, #36]	@ (8000f3c <SystemInit+0xd8>)
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <SystemInit+0xd8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <SystemInit+0xec>)
 8000f24:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	52002000 	.word	0x52002000
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f44:	02020200 	.word	0x02020200
 8000f48:	01ff0000 	.word	0x01ff0000
 8000f4c:	01010280 	.word	0x01010280
 8000f50:	52004000 	.word	0x52004000

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f58:	f7ff ff84 	bl	8000e64 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	@ (8000f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f008 fea5 	bl	8009cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fb29 	bl	80005dc <main>
  bx  lr
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f94:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f98:	08009d80 	.word	0x08009d80
  ldr r2, =_sbss
 8000f9c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fa0:	2400024c 	.word	0x2400024c

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f968 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fb4:	f004 fba4 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <HAL_Init+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	4913      	ldr	r1, [pc, #76]	@ (8001014 <HAL_Init+0x6c>)
 8000fc6:	5ccb      	ldrb	r3, [r1, r3]
 8000fc8:	f003 031f 	and.w	r3, r3, #31
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_Init+0x68>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <HAL_Init+0x6c>)
 8000fdc:	5cd3      	ldrb	r3, [r2, r3]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <HAL_Init+0x70>)
 8000fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fec:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <HAL_Init+0x74>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f814 	bl	8001020 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e002      	b.n	8001008 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001002:	f7ff fd65 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	58024400 	.word	0x58024400
 8001014:	08009d30 	.word	0x08009d30
 8001018:	24000004 	.word	0x24000004
 800101c:	24000000 	.word	0x24000000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_InitTick+0x60>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e021      	b.n	8001078 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001034:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <HAL_InitTick+0x64>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <HAL_InitTick+0x60>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f94d 	bl	80012ea <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f917 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_InitTick+0x68>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2400000c 	.word	0x2400000c
 8001084:	24000000 	.word	0x24000000
 8001088:	24000008 	.word	0x24000008

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2400000c 	.word	0x2400000c
 80010b0:	24000248 	.word	0x24000248

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	24000248 	.word	0x24000248

080010cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010d0:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <HAL_GetREVID+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0c1b      	lsrs	r3, r3, #16
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	5c001000 	.word	0x5c001000

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <__NVIC_SetPriorityGrouping+0x40>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	4313      	orrs	r3, r2
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <__NVIC_SetPriorityGrouping+0x40>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00
 8001128:	05fa0000 	.word	0x05fa0000

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4907      	ldr	r1, [pc, #28]	@ (8001180 <__NVIC_EnableIRQ+0x38>)
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	@ (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	@ (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	@ 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	@ 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff8e 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff29 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff40 	bl	800112c <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff90 	bl	80011d8 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5f 	bl	8001184 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff33 	bl	8001148 <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa4 	bl	8001240 <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e014      	b.n	800133e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	791b      	ldrb	r3, [r3, #4]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fbed 	bl	8000b04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2202      	movs	r2, #2
 800132e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e046      	b.n	80013e8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	795b      	ldrb	r3, [r3, #5]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_DAC_Start+0x20>
 8001362:	2302      	movs	r3, #2
 8001364:	e040      	b.n	80013e8 <HAL_DAC_Start+0xa2>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2202      	movs	r2, #2
 8001370:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2201      	movs	r2, #1
 8001380:	409a      	lsls	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10f      	bne.n	80013b0 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800139a:	2b02      	cmp	r3, #2
 800139c:	d11d      	bne.n	80013da <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	e014      	b.n	80013da <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2102      	movs	r1, #2
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d107      	bne.n	80013da <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0202 	orr.w	r2, r2, #2
 80013d8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_DAC_ConfigChannel+0x1e>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e12a      	b.n	800166c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	795b      	ldrb	r3, [r3, #5]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_DAC_ConfigChannel+0x2e>
 800141e:	2302      	movs	r3, #2
 8001420:	e124      	b.n	800166c <HAL_DAC_ConfigChannel+0x278>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2202      	movs	r2, #2
 800142c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b04      	cmp	r3, #4
 8001434:	d17a      	bne.n	800152c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001436:	f7ff fe3d 	bl	80010b4 <HAL_GetTick>
 800143a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d13d      	bne.n	80014be <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001442:	e018      	b.n	8001476 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001444:	f7ff fe36 	bl	80010b4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d911      	bls.n	8001476 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001458:	4b86      	ldr	r3, [pc, #536]	@ (8001674 <HAL_DAC_ConfigChannel+0x280>)
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f043 0208 	orr.w	r2, r3, #8
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2203      	movs	r2, #3
 8001470:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e0fa      	b.n	800166c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800147c:	4b7d      	ldr	r3, [pc, #500]	@ (8001674 <HAL_DAC_ConfigChannel+0x280>)
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1df      	bne.n	8001444 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	6992      	ldr	r2, [r2, #24]
 800148c:	641a      	str	r2, [r3, #64]	@ 0x40
 800148e:	e020      	b.n	80014d2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001490:	f7ff fe10 	bl	80010b4 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d90f      	bls.n	80014be <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da0a      	bge.n	80014be <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f043 0208 	orr.w	r2, r3, #8
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2203      	movs	r2, #3
 80014b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0d6      	b.n	800166c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dbe3      	blt.n	8001490 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	6992      	ldr	r2, [r2, #24]
 80014d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	ea02 0103 	and.w	r1, r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	409a      	lsls	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	21ff      	movs	r1, #255	@ 0xff
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	ea02 0103 	and.w	r1, r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d11d      	bne.n	8001570 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	221f      	movs	r2, #31
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001576:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
 8001598:	e00f      	b.n	80015ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d102      	bne.n	80015a8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80015a2:	2301      	movs	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a6:	e008      	b.n	80015ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b4:	e001      	b.n	80015ba <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c6:	4313      	orrs	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43da      	mvns	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	400a      	ands	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	22c0      	movs	r2, #192	@ 0xc0
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001668:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800166c:	4618      	mov	r0, r3
 800166e:	3728      	adds	r7, #40	@ 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20008000 	.word	0x20008000

08001678 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff fd18 	bl	80010b4 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e37d      	b.n	8001d8c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a66      	ldr	r2, [pc, #408]	@ (8001830 <HAL_DMA_Init+0x1b8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d04a      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a65      	ldr	r2, [pc, #404]	@ (8001834 <HAL_DMA_Init+0x1bc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d045      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a63      	ldr	r2, [pc, #396]	@ (8001838 <HAL_DMA_Init+0x1c0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d040      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a62      	ldr	r2, [pc, #392]	@ (800183c <HAL_DMA_Init+0x1c4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d03b      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a60      	ldr	r2, [pc, #384]	@ (8001840 <HAL_DMA_Init+0x1c8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d036      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001844 <HAL_DMA_Init+0x1cc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d031      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001848 <HAL_DMA_Init+0x1d0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d02c      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5c      	ldr	r2, [pc, #368]	@ (800184c <HAL_DMA_Init+0x1d4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d027      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001850 <HAL_DMA_Init+0x1d8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d022      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a59      	ldr	r2, [pc, #356]	@ (8001854 <HAL_DMA_Init+0x1dc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d01d      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a57      	ldr	r2, [pc, #348]	@ (8001858 <HAL_DMA_Init+0x1e0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d018      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a56      	ldr	r2, [pc, #344]	@ (800185c <HAL_DMA_Init+0x1e4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a54      	ldr	r2, [pc, #336]	@ (8001860 <HAL_DMA_Init+0x1e8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00e      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a53      	ldr	r2, [pc, #332]	@ (8001864 <HAL_DMA_Init+0x1ec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d009      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a51      	ldr	r2, [pc, #324]	@ (8001868 <HAL_DMA_Init+0x1f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d004      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a50      	ldr	r2, [pc, #320]	@ (800186c <HAL_DMA_Init+0x1f4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_DMA_Init+0xbc>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_DMA_Init+0xbe>
 8001734:	2300      	movs	r3, #0
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 813c 	beq.w	80019b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a37      	ldr	r2, [pc, #220]	@ (8001830 <HAL_DMA_Init+0x1b8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d04a      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a36      	ldr	r2, [pc, #216]	@ (8001834 <HAL_DMA_Init+0x1bc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d045      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <HAL_DMA_Init+0x1c0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d040      	beq.n	80017ec <HAL_DMA_Init+0x174>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a33      	ldr	r2, [pc, #204]	@ (800183c <HAL_DMA_Init+0x1c4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d03b      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <HAL_DMA_Init+0x1c8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d036      	beq.n	80017ec <HAL_DMA_Init+0x174>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a30      	ldr	r2, [pc, #192]	@ (8001844 <HAL_DMA_Init+0x1cc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d031      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2e      	ldr	r2, [pc, #184]	@ (8001848 <HAL_DMA_Init+0x1d0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d02c      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2d      	ldr	r2, [pc, #180]	@ (800184c <HAL_DMA_Init+0x1d4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d027      	beq.n	80017ec <HAL_DMA_Init+0x174>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001850 <HAL_DMA_Init+0x1d8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d022      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001854 <HAL_DMA_Init+0x1dc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d01d      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <HAL_DMA_Init+0x1e0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d018      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a27      	ldr	r2, [pc, #156]	@ (800185c <HAL_DMA_Init+0x1e4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d013      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a25      	ldr	r2, [pc, #148]	@ (8001860 <HAL_DMA_Init+0x1e8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00e      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a24      	ldr	r2, [pc, #144]	@ (8001864 <HAL_DMA_Init+0x1ec>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d009      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <HAL_DMA_Init+0x1f0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d004      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a21      	ldr	r2, [pc, #132]	@ (800186c <HAL_DMA_Init+0x1f4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d108      	bne.n	80017fe <HAL_DMA_Init+0x186>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e007      	b.n	800180e <HAL_DMA_Init+0x196>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800180e:	e02f      	b.n	8001870 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001810:	f7ff fc50 	bl	80010b4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b05      	cmp	r3, #5
 800181c:	d928      	bls.n	8001870 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e2ad      	b.n	8001d8c <HAL_DMA_Init+0x714>
 8001830:	40020010 	.word	0x40020010
 8001834:	40020028 	.word	0x40020028
 8001838:	40020040 	.word	0x40020040
 800183c:	40020058 	.word	0x40020058
 8001840:	40020070 	.word	0x40020070
 8001844:	40020088 	.word	0x40020088
 8001848:	400200a0 	.word	0x400200a0
 800184c:	400200b8 	.word	0x400200b8
 8001850:	40020410 	.word	0x40020410
 8001854:	40020428 	.word	0x40020428
 8001858:	40020440 	.word	0x40020440
 800185c:	40020458 	.word	0x40020458
 8001860:	40020470 	.word	0x40020470
 8001864:	40020488 	.word	0x40020488
 8001868:	400204a0 	.word	0x400204a0
 800186c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1c8      	bne.n	8001810 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4b73      	ldr	r3, [pc, #460]	@ (8001a58 <HAL_DMA_Init+0x3e0>)
 800188a:	4013      	ands	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001896:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	4313      	orrs	r3, r2
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b28      	cmp	r3, #40	@ 0x28
 80018da:	d903      	bls.n	80018e4 <HAL_DMA_Init+0x26c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80018e2:	d91f      	bls.n	8001924 <HAL_DMA_Init+0x2ac>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80018ea:	d903      	bls.n	80018f4 <HAL_DMA_Init+0x27c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b42      	cmp	r3, #66	@ 0x42
 80018f2:	d917      	bls.n	8001924 <HAL_DMA_Init+0x2ac>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b46      	cmp	r3, #70	@ 0x46
 80018fa:	d903      	bls.n	8001904 <HAL_DMA_Init+0x28c>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b48      	cmp	r3, #72	@ 0x48
 8001902:	d90f      	bls.n	8001924 <HAL_DMA_Init+0x2ac>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b4e      	cmp	r3, #78	@ 0x4e
 800190a:	d903      	bls.n	8001914 <HAL_DMA_Init+0x29c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b52      	cmp	r3, #82	@ 0x52
 8001912:	d907      	bls.n	8001924 <HAL_DMA_Init+0x2ac>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b73      	cmp	r3, #115	@ 0x73
 800191a:	d905      	bls.n	8001928 <HAL_DMA_Init+0x2b0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b77      	cmp	r3, #119	@ 0x77
 8001922:	d801      	bhi.n	8001928 <HAL_DMA_Init+0x2b0>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_DMA_Init+0x2b2>
 8001928:	2300      	movs	r3, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001934:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f023 0307 	bic.w	r3, r3, #7
 800194c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4313      	orrs	r3, r2
 8001956:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	2b04      	cmp	r3, #4
 800195e:	d117      	bne.n	8001990 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00e      	beq.n	8001990 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f002 fbd4 	bl	8004120 <DMA_CheckFifoParam>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d008      	beq.n	8001990 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2240      	movs	r2, #64	@ 0x40
 8001982:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e1fd      	b.n	8001d8c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f002 fb0f 	bl	8003fbc <DMA_CalcBaseAndBitshift>
 800199e:	4603      	mov	r3, r0
 80019a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	223f      	movs	r2, #63	@ 0x3f
 80019ac:	409a      	lsls	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	e0fd      	b.n	8001bb0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a28      	ldr	r2, [pc, #160]	@ (8001a5c <HAL_DMA_Init+0x3e4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d04a      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a27      	ldr	r2, [pc, #156]	@ (8001a60 <HAL_DMA_Init+0x3e8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d045      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a25      	ldr	r2, [pc, #148]	@ (8001a64 <HAL_DMA_Init+0x3ec>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d040      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a24      	ldr	r2, [pc, #144]	@ (8001a68 <HAL_DMA_Init+0x3f0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d03b      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a22      	ldr	r2, [pc, #136]	@ (8001a6c <HAL_DMA_Init+0x3f4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d036      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <HAL_DMA_Init+0x3f8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d031      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a74 <HAL_DMA_Init+0x3fc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d02c      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001a78 <HAL_DMA_Init+0x400>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d027      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <HAL_DMA_Init+0x404>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d022      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1b      	ldr	r2, [pc, #108]	@ (8001a80 <HAL_DMA_Init+0x408>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d01d      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	@ (8001a84 <HAL_DMA_Init+0x40c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d018      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a18      	ldr	r2, [pc, #96]	@ (8001a88 <HAL_DMA_Init+0x410>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d013      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a16      	ldr	r2, [pc, #88]	@ (8001a8c <HAL_DMA_Init+0x414>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00e      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	@ (8001a90 <HAL_DMA_Init+0x418>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d009      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <HAL_DMA_Init+0x41c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d004      	beq.n	8001a54 <HAL_DMA_Init+0x3dc>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <HAL_DMA_Init+0x420>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d123      	bne.n	8001a9c <HAL_DMA_Init+0x424>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e022      	b.n	8001a9e <HAL_DMA_Init+0x426>
 8001a58:	fe10803f 	.word	0xfe10803f
 8001a5c:	48022c08 	.word	0x48022c08
 8001a60:	48022c1c 	.word	0x48022c1c
 8001a64:	48022c30 	.word	0x48022c30
 8001a68:	48022c44 	.word	0x48022c44
 8001a6c:	48022c58 	.word	0x48022c58
 8001a70:	48022c6c 	.word	0x48022c6c
 8001a74:	48022c80 	.word	0x48022c80
 8001a78:	48022c94 	.word	0x48022c94
 8001a7c:	58025408 	.word	0x58025408
 8001a80:	5802541c 	.word	0x5802541c
 8001a84:	58025430 	.word	0x58025430
 8001a88:	58025444 	.word	0x58025444
 8001a8c:	58025458 	.word	0x58025458
 8001a90:	5802546c 	.word	0x5802546c
 8001a94:	58025480 	.word	0x58025480
 8001a98:	58025494 	.word	0x58025494
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d07d      	beq.n	8001b9e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7f      	ldr	r2, [pc, #508]	@ (8001ca4 <HAL_DMA_Init+0x62c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d021      	beq.n	8001af0 <HAL_DMA_Init+0x478>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ca8 <HAL_DMA_Init+0x630>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01c      	beq.n	8001af0 <HAL_DMA_Init+0x478>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7c      	ldr	r2, [pc, #496]	@ (8001cac <HAL_DMA_Init+0x634>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d017      	beq.n	8001af0 <HAL_DMA_Init+0x478>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a7a      	ldr	r2, [pc, #488]	@ (8001cb0 <HAL_DMA_Init+0x638>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d012      	beq.n	8001af0 <HAL_DMA_Init+0x478>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a79      	ldr	r2, [pc, #484]	@ (8001cb4 <HAL_DMA_Init+0x63c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00d      	beq.n	8001af0 <HAL_DMA_Init+0x478>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a77      	ldr	r2, [pc, #476]	@ (8001cb8 <HAL_DMA_Init+0x640>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d008      	beq.n	8001af0 <HAL_DMA_Init+0x478>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a76      	ldr	r2, [pc, #472]	@ (8001cbc <HAL_DMA_Init+0x644>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d003      	beq.n	8001af0 <HAL_DMA_Init+0x478>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a74      	ldr	r2, [pc, #464]	@ (8001cc0 <HAL_DMA_Init+0x648>)
 8001aee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc4 <HAL_DMA_Init+0x64c>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b40      	cmp	r3, #64	@ 0x40
 8001b16:	d008      	beq.n	8001b2a <HAL_DMA_Init+0x4b2>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b80      	cmp	r3, #128	@ 0x80
 8001b1e:	d102      	bne.n	8001b26 <HAL_DMA_Init+0x4ae>
 8001b20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b24:	e002      	b.n	8001b2c <HAL_DMA_Init+0x4b4>
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_DMA_Init+0x4b4>
 8001b2a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68d2      	ldr	r2, [r2, #12]
 8001b30:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b32:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b3a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b42:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b4a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b52:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b5a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b55      	ldr	r3, [pc, #340]	@ (8001cc8 <HAL_DMA_Init+0x650>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4a55      	ldr	r2, [pc, #340]	@ (8001ccc <HAL_DMA_Init+0x654>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	009a      	lsls	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f002 fa1a 	bl	8003fbc <DMA_CalcBaseAndBitshift>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2201      	movs	r2, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	e008      	b.n	8001bb0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2240      	movs	r2, #64	@ 0x40
 8001ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0ed      	b.n	8001d8c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a46      	ldr	r2, [pc, #280]	@ (8001cd0 <HAL_DMA_Init+0x658>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d072      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a45      	ldr	r2, [pc, #276]	@ (8001cd4 <HAL_DMA_Init+0x65c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d06d      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a43      	ldr	r2, [pc, #268]	@ (8001cd8 <HAL_DMA_Init+0x660>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d068      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a42      	ldr	r2, [pc, #264]	@ (8001cdc <HAL_DMA_Init+0x664>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d063      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a40      	ldr	r2, [pc, #256]	@ (8001ce0 <HAL_DMA_Init+0x668>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d05e      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce4 <HAL_DMA_Init+0x66c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d059      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce8 <HAL_DMA_Init+0x670>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d054      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a3c      	ldr	r2, [pc, #240]	@ (8001cec <HAL_DMA_Init+0x674>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d04f      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf0 <HAL_DMA_Init+0x678>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04a      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a39      	ldr	r2, [pc, #228]	@ (8001cf4 <HAL_DMA_Init+0x67c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d045      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a37      	ldr	r2, [pc, #220]	@ (8001cf8 <HAL_DMA_Init+0x680>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d040      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a36      	ldr	r2, [pc, #216]	@ (8001cfc <HAL_DMA_Init+0x684>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d03b      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a34      	ldr	r2, [pc, #208]	@ (8001d00 <HAL_DMA_Init+0x688>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d036      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a33      	ldr	r2, [pc, #204]	@ (8001d04 <HAL_DMA_Init+0x68c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d031      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a31      	ldr	r2, [pc, #196]	@ (8001d08 <HAL_DMA_Init+0x690>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02c      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <HAL_DMA_Init+0x694>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d027      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <HAL_DMA_Init+0x62c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <HAL_DMA_Init+0x630>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d01d      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a10      	ldr	r2, [pc, #64]	@ (8001cac <HAL_DMA_Init+0x634>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d018      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb0 <HAL_DMA_Init+0x638>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <HAL_DMA_Init+0x63c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <HAL_DMA_Init+0x640>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_DMA_Init+0x644>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Init+0x628>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_DMA_Init+0x648>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d137      	bne.n	8001d10 <HAL_DMA_Init+0x698>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e036      	b.n	8001d12 <HAL_DMA_Init+0x69a>
 8001ca4:	58025408 	.word	0x58025408
 8001ca8:	5802541c 	.word	0x5802541c
 8001cac:	58025430 	.word	0x58025430
 8001cb0:	58025444 	.word	0x58025444
 8001cb4:	58025458 	.word	0x58025458
 8001cb8:	5802546c 	.word	0x5802546c
 8001cbc:	58025480 	.word	0x58025480
 8001cc0:	58025494 	.word	0x58025494
 8001cc4:	fffe000f 	.word	0xfffe000f
 8001cc8:	a7fdabf8 	.word	0xa7fdabf8
 8001ccc:	cccccccd 	.word	0xcccccccd
 8001cd0:	40020010 	.word	0x40020010
 8001cd4:	40020028 	.word	0x40020028
 8001cd8:	40020040 	.word	0x40020040
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	40020070 	.word	0x40020070
 8001ce4:	40020088 	.word	0x40020088
 8001ce8:	400200a0 	.word	0x400200a0
 8001cec:	400200b8 	.word	0x400200b8
 8001cf0:	40020410 	.word	0x40020410
 8001cf4:	40020428 	.word	0x40020428
 8001cf8:	40020440 	.word	0x40020440
 8001cfc:	40020458 	.word	0x40020458
 8001d00:	40020470 	.word	0x40020470
 8001d04:	40020488 	.word	0x40020488
 8001d08:	400204a0 	.word	0x400204a0
 8001d0c:	400204b8 	.word	0x400204b8
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d032      	beq.n	8001d7c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f002 fa7e 	bl	8004218 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b80      	cmp	r3, #128	@ 0x80
 8001d22:	d102      	bne.n	8001d2a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d3e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <HAL_DMA_Init+0x6f2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d80c      	bhi.n	8001d6a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f002 fafb 	bl	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	e008      	b.n	8001d7c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e226      	b.n	80021fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_DMA_Start_IT+0x2a>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e21f      	b.n	80021fe <HAL_DMA_Start_IT+0x46a>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 820a 	bne.w	80021e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a68      	ldr	r2, [pc, #416]	@ (8001f88 <HAL_DMA_Start_IT+0x1f4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d04a      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a66      	ldr	r2, [pc, #408]	@ (8001f8c <HAL_DMA_Start_IT+0x1f8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d045      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a65      	ldr	r2, [pc, #404]	@ (8001f90 <HAL_DMA_Start_IT+0x1fc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d040      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a63      	ldr	r2, [pc, #396]	@ (8001f94 <HAL_DMA_Start_IT+0x200>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d03b      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a62      	ldr	r2, [pc, #392]	@ (8001f98 <HAL_DMA_Start_IT+0x204>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d036      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a60      	ldr	r2, [pc, #384]	@ (8001f9c <HAL_DMA_Start_IT+0x208>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d031      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5f      	ldr	r2, [pc, #380]	@ (8001fa0 <HAL_DMA_Start_IT+0x20c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d02c      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa4 <HAL_DMA_Start_IT+0x210>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d027      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5c      	ldr	r2, [pc, #368]	@ (8001fa8 <HAL_DMA_Start_IT+0x214>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d022      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a5a      	ldr	r2, [pc, #360]	@ (8001fac <HAL_DMA_Start_IT+0x218>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01d      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a59      	ldr	r2, [pc, #356]	@ (8001fb0 <HAL_DMA_Start_IT+0x21c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d018      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a57      	ldr	r2, [pc, #348]	@ (8001fb4 <HAL_DMA_Start_IT+0x220>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a56      	ldr	r2, [pc, #344]	@ (8001fb8 <HAL_DMA_Start_IT+0x224>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00e      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a54      	ldr	r2, [pc, #336]	@ (8001fbc <HAL_DMA_Start_IT+0x228>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a53      	ldr	r2, [pc, #332]	@ (8001fc0 <HAL_DMA_Start_IT+0x22c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d004      	beq.n	8001e82 <HAL_DMA_Start_IT+0xee>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a51      	ldr	r2, [pc, #324]	@ (8001fc4 <HAL_DMA_Start_IT+0x230>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <HAL_DMA_Start_IT+0x100>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e007      	b.n	8001ea4 <HAL_DMA_Start_IT+0x110>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f001 fea2 	bl	8003bf4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a34      	ldr	r2, [pc, #208]	@ (8001f88 <HAL_DMA_Start_IT+0x1f4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d04a      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a33      	ldr	r2, [pc, #204]	@ (8001f8c <HAL_DMA_Start_IT+0x1f8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d045      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a31      	ldr	r2, [pc, #196]	@ (8001f90 <HAL_DMA_Start_IT+0x1fc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d040      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a30      	ldr	r2, [pc, #192]	@ (8001f94 <HAL_DMA_Start_IT+0x200>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d03b      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2e      	ldr	r2, [pc, #184]	@ (8001f98 <HAL_DMA_Start_IT+0x204>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d036      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f9c <HAL_DMA_Start_IT+0x208>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d031      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa0 <HAL_DMA_Start_IT+0x20c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02c      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa4 <HAL_DMA_Start_IT+0x210>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d027      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a28      	ldr	r2, [pc, #160]	@ (8001fa8 <HAL_DMA_Start_IT+0x214>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d022      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a27      	ldr	r2, [pc, #156]	@ (8001fac <HAL_DMA_Start_IT+0x218>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d01d      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a25      	ldr	r2, [pc, #148]	@ (8001fb0 <HAL_DMA_Start_IT+0x21c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d018      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a24      	ldr	r2, [pc, #144]	@ (8001fb4 <HAL_DMA_Start_IT+0x220>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a22      	ldr	r2, [pc, #136]	@ (8001fb8 <HAL_DMA_Start_IT+0x224>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00e      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <HAL_DMA_Start_IT+0x228>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc0 <HAL_DMA_Start_IT+0x22c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_DMA_Start_IT+0x1bc>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <HAL_DMA_Start_IT+0x230>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Start_IT+0x1c0>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_DMA_Start_IT+0x1c2>
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d036      	beq.n	8001fc8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 021e 	bic.w	r2, r3, #30
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0216 	orr.w	r2, r2, #22
 8001f6c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d03e      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0208 	orr.w	r2, r2, #8
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e035      	b.n	8001ff4 <HAL_DMA_Start_IT+0x260>
 8001f88:	40020010 	.word	0x40020010
 8001f8c:	40020028 	.word	0x40020028
 8001f90:	40020040 	.word	0x40020040
 8001f94:	40020058 	.word	0x40020058
 8001f98:	40020070 	.word	0x40020070
 8001f9c:	40020088 	.word	0x40020088
 8001fa0:	400200a0 	.word	0x400200a0
 8001fa4:	400200b8 	.word	0x400200b8
 8001fa8:	40020410 	.word	0x40020410
 8001fac:	40020428 	.word	0x40020428
 8001fb0:	40020440 	.word	0x40020440
 8001fb4:	40020458 	.word	0x40020458
 8001fb8:	40020470 	.word	0x40020470
 8001fbc:	40020488 	.word	0x40020488
 8001fc0:	400204a0 	.word	0x400204a0
 8001fc4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 020e 	bic.w	r2, r3, #14
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 020a 	orr.w	r2, r2, #10
 8001fda:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0204 	orr.w	r2, r2, #4
 8001ff2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a83      	ldr	r2, [pc, #524]	@ (8002208 <HAL_DMA_Start_IT+0x474>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d072      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a82      	ldr	r2, [pc, #520]	@ (800220c <HAL_DMA_Start_IT+0x478>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d06d      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a80      	ldr	r2, [pc, #512]	@ (8002210 <HAL_DMA_Start_IT+0x47c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d068      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7f      	ldr	r2, [pc, #508]	@ (8002214 <HAL_DMA_Start_IT+0x480>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d063      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a7d      	ldr	r2, [pc, #500]	@ (8002218 <HAL_DMA_Start_IT+0x484>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d05e      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7c      	ldr	r2, [pc, #496]	@ (800221c <HAL_DMA_Start_IT+0x488>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d059      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a7a      	ldr	r2, [pc, #488]	@ (8002220 <HAL_DMA_Start_IT+0x48c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d054      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a79      	ldr	r2, [pc, #484]	@ (8002224 <HAL_DMA_Start_IT+0x490>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d04f      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a77      	ldr	r2, [pc, #476]	@ (8002228 <HAL_DMA_Start_IT+0x494>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d04a      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a76      	ldr	r2, [pc, #472]	@ (800222c <HAL_DMA_Start_IT+0x498>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d045      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a74      	ldr	r2, [pc, #464]	@ (8002230 <HAL_DMA_Start_IT+0x49c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d040      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a73      	ldr	r2, [pc, #460]	@ (8002234 <HAL_DMA_Start_IT+0x4a0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d03b      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a71      	ldr	r2, [pc, #452]	@ (8002238 <HAL_DMA_Start_IT+0x4a4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d036      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a70      	ldr	r2, [pc, #448]	@ (800223c <HAL_DMA_Start_IT+0x4a8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d031      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_DMA_Start_IT+0x4ac>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02c      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6d      	ldr	r2, [pc, #436]	@ (8002244 <HAL_DMA_Start_IT+0x4b0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d027      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6b      	ldr	r2, [pc, #428]	@ (8002248 <HAL_DMA_Start_IT+0x4b4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d022      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6a      	ldr	r2, [pc, #424]	@ (800224c <HAL_DMA_Start_IT+0x4b8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01d      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a68      	ldr	r2, [pc, #416]	@ (8002250 <HAL_DMA_Start_IT+0x4bc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d018      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a67      	ldr	r2, [pc, #412]	@ (8002254 <HAL_DMA_Start_IT+0x4c0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a65      	ldr	r2, [pc, #404]	@ (8002258 <HAL_DMA_Start_IT+0x4c4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00e      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a64      	ldr	r2, [pc, #400]	@ (800225c <HAL_DMA_Start_IT+0x4c8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a62      	ldr	r2, [pc, #392]	@ (8002260 <HAL_DMA_Start_IT+0x4cc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_Start_IT+0x350>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a61      	ldr	r2, [pc, #388]	@ (8002264 <HAL_DMA_Start_IT+0x4d0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_DMA_Start_IT+0x354>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_DMA_Start_IT+0x356>
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01a      	beq.n	8002124 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800210a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800211e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002122:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a37      	ldr	r2, [pc, #220]	@ (8002208 <HAL_DMA_Start_IT+0x474>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d04a      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a36      	ldr	r2, [pc, #216]	@ (800220c <HAL_DMA_Start_IT+0x478>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d045      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a34      	ldr	r2, [pc, #208]	@ (8002210 <HAL_DMA_Start_IT+0x47c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a33      	ldr	r2, [pc, #204]	@ (8002214 <HAL_DMA_Start_IT+0x480>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d03b      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a31      	ldr	r2, [pc, #196]	@ (8002218 <HAL_DMA_Start_IT+0x484>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d036      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a30      	ldr	r2, [pc, #192]	@ (800221c <HAL_DMA_Start_IT+0x488>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2e      	ldr	r2, [pc, #184]	@ (8002220 <HAL_DMA_Start_IT+0x48c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02c      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2d      	ldr	r2, [pc, #180]	@ (8002224 <HAL_DMA_Start_IT+0x490>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d027      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2b      	ldr	r2, [pc, #172]	@ (8002228 <HAL_DMA_Start_IT+0x494>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d022      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <HAL_DMA_Start_IT+0x498>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d01d      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a28      	ldr	r2, [pc, #160]	@ (8002230 <HAL_DMA_Start_IT+0x49c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d018      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a27      	ldr	r2, [pc, #156]	@ (8002234 <HAL_DMA_Start_IT+0x4a0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a25      	ldr	r2, [pc, #148]	@ (8002238 <HAL_DMA_Start_IT+0x4a4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00e      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a24      	ldr	r2, [pc, #144]	@ (800223c <HAL_DMA_Start_IT+0x4a8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a22      	ldr	r2, [pc, #136]	@ (8002240 <HAL_DMA_Start_IT+0x4ac>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_DMA_Start_IT+0x430>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a21      	ldr	r2, [pc, #132]	@ (8002244 <HAL_DMA_Start_IT+0x4b0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <HAL_DMA_Start_IT+0x442>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e012      	b.n	80021fc <HAL_DMA_Start_IT+0x468>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e009      	b.n	80021fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40020010 	.word	0x40020010
 800220c:	40020028 	.word	0x40020028
 8002210:	40020040 	.word	0x40020040
 8002214:	40020058 	.word	0x40020058
 8002218:	40020070 	.word	0x40020070
 800221c:	40020088 	.word	0x40020088
 8002220:	400200a0 	.word	0x400200a0
 8002224:	400200b8 	.word	0x400200b8
 8002228:	40020410 	.word	0x40020410
 800222c:	40020428 	.word	0x40020428
 8002230:	40020440 	.word	0x40020440
 8002234:	40020458 	.word	0x40020458
 8002238:	40020470 	.word	0x40020470
 800223c:	40020488 	.word	0x40020488
 8002240:	400204a0 	.word	0x400204a0
 8002244:	400204b8 	.word	0x400204b8
 8002248:	58025408 	.word	0x58025408
 800224c:	5802541c 	.word	0x5802541c
 8002250:	58025430 	.word	0x58025430
 8002254:	58025444 	.word	0x58025444
 8002258:	58025458 	.word	0x58025458
 800225c:	5802546c 	.word	0x5802546c
 8002260:	58025480 	.word	0x58025480
 8002264:	58025494 	.word	0x58025494

08002268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002270:	f7fe ff20 	bl	80010b4 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e2dc      	b.n	800283a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d008      	beq.n	800229e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2280      	movs	r2, #128	@ 0x80
 8002290:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e2cd      	b.n	800283a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a76      	ldr	r2, [pc, #472]	@ (800247c <HAL_DMA_Abort+0x214>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d04a      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a74      	ldr	r2, [pc, #464]	@ (8002480 <HAL_DMA_Abort+0x218>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d045      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a73      	ldr	r2, [pc, #460]	@ (8002484 <HAL_DMA_Abort+0x21c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d040      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a71      	ldr	r2, [pc, #452]	@ (8002488 <HAL_DMA_Abort+0x220>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d03b      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a70      	ldr	r2, [pc, #448]	@ (800248c <HAL_DMA_Abort+0x224>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d036      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002490 <HAL_DMA_Abort+0x228>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d031      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6d      	ldr	r2, [pc, #436]	@ (8002494 <HAL_DMA_Abort+0x22c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d02c      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002498 <HAL_DMA_Abort+0x230>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d027      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6a      	ldr	r2, [pc, #424]	@ (800249c <HAL_DMA_Abort+0x234>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d022      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a68      	ldr	r2, [pc, #416]	@ (80024a0 <HAL_DMA_Abort+0x238>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01d      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a67      	ldr	r2, [pc, #412]	@ (80024a4 <HAL_DMA_Abort+0x23c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d018      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a65      	ldr	r2, [pc, #404]	@ (80024a8 <HAL_DMA_Abort+0x240>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a64      	ldr	r2, [pc, #400]	@ (80024ac <HAL_DMA_Abort+0x244>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00e      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a62      	ldr	r2, [pc, #392]	@ (80024b0 <HAL_DMA_Abort+0x248>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a61      	ldr	r2, [pc, #388]	@ (80024b4 <HAL_DMA_Abort+0x24c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d004      	beq.n	800233e <HAL_DMA_Abort+0xd6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5f      	ldr	r2, [pc, #380]	@ (80024b8 <HAL_DMA_Abort+0x250>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_DMA_Abort+0xda>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_DMA_Abort+0xdc>
 8002342:	2300      	movs	r3, #0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 021e 	bic.w	r2, r2, #30
 8002356:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002366:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e00a      	b.n	8002386 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 020e 	bic.w	r2, r2, #14
 800237e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3c      	ldr	r2, [pc, #240]	@ (800247c <HAL_DMA_Abort+0x214>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d072      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a3a      	ldr	r2, [pc, #232]	@ (8002480 <HAL_DMA_Abort+0x218>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d06d      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a39      	ldr	r2, [pc, #228]	@ (8002484 <HAL_DMA_Abort+0x21c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d068      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a37      	ldr	r2, [pc, #220]	@ (8002488 <HAL_DMA_Abort+0x220>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d063      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a36      	ldr	r2, [pc, #216]	@ (800248c <HAL_DMA_Abort+0x224>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d05e      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a34      	ldr	r2, [pc, #208]	@ (8002490 <HAL_DMA_Abort+0x228>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d059      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a33      	ldr	r2, [pc, #204]	@ (8002494 <HAL_DMA_Abort+0x22c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d054      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a31      	ldr	r2, [pc, #196]	@ (8002498 <HAL_DMA_Abort+0x230>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d04f      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a30      	ldr	r2, [pc, #192]	@ (800249c <HAL_DMA_Abort+0x234>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d04a      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a2e      	ldr	r2, [pc, #184]	@ (80024a0 <HAL_DMA_Abort+0x238>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d045      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a2d      	ldr	r2, [pc, #180]	@ (80024a4 <HAL_DMA_Abort+0x23c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d040      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2b      	ldr	r2, [pc, #172]	@ (80024a8 <HAL_DMA_Abort+0x240>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d03b      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2a      	ldr	r2, [pc, #168]	@ (80024ac <HAL_DMA_Abort+0x244>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d036      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a28      	ldr	r2, [pc, #160]	@ (80024b0 <HAL_DMA_Abort+0x248>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d031      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a27      	ldr	r2, [pc, #156]	@ (80024b4 <HAL_DMA_Abort+0x24c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d02c      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a25      	ldr	r2, [pc, #148]	@ (80024b8 <HAL_DMA_Abort+0x250>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d027      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a24      	ldr	r2, [pc, #144]	@ (80024bc <HAL_DMA_Abort+0x254>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d022      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a22      	ldr	r2, [pc, #136]	@ (80024c0 <HAL_DMA_Abort+0x258>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01d      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a21      	ldr	r2, [pc, #132]	@ (80024c4 <HAL_DMA_Abort+0x25c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d018      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1f      	ldr	r2, [pc, #124]	@ (80024c8 <HAL_DMA_Abort+0x260>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1e      	ldr	r2, [pc, #120]	@ (80024cc <HAL_DMA_Abort+0x264>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00e      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1c      	ldr	r2, [pc, #112]	@ (80024d0 <HAL_DMA_Abort+0x268>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d009      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1b      	ldr	r2, [pc, #108]	@ (80024d4 <HAL_DMA_Abort+0x26c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d004      	beq.n	8002476 <HAL_DMA_Abort+0x20e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a19      	ldr	r2, [pc, #100]	@ (80024d8 <HAL_DMA_Abort+0x270>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d132      	bne.n	80024dc <HAL_DMA_Abort+0x274>
 8002476:	2301      	movs	r3, #1
 8002478:	e031      	b.n	80024de <HAL_DMA_Abort+0x276>
 800247a:	bf00      	nop
 800247c:	40020010 	.word	0x40020010
 8002480:	40020028 	.word	0x40020028
 8002484:	40020040 	.word	0x40020040
 8002488:	40020058 	.word	0x40020058
 800248c:	40020070 	.word	0x40020070
 8002490:	40020088 	.word	0x40020088
 8002494:	400200a0 	.word	0x400200a0
 8002498:	400200b8 	.word	0x400200b8
 800249c:	40020410 	.word	0x40020410
 80024a0:	40020428 	.word	0x40020428
 80024a4:	40020440 	.word	0x40020440
 80024a8:	40020458 	.word	0x40020458
 80024ac:	40020470 	.word	0x40020470
 80024b0:	40020488 	.word	0x40020488
 80024b4:	400204a0 	.word	0x400204a0
 80024b8:	400204b8 	.word	0x400204b8
 80024bc:	58025408 	.word	0x58025408
 80024c0:	5802541c 	.word	0x5802541c
 80024c4:	58025430 	.word	0x58025430
 80024c8:	58025444 	.word	0x58025444
 80024cc:	58025458 	.word	0x58025458
 80024d0:	5802546c 	.word	0x5802546c
 80024d4:	58025480 	.word	0x58025480
 80024d8:	58025494 	.word	0x58025494
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6d      	ldr	r2, [pc, #436]	@ (80026ac <HAL_DMA_Abort+0x444>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d04a      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6b      	ldr	r2, [pc, #428]	@ (80026b0 <HAL_DMA_Abort+0x448>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d045      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a6a      	ldr	r2, [pc, #424]	@ (80026b4 <HAL_DMA_Abort+0x44c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d040      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a68      	ldr	r2, [pc, #416]	@ (80026b8 <HAL_DMA_Abort+0x450>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d03b      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a67      	ldr	r2, [pc, #412]	@ (80026bc <HAL_DMA_Abort+0x454>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d036      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a65      	ldr	r2, [pc, #404]	@ (80026c0 <HAL_DMA_Abort+0x458>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d031      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a64      	ldr	r2, [pc, #400]	@ (80026c4 <HAL_DMA_Abort+0x45c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d02c      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a62      	ldr	r2, [pc, #392]	@ (80026c8 <HAL_DMA_Abort+0x460>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d027      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a61      	ldr	r2, [pc, #388]	@ (80026cc <HAL_DMA_Abort+0x464>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5f      	ldr	r2, [pc, #380]	@ (80026d0 <HAL_DMA_Abort+0x468>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01d      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a5e      	ldr	r2, [pc, #376]	@ (80026d4 <HAL_DMA_Abort+0x46c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d018      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5c      	ldr	r2, [pc, #368]	@ (80026d8 <HAL_DMA_Abort+0x470>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5b      	ldr	r2, [pc, #364]	@ (80026dc <HAL_DMA_Abort+0x474>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00e      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a59      	ldr	r2, [pc, #356]	@ (80026e0 <HAL_DMA_Abort+0x478>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d009      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <HAL_DMA_Abort+0x47c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_DMA_Abort+0x32a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a56      	ldr	r2, [pc, #344]	@ (80026e8 <HAL_DMA_Abort+0x480>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d108      	bne.n	80025a4 <HAL_DMA_Abort+0x33c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e007      	b.n	80025b4 <HAL_DMA_Abort+0x34c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025b4:	e013      	b.n	80025de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b6:	f7fe fd7d 	bl	80010b4 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d90c      	bls.n	80025de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e12d      	b.n	800283a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e5      	bne.n	80025b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2f      	ldr	r2, [pc, #188]	@ (80026ac <HAL_DMA_Abort+0x444>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d04a      	beq.n	800268a <HAL_DMA_Abort+0x422>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2d      	ldr	r2, [pc, #180]	@ (80026b0 <HAL_DMA_Abort+0x448>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d045      	beq.n	800268a <HAL_DMA_Abort+0x422>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2c      	ldr	r2, [pc, #176]	@ (80026b4 <HAL_DMA_Abort+0x44c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d040      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2a      	ldr	r2, [pc, #168]	@ (80026b8 <HAL_DMA_Abort+0x450>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d03b      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a29      	ldr	r2, [pc, #164]	@ (80026bc <HAL_DMA_Abort+0x454>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d036      	beq.n	800268a <HAL_DMA_Abort+0x422>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a27      	ldr	r2, [pc, #156]	@ (80026c0 <HAL_DMA_Abort+0x458>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d031      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a26      	ldr	r2, [pc, #152]	@ (80026c4 <HAL_DMA_Abort+0x45c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d02c      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a24      	ldr	r2, [pc, #144]	@ (80026c8 <HAL_DMA_Abort+0x460>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d027      	beq.n	800268a <HAL_DMA_Abort+0x422>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a23      	ldr	r2, [pc, #140]	@ (80026cc <HAL_DMA_Abort+0x464>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d022      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a21      	ldr	r2, [pc, #132]	@ (80026d0 <HAL_DMA_Abort+0x468>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01d      	beq.n	800268a <HAL_DMA_Abort+0x422>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <HAL_DMA_Abort+0x46c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d018      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1e      	ldr	r2, [pc, #120]	@ (80026d8 <HAL_DMA_Abort+0x470>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <HAL_DMA_Abort+0x474>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00e      	beq.n	800268a <HAL_DMA_Abort+0x422>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1b      	ldr	r2, [pc, #108]	@ (80026e0 <HAL_DMA_Abort+0x478>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1a      	ldr	r2, [pc, #104]	@ (80026e4 <HAL_DMA_Abort+0x47c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_DMA_Abort+0x422>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a18      	ldr	r2, [pc, #96]	@ (80026e8 <HAL_DMA_Abort+0x480>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_DMA_Abort+0x426>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_DMA_Abort+0x428>
 800268e:	2300      	movs	r3, #0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d02b      	beq.n	80026ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	223f      	movs	r2, #63	@ 0x3f
 80026a4:	409a      	lsls	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	e02a      	b.n	8002702 <HAL_DMA_Abort+0x49a>
 80026ac:	40020010 	.word	0x40020010
 80026b0:	40020028 	.word	0x40020028
 80026b4:	40020040 	.word	0x40020040
 80026b8:	40020058 	.word	0x40020058
 80026bc:	40020070 	.word	0x40020070
 80026c0:	40020088 	.word	0x40020088
 80026c4:	400200a0 	.word	0x400200a0
 80026c8:	400200b8 	.word	0x400200b8
 80026cc:	40020410 	.word	0x40020410
 80026d0:	40020428 	.word	0x40020428
 80026d4:	40020440 	.word	0x40020440
 80026d8:	40020458 	.word	0x40020458
 80026dc:	40020470 	.word	0x40020470
 80026e0:	40020488 	.word	0x40020488
 80026e4:	400204a0 	.word	0x400204a0
 80026e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a4f      	ldr	r2, [pc, #316]	@ (8002844 <HAL_DMA_Abort+0x5dc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d072      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a4d      	ldr	r2, [pc, #308]	@ (8002848 <HAL_DMA_Abort+0x5e0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d06d      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a4c      	ldr	r2, [pc, #304]	@ (800284c <HAL_DMA_Abort+0x5e4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d068      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a4a      	ldr	r2, [pc, #296]	@ (8002850 <HAL_DMA_Abort+0x5e8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d063      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a49      	ldr	r2, [pc, #292]	@ (8002854 <HAL_DMA_Abort+0x5ec>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d05e      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a47      	ldr	r2, [pc, #284]	@ (8002858 <HAL_DMA_Abort+0x5f0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d059      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a46      	ldr	r2, [pc, #280]	@ (800285c <HAL_DMA_Abort+0x5f4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d054      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a44      	ldr	r2, [pc, #272]	@ (8002860 <HAL_DMA_Abort+0x5f8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d04f      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a43      	ldr	r2, [pc, #268]	@ (8002864 <HAL_DMA_Abort+0x5fc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d04a      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a41      	ldr	r2, [pc, #260]	@ (8002868 <HAL_DMA_Abort+0x600>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d045      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a40      	ldr	r2, [pc, #256]	@ (800286c <HAL_DMA_Abort+0x604>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d040      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3e      	ldr	r2, [pc, #248]	@ (8002870 <HAL_DMA_Abort+0x608>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d03b      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a3d      	ldr	r2, [pc, #244]	@ (8002874 <HAL_DMA_Abort+0x60c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d036      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3b      	ldr	r2, [pc, #236]	@ (8002878 <HAL_DMA_Abort+0x610>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d031      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a3a      	ldr	r2, [pc, #232]	@ (800287c <HAL_DMA_Abort+0x614>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d02c      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a38      	ldr	r2, [pc, #224]	@ (8002880 <HAL_DMA_Abort+0x618>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d027      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a37      	ldr	r2, [pc, #220]	@ (8002884 <HAL_DMA_Abort+0x61c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d022      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a35      	ldr	r2, [pc, #212]	@ (8002888 <HAL_DMA_Abort+0x620>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01d      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a34      	ldr	r2, [pc, #208]	@ (800288c <HAL_DMA_Abort+0x624>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d018      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a32      	ldr	r2, [pc, #200]	@ (8002890 <HAL_DMA_Abort+0x628>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a31      	ldr	r2, [pc, #196]	@ (8002894 <HAL_DMA_Abort+0x62c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00e      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002898 <HAL_DMA_Abort+0x630>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d009      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2e      	ldr	r2, [pc, #184]	@ (800289c <HAL_DMA_Abort+0x634>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_DMA_Abort+0x58a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a2c      	ldr	r2, [pc, #176]	@ (80028a0 <HAL_DMA_Abort+0x638>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Abort+0x58e>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_DMA_Abort+0x590>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d015      	beq.n	8002828 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002804:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002818:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800281c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002826:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40020010 	.word	0x40020010
 8002848:	40020028 	.word	0x40020028
 800284c:	40020040 	.word	0x40020040
 8002850:	40020058 	.word	0x40020058
 8002854:	40020070 	.word	0x40020070
 8002858:	40020088 	.word	0x40020088
 800285c:	400200a0 	.word	0x400200a0
 8002860:	400200b8 	.word	0x400200b8
 8002864:	40020410 	.word	0x40020410
 8002868:	40020428 	.word	0x40020428
 800286c:	40020440 	.word	0x40020440
 8002870:	40020458 	.word	0x40020458
 8002874:	40020470 	.word	0x40020470
 8002878:	40020488 	.word	0x40020488
 800287c:	400204a0 	.word	0x400204a0
 8002880:	400204b8 	.word	0x400204b8
 8002884:	58025408 	.word	0x58025408
 8002888:	5802541c 	.word	0x5802541c
 800288c:	58025430 	.word	0x58025430
 8002890:	58025444 	.word	0x58025444
 8002894:	58025458 	.word	0x58025458
 8002898:	5802546c 	.word	0x5802546c
 800289c:	58025480 	.word	0x58025480
 80028a0:	58025494 	.word	0x58025494

080028a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e237      	b.n	8002d26 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d004      	beq.n	80028cc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e22c      	b.n	8002d26 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a5c      	ldr	r2, [pc, #368]	@ (8002a44 <HAL_DMA_Abort_IT+0x1a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d04a      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a5b      	ldr	r2, [pc, #364]	@ (8002a48 <HAL_DMA_Abort_IT+0x1a4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d045      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a59      	ldr	r2, [pc, #356]	@ (8002a4c <HAL_DMA_Abort_IT+0x1a8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d040      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a58      	ldr	r2, [pc, #352]	@ (8002a50 <HAL_DMA_Abort_IT+0x1ac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d03b      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a56      	ldr	r2, [pc, #344]	@ (8002a54 <HAL_DMA_Abort_IT+0x1b0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d036      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a55      	ldr	r2, [pc, #340]	@ (8002a58 <HAL_DMA_Abort_IT+0x1b4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d031      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a53      	ldr	r2, [pc, #332]	@ (8002a5c <HAL_DMA_Abort_IT+0x1b8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02c      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a52      	ldr	r2, [pc, #328]	@ (8002a60 <HAL_DMA_Abort_IT+0x1bc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d027      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a50      	ldr	r2, [pc, #320]	@ (8002a64 <HAL_DMA_Abort_IT+0x1c0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d022      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a4f      	ldr	r2, [pc, #316]	@ (8002a68 <HAL_DMA_Abort_IT+0x1c4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d01d      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4d      	ldr	r2, [pc, #308]	@ (8002a6c <HAL_DMA_Abort_IT+0x1c8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d018      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a70 <HAL_DMA_Abort_IT+0x1cc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d013      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_DMA_Abort_IT+0x1d0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00e      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a49      	ldr	r2, [pc, #292]	@ (8002a78 <HAL_DMA_Abort_IT+0x1d4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d009      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a47      	ldr	r2, [pc, #284]	@ (8002a7c <HAL_DMA_Abort_IT+0x1d8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a46      	ldr	r2, [pc, #280]	@ (8002a80 <HAL_DMA_Abort_IT+0x1dc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_DMA_Abort_IT+0xcc>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_DMA_Abort_IT+0xce>
 8002970:	2300      	movs	r3, #0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8086 	beq.w	8002a84 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2204      	movs	r2, #4
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2f      	ldr	r2, [pc, #188]	@ (8002a44 <HAL_DMA_Abort_IT+0x1a0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d04a      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a48 <HAL_DMA_Abort_IT+0x1a4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d045      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2c      	ldr	r2, [pc, #176]	@ (8002a4c <HAL_DMA_Abort_IT+0x1a8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d040      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a50 <HAL_DMA_Abort_IT+0x1ac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d03b      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a29      	ldr	r2, [pc, #164]	@ (8002a54 <HAL_DMA_Abort_IT+0x1b0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d036      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a28      	ldr	r2, [pc, #160]	@ (8002a58 <HAL_DMA_Abort_IT+0x1b4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d031      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a26      	ldr	r2, [pc, #152]	@ (8002a5c <HAL_DMA_Abort_IT+0x1b8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02c      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a25      	ldr	r2, [pc, #148]	@ (8002a60 <HAL_DMA_Abort_IT+0x1bc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d027      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a23      	ldr	r2, [pc, #140]	@ (8002a64 <HAL_DMA_Abort_IT+0x1c0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d022      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a22      	ldr	r2, [pc, #136]	@ (8002a68 <HAL_DMA_Abort_IT+0x1c4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d01d      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a20      	ldr	r2, [pc, #128]	@ (8002a6c <HAL_DMA_Abort_IT+0x1c8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d018      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a70 <HAL_DMA_Abort_IT+0x1cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a74 <HAL_DMA_Abort_IT+0x1d0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00e      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1c      	ldr	r2, [pc, #112]	@ (8002a78 <HAL_DMA_Abort_IT+0x1d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1a      	ldr	r2, [pc, #104]	@ (8002a7c <HAL_DMA_Abort_IT+0x1d8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x17c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a19      	ldr	r2, [pc, #100]	@ (8002a80 <HAL_DMA_Abort_IT+0x1dc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d108      	bne.n	8002a32 <HAL_DMA_Abort_IT+0x18e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e178      	b.n	8002d24 <HAL_DMA_Abort_IT+0x480>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e16f      	b.n	8002d24 <HAL_DMA_Abort_IT+0x480>
 8002a44:	40020010 	.word	0x40020010
 8002a48:	40020028 	.word	0x40020028
 8002a4c:	40020040 	.word	0x40020040
 8002a50:	40020058 	.word	0x40020058
 8002a54:	40020070 	.word	0x40020070
 8002a58:	40020088 	.word	0x40020088
 8002a5c:	400200a0 	.word	0x400200a0
 8002a60:	400200b8 	.word	0x400200b8
 8002a64:	40020410 	.word	0x40020410
 8002a68:	40020428 	.word	0x40020428
 8002a6c:	40020440 	.word	0x40020440
 8002a70:	40020458 	.word	0x40020458
 8002a74:	40020470 	.word	0x40020470
 8002a78:	40020488 	.word	0x40020488
 8002a7c:	400204a0 	.word	0x400204a0
 8002a80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 020e 	bic.w	r2, r2, #14
 8002a92:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6c      	ldr	r2, [pc, #432]	@ (8002c4c <HAL_DMA_Abort_IT+0x3a8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d04a      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6b      	ldr	r2, [pc, #428]	@ (8002c50 <HAL_DMA_Abort_IT+0x3ac>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d045      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a69      	ldr	r2, [pc, #420]	@ (8002c54 <HAL_DMA_Abort_IT+0x3b0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d040      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a68      	ldr	r2, [pc, #416]	@ (8002c58 <HAL_DMA_Abort_IT+0x3b4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d03b      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a66      	ldr	r2, [pc, #408]	@ (8002c5c <HAL_DMA_Abort_IT+0x3b8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d036      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a65      	ldr	r2, [pc, #404]	@ (8002c60 <HAL_DMA_Abort_IT+0x3bc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d031      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a63      	ldr	r2, [pc, #396]	@ (8002c64 <HAL_DMA_Abort_IT+0x3c0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02c      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a62      	ldr	r2, [pc, #392]	@ (8002c68 <HAL_DMA_Abort_IT+0x3c4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d027      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a60      	ldr	r2, [pc, #384]	@ (8002c6c <HAL_DMA_Abort_IT+0x3c8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d022      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a5f      	ldr	r2, [pc, #380]	@ (8002c70 <HAL_DMA_Abort_IT+0x3cc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d01d      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c74 <HAL_DMA_Abort_IT+0x3d0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d018      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5c      	ldr	r2, [pc, #368]	@ (8002c78 <HAL_DMA_Abort_IT+0x3d4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a5a      	ldr	r2, [pc, #360]	@ (8002c7c <HAL_DMA_Abort_IT+0x3d8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00e      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a59      	ldr	r2, [pc, #356]	@ (8002c80 <HAL_DMA_Abort_IT+0x3dc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a57      	ldr	r2, [pc, #348]	@ (8002c84 <HAL_DMA_Abort_IT+0x3e0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x290>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a56      	ldr	r2, [pc, #344]	@ (8002c88 <HAL_DMA_Abort_IT+0x3e4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d108      	bne.n	8002b46 <HAL_DMA_Abort_IT+0x2a2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e007      	b.n	8002b56 <HAL_DMA_Abort_IT+0x2b2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a3c      	ldr	r2, [pc, #240]	@ (8002c4c <HAL_DMA_Abort_IT+0x3a8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d072      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3a      	ldr	r2, [pc, #232]	@ (8002c50 <HAL_DMA_Abort_IT+0x3ac>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d06d      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a39      	ldr	r2, [pc, #228]	@ (8002c54 <HAL_DMA_Abort_IT+0x3b0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d068      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a37      	ldr	r2, [pc, #220]	@ (8002c58 <HAL_DMA_Abort_IT+0x3b4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d063      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a36      	ldr	r2, [pc, #216]	@ (8002c5c <HAL_DMA_Abort_IT+0x3b8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d05e      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a34      	ldr	r2, [pc, #208]	@ (8002c60 <HAL_DMA_Abort_IT+0x3bc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d059      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a33      	ldr	r2, [pc, #204]	@ (8002c64 <HAL_DMA_Abort_IT+0x3c0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d054      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	@ (8002c68 <HAL_DMA_Abort_IT+0x3c4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d04f      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a30      	ldr	r2, [pc, #192]	@ (8002c6c <HAL_DMA_Abort_IT+0x3c8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04a      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2e      	ldr	r2, [pc, #184]	@ (8002c70 <HAL_DMA_Abort_IT+0x3cc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d045      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002c74 <HAL_DMA_Abort_IT+0x3d0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d040      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c78 <HAL_DMA_Abort_IT+0x3d4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d03b      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c7c <HAL_DMA_Abort_IT+0x3d8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d036      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	@ (8002c80 <HAL_DMA_Abort_IT+0x3dc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a27      	ldr	r2, [pc, #156]	@ (8002c84 <HAL_DMA_Abort_IT+0x3e0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d02c      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	@ (8002c88 <HAL_DMA_Abort_IT+0x3e4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d027      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a24      	ldr	r2, [pc, #144]	@ (8002c8c <HAL_DMA_Abort_IT+0x3e8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a22      	ldr	r2, [pc, #136]	@ (8002c90 <HAL_DMA_Abort_IT+0x3ec>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a21      	ldr	r2, [pc, #132]	@ (8002c94 <HAL_DMA_Abort_IT+0x3f0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <HAL_DMA_Abort_IT+0x3f4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1e      	ldr	r2, [pc, #120]	@ (8002c9c <HAL_DMA_Abort_IT+0x3f8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca0 <HAL_DMA_Abort_IT+0x3fc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca4 <HAL_DMA_Abort_IT+0x400>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x3a2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <HAL_DMA_Abort_IT+0x404>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d132      	bne.n	8002cac <HAL_DMA_Abort_IT+0x408>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e031      	b.n	8002cae <HAL_DMA_Abort_IT+0x40a>
 8002c4a:	bf00      	nop
 8002c4c:	40020010 	.word	0x40020010
 8002c50:	40020028 	.word	0x40020028
 8002c54:	40020040 	.word	0x40020040
 8002c58:	40020058 	.word	0x40020058
 8002c5c:	40020070 	.word	0x40020070
 8002c60:	40020088 	.word	0x40020088
 8002c64:	400200a0 	.word	0x400200a0
 8002c68:	400200b8 	.word	0x400200b8
 8002c6c:	40020410 	.word	0x40020410
 8002c70:	40020428 	.word	0x40020428
 8002c74:	40020440 	.word	0x40020440
 8002c78:	40020458 	.word	0x40020458
 8002c7c:	40020470 	.word	0x40020470
 8002c80:	40020488 	.word	0x40020488
 8002c84:	400204a0 	.word	0x400204a0
 8002c88:	400204b8 	.word	0x400204b8
 8002c8c:	58025408 	.word	0x58025408
 8002c90:	5802541c 	.word	0x5802541c
 8002c94:	58025430 	.word	0x58025430
 8002c98:	58025444 	.word	0x58025444
 8002c9c:	58025458 	.word	0x58025458
 8002ca0:	5802546c 	.word	0x5802546c
 8002ca4:	58025480 	.word	0x58025480
 8002ca8:	58025494 	.word	0x58025494
 8002cac:	2300      	movs	r3, #0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d028      	beq.n	8002d04 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ce0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cf8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop

08002d30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	@ 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d3c:	4b67      	ldr	r3, [pc, #412]	@ (8002edc <HAL_DMA_IRQHandler+0x1ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a67      	ldr	r2, [pc, #412]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1b0>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	0a9b      	lsrs	r3, r3, #10
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a5f      	ldr	r2, [pc, #380]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1b4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d04a      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1b8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d045      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eec <HAL_DMA_IRQHandler+0x1bc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d040      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1c0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d03b      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a59      	ldr	r2, [pc, #356]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1c4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d036      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a57      	ldr	r2, [pc, #348]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1c8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d031      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a56      	ldr	r2, [pc, #344]	@ (8002efc <HAL_DMA_IRQHandler+0x1cc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d02c      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a54      	ldr	r2, [pc, #336]	@ (8002f00 <HAL_DMA_IRQHandler+0x1d0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d027      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a53      	ldr	r2, [pc, #332]	@ (8002f04 <HAL_DMA_IRQHandler+0x1d4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d022      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a51      	ldr	r2, [pc, #324]	@ (8002f08 <HAL_DMA_IRQHandler+0x1d8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01d      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a50      	ldr	r2, [pc, #320]	@ (8002f0c <HAL_DMA_IRQHandler+0x1dc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d018      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8002f10 <HAL_DMA_IRQHandler+0x1e0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a4d      	ldr	r2, [pc, #308]	@ (8002f14 <HAL_DMA_IRQHandler+0x1e4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00e      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f18 <HAL_DMA_IRQHandler+0x1e8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d009      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_DMA_IRQHandler+0x1ec>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d004      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xd2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a48      	ldr	r2, [pc, #288]	@ (8002f20 <HAL_DMA_IRQHandler+0x1f0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_DMA_IRQHandler+0xd6>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_DMA_IRQHandler+0xd8>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 842b 	beq.w	8003664 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2208      	movs	r2, #8
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a2 	beq.w	8002f68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1b4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04a      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2d      	ldr	r2, [pc, #180]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1b8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d045      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002eec <HAL_DMA_IRQHandler+0x1bc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d040      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1c0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d03b      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1c4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d036      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1c8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d031      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a25      	ldr	r2, [pc, #148]	@ (8002efc <HAL_DMA_IRQHandler+0x1cc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02c      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a24      	ldr	r2, [pc, #144]	@ (8002f00 <HAL_DMA_IRQHandler+0x1d0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d027      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a22      	ldr	r2, [pc, #136]	@ (8002f04 <HAL_DMA_IRQHandler+0x1d4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d022      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a21      	ldr	r2, [pc, #132]	@ (8002f08 <HAL_DMA_IRQHandler+0x1d8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d01d      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f0c <HAL_DMA_IRQHandler+0x1dc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d018      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <HAL_DMA_IRQHandler+0x1e0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <HAL_DMA_IRQHandler+0x1e4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8002f18 <HAL_DMA_IRQHandler+0x1e8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	@ (8002f1c <HAL_DMA_IRQHandler+0x1ec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x194>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a18      	ldr	r2, [pc, #96]	@ (8002f20 <HAL_DMA_IRQHandler+0x1f0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d12f      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x1f4>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e02e      	b.n	8002f38 <HAL_DMA_IRQHandler+0x208>
 8002eda:	bf00      	nop
 8002edc:	24000000 	.word	0x24000000
 8002ee0:	1b4e81b5 	.word	0x1b4e81b5
 8002ee4:	40020010 	.word	0x40020010
 8002ee8:	40020028 	.word	0x40020028
 8002eec:	40020040 	.word	0x40020040
 8002ef0:	40020058 	.word	0x40020058
 8002ef4:	40020070 	.word	0x40020070
 8002ef8:	40020088 	.word	0x40020088
 8002efc:	400200a0 	.word	0x400200a0
 8002f00:	400200b8 	.word	0x400200b8
 8002f04:	40020410 	.word	0x40020410
 8002f08:	40020428 	.word	0x40020428
 8002f0c:	40020440 	.word	0x40020440
 8002f10:	40020458 	.word	0x40020458
 8002f14:	40020470 	.word	0x40020470
 8002f18:	40020488 	.word	0x40020488
 8002f1c:	400204a0 	.word	0x400204a0
 8002f20:	400204b8 	.word	0x400204b8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf14      	ite	ne
 8002f32:	2301      	movne	r3, #1
 8002f34:	2300      	moveq	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2208      	movs	r2, #8
 8002f56:	409a      	lsls	r2, r3
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06e      	beq.n	800305c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a69      	ldr	r2, [pc, #420]	@ (8003128 <HAL_DMA_IRQHandler+0x3f8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d04a      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a67      	ldr	r2, [pc, #412]	@ (800312c <HAL_DMA_IRQHandler+0x3fc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d045      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a66      	ldr	r2, [pc, #408]	@ (8003130 <HAL_DMA_IRQHandler+0x400>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d040      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a64      	ldr	r2, [pc, #400]	@ (8003134 <HAL_DMA_IRQHandler+0x404>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d03b      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a63      	ldr	r2, [pc, #396]	@ (8003138 <HAL_DMA_IRQHandler+0x408>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d036      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a61      	ldr	r2, [pc, #388]	@ (800313c <HAL_DMA_IRQHandler+0x40c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a60      	ldr	r2, [pc, #384]	@ (8003140 <HAL_DMA_IRQHandler+0x410>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d02c      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5e      	ldr	r2, [pc, #376]	@ (8003144 <HAL_DMA_IRQHandler+0x414>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d027      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a5d      	ldr	r2, [pc, #372]	@ (8003148 <HAL_DMA_IRQHandler+0x418>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5b      	ldr	r2, [pc, #364]	@ (800314c <HAL_DMA_IRQHandler+0x41c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01d      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8003150 <HAL_DMA_IRQHandler+0x420>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	@ (8003154 <HAL_DMA_IRQHandler+0x424>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a57      	ldr	r2, [pc, #348]	@ (8003158 <HAL_DMA_IRQHandler+0x428>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a55      	ldr	r2, [pc, #340]	@ (800315c <HAL_DMA_IRQHandler+0x42c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a54      	ldr	r2, [pc, #336]	@ (8003160 <HAL_DMA_IRQHandler+0x430>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_DMA_IRQHandler+0x2ee>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a52      	ldr	r2, [pc, #328]	@ (8003164 <HAL_DMA_IRQHandler+0x434>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10a      	bne.n	8003034 <HAL_DMA_IRQHandler+0x304>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e003      	b.n	800303c <HAL_DMA_IRQHandler+0x30c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2201      	movs	r2, #1
 800304a:	409a      	lsls	r2, r3
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003054:	f043 0202 	orr.w	r2, r3, #2
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2204      	movs	r2, #4
 8003066:	409a      	lsls	r2, r3
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 808f 	beq.w	8003190 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2c      	ldr	r2, [pc, #176]	@ (8003128 <HAL_DMA_IRQHandler+0x3f8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2a      	ldr	r2, [pc, #168]	@ (800312c <HAL_DMA_IRQHandler+0x3fc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a29      	ldr	r2, [pc, #164]	@ (8003130 <HAL_DMA_IRQHandler+0x400>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a27      	ldr	r2, [pc, #156]	@ (8003134 <HAL_DMA_IRQHandler+0x404>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a26      	ldr	r2, [pc, #152]	@ (8003138 <HAL_DMA_IRQHandler+0x408>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a24      	ldr	r2, [pc, #144]	@ (800313c <HAL_DMA_IRQHandler+0x40c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a23      	ldr	r2, [pc, #140]	@ (8003140 <HAL_DMA_IRQHandler+0x410>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a21      	ldr	r2, [pc, #132]	@ (8003144 <HAL_DMA_IRQHandler+0x414>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a20      	ldr	r2, [pc, #128]	@ (8003148 <HAL_DMA_IRQHandler+0x418>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1e      	ldr	r2, [pc, #120]	@ (800314c <HAL_DMA_IRQHandler+0x41c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1d      	ldr	r2, [pc, #116]	@ (8003150 <HAL_DMA_IRQHandler+0x420>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003154 <HAL_DMA_IRQHandler+0x424>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003158 <HAL_DMA_IRQHandler+0x428>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a18      	ldr	r2, [pc, #96]	@ (800315c <HAL_DMA_IRQHandler+0x42c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a17      	ldr	r2, [pc, #92]	@ (8003160 <HAL_DMA_IRQHandler+0x430>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_IRQHandler+0x3e2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <HAL_DMA_IRQHandler+0x434>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d12a      	bne.n	8003168 <HAL_DMA_IRQHandler+0x438>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e023      	b.n	8003170 <HAL_DMA_IRQHandler+0x440>
 8003128:	40020010 	.word	0x40020010
 800312c:	40020028 	.word	0x40020028
 8003130:	40020040 	.word	0x40020040
 8003134:	40020058 	.word	0x40020058
 8003138:	40020070 	.word	0x40020070
 800313c:	40020088 	.word	0x40020088
 8003140:	400200a0 	.word	0x400200a0
 8003144:	400200b8 	.word	0x400200b8
 8003148:	40020410 	.word	0x40020410
 800314c:	40020428 	.word	0x40020428
 8003150:	40020440 	.word	0x40020440
 8003154:	40020458 	.word	0x40020458
 8003158:	40020470 	.word	0x40020470
 800315c:	40020488 	.word	0x40020488
 8003160:	400204a0 	.word	0x400204a0
 8003164:	400204b8 	.word	0x400204b8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2204      	movs	r2, #4
 800317e:	409a      	lsls	r2, r3
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2210      	movs	r2, #16
 800319a:	409a      	lsls	r2, r3
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80a6 	beq.w	80032f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a85      	ldr	r2, [pc, #532]	@ (80033c0 <HAL_DMA_IRQHandler+0x690>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d04a      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a83      	ldr	r2, [pc, #524]	@ (80033c4 <HAL_DMA_IRQHandler+0x694>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d045      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a82      	ldr	r2, [pc, #520]	@ (80033c8 <HAL_DMA_IRQHandler+0x698>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d040      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a80      	ldr	r2, [pc, #512]	@ (80033cc <HAL_DMA_IRQHandler+0x69c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d03b      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7f      	ldr	r2, [pc, #508]	@ (80033d0 <HAL_DMA_IRQHandler+0x6a0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d036      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a7d      	ldr	r2, [pc, #500]	@ (80033d4 <HAL_DMA_IRQHandler+0x6a4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d031      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a7c      	ldr	r2, [pc, #496]	@ (80033d8 <HAL_DMA_IRQHandler+0x6a8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d02c      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a7a      	ldr	r2, [pc, #488]	@ (80033dc <HAL_DMA_IRQHandler+0x6ac>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d027      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a79      	ldr	r2, [pc, #484]	@ (80033e0 <HAL_DMA_IRQHandler+0x6b0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a77      	ldr	r2, [pc, #476]	@ (80033e4 <HAL_DMA_IRQHandler+0x6b4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01d      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a76      	ldr	r2, [pc, #472]	@ (80033e8 <HAL_DMA_IRQHandler+0x6b8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d018      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a74      	ldr	r2, [pc, #464]	@ (80033ec <HAL_DMA_IRQHandler+0x6bc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a73      	ldr	r2, [pc, #460]	@ (80033f0 <HAL_DMA_IRQHandler+0x6c0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a71      	ldr	r2, [pc, #452]	@ (80033f4 <HAL_DMA_IRQHandler+0x6c4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a70      	ldr	r2, [pc, #448]	@ (80033f8 <HAL_DMA_IRQHandler+0x6c8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_DMA_IRQHandler+0x516>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6e      	ldr	r2, [pc, #440]	@ (80033fc <HAL_DMA_IRQHandler+0x6cc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10a      	bne.n	800325c <HAL_DMA_IRQHandler+0x52c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e009      	b.n	8003270 <HAL_DMA_IRQHandler+0x540>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d03e      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2210      	movs	r2, #16
 800327e:	409a      	lsls	r2, r3
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d018      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d024      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
 80032b0:	e01f      	b.n	80032f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01b      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
 80032c2:	e016      	b.n	80032f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0208 	bic.w	r2, r2, #8
 80032e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2220      	movs	r2, #32
 80032fc:	409a      	lsls	r2, r3
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8110 	beq.w	8003528 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2c      	ldr	r2, [pc, #176]	@ (80033c0 <HAL_DMA_IRQHandler+0x690>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d04a      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2b      	ldr	r2, [pc, #172]	@ (80033c4 <HAL_DMA_IRQHandler+0x694>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d045      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <HAL_DMA_IRQHandler+0x698>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d040      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a28      	ldr	r2, [pc, #160]	@ (80033cc <HAL_DMA_IRQHandler+0x69c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d03b      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a26      	ldr	r2, [pc, #152]	@ (80033d0 <HAL_DMA_IRQHandler+0x6a0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d036      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a25      	ldr	r2, [pc, #148]	@ (80033d4 <HAL_DMA_IRQHandler+0x6a4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d031      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a23      	ldr	r2, [pc, #140]	@ (80033d8 <HAL_DMA_IRQHandler+0x6a8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02c      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <HAL_DMA_IRQHandler+0x6ac>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d027      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a20      	ldr	r2, [pc, #128]	@ (80033e0 <HAL_DMA_IRQHandler+0x6b0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d022      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1f      	ldr	r2, [pc, #124]	@ (80033e4 <HAL_DMA_IRQHandler+0x6b4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d01d      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1d      	ldr	r2, [pc, #116]	@ (80033e8 <HAL_DMA_IRQHandler+0x6b8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d018      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <HAL_DMA_IRQHandler+0x6bc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1a      	ldr	r2, [pc, #104]	@ (80033f0 <HAL_DMA_IRQHandler+0x6c0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a19      	ldr	r2, [pc, #100]	@ (80033f4 <HAL_DMA_IRQHandler+0x6c4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <HAL_DMA_IRQHandler+0x6c8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x678>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a16      	ldr	r2, [pc, #88]	@ (80033fc <HAL_DMA_IRQHandler+0x6cc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d12b      	bne.n	8003400 <HAL_DMA_IRQHandler+0x6d0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	e02a      	b.n	8003414 <HAL_DMA_IRQHandler+0x6e4>
 80033be:	bf00      	nop
 80033c0:	40020010 	.word	0x40020010
 80033c4:	40020028 	.word	0x40020028
 80033c8:	40020040 	.word	0x40020040
 80033cc:	40020058 	.word	0x40020058
 80033d0:	40020070 	.word	0x40020070
 80033d4:	40020088 	.word	0x40020088
 80033d8:	400200a0 	.word	0x400200a0
 80033dc:	400200b8 	.word	0x400200b8
 80033e0:	40020410 	.word	0x40020410
 80033e4:	40020428 	.word	0x40020428
 80033e8:	40020440 	.word	0x40020440
 80033ec:	40020458 	.word	0x40020458
 80033f0:	40020470 	.word	0x40020470
 80033f4:	40020488 	.word	0x40020488
 80033f8:	400204a0 	.word	0x400204a0
 80033fc:	400204b8 	.word	0x400204b8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8087 	beq.w	8003528 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2220      	movs	r2, #32
 8003424:	409a      	lsls	r2, r3
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b04      	cmp	r3, #4
 8003434:	d139      	bne.n	80034aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0216 	bic.w	r2, r2, #22
 8003444:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003454:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <HAL_DMA_IRQHandler+0x736>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0208 	bic.w	r2, r2, #8
 8003474:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	223f      	movs	r2, #63	@ 0x3f
 8003480:	409a      	lsls	r2, r3
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8382 	beq.w	8003ba4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
          }
          return;
 80034a8:	e37c      	b.n	8003ba4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d018      	beq.n	80034ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d108      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d02c      	beq.n	8003528 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
 80034d6:	e027      	b.n	8003528 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d023      	beq.n	8003528 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
 80034e8:	e01e      	b.n	8003528 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0210 	bic.w	r2, r2, #16
 8003506:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 833e 	beq.w	8003bae <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8088 	beq.w	8003650 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2204      	movs	r2, #4
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a89      	ldr	r2, [pc, #548]	@ (8003774 <HAL_DMA_IRQHandler+0xa44>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d04a      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a88      	ldr	r2, [pc, #544]	@ (8003778 <HAL_DMA_IRQHandler+0xa48>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d045      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a86      	ldr	r2, [pc, #536]	@ (800377c <HAL_DMA_IRQHandler+0xa4c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d040      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a85      	ldr	r2, [pc, #532]	@ (8003780 <HAL_DMA_IRQHandler+0xa50>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d03b      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a83      	ldr	r2, [pc, #524]	@ (8003784 <HAL_DMA_IRQHandler+0xa54>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d036      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a82      	ldr	r2, [pc, #520]	@ (8003788 <HAL_DMA_IRQHandler+0xa58>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d031      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a80      	ldr	r2, [pc, #512]	@ (800378c <HAL_DMA_IRQHandler+0xa5c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02c      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7f      	ldr	r2, [pc, #508]	@ (8003790 <HAL_DMA_IRQHandler+0xa60>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d027      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7d      	ldr	r2, [pc, #500]	@ (8003794 <HAL_DMA_IRQHandler+0xa64>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d022      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003798 <HAL_DMA_IRQHandler+0xa68>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d01d      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7a      	ldr	r2, [pc, #488]	@ (800379c <HAL_DMA_IRQHandler+0xa6c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d018      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a79      	ldr	r2, [pc, #484]	@ (80037a0 <HAL_DMA_IRQHandler+0xa70>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a77      	ldr	r2, [pc, #476]	@ (80037a4 <HAL_DMA_IRQHandler+0xa74>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00e      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a76      	ldr	r2, [pc, #472]	@ (80037a8 <HAL_DMA_IRQHandler+0xa78>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d009      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a74      	ldr	r2, [pc, #464]	@ (80037ac <HAL_DMA_IRQHandler+0xa7c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x8b8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a73      	ldr	r2, [pc, #460]	@ (80037b0 <HAL_DMA_IRQHandler+0xa80>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <HAL_DMA_IRQHandler+0x8ca>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e007      	b.n	800360a <HAL_DMA_IRQHandler+0x8da>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003612:	429a      	cmp	r2, r3
 8003614:	d307      	bcc.n	8003626 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f2      	bne.n	800360a <HAL_DMA_IRQHandler+0x8da>
 8003624:	e000      	b.n	8003628 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003626:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800363e:	e003      	b.n	8003648 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 82aa 	beq.w	8003bae <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
 8003662:	e2a4      	b.n	8003bae <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a52      	ldr	r2, [pc, #328]	@ (80037b4 <HAL_DMA_IRQHandler+0xa84>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d04a      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a51      	ldr	r2, [pc, #324]	@ (80037b8 <HAL_DMA_IRQHandler+0xa88>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d045      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a4f      	ldr	r2, [pc, #316]	@ (80037bc <HAL_DMA_IRQHandler+0xa8c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d040      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a4e      	ldr	r2, [pc, #312]	@ (80037c0 <HAL_DMA_IRQHandler+0xa90>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d03b      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a4c      	ldr	r2, [pc, #304]	@ (80037c4 <HAL_DMA_IRQHandler+0xa94>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d036      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a4b      	ldr	r2, [pc, #300]	@ (80037c8 <HAL_DMA_IRQHandler+0xa98>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d031      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a49      	ldr	r2, [pc, #292]	@ (80037cc <HAL_DMA_IRQHandler+0xa9c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d02c      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a48      	ldr	r2, [pc, #288]	@ (80037d0 <HAL_DMA_IRQHandler+0xaa0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d027      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a46      	ldr	r2, [pc, #280]	@ (80037d4 <HAL_DMA_IRQHandler+0xaa4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d022      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a45      	ldr	r2, [pc, #276]	@ (80037d8 <HAL_DMA_IRQHandler+0xaa8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d01d      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a43      	ldr	r2, [pc, #268]	@ (80037dc <HAL_DMA_IRQHandler+0xaac>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a42      	ldr	r2, [pc, #264]	@ (80037e0 <HAL_DMA_IRQHandler+0xab0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a40      	ldr	r2, [pc, #256]	@ (80037e4 <HAL_DMA_IRQHandler+0xab4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a3f      	ldr	r2, [pc, #252]	@ (80037e8 <HAL_DMA_IRQHandler+0xab8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a3d      	ldr	r2, [pc, #244]	@ (80037ec <HAL_DMA_IRQHandler+0xabc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_DMA_IRQHandler+0x9d4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a3c      	ldr	r2, [pc, #240]	@ (80037f0 <HAL_DMA_IRQHandler+0xac0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_DMA_IRQHandler+0x9d8>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_DMA_IRQHandler+0x9da>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 824f 	beq.w	8003bae <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2204      	movs	r2, #4
 8003722:	409a      	lsls	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80dd 	beq.w	80038e8 <HAL_DMA_IRQHandler+0xbb8>
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80d7 	beq.w	80038e8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2204      	movs	r2, #4
 8003744:	409a      	lsls	r2, r3
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d059      	beq.n	8003808 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d14a      	bne.n	80037f4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8220 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003770:	e21a      	b.n	8003ba8 <HAL_DMA_IRQHandler+0xe78>
 8003772:	bf00      	nop
 8003774:	40020010 	.word	0x40020010
 8003778:	40020028 	.word	0x40020028
 800377c:	40020040 	.word	0x40020040
 8003780:	40020058 	.word	0x40020058
 8003784:	40020070 	.word	0x40020070
 8003788:	40020088 	.word	0x40020088
 800378c:	400200a0 	.word	0x400200a0
 8003790:	400200b8 	.word	0x400200b8
 8003794:	40020410 	.word	0x40020410
 8003798:	40020428 	.word	0x40020428
 800379c:	40020440 	.word	0x40020440
 80037a0:	40020458 	.word	0x40020458
 80037a4:	40020470 	.word	0x40020470
 80037a8:	40020488 	.word	0x40020488
 80037ac:	400204a0 	.word	0x400204a0
 80037b0:	400204b8 	.word	0x400204b8
 80037b4:	48022c08 	.word	0x48022c08
 80037b8:	48022c1c 	.word	0x48022c1c
 80037bc:	48022c30 	.word	0x48022c30
 80037c0:	48022c44 	.word	0x48022c44
 80037c4:	48022c58 	.word	0x48022c58
 80037c8:	48022c6c 	.word	0x48022c6c
 80037cc:	48022c80 	.word	0x48022c80
 80037d0:	48022c94 	.word	0x48022c94
 80037d4:	58025408 	.word	0x58025408
 80037d8:	5802541c 	.word	0x5802541c
 80037dc:	58025430 	.word	0x58025430
 80037e0:	58025444 	.word	0x58025444
 80037e4:	58025458 	.word	0x58025458
 80037e8:	5802546c 	.word	0x5802546c
 80037ec:	58025480 	.word	0x58025480
 80037f0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 81d5 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003806:	e1cf      	b.n	8003ba8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d160      	bne.n	80038d4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7f      	ldr	r2, [pc, #508]	@ (8003a14 <HAL_DMA_IRQHandler+0xce4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d04a      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a7d      	ldr	r2, [pc, #500]	@ (8003a18 <HAL_DMA_IRQHandler+0xce8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d045      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a1c <HAL_DMA_IRQHandler+0xcec>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d040      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a7a      	ldr	r2, [pc, #488]	@ (8003a20 <HAL_DMA_IRQHandler+0xcf0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d03b      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a79      	ldr	r2, [pc, #484]	@ (8003a24 <HAL_DMA_IRQHandler+0xcf4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d036      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a77      	ldr	r2, [pc, #476]	@ (8003a28 <HAL_DMA_IRQHandler+0xcf8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d031      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a76      	ldr	r2, [pc, #472]	@ (8003a2c <HAL_DMA_IRQHandler+0xcfc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d02c      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a74      	ldr	r2, [pc, #464]	@ (8003a30 <HAL_DMA_IRQHandler+0xd00>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d027      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a73      	ldr	r2, [pc, #460]	@ (8003a34 <HAL_DMA_IRQHandler+0xd04>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a71      	ldr	r2, [pc, #452]	@ (8003a38 <HAL_DMA_IRQHandler+0xd08>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01d      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a70      	ldr	r2, [pc, #448]	@ (8003a3c <HAL_DMA_IRQHandler+0xd0c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6e      	ldr	r2, [pc, #440]	@ (8003a40 <HAL_DMA_IRQHandler+0xd10>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6d      	ldr	r2, [pc, #436]	@ (8003a44 <HAL_DMA_IRQHandler+0xd14>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a6b      	ldr	r2, [pc, #428]	@ (8003a48 <HAL_DMA_IRQHandler+0xd18>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6a      	ldr	r2, [pc, #424]	@ (8003a4c <HAL_DMA_IRQHandler+0xd1c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xb82>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a68      	ldr	r2, [pc, #416]	@ (8003a50 <HAL_DMA_IRQHandler+0xd20>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d108      	bne.n	80038c4 <HAL_DMA_IRQHandler+0xb94>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0208 	bic.w	r2, r2, #8
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e007      	b.n	80038d4 <HAL_DMA_IRQHandler+0xba4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8165 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038e6:	e15f      	b.n	8003ba8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2202      	movs	r2, #2
 80038f2:	409a      	lsls	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80c5 	beq.w	8003a88 <HAL_DMA_IRQHandler+0xd58>
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80bf 	beq.w	8003a88 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2202      	movs	r2, #2
 8003914:	409a      	lsls	r2, r3
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d018      	beq.n	8003956 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 813a 	beq.w	8003bac <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003940:	e134      	b.n	8003bac <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8130 	beq.w	8003bac <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003954:	e12a      	b.n	8003bac <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	f040 8089 	bne.w	8003a74 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2b      	ldr	r2, [pc, #172]	@ (8003a14 <HAL_DMA_IRQHandler+0xce4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d04a      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a29      	ldr	r2, [pc, #164]	@ (8003a18 <HAL_DMA_IRQHandler+0xce8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d045      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a28      	ldr	r2, [pc, #160]	@ (8003a1c <HAL_DMA_IRQHandler+0xcec>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d040      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a26      	ldr	r2, [pc, #152]	@ (8003a20 <HAL_DMA_IRQHandler+0xcf0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d03b      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a25      	ldr	r2, [pc, #148]	@ (8003a24 <HAL_DMA_IRQHandler+0xcf4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d036      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a23      	ldr	r2, [pc, #140]	@ (8003a28 <HAL_DMA_IRQHandler+0xcf8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d031      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a22      	ldr	r2, [pc, #136]	@ (8003a2c <HAL_DMA_IRQHandler+0xcfc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d02c      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a20      	ldr	r2, [pc, #128]	@ (8003a30 <HAL_DMA_IRQHandler+0xd00>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d027      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a34 <HAL_DMA_IRQHandler+0xd04>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a38 <HAL_DMA_IRQHandler+0xd08>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01d      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	@ (8003a3c <HAL_DMA_IRQHandler+0xd0c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d018      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a40 <HAL_DMA_IRQHandler+0xd10>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a19      	ldr	r2, [pc, #100]	@ (8003a44 <HAL_DMA_IRQHandler+0xd14>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a17      	ldr	r2, [pc, #92]	@ (8003a48 <HAL_DMA_IRQHandler+0xd18>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d009      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <HAL_DMA_IRQHandler+0xd1c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xcd2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a14      	ldr	r2, [pc, #80]	@ (8003a50 <HAL_DMA_IRQHandler+0xd20>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d128      	bne.n	8003a54 <HAL_DMA_IRQHandler+0xd24>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0214 	bic.w	r2, r2, #20
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e027      	b.n	8003a64 <HAL_DMA_IRQHandler+0xd34>
 8003a14:	40020010 	.word	0x40020010
 8003a18:	40020028 	.word	0x40020028
 8003a1c:	40020040 	.word	0x40020040
 8003a20:	40020058 	.word	0x40020058
 8003a24:	40020070 	.word	0x40020070
 8003a28:	40020088 	.word	0x40020088
 8003a2c:	400200a0 	.word	0x400200a0
 8003a30:	400200b8 	.word	0x400200b8
 8003a34:	40020410 	.word	0x40020410
 8003a38:	40020428 	.word	0x40020428
 8003a3c:	40020440 	.word	0x40020440
 8003a40:	40020458 	.word	0x40020458
 8003a44:	40020470 	.word	0x40020470
 8003a48:	40020488 	.word	0x40020488
 8003a4c:	400204a0 	.word	0x400204a0
 8003a50:	400204b8 	.word	0x400204b8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 020a 	bic.w	r2, r2, #10
 8003a62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8097 	beq.w	8003bac <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a86:	e091      	b.n	8003bac <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2208      	movs	r2, #8
 8003a92:	409a      	lsls	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8088 	beq.w	8003bae <HAL_DMA_IRQHandler+0xe7e>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8082 	beq.w	8003bae <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a41      	ldr	r2, [pc, #260]	@ (8003bb4 <HAL_DMA_IRQHandler+0xe84>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04a      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3f      	ldr	r2, [pc, #252]	@ (8003bb8 <HAL_DMA_IRQHandler+0xe88>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d045      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bbc <HAL_DMA_IRQHandler+0xe8c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d040      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc0 <HAL_DMA_IRQHandler+0xe90>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d03b      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc4 <HAL_DMA_IRQHandler+0xe94>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d036      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a39      	ldr	r2, [pc, #228]	@ (8003bc8 <HAL_DMA_IRQHandler+0xe98>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a38      	ldr	r2, [pc, #224]	@ (8003bcc <HAL_DMA_IRQHandler+0xe9c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d02c      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a36      	ldr	r2, [pc, #216]	@ (8003bd0 <HAL_DMA_IRQHandler+0xea0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d027      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a35      	ldr	r2, [pc, #212]	@ (8003bd4 <HAL_DMA_IRQHandler+0xea4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a33      	ldr	r2, [pc, #204]	@ (8003bd8 <HAL_DMA_IRQHandler+0xea8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a32      	ldr	r2, [pc, #200]	@ (8003bdc <HAL_DMA_IRQHandler+0xeac>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d018      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a30      	ldr	r2, [pc, #192]	@ (8003be0 <HAL_DMA_IRQHandler+0xeb0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2f      	ldr	r2, [pc, #188]	@ (8003be4 <HAL_DMA_IRQHandler+0xeb4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2d      	ldr	r2, [pc, #180]	@ (8003be8 <HAL_DMA_IRQHandler+0xeb8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <HAL_DMA_IRQHandler+0xebc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe1a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf0 <HAL_DMA_IRQHandler+0xec0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <HAL_DMA_IRQHandler+0xe2c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 021c 	bic.w	r2, r2, #28
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e007      	b.n	8003b6c <HAL_DMA_IRQHandler+0xe3c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 020e 	bic.w	r2, r2, #14
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
 8003ba2:	e004      	b.n	8003bae <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003ba4:	bf00      	nop
 8003ba6:	e002      	b.n	8003bae <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bae:	3728      	adds	r7, #40	@ 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40020010 	.word	0x40020010
 8003bb8:	40020028 	.word	0x40020028
 8003bbc:	40020040 	.word	0x40020040
 8003bc0:	40020058 	.word	0x40020058
 8003bc4:	40020070 	.word	0x40020070
 8003bc8:	40020088 	.word	0x40020088
 8003bcc:	400200a0 	.word	0x400200a0
 8003bd0:	400200b8 	.word	0x400200b8
 8003bd4:	40020410 	.word	0x40020410
 8003bd8:	40020428 	.word	0x40020428
 8003bdc:	40020440 	.word	0x40020440
 8003be0:	40020458 	.word	0x40020458
 8003be4:	40020470 	.word	0x40020470
 8003be8:	40020488 	.word	0x40020488
 8003bec:	400204a0 	.word	0x400204a0
 8003bf0:	400204b8 	.word	0x400204b8

08003bf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7f      	ldr	r2, [pc, #508]	@ (8003e10 <DMA_SetConfig+0x21c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d072      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e14 <DMA_SetConfig+0x220>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d06d      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7c      	ldr	r2, [pc, #496]	@ (8003e18 <DMA_SetConfig+0x224>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d068      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a7a      	ldr	r2, [pc, #488]	@ (8003e1c <DMA_SetConfig+0x228>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d063      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a79      	ldr	r2, [pc, #484]	@ (8003e20 <DMA_SetConfig+0x22c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d05e      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a77      	ldr	r2, [pc, #476]	@ (8003e24 <DMA_SetConfig+0x230>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d059      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a76      	ldr	r2, [pc, #472]	@ (8003e28 <DMA_SetConfig+0x234>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d054      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a74      	ldr	r2, [pc, #464]	@ (8003e2c <DMA_SetConfig+0x238>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d04f      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a73      	ldr	r2, [pc, #460]	@ (8003e30 <DMA_SetConfig+0x23c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d04a      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a71      	ldr	r2, [pc, #452]	@ (8003e34 <DMA_SetConfig+0x240>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d045      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a70      	ldr	r2, [pc, #448]	@ (8003e38 <DMA_SetConfig+0x244>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d040      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6e      	ldr	r2, [pc, #440]	@ (8003e3c <DMA_SetConfig+0x248>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d03b      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6d      	ldr	r2, [pc, #436]	@ (8003e40 <DMA_SetConfig+0x24c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d036      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a6b      	ldr	r2, [pc, #428]	@ (8003e44 <DMA_SetConfig+0x250>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d031      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6a      	ldr	r2, [pc, #424]	@ (8003e48 <DMA_SetConfig+0x254>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d02c      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a68      	ldr	r2, [pc, #416]	@ (8003e4c <DMA_SetConfig+0x258>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d027      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a67      	ldr	r2, [pc, #412]	@ (8003e50 <DMA_SetConfig+0x25c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d022      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a65      	ldr	r2, [pc, #404]	@ (8003e54 <DMA_SetConfig+0x260>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01d      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a64      	ldr	r2, [pc, #400]	@ (8003e58 <DMA_SetConfig+0x264>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d018      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a62      	ldr	r2, [pc, #392]	@ (8003e5c <DMA_SetConfig+0x268>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a61      	ldr	r2, [pc, #388]	@ (8003e60 <DMA_SetConfig+0x26c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a5f      	ldr	r2, [pc, #380]	@ (8003e64 <DMA_SetConfig+0x270>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5e      	ldr	r2, [pc, #376]	@ (8003e68 <DMA_SetConfig+0x274>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8003e6c <DMA_SetConfig+0x278>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <DMA_SetConfig+0x10e>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <DMA_SetConfig+0x110>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a39      	ldr	r2, [pc, #228]	@ (8003e10 <DMA_SetConfig+0x21c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a38      	ldr	r2, [pc, #224]	@ (8003e14 <DMA_SetConfig+0x220>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a36      	ldr	r2, [pc, #216]	@ (8003e18 <DMA_SetConfig+0x224>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a35      	ldr	r2, [pc, #212]	@ (8003e1c <DMA_SetConfig+0x228>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <DMA_SetConfig+0x22c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <DMA_SetConfig+0x230>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a30      	ldr	r2, [pc, #192]	@ (8003e28 <DMA_SetConfig+0x234>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e2c <DMA_SetConfig+0x238>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <DMA_SetConfig+0x23c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2c      	ldr	r2, [pc, #176]	@ (8003e34 <DMA_SetConfig+0x240>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e38 <DMA_SetConfig+0x244>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a29      	ldr	r2, [pc, #164]	@ (8003e3c <DMA_SetConfig+0x248>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a27      	ldr	r2, [pc, #156]	@ (8003e40 <DMA_SetConfig+0x24c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a26      	ldr	r2, [pc, #152]	@ (8003e44 <DMA_SetConfig+0x250>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a24      	ldr	r2, [pc, #144]	@ (8003e48 <DMA_SetConfig+0x254>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a23      	ldr	r2, [pc, #140]	@ (8003e4c <DMA_SetConfig+0x258>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <DMA_SetConfig+0x1d4>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <DMA_SetConfig+0x1d6>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d059      	beq.n	8003e82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	223f      	movs	r2, #63	@ 0x3f
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d138      	bne.n	8003e70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e0e:	e0ae      	b.n	8003f6e <DMA_SetConfig+0x37a>
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]
}
 8003e80:	e075      	b.n	8003f6e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a3d      	ldr	r2, [pc, #244]	@ (8003f7c <DMA_SetConfig+0x388>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3b      	ldr	r2, [pc, #236]	@ (8003f80 <DMA_SetConfig+0x38c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8003f84 <DMA_SetConfig+0x390>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a38      	ldr	r2, [pc, #224]	@ (8003f88 <DMA_SetConfig+0x394>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a37      	ldr	r2, [pc, #220]	@ (8003f8c <DMA_SetConfig+0x398>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a35      	ldr	r2, [pc, #212]	@ (8003f90 <DMA_SetConfig+0x39c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a34      	ldr	r2, [pc, #208]	@ (8003f94 <DMA_SetConfig+0x3a0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <DMA_SetConfig+0x3a4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a31      	ldr	r2, [pc, #196]	@ (8003f9c <DMA_SetConfig+0x3a8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa0 <DMA_SetConfig+0x3ac>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <DMA_SetConfig+0x3b0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <DMA_SetConfig+0x3b4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2b      	ldr	r2, [pc, #172]	@ (8003fac <DMA_SetConfig+0x3b8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <DMA_SetConfig+0x3bc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a28      	ldr	r2, [pc, #160]	@ (8003fb4 <DMA_SetConfig+0x3c0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <DMA_SetConfig+0x32e>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a26      	ldr	r2, [pc, #152]	@ (8003fb8 <DMA_SetConfig+0x3c4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <DMA_SetConfig+0x332>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <DMA_SetConfig+0x334>
 8003f26:	2300      	movs	r3, #0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d020      	beq.n	8003f6e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	2201      	movs	r2, #1
 8003f36:	409a      	lsls	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	d108      	bne.n	8003f5e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
}
 8003f5c:	e007      	b.n	8003f6e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	60da      	str	r2, [r3, #12]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	48022c08 	.word	0x48022c08
 8003f80:	48022c1c 	.word	0x48022c1c
 8003f84:	48022c30 	.word	0x48022c30
 8003f88:	48022c44 	.word	0x48022c44
 8003f8c:	48022c58 	.word	0x48022c58
 8003f90:	48022c6c 	.word	0x48022c6c
 8003f94:	48022c80 	.word	0x48022c80
 8003f98:	48022c94 	.word	0x48022c94
 8003f9c:	58025408 	.word	0x58025408
 8003fa0:	5802541c 	.word	0x5802541c
 8003fa4:	58025430 	.word	0x58025430
 8003fa8:	58025444 	.word	0x58025444
 8003fac:	58025458 	.word	0x58025458
 8003fb0:	5802546c 	.word	0x5802546c
 8003fb4:	58025480 	.word	0x58025480
 8003fb8:	58025494 	.word	0x58025494

08003fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a42      	ldr	r2, [pc, #264]	@ (80040d4 <DMA_CalcBaseAndBitshift+0x118>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d04a      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a41      	ldr	r2, [pc, #260]	@ (80040d8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d045      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80040dc <DMA_CalcBaseAndBitshift+0x120>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d040      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80040e0 <DMA_CalcBaseAndBitshift+0x124>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d03b      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80040e4 <DMA_CalcBaseAndBitshift+0x128>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d036      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80040e8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d031      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a39      	ldr	r2, [pc, #228]	@ (80040ec <DMA_CalcBaseAndBitshift+0x130>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d02c      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a38      	ldr	r2, [pc, #224]	@ (80040f0 <DMA_CalcBaseAndBitshift+0x134>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d027      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a36      	ldr	r2, [pc, #216]	@ (80040f4 <DMA_CalcBaseAndBitshift+0x138>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d022      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a35      	ldr	r2, [pc, #212]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d01d      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a33      	ldr	r2, [pc, #204]	@ (80040fc <DMA_CalcBaseAndBitshift+0x140>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d018      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a32      	ldr	r2, [pc, #200]	@ (8004100 <DMA_CalcBaseAndBitshift+0x144>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d013      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a30      	ldr	r2, [pc, #192]	@ (8004104 <DMA_CalcBaseAndBitshift+0x148>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00e      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2f      	ldr	r2, [pc, #188]	@ (8004108 <DMA_CalcBaseAndBitshift+0x14c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d009      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a2d      	ldr	r2, [pc, #180]	@ (800410c <DMA_CalcBaseAndBitshift+0x150>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d004      	beq.n	8004064 <DMA_CalcBaseAndBitshift+0xa8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2c      	ldr	r2, [pc, #176]	@ (8004110 <DMA_CalcBaseAndBitshift+0x154>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <DMA_CalcBaseAndBitshift+0xac>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <DMA_CalcBaseAndBitshift+0xae>
 8004068:	2300      	movs	r3, #0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d024      	beq.n	80040b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	3b10      	subs	r3, #16
 8004076:	4a27      	ldr	r2, [pc, #156]	@ (8004114 <DMA_CalcBaseAndBitshift+0x158>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <DMA_CalcBaseAndBitshift+0x15c>)
 8004088:	5cd3      	ldrb	r3, [r2, r3]
 800408a:	461a      	mov	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d908      	bls.n	80040a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	4b1f      	ldr	r3, [pc, #124]	@ (800411c <DMA_CalcBaseAndBitshift+0x160>)
 800409e:	4013      	ands	r3, r2
 80040a0:	1d1a      	adds	r2, r3, #4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80040a6:	e00d      	b.n	80040c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <DMA_CalcBaseAndBitshift+0x160>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b6:	e005      	b.n	80040c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40020010 	.word	0x40020010
 80040d8:	40020028 	.word	0x40020028
 80040dc:	40020040 	.word	0x40020040
 80040e0:	40020058 	.word	0x40020058
 80040e4:	40020070 	.word	0x40020070
 80040e8:	40020088 	.word	0x40020088
 80040ec:	400200a0 	.word	0x400200a0
 80040f0:	400200b8 	.word	0x400200b8
 80040f4:	40020410 	.word	0x40020410
 80040f8:	40020428 	.word	0x40020428
 80040fc:	40020440 	.word	0x40020440
 8004100:	40020458 	.word	0x40020458
 8004104:	40020470 	.word	0x40020470
 8004108:	40020488 	.word	0x40020488
 800410c:	400204a0 	.word	0x400204a0
 8004110:	400204b8 	.word	0x400204b8
 8004114:	aaaaaaab 	.word	0xaaaaaaab
 8004118:	08009d40 	.word	0x08009d40
 800411c:	fffffc00 	.word	0xfffffc00

08004120 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d120      	bne.n	8004176 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	2b03      	cmp	r3, #3
 800413a:	d858      	bhi.n	80041ee <DMA_CheckFifoParam+0xce>
 800413c:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <DMA_CheckFifoParam+0x24>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004155 	.word	0x08004155
 8004148:	08004167 	.word	0x08004167
 800414c:	08004155 	.word	0x08004155
 8004150:	080041ef 	.word	0x080041ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d048      	beq.n	80041f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004164:	e045      	b.n	80041f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800416e:	d142      	bne.n	80041f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004174:	e03f      	b.n	80041f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417e:	d123      	bne.n	80041c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	2b03      	cmp	r3, #3
 8004186:	d838      	bhi.n	80041fa <DMA_CheckFifoParam+0xda>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <DMA_CheckFifoParam+0x70>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041a7 	.word	0x080041a7
 8004198:	080041a1 	.word	0x080041a1
 800419c:	080041b9 	.word	0x080041b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
        break;
 80041a4:	e030      	b.n	8004208 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d025      	beq.n	80041fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041b6:	e022      	b.n	80041fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041c0:	d11f      	bne.n	8004202 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041c6:	e01c      	b.n	8004202 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d902      	bls.n	80041d6 <DMA_CheckFifoParam+0xb6>
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d003      	beq.n	80041dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041d4:	e018      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
        break;
 80041da:	e015      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
    break;
 80041ec:	e00b      	b.n	8004206 <DMA_CheckFifoParam+0xe6>
        break;
 80041ee:	bf00      	nop
 80041f0:	e00a      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
        break;
 80041f2:	bf00      	nop
 80041f4:	e008      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
        break;
 80041f6:	bf00      	nop
 80041f8:	e006      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
        break;
 80041fa:	bf00      	nop
 80041fc:	e004      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
        break;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
        break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
    break;
 8004206:	bf00      	nop
    }
  }

  return status;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop

08004218 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a38      	ldr	r2, [pc, #224]	@ (800430c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a36      	ldr	r2, [pc, #216]	@ (8004310 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01d      	beq.n	8004276 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a35      	ldr	r2, [pc, #212]	@ (8004314 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d018      	beq.n	8004276 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a33      	ldr	r2, [pc, #204]	@ (8004318 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a32      	ldr	r2, [pc, #200]	@ (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a30      	ldr	r2, [pc, #192]	@ (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2f      	ldr	r2, [pc, #188]	@ (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2d      	ldr	r2, [pc, #180]	@ (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800427a:	2300      	movs	r3, #0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01a      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	3b08      	subs	r3, #8
 8004288:	4a28      	ldr	r2, [pc, #160]	@ (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	091b      	lsrs	r3, r3, #4
 8004290:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4b26      	ldr	r3, [pc, #152]	@ (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	461a      	mov	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a24      	ldr	r2, [pc, #144]	@ (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042b4:	e024      	b.n	8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3b10      	subs	r3, #16
 80042be:	4a1e      	ldr	r2, [pc, #120]	@ (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d806      	bhi.n	80042de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d902      	bls.n	80042de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3308      	adds	r3, #8
 80042dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4b18      	ldr	r3, [pc, #96]	@ (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a16      	ldr	r2, [pc, #88]	@ (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	58025408 	.word	0x58025408
 8004310:	5802541c 	.word	0x5802541c
 8004314:	58025430 	.word	0x58025430
 8004318:	58025444 	.word	0x58025444
 800431c:	58025458 	.word	0x58025458
 8004320:	5802546c 	.word	0x5802546c
 8004324:	58025480 	.word	0x58025480
 8004328:	58025494 	.word	0x58025494
 800432c:	cccccccd 	.word	0xcccccccd
 8004330:	16009600 	.word	0x16009600
 8004334:	58025880 	.word	0x58025880
 8004338:	aaaaaaab 	.word	0xaaaaaaab
 800433c:	400204b8 	.word	0x400204b8
 8004340:	4002040f 	.word	0x4002040f
 8004344:	10008200 	.word	0x10008200
 8004348:	40020880 	.word	0x40020880

0800434c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d04a      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d847      	bhi.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a25      	ldr	r2, [pc, #148]	@ (8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d022      	beq.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a24      	ldr	r2, [pc, #144]	@ (8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01d      	beq.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a22      	ldr	r2, [pc, #136]	@ (800440c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d018      	beq.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a21      	ldr	r2, [pc, #132]	@ (8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1f      	ldr	r2, [pc, #124]	@ (8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1e      	ldr	r2, [pc, #120]	@ (8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1c      	ldr	r2, [pc, #112]	@ (800441c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d101      	bne.n	80043bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	461a      	mov	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a15      	ldr	r2, [pc, #84]	@ (8004428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80043d6:	e009      	b.n	80043ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4b14      	ldr	r3, [pc, #80]	@ (800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	2201      	movs	r2, #1
 80043f2:	409a      	lsls	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	58025408 	.word	0x58025408
 8004408:	5802541c 	.word	0x5802541c
 800440c:	58025430 	.word	0x58025430
 8004410:	58025444 	.word	0x58025444
 8004414:	58025458 	.word	0x58025458
 8004418:	5802546c 	.word	0x5802546c
 800441c:	58025480 	.word	0x58025480
 8004420:	58025494 	.word	0x58025494
 8004424:	1600963f 	.word	0x1600963f
 8004428:	58025940 	.word	0x58025940
 800442c:	1000823f 	.word	0x1000823f
 8004430:	40020940 	.word	0x40020940

08004434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	@ 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004442:	4b89      	ldr	r3, [pc, #548]	@ (8004668 <HAL_GPIO_Init+0x234>)
 8004444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004446:	e194      	b.n	8004772 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2101      	movs	r1, #1
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	fa01 f303 	lsl.w	r3, r1, r3
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8186 	beq.w	800476c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d005      	beq.n	8004478 <HAL_GPIO_Init+0x44>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d130      	bne.n	80044da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	2203      	movs	r2, #3
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ae:	2201      	movs	r2, #1
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 0201 	and.w	r2, r3, #1
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d017      	beq.n	8004516 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2203      	movs	r2, #3
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d123      	bne.n	800456a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	08da      	lsrs	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3208      	adds	r2, #8
 800452a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	220f      	movs	r2, #15
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	08da      	lsrs	r2, r3, #3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3208      	adds	r2, #8
 8004564:	69b9      	ldr	r1, [r7, #24]
 8004566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	2203      	movs	r2, #3
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4013      	ands	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0203 	and.w	r2, r3, #3
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80e0 	beq.w	800476c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ac:	4b2f      	ldr	r3, [pc, #188]	@ (800466c <HAL_GPIO_Init+0x238>)
 80045ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80045b2:	4a2e      	ldr	r2, [pc, #184]	@ (800466c <HAL_GPIO_Init+0x238>)
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80045bc:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <HAL_GPIO_Init+0x238>)
 80045be:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ca:	4a29      	ldr	r2, [pc, #164]	@ (8004670 <HAL_GPIO_Init+0x23c>)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	3302      	adds	r3, #2
 80045d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a20      	ldr	r2, [pc, #128]	@ (8004674 <HAL_GPIO_Init+0x240>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d052      	beq.n	800469c <HAL_GPIO_Init+0x268>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004678 <HAL_GPIO_Init+0x244>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_GPIO_Init+0x22e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1e      	ldr	r2, [pc, #120]	@ (800467c <HAL_GPIO_Init+0x248>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02b      	beq.n	800465e <HAL_GPIO_Init+0x22a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1d      	ldr	r2, [pc, #116]	@ (8004680 <HAL_GPIO_Init+0x24c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d025      	beq.n	800465a <HAL_GPIO_Init+0x226>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1c      	ldr	r2, [pc, #112]	@ (8004684 <HAL_GPIO_Init+0x250>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01f      	beq.n	8004656 <HAL_GPIO_Init+0x222>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1b      	ldr	r2, [pc, #108]	@ (8004688 <HAL_GPIO_Init+0x254>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_Init+0x21e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1a      	ldr	r2, [pc, #104]	@ (800468c <HAL_GPIO_Init+0x258>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_Init+0x21a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a19      	ldr	r2, [pc, #100]	@ (8004690 <HAL_GPIO_Init+0x25c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_Init+0x216>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a18      	ldr	r2, [pc, #96]	@ (8004694 <HAL_GPIO_Init+0x260>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_Init+0x212>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a17      	ldr	r2, [pc, #92]	@ (8004698 <HAL_GPIO_Init+0x264>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_Init+0x20e>
 800463e:	2309      	movs	r3, #9
 8004640:	e02d      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004642:	230a      	movs	r3, #10
 8004644:	e02b      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004646:	2308      	movs	r3, #8
 8004648:	e029      	b.n	800469e <HAL_GPIO_Init+0x26a>
 800464a:	2307      	movs	r3, #7
 800464c:	e027      	b.n	800469e <HAL_GPIO_Init+0x26a>
 800464e:	2306      	movs	r3, #6
 8004650:	e025      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004652:	2305      	movs	r3, #5
 8004654:	e023      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004656:	2304      	movs	r3, #4
 8004658:	e021      	b.n	800469e <HAL_GPIO_Init+0x26a>
 800465a:	2303      	movs	r3, #3
 800465c:	e01f      	b.n	800469e <HAL_GPIO_Init+0x26a>
 800465e:	2302      	movs	r3, #2
 8004660:	e01d      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004662:	2301      	movs	r3, #1
 8004664:	e01b      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004666:	bf00      	nop
 8004668:	58000080 	.word	0x58000080
 800466c:	58024400 	.word	0x58024400
 8004670:	58000400 	.word	0x58000400
 8004674:	58020000 	.word	0x58020000
 8004678:	58020400 	.word	0x58020400
 800467c:	58020800 	.word	0x58020800
 8004680:	58020c00 	.word	0x58020c00
 8004684:	58021000 	.word	0x58021000
 8004688:	58021400 	.word	0x58021400
 800468c:	58021800 	.word	0x58021800
 8004690:	58021c00 	.word	0x58021c00
 8004694:	58022000 	.word	0x58022000
 8004698:	58022400 	.word	0x58022400
 800469c:	2300      	movs	r3, #0
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	f002 0203 	and.w	r2, r2, #3
 80046a4:	0092      	lsls	r2, r2, #2
 80046a6:	4093      	lsls	r3, r2
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ae:	4938      	ldr	r1, [pc, #224]	@ (8004790 <HAL_GPIO_Init+0x35c>)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	3302      	adds	r3, #2
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004710:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f ae63 	bne.w	8004448 <HAL_GPIO_Init+0x14>
  }
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	3724      	adds	r7, #36	@ 0x24
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	58000400 	.word	0x58000400

08004794 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0b1      	b.n	800490e <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d101      	bne.n	80047ba <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0a9      	b.n	800490e <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d101      	bne.n	80047ca <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0a1      	b.n	800490e <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc f9e2 	bl	8000bb0 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047fa:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b40      	cmp	r3, #64	@ 0x40
 8004802:	d119      	bne.n	8004838 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b43      	ldr	r3, [pc, #268]	@ (8004918 <HAL_OPAMP_Init+0x184>)
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6851      	ldr	r1, [r2, #4]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6892      	ldr	r2, [r2, #8]
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6952      	ldr	r2, [r2, #20]
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6992      	ldr	r2, [r2, #24]
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6912      	ldr	r2, [r2, #16]
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	69d2      	ldr	r2, [r2, #28]
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	430b      	orrs	r3, r1
 8004836:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b60      	cmp	r3, #96	@ 0x60
 800483e:	d113      	bne.n	8004868 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b35      	ldr	r3, [pc, #212]	@ (800491c <HAL_OPAMP_Init+0x188>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6851      	ldr	r1, [r2, #4]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6912      	ldr	r2, [r2, #16]
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	69d2      	ldr	r2, [r2, #28]
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	430b      	orrs	r3, r1
 8004866:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b29      	ldr	r3, [pc, #164]	@ (800491c <HAL_OPAMP_Init+0x188>)
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6851      	ldr	r1, [r2, #4]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6892      	ldr	r2, [r2, #8]
 8004882:	4311      	orrs	r1, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68d2      	ldr	r2, [r2, #12]
 8004888:	4311      	orrs	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6912      	ldr	r2, [r2, #16]
 800488e:	4311      	orrs	r1, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	69d2      	ldr	r2, [r2, #28]
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	430b      	orrs	r3, r1
 800489c:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048a6:	d127      	bne.n	80048f8 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b0:	d011      	beq.n	80048d6 <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80048bc:	4313      	orrs	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	4b16      	ldr	r3, [pc, #88]	@ (8004920 <HAL_OPAMP_Init+0x18c>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6053      	str	r3, [r2, #4]
 80048d4:	e010      	b.n	80048f8 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <HAL_OPAMP_Init+0x18c>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	fff83e93 	.word	0xfff83e93
 800491c:	fffbfe93 	.word	0xfffbfe93
 8004920:	ffffe0e0 	.word	0xffffe0e0

08004924 <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
 800493a:	e01d      	b.n	8004978 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b05      	cmp	r3, #5
 8004946:	d102      	bne.n	800494e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
 800494c:	e014      	b.n	8004978 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d10c      	bne.n	8004974 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2204      	movs	r2, #4
 800496e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8004972:	e001      	b.n	8004978 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a04      	ldr	r2, [pc, #16]	@ (80049a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	58024800 	.word	0x58024800

080049a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80049b0:	4b29      	ldr	r3, [pc, #164]	@ (8004a58 <HAL_PWREx_ConfigSupply+0xb0>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	2b06      	cmp	r3, #6
 80049ba:	d00a      	beq.n	80049d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049bc:	4b26      	ldr	r3, [pc, #152]	@ (8004a58 <HAL_PWREx_ConfigSupply+0xb0>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d001      	beq.n	80049ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e040      	b.n	8004a50 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e03e      	b.n	8004a50 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049d2:	4b21      	ldr	r3, [pc, #132]	@ (8004a58 <HAL_PWREx_ConfigSupply+0xb0>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80049da:	491f      	ldr	r1, [pc, #124]	@ (8004a58 <HAL_PWREx_ConfigSupply+0xb0>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049e2:	f7fc fb67 	bl	80010b4 <HAL_GetTick>
 80049e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049e8:	e009      	b.n	80049fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049ea:	f7fc fb63 	bl	80010b4 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049f8:	d901      	bls.n	80049fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e028      	b.n	8004a50 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049fe:	4b16      	ldr	r3, [pc, #88]	@ (8004a58 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0a:	d1ee      	bne.n	80049ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b1e      	cmp	r3, #30
 8004a10:	d008      	beq.n	8004a24 <HAL_PWREx_ConfigSupply+0x7c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a16:	d005      	beq.n	8004a24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b1d      	cmp	r3, #29
 8004a1c:	d002      	beq.n	8004a24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b2d      	cmp	r3, #45	@ 0x2d
 8004a22:	d114      	bne.n	8004a4e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004a24:	f7fc fb46 	bl	80010b4 <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a2a:	e009      	b.n	8004a40 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a2c:	f7fc fb42 	bl	80010b4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a3a:	d901      	bls.n	8004a40 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e007      	b.n	8004a50 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4c:	d1ee      	bne.n	8004a2c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	58024800 	.word	0x58024800

08004a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08c      	sub	sp, #48	@ 0x30
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f000 bc1f 	b.w	80052ae <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80b3 	beq.w	8004be4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a7e:	4b95      	ldr	r3, [pc, #596]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a88:	4b92      	ldr	r3, [pc, #584]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d007      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x48>
 8004a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a96:	2b18      	cmp	r3, #24
 8004a98:	d112      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x64>
 8004a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d10d      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	4b8b      	ldr	r3, [pc, #556]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8098 	beq.w	8004be2 <HAL_RCC_OscConfig+0x186>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f040 8093 	bne.w	8004be2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e3f6      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac8:	d106      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x7c>
 8004aca:	4b82      	ldr	r3, [pc, #520]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a81      	ldr	r2, [pc, #516]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e058      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d112      	bne.n	8004b06 <HAL_RCC_OscConfig+0xaa>
 8004ae0:	4b7c      	ldr	r3, [pc, #496]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a7b      	ldr	r2, [pc, #492]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b79      	ldr	r3, [pc, #484]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a78      	ldr	r2, [pc, #480]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004af2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b76      	ldr	r3, [pc, #472]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a75      	ldr	r2, [pc, #468]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e041      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b0e:	d112      	bne.n	8004b36 <HAL_RCC_OscConfig+0xda>
 8004b10:	4b70      	ldr	r3, [pc, #448]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a6f      	ldr	r2, [pc, #444]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6c      	ldr	r2, [pc, #432]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b22:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a69      	ldr	r2, [pc, #420]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e029      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004b3e:	d112      	bne.n	8004b66 <HAL_RCC_OscConfig+0x10a>
 8004b40:	4b64      	ldr	r3, [pc, #400]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a63      	ldr	r2, [pc, #396]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b61      	ldr	r3, [pc, #388]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a60      	ldr	r2, [pc, #384]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b5e      	ldr	r3, [pc, #376]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e011      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
 8004b66:	4b5b      	ldr	r3, [pc, #364]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a5a      	ldr	r2, [pc, #360]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b58      	ldr	r3, [pc, #352]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a57      	ldr	r2, [pc, #348]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b55      	ldr	r3, [pc, #340]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a54      	ldr	r2, [pc, #336]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004b84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d013      	beq.n	8004bba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fc fa8f 	bl	80010b4 <HAL_GetTick>
 8004b96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9a:	f7fc fa8b 	bl	80010b4 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b64      	cmp	r3, #100	@ 0x64
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e380      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bac:	4b49      	ldr	r3, [pc, #292]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x13e>
 8004bb8:	e014      	b.n	8004be4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fc fa7b 	bl	80010b4 <HAL_GetTick>
 8004bbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc2:	f7fc fa77 	bl	80010b4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b64      	cmp	r3, #100	@ 0x64
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e36c      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x166>
 8004be0:	e000      	b.n	8004be4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 808c 	beq.w	8004d0a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf2:	4b38      	ldr	r3, [pc, #224]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bfa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bfc:	4b35      	ldr	r3, [pc, #212]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_RCC_OscConfig+0x1bc>
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	2b18      	cmp	r3, #24
 8004c0c:	d137      	bne.n	8004c7e <HAL_RCC_OscConfig+0x222>
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d132      	bne.n	8004c7e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c18:	4b2e      	ldr	r3, [pc, #184]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_OscConfig+0x1d4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e33e      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c30:	4b28      	ldr	r3, [pc, #160]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 0219 	bic.w	r2, r3, #25
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4925      	ldr	r1, [pc, #148]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fc fa37 	bl	80010b4 <HAL_GetTick>
 8004c46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fc fa33 	bl	80010b4 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e328      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	061b      	lsls	r3, r3, #24
 8004c76:	4917      	ldr	r1, [pc, #92]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c7c:	e045      	b.n	8004d0a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d028      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c86:	4b13      	ldr	r3, [pc, #76]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 0219 	bic.w	r2, r3, #25
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4910      	ldr	r1, [pc, #64]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fc fa0c 	bl	80010b4 <HAL_GetTick>
 8004c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fc fa08 	bl	80010b4 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e2fd      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb2:	4b08      	ldr	r3, [pc, #32]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbe:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	061b      	lsls	r3, r3, #24
 8004ccc:	4901      	ldr	r1, [pc, #4]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
 8004cd2:	e01a      	b.n	8004d0a <HAL_RCC_OscConfig+0x2ae>
 8004cd4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd8:	4b97      	ldr	r3, [pc, #604]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a96      	ldr	r2, [pc, #600]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fc f9e6 	bl	80010b4 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cec:	f7fc f9e2 	bl	80010b4 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e2d7      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cfe:	4b8e      	ldr	r3, [pc, #568]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d06a      	beq.n	8004dec <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d16:	4b88      	ldr	r3, [pc, #544]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d20:	4b85      	ldr	r3, [pc, #532]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d007      	beq.n	8004d3c <HAL_RCC_OscConfig+0x2e0>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b18      	cmp	r3, #24
 8004d30:	d11b      	bne.n	8004d6a <HAL_RCC_OscConfig+0x30e>
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d116      	bne.n	8004d6a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_RCC_OscConfig+0x2f8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	2b80      	cmp	r3, #128	@ 0x80
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e2ac      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d54:	4b78      	ldr	r3, [pc, #480]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	061b      	lsls	r3, r3, #24
 8004d62:	4975      	ldr	r1, [pc, #468]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d68:	e040      	b.n	8004dec <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d023      	beq.n	8004dba <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d72:	4b71      	ldr	r3, [pc, #452]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a70      	ldr	r2, [pc, #448]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fc f999 	bl	80010b4 <HAL_GetTick>
 8004d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d86:	f7fc f995 	bl	80010b4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e28a      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d98:	4b67      	ldr	r3, [pc, #412]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004da4:	4b64      	ldr	r3, [pc, #400]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	061b      	lsls	r3, r3, #24
 8004db2:	4961      	ldr	r1, [pc, #388]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60cb      	str	r3, [r1, #12]
 8004db8:	e018      	b.n	8004dec <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dba:	4b5f      	ldr	r3, [pc, #380]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004dc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc6:	f7fc f975 	bl	80010b4 <HAL_GetTick>
 8004dca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dce:	f7fc f971 	bl	80010b4 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e266      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004de0:	4b55      	ldr	r3, [pc, #340]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d036      	beq.n	8004e66 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d019      	beq.n	8004e34 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e00:	4b4d      	ldr	r3, [pc, #308]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e04:	4a4c      	ldr	r2, [pc, #304]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fc f952 	bl	80010b4 <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e14:	f7fc f94e 	bl	80010b4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e243      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e26:	4b44      	ldr	r3, [pc, #272]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x3b8>
 8004e32:	e018      	b.n	8004e66 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e34:	4b40      	ldr	r3, [pc, #256]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e38:	4a3f      	ldr	r2, [pc, #252]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e40:	f7fc f938 	bl	80010b4 <HAL_GetTick>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e48:	f7fc f934 	bl	80010b4 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e229      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e5a:	4b37      	ldr	r3, [pc, #220]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d036      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d019      	beq.n	8004eae <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004e80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e86:	f7fc f915 	bl	80010b4 <HAL_GetTick>
 8004e8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e8e:	f7fc f911 	bl	80010b4 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e206      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ea0:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x432>
 8004eac:	e018      	b.n	8004ee0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eae:	4b22      	ldr	r3, [pc, #136]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eba:	f7fc f8fb 	bl	80010b4 <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ec2:	f7fc f8f7 	bl	80010b4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e1ec      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ed4:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80af 	beq.w	800504c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eee:	4b13      	ldr	r3, [pc, #76]	@ (8004f3c <HAL_RCC_OscConfig+0x4e0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a12      	ldr	r2, [pc, #72]	@ (8004f3c <HAL_RCC_OscConfig+0x4e0>)
 8004ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efa:	f7fc f8db 	bl	80010b4 <HAL_GetTick>
 8004efe:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f02:	f7fc f8d7 	bl	80010b4 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b64      	cmp	r3, #100	@ 0x64
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e1cc      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f14:	4b09      	ldr	r3, [pc, #36]	@ (8004f3c <HAL_RCC_OscConfig+0x4e0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d10b      	bne.n	8004f40 <HAL_RCC_OscConfig+0x4e4>
 8004f28:	4b03      	ldr	r3, [pc, #12]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2c:	4a02      	ldr	r2, [pc, #8]	@ (8004f38 <HAL_RCC_OscConfig+0x4dc>)
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f34:	e05b      	b.n	8004fee <HAL_RCC_OscConfig+0x592>
 8004f36:	bf00      	nop
 8004f38:	58024400 	.word	0x58024400
 8004f3c:	58024800 	.word	0x58024800
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d112      	bne.n	8004f6e <HAL_RCC_OscConfig+0x512>
 8004f48:	4b9d      	ldr	r3, [pc, #628]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	4a9c      	ldr	r2, [pc, #624]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f54:	4b9a      	ldr	r3, [pc, #616]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4a99      	ldr	r2, [pc, #612]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f60:	4b97      	ldr	r3, [pc, #604]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f64:	4a96      	ldr	r2, [pc, #600]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f66:	f023 0304 	bic.w	r3, r3, #4
 8004f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6c:	e03f      	b.n	8004fee <HAL_RCC_OscConfig+0x592>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d112      	bne.n	8004f9c <HAL_RCC_OscConfig+0x540>
 8004f76:	4b92      	ldr	r3, [pc, #584]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	4a91      	ldr	r2, [pc, #580]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f7c:	f043 0304 	orr.w	r3, r3, #4
 8004f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f82:	4b8f      	ldr	r3, [pc, #572]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f86:	4a8e      	ldr	r2, [pc, #568]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8e:	4b8c      	ldr	r3, [pc, #560]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f92:	4a8b      	ldr	r2, [pc, #556]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f9a:	e028      	b.n	8004fee <HAL_RCC_OscConfig+0x592>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b85      	cmp	r3, #133	@ 0x85
 8004fa2:	d112      	bne.n	8004fca <HAL_RCC_OscConfig+0x56e>
 8004fa4:	4b86      	ldr	r3, [pc, #536]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a85      	ldr	r2, [pc, #532]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb0:	4b83      	ldr	r3, [pc, #524]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb4:	4a82      	ldr	r2, [pc, #520]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fbc:	4b80      	ldr	r3, [pc, #512]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc0:	4a7f      	ldr	r2, [pc, #508]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc8:	e011      	b.n	8004fee <HAL_RCC_OscConfig+0x592>
 8004fca:	4b7d      	ldr	r3, [pc, #500]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	4a7c      	ldr	r2, [pc, #496]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	4a79      	ldr	r2, [pc, #484]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fdc:	f023 0304 	bic.w	r3, r3, #4
 8004fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe2:	4b77      	ldr	r3, [pc, #476]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	4a76      	ldr	r2, [pc, #472]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8004fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d015      	beq.n	8005022 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff6:	f7fc f85d 	bl	80010b4 <HAL_GetTick>
 8004ffa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffe:	f7fc f859 	bl	80010b4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500c:	4293      	cmp	r3, r2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e14c      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005014:	4b6a      	ldr	r3, [pc, #424]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0ee      	beq.n	8004ffe <HAL_RCC_OscConfig+0x5a2>
 8005020:	e014      	b.n	800504c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fc f847 	bl	80010b4 <HAL_GetTick>
 8005026:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005028:	e00a      	b.n	8005040 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fc f843 	bl	80010b4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e136      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005040:	4b5f      	ldr	r3, [pc, #380]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ee      	bne.n	800502a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 812b 	beq.w	80052ac <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005056:	4b5a      	ldr	r3, [pc, #360]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800505e:	2b18      	cmp	r3, #24
 8005060:	f000 80bb 	beq.w	80051da <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	2b02      	cmp	r3, #2
 800506a:	f040 8095 	bne.w	8005198 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506e:	4b54      	ldr	r3, [pc, #336]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a53      	ldr	r2, [pc, #332]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507a:	f7fc f81b 	bl	80010b4 <HAL_GetTick>
 800507e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005082:	f7fc f817 	bl	80010b4 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e10c      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005094:	4b4a      	ldr	r3, [pc, #296]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a0:	4b47      	ldr	r3, [pc, #284]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 80050a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050a4:	4b47      	ldr	r3, [pc, #284]	@ (80051c4 <HAL_RCC_OscConfig+0x768>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050b0:	0112      	lsls	r2, r2, #4
 80050b2:	430a      	orrs	r2, r1
 80050b4:	4942      	ldr	r1, [pc, #264]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	628b      	str	r3, [r1, #40]	@ 0x28
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	3b01      	subs	r3, #1
 80050c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c8:	3b01      	subs	r3, #1
 80050ca:	025b      	lsls	r3, r3, #9
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	3b01      	subs	r3, #1
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	3b01      	subs	r3, #1
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050ea:	4935      	ldr	r1, [pc, #212]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050f0:	4b33      	ldr	r3, [pc, #204]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	4a32      	ldr	r2, [pc, #200]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050fc:	4b30      	ldr	r3, [pc, #192]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 80050fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005100:	4b31      	ldr	r3, [pc, #196]	@ (80051c8 <HAL_RCC_OscConfig+0x76c>)
 8005102:	4013      	ands	r3, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005108:	00d2      	lsls	r2, r2, #3
 800510a:	492d      	ldr	r1, [pc, #180]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800510c:	4313      	orrs	r3, r2
 800510e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005110:	4b2b      	ldr	r3, [pc, #172]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005114:	f023 020c 	bic.w	r2, r3, #12
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	4928      	ldr	r1, [pc, #160]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800511e:	4313      	orrs	r3, r2
 8005120:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005122:	4b27      	ldr	r3, [pc, #156]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	f023 0202 	bic.w	r2, r3, #2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512e:	4924      	ldr	r1, [pc, #144]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005130:	4313      	orrs	r3, r2
 8005132:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005134:	4b22      	ldr	r3, [pc, #136]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	4a21      	ldr	r2, [pc, #132]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005140:	4b1f      	ldr	r3, [pc, #124]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800514a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800514c:	4b1c      	ldr	r3, [pc, #112]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	4a1b      	ldr	r2, [pc, #108]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005152:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005158:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	4a18      	ldr	r2, [pc, #96]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b16      	ldr	r3, [pc, #88]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a15      	ldr	r2, [pc, #84]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800516a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800516e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fb ffa0 	bl	80010b4 <HAL_GetTick>
 8005174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005178:	f7fb ff9c 	bl	80010b4 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e091      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x71c>
 8005196:	e089      	b.n	80052ac <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a08      	ldr	r2, [pc, #32]	@ (80051c0 <HAL_RCC_OscConfig+0x764>)
 800519e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fb ff86 	bl	80010b4 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051aa:	e00f      	b.n	80051cc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fb ff82 	bl	80010b4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d908      	bls.n	80051cc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e077      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
 80051be:	bf00      	nop
 80051c0:	58024400 	.word	0x58024400
 80051c4:	fffffc0c 	.word	0xfffffc0c
 80051c8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051cc:	4b3a      	ldr	r3, [pc, #232]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e9      	bne.n	80051ac <HAL_RCC_OscConfig+0x750>
 80051d8:	e068      	b.n	80052ac <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051da:	4b37      	ldr	r3, [pc, #220]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 80051dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051e0:	4b35      	ldr	r3, [pc, #212]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d031      	beq.n	8005252 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f003 0203 	and.w	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d12a      	bne.n	8005252 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005208:	429a      	cmp	r2, r3
 800520a:	d122      	bne.n	8005252 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005216:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d11a      	bne.n	8005252 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	0a5b      	lsrs	r3, r3, #9
 8005220:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005228:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d111      	bne.n	8005252 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800523c:	429a      	cmp	r2, r3
 800523e:	d108      	bne.n	8005252 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	0e1b      	lsrs	r3, r3, #24
 8005244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d001      	beq.n	8005256 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e02b      	b.n	80052ae <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005256:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 8005258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525a:	08db      	lsrs	r3, r3, #3
 800525c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005260:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	429a      	cmp	r2, r3
 800526a:	d01f      	beq.n	80052ac <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800526c:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 800526e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005270:	4a11      	ldr	r2, [pc, #68]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005278:	f7fb ff1c 	bl	80010b4 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800527e:	bf00      	nop
 8005280:	f7fb ff18 	bl	80010b4 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	4293      	cmp	r3, r2
 800528a:	d0f9      	beq.n	8005280 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800528c:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 800528e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005290:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <HAL_RCC_OscConfig+0x860>)
 8005292:	4013      	ands	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005298:	00d2      	lsls	r2, r2, #3
 800529a:	4907      	ldr	r1, [pc, #28]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052a0:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 80052a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <HAL_RCC_OscConfig+0x85c>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3730      	adds	r7, #48	@ 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	ffff0007 	.word	0xffff0007

080052c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e19c      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d4:	4b8a      	ldr	r3, [pc, #552]	@ (8005500 <HAL_RCC_ClockConfig+0x240>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d910      	bls.n	8005304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e2:	4b87      	ldr	r3, [pc, #540]	@ (8005500 <HAL_RCC_ClockConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 020f 	bic.w	r2, r3, #15
 80052ea:	4985      	ldr	r1, [pc, #532]	@ (8005500 <HAL_RCC_ClockConfig+0x240>)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f2:	4b83      	ldr	r3, [pc, #524]	@ (8005500 <HAL_RCC_ClockConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e184      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d010      	beq.n	8005332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	4b7b      	ldr	r3, [pc, #492]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800531c:	429a      	cmp	r2, r3
 800531e:	d908      	bls.n	8005332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005320:	4b78      	ldr	r3, [pc, #480]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4975      	ldr	r1, [pc, #468]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 800532e:	4313      	orrs	r3, r2
 8005330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	4b70      	ldr	r3, [pc, #448]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800534a:	429a      	cmp	r2, r3
 800534c:	d908      	bls.n	8005360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800534e:	4b6d      	ldr	r3, [pc, #436]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	496a      	ldr	r1, [pc, #424]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 800535c:	4313      	orrs	r3, r2
 800535e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	4b64      	ldr	r3, [pc, #400]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005378:	429a      	cmp	r2, r3
 800537a:	d908      	bls.n	800538e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800537c:	4b61      	ldr	r3, [pc, #388]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	495e      	ldr	r1, [pc, #376]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 800538a:	4313      	orrs	r3, r2
 800538c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d010      	beq.n	80053bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	4b59      	ldr	r3, [pc, #356]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d908      	bls.n	80053bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053aa:	4b56      	ldr	r3, [pc, #344]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	4953      	ldr	r1, [pc, #332]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d010      	beq.n	80053ea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d908      	bls.n	80053ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f023 020f 	bic.w	r2, r3, #15
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4947      	ldr	r1, [pc, #284]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d055      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053f6:	4b43      	ldr	r3, [pc, #268]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	4940      	ldr	r1, [pc, #256]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005404:	4313      	orrs	r3, r2
 8005406:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d107      	bne.n	8005420 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005410:	4b3c      	ldr	r3, [pc, #240]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d121      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0f6      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d107      	bne.n	8005438 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005428:	4b36      	ldr	r3, [pc, #216]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d115      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0ea      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d107      	bne.n	8005450 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005440:	4b30      	ldr	r3, [pc, #192]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0de      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005450:	4b2c      	ldr	r3, [pc, #176]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0d6      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005460:	4b28      	ldr	r3, [pc, #160]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f023 0207 	bic.w	r2, r3, #7
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4925      	ldr	r1, [pc, #148]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 800546e:	4313      	orrs	r3, r2
 8005470:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005472:	f7fb fe1f 	bl	80010b4 <HAL_GetTick>
 8005476:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005478:	e00a      	b.n	8005490 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547a:	f7fb fe1b 	bl	80010b4 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e0be      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005490:	4b1c      	ldr	r3, [pc, #112]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	429a      	cmp	r2, r3
 80054a0:	d1eb      	bne.n	800547a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	4b14      	ldr	r3, [pc, #80]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d208      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054be:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f023 020f 	bic.w	r2, r3, #15
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	490e      	ldr	r1, [pc, #56]	@ (8005504 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <HAL_RCC_ClockConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d214      	bcs.n	8005508 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054de:	4b08      	ldr	r3, [pc, #32]	@ (8005500 <HAL_RCC_ClockConfig+0x240>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 020f 	bic.w	r2, r3, #15
 80054e6:	4906      	ldr	r1, [pc, #24]	@ (8005500 <HAL_RCC_ClockConfig+0x240>)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ee:	4b04      	ldr	r3, [pc, #16]	@ (8005500 <HAL_RCC_ClockConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d005      	beq.n	8005508 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e086      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
 8005500:	52002000 	.word	0x52002000
 8005504:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d010      	beq.n	8005536 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	4b3f      	ldr	r3, [pc, #252]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005520:	429a      	cmp	r2, r3
 8005522:	d208      	bcs.n	8005536 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005524:	4b3c      	ldr	r3, [pc, #240]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	4939      	ldr	r1, [pc, #228]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005532:	4313      	orrs	r3, r2
 8005534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d010      	beq.n	8005564 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800554e:	429a      	cmp	r2, r3
 8005550:	d208      	bcs.n	8005564 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005552:	4b31      	ldr	r3, [pc, #196]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	492e      	ldr	r1, [pc, #184]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005560:	4313      	orrs	r3, r2
 8005562:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	4b28      	ldr	r3, [pc, #160]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800557c:	429a      	cmp	r2, r3
 800557e:	d208      	bcs.n	8005592 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005580:	4b25      	ldr	r3, [pc, #148]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	4922      	ldr	r1, [pc, #136]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 800558e:	4313      	orrs	r3, r2
 8005590:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d208      	bcs.n	80055c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	4917      	ldr	r1, [pc, #92]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80055c0:	f000 f89e 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 80055c4:	4602      	mov	r2, r0
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	4912      	ldr	r1, [pc, #72]	@ (800561c <HAL_RCC_ClockConfig+0x35c>)
 80055d2:	5ccb      	ldrb	r3, [r1, r3]
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
 80055dc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80055de:	4b0e      	ldr	r3, [pc, #56]	@ (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	4a0d      	ldr	r2, [pc, #52]	@ (800561c <HAL_RCC_ClockConfig+0x35c>)
 80055e8:	5cd3      	ldrb	r3, [r2, r3]
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005620 <HAL_RCC_ClockConfig+0x360>)
 80055f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005624 <HAL_RCC_ClockConfig+0x364>)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005628 <HAL_RCC_ClockConfig+0x368>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fb fd0c 	bl	8001020 <HAL_InitTick>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	58024400 	.word	0x58024400
 800561c:	08009d30 	.word	0x08009d30
 8005620:	24000004 	.word	0x24000004
 8005624:	24000000 	.word	0x24000000
 8005628:	24000008 	.word	0x24000008

0800562c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08c      	sub	sp, #48	@ 0x30
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d12a      	bne.n	8005694 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800563e:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 8005640:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005644:	4a2b      	ldr	r2, [pc, #172]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800564e:	4b29      	ldr	r3, [pc, #164]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 8005650:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800565c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005662:	2302      	movs	r3, #2
 8005664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005666:	2303      	movs	r3, #3
 8005668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566a:	2300      	movs	r3, #0
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800566e:	2300      	movs	r3, #0
 8005670:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005672:	f107 031c 	add.w	r3, r7, #28
 8005676:	4619      	mov	r1, r3
 8005678:	481f      	ldr	r0, [pc, #124]	@ (80056f8 <HAL_RCC_MCOConfig+0xcc>)
 800567a:	f7fe fedb 	bl	8004434 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800567e:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	430b      	orrs	r3, r1
 800568c:	4919      	ldr	r1, [pc, #100]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 800568e:	4313      	orrs	r3, r2
 8005690:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005692:	e02a      	b.n	80056ea <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005694:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 8005696:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800569a:	4a16      	ldr	r2, [pc, #88]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80056a4:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 80056a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80056b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b8:	2302      	movs	r3, #2
 80056ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056bc:	2303      	movs	r3, #3
 80056be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80056c4:	2300      	movs	r3, #0
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80056c8:	f107 031c 	add.w	r3, r7, #28
 80056cc:	4619      	mov	r1, r3
 80056ce:	480b      	ldr	r0, [pc, #44]	@ (80056fc <HAL_RCC_MCOConfig+0xd0>)
 80056d0:	f7fe feb0 	bl	8004434 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80056d4:	4b07      	ldr	r3, [pc, #28]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	01d9      	lsls	r1, r3, #7
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	430b      	orrs	r3, r1
 80056e4:	4903      	ldr	r1, [pc, #12]	@ (80056f4 <HAL_RCC_MCOConfig+0xc8>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
}
 80056ea:	bf00      	nop
 80056ec:	3730      	adds	r7, #48	@ 0x30
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	58024400 	.word	0x58024400
 80056f8:	58020000 	.word	0x58020000
 80056fc:	58020800 	.word	0x58020800

08005700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	b089      	sub	sp, #36	@ 0x24
 8005704:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005706:	4bb3      	ldr	r3, [pc, #716]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800570e:	2b18      	cmp	r3, #24
 8005710:	f200 8155 	bhi.w	80059be <HAL_RCC_GetSysClockFreq+0x2be>
 8005714:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005781 	.word	0x08005781
 8005720:	080059bf 	.word	0x080059bf
 8005724:	080059bf 	.word	0x080059bf
 8005728:	080059bf 	.word	0x080059bf
 800572c:	080059bf 	.word	0x080059bf
 8005730:	080059bf 	.word	0x080059bf
 8005734:	080059bf 	.word	0x080059bf
 8005738:	080059bf 	.word	0x080059bf
 800573c:	080057a7 	.word	0x080057a7
 8005740:	080059bf 	.word	0x080059bf
 8005744:	080059bf 	.word	0x080059bf
 8005748:	080059bf 	.word	0x080059bf
 800574c:	080059bf 	.word	0x080059bf
 8005750:	080059bf 	.word	0x080059bf
 8005754:	080059bf 	.word	0x080059bf
 8005758:	080059bf 	.word	0x080059bf
 800575c:	080057ad 	.word	0x080057ad
 8005760:	080059bf 	.word	0x080059bf
 8005764:	080059bf 	.word	0x080059bf
 8005768:	080059bf 	.word	0x080059bf
 800576c:	080059bf 	.word	0x080059bf
 8005770:	080059bf 	.word	0x080059bf
 8005774:	080059bf 	.word	0x080059bf
 8005778:	080059bf 	.word	0x080059bf
 800577c:	080057b3 	.word	0x080057b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005780:	4b94      	ldr	r3, [pc, #592]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d009      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800578c:	4b91      	ldr	r3, [pc, #580]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	4a90      	ldr	r2, [pc, #576]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800579e:	e111      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057a0:	4b8d      	ldr	r3, [pc, #564]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057a2:	61bb      	str	r3, [r7, #24]
      break;
 80057a4:	e10e      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057a6:	4b8d      	ldr	r3, [pc, #564]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057a8:	61bb      	str	r3, [r7, #24]
      break;
 80057aa:	e10b      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057ac:	4b8c      	ldr	r3, [pc, #560]	@ (80059e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057ae:	61bb      	str	r3, [r7, #24]
      break;
 80057b0:	e108      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057b2:	4b88      	ldr	r3, [pc, #544]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057bc:	4b85      	ldr	r3, [pc, #532]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057c8:	4b82      	ldr	r3, [pc, #520]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057d2:	4b80      	ldr	r3, [pc, #512]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d6:	08db      	lsrs	r3, r3, #3
 80057d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80e1 	beq.w	80059b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	f000 8083 	beq.w	8005904 <HAL_RCC_GetSysClockFreq+0x204>
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b02      	cmp	r3, #2
 8005802:	f200 80a1 	bhi.w	8005948 <HAL_RCC_GetSysClockFreq+0x248>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_RCC_GetSysClockFreq+0x114>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d056      	beq.n	80058c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005812:	e099      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005814:	4b6f      	ldr	r3, [pc, #444]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d02d      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005820:	4b6c      	ldr	r3, [pc, #432]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	08db      	lsrs	r3, r3, #3
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	4a6b      	ldr	r2, [pc, #428]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
 8005830:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b62      	ldr	r3, [pc, #392]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a02 	vldr	s12, [r7, #8]
 800585e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800587a:	e087      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b51      	ldr	r3, [pc, #324]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589e:	ed97 6a02 	vldr	s12, [r7, #8]
 80058a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058be:	e065      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b40      	ldr	r3, [pc, #256]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005902:	e043      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b2f      	ldr	r3, [pc, #188]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005926:	ed97 6a02 	vldr	s12, [r7, #8]
 800592a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005946:	e021      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005952:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8005956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595a:	4b1e      	ldr	r3, [pc, #120]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596a:	ed97 6a02 	vldr	s12, [r7, #8]
 800596e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800598a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800598c:	4b11      	ldr	r3, [pc, #68]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	0a5b      	lsrs	r3, r3, #9
 8005992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005996:	3301      	adds	r3, #1
 8005998:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b0:	ee17 3a90 	vmov	r3, s15
 80059b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059b6:	e005      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61bb      	str	r3, [r7, #24]
      break;
 80059bc:	e002      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059be:	4b07      	ldr	r3, [pc, #28]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059c0:	61bb      	str	r3, [r7, #24]
      break;
 80059c2:	bf00      	nop
  }

  return sysclockfreq;
 80059c4:	69bb      	ldr	r3, [r7, #24]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3724      	adds	r7, #36	@ 0x24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	58024400 	.word	0x58024400
 80059d8:	03d09000 	.word	0x03d09000
 80059dc:	003d0900 	.word	0x003d0900
 80059e0:	007a1200 	.word	0x007a1200
 80059e4:	46000000 	.word	0x46000000
 80059e8:	4c742400 	.word	0x4c742400
 80059ec:	4a742400 	.word	0x4a742400
 80059f0:	4af42400 	.word	0x4af42400

080059f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80059fa:	f7ff fe81 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 80059fe:	4602      	mov	r2, r0
 8005a00:	4b10      	ldr	r3, [pc, #64]	@ (8005a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	490f      	ldr	r1, [pc, #60]	@ (8005a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a0c:	5ccb      	ldrb	r3, [r1, r3]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	fa22 f303 	lsr.w	r3, r2, r3
 8005a16:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005a18:	4b0a      	ldr	r3, [pc, #40]	@ (8005a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	4a09      	ldr	r2, [pc, #36]	@ (8005a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a22:	5cd3      	ldrb	r3, [r2, r3]
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2e:	4a07      	ldr	r2, [pc, #28]	@ (8005a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a32:	4a07      	ldr	r2, [pc, #28]	@ (8005a50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a38:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	58024400 	.word	0x58024400
 8005a48:	08009d30 	.word	0x08009d30
 8005a4c:	24000004 	.word	0x24000004
 8005a50:	24000000 	.word	0x24000000

08005a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005a58:	f7ff ffcc 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	4904      	ldr	r1, [pc, #16]	@ (8005a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a6a:	5ccb      	ldrb	r3, [r1, r3]
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	58024400 	.word	0x58024400
 8005a7c:	08009d30 	.word	0x08009d30

08005a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005a84:	f7ff ffb6 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	0a1b      	lsrs	r3, r3, #8
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	4904      	ldr	r1, [pc, #16]	@ (8005aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a96:	5ccb      	ldrb	r3, [r1, r3]
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	08009d30 	.word	0x08009d30

08005aac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab0:	b0c8      	sub	sp, #288	@ 0x120
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ad0:	2500      	movs	r5, #0
 8005ad2:	ea54 0305 	orrs.w	r3, r4, r5
 8005ad6:	d049      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ade:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ae2:	d02f      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ae4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ae8:	d828      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005aea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005aee:	d01a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af4:	d822      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afe:	d007      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b00:	e01c      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b02:	4ba7      	ldr	r3, [pc, #668]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	4aa6      	ldr	r2, [pc, #664]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b0e:	e01a      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b14:	3308      	adds	r3, #8
 8005b16:	2102      	movs	r1, #2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 fc99 	bl	8007450 <RCCEx_PLL2_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b24:	e00f      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b2a:	3328      	adds	r3, #40	@ 0x28
 8005b2c:	2102      	movs	r1, #2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fd40 	bl	80075b4 <RCCEx_PLL3_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b3a:	e004      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b42:	e000      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b4e:	4b94      	ldr	r3, [pc, #592]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b5c:	4a90      	ldr	r2, [pc, #576]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b62:	e003      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b78:	f04f 0900 	mov.w	r9, #0
 8005b7c:	ea58 0309 	orrs.w	r3, r8, r9
 8005b80:	d047      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d82a      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005ba9 	.word	0x08005ba9
 8005b98:	08005bb7 	.word	0x08005bb7
 8005b9c:	08005bcd 	.word	0x08005bcd
 8005ba0:	08005beb 	.word	0x08005beb
 8005ba4:	08005beb 	.word	0x08005beb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba8:	4b7d      	ldr	r3, [pc, #500]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	4a7c      	ldr	r2, [pc, #496]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb4:	e01a      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bba:	3308      	adds	r3, #8
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fc46 	bl	8007450 <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bca:	e00f      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bd0:	3328      	adds	r3, #40	@ 0x28
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fced 	bl	80075b4 <RCCEx_PLL3_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be0:	e004      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005be8:	e000      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf8:	f023 0107 	bic.w	r1, r3, #7
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c02:	4a67      	ldr	r2, [pc, #412]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c08:	e003      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005c1e:	f04f 0b00 	mov.w	fp, #0
 8005c22:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c26:	d054      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005c32:	d036      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005c34:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005c38:	d82f      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c3e:	d032      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c44:	d829      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c48:	d02f      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005c4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c4c:	d825      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c4e:	2b80      	cmp	r3, #128	@ 0x80
 8005c50:	d018      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005c52:	2b80      	cmp	r3, #128	@ 0x80
 8005c54:	d821      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005c5a:	2b40      	cmp	r3, #64	@ 0x40
 8005c5c:	d007      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005c5e:	e01c      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c60:	4b4f      	ldr	r3, [pc, #316]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c64:	4a4e      	ldr	r2, [pc, #312]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005c6c:	e01e      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c72:	3308      	adds	r3, #8
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fbea 	bl	8007450 <RCCEx_PLL2_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005c82:	e013      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c88:	3328      	adds	r3, #40	@ 0x28
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fc91 	bl	80075b4 <RCCEx_PLL3_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ca0:	e004      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005ca2:	bf00      	nop
 8005ca4:	e002      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005ca6:	bf00      	nop
 8005ca8:	e000      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc2:	4a37      	ldr	r2, [pc, #220]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cc8:	e003      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005cde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ce8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cec:	460b      	mov	r3, r1
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	d05c      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005cfc:	d03b      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005cfe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005d02:	d834      	bhi.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d08:	d037      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d0e:	d82e      	bhi.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005d10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d14:	d033      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d16:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d1a:	d828      	bhi.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d20:	d01a      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d26:	d822      	bhi.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d30:	d007      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005d32:	e01c      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d34:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	4a19      	ldr	r2, [pc, #100]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005d40:	e01e      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d46:	3308      	adds	r3, #8
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 fb80 	bl	8007450 <RCCEx_PLL2_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005d56:	e013      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d5c:	3328      	adds	r3, #40	@ 0x28
 8005d5e:	2100      	movs	r1, #0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 fc27 	bl	80075b4 <RCCEx_PLL3_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005d6c:	e008      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d74:	e004      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005d76:	bf00      	nop
 8005d78:	e002      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005d7a:	bf00      	nop
 8005d7c:	e000      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10d      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d8c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d96:	4a02      	ldr	r2, [pc, #8]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d9c:	e006      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005d9e:	bf00      	nop
 8005da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005da8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005dc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	d03a      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd2:	2b30      	cmp	r3, #48	@ 0x30
 8005dd4:	d01f      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005dd6:	2b30      	cmp	r3, #48	@ 0x30
 8005dd8:	d819      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d00c      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d815      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d019      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d111      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dea:	4bae      	ldr	r3, [pc, #696]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	4aad      	ldr	r2, [pc, #692]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005df6:	e011      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	2102      	movs	r1, #2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fb25 	bl	8007450 <RCCEx_PLL2_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e0c:	e006      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e14:	e002      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e24:	4b9f      	ldr	r3, [pc, #636]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e32:	4a9c      	ldr	r2, [pc, #624]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e38:	e003      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	d051      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e6c:	d035      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005e6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e72:	d82e      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e78:	d031      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005e7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e7e:	d828      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e84:	d01a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e8a:	d822      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e94:	d007      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005e96:	e01c      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e98:	4b82      	ldr	r3, [pc, #520]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	4a81      	ldr	r2, [pc, #516]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea4:	e01c      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eaa:	3308      	adds	r3, #8
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 face 	bl	8007450 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eba:	e011      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec0:	3328      	adds	r3, #40	@ 0x28
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fb75 	bl	80075b4 <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e006      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ed8:	e002      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ee8:	4b6e      	ldr	r3, [pc, #440]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef6:	4a6b      	ldr	r2, [pc, #428]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005efc:	e003      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f16:	2300      	movs	r3, #0
 8005f18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f20:	460b      	mov	r3, r1
 8005f22:	4313      	orrs	r3, r2
 8005f24:	d053      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f30:	d033      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005f32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f36:	d82c      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f3c:	d02f      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005f3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f42:	d826      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f48:	d02b      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f4e:	d820      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f54:	d012      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f5a:	d81a      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d022      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f64:	d115      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fa6e 	bl	8007450 <RCCEx_PLL2_Config>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f7a:	e015      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f80:	3328      	adds	r3, #40	@ 0x28
 8005f82:	2101      	movs	r1, #1
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 fb15 	bl	80075b4 <RCCEx_PLL3_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f90:	e00a      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f98:	e006      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f9a:	bf00      	nop
 8005f9c:	e004      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fbe:	4a39      	ldr	r2, [pc, #228]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fc4:	e003      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fe4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d060      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ff2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ff6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005ffa:	d039      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005ffc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006000:	d832      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006006:	d035      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800600c:	d82c      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006012:	d031      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006018:	d826      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800601a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800601e:	d02d      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006020:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006024:	d820      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800602a:	d012      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800602c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006030:	d81a      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d024      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800603a:	d115      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800603c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006040:	3308      	adds	r3, #8
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f001 fa03 	bl	8007450 <RCCEx_PLL2_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006050:	e017      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006056:	3328      	adds	r3, #40	@ 0x28
 8006058:	2101      	movs	r1, #1
 800605a:	4618      	mov	r0, r3
 800605c:	f001 faaa 	bl	80075b4 <RCCEx_PLL3_Config>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006066:	e00c      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800606e:	e008      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006070:	bf00      	nop
 8006072:	e006      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006074:	bf00      	nop
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10e      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800608a:	4b06      	ldr	r3, [pc, #24]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800609a:	4a02      	ldr	r2, [pc, #8]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800609c:	430b      	orrs	r3, r1
 800609e:	6593      	str	r3, [r2, #88]	@ 0x58
 80060a0:	e006      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80060a2:	bf00      	nop
 80060a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060ca:	460b      	mov	r3, r1
 80060cc:	4313      	orrs	r3, r2
 80060ce:	d037      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060da:	d00e      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060e0:	d816      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d018      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ea:	d111      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ec:	4bc4      	ldr	r3, [pc, #784]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	4ac3      	ldr	r2, [pc, #780]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060f8:	e00f      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060fe:	3308      	adds	r3, #8
 8006100:	2101      	movs	r1, #1
 8006102:	4618      	mov	r0, r3
 8006104:	f001 f9a4 	bl	8007450 <RCCEx_PLL2_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800610e:	e004      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006122:	4bb7      	ldr	r3, [pc, #732]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006126:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800612a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800612e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006130:	4ab3      	ldr	r2, [pc, #716]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006132:	430b      	orrs	r3, r1
 8006134:	6513      	str	r3, [r2, #80]	@ 0x50
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800613c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800614c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006150:	2300      	movs	r3, #0
 8006152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006156:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800615a:	460b      	mov	r3, r1
 800615c:	4313      	orrs	r3, r2
 800615e:	d039      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006166:	2b03      	cmp	r3, #3
 8006168:	d81c      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800616a:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061ad 	.word	0x080061ad
 8006174:	08006181 	.word	0x08006181
 8006178:	0800618f 	.word	0x0800618f
 800617c:	080061ad 	.word	0x080061ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006180:	4b9f      	ldr	r3, [pc, #636]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	4a9e      	ldr	r2, [pc, #632]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800618a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800618c:	e00f      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800618e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006192:	3308      	adds	r3, #8
 8006194:	2102      	movs	r1, #2
 8006196:	4618      	mov	r0, r3
 8006198:	f001 f95a 	bl	8007450 <RCCEx_PLL2_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061a2:	e004      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061aa:	e000      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80061ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061b6:	4b92      	ldr	r3, [pc, #584]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ba:	f023 0103 	bic.w	r1, r3, #3
 80061be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c4:	4a8e      	ldr	r2, [pc, #568]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c6:	430b      	orrs	r3, r1
 80061c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061ca:	e003      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f000 8099 	beq.w	8006328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061f6:	4b83      	ldr	r3, [pc, #524]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a82      	ldr	r2, [pc, #520]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006202:	f7fa ff57 	bl	80010b4 <HAL_GetTick>
 8006206:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800620a:	e00b      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800620c:	f7fa ff52 	bl	80010b4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b64      	cmp	r3, #100	@ 0x64
 800621a:	d903      	bls.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006222:	e005      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006224:	4b77      	ldr	r3, [pc, #476]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0ed      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006230:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006234:	2b00      	cmp	r3, #0
 8006236:	d173      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006238:	4b71      	ldr	r3, [pc, #452]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800623a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800623c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006244:	4053      	eors	r3, r2
 8006246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800624a:	2b00      	cmp	r3, #0
 800624c:	d015      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800624e:	4b6c      	ldr	r3, [pc, #432]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006256:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800625a:	4b69      	ldr	r3, [pc, #420]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625e:	4a68      	ldr	r2, [pc, #416]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006264:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006266:	4b66      	ldr	r3, [pc, #408]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626a:	4a65      	ldr	r2, [pc, #404]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006270:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006272:	4a63      	ldr	r2, [pc, #396]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006278:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800627a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800627e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006286:	d118      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006288:	f7fa ff14 	bl	80010b4 <HAL_GetTick>
 800628c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006290:	e00d      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006292:	f7fa ff0f 	bl	80010b4 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800629c:	1ad2      	subs	r2, r2, r3
 800629e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d903      	bls.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80062ac:	e005      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ae:	4b54      	ldr	r3, [pc, #336]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0eb      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d129      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062d2:	d10e      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062e4:	091a      	lsrs	r2, r3, #4
 80062e6:	4b48      	ldr	r3, [pc, #288]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	4a45      	ldr	r2, [pc, #276]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6113      	str	r3, [r2, #16]
 80062f0:	e005      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062f2:	4b43      	ldr	r3, [pc, #268]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	4a42      	ldr	r2, [pc, #264]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062fc:	6113      	str	r3, [r2, #16]
 80062fe:	4b40      	ldr	r3, [pc, #256]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006300:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800630a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630e:	4a3c      	ldr	r2, [pc, #240]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006310:	430b      	orrs	r3, r1
 8006312:	6713      	str	r3, [r2, #112]	@ 0x70
 8006314:	e008      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006316:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800631a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006324:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f002 0301 	and.w	r3, r2, #1
 8006334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800633e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006342:	460b      	mov	r3, r1
 8006344:	4313      	orrs	r3, r2
 8006346:	f000 8090 	beq.w	800646a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800634a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006352:	2b28      	cmp	r3, #40	@ 0x28
 8006354:	d870      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006356:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006441 	.word	0x08006441
 8006360:	08006439 	.word	0x08006439
 8006364:	08006439 	.word	0x08006439
 8006368:	08006439 	.word	0x08006439
 800636c:	08006439 	.word	0x08006439
 8006370:	08006439 	.word	0x08006439
 8006374:	08006439 	.word	0x08006439
 8006378:	08006439 	.word	0x08006439
 800637c:	0800640d 	.word	0x0800640d
 8006380:	08006439 	.word	0x08006439
 8006384:	08006439 	.word	0x08006439
 8006388:	08006439 	.word	0x08006439
 800638c:	08006439 	.word	0x08006439
 8006390:	08006439 	.word	0x08006439
 8006394:	08006439 	.word	0x08006439
 8006398:	08006439 	.word	0x08006439
 800639c:	08006423 	.word	0x08006423
 80063a0:	08006439 	.word	0x08006439
 80063a4:	08006439 	.word	0x08006439
 80063a8:	08006439 	.word	0x08006439
 80063ac:	08006439 	.word	0x08006439
 80063b0:	08006439 	.word	0x08006439
 80063b4:	08006439 	.word	0x08006439
 80063b8:	08006439 	.word	0x08006439
 80063bc:	08006441 	.word	0x08006441
 80063c0:	08006439 	.word	0x08006439
 80063c4:	08006439 	.word	0x08006439
 80063c8:	08006439 	.word	0x08006439
 80063cc:	08006439 	.word	0x08006439
 80063d0:	08006439 	.word	0x08006439
 80063d4:	08006439 	.word	0x08006439
 80063d8:	08006439 	.word	0x08006439
 80063dc:	08006441 	.word	0x08006441
 80063e0:	08006439 	.word	0x08006439
 80063e4:	08006439 	.word	0x08006439
 80063e8:	08006439 	.word	0x08006439
 80063ec:	08006439 	.word	0x08006439
 80063f0:	08006439 	.word	0x08006439
 80063f4:	08006439 	.word	0x08006439
 80063f8:	08006439 	.word	0x08006439
 80063fc:	08006441 	.word	0x08006441
 8006400:	58024400 	.word	0x58024400
 8006404:	58024800 	.word	0x58024800
 8006408:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800640c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006410:	3308      	adds	r3, #8
 8006412:	2101      	movs	r1, #1
 8006414:	4618      	mov	r0, r3
 8006416:	f001 f81b 	bl	8007450 <RCCEx_PLL2_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006420:	e00f      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006426:	3328      	adds	r3, #40	@ 0x28
 8006428:	2101      	movs	r1, #1
 800642a:	4618      	mov	r0, r3
 800642c:	f001 f8c2 	bl	80075b4 <RCCEx_PLL3_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006436:	e004      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800643e:	e000      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006442:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800644a:	4bc0      	ldr	r3, [pc, #768]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800644c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800645a:	4abc      	ldr	r2, [pc, #752]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800645c:	430b      	orrs	r3, r1
 800645e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006460:	e003      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006462:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006466:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800646a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f002 0302 	and.w	r3, r2, #2
 8006476:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800647a:	2300      	movs	r3, #0
 800647c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006480:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d043      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800648a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800648e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006492:	2b05      	cmp	r3, #5
 8006494:	d824      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006496:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064e9 	.word	0x080064e9
 80064a0:	080064b5 	.word	0x080064b5
 80064a4:	080064cb 	.word	0x080064cb
 80064a8:	080064e9 	.word	0x080064e9
 80064ac:	080064e9 	.word	0x080064e9
 80064b0:	080064e9 	.word	0x080064e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064b8:	3308      	adds	r3, #8
 80064ba:	2101      	movs	r1, #1
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 ffc7 	bl	8007450 <RCCEx_PLL2_Config>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064c8:	e00f      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ce:	3328      	adds	r3, #40	@ 0x28
 80064d0:	2101      	movs	r1, #1
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 f86e 	bl	80075b4 <RCCEx_PLL3_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064de:	e004      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80064e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064f2:	4b96      	ldr	r3, [pc, #600]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80064f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f6:	f023 0107 	bic.w	r1, r3, #7
 80064fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006502:	4a92      	ldr	r2, [pc, #584]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6553      	str	r3, [r2, #84]	@ 0x54
 8006508:	e003      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800650e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f002 0304 	and.w	r3, r2, #4
 800651e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006522:	2300      	movs	r3, #0
 8006524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006528:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d043      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006536:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800653a:	2b05      	cmp	r3, #5
 800653c:	d824      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800653e:	a201      	add	r2, pc, #4	@ (adr r2, 8006544 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006591 	.word	0x08006591
 8006548:	0800655d 	.word	0x0800655d
 800654c:	08006573 	.word	0x08006573
 8006550:	08006591 	.word	0x08006591
 8006554:	08006591 	.word	0x08006591
 8006558:	08006591 	.word	0x08006591
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800655c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006560:	3308      	adds	r3, #8
 8006562:	2101      	movs	r1, #1
 8006564:	4618      	mov	r0, r3
 8006566:	f000 ff73 	bl	8007450 <RCCEx_PLL2_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006570:	e00f      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006576:	3328      	adds	r3, #40	@ 0x28
 8006578:	2101      	movs	r1, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f001 f81a 	bl	80075b4 <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006586:	e004      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800658e:	e000      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006592:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800659a:	4b6c      	ldr	r3, [pc, #432]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800659c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659e:	f023 0107 	bic.w	r1, r3, #7
 80065a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065aa:	4a68      	ldr	r2, [pc, #416]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80065b0:	e003      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f002 0320 	and.w	r3, r2, #32
 80065c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065ca:	2300      	movs	r3, #0
 80065cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d055      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065e6:	d033      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065ec:	d82c      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f2:	d02f      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f8:	d826      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80065fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065fe:	d02b      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006600:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006604:	d820      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800660a:	d012      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800660c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006610:	d81a      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d022      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800661a:	d115      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800661c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006620:	3308      	adds	r3, #8
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f000 ff13 	bl	8007450 <RCCEx_PLL2_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006630:	e015      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006636:	3328      	adds	r3, #40	@ 0x28
 8006638:	2102      	movs	r1, #2
 800663a:	4618      	mov	r0, r3
 800663c:	f000 ffba 	bl	80075b4 <RCCEx_PLL3_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006646:	e00a      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800664e:	e006      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006650:	bf00      	nop
 8006652:	e004      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006654:	bf00      	nop
 8006656:	e002      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006658:	bf00      	nop
 800665a:	e000      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800665c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006666:	4b39      	ldr	r3, [pc, #228]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800666e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006672:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006676:	4a35      	ldr	r2, [pc, #212]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006678:	430b      	orrs	r3, r1
 800667a:	6553      	str	r3, [r2, #84]	@ 0x54
 800667c:	e003      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006682:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006696:	2300      	movs	r3, #0
 8006698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800669c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4313      	orrs	r3, r2
 80066a4:	d058      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066b2:	d033      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066b8:	d82c      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066be:	d02f      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c4:	d826      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80066c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ca:	d02b      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066d0:	d820      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80066d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d6:	d012      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80066d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066dc:	d81a      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d022      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80066e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e6:	d115      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ec:	3308      	adds	r3, #8
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fead 	bl	8007450 <RCCEx_PLL2_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066fc:	e015      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006702:	3328      	adds	r3, #40	@ 0x28
 8006704:	2102      	movs	r1, #2
 8006706:	4618      	mov	r0, r3
 8006708:	f000 ff54 	bl	80075b4 <RCCEx_PLL3_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006712:	e00a      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800671a:	e006      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800671c:	bf00      	nop
 800671e:	e004      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006720:	bf00      	nop
 8006722:	e002      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006724:	bf00      	nop
 8006726:	e000      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800672a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10e      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006732:	4b06      	ldr	r3, [pc, #24]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006736:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800673a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800673e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006742:	4a02      	ldr	r2, [pc, #8]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006744:	430b      	orrs	r3, r1
 8006746:	6593      	str	r3, [r2, #88]	@ 0x58
 8006748:	e006      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800674a:	bf00      	nop
 800674c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006754:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800676e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d055      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800677c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006780:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006784:	d033      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006786:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800678a:	d82c      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800678c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006790:	d02f      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006796:	d826      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006798:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800679c:	d02b      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800679e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067a2:	d820      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80067a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067a8:	d012      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80067aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ae:	d81a      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d022      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80067b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067b8:	d115      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067be:	3308      	adds	r3, #8
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fe44 	bl	8007450 <RCCEx_PLL2_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067ce:	e015      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067d4:	3328      	adds	r3, #40	@ 0x28
 80067d6:	2102      	movs	r1, #2
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 feeb 	bl	80075b4 <RCCEx_PLL3_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067e4:	e00a      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067ec:	e006      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80067ee:	bf00      	nop
 80067f0:	e004      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80067fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006804:	4ba1      	ldr	r3, [pc, #644]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006808:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800680c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006814:	4a9d      	ldr	r2, [pc, #628]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006816:	430b      	orrs	r3, r1
 8006818:	6593      	str	r3, [r2, #88]	@ 0x58
 800681a:	e003      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006820:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f002 0308 	and.w	r3, r2, #8
 8006830:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006834:	2300      	movs	r3, #0
 8006836:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800683a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800683e:	460b      	mov	r3, r1
 8006840:	4313      	orrs	r3, r2
 8006842:	d01e      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006850:	d10c      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006856:	3328      	adds	r3, #40	@ 0x28
 8006858:	2102      	movs	r1, #2
 800685a:	4618      	mov	r0, r3
 800685c:	f000 feaa 	bl	80075b4 <RCCEx_PLL3_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800686c:	4b87      	ldr	r3, [pc, #540]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800686e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006870:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800687c:	4a83      	ldr	r2, [pc, #524]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800687e:	430b      	orrs	r3, r1
 8006880:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f002 0310 	and.w	r3, r2, #16
 800688e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006892:	2300      	movs	r3, #0
 8006894:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006898:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800689c:	460b      	mov	r3, r1
 800689e:	4313      	orrs	r3, r2
 80068a0:	d01e      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ae:	d10c      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b4:	3328      	adds	r3, #40	@ 0x28
 80068b6:	2102      	movs	r1, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fe7b 	bl	80075b4 <RCCEx_PLL3_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068ca:	4b70      	ldr	r3, [pc, #448]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068da:	4a6c      	ldr	r2, [pc, #432]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	d03e      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006904:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800690c:	d022      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800690e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006912:	d81b      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800691c:	d00b      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800691e:	e015      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006924:	3308      	adds	r3, #8
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fd91 	bl	8007450 <RCCEx_PLL2_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006934:	e00f      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800693a:	3328      	adds	r3, #40	@ 0x28
 800693c:	2102      	movs	r1, #2
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fe38 	bl	80075b4 <RCCEx_PLL3_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800694a:	e004      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006952:	e000      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006956:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800695e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006962:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800696a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800696e:	4a47      	ldr	r2, [pc, #284]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006970:	430b      	orrs	r3, r1
 8006972:	6593      	str	r3, [r2, #88]	@ 0x58
 8006974:	e003      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800697a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800697e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800698a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800698c:	2300      	movs	r3, #0
 800698e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006990:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006994:	460b      	mov	r3, r1
 8006996:	4313      	orrs	r3, r2
 8006998:	d03b      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800699a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069a6:	d01f      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80069a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069ac:	d818      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80069ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069b2:	d003      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80069b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069b8:	d007      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80069ba:	e011      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069bc:	4b33      	ldr	r3, [pc, #204]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	4a32      	ldr	r2, [pc, #200]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069c8:	e00f      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ce:	3328      	adds	r3, #40	@ 0x28
 80069d0:	2101      	movs	r1, #1
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fdee 	bl	80075b4 <RCCEx_PLL3_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80069de:	e004      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069e6:	e000      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80069e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10b      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069f2:	4b26      	ldr	r3, [pc, #152]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a02:	4a22      	ldr	r2, [pc, #136]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a08:	e003      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a20:	2300      	movs	r3, #0
 8006a22:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	d034      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a3c:	d007      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006a3e:	e011      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a40:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a44:	4a11      	ldr	r2, [pc, #68]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a4c:	e00e      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a52:	3308      	adds	r3, #8
 8006a54:	2102      	movs	r1, #2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fcfa 	bl	8007450 <RCCEx_PLL2_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a62:	e003      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10d      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a74:	4b05      	ldr	r3, [pc, #20]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a82:	4a02      	ldr	r2, [pc, #8]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a84:	430b      	orrs	r3, r1
 8006a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a88:	e006      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006a8a:	bf00      	nop
 8006a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006aaa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	d00c      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ab8:	3328      	adds	r3, #40	@ 0x28
 8006aba:	2102      	movs	r1, #2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fd79 	bl	80075b4 <RCCEx_PLL3_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8006adc:	2300      	movs	r3, #0
 8006ade:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ae0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	d038      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006af6:	d018      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afc:	d811      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006afe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b02:	d014      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b08:	d80b      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d011      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b12:	d106      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b14:	4bc3      	ldr	r3, [pc, #780]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	4ac2      	ldr	r2, [pc, #776]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b20:	e008      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b28:	e004      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006b2a:	bf00      	nop
 8006b2c:	e002      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006b2e:	bf00      	nop
 8006b30:	e000      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b3c:	4bb9      	ldr	r3, [pc, #740]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4c:	4ab5      	ldr	r2, [pc, #724]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b52:	e003      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b78:	4baa      	ldr	r3, [pc, #680]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b86:	4aa7      	ldr	r2, [pc, #668]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b98:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ba8:	4b9e      	ldr	r3, [pc, #632]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb6:	4a9b      	ldr	r2, [pc, #620]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bca:	2300      	movs	r3, #0
 8006bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	d009      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006bd8:	4b92      	ldr	r3, [pc, #584]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bdc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be6:	4a8f      	ldr	r2, [pc, #572]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bfe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c08:	4b86      	ldr	r3, [pc, #536]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	4a85      	ldr	r2, [pc, #532]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c12:	6113      	str	r3, [r2, #16]
 8006c14:	4b83      	ldr	r3, [pc, #524]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c16:	6919      	ldr	r1, [r3, #16]
 8006c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006c20:	4a80      	ldr	r2, [pc, #512]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c22:	430b      	orrs	r3, r1
 8006c24:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c34:	2300      	movs	r3, #0
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c42:	4b78      	ldr	r3, [pc, #480]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c50:	4a74      	ldr	r2, [pc, #464]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c52:	430b      	orrs	r3, r1
 8006c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c62:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c64:	2300      	movs	r3, #0
 8006c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c68:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	d00a      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c72:	4b6c      	ldr	r3, [pc, #432]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c76:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c82:	4a68      	ldr	r2, [pc, #416]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	2100      	movs	r1, #0
 8006c92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c9a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	d011      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca8:	3308      	adds	r3, #8
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fbcf 	bl	8007450 <RCCEx_PLL2_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	6239      	str	r1, [r7, #32]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cda:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d011      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce8:	3308      	adds	r3, #8
 8006cea:	2101      	movs	r1, #1
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fbaf 	bl	8007450 <RCCEx_PLL2_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	2100      	movs	r1, #0
 8006d12:	61b9      	str	r1, [r7, #24]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d011      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d28:	3308      	adds	r3, #8
 8006d2a:	2102      	movs	r1, #2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fb8f 	bl	8007450 <RCCEx_PLL2_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006d38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	2100      	movs	r1, #0
 8006d52:	6139      	str	r1, [r7, #16]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d011      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d68:	3328      	adds	r3, #40	@ 0x28
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fc21 	bl	80075b4 <RCCEx_PLL3_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	2100      	movs	r1, #0
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4313      	orrs	r3, r2
 8006da2:	d011      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da8:	3328      	adds	r3, #40	@ 0x28
 8006daa:	2101      	movs	r1, #1
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fc01 	bl	80075b4 <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006db8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6039      	str	r1, [r7, #0]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d011      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006de8:	3328      	adds	r3, #40	@ 0x28
 8006dea:	2102      	movs	r1, #2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fbe1 	bl	80075b4 <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006df8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006e08:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e000      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e22:	bf00      	nop
 8006e24:	58024400 	.word	0x58024400

08006e28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006e2c:	f7fe fde2 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	091b      	lsrs	r3, r3, #4
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	4904      	ldr	r1, [pc, #16]	@ (8006e50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e3e:	5ccb      	ldrb	r3, [r1, r3]
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	58024400 	.word	0x58024400
 8006e50:	08009d30 	.word	0x08009d30

08006e54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b089      	sub	sp, #36	@ 0x24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e66:	4b9f      	ldr	r3, [pc, #636]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6a:	0b1b      	lsrs	r3, r3, #12
 8006e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e72:	4b9c      	ldr	r3, [pc, #624]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	091b      	lsrs	r3, r3, #4
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e7e:	4b99      	ldr	r3, [pc, #612]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e82:	08db      	lsrs	r3, r3, #3
 8006e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8111 	beq.w	80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	f000 8083 	beq.w	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	f200 80a1 	bhi.w	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d056      	beq.n	8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ebe:	e099      	b.n	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec0:	4b88      	ldr	r3, [pc, #544]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d02d      	beq.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ecc:	4b85      	ldr	r3, [pc, #532]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	08db      	lsrs	r3, r3, #3
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	4a84      	ldr	r2, [pc, #528]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8006edc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef6:	4b7b      	ldr	r3, [pc, #492]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f26:	e087      	b.n	8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f6a:	e065      	b.n	8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7e:	4b59      	ldr	r3, [pc, #356]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fae:	e043      	b.n	8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc2:	4b48      	ldr	r3, [pc, #288]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff2:	e021      	b.n	8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007006:	4b37      	ldr	r3, [pc, #220]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007016:	ed97 6a03 	vldr	s12, [r7, #12]
 800701a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800701e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007036:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007038:	4b2a      	ldr	r3, [pc, #168]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703c:	0a5b      	lsrs	r3, r3, #9
 800703e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800704e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007052:	edd7 6a07 	vldr	s13, [r7, #28]
 8007056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705e:	ee17 2a90 	vmov	r2, s15
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007066:	4b1f      	ldr	r3, [pc, #124]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800707c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007080:	edd7 6a07 	vldr	s13, [r7, #28]
 8007084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708c:	ee17 2a90 	vmov	r2, s15
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007094:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	0e1b      	lsrs	r3, r3, #24
 800709a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ba:	ee17 2a90 	vmov	r2, s15
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070c2:	e008      	b.n	80070d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	609a      	str	r2, [r3, #8]
}
 80070d6:	bf00      	nop
 80070d8:	3724      	adds	r7, #36	@ 0x24
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	46000000 	.word	0x46000000
 80070f0:	4c742400 	.word	0x4c742400
 80070f4:	4a742400 	.word	0x4a742400
 80070f8:	4af42400 	.word	0x4af42400

080070fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b089      	sub	sp, #36	@ 0x24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007104:	4ba1      	ldr	r3, [pc, #644]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800710e:	4b9f      	ldr	r3, [pc, #636]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	0d1b      	lsrs	r3, r3, #20
 8007114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007118:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800711a:	4b9c      	ldr	r3, [pc, #624]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007126:	4b99      	ldr	r3, [pc, #612]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712a:	08db      	lsrs	r3, r3, #3
 800712c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8111 	beq.w	800736c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	2b02      	cmp	r3, #2
 800714e:	f000 8083 	beq.w	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b02      	cmp	r3, #2
 8007156:	f200 80a1 	bhi.w	800729c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d056      	beq.n	8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007166:	e099      	b.n	800729c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007168:	4b88      	ldr	r3, [pc, #544]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d02d      	beq.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007174:	4b85      	ldr	r3, [pc, #532]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	08db      	lsrs	r3, r3, #3
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	4a84      	ldr	r2, [pc, #528]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007180:	fa22 f303 	lsr.w	r3, r2, r3
 8007184:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	ee07 3a90 	vmov	s15, r3
 800718c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b7b      	ldr	r3, [pc, #492]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071ce:	e087      	b.n	80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b6a      	ldr	r3, [pc, #424]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007212:	e065      	b.n	80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007226:	4b59      	ldr	r3, [pc, #356]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007236:	ed97 6a03 	vldr	s12, [r7, #12]
 800723a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800723e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800724a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007256:	e043      	b.n	80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726a:	4b48      	ldr	r3, [pc, #288]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727a:	ed97 6a03 	vldr	s12, [r7, #12]
 800727e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729a:	e021      	b.n	80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ae:	4b37      	ldr	r3, [pc, #220]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072be:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072e0:	4b2a      	ldr	r3, [pc, #168]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e4:	0a5b      	lsrs	r3, r3, #9
 80072e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007306:	ee17 2a90 	vmov	r2, s15
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800730e:	4b1f      	ldr	r3, [pc, #124]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	0c1b      	lsrs	r3, r3, #16
 8007314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007318:	ee07 3a90 	vmov	s15, r3
 800731c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007328:	edd7 6a07 	vldr	s13, [r7, #28]
 800732c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007334:	ee17 2a90 	vmov	r2, s15
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800733c:	4b13      	ldr	r3, [pc, #76]	@ (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007340:	0e1b      	lsrs	r3, r3, #24
 8007342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007356:	edd7 6a07 	vldr	s13, [r7, #28]
 800735a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007362:	ee17 2a90 	vmov	r2, s15
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800736a:	e008      	b.n	800737e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	609a      	str	r2, [r3, #8]
}
 800737e:	bf00      	nop
 8007380:	3724      	adds	r7, #36	@ 0x24
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	58024400 	.word	0x58024400
 8007390:	03d09000 	.word	0x03d09000
 8007394:	46000000 	.word	0x46000000
 8007398:	4c742400 	.word	0x4c742400
 800739c:	4a742400 	.word	0x4a742400
 80073a0:	4af42400 	.word	0x4af42400

080073a4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80073ac:	4b26      	ldr	r3, [pc, #152]	@ (8007448 <HAL_RCCEx_CRSConfig+0xa4>)
 80073ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073b2:	4a25      	ldr	r2, [pc, #148]	@ (8007448 <HAL_RCCEx_CRSConfig+0xa4>)
 80073b4:	f043 0302 	orr.w	r3, r3, #2
 80073b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80073bc:	4b22      	ldr	r3, [pc, #136]	@ (8007448 <HAL_RCCEx_CRSConfig+0xa4>)
 80073be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073c2:	4a21      	ldr	r2, [pc, #132]	@ (8007448 <HAL_RCCEx_CRSConfig+0xa4>)
 80073c4:	f023 0302 	bic.w	r3, r3, #2
 80073c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80073cc:	f7f9 fe7e 	bl	80010cc <HAL_GetREVID>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d80b      	bhi.n	80073f2 <HAL_RCCEx_CRSConfig+0x4e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073e2:	d106      	bne.n	80073f2 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e008      	b.n	8007404 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	041b      	lsls	r3, r3, #16
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800741a:	4a0c      	ldr	r2, [pc, #48]	@ (800744c <HAL_RCCEx_CRSConfig+0xa8>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007420:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <HAL_RCCEx_CRSConfig+0xa8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	4907      	ldr	r1, [pc, #28]	@ (800744c <HAL_RCCEx_CRSConfig+0xa8>)
 8007430:	4313      	orrs	r3, r2
 8007432:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007434:	4b05      	ldr	r3, [pc, #20]	@ (800744c <HAL_RCCEx_CRSConfig+0xa8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a04      	ldr	r2, [pc, #16]	@ (800744c <HAL_RCCEx_CRSConfig+0xa8>)
 800743a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800743e:	6013      	str	r3, [r2, #0]
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	58024400 	.word	0x58024400
 800744c:	40008400 	.word	0x40008400

08007450 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800745e:	4b53      	ldr	r3, [pc, #332]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	2b03      	cmp	r3, #3
 8007468:	d101      	bne.n	800746e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e099      	b.n	80075a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800746e:	4b4f      	ldr	r3, [pc, #316]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a4e      	ldr	r2, [pc, #312]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007474:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800747a:	f7f9 fe1b 	bl	80010b4 <HAL_GetTick>
 800747e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007480:	e008      	b.n	8007494 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007482:	f7f9 fe17 	bl	80010b4 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e086      	b.n	80075a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007494:	4b45      	ldr	r3, [pc, #276]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f0      	bne.n	8007482 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074a0:	4b42      	ldr	r3, [pc, #264]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 80074a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	031b      	lsls	r3, r3, #12
 80074ae:	493f      	ldr	r1, [pc, #252]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	025b      	lsls	r3, r3, #9
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	041b      	lsls	r3, r3, #16
 80074d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	3b01      	subs	r3, #1
 80074de:	061b      	lsls	r3, r3, #24
 80074e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074e4:	4931      	ldr	r1, [pc, #196]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074ea:	4b30      	ldr	r3, [pc, #192]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	492d      	ldr	r1, [pc, #180]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074fc:	4b2b      	ldr	r3, [pc, #172]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	f023 0220 	bic.w	r2, r3, #32
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	4928      	ldr	r1, [pc, #160]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 800750a:	4313      	orrs	r3, r2
 800750c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800750e:	4b27      	ldr	r3, [pc, #156]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	4a26      	ldr	r2, [pc, #152]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007514:	f023 0310 	bic.w	r3, r3, #16
 8007518:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800751a:	4b24      	ldr	r3, [pc, #144]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 800751c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800751e:	4b24      	ldr	r3, [pc, #144]	@ (80075b0 <RCCEx_PLL2_Config+0x160>)
 8007520:	4013      	ands	r3, r2
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	69d2      	ldr	r2, [r2, #28]
 8007526:	00d2      	lsls	r2, r2, #3
 8007528:	4920      	ldr	r1, [pc, #128]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 800752a:	4313      	orrs	r3, r2
 800752c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800752e:	4b1f      	ldr	r3, [pc, #124]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	4a1e      	ldr	r2, [pc, #120]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007534:	f043 0310 	orr.w	r3, r3, #16
 8007538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d106      	bne.n	800754e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007540:	4b1a      	ldr	r3, [pc, #104]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	4a19      	ldr	r2, [pc, #100]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007546:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800754a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800754c:	e00f      	b.n	800756e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d106      	bne.n	8007562 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007554:	4b15      	ldr	r3, [pc, #84]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	4a14      	ldr	r2, [pc, #80]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 800755a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800755e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007560:	e005      	b.n	800756e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007562:	4b12      	ldr	r3, [pc, #72]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	4a11      	ldr	r2, [pc, #68]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007568:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800756c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800756e:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a0e      	ldr	r2, [pc, #56]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007574:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800757a:	f7f9 fd9b 	bl	80010b4 <HAL_GetTick>
 800757e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007580:	e008      	b.n	8007594 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007582:	f7f9 fd97 	bl	80010b4 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e006      	b.n	80075a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007594:	4b05      	ldr	r3, [pc, #20]	@ (80075ac <RCCEx_PLL2_Config+0x15c>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0f0      	beq.n	8007582 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	58024400 	.word	0x58024400
 80075b0:	ffff0007 	.word	0xffff0007

080075b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075c2:	4b53      	ldr	r3, [pc, #332]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d101      	bne.n	80075d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e099      	b.n	8007706 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075de:	f7f9 fd69 	bl	80010b4 <HAL_GetTick>
 80075e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075e4:	e008      	b.n	80075f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075e6:	f7f9 fd65 	bl	80010b4 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e086      	b.n	8007706 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075f8:	4b45      	ldr	r3, [pc, #276]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f0      	bne.n	80075e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007604:	4b42      	ldr	r3, [pc, #264]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007608:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	051b      	lsls	r3, r3, #20
 8007612:	493f      	ldr	r1, [pc, #252]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007614:	4313      	orrs	r3, r2
 8007616:	628b      	str	r3, [r1, #40]	@ 0x28
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	3b01      	subs	r3, #1
 800761e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	3b01      	subs	r3, #1
 8007628:	025b      	lsls	r3, r3, #9
 800762a:	b29b      	uxth	r3, r3
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	3b01      	subs	r3, #1
 8007634:	041b      	lsls	r3, r3, #16
 8007636:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	3b01      	subs	r3, #1
 8007642:	061b      	lsls	r3, r3, #24
 8007644:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007648:	4931      	ldr	r1, [pc, #196]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 800764a:	4313      	orrs	r3, r2
 800764c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800764e:	4b30      	ldr	r3, [pc, #192]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	492d      	ldr	r1, [pc, #180]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 800765c:	4313      	orrs	r3, r2
 800765e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007660:	4b2b      	ldr	r3, [pc, #172]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	4928      	ldr	r1, [pc, #160]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 800766e:	4313      	orrs	r3, r2
 8007670:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007672:	4b27      	ldr	r3, [pc, #156]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007676:	4a26      	ldr	r2, [pc, #152]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800767c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800767e:	4b24      	ldr	r3, [pc, #144]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007682:	4b24      	ldr	r3, [pc, #144]	@ (8007714 <RCCEx_PLL3_Config+0x160>)
 8007684:	4013      	ands	r3, r2
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	69d2      	ldr	r2, [r2, #28]
 800768a:	00d2      	lsls	r2, r2, #3
 800768c:	4920      	ldr	r1, [pc, #128]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 800768e:	4313      	orrs	r3, r2
 8007690:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007692:	4b1f      	ldr	r3, [pc, #124]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007696:	4a1e      	ldr	r2, [pc, #120]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 8007698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800769c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	4a19      	ldr	r2, [pc, #100]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80076ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076b0:	e00f      	b.n	80076d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d106      	bne.n	80076c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076b8:	4b15      	ldr	r3, [pc, #84]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	4a14      	ldr	r2, [pc, #80]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076c4:	e005      	b.n	80076d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076c6:	4b12      	ldr	r3, [pc, #72]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	4a11      	ldr	r2, [pc, #68]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80076d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076de:	f7f9 fce9 	bl	80010b4 <HAL_GetTick>
 80076e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076e4:	e008      	b.n	80076f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076e6:	f7f9 fce5 	bl	80010b4 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d901      	bls.n	80076f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e006      	b.n	8007706 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076f8:	4b05      	ldr	r3, [pc, #20]	@ (8007710 <RCCEx_PLL3_Config+0x15c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f0      	beq.n	80076e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	58024400 	.word	0x58024400
 8007714:	ffff0007 	.word	0xffff0007

08007718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e049      	b.n	80077be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7f9 fa7c 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f000 f8a6 	bl	80078a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d001      	beq.n	80077e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e04c      	b.n	800787a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a26      	ldr	r2, [pc, #152]	@ (8007888 <HAL_TIM_Base_Start+0xc0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d022      	beq.n	8007838 <HAL_TIM_Base_Start+0x70>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fa:	d01d      	beq.n	8007838 <HAL_TIM_Base_Start+0x70>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a22      	ldr	r2, [pc, #136]	@ (800788c <HAL_TIM_Base_Start+0xc4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d018      	beq.n	8007838 <HAL_TIM_Base_Start+0x70>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a21      	ldr	r2, [pc, #132]	@ (8007890 <HAL_TIM_Base_Start+0xc8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d013      	beq.n	8007838 <HAL_TIM_Base_Start+0x70>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1f      	ldr	r2, [pc, #124]	@ (8007894 <HAL_TIM_Base_Start+0xcc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00e      	beq.n	8007838 <HAL_TIM_Base_Start+0x70>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a1e      	ldr	r2, [pc, #120]	@ (8007898 <HAL_TIM_Base_Start+0xd0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d009      	beq.n	8007838 <HAL_TIM_Base_Start+0x70>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a1c      	ldr	r2, [pc, #112]	@ (800789c <HAL_TIM_Base_Start+0xd4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d004      	beq.n	8007838 <HAL_TIM_Base_Start+0x70>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a1b      	ldr	r2, [pc, #108]	@ (80078a0 <HAL_TIM_Base_Start+0xd8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d115      	bne.n	8007864 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	4b19      	ldr	r3, [pc, #100]	@ (80078a4 <HAL_TIM_Base_Start+0xdc>)
 8007840:	4013      	ands	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b06      	cmp	r3, #6
 8007848:	d015      	beq.n	8007876 <HAL_TIM_Base_Start+0xae>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007850:	d011      	beq.n	8007876 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0201 	orr.w	r2, r2, #1
 8007860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007862:	e008      	b.n	8007876 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e000      	b.n	8007878 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40010000 	.word	0x40010000
 800788c:	40000400 	.word	0x40000400
 8007890:	40000800 	.word	0x40000800
 8007894:	40000c00 	.word	0x40000c00
 8007898:	40010400 	.word	0x40010400
 800789c:	40001800 	.word	0x40001800
 80078a0:	40014000 	.word	0x40014000
 80078a4:	00010007 	.word	0x00010007

080078a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a46      	ldr	r2, [pc, #280]	@ (80079d4 <TIM_Base_SetConfig+0x12c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d013      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c6:	d00f      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a43      	ldr	r2, [pc, #268]	@ (80079d8 <TIM_Base_SetConfig+0x130>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00b      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a42      	ldr	r2, [pc, #264]	@ (80079dc <TIM_Base_SetConfig+0x134>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d007      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a41      	ldr	r2, [pc, #260]	@ (80079e0 <TIM_Base_SetConfig+0x138>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a40      	ldr	r2, [pc, #256]	@ (80079e4 <TIM_Base_SetConfig+0x13c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d108      	bne.n	80078fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a35      	ldr	r2, [pc, #212]	@ (80079d4 <TIM_Base_SetConfig+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d01f      	beq.n	8007942 <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007908:	d01b      	beq.n	8007942 <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a32      	ldr	r2, [pc, #200]	@ (80079d8 <TIM_Base_SetConfig+0x130>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d017      	beq.n	8007942 <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a31      	ldr	r2, [pc, #196]	@ (80079dc <TIM_Base_SetConfig+0x134>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <TIM_Base_SetConfig+0x9a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a30      	ldr	r2, [pc, #192]	@ (80079e0 <TIM_Base_SetConfig+0x138>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00f      	beq.n	8007942 <TIM_Base_SetConfig+0x9a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a2f      	ldr	r2, [pc, #188]	@ (80079e4 <TIM_Base_SetConfig+0x13c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00b      	beq.n	8007942 <TIM_Base_SetConfig+0x9a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a2e      	ldr	r2, [pc, #184]	@ (80079e8 <TIM_Base_SetConfig+0x140>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d007      	beq.n	8007942 <TIM_Base_SetConfig+0x9a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a2d      	ldr	r2, [pc, #180]	@ (80079ec <TIM_Base_SetConfig+0x144>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d003      	beq.n	8007942 <TIM_Base_SetConfig+0x9a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a2c      	ldr	r2, [pc, #176]	@ (80079f0 <TIM_Base_SetConfig+0x148>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d108      	bne.n	8007954 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a16      	ldr	r2, [pc, #88]	@ (80079d4 <TIM_Base_SetConfig+0x12c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00f      	beq.n	80079a0 <TIM_Base_SetConfig+0xf8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a18      	ldr	r2, [pc, #96]	@ (80079e4 <TIM_Base_SetConfig+0x13c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00b      	beq.n	80079a0 <TIM_Base_SetConfig+0xf8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a17      	ldr	r2, [pc, #92]	@ (80079e8 <TIM_Base_SetConfig+0x140>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d007      	beq.n	80079a0 <TIM_Base_SetConfig+0xf8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a16      	ldr	r2, [pc, #88]	@ (80079ec <TIM_Base_SetConfig+0x144>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_Base_SetConfig+0xf8>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a15      	ldr	r2, [pc, #84]	@ (80079f0 <TIM_Base_SetConfig+0x148>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d103      	bne.n	80079a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d105      	bne.n	80079c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f023 0201 	bic.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	611a      	str	r2, [r3, #16]
  }
}
 80079c6:	bf00      	nop
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40010400 	.word	0x40010400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40014400 	.word	0x40014400
 80079f0:	40014800 	.word	0x40014800

080079f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e06d      	b.n	8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a30      	ldr	r2, [pc, #192]	@ (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d108      	bne.n	8007a52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a20      	ldr	r2, [pc, #128]	@ (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d022      	beq.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a7e:	d01d      	beq.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a1d      	ldr	r2, [pc, #116]	@ (8007afc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d018      	beq.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d013      	beq.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1a      	ldr	r2, [pc, #104]	@ (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00e      	beq.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a15      	ldr	r2, [pc, #84]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d009      	beq.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a16      	ldr	r2, [pc, #88]	@ (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d004      	beq.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a15      	ldr	r2, [pc, #84]	@ (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d10c      	bne.n	8007ad6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	40010000 	.word	0x40010000
 8007af8:	40010400 	.word	0x40010400
 8007afc:	40000400 	.word	0x40000400
 8007b00:	40000800 	.word	0x40000800
 8007b04:	40000c00 	.word	0x40000c00
 8007b08:	40001800 	.word	0x40001800
 8007b0c:	40014000 	.word	0x40014000

08007b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e042      	b.n	8007ba8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7f9 f8a3 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2224      	movs	r2, #36	@ 0x24
 8007b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0201 	bic.w	r2, r2, #1
 8007b50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fb52 	bl	8009204 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fce3 	bl	800852c <UART_SetConfig>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e01b      	b.n	8007ba8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 fbd1 	bl	8009348 <UART_CheckIdleState>
 8007ba6:	4603      	mov	r3, r0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	@ 0x28
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	d17b      	bne.n	8007cc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <HAL_UART_Transmit+0x26>
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e074      	b.n	8007cc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2221      	movs	r2, #33	@ 0x21
 8007be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bea:	f7f9 fa63 	bl	80010b4 <HAL_GetTick>
 8007bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	88fa      	ldrh	r2, [r7, #6]
 8007bf4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	88fa      	ldrh	r2, [r7, #6]
 8007bfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c08:	d108      	bne.n	8007c1c <HAL_UART_Transmit+0x6c>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d104      	bne.n	8007c1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	e003      	b.n	8007c24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c24:	e030      	b.n	8007c88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2180      	movs	r1, #128	@ 0x80
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f001 fc33 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e03d      	b.n	8007cc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10b      	bne.n	8007c66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	3302      	adds	r3, #2
 8007c62:	61bb      	str	r3, [r7, #24]
 8007c64:	e007      	b.n	8007c76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	781a      	ldrb	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	3301      	adds	r3, #1
 8007c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1c8      	bne.n	8007c26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2140      	movs	r1, #64	@ 0x40
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 fbfc 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e006      	b.n	8007cc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e000      	b.n	8007cc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
  }
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	@ 0x28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	d137      	bne.n	8007d54 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_UART_Receive_DMA+0x24>
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e030      	b.n	8007d56 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a18      	ldr	r2, [pc, #96]	@ (8007d60 <HAL_UART_Receive_DMA+0x94>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d01f      	beq.n	8007d44 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d018      	beq.n	8007d44 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	623b      	str	r3, [r7, #32]
 8007d32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	6a3a      	ldr	r2, [r7, #32]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e6      	bne.n	8007d12 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	461a      	mov	r2, r3
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f001 fc14 	bl	8009578 <UART_Start_Receive_DMA>
 8007d50:	4603      	mov	r3, r0
 8007d52:	e000      	b.n	8007d56 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d54:	2302      	movs	r3, #2
  }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3728      	adds	r7, #40	@ 0x28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	58000c00 	.word	0x58000c00

08007d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b0ba      	sub	sp, #232	@ 0xe8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d92:	4013      	ands	r3, r2
 8007d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11b      	bne.n	8007dd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d015      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d009      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 8377 	beq.w	80084bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
      }
      return;
 8007dd6:	e371      	b.n	80084bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 8123 	beq.w	8008028 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007de2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007de6:	4b8d      	ldr	r3, [pc, #564]	@ (800801c <HAL_UART_IRQHandler+0x2b8>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d106      	bne.n	8007dfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007dee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007df2:	4b8b      	ldr	r3, [pc, #556]	@ (8008020 <HAL_UART_IRQHandler+0x2bc>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8116 	beq.w	8008028 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d011      	beq.n	8007e2c <HAL_UART_IRQHandler+0xc8>
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e22:	f043 0201 	orr.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d011      	beq.n	8007e5c <HAL_UART_IRQHandler+0xf8>
 8007e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e52:	f043 0204 	orr.w	r2, r3, #4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d011      	beq.n	8007e8c <HAL_UART_IRQHandler+0x128>
 8007e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2204      	movs	r2, #4
 8007e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e82:	f043 0202 	orr.w	r2, r3, #2
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d017      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ea8:	4b5c      	ldr	r3, [pc, #368]	@ (800801c <HAL_UART_IRQHandler+0x2b8>)
 8007eaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ebe:	f043 0208 	orr.w	r2, r3, #8
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d012      	beq.n	8007efa <HAL_UART_IRQHandler+0x196>
 8007ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00c      	beq.n	8007efa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef0:	f043 0220 	orr.w	r2, r3, #32
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 82dd 	beq.w	80084c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d013      	beq.n	8007f3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d105      	bne.n	8007f2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4e:	2b40      	cmp	r3, #64	@ 0x40
 8007f50:	d005      	beq.n	8007f5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d054      	beq.n	8008008 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fbf2 	bl	8009748 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6e:	2b40      	cmp	r3, #64	@ 0x40
 8007f70:	d146      	bne.n	8008000 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1d9      	bne.n	8007f72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d017      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fce:	4a15      	ldr	r2, [pc, #84]	@ (8008024 <HAL_UART_IRQHandler+0x2c0>)
 8007fd0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fa fc63 	bl	80028a4 <HAL_DMA_Abort_IT>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d019      	beq.n	8008018 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff6:	e00f      	b.n	8008018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa81 	bl	8008500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffe:	e00b      	b.n	8008018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fa7d 	bl	8008500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008006:	e007      	b.n	8008018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa79 	bl	8008500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008016:	e253      	b.n	80084c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	bf00      	nop
    return;
 800801a:	e251      	b.n	80084c0 <HAL_UART_IRQHandler+0x75c>
 800801c:	10000001 	.word	0x10000001
 8008020:	04000120 	.word	0x04000120
 8008024:	080099fb 	.word	0x080099fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800802c:	2b01      	cmp	r3, #1
 800802e:	f040 81e7 	bne.w	8008400 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 81e0 	beq.w	8008400 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 81d9 	beq.w	8008400 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2210      	movs	r2, #16
 8008054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008060:	2b40      	cmp	r3, #64	@ 0x40
 8008062:	f040 8151 	bne.w	8008308 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a96      	ldr	r2, [pc, #600]	@ (80082c8 <HAL_UART_IRQHandler+0x564>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d068      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a93      	ldr	r2, [pc, #588]	@ (80082cc <HAL_UART_IRQHandler+0x568>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d061      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a91      	ldr	r2, [pc, #580]	@ (80082d0 <HAL_UART_IRQHandler+0x56c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d05a      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a8e      	ldr	r2, [pc, #568]	@ (80082d4 <HAL_UART_IRQHandler+0x570>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d053      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a8c      	ldr	r2, [pc, #560]	@ (80082d8 <HAL_UART_IRQHandler+0x574>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d04c      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a89      	ldr	r2, [pc, #548]	@ (80082dc <HAL_UART_IRQHandler+0x578>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d045      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a87      	ldr	r2, [pc, #540]	@ (80082e0 <HAL_UART_IRQHandler+0x57c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d03e      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a84      	ldr	r2, [pc, #528]	@ (80082e4 <HAL_UART_IRQHandler+0x580>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d037      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a82      	ldr	r2, [pc, #520]	@ (80082e8 <HAL_UART_IRQHandler+0x584>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d030      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a7f      	ldr	r2, [pc, #508]	@ (80082ec <HAL_UART_IRQHandler+0x588>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d029      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a7d      	ldr	r2, [pc, #500]	@ (80082f0 <HAL_UART_IRQHandler+0x58c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d022      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a7a      	ldr	r2, [pc, #488]	@ (80082f4 <HAL_UART_IRQHandler+0x590>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d01b      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a78      	ldr	r2, [pc, #480]	@ (80082f8 <HAL_UART_IRQHandler+0x594>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d014      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a75      	ldr	r2, [pc, #468]	@ (80082fc <HAL_UART_IRQHandler+0x598>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00d      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a73      	ldr	r2, [pc, #460]	@ (8008300 <HAL_UART_IRQHandler+0x59c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d006      	beq.n	8008146 <HAL_UART_IRQHandler+0x3e2>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a70      	ldr	r2, [pc, #448]	@ (8008304 <HAL_UART_IRQHandler+0x5a0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d106      	bne.n	8008154 <HAL_UART_IRQHandler+0x3f0>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	b29b      	uxth	r3, r3
 8008152:	e005      	b.n	8008160 <HAL_UART_IRQHandler+0x3fc>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 81ab 	beq.w	80084c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008174:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008178:	429a      	cmp	r2, r3
 800817a:	f080 81a3 	bcs.w	80084c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008184:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008194:	f000 8087 	beq.w	80082a6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1da      	bne.n	8008198 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081f4:	f023 0301 	bic.w	r3, r3, #1
 80081f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3308      	adds	r3, #8
 8008202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008206:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800820a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800820e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008218:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e1      	bne.n	80081e2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800822e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3308      	adds	r3, #8
 800823e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008242:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008244:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008248:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e3      	bne.n	800821e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008274:	f023 0310 	bic.w	r3, r3, #16
 8008278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	461a      	mov	r2, r3
 8008282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008286:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008288:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800828c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e4      	bne.n	8008264 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7f9 ffe1 	bl	8002268 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2202      	movs	r2, #2
 80082aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	b29b      	uxth	r3, r3
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f927 	bl	8008514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082c6:	e0fd      	b.n	80084c4 <HAL_UART_IRQHandler+0x760>
 80082c8:	40020010 	.word	0x40020010
 80082cc:	40020028 	.word	0x40020028
 80082d0:	40020040 	.word	0x40020040
 80082d4:	40020058 	.word	0x40020058
 80082d8:	40020070 	.word	0x40020070
 80082dc:	40020088 	.word	0x40020088
 80082e0:	400200a0 	.word	0x400200a0
 80082e4:	400200b8 	.word	0x400200b8
 80082e8:	40020410 	.word	0x40020410
 80082ec:	40020428 	.word	0x40020428
 80082f0:	40020440 	.word	0x40020440
 80082f4:	40020458 	.word	0x40020458
 80082f8:	40020470 	.word	0x40020470
 80082fc:	40020488 	.word	0x40020488
 8008300:	400204a0 	.word	0x400204a0
 8008304:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008314:	b29b      	uxth	r3, r3
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80cf 	beq.w	80084c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800832a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 80ca 	beq.w	80084c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008344:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008348:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008356:	647b      	str	r3, [r7, #68]	@ 0x44
 8008358:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800835c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e4      	bne.n	8008334 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	623b      	str	r3, [r7, #32]
   return(result);
 800837a:	6a3a      	ldr	r2, [r7, #32]
 800837c:	4b55      	ldr	r3, [pc, #340]	@ (80084d4 <HAL_UART_IRQHandler+0x770>)
 800837e:	4013      	ands	r3, r2
 8008380:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3308      	adds	r3, #8
 800838a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800838e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008390:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800839c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e3      	bne.n	800836a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0310 	bic.w	r3, r3, #16
 80083ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083d8:	61fb      	str	r3, [r7, #28]
 80083da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	69b9      	ldr	r1, [r7, #24]
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	617b      	str	r3, [r7, #20]
   return(result);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e4      	bne.n	80083b6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f88b 	bl	8008514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083fe:	e063      	b.n	80084c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008404:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00e      	beq.n	800842a <HAL_UART_IRQHandler+0x6c6>
 800840c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d008      	beq.n	800842a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fb2a 	bl	8009a7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008428:	e051      	b.n	80084ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800842a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008432:	2b00      	cmp	r3, #0
 8008434:	d014      	beq.n	8008460 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800843a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800843e:	2b00      	cmp	r3, #0
 8008440:	d105      	bne.n	800844e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d008      	beq.n	8008460 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008452:	2b00      	cmp	r3, #0
 8008454:	d03a      	beq.n	80084cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
    }
    return;
 800845e:	e035      	b.n	80084cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008468:	2b00      	cmp	r3, #0
 800846a:	d009      	beq.n	8008480 <HAL_UART_IRQHandler+0x71c>
 800846c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 fad4 	bl	8009a26 <UART_EndTransmit_IT>
    return;
 800847e:	e026      	b.n	80084ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <HAL_UART_IRQHandler+0x73c>
 800848c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008490:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 fb03 	bl	8009aa4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800849e:	e016      	b.n	80084ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d010      	beq.n	80084ce <HAL_UART_IRQHandler+0x76a>
 80084ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	da0c      	bge.n	80084ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 faeb 	bl	8009a90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084ba:	e008      	b.n	80084ce <HAL_UART_IRQHandler+0x76a>
      return;
 80084bc:	bf00      	nop
 80084be:	e006      	b.n	80084ce <HAL_UART_IRQHandler+0x76a>
    return;
 80084c0:	bf00      	nop
 80084c2:	e004      	b.n	80084ce <HAL_UART_IRQHandler+0x76a>
      return;
 80084c4:	bf00      	nop
 80084c6:	e002      	b.n	80084ce <HAL_UART_IRQHandler+0x76a>
      return;
 80084c8:	bf00      	nop
 80084ca:	e000      	b.n	80084ce <HAL_UART_IRQHandler+0x76a>
    return;
 80084cc:	bf00      	nop
  }
}
 80084ce:	37e8      	adds	r7, #232	@ 0xe8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	effffffe 	.word	0xeffffffe

080084d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800852c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008530:	b092      	sub	sp, #72	@ 0x48
 8008532:	af00      	add	r7, sp, #0
 8008534:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	431a      	orrs	r2, r3
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	431a      	orrs	r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	4313      	orrs	r3, r2
 8008552:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4bbe      	ldr	r3, [pc, #760]	@ (8008854 <UART_SetConfig+0x328>)
 800855c:	4013      	ands	r3, r2
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	6812      	ldr	r2, [r2, #0]
 8008562:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008564:	430b      	orrs	r3, r1
 8008566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4ab3      	ldr	r2, [pc, #716]	@ (8008858 <UART_SetConfig+0x32c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d004      	beq.n	8008598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008594:	4313      	orrs	r3, r2
 8008596:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	4baf      	ldr	r3, [pc, #700]	@ (800885c <UART_SetConfig+0x330>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085a8:	430b      	orrs	r3, r1
 80085aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b2:	f023 010f 	bic.w	r1, r3, #15
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4aa6      	ldr	r2, [pc, #664]	@ (8008860 <UART_SetConfig+0x334>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d177      	bne.n	80086bc <UART_SetConfig+0x190>
 80085cc:	4ba5      	ldr	r3, [pc, #660]	@ (8008864 <UART_SetConfig+0x338>)
 80085ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085d4:	2b28      	cmp	r3, #40	@ 0x28
 80085d6:	d86d      	bhi.n	80086b4 <UART_SetConfig+0x188>
 80085d8:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <UART_SetConfig+0xb4>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	08008685 	.word	0x08008685
 80085e4:	080086b5 	.word	0x080086b5
 80085e8:	080086b5 	.word	0x080086b5
 80085ec:	080086b5 	.word	0x080086b5
 80085f0:	080086b5 	.word	0x080086b5
 80085f4:	080086b5 	.word	0x080086b5
 80085f8:	080086b5 	.word	0x080086b5
 80085fc:	080086b5 	.word	0x080086b5
 8008600:	0800868d 	.word	0x0800868d
 8008604:	080086b5 	.word	0x080086b5
 8008608:	080086b5 	.word	0x080086b5
 800860c:	080086b5 	.word	0x080086b5
 8008610:	080086b5 	.word	0x080086b5
 8008614:	080086b5 	.word	0x080086b5
 8008618:	080086b5 	.word	0x080086b5
 800861c:	080086b5 	.word	0x080086b5
 8008620:	08008695 	.word	0x08008695
 8008624:	080086b5 	.word	0x080086b5
 8008628:	080086b5 	.word	0x080086b5
 800862c:	080086b5 	.word	0x080086b5
 8008630:	080086b5 	.word	0x080086b5
 8008634:	080086b5 	.word	0x080086b5
 8008638:	080086b5 	.word	0x080086b5
 800863c:	080086b5 	.word	0x080086b5
 8008640:	0800869d 	.word	0x0800869d
 8008644:	080086b5 	.word	0x080086b5
 8008648:	080086b5 	.word	0x080086b5
 800864c:	080086b5 	.word	0x080086b5
 8008650:	080086b5 	.word	0x080086b5
 8008654:	080086b5 	.word	0x080086b5
 8008658:	080086b5 	.word	0x080086b5
 800865c:	080086b5 	.word	0x080086b5
 8008660:	080086a5 	.word	0x080086a5
 8008664:	080086b5 	.word	0x080086b5
 8008668:	080086b5 	.word	0x080086b5
 800866c:	080086b5 	.word	0x080086b5
 8008670:	080086b5 	.word	0x080086b5
 8008674:	080086b5 	.word	0x080086b5
 8008678:	080086b5 	.word	0x080086b5
 800867c:	080086b5 	.word	0x080086b5
 8008680:	080086ad 	.word	0x080086ad
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e326      	b.n	8008cda <UART_SetConfig+0x7ae>
 800868c:	2304      	movs	r3, #4
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e322      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008694:	2308      	movs	r3, #8
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e31e      	b.n	8008cda <UART_SetConfig+0x7ae>
 800869c:	2310      	movs	r3, #16
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a2:	e31a      	b.n	8008cda <UART_SetConfig+0x7ae>
 80086a4:	2320      	movs	r3, #32
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e316      	b.n	8008cda <UART_SetConfig+0x7ae>
 80086ac:	2340      	movs	r3, #64	@ 0x40
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e312      	b.n	8008cda <UART_SetConfig+0x7ae>
 80086b4:	2380      	movs	r3, #128	@ 0x80
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e30e      	b.n	8008cda <UART_SetConfig+0x7ae>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a69      	ldr	r2, [pc, #420]	@ (8008868 <UART_SetConfig+0x33c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d130      	bne.n	8008728 <UART_SetConfig+0x1fc>
 80086c6:	4b67      	ldr	r3, [pc, #412]	@ (8008864 <UART_SetConfig+0x338>)
 80086c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d826      	bhi.n	8008720 <UART_SetConfig+0x1f4>
 80086d2:	a201      	add	r2, pc, #4	@ (adr r2, 80086d8 <UART_SetConfig+0x1ac>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	080086f1 	.word	0x080086f1
 80086dc:	080086f9 	.word	0x080086f9
 80086e0:	08008701 	.word	0x08008701
 80086e4:	08008709 	.word	0x08008709
 80086e8:	08008711 	.word	0x08008711
 80086ec:	08008719 	.word	0x08008719
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f6:	e2f0      	b.n	8008cda <UART_SetConfig+0x7ae>
 80086f8:	2304      	movs	r3, #4
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e2ec      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008700:	2308      	movs	r3, #8
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e2e8      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008708:	2310      	movs	r3, #16
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e2e4      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008710:	2320      	movs	r3, #32
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e2e0      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008718:	2340      	movs	r3, #64	@ 0x40
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e2dc      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008720:	2380      	movs	r3, #128	@ 0x80
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e2d8      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a4f      	ldr	r2, [pc, #316]	@ (800886c <UART_SetConfig+0x340>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d130      	bne.n	8008794 <UART_SetConfig+0x268>
 8008732:	4b4c      	ldr	r3, [pc, #304]	@ (8008864 <UART_SetConfig+0x338>)
 8008734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	2b05      	cmp	r3, #5
 800873c:	d826      	bhi.n	800878c <UART_SetConfig+0x260>
 800873e:	a201      	add	r2, pc, #4	@ (adr r2, 8008744 <UART_SetConfig+0x218>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	0800875d 	.word	0x0800875d
 8008748:	08008765 	.word	0x08008765
 800874c:	0800876d 	.word	0x0800876d
 8008750:	08008775 	.word	0x08008775
 8008754:	0800877d 	.word	0x0800877d
 8008758:	08008785 	.word	0x08008785
 800875c:	2300      	movs	r3, #0
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008762:	e2ba      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008764:	2304      	movs	r3, #4
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876a:	e2b6      	b.n	8008cda <UART_SetConfig+0x7ae>
 800876c:	2308      	movs	r3, #8
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e2b2      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008774:	2310      	movs	r3, #16
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877a:	e2ae      	b.n	8008cda <UART_SetConfig+0x7ae>
 800877c:	2320      	movs	r3, #32
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e2aa      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008784:	2340      	movs	r3, #64	@ 0x40
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e2a6      	b.n	8008cda <UART_SetConfig+0x7ae>
 800878c:	2380      	movs	r3, #128	@ 0x80
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e2a2      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a35      	ldr	r2, [pc, #212]	@ (8008870 <UART_SetConfig+0x344>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d130      	bne.n	8008800 <UART_SetConfig+0x2d4>
 800879e:	4b31      	ldr	r3, [pc, #196]	@ (8008864 <UART_SetConfig+0x338>)
 80087a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	2b05      	cmp	r3, #5
 80087a8:	d826      	bhi.n	80087f8 <UART_SetConfig+0x2cc>
 80087aa:	a201      	add	r2, pc, #4	@ (adr r2, 80087b0 <UART_SetConfig+0x284>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	080087c9 	.word	0x080087c9
 80087b4:	080087d1 	.word	0x080087d1
 80087b8:	080087d9 	.word	0x080087d9
 80087bc:	080087e1 	.word	0x080087e1
 80087c0:	080087e9 	.word	0x080087e9
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	2300      	movs	r3, #0
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e284      	b.n	8008cda <UART_SetConfig+0x7ae>
 80087d0:	2304      	movs	r3, #4
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e280      	b.n	8008cda <UART_SetConfig+0x7ae>
 80087d8:	2308      	movs	r3, #8
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e27c      	b.n	8008cda <UART_SetConfig+0x7ae>
 80087e0:	2310      	movs	r3, #16
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e278      	b.n	8008cda <UART_SetConfig+0x7ae>
 80087e8:	2320      	movs	r3, #32
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e274      	b.n	8008cda <UART_SetConfig+0x7ae>
 80087f0:	2340      	movs	r3, #64	@ 0x40
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e270      	b.n	8008cda <UART_SetConfig+0x7ae>
 80087f8:	2380      	movs	r3, #128	@ 0x80
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e26c      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1b      	ldr	r2, [pc, #108]	@ (8008874 <UART_SetConfig+0x348>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d142      	bne.n	8008890 <UART_SetConfig+0x364>
 800880a:	4b16      	ldr	r3, [pc, #88]	@ (8008864 <UART_SetConfig+0x338>)
 800880c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b05      	cmp	r3, #5
 8008814:	d838      	bhi.n	8008888 <UART_SetConfig+0x35c>
 8008816:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <UART_SetConfig+0x2f0>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	08008835 	.word	0x08008835
 8008820:	0800883d 	.word	0x0800883d
 8008824:	08008845 	.word	0x08008845
 8008828:	0800884d 	.word	0x0800884d
 800882c:	08008879 	.word	0x08008879
 8008830:	08008881 	.word	0x08008881
 8008834:	2300      	movs	r3, #0
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e24e      	b.n	8008cda <UART_SetConfig+0x7ae>
 800883c:	2304      	movs	r3, #4
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e24a      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008844:	2308      	movs	r3, #8
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e246      	b.n	8008cda <UART_SetConfig+0x7ae>
 800884c:	2310      	movs	r3, #16
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e242      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008854:	cfff69f3 	.word	0xcfff69f3
 8008858:	58000c00 	.word	0x58000c00
 800885c:	11fff4ff 	.word	0x11fff4ff
 8008860:	40011000 	.word	0x40011000
 8008864:	58024400 	.word	0x58024400
 8008868:	40004400 	.word	0x40004400
 800886c:	40004800 	.word	0x40004800
 8008870:	40004c00 	.word	0x40004c00
 8008874:	40005000 	.word	0x40005000
 8008878:	2320      	movs	r3, #32
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887e:	e22c      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008880:	2340      	movs	r3, #64	@ 0x40
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008886:	e228      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008888:	2380      	movs	r3, #128	@ 0x80
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e224      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4ab1      	ldr	r2, [pc, #708]	@ (8008b5c <UART_SetConfig+0x630>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d176      	bne.n	8008988 <UART_SetConfig+0x45c>
 800889a:	4bb1      	ldr	r3, [pc, #708]	@ (8008b60 <UART_SetConfig+0x634>)
 800889c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088a2:	2b28      	cmp	r3, #40	@ 0x28
 80088a4:	d86c      	bhi.n	8008980 <UART_SetConfig+0x454>
 80088a6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <UART_SetConfig+0x380>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	08008951 	.word	0x08008951
 80088b0:	08008981 	.word	0x08008981
 80088b4:	08008981 	.word	0x08008981
 80088b8:	08008981 	.word	0x08008981
 80088bc:	08008981 	.word	0x08008981
 80088c0:	08008981 	.word	0x08008981
 80088c4:	08008981 	.word	0x08008981
 80088c8:	08008981 	.word	0x08008981
 80088cc:	08008959 	.word	0x08008959
 80088d0:	08008981 	.word	0x08008981
 80088d4:	08008981 	.word	0x08008981
 80088d8:	08008981 	.word	0x08008981
 80088dc:	08008981 	.word	0x08008981
 80088e0:	08008981 	.word	0x08008981
 80088e4:	08008981 	.word	0x08008981
 80088e8:	08008981 	.word	0x08008981
 80088ec:	08008961 	.word	0x08008961
 80088f0:	08008981 	.word	0x08008981
 80088f4:	08008981 	.word	0x08008981
 80088f8:	08008981 	.word	0x08008981
 80088fc:	08008981 	.word	0x08008981
 8008900:	08008981 	.word	0x08008981
 8008904:	08008981 	.word	0x08008981
 8008908:	08008981 	.word	0x08008981
 800890c:	08008969 	.word	0x08008969
 8008910:	08008981 	.word	0x08008981
 8008914:	08008981 	.word	0x08008981
 8008918:	08008981 	.word	0x08008981
 800891c:	08008981 	.word	0x08008981
 8008920:	08008981 	.word	0x08008981
 8008924:	08008981 	.word	0x08008981
 8008928:	08008981 	.word	0x08008981
 800892c:	08008971 	.word	0x08008971
 8008930:	08008981 	.word	0x08008981
 8008934:	08008981 	.word	0x08008981
 8008938:	08008981 	.word	0x08008981
 800893c:	08008981 	.word	0x08008981
 8008940:	08008981 	.word	0x08008981
 8008944:	08008981 	.word	0x08008981
 8008948:	08008981 	.word	0x08008981
 800894c:	08008979 	.word	0x08008979
 8008950:	2301      	movs	r3, #1
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e1c0      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008958:	2304      	movs	r3, #4
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e1bc      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008960:	2308      	movs	r3, #8
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e1b8      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008968:	2310      	movs	r3, #16
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e1b4      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008970:	2320      	movs	r3, #32
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e1b0      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008978:	2340      	movs	r3, #64	@ 0x40
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e1ac      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008980:	2380      	movs	r3, #128	@ 0x80
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e1a8      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a75      	ldr	r2, [pc, #468]	@ (8008b64 <UART_SetConfig+0x638>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d130      	bne.n	80089f4 <UART_SetConfig+0x4c8>
 8008992:	4b73      	ldr	r3, [pc, #460]	@ (8008b60 <UART_SetConfig+0x634>)
 8008994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b05      	cmp	r3, #5
 800899c:	d826      	bhi.n	80089ec <UART_SetConfig+0x4c0>
 800899e:	a201      	add	r2, pc, #4	@ (adr r2, 80089a4 <UART_SetConfig+0x478>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	080089bd 	.word	0x080089bd
 80089a8:	080089c5 	.word	0x080089c5
 80089ac:	080089cd 	.word	0x080089cd
 80089b0:	080089d5 	.word	0x080089d5
 80089b4:	080089dd 	.word	0x080089dd
 80089b8:	080089e5 	.word	0x080089e5
 80089bc:	2300      	movs	r3, #0
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e18a      	b.n	8008cda <UART_SetConfig+0x7ae>
 80089c4:	2304      	movs	r3, #4
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e186      	b.n	8008cda <UART_SetConfig+0x7ae>
 80089cc:	2308      	movs	r3, #8
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e182      	b.n	8008cda <UART_SetConfig+0x7ae>
 80089d4:	2310      	movs	r3, #16
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e17e      	b.n	8008cda <UART_SetConfig+0x7ae>
 80089dc:	2320      	movs	r3, #32
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e17a      	b.n	8008cda <UART_SetConfig+0x7ae>
 80089e4:	2340      	movs	r3, #64	@ 0x40
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e176      	b.n	8008cda <UART_SetConfig+0x7ae>
 80089ec:	2380      	movs	r3, #128	@ 0x80
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e172      	b.n	8008cda <UART_SetConfig+0x7ae>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a5b      	ldr	r2, [pc, #364]	@ (8008b68 <UART_SetConfig+0x63c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d130      	bne.n	8008a60 <UART_SetConfig+0x534>
 80089fe:	4b58      	ldr	r3, [pc, #352]	@ (8008b60 <UART_SetConfig+0x634>)
 8008a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d826      	bhi.n	8008a58 <UART_SetConfig+0x52c>
 8008a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a10 <UART_SetConfig+0x4e4>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a29 	.word	0x08008a29
 8008a14:	08008a31 	.word	0x08008a31
 8008a18:	08008a39 	.word	0x08008a39
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a49 	.word	0x08008a49
 8008a24:	08008a51 	.word	0x08008a51
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2e:	e154      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008a30:	2304      	movs	r3, #4
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a36:	e150      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008a38:	2308      	movs	r3, #8
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e14c      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008a40:	2310      	movs	r3, #16
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a46:	e148      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008a48:	2320      	movs	r3, #32
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e144      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008a50:	2340      	movs	r3, #64	@ 0x40
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e140      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008a58:	2380      	movs	r3, #128	@ 0x80
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e13c      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a41      	ldr	r2, [pc, #260]	@ (8008b6c <UART_SetConfig+0x640>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	f040 8082 	bne.w	8008b70 <UART_SetConfig+0x644>
 8008a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b60 <UART_SetConfig+0x634>)
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a74:	2b28      	cmp	r3, #40	@ 0x28
 8008a76:	d86d      	bhi.n	8008b54 <UART_SetConfig+0x628>
 8008a78:	a201      	add	r2, pc, #4	@ (adr r2, 8008a80 <UART_SetConfig+0x554>)
 8008a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7e:	bf00      	nop
 8008a80:	08008b25 	.word	0x08008b25
 8008a84:	08008b55 	.word	0x08008b55
 8008a88:	08008b55 	.word	0x08008b55
 8008a8c:	08008b55 	.word	0x08008b55
 8008a90:	08008b55 	.word	0x08008b55
 8008a94:	08008b55 	.word	0x08008b55
 8008a98:	08008b55 	.word	0x08008b55
 8008a9c:	08008b55 	.word	0x08008b55
 8008aa0:	08008b2d 	.word	0x08008b2d
 8008aa4:	08008b55 	.word	0x08008b55
 8008aa8:	08008b55 	.word	0x08008b55
 8008aac:	08008b55 	.word	0x08008b55
 8008ab0:	08008b55 	.word	0x08008b55
 8008ab4:	08008b55 	.word	0x08008b55
 8008ab8:	08008b55 	.word	0x08008b55
 8008abc:	08008b55 	.word	0x08008b55
 8008ac0:	08008b35 	.word	0x08008b35
 8008ac4:	08008b55 	.word	0x08008b55
 8008ac8:	08008b55 	.word	0x08008b55
 8008acc:	08008b55 	.word	0x08008b55
 8008ad0:	08008b55 	.word	0x08008b55
 8008ad4:	08008b55 	.word	0x08008b55
 8008ad8:	08008b55 	.word	0x08008b55
 8008adc:	08008b55 	.word	0x08008b55
 8008ae0:	08008b3d 	.word	0x08008b3d
 8008ae4:	08008b55 	.word	0x08008b55
 8008ae8:	08008b55 	.word	0x08008b55
 8008aec:	08008b55 	.word	0x08008b55
 8008af0:	08008b55 	.word	0x08008b55
 8008af4:	08008b55 	.word	0x08008b55
 8008af8:	08008b55 	.word	0x08008b55
 8008afc:	08008b55 	.word	0x08008b55
 8008b00:	08008b45 	.word	0x08008b45
 8008b04:	08008b55 	.word	0x08008b55
 8008b08:	08008b55 	.word	0x08008b55
 8008b0c:	08008b55 	.word	0x08008b55
 8008b10:	08008b55 	.word	0x08008b55
 8008b14:	08008b55 	.word	0x08008b55
 8008b18:	08008b55 	.word	0x08008b55
 8008b1c:	08008b55 	.word	0x08008b55
 8008b20:	08008b4d 	.word	0x08008b4d
 8008b24:	2301      	movs	r3, #1
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2a:	e0d6      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008b2c:	2304      	movs	r3, #4
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b32:	e0d2      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008b34:	2308      	movs	r3, #8
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3a:	e0ce      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008b3c:	2310      	movs	r3, #16
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b42:	e0ca      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008b44:	2320      	movs	r3, #32
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4a:	e0c6      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008b4c:	2340      	movs	r3, #64	@ 0x40
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b52:	e0c2      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008b54:	2380      	movs	r3, #128	@ 0x80
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5a:	e0be      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008b5c:	40011400 	.word	0x40011400
 8008b60:	58024400 	.word	0x58024400
 8008b64:	40007800 	.word	0x40007800
 8008b68:	40007c00 	.word	0x40007c00
 8008b6c:	40011800 	.word	0x40011800
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4aad      	ldr	r2, [pc, #692]	@ (8008e2c <UART_SetConfig+0x900>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d176      	bne.n	8008c68 <UART_SetConfig+0x73c>
 8008b7a:	4bad      	ldr	r3, [pc, #692]	@ (8008e30 <UART_SetConfig+0x904>)
 8008b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b82:	2b28      	cmp	r3, #40	@ 0x28
 8008b84:	d86c      	bhi.n	8008c60 <UART_SetConfig+0x734>
 8008b86:	a201      	add	r2, pc, #4	@ (adr r2, 8008b8c <UART_SetConfig+0x660>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008c31 	.word	0x08008c31
 8008b90:	08008c61 	.word	0x08008c61
 8008b94:	08008c61 	.word	0x08008c61
 8008b98:	08008c61 	.word	0x08008c61
 8008b9c:	08008c61 	.word	0x08008c61
 8008ba0:	08008c61 	.word	0x08008c61
 8008ba4:	08008c61 	.word	0x08008c61
 8008ba8:	08008c61 	.word	0x08008c61
 8008bac:	08008c39 	.word	0x08008c39
 8008bb0:	08008c61 	.word	0x08008c61
 8008bb4:	08008c61 	.word	0x08008c61
 8008bb8:	08008c61 	.word	0x08008c61
 8008bbc:	08008c61 	.word	0x08008c61
 8008bc0:	08008c61 	.word	0x08008c61
 8008bc4:	08008c61 	.word	0x08008c61
 8008bc8:	08008c61 	.word	0x08008c61
 8008bcc:	08008c41 	.word	0x08008c41
 8008bd0:	08008c61 	.word	0x08008c61
 8008bd4:	08008c61 	.word	0x08008c61
 8008bd8:	08008c61 	.word	0x08008c61
 8008bdc:	08008c61 	.word	0x08008c61
 8008be0:	08008c61 	.word	0x08008c61
 8008be4:	08008c61 	.word	0x08008c61
 8008be8:	08008c61 	.word	0x08008c61
 8008bec:	08008c49 	.word	0x08008c49
 8008bf0:	08008c61 	.word	0x08008c61
 8008bf4:	08008c61 	.word	0x08008c61
 8008bf8:	08008c61 	.word	0x08008c61
 8008bfc:	08008c61 	.word	0x08008c61
 8008c00:	08008c61 	.word	0x08008c61
 8008c04:	08008c61 	.word	0x08008c61
 8008c08:	08008c61 	.word	0x08008c61
 8008c0c:	08008c51 	.word	0x08008c51
 8008c10:	08008c61 	.word	0x08008c61
 8008c14:	08008c61 	.word	0x08008c61
 8008c18:	08008c61 	.word	0x08008c61
 8008c1c:	08008c61 	.word	0x08008c61
 8008c20:	08008c61 	.word	0x08008c61
 8008c24:	08008c61 	.word	0x08008c61
 8008c28:	08008c61 	.word	0x08008c61
 8008c2c:	08008c59 	.word	0x08008c59
 8008c30:	2301      	movs	r3, #1
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e050      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e04c      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008c40:	2308      	movs	r3, #8
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e048      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008c48:	2310      	movs	r3, #16
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e044      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008c50:	2320      	movs	r3, #32
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e040      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008c58:	2340      	movs	r3, #64	@ 0x40
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e03c      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008c60:	2380      	movs	r3, #128	@ 0x80
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e038      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a71      	ldr	r2, [pc, #452]	@ (8008e34 <UART_SetConfig+0x908>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d130      	bne.n	8008cd4 <UART_SetConfig+0x7a8>
 8008c72:	4b6f      	ldr	r3, [pc, #444]	@ (8008e30 <UART_SetConfig+0x904>)
 8008c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	2b05      	cmp	r3, #5
 8008c7c:	d826      	bhi.n	8008ccc <UART_SetConfig+0x7a0>
 8008c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c84 <UART_SetConfig+0x758>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008c9d 	.word	0x08008c9d
 8008c88:	08008ca5 	.word	0x08008ca5
 8008c8c:	08008cad 	.word	0x08008cad
 8008c90:	08008cb5 	.word	0x08008cb5
 8008c94:	08008cbd 	.word	0x08008cbd
 8008c98:	08008cc5 	.word	0x08008cc5
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e01a      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008ca4:	2304      	movs	r3, #4
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e016      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008cac:	2308      	movs	r3, #8
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e012      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008cb4:	2310      	movs	r3, #16
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e00e      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008cbc:	2320      	movs	r3, #32
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e00a      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008cc4:	2340      	movs	r3, #64	@ 0x40
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e006      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008ccc:	2380      	movs	r3, #128	@ 0x80
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e002      	b.n	8008cda <UART_SetConfig+0x7ae>
 8008cd4:	2380      	movs	r3, #128	@ 0x80
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a55      	ldr	r2, [pc, #340]	@ (8008e34 <UART_SetConfig+0x908>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	f040 80f8 	bne.w	8008ed6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ce6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	dc46      	bgt.n	8008d7c <UART_SetConfig+0x850>
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	db75      	blt.n	8008dde <UART_SetConfig+0x8b2>
 8008cf2:	3b02      	subs	r3, #2
 8008cf4:	2b1e      	cmp	r3, #30
 8008cf6:	d872      	bhi.n	8008dde <UART_SetConfig+0x8b2>
 8008cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8008d00 <UART_SetConfig+0x7d4>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d83 	.word	0x08008d83
 8008d04:	08008ddf 	.word	0x08008ddf
 8008d08:	08008d8b 	.word	0x08008d8b
 8008d0c:	08008ddf 	.word	0x08008ddf
 8008d10:	08008ddf 	.word	0x08008ddf
 8008d14:	08008ddf 	.word	0x08008ddf
 8008d18:	08008d9b 	.word	0x08008d9b
 8008d1c:	08008ddf 	.word	0x08008ddf
 8008d20:	08008ddf 	.word	0x08008ddf
 8008d24:	08008ddf 	.word	0x08008ddf
 8008d28:	08008ddf 	.word	0x08008ddf
 8008d2c:	08008ddf 	.word	0x08008ddf
 8008d30:	08008ddf 	.word	0x08008ddf
 8008d34:	08008ddf 	.word	0x08008ddf
 8008d38:	08008dab 	.word	0x08008dab
 8008d3c:	08008ddf 	.word	0x08008ddf
 8008d40:	08008ddf 	.word	0x08008ddf
 8008d44:	08008ddf 	.word	0x08008ddf
 8008d48:	08008ddf 	.word	0x08008ddf
 8008d4c:	08008ddf 	.word	0x08008ddf
 8008d50:	08008ddf 	.word	0x08008ddf
 8008d54:	08008ddf 	.word	0x08008ddf
 8008d58:	08008ddf 	.word	0x08008ddf
 8008d5c:	08008ddf 	.word	0x08008ddf
 8008d60:	08008ddf 	.word	0x08008ddf
 8008d64:	08008ddf 	.word	0x08008ddf
 8008d68:	08008ddf 	.word	0x08008ddf
 8008d6c:	08008ddf 	.word	0x08008ddf
 8008d70:	08008ddf 	.word	0x08008ddf
 8008d74:	08008ddf 	.word	0x08008ddf
 8008d78:	08008dd1 	.word	0x08008dd1
 8008d7c:	2b40      	cmp	r3, #64	@ 0x40
 8008d7e:	d02a      	beq.n	8008dd6 <UART_SetConfig+0x8aa>
 8008d80:	e02d      	b.n	8008dde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d82:	f7fe f851 	bl	8006e28 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d88:	e02f      	b.n	8008dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe f860 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d98:	e027      	b.n	8008dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d9a:	f107 0318 	add.w	r3, r7, #24
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe f9ac 	bl	80070fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da8:	e01f      	b.n	8008dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008daa:	4b21      	ldr	r3, [pc, #132]	@ (8008e30 <UART_SetConfig+0x904>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d009      	beq.n	8008dca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008db6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e30 <UART_SetConfig+0x904>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	08db      	lsrs	r3, r3, #3
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e38 <UART_SetConfig+0x90c>)
 8008dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dc8:	e00f      	b.n	8008dea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008dca:	4b1b      	ldr	r3, [pc, #108]	@ (8008e38 <UART_SetConfig+0x90c>)
 8008dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dce:	e00c      	b.n	8008dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e3c <UART_SetConfig+0x910>)
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd4:	e009      	b.n	8008dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ddc:	e005      	b.n	8008dea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 81ee 	beq.w	80091ce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df6:	4a12      	ldr	r2, [pc, #72]	@ (8008e40 <UART_SetConfig+0x914>)
 8008df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e04:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4413      	add	r3, r2
 8008e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d305      	bcc.n	8008e22 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d910      	bls.n	8008e44 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e28:	e1d1      	b.n	80091ce <UART_SetConfig+0xca2>
 8008e2a:	bf00      	nop
 8008e2c:	40011c00 	.word	0x40011c00
 8008e30:	58024400 	.word	0x58024400
 8008e34:	58000c00 	.word	0x58000c00
 8008e38:	03d09000 	.word	0x03d09000
 8008e3c:	003d0900 	.word	0x003d0900
 8008e40:	08009d48 	.word	0x08009d48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e46:	2200      	movs	r2, #0
 8008e48:	60bb      	str	r3, [r7, #8]
 8008e4a:	60fa      	str	r2, [r7, #12]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e50:	4ac0      	ldr	r2, [pc, #768]	@ (8009154 <UART_SetConfig+0xc28>)
 8008e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2200      	movs	r2, #0
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e66:	f7f7 fa41 	bl	80002ec <__aeabi_uldivmod>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4610      	mov	r0, r2
 8008e70:	4619      	mov	r1, r3
 8008e72:	f04f 0200 	mov.w	r2, #0
 8008e76:	f04f 0300 	mov.w	r3, #0
 8008e7a:	020b      	lsls	r3, r1, #8
 8008e7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e80:	0202      	lsls	r2, r0, #8
 8008e82:	6979      	ldr	r1, [r7, #20]
 8008e84:	6849      	ldr	r1, [r1, #4]
 8008e86:	0849      	lsrs	r1, r1, #1
 8008e88:	2000      	movs	r0, #0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	eb12 0804 	adds.w	r8, r2, r4
 8008e92:	eb43 0905 	adc.w	r9, r3, r5
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	469a      	mov	sl, r3
 8008e9e:	4693      	mov	fp, r2
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	f7f7 fa20 	bl	80002ec <__aeabi_uldivmod>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008eba:	d308      	bcc.n	8008ece <UART_SetConfig+0x9a2>
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ec2:	d204      	bcs.n	8008ece <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eca:	60da      	str	r2, [r3, #12]
 8008ecc:	e17f      	b.n	80091ce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ed4:	e17b      	b.n	80091ce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ede:	f040 80bd 	bne.w	800905c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008ee2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	dc48      	bgt.n	8008f7c <UART_SetConfig+0xa50>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	db7b      	blt.n	8008fe6 <UART_SetConfig+0xaba>
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	d879      	bhi.n	8008fe6 <UART_SetConfig+0xaba>
 8008ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef8 <UART_SetConfig+0x9cc>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f83 	.word	0x08008f83
 8008efc:	08008f8b 	.word	0x08008f8b
 8008f00:	08008fe7 	.word	0x08008fe7
 8008f04:	08008fe7 	.word	0x08008fe7
 8008f08:	08008f93 	.word	0x08008f93
 8008f0c:	08008fe7 	.word	0x08008fe7
 8008f10:	08008fe7 	.word	0x08008fe7
 8008f14:	08008fe7 	.word	0x08008fe7
 8008f18:	08008fa3 	.word	0x08008fa3
 8008f1c:	08008fe7 	.word	0x08008fe7
 8008f20:	08008fe7 	.word	0x08008fe7
 8008f24:	08008fe7 	.word	0x08008fe7
 8008f28:	08008fe7 	.word	0x08008fe7
 8008f2c:	08008fe7 	.word	0x08008fe7
 8008f30:	08008fe7 	.word	0x08008fe7
 8008f34:	08008fe7 	.word	0x08008fe7
 8008f38:	08008fb3 	.word	0x08008fb3
 8008f3c:	08008fe7 	.word	0x08008fe7
 8008f40:	08008fe7 	.word	0x08008fe7
 8008f44:	08008fe7 	.word	0x08008fe7
 8008f48:	08008fe7 	.word	0x08008fe7
 8008f4c:	08008fe7 	.word	0x08008fe7
 8008f50:	08008fe7 	.word	0x08008fe7
 8008f54:	08008fe7 	.word	0x08008fe7
 8008f58:	08008fe7 	.word	0x08008fe7
 8008f5c:	08008fe7 	.word	0x08008fe7
 8008f60:	08008fe7 	.word	0x08008fe7
 8008f64:	08008fe7 	.word	0x08008fe7
 8008f68:	08008fe7 	.word	0x08008fe7
 8008f6c:	08008fe7 	.word	0x08008fe7
 8008f70:	08008fe7 	.word	0x08008fe7
 8008f74:	08008fe7 	.word	0x08008fe7
 8008f78:	08008fd9 	.word	0x08008fd9
 8008f7c:	2b40      	cmp	r3, #64	@ 0x40
 8008f7e:	d02e      	beq.n	8008fde <UART_SetConfig+0xab2>
 8008f80:	e031      	b.n	8008fe6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f82:	f7fc fd67 	bl	8005a54 <HAL_RCC_GetPCLK1Freq>
 8008f86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f88:	e033      	b.n	8008ff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f8a:	f7fc fd79 	bl	8005a80 <HAL_RCC_GetPCLK2Freq>
 8008f8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f90:	e02f      	b.n	8008ff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fd ff5c 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa0:	e027      	b.n	8008ff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fa2:	f107 0318 	add.w	r3, r7, #24
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fe f8a8 	bl	80070fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb0:	e01f      	b.n	8008ff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fb2:	4b69      	ldr	r3, [pc, #420]	@ (8009158 <UART_SetConfig+0xc2c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d009      	beq.n	8008fd2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fbe:	4b66      	ldr	r3, [pc, #408]	@ (8009158 <UART_SetConfig+0xc2c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	08db      	lsrs	r3, r3, #3
 8008fc4:	f003 0303 	and.w	r3, r3, #3
 8008fc8:	4a64      	ldr	r2, [pc, #400]	@ (800915c <UART_SetConfig+0xc30>)
 8008fca:	fa22 f303 	lsr.w	r3, r2, r3
 8008fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fd0:	e00f      	b.n	8008ff2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008fd2:	4b62      	ldr	r3, [pc, #392]	@ (800915c <UART_SetConfig+0xc30>)
 8008fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd6:	e00c      	b.n	8008ff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fd8:	4b61      	ldr	r3, [pc, #388]	@ (8009160 <UART_SetConfig+0xc34>)
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fdc:	e009      	b.n	8008ff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe4:	e005      	b.n	8008ff2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 80ea 	beq.w	80091ce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffe:	4a55      	ldr	r2, [pc, #340]	@ (8009154 <UART_SetConfig+0xc28>)
 8009000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009004:	461a      	mov	r2, r3
 8009006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009008:	fbb3 f3f2 	udiv	r3, r3, r2
 800900c:	005a      	lsls	r2, r3, #1
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	085b      	lsrs	r3, r3, #1
 8009014:	441a      	add	r2, r3
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	fbb2 f3f3 	udiv	r3, r2, r3
 800901e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009022:	2b0f      	cmp	r3, #15
 8009024:	d916      	bls.n	8009054 <UART_SetConfig+0xb28>
 8009026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800902c:	d212      	bcs.n	8009054 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800902e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009030:	b29b      	uxth	r3, r3
 8009032:	f023 030f 	bic.w	r3, r3, #15
 8009036:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	b29b      	uxth	r3, r3
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	b29a      	uxth	r2, r3
 8009044:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009046:	4313      	orrs	r3, r2
 8009048:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009050:	60da      	str	r2, [r3, #12]
 8009052:	e0bc      	b.n	80091ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800905a:	e0b8      	b.n	80091ce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800905c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009060:	2b20      	cmp	r3, #32
 8009062:	dc4b      	bgt.n	80090fc <UART_SetConfig+0xbd0>
 8009064:	2b00      	cmp	r3, #0
 8009066:	f2c0 8087 	blt.w	8009178 <UART_SetConfig+0xc4c>
 800906a:	2b20      	cmp	r3, #32
 800906c:	f200 8084 	bhi.w	8009178 <UART_SetConfig+0xc4c>
 8009070:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <UART_SetConfig+0xb4c>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	08009103 	.word	0x08009103
 800907c:	0800910b 	.word	0x0800910b
 8009080:	08009179 	.word	0x08009179
 8009084:	08009179 	.word	0x08009179
 8009088:	08009113 	.word	0x08009113
 800908c:	08009179 	.word	0x08009179
 8009090:	08009179 	.word	0x08009179
 8009094:	08009179 	.word	0x08009179
 8009098:	08009123 	.word	0x08009123
 800909c:	08009179 	.word	0x08009179
 80090a0:	08009179 	.word	0x08009179
 80090a4:	08009179 	.word	0x08009179
 80090a8:	08009179 	.word	0x08009179
 80090ac:	08009179 	.word	0x08009179
 80090b0:	08009179 	.word	0x08009179
 80090b4:	08009179 	.word	0x08009179
 80090b8:	08009133 	.word	0x08009133
 80090bc:	08009179 	.word	0x08009179
 80090c0:	08009179 	.word	0x08009179
 80090c4:	08009179 	.word	0x08009179
 80090c8:	08009179 	.word	0x08009179
 80090cc:	08009179 	.word	0x08009179
 80090d0:	08009179 	.word	0x08009179
 80090d4:	08009179 	.word	0x08009179
 80090d8:	08009179 	.word	0x08009179
 80090dc:	08009179 	.word	0x08009179
 80090e0:	08009179 	.word	0x08009179
 80090e4:	08009179 	.word	0x08009179
 80090e8:	08009179 	.word	0x08009179
 80090ec:	08009179 	.word	0x08009179
 80090f0:	08009179 	.word	0x08009179
 80090f4:	08009179 	.word	0x08009179
 80090f8:	0800916b 	.word	0x0800916b
 80090fc:	2b40      	cmp	r3, #64	@ 0x40
 80090fe:	d037      	beq.n	8009170 <UART_SetConfig+0xc44>
 8009100:	e03a      	b.n	8009178 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009102:	f7fc fca7 	bl	8005a54 <HAL_RCC_GetPCLK1Freq>
 8009106:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009108:	e03c      	b.n	8009184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800910a:	f7fc fcb9 	bl	8005a80 <HAL_RCC_GetPCLK2Freq>
 800910e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009110:	e038      	b.n	8009184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009116:	4618      	mov	r0, r3
 8009118:	f7fd fe9c 	bl	8006e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009120:	e030      	b.n	8009184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009122:	f107 0318 	add.w	r3, r7, #24
 8009126:	4618      	mov	r0, r3
 8009128:	f7fd ffe8 	bl	80070fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009130:	e028      	b.n	8009184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009132:	4b09      	ldr	r3, [pc, #36]	@ (8009158 <UART_SetConfig+0xc2c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0320 	and.w	r3, r3, #32
 800913a:	2b00      	cmp	r3, #0
 800913c:	d012      	beq.n	8009164 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800913e:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <UART_SetConfig+0xc2c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	08db      	lsrs	r3, r3, #3
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	4a04      	ldr	r2, [pc, #16]	@ (800915c <UART_SetConfig+0xc30>)
 800914a:	fa22 f303 	lsr.w	r3, r2, r3
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009150:	e018      	b.n	8009184 <UART_SetConfig+0xc58>
 8009152:	bf00      	nop
 8009154:	08009d48 	.word	0x08009d48
 8009158:	58024400 	.word	0x58024400
 800915c:	03d09000 	.word	0x03d09000
 8009160:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009164:	4b24      	ldr	r3, [pc, #144]	@ (80091f8 <UART_SetConfig+0xccc>)
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009168:	e00c      	b.n	8009184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800916a:	4b24      	ldr	r3, [pc, #144]	@ (80091fc <UART_SetConfig+0xcd0>)
 800916c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916e:	e009      	b.n	8009184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009170:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009176:	e005      	b.n	8009184 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009182:	bf00      	nop
    }

    if (pclk != 0U)
 8009184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d021      	beq.n	80091ce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918e:	4a1c      	ldr	r2, [pc, #112]	@ (8009200 <UART_SetConfig+0xcd4>)
 8009190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009194:	461a      	mov	r2, r3
 8009196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009198:	fbb3 f2f2 	udiv	r2, r3, r2
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	085b      	lsrs	r3, r3, #1
 80091a2:	441a      	add	r2, r3
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b0:	2b0f      	cmp	r3, #15
 80091b2:	d909      	bls.n	80091c8 <UART_SetConfig+0xc9c>
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ba:	d205      	bcs.n	80091c8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091be:	b29a      	uxth	r2, r3
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60da      	str	r2, [r3, #12]
 80091c6:	e002      	b.n	80091ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2201      	movs	r2, #1
 80091da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2200      	movs	r2, #0
 80091e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2200      	movs	r2, #0
 80091e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80091ea:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3748      	adds	r7, #72	@ 0x48
 80091f2:	46bd      	mov	sp, r7
 80091f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091f8:	03d09000 	.word	0x03d09000
 80091fc:	003d0900 	.word	0x003d0900
 8009200:	08009d48 	.word	0x08009d48

08009204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009276:	f003 0304 	and.w	r3, r3, #4
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009298:	f003 0310 	and.w	r3, r3, #16
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00a      	beq.n	80092b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ba:	f003 0320 	and.w	r3, r3, #32
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d01a      	beq.n	800931a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009302:	d10a      	bne.n	800931a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	605a      	str	r2, [r3, #4]
  }
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b098      	sub	sp, #96	@ 0x60
 800934c:	af02      	add	r7, sp, #8
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009358:	f7f7 feac 	bl	80010b4 <HAL_GetTick>
 800935c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b08      	cmp	r3, #8
 800936a:	d12f      	bne.n	80093cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800936c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009374:	2200      	movs	r2, #0
 8009376:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f88e 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d022      	beq.n	80093cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800939a:	653b      	str	r3, [r7, #80]	@ 0x50
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80093a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e6      	bne.n	8009386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2220      	movs	r2, #32
 80093bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e063      	b.n	8009494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d149      	bne.n	800946e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093e2:	2200      	movs	r2, #0
 80093e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f857 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d03c      	beq.n	800946e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	623b      	str	r3, [r7, #32]
   return(result);
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009412:	633b      	str	r3, [r7, #48]	@ 0x30
 8009414:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e6      	bne.n	80093f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3308      	adds	r3, #8
 800942c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	60fb      	str	r3, [r7, #12]
   return(result);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f023 0301 	bic.w	r3, r3, #1
 800943c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3308      	adds	r3, #8
 8009444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009446:	61fa      	str	r2, [r7, #28]
 8009448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	69b9      	ldr	r1, [r7, #24]
 800944c:	69fa      	ldr	r2, [r7, #28]
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	617b      	str	r3, [r7, #20]
   return(result);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e5      	bne.n	8009426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2220      	movs	r2, #32
 800945e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e012      	b.n	8009494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3758      	adds	r7, #88	@ 0x58
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ac:	e04f      	b.n	800954e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d04b      	beq.n	800954e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b6:	f7f7 fdfd 	bl	80010b4 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d302      	bcc.n	80094cc <UART_WaitOnFlagUntilTimeout+0x30>
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e04e      	b.n	800956e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0304 	and.w	r3, r3, #4
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d037      	beq.n	800954e <UART_WaitOnFlagUntilTimeout+0xb2>
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b80      	cmp	r3, #128	@ 0x80
 80094e2:	d034      	beq.n	800954e <UART_WaitOnFlagUntilTimeout+0xb2>
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b40      	cmp	r3, #64	@ 0x40
 80094e8:	d031      	beq.n	800954e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b08      	cmp	r3, #8
 80094f6:	d110      	bne.n	800951a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2208      	movs	r2, #8
 80094fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 f921 	bl	8009748 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2208      	movs	r2, #8
 800950a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e029      	b.n	800956e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009528:	d111      	bne.n	800954e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f907 	bl	8009748 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2220      	movs	r2, #32
 800953e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e00f      	b.n	800956e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69da      	ldr	r2, [r3, #28]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	4013      	ands	r3, r2
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	429a      	cmp	r2, r3
 800955c:	bf0c      	ite	eq
 800955e:	2301      	moveq	r3, #1
 8009560:	2300      	movne	r3, #0
 8009562:	b2db      	uxtb	r3, r3
 8009564:	461a      	mov	r2, r3
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	429a      	cmp	r2, r3
 800956a:	d0a0      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
	...

08009578 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b096      	sub	sp, #88	@ 0x58
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	4613      	mov	r3, r2
 8009584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	88fa      	ldrh	r2, [r7, #6]
 8009590:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2222      	movs	r2, #34	@ 0x22
 80095a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d02d      	beq.n	800960a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095b4:	4a40      	ldr	r2, [pc, #256]	@ (80096b8 <UART_Start_Receive_DMA+0x140>)
 80095b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095be:	4a3f      	ldr	r2, [pc, #252]	@ (80096bc <UART_Start_Receive_DMA+0x144>)
 80095c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095c8:	4a3d      	ldr	r2, [pc, #244]	@ (80096c0 <UART_Start_Receive_DMA+0x148>)
 80095ca:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d2:	2200      	movs	r2, #0
 80095d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3324      	adds	r3, #36	@ 0x24
 80095e2:	4619      	mov	r1, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095e8:	461a      	mov	r2, r3
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	f7f8 fbd2 	bl	8001d94 <HAL_DMA_Start_IT>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2210      	movs	r2, #16
 80095fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e051      	b.n	80096ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d018      	beq.n	8009644 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009626:	657b      	str	r3, [r7, #84]	@ 0x54
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009632:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800963e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e6      	bne.n	8009612 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3308      	adds	r3, #8
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	653b      	str	r3, [r7, #80]	@ 0x50
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3308      	adds	r3, #8
 8009662:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009664:	637a      	str	r2, [r7, #52]	@ 0x34
 8009666:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800966a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e5      	bne.n	8009644 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3308      	adds	r3, #8
 800967e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	613b      	str	r3, [r7, #16]
   return(result);
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800968e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009698:	623a      	str	r2, [r7, #32]
 800969a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	69f9      	ldr	r1, [r7, #28]
 800969e:	6a3a      	ldr	r2, [r7, #32]
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e5      	bne.n	8009678 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3758      	adds	r7, #88	@ 0x58
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	08009815 	.word	0x08009815
 80096bc:	0800993d 	.word	0x0800993d
 80096c0:	0800997b 	.word	0x0800997b

080096c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b08f      	sub	sp, #60	@ 0x3c
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80096e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e6      	bne.n	80096cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3308      	adds	r3, #8
 8009704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	60bb      	str	r3, [r7, #8]
   return(result);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009714:	633b      	str	r3, [r7, #48]	@ 0x30
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3308      	adds	r3, #8
 800971c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800971e:	61ba      	str	r2, [r7, #24]
 8009720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6979      	ldr	r1, [r7, #20]
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	613b      	str	r3, [r7, #16]
   return(result);
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e5      	bne.n	80096fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2220      	movs	r2, #32
 8009736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800973a:	bf00      	nop
 800973c:	373c      	adds	r7, #60	@ 0x3c
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b095      	sub	sp, #84	@ 0x54
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800975e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800976e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009770:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009774:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e6      	bne.n	8009750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	61fb      	str	r3, [r7, #28]
   return(result);
 8009792:	69fa      	ldr	r2, [r7, #28]
 8009794:	4b1e      	ldr	r3, [pc, #120]	@ (8009810 <UART_EndRxTransfer+0xc8>)
 8009796:	4013      	ands	r3, r2
 8009798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3308      	adds	r3, #8
 80097a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e5      	bne.n	8009782 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d118      	bne.n	80097f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f023 0310 	bic.w	r3, r3, #16
 80097d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6979      	ldr	r1, [r7, #20]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	e841 2300 	strex	r3, r2, [r1]
 80097e8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1e6      	bne.n	80097be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009804:	bf00      	nop
 8009806:	3754      	adds	r7, #84	@ 0x54
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	effffffe 	.word	0xeffffffe

08009814 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b09c      	sub	sp, #112	@ 0x70
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009820:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800982a:	d071      	beq.n	8009910 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800982c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800982e:	2200      	movs	r2, #0
 8009830:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800984a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009852:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009854:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009858:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e6      	bne.n	8009834 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3308      	adds	r3, #8
 800986c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009878:	f023 0301 	bic.w	r3, r3, #1
 800987c:	667b      	str	r3, [r7, #100]	@ 0x64
 800987e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3308      	adds	r3, #8
 8009884:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009886:	647a      	str	r2, [r7, #68]	@ 0x44
 8009888:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800988c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e5      	bne.n	8009866 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800989a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3308      	adds	r3, #8
 80098a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	623b      	str	r3, [r7, #32]
   return(result);
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80098b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80098bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e5      	bne.n	800989a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098d0:	2220      	movs	r2, #32
 80098d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d118      	bne.n	8009910 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	e853 3f00 	ldrex	r3, [r3]
 80098ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f023 0310 	bic.w	r3, r3, #16
 80098f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	461a      	mov	r2, r3
 80098fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098fc:	61fb      	str	r3, [r7, #28]
 80098fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	69b9      	ldr	r1, [r7, #24]
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	e841 2300 	strex	r3, r2, [r1]
 8009908:	617b      	str	r3, [r7, #20]
   return(result);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e6      	bne.n	80098de <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009912:	2200      	movs	r2, #0
 8009914:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d107      	bne.n	800992e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800991e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009924:	4619      	mov	r1, r3
 8009926:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009928:	f7fe fdf4 	bl	8008514 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800992c:	e002      	b.n	8009934 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800992e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009930:	f7f7 f8b6 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8009934:	bf00      	nop
 8009936:	3770      	adds	r7, #112	@ 0x70
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009948:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2201      	movs	r2, #1
 800994e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009954:	2b01      	cmp	r3, #1
 8009956:	d109      	bne.n	800996c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	b29b      	uxth	r3, r3
 8009962:	4619      	mov	r1, r3
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7fe fdd5 	bl	8008514 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800996a:	e002      	b.n	8009972 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7fe fdbd 	bl	80084ec <HAL_UART_RxHalfCpltCallback>
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009986:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800998e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009996:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099a2:	2b80      	cmp	r3, #128	@ 0x80
 80099a4:	d109      	bne.n	80099ba <UART_DMAError+0x40>
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b21      	cmp	r3, #33	@ 0x21
 80099aa:	d106      	bne.n	80099ba <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80099b4:	6978      	ldr	r0, [r7, #20]
 80099b6:	f7ff fe85 	bl	80096c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c4:	2b40      	cmp	r3, #64	@ 0x40
 80099c6:	d109      	bne.n	80099dc <UART_DMAError+0x62>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b22      	cmp	r3, #34	@ 0x22
 80099cc:	d106      	bne.n	80099dc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80099d6:	6978      	ldr	r0, [r7, #20]
 80099d8:	f7ff feb6 	bl	8009748 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e2:	f043 0210 	orr.w	r2, r3, #16
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099ec:	6978      	ldr	r0, [r7, #20]
 80099ee:	f7fe fd87 	bl	8008500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099f2:	bf00      	nop
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f7fe fd71 	bl	8008500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a1e:	bf00      	nop
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b088      	sub	sp, #32
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a42:	61fb      	str	r3, [r7, #28]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	61bb      	str	r3, [r7, #24]
 8009a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	6979      	ldr	r1, [r7, #20]
 8009a52:	69ba      	ldr	r2, [r7, #24]
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	613b      	str	r3, [r7, #16]
   return(result);
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e6      	bne.n	8009a2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7fe fd32 	bl	80084d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a74:	bf00      	nop
 8009a76:	3720      	adds	r7, #32
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d101      	bne.n	8009ace <HAL_UARTEx_DisableFifoMode+0x16>
 8009aca:	2302      	movs	r3, #2
 8009acc:	e027      	b.n	8009b1e <HAL_UARTEx_DisableFifoMode+0x66>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2224      	movs	r2, #36	@ 0x24
 8009ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0201 	bic.w	r2, r2, #1
 8009af4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009afc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d101      	bne.n	8009b42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e02d      	b.n	8009b9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2224      	movs	r2, #36	@ 0x24
 8009b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0201 	bic.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f850 	bl	8009c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d101      	bne.n	8009bbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e02d      	b.n	8009c1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2224      	movs	r2, #36	@ 0x24
 8009bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 0201 	bic.w	r2, r2, #1
 8009be4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f812 	bl	8009c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d108      	bne.n	8009c46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c44:	e031      	b.n	8009caa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c46:	2310      	movs	r3, #16
 8009c48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c4a:	2310      	movs	r3, #16
 8009c4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	0e5b      	lsrs	r3, r3, #25
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 0307 	and.w	r3, r3, #7
 8009c5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	0f5b      	lsrs	r3, r3, #29
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
 8009c70:	7b3a      	ldrb	r2, [r7, #12]
 8009c72:	4911      	ldr	r1, [pc, #68]	@ (8009cb8 <UARTEx_SetNbDataToProcess+0x94>)
 8009c74:	5c8a      	ldrb	r2, [r1, r2]
 8009c76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c7a:	7b3a      	ldrb	r2, [r7, #12]
 8009c7c:	490f      	ldr	r1, [pc, #60]	@ (8009cbc <UARTEx_SetNbDataToProcess+0x98>)
 8009c7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	7b7a      	ldrb	r2, [r7, #13]
 8009c90:	4909      	ldr	r1, [pc, #36]	@ (8009cb8 <UARTEx_SetNbDataToProcess+0x94>)
 8009c92:	5c8a      	ldrb	r2, [r1, r2]
 8009c94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c98:	7b7a      	ldrb	r2, [r7, #13]
 8009c9a:	4908      	ldr	r1, [pc, #32]	@ (8009cbc <UARTEx_SetNbDataToProcess+0x98>)
 8009c9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009caa:	bf00      	nop
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	08009d60 	.word	0x08009d60
 8009cbc:	08009d68 	.word	0x08009d68

08009cc0 <memset>:
 8009cc0:	4402      	add	r2, r0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d100      	bne.n	8009cca <memset+0xa>
 8009cc8:	4770      	bx	lr
 8009cca:	f803 1b01 	strb.w	r1, [r3], #1
 8009cce:	e7f9      	b.n	8009cc4 <memset+0x4>

08009cd0 <__libc_init_array>:
 8009cd0:	b570      	push	{r4, r5, r6, lr}
 8009cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8009d08 <__libc_init_array+0x38>)
 8009cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8009d0c <__libc_init_array+0x3c>)
 8009cd6:	1b64      	subs	r4, r4, r5
 8009cd8:	10a4      	asrs	r4, r4, #2
 8009cda:	2600      	movs	r6, #0
 8009cdc:	42a6      	cmp	r6, r4
 8009cde:	d109      	bne.n	8009cf4 <__libc_init_array+0x24>
 8009ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8009d10 <__libc_init_array+0x40>)
 8009ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8009d14 <__libc_init_array+0x44>)
 8009ce4:	f000 f818 	bl	8009d18 <_init>
 8009ce8:	1b64      	subs	r4, r4, r5
 8009cea:	10a4      	asrs	r4, r4, #2
 8009cec:	2600      	movs	r6, #0
 8009cee:	42a6      	cmp	r6, r4
 8009cf0:	d105      	bne.n	8009cfe <__libc_init_array+0x2e>
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf8:	4798      	blx	r3
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	e7ee      	b.n	8009cdc <__libc_init_array+0xc>
 8009cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d02:	4798      	blx	r3
 8009d04:	3601      	adds	r6, #1
 8009d06:	e7f2      	b.n	8009cee <__libc_init_array+0x1e>
 8009d08:	08009d78 	.word	0x08009d78
 8009d0c:	08009d78 	.word	0x08009d78
 8009d10:	08009d78 	.word	0x08009d78
 8009d14:	08009d7c 	.word	0x08009d7c

08009d18 <_init>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	bf00      	nop
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr

08009d24 <_fini>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	bf00      	nop
 8009d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2a:	bc08      	pop	{r3}
 8009d2c:	469e      	mov	lr, r3
 8009d2e:	4770      	bx	lr
