
WRAP_TX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afc0  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  0800b270  0800b270  0000c270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc98  0800bc98  0000cc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bca0  0800bca0  0000cca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bca4  0800bca4  0000cca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00002400  24000000  0800bca8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a78  24002400  0800e0a8  0000f400  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006e78  0800e0a8  0000fe78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f400  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001900e  00000000  00000000  0000f42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f9c  00000000  00000000  0002843c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001360  00000000  00000000  0002b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f05  00000000  00000000  0002c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000318df  00000000  00000000  0002d63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b166  00000000  00000000  0005ef1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143c5e  00000000  00000000  0007a082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001bdce0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000053ac  00000000  00000000  001bdd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001c3144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00001363  00000000  00000000  001c3196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000010  00000000  00000000  001c44f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24002400 	.word	0x24002400
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b258 	.word	0x0800b258

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24002404 	.word	0x24002404
 80002ec:	0800b258 	.word	0x0800b258

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <recalculate_output>:
	for (int i = 0; i < 2300; i++) {
		dac_buf[i] = single_val;
	}
}

void recalculate_output(uint8_t tiny_msg) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	// put the packet header in the symbol buffer
	memcpy(symbol_buffer, packet_header, 4*PACKET_HEADER_LEN);
 80005ea:	4a55      	ldr	r2, [pc, #340]	@ (8000740 <recalculate_output+0x160>)
 80005ec:	4b55      	ldr	r3, [pc, #340]	@ (8000744 <recalculate_output+0x164>)
 80005ee:	4614      	mov	r4, r2
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// put the tiny message in the symbol buffer
	for(int j = 0; j < 8; j++)
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e010      	b.n	800062e <recalculate_output+0x4e>
	{
		symbol_buffer[PACKET_HEADER_LEN + 8 - 1 - j] = 2 * (int)(tiny_msg & 0x01) - 1;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	005a      	lsls	r2, r3, #1
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	f1c3 0316 	rsb	r3, r3, #22
 800061a:	3a01      	subs	r2, #1
 800061c:	4948      	ldr	r1, [pc, #288]	@ (8000740 <recalculate_output+0x160>)
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		tiny_msg = tiny_msg >> 1;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	71fb      	strb	r3, [r7, #7]
	for(int j = 0; j < 8; j++)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2b07      	cmp	r3, #7
 8000632:	ddeb      	ble.n	800060c <recalculate_output+0x2c>
	}

    // upsample symbols
    for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	e02b      	b.n	8000692 <recalculate_output+0xb2>
	    if (i % SPS == 0) {
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <recalculate_output+0x168>)
 800063e:	fb83 1302 	smull	r1, r3, r3, r2
 8000642:	1159      	asrs	r1, r3, #5
 8000644:	17d3      	asrs	r3, r2, #31
 8000646:	1acb      	subs	r3, r1, r3
 8000648:	2164      	movs	r1, #100	@ 0x64
 800064a:	fb01 f303 	mul.w	r3, r1, r3
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d114      	bne.n	800067e <recalculate_output+0x9e>
		    buf1[i] = (symbol_buffer[i / SPS]);
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	4a3c      	ldr	r2, [pc, #240]	@ (8000748 <recalculate_output+0x168>)
 8000658:	fb82 1203 	smull	r1, r2, r2, r3
 800065c:	1152      	asrs	r2, r2, #5
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	4a37      	ldr	r2, [pc, #220]	@ (8000740 <recalculate_output+0x160>)
 8000664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000668:	ee07 3a90 	vmov	s15, r3
 800066c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000670:	4a36      	ldr	r2, [pc, #216]	@ (800074c <recalculate_output+0x16c>)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	edc3 7a00 	vstr	s15, [r3]
 800067c:	e006      	b.n	800068c <recalculate_output+0xac>
	    }
	    else {
		    buf1[i] = 0;
 800067e:	4a33      	ldr	r2, [pc, #204]	@ (800074c <recalculate_output+0x16c>)
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < DAC_BUF_LEN; i++) {
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	3301      	adds	r3, #1
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	f640 02fb 	movw	r2, #2299	@ 0x8fb
 8000698:	4293      	cmp	r3, r2
 800069a:	ddce      	ble.n	800063a <recalculate_output+0x5a>
	    }
    }

    // filter
    arm_conv_f32(buf1, DAC_BUF_LEN, RRC, RRC_LEN, buf2);
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <recalculate_output+0x170>)
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80006a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <recalculate_output+0x174>)
 80006a6:	f640 01fc 	movw	r1, #2300	@ 0x8fc
 80006aa:	4828      	ldr	r0, [pc, #160]	@ (800074c <recalculate_output+0x16c>)
 80006ac:	f009 fd42 	bl	800a134 <arm_conv_f32>

    // modulate
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e02b      	b.n	800070e <recalculate_output+0x12e>
		dac_buf[i] = 0x800 + 0x7FF*cos(2 * M_PI * FC / FS * i) *  buf2[i];
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	ee07 3a90 	vmov	s15, r3
 80006bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006c0:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8000728 <recalculate_output+0x148>
 80006c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006c8:	eeb0 0b47 	vmov.f64	d0, d7
 80006cc:	f009 fff8 	bl	800a6c0 <cos>
 80006d0:	eeb0 7b40 	vmov.f64	d7, d0
 80006d4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8000730 <recalculate_output+0x150>
 80006d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000750 <recalculate_output+0x170>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	edd3 7a00 	vldr	s15, [r3]
 80006e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80006f0:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8000738 <recalculate_output+0x158>
 80006f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006fc:	ee17 1a90 	vmov	r1, s15
 8000700:	4a15      	ldr	r2, [pc, #84]	@ (8000758 <recalculate_output+0x178>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f640 02fb 	movw	r2, #2299	@ 0x8fb
 8000714:	4293      	cmp	r3, r2
 8000716:	ddce      	ble.n	80006b6 <recalculate_output+0xd6>
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bdb0      	pop	{r4, r5, r7, pc}
 8000722:	bf00      	nop
 8000724:	f3af 8000 	nop.w
 8000728:	769cf0e0 	.word	0x769cf0e0
 800072c:	3ff41b2f 	.word	0x3ff41b2f
 8000730:	00000000 	.word	0x00000000
 8000734:	409ffc00 	.word	0x409ffc00
 8000738:	00000000 	.word	0x00000000
 800073c:	40a00000 	.word	0x40a00000
 8000740:	24002634 	.word	0x24002634
 8000744:	0800ba44 	.word	0x0800ba44
 8000748:	51eb851f 	.word	0x51eb851f
 800074c:	24002690 	.word	0x24002690
 8000750:	24004a80 	.word	0x24004a80
 8000754:	0800b270 	.word	0x0800b270
 8000758:	24000000 	.word	0x24000000

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 fcf3 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f833 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f000 f9f1 	bl	8000b50 <MX_GPIO_Init>
  MX_DMA_Init();
 800076e:	f000 f9c7 	bl	8000b00 <MX_DMA_Init>
  MX_TIM6_Init();
 8000772:	f000 f943 	bl	80009fc <MX_TIM6_Init>
  MX_DAC1_Init();
 8000776:	f000 f8ef 	bl	8000958 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 800077a:	f000 f91f 	bl	80009bc <MX_OPAMP1_Init>
  MX_USART3_UART_Init();
 800077e:	f000 f973 	bl	8000a68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 8000782:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <main+0x5c>)
 8000784:	f004 fb08 	bl	8004d98 <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim6);
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <main+0x60>)
 800078a:	f007 fa57 	bl	8007c3c <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800078e:	2100      	movs	r1, #0
 8000790:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <main+0x64>)
 8000792:	f000 feaa 	bl	80014ea <HAL_DAC_Start>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg));
 8000796:	2202      	movs	r2, #2
 8000798:	490a      	ldr	r1, [pc, #40]	@ (80007c4 <main+0x68>)
 800079a:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <main+0x6c>)
 800079c:	f007 fcd0 	bl	8008140 <HAL_UART_Receive_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buf, 2300, DAC_ALIGN_12B_R);
 80007a0:	2300      	movs	r3, #0
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 80007a8:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <main+0x70>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <main+0x64>)
 80007ae:	f000 fef3 	bl	8001598 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b2:	bf00      	nop
 80007b4:	e7fd      	b.n	80007b2 <main+0x56>
 80007b6:	bf00      	nop
 80007b8:	240024a8 	.word	0x240024a8
 80007bc:	240024dc 	.word	0x240024dc
 80007c0:	2400241c 	.word	0x2400241c
 80007c4:	24006e70 	.word	0x24006e70
 80007c8:	24002528 	.word	0x24002528
 80007cc:	24000000 	.word	0x24000000

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0a4      	sub	sp, #144	@ 0x90
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007da:	224c      	movs	r2, #76	@ 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f009 ff42 	bl	800a668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f009 ff3b 	bl	800a668 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000804:	4b52      	ldr	r3, [pc, #328]	@ (8000950 <SystemClock_Config+0x180>)
 8000806:	f04f 32ff 	mov.w	r2, #4294967295
 800080a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800080e:	2004      	movs	r0, #4
 8000810:	f004 fb04 	bl	8004e1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b4e      	ldr	r3, [pc, #312]	@ (8000954 <SystemClock_Config+0x184>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a4d      	ldr	r2, [pc, #308]	@ (8000954 <SystemClock_Config+0x184>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b4b      	ldr	r3, [pc, #300]	@ (8000954 <SystemClock_Config+0x184>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000830:	bf00      	nop
 8000832:	4b48      	ldr	r3, [pc, #288]	@ (8000954 <SystemClock_Config+0x184>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800083e:	d1f8      	bne.n	8000832 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000840:	f004 fadc 	bl	8004dfc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000844:	4b42      	ldr	r3, [pc, #264]	@ (8000950 <SystemClock_Config+0x180>)
 8000846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000848:	4a41      	ldr	r2, [pc, #260]	@ (8000950 <SystemClock_Config+0x180>)
 800084a:	f023 0318 	bic.w	r3, r3, #24
 800084e:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000850:	232f      	movs	r3, #47	@ 0x2f
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800085a:	2301      	movs	r3, #1
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800085e:	2301      	movs	r3, #1
 8000860:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000862:	2340      	movs	r3, #64	@ 0x40
 8000864:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000866:	2301      	movs	r3, #1
 8000868:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800086a:	2301      	movs	r3, #1
 800086c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	2302      	movs	r3, #2
 8000874:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 800087a:	2346      	movs	r3, #70	@ 0x46
 800087c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000882:	2304      	movs	r3, #4
 8000884:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800088c:	230c      	movs	r3, #12
 800088e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fb14 	bl	8004ed0 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008ae:	f000 f9db 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	233f      	movs	r3, #63	@ 0x3f
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2303      	movs	r3, #3
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c2:	2340      	movs	r3, #64	@ 0x40
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c6:	2340      	movs	r3, #64	@ 0x40
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d0:	2340      	movs	r3, #64	@ 0x40
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d8:	2106      	movs	r1, #6
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 ff2a 	bl	8005734 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80008e6:	f000 f9bf 	bl	8000c68 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80008ea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008ee:	2100      	movs	r1, #0
 80008f0:	2000      	movs	r0, #0
 80008f2:	f005 f8d5 	bl	8005aa0 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 80008f6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008fa:	2100      	movs	r1, #0
 80008fc:	2001      	movs	r0, #1
 80008fe:	f005 f8cf 	bl	8005aa0 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <SystemClock_Config+0x180>)
 8000904:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000908:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <SystemClock_Config+0x180>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <SystemClock_Config+0x180>)
 8000914:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000924:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000928:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800092e:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000934:	2322      	movs	r3, #34	@ 0x22
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000938:	2320      	movs	r3, #32
 800093a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4618      	mov	r0, r3
 8000942:	f006 ff69 	bl	8007818 <HAL_RCCEx_CRSConfig>
}
 8000946:	bf00      	nop
 8000948:	3790      	adds	r7, #144	@ 0x90
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	58024400 	.word	0x58024400
 8000954:	58024800 	.word	0x58024800

08000958 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2224      	movs	r2, #36	@ 0x24
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f009 fe7f 	bl	800a668 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_DAC1_Init+0x5c>)
 800096c:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <MX_DAC1_Init+0x60>)
 800096e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000970:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <MX_DAC1_Init+0x5c>)
 8000972:	f000 fd98 	bl	80014a6 <HAL_DAC_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800097c:	f000 f974 	bl	8000c68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000984:	2316      	movs	r3, #22
 8000986:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000988:	2302      	movs	r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <MX_DAC1_Init+0x5c>)
 800099c:	f000 feda 	bl	8001754 <HAL_DAC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 f95f 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	@ 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400241c 	.word	0x2400241c
 80009b8:	40007400 	.word	0x40007400

080009bc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_OPAMP1_Init+0x38>)
 80009c2:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <MX_OPAMP1_Init+0x3c>)
 80009c4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_OPAMP1_Init+0x38>)
 80009c8:	2260      	movs	r2, #96	@ 0x60
 80009ca:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC_CH;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_OPAMP1_Init+0x38>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_OPAMP1_Init+0x38>)
 80009d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d8:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_OPAMP1_Init+0x38>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_OPAMP1_Init+0x38>)
 80009e2:	f004 f911 	bl	8004c08 <HAL_OPAMP_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_OPAMP1_Init+0x34>
  {
    Error_Handler();
 80009ec:	f000 f93c 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	240024a8 	.word	0x240024a8
 80009f8:	40009000 	.word	0x40009000

080009fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_TIM6_Init+0x64>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <MX_TIM6_Init+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <MX_TIM6_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_TIM6_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <MX_TIM6_Init+0x64>)
 8000a20:	2237      	movs	r2, #55	@ 0x37
 8000a22:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_TIM6_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <MX_TIM6_Init+0x64>)
 8000a2c:	f007 f8ae 	bl	8007b8c <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a36:	f000 f917 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <MX_TIM6_Init+0x64>)
 8000a48:	f007 fa0e 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a52:	f000 f909 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	240024dc 	.word	0x240024dc
 8000a64:	40001000 	.word	0x40001000

08000a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a6e:	4a23      	ldr	r2, [pc, #140]	@ (8000afc <MX_USART3_UART_Init+0x94>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab0:	4811      	ldr	r0, [pc, #68]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ab2:	f007 fa67 	bl	8007f84 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000abc:	f000 f8d4 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ac4:	f009 fa6b 	bl	8009f9e <HAL_UARTEx_SetTxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ace:	f000 f8cb 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ad6:	f009 faa0 	bl	800a01a <HAL_UARTEx_SetRxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae0:	f000 f8c2 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ae6:	f009 fa21 	bl	8009f2c <HAL_UARTEx_DisableFifoMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f000 f8ba 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	24002528 	.word	0x24002528
 8000afc:	40004800 	.word	0x40004800

08000b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_DMA_Init+0x4c>)
 8000b08:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <MX_DMA_Init+0x4c>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <MX_DMA_Init+0x4c>)
 8000b18:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	200b      	movs	r0, #11
 8000b2a:	f000 fc88 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b2e:	200b      	movs	r0, #11
 8000b30:	f000 fc9f 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	200c      	movs	r0, #12
 8000b3a:	f000 fc80 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b3e:	200c      	movs	r0, #12
 8000b40:	f000 fc97 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b6c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000b78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b84:	4b29      	ldr	r3, [pc, #164]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b8a:	4a28      	ldr	r2, [pc, #160]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b94:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000b96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba8:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000bb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000bc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc6:	4a19      	ldr	r2, [pc, #100]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bd0:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_GPIO_Init+0xdc>)
 8000bd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <MX_GPIO_Init+0xe0>)
 8000bfc:	f003 fe54 	bl	80048a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000c1e:	f003 fe43 	bl	80048a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020800 	.word	0x58020800
 8000c34:	58020000 	.word	0x58020000

08000c38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	// TODO: Call a function to generate the waveform corresponding to the new message!
	HAL_UART_Transmit(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg), 1);
 8000c40:	2301      	movs	r3, #1
 8000c42:	2202      	movs	r2, #2
 8000c44:	4906      	ldr	r1, [pc, #24]	@ (8000c60 <HAL_UART_RxCpltCallback+0x28>)
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <HAL_UART_RxCpltCallback+0x2c>)
 8000c48:	f007 f9ec 	bl	8008024 <HAL_UART_Transmit>
	recalculate_output(rx_msg[0]);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <HAL_UART_RxCpltCallback+0x28>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fcc5 	bl	80005e0 <recalculate_output>

}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24006e70 	.word	0x24006e70
 8000c64:	24002528 	.word	0x24002528

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <HAL_MspInit+0x30>)
 8000c7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c80:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_MspInit+0x30>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_MspInit+0x30>)
 8000c8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a23      	ldr	r2, [pc, #140]	@ (8000d44 <HAL_DAC_MspInit+0x9c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d13f      	bne.n	8000d3a <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <HAL_DAC_MspInit+0xa0>)
 8000cbc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cc0:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <HAL_DAC_MspInit+0xa0>)
 8000cc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cc6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cca:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <HAL_DAC_MspInit+0xa0>)
 8000ccc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000cda:	4a1d      	ldr	r2, [pc, #116]	@ (8000d50 <HAL_DAC_MspInit+0xa8>)
 8000cdc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000ce0:	2243      	movs	r2, #67	@ 0x43
 8000ce2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000ce6:	2240      	movs	r2, #64	@ 0x40
 8000ce8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000cfa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cfe:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d06:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000d0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d0e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000d12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d16:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000d1e:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000d20:	f000 fee4 	bl	8001aec <HAL_DMA_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_DAC_MspInit+0x86>
    {
      Error_Handler();
 8000d2a:	f7ff ff9d 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <HAL_DAC_MspInit+0xa4>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40007400 	.word	0x40007400
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	24002430 	.word	0x24002430
 8000d50:	40020010 	.word	0x40020010

08000d54 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a18      	ldr	r2, [pc, #96]	@ (8000dd4 <HAL_OPAMP_MspInit+0x80>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d129      	bne.n	8000dca <HAL_OPAMP_MspInit+0x76>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <HAL_OPAMP_MspInit+0x84>)
 8000d78:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <HAL_OPAMP_MspInit+0x84>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <HAL_OPAMP_MspInit+0x84>)
 8000d88:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <HAL_OPAMP_MspInit+0x84>)
 8000d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <HAL_OPAMP_MspInit+0x84>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <HAL_OPAMP_MspInit+0x84>)
 8000da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db2:	2310      	movs	r3, #16
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <HAL_OPAMP_MspInit+0x88>)
 8000dc6:	f003 fd6f 	bl	80048a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40009000 	.word	0x40009000
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020800 	.word	0x58020800

08000de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0b      	ldr	r2, [pc, #44]	@ (8000e1c <HAL_TIM_Base_MspInit+0x3c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10e      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <HAL_TIM_Base_MspInit+0x40>)
 8000df4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000df8:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <HAL_TIM_Base_MspInit+0x40>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e02:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <HAL_TIM_Base_MspInit+0x40>)
 8000e04:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40001000 	.word	0x40001000
 8000e20:	58024400 	.word	0x58024400

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0ba      	sub	sp, #232	@ 0xe8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	22c0      	movs	r2, #192	@ 0xc0
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fc0f 	bl	800a668 <memset>
  if(huart->Instance==USART3)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a42      	ldr	r2, [pc, #264]	@ (8000f58 <HAL_UART_MspInit+0x134>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d17d      	bne.n	8000f50 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e54:	f04f 0202 	mov.w	r2, #2
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 f858 	bl	8005f20 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e76:	f7ff fef7 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7a:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <HAL_UART_MspInit+0x138>)
 8000e7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e80:	4a36      	ldr	r2, [pc, #216]	@ (8000f5c <HAL_UART_MspInit+0x138>)
 8000e82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e86:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e8a:	4b34      	ldr	r3, [pc, #208]	@ (8000f5c <HAL_UART_MspInit+0x138>)
 8000e8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e98:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <HAL_UART_MspInit+0x138>)
 8000e9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f5c <HAL_UART_MspInit+0x138>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <HAL_UART_MspInit+0x138>)
 8000eaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed0:	2307      	movs	r3, #7
 8000ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4820      	ldr	r0, [pc, #128]	@ (8000f60 <HAL_UART_MspInit+0x13c>)
 8000ede:	f003 fce3 	bl	80048a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000ee4:	4a20      	ldr	r2, [pc, #128]	@ (8000f68 <HAL_UART_MspInit+0x144>)
 8000ee6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000eea:	222d      	movs	r2, #45	@ 0x2d
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000efc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f00:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f08:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f14:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f22:	4810      	ldr	r0, [pc, #64]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000f24:	f000 fde2 	bl	8001aec <HAL_DMA_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f2e:	f7ff fe9b 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000f36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_UART_MspInit+0x140>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2027      	movs	r0, #39	@ 0x27
 8000f46:	f000 fa7a 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f4a:	2027      	movs	r0, #39	@ 0x27
 8000f4c:	f000 fa91 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	37e8      	adds	r7, #232	@ 0xe8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58020c00 	.word	0x58020c00
 8000f64:	240025bc 	.word	0x240025bc
 8000f68:	40020028 	.word	0x40020028

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f935 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <DMA1_Stream0_IRQHandler+0x10>)
 8000fd2:	f002 f8e7 	bl	80031a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24002430 	.word	0x24002430

08000fe0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <DMA1_Stream1_IRQHandler+0x10>)
 8000fe6:	f002 f8dd 	bl	80031a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	240025bc 	.word	0x240025bc

08000ff4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <USART3_IRQHandler+0x10>)
 8000ffa:	f007 f8ed 	bl	80081d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24002528 	.word	0x24002528

08001008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800100c:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <SystemInit+0xd0>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001012:	4a31      	ldr	r2, [pc, #196]	@ (80010d8 <SystemInit+0xd0>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <SystemInit+0xd4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	2b02      	cmp	r3, #2
 8001026:	d807      	bhi.n	8001038 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001028:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <SystemInit+0xd4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 030f 	bic.w	r3, r3, #15
 8001030:	4a2a      	ldr	r2, [pc, #168]	@ (80010dc <SystemInit+0xd4>)
 8001032:	f043 0303 	orr.w	r3, r3, #3
 8001036:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001038:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <SystemInit+0xd8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a28      	ldr	r2, [pc, #160]	@ (80010e0 <SystemInit+0xd8>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001044:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <SystemInit+0xd8>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800104a:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <SystemInit+0xd8>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4924      	ldr	r1, [pc, #144]	@ (80010e0 <SystemInit+0xd8>)
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <SystemInit+0xdc>)
 8001052:	4013      	ands	r3, r2
 8001054:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <SystemInit+0xd4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001062:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <SystemInit+0xd4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 030f 	bic.w	r3, r3, #15
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <SystemInit+0xd4>)
 800106c:	f043 0303 	orr.w	r3, r3, #3
 8001070:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <SystemInit+0xd8>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <SystemInit+0xd8>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <SystemInit+0xd8>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001084:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <SystemInit+0xd8>)
 8001086:	4a18      	ldr	r2, [pc, #96]	@ (80010e8 <SystemInit+0xe0>)
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <SystemInit+0xd8>)
 800108c:	4a17      	ldr	r2, [pc, #92]	@ (80010ec <SystemInit+0xe4>)
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <SystemInit+0xd8>)
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <SystemInit+0xe8>)
 8001094:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <SystemInit+0xd8>)
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <SystemInit+0xd8>)
 800109e:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <SystemInit+0xe8>)
 80010a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <SystemInit+0xd8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <SystemInit+0xd8>)
 80010aa:	4a11      	ldr	r2, [pc, #68]	@ (80010f0 <SystemInit+0xe8>)
 80010ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <SystemInit+0xd8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <SystemInit+0xd8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <SystemInit+0xd8>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <SystemInit+0xd8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <SystemInit+0xec>)
 80010c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	52002000 	.word	0x52002000
 80010e0:	58024400 	.word	0x58024400
 80010e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010e8:	02020200 	.word	0x02020200
 80010ec:	01ff0000 	.word	0x01ff0000
 80010f0:	01010280 	.word	0x01010280
 80010f4:	52004000 	.word	0x52004000

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001130 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010fc:	f7ff ff84 	bl	8001008 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	@ (8001138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	@ (8001144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001126:	f009 faa7 	bl	800a678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fb17 	bl	800075c <main>
  bx  lr
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001134:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001138:	24002400 	.word	0x24002400
  ldr r2, =_sidata
 800113c:	0800bca8 	.word	0x0800bca8
  ldr r2, =_sbss
 8001140:	24002400 	.word	0x24002400
  ldr r4, =_ebss
 8001144:	24006e78 	.word	0x24006e78

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001152:	2003      	movs	r0, #3
 8001154:	f000 f968 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001158:	f004 fd0c 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 800115c:	4602      	mov	r2, r0
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_Init+0x68>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	4913      	ldr	r1, [pc, #76]	@ (80011b8 <HAL_Init+0x6c>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_Init+0x68>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_Init+0x6c>)
 8001180:	5cd3      	ldrb	r3, [r2, r3]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <HAL_Init+0x70>)
 800118e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <HAL_Init+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f814 	bl	80011c4 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e002      	b.n	80011ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011a6:	f7ff fd65 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	58024400 	.word	0x58024400
 80011b8:	0800ba80 	.word	0x0800ba80
 80011bc:	240023f4 	.word	0x240023f4
 80011c0:	240023f0 	.word	0x240023f0

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_InitTick+0x60>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e021      	b.n	800121c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <HAL_InitTick+0x64>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_InitTick+0x60>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f94d 	bl	800148e <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 f917 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	@ (800122c <HAL_InitTick+0x68>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	240023fc 	.word	0x240023fc
 8001228:	240023f0 	.word	0x240023f0
 800122c:	240023f8 	.word	0x240023f8

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	240023fc 	.word	0x240023fc
 8001254:	24006e74 	.word	0x24006e74

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	24006e74 	.word	0x24006e74

08001270 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetREVID+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0c1b      	lsrs	r3, r3, #16
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	5c001000 	.word	0x5c001000

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x40>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x40>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00
 80012cc:	05fa0000 	.word	0x05fa0000

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	@ (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff40 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff90 	bl	800137c <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5f 	bl	8001328 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff33 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa4 	bl	80013e4 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e014      	b.n	80014e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fbed 	bl	8000ca8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e046      	b.n	800158c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	795b      	ldrb	r3, [r3, #5]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_DAC_Start+0x20>
 8001506:	2302      	movs	r3, #2
 8001508:	e040      	b.n	800158c <HAL_DAC_Start+0xa2>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2201      	movs	r2, #1
 8001524:	409a      	lsls	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800153e:	2b02      	cmp	r3, #2
 8001540:	d11d      	bne.n	800157e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 0201 	orr.w	r2, r2, #1
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	e014      	b.n	800157e <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2102      	movs	r1, #2
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	429a      	cmp	r2, r3
 800156c:	d107      	bne.n	800157e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0202 	orr.w	r2, r2, #2
 800157c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0a2      	b.n	80016f6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	795b      	ldrb	r3, [r3, #5]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_DAC_Start_DMA+0x24>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e09c      	b.n	80016f6 <HAL_DAC_Start_DMA+0x15e>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2202      	movs	r2, #2
 80015c6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d129      	bne.n	8001622 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001700 <HAL_DAC_Start_DMA+0x168>)
 80015d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4a4a      	ldr	r2, [pc, #296]	@ (8001704 <HAL_DAC_Start_DMA+0x16c>)
 80015dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4a49      	ldr	r2, [pc, #292]	@ (8001708 <HAL_DAC_Start_DMA+0x170>)
 80015e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80015f4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_DAC_Start_DMA+0x6c>
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d005      	beq.n	800160e <HAL_DAC_Start_DMA+0x76>
 8001602:	e009      	b.n	8001618 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3308      	adds	r3, #8
 800160a:	613b      	str	r3, [r7, #16]
        break;
 800160c:	e033      	b.n	8001676 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	330c      	adds	r3, #12
 8001614:	613b      	str	r3, [r7, #16]
        break;
 8001616:	e02e      	b.n	8001676 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3310      	adds	r3, #16
 800161e:	613b      	str	r3, [r7, #16]
        break;
 8001620:	e029      	b.n	8001676 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a39      	ldr	r2, [pc, #228]	@ (800170c <HAL_DAC_Start_DMA+0x174>)
 8001628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4a38      	ldr	r2, [pc, #224]	@ (8001710 <HAL_DAC_Start_DMA+0x178>)
 8001630:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4a37      	ldr	r2, [pc, #220]	@ (8001714 <HAL_DAC_Start_DMA+0x17c>)
 8001638:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001648:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_DAC_Start_DMA+0xc0>
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	2b04      	cmp	r3, #4
 8001654:	d005      	beq.n	8001662 <HAL_DAC_Start_DMA+0xca>
 8001656:	e009      	b.n	800166c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3314      	adds	r3, #20
 800165e:	613b      	str	r3, [r7, #16]
        break;
 8001660:	e009      	b.n	8001676 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3318      	adds	r3, #24
 8001668:	613b      	str	r3, [r7, #16]
        break;
 800166a:	e004      	b.n	8001676 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	331c      	adds	r3, #28
 8001672:	613b      	str	r3, [r7, #16]
        break;
 8001674:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d111      	bne.n	80016a0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800168a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6898      	ldr	r0, [r3, #8]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	f000 fdb7 	bl	8002208 <HAL_DMA_Start_IT>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]
 800169e:	e010      	b.n	80016c2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80016ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	68d8      	ldr	r0, [r3, #12]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	f000 fda5 	bl	8002208 <HAL_DMA_Start_IT>
 80016be:	4603      	mov	r3, r0
 80016c0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2201      	movs	r2, #1
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e005      	b.n	80016f4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	f043 0204 	orr.w	r2, r3, #4
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	080019d9 	.word	0x080019d9
 8001704:	080019fb 	.word	0x080019fb
 8001708:	08001a17 	.word	0x08001a17
 800170c:	08001a81 	.word	0x08001a81
 8001710:	08001aa3 	.word	0x08001aa3
 8001714:	08001abf 	.word	0x08001abf

08001718 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_DAC_ConfigChannel+0x1e>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e12a      	b.n	80019cc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	795b      	ldrb	r3, [r3, #5]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_DAC_ConfigChannel+0x2e>
 800177e:	2302      	movs	r3, #2
 8001780:	e124      	b.n	80019cc <HAL_DAC_ConfigChannel+0x278>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2202      	movs	r2, #2
 800178c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b04      	cmp	r3, #4
 8001794:	d17a      	bne.n	800188c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001796:	f7ff fd5f 	bl	8001258 <HAL_GetTick>
 800179a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d13d      	bne.n	800181e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017a2:	e018      	b.n	80017d6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017a4:	f7ff fd58 	bl	8001258 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d911      	bls.n	80017d6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017b8:	4b86      	ldr	r3, [pc, #536]	@ (80019d4 <HAL_DAC_ConfigChannel+0x280>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	f043 0208 	orr.w	r2, r3, #8
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2203      	movs	r2, #3
 80017d0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0fa      	b.n	80019cc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017dc:	4b7d      	ldr	r3, [pc, #500]	@ (80019d4 <HAL_DAC_ConfigChannel+0x280>)
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1df      	bne.n	80017a4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	6992      	ldr	r2, [r2, #24]
 80017ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80017ee:	e020      	b.n	8001832 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017f0:	f7ff fd32 	bl	8001258 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d90f      	bls.n	800181e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001804:	2b00      	cmp	r3, #0
 8001806:	da0a      	bge.n	800181e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	f043 0208 	orr.w	r2, r3, #8
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2203      	movs	r2, #3
 8001818:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0d6      	b.n	80019cc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001824:	2b00      	cmp	r3, #0
 8001826:	dbe3      	blt.n	80017f0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	6992      	ldr	r2, [r2, #24]
 8001830:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	ea02 0103 	and.w	r1, r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	69da      	ldr	r2, [r3, #28]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	21ff      	movs	r1, #255	@ 0xff
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	ea02 0103 	and.w	r1, r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	6a1a      	ldr	r2, [r3, #32]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d11d      	bne.n	80018d0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	221f      	movs	r2, #31
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d102      	bne.n	80018fa <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f8:	e00f      	b.n	800191a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d102      	bne.n	8001908 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001902:	2301      	movs	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
 8001906:	e008      	b.n	800191a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001910:	2301      	movs	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
 8001914:	e001      	b.n	800191a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	4313      	orrs	r3, r2
 8001924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43da      	mvns	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6819      	ldr	r1, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	22c0      	movs	r2, #192	@ 0xc0
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2201      	movs	r2, #1
 80019c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80019c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3728      	adds	r7, #40	@ 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20008000 	.word	0x20008000

080019d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff fe96 	bl	8001718 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	711a      	strb	r2, [r3, #4]
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a06:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fe8f 	bl	800172c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f043 0204 	orr.w	r2, r3, #4
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff fe85 	bl	8001740 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	711a      	strb	r2, [r3, #4]
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a8c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7ff ffd8 	bl	8001a44 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	711a      	strb	r2, [r3, #4]
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff ffd1 	bl	8001a58 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f043 0204 	orr.w	r2, r3, #4
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff ffc7 	bl	8001a6c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	711a      	strb	r2, [r3, #4]
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fbb0 	bl	8001258 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e37d      	b.n	8002200 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a66      	ldr	r2, [pc, #408]	@ (8001ca4 <HAL_DMA_Init+0x1b8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d04a      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a65      	ldr	r2, [pc, #404]	@ (8001ca8 <HAL_DMA_Init+0x1bc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d045      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a63      	ldr	r2, [pc, #396]	@ (8001cac <HAL_DMA_Init+0x1c0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d040      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a62      	ldr	r2, [pc, #392]	@ (8001cb0 <HAL_DMA_Init+0x1c4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d03b      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a60      	ldr	r2, [pc, #384]	@ (8001cb4 <HAL_DMA_Init+0x1c8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d036      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a5f      	ldr	r2, [pc, #380]	@ (8001cb8 <HAL_DMA_Init+0x1cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d031      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5d      	ldr	r2, [pc, #372]	@ (8001cbc <HAL_DMA_Init+0x1d0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02c      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc0 <HAL_DMA_Init+0x1d4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d027      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a5a      	ldr	r2, [pc, #360]	@ (8001cc4 <HAL_DMA_Init+0x1d8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d022      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a59      	ldr	r2, [pc, #356]	@ (8001cc8 <HAL_DMA_Init+0x1dc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d01d      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a57      	ldr	r2, [pc, #348]	@ (8001ccc <HAL_DMA_Init+0x1e0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d018      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a56      	ldr	r2, [pc, #344]	@ (8001cd0 <HAL_DMA_Init+0x1e4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a54      	ldr	r2, [pc, #336]	@ (8001cd4 <HAL_DMA_Init+0x1e8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00e      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a53      	ldr	r2, [pc, #332]	@ (8001cd8 <HAL_DMA_Init+0x1ec>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d009      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a51      	ldr	r2, [pc, #324]	@ (8001cdc <HAL_DMA_Init+0x1f0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <HAL_DMA_Init+0xb8>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a50      	ldr	r2, [pc, #320]	@ (8001ce0 <HAL_DMA_Init+0x1f4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Init+0xbc>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_DMA_Init+0xbe>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 813c 	beq.w	8001e28 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a37      	ldr	r2, [pc, #220]	@ (8001ca4 <HAL_DMA_Init+0x1b8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d04a      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a36      	ldr	r2, [pc, #216]	@ (8001ca8 <HAL_DMA_Init+0x1bc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d045      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a34      	ldr	r2, [pc, #208]	@ (8001cac <HAL_DMA_Init+0x1c0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d040      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a33      	ldr	r2, [pc, #204]	@ (8001cb0 <HAL_DMA_Init+0x1c4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d03b      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a31      	ldr	r2, [pc, #196]	@ (8001cb4 <HAL_DMA_Init+0x1c8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d036      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a30      	ldr	r2, [pc, #192]	@ (8001cb8 <HAL_DMA_Init+0x1cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d031      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2e      	ldr	r2, [pc, #184]	@ (8001cbc <HAL_DMA_Init+0x1d0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02c      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc0 <HAL_DMA_Init+0x1d4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d027      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc4 <HAL_DMA_Init+0x1d8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d022      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc8 <HAL_DMA_Init+0x1dc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d01d      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a28      	ldr	r2, [pc, #160]	@ (8001ccc <HAL_DMA_Init+0x1e0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d018      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a27      	ldr	r2, [pc, #156]	@ (8001cd0 <HAL_DMA_Init+0x1e4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a25      	ldr	r2, [pc, #148]	@ (8001cd4 <HAL_DMA_Init+0x1e8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00e      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a24      	ldr	r2, [pc, #144]	@ (8001cd8 <HAL_DMA_Init+0x1ec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a22      	ldr	r2, [pc, #136]	@ (8001cdc <HAL_DMA_Init+0x1f0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_DMA_Init+0x174>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ce0 <HAL_DMA_Init+0x1f4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d108      	bne.n	8001c72 <HAL_DMA_Init+0x186>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e007      	b.n	8001c82 <HAL_DMA_Init+0x196>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c82:	e02f      	b.n	8001ce4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c84:	f7ff fae8 	bl	8001258 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d928      	bls.n	8001ce4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2220      	movs	r2, #32
 8001c96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e2ad      	b.n	8002200 <HAL_DMA_Init+0x714>
 8001ca4:	40020010 	.word	0x40020010
 8001ca8:	40020028 	.word	0x40020028
 8001cac:	40020040 	.word	0x40020040
 8001cb0:	40020058 	.word	0x40020058
 8001cb4:	40020070 	.word	0x40020070
 8001cb8:	40020088 	.word	0x40020088
 8001cbc:	400200a0 	.word	0x400200a0
 8001cc0:	400200b8 	.word	0x400200b8
 8001cc4:	40020410 	.word	0x40020410
 8001cc8:	40020428 	.word	0x40020428
 8001ccc:	40020440 	.word	0x40020440
 8001cd0:	40020458 	.word	0x40020458
 8001cd4:	40020470 	.word	0x40020470
 8001cd8:	40020488 	.word	0x40020488
 8001cdc:	400204a0 	.word	0x400204a0
 8001ce0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1c8      	bne.n	8001c84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4b73      	ldr	r3, [pc, #460]	@ (8001ecc <HAL_DMA_Init+0x3e0>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d107      	bne.n	8001d48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	4313      	orrs	r3, r2
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b28      	cmp	r3, #40	@ 0x28
 8001d4e:	d903      	bls.n	8001d58 <HAL_DMA_Init+0x26c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d56:	d91f      	bls.n	8001d98 <HAL_DMA_Init+0x2ac>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d5e:	d903      	bls.n	8001d68 <HAL_DMA_Init+0x27c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b42      	cmp	r3, #66	@ 0x42
 8001d66:	d917      	bls.n	8001d98 <HAL_DMA_Init+0x2ac>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b46      	cmp	r3, #70	@ 0x46
 8001d6e:	d903      	bls.n	8001d78 <HAL_DMA_Init+0x28c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b48      	cmp	r3, #72	@ 0x48
 8001d76:	d90f      	bls.n	8001d98 <HAL_DMA_Init+0x2ac>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8001d7e:	d903      	bls.n	8001d88 <HAL_DMA_Init+0x29c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b52      	cmp	r3, #82	@ 0x52
 8001d86:	d907      	bls.n	8001d98 <HAL_DMA_Init+0x2ac>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b73      	cmp	r3, #115	@ 0x73
 8001d8e:	d905      	bls.n	8001d9c <HAL_DMA_Init+0x2b0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b77      	cmp	r3, #119	@ 0x77
 8001d96:	d801      	bhi.n	8001d9c <HAL_DMA_Init+0x2b0>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_DMA_Init+0x2b2>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001da8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f023 0307 	bic.w	r3, r3, #7
 8001dc0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d117      	bne.n	8001e04 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00e      	beq.n	8001e04 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f002 fbd4 	bl	8004594 <DMA_CheckFifoParam>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2240      	movs	r2, #64	@ 0x40
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e1fd      	b.n	8002200 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f002 fb0f 	bl	8004430 <DMA_CalcBaseAndBitshift>
 8001e12:	4603      	mov	r3, r0
 8001e14:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	223f      	movs	r2, #63	@ 0x3f
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	e0fd      	b.n	8002024 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <HAL_DMA_Init+0x3e4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d04a      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a27      	ldr	r2, [pc, #156]	@ (8001ed4 <HAL_DMA_Init+0x3e8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d045      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a25      	ldr	r2, [pc, #148]	@ (8001ed8 <HAL_DMA_Init+0x3ec>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d040      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a24      	ldr	r2, [pc, #144]	@ (8001edc <HAL_DMA_Init+0x3f0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d03b      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a22      	ldr	r2, [pc, #136]	@ (8001ee0 <HAL_DMA_Init+0x3f4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d036      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ee4 <HAL_DMA_Init+0x3f8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d031      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <HAL_DMA_Init+0x3fc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d02c      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <HAL_DMA_Init+0x400>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d027      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <HAL_DMA_Init+0x404>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef4 <HAL_DMA_Init+0x408>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <HAL_DMA_Init+0x40c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <HAL_DMA_Init+0x410>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <HAL_DMA_Init+0x414>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <HAL_DMA_Init+0x418>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <HAL_DMA_Init+0x41c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_Init+0x3dc>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <HAL_DMA_Init+0x420>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d123      	bne.n	8001f10 <HAL_DMA_Init+0x424>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e022      	b.n	8001f12 <HAL_DMA_Init+0x426>
 8001ecc:	fe10803f 	.word	0xfe10803f
 8001ed0:	48022c08 	.word	0x48022c08
 8001ed4:	48022c1c 	.word	0x48022c1c
 8001ed8:	48022c30 	.word	0x48022c30
 8001edc:	48022c44 	.word	0x48022c44
 8001ee0:	48022c58 	.word	0x48022c58
 8001ee4:	48022c6c 	.word	0x48022c6c
 8001ee8:	48022c80 	.word	0x48022c80
 8001eec:	48022c94 	.word	0x48022c94
 8001ef0:	58025408 	.word	0x58025408
 8001ef4:	5802541c 	.word	0x5802541c
 8001ef8:	58025430 	.word	0x58025430
 8001efc:	58025444 	.word	0x58025444
 8001f00:	58025458 	.word	0x58025458
 8001f04:	5802546c 	.word	0x5802546c
 8001f08:	58025480 	.word	0x58025480
 8001f0c:	58025494 	.word	0x58025494
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d07d      	beq.n	8002012 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7f      	ldr	r2, [pc, #508]	@ (8002118 <HAL_DMA_Init+0x62c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d021      	beq.n	8001f64 <HAL_DMA_Init+0x478>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7d      	ldr	r2, [pc, #500]	@ (800211c <HAL_DMA_Init+0x630>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01c      	beq.n	8001f64 <HAL_DMA_Init+0x478>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8002120 <HAL_DMA_Init+0x634>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d017      	beq.n	8001f64 <HAL_DMA_Init+0x478>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a7a      	ldr	r2, [pc, #488]	@ (8002124 <HAL_DMA_Init+0x638>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d012      	beq.n	8001f64 <HAL_DMA_Init+0x478>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a79      	ldr	r2, [pc, #484]	@ (8002128 <HAL_DMA_Init+0x63c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_DMA_Init+0x478>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a77      	ldr	r2, [pc, #476]	@ (800212c <HAL_DMA_Init+0x640>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d008      	beq.n	8001f64 <HAL_DMA_Init+0x478>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a76      	ldr	r2, [pc, #472]	@ (8002130 <HAL_DMA_Init+0x644>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA_Init+0x478>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a74      	ldr	r2, [pc, #464]	@ (8002134 <HAL_DMA_Init+0x648>)
 8001f62:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8002138 <HAL_DMA_Init+0x64c>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b40      	cmp	r3, #64	@ 0x40
 8001f8a:	d008      	beq.n	8001f9e <HAL_DMA_Init+0x4b2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b80      	cmp	r3, #128	@ 0x80
 8001f92:	d102      	bne.n	8001f9a <HAL_DMA_Init+0x4ae>
 8001f94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f98:	e002      	b.n	8001fa0 <HAL_DMA_Init+0x4b4>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_DMA_Init+0x4b4>
 8001f9e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68d2      	ldr	r2, [r2, #12]
 8001fa4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fa6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fb6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fbe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fc6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fce:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b55      	ldr	r3, [pc, #340]	@ (800213c <HAL_DMA_Init+0x650>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a55      	ldr	r2, [pc, #340]	@ (8002140 <HAL_DMA_Init+0x654>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f002 fa1a 	bl	8004430 <DMA_CalcBaseAndBitshift>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2201      	movs	r2, #1
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	e008      	b.n	8002024 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2240      	movs	r2, #64	@ 0x40
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0ed      	b.n	8002200 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a46      	ldr	r2, [pc, #280]	@ (8002144 <HAL_DMA_Init+0x658>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d072      	beq.n	8002114 <HAL_DMA_Init+0x628>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a45      	ldr	r2, [pc, #276]	@ (8002148 <HAL_DMA_Init+0x65c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d06d      	beq.n	8002114 <HAL_DMA_Init+0x628>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a43      	ldr	r2, [pc, #268]	@ (800214c <HAL_DMA_Init+0x660>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d068      	beq.n	8002114 <HAL_DMA_Init+0x628>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a42      	ldr	r2, [pc, #264]	@ (8002150 <HAL_DMA_Init+0x664>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d063      	beq.n	8002114 <HAL_DMA_Init+0x628>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a40      	ldr	r2, [pc, #256]	@ (8002154 <HAL_DMA_Init+0x668>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d05e      	beq.n	8002114 <HAL_DMA_Init+0x628>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a3f      	ldr	r2, [pc, #252]	@ (8002158 <HAL_DMA_Init+0x66c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d059      	beq.n	8002114 <HAL_DMA_Init+0x628>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3d      	ldr	r2, [pc, #244]	@ (800215c <HAL_DMA_Init+0x670>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d054      	beq.n	8002114 <HAL_DMA_Init+0x628>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3c      	ldr	r2, [pc, #240]	@ (8002160 <HAL_DMA_Init+0x674>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d04f      	beq.n	8002114 <HAL_DMA_Init+0x628>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3a      	ldr	r2, [pc, #232]	@ (8002164 <HAL_DMA_Init+0x678>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d04a      	beq.n	8002114 <HAL_DMA_Init+0x628>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a39      	ldr	r2, [pc, #228]	@ (8002168 <HAL_DMA_Init+0x67c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d045      	beq.n	8002114 <HAL_DMA_Init+0x628>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a37      	ldr	r2, [pc, #220]	@ (800216c <HAL_DMA_Init+0x680>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d040      	beq.n	8002114 <HAL_DMA_Init+0x628>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a36      	ldr	r2, [pc, #216]	@ (8002170 <HAL_DMA_Init+0x684>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d03b      	beq.n	8002114 <HAL_DMA_Init+0x628>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a34      	ldr	r2, [pc, #208]	@ (8002174 <HAL_DMA_Init+0x688>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d036      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a33      	ldr	r2, [pc, #204]	@ (8002178 <HAL_DMA_Init+0x68c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d031      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a31      	ldr	r2, [pc, #196]	@ (800217c <HAL_DMA_Init+0x690>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d02c      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a30      	ldr	r2, [pc, #192]	@ (8002180 <HAL_DMA_Init+0x694>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d027      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <HAL_DMA_Init+0x62c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d022      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <HAL_DMA_Init+0x630>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d01d      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a10      	ldr	r2, [pc, #64]	@ (8002120 <HAL_DMA_Init+0x634>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d018      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002124 <HAL_DMA_Init+0x638>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <HAL_DMA_Init+0x63c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <HAL_DMA_Init+0x628>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <HAL_DMA_Init+0x640>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d009      	beq.n	8002114 <HAL_DMA_Init+0x628>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_DMA_Init+0x644>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_DMA_Init+0x628>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <HAL_DMA_Init+0x648>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d137      	bne.n	8002184 <HAL_DMA_Init+0x698>
 8002114:	2301      	movs	r3, #1
 8002116:	e036      	b.n	8002186 <HAL_DMA_Init+0x69a>
 8002118:	58025408 	.word	0x58025408
 800211c:	5802541c 	.word	0x5802541c
 8002120:	58025430 	.word	0x58025430
 8002124:	58025444 	.word	0x58025444
 8002128:	58025458 	.word	0x58025458
 800212c:	5802546c 	.word	0x5802546c
 8002130:	58025480 	.word	0x58025480
 8002134:	58025494 	.word	0x58025494
 8002138:	fffe000f 	.word	0xfffe000f
 800213c:	a7fdabf8 	.word	0xa7fdabf8
 8002140:	cccccccd 	.word	0xcccccccd
 8002144:	40020010 	.word	0x40020010
 8002148:	40020028 	.word	0x40020028
 800214c:	40020040 	.word	0x40020040
 8002150:	40020058 	.word	0x40020058
 8002154:	40020070 	.word	0x40020070
 8002158:	40020088 	.word	0x40020088
 800215c:	400200a0 	.word	0x400200a0
 8002160:	400200b8 	.word	0x400200b8
 8002164:	40020410 	.word	0x40020410
 8002168:	40020428 	.word	0x40020428
 800216c:	40020440 	.word	0x40020440
 8002170:	40020458 	.word	0x40020458
 8002174:	40020470 	.word	0x40020470
 8002178:	40020488 	.word	0x40020488
 800217c:	400204a0 	.word	0x400204a0
 8002180:	400204b8 	.word	0x400204b8
 8002184:	2300      	movs	r3, #0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d032      	beq.n	80021f0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f002 fa7e 	bl	800468c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b80      	cmp	r3, #128	@ 0x80
 8002196:	d102      	bne.n	800219e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021b2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <HAL_DMA_Init+0x6f2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d80c      	bhi.n	80021de <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f002 fafb 	bl	80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	e008      	b.n	80021f0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e226      	b.n	8002672 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_DMA_Start_IT+0x2a>
 800222e:	2302      	movs	r3, #2
 8002230:	e21f      	b.n	8002672 <HAL_DMA_Start_IT+0x46a>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	f040 820a 	bne.w	800265c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a68      	ldr	r2, [pc, #416]	@ (80023fc <HAL_DMA_Start_IT+0x1f4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d04a      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a66      	ldr	r2, [pc, #408]	@ (8002400 <HAL_DMA_Start_IT+0x1f8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d045      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a65      	ldr	r2, [pc, #404]	@ (8002404 <HAL_DMA_Start_IT+0x1fc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d040      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a63      	ldr	r2, [pc, #396]	@ (8002408 <HAL_DMA_Start_IT+0x200>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d03b      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a62      	ldr	r2, [pc, #392]	@ (800240c <HAL_DMA_Start_IT+0x204>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d036      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a60      	ldr	r2, [pc, #384]	@ (8002410 <HAL_DMA_Start_IT+0x208>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d031      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a5f      	ldr	r2, [pc, #380]	@ (8002414 <HAL_DMA_Start_IT+0x20c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d02c      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002418 <HAL_DMA_Start_IT+0x210>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d027      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5c      	ldr	r2, [pc, #368]	@ (800241c <HAL_DMA_Start_IT+0x214>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d022      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002420 <HAL_DMA_Start_IT+0x218>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01d      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a59      	ldr	r2, [pc, #356]	@ (8002424 <HAL_DMA_Start_IT+0x21c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d018      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a57      	ldr	r2, [pc, #348]	@ (8002428 <HAL_DMA_Start_IT+0x220>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a56      	ldr	r2, [pc, #344]	@ (800242c <HAL_DMA_Start_IT+0x224>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00e      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a54      	ldr	r2, [pc, #336]	@ (8002430 <HAL_DMA_Start_IT+0x228>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a53      	ldr	r2, [pc, #332]	@ (8002434 <HAL_DMA_Start_IT+0x22c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d004      	beq.n	80022f6 <HAL_DMA_Start_IT+0xee>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a51      	ldr	r2, [pc, #324]	@ (8002438 <HAL_DMA_Start_IT+0x230>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d108      	bne.n	8002308 <HAL_DMA_Start_IT+0x100>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e007      	b.n	8002318 <HAL_DMA_Start_IT+0x110>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f001 fea2 	bl	8004068 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a34      	ldr	r2, [pc, #208]	@ (80023fc <HAL_DMA_Start_IT+0x1f4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d04a      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a33      	ldr	r2, [pc, #204]	@ (8002400 <HAL_DMA_Start_IT+0x1f8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d045      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a31      	ldr	r2, [pc, #196]	@ (8002404 <HAL_DMA_Start_IT+0x1fc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d040      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a30      	ldr	r2, [pc, #192]	@ (8002408 <HAL_DMA_Start_IT+0x200>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d03b      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2e      	ldr	r2, [pc, #184]	@ (800240c <HAL_DMA_Start_IT+0x204>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d036      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2d      	ldr	r2, [pc, #180]	@ (8002410 <HAL_DMA_Start_IT+0x208>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d031      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2b      	ldr	r2, [pc, #172]	@ (8002414 <HAL_DMA_Start_IT+0x20c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02c      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2a      	ldr	r2, [pc, #168]	@ (8002418 <HAL_DMA_Start_IT+0x210>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d027      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a28      	ldr	r2, [pc, #160]	@ (800241c <HAL_DMA_Start_IT+0x214>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d022      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a27      	ldr	r2, [pc, #156]	@ (8002420 <HAL_DMA_Start_IT+0x218>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d01d      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a25      	ldr	r2, [pc, #148]	@ (8002424 <HAL_DMA_Start_IT+0x21c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d018      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a24      	ldr	r2, [pc, #144]	@ (8002428 <HAL_DMA_Start_IT+0x220>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a22      	ldr	r2, [pc, #136]	@ (800242c <HAL_DMA_Start_IT+0x224>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00e      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a21      	ldr	r2, [pc, #132]	@ (8002430 <HAL_DMA_Start_IT+0x228>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d009      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002434 <HAL_DMA_Start_IT+0x22c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_DMA_Start_IT+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1e      	ldr	r2, [pc, #120]	@ (8002438 <HAL_DMA_Start_IT+0x230>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_DMA_Start_IT+0x1c0>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_DMA_Start_IT+0x1c2>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d036      	beq.n	800243c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 021e 	bic.w	r2, r3, #30
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0216 	orr.w	r2, r2, #22
 80023e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d03e      	beq.n	8002468 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0208 	orr.w	r2, r2, #8
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e035      	b.n	8002468 <HAL_DMA_Start_IT+0x260>
 80023fc:	40020010 	.word	0x40020010
 8002400:	40020028 	.word	0x40020028
 8002404:	40020040 	.word	0x40020040
 8002408:	40020058 	.word	0x40020058
 800240c:	40020070 	.word	0x40020070
 8002410:	40020088 	.word	0x40020088
 8002414:	400200a0 	.word	0x400200a0
 8002418:	400200b8 	.word	0x400200b8
 800241c:	40020410 	.word	0x40020410
 8002420:	40020428 	.word	0x40020428
 8002424:	40020440 	.word	0x40020440
 8002428:	40020458 	.word	0x40020458
 800242c:	40020470 	.word	0x40020470
 8002430:	40020488 	.word	0x40020488
 8002434:	400204a0 	.word	0x400204a0
 8002438:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 020e 	bic.w	r2, r3, #14
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 020a 	orr.w	r2, r2, #10
 800244e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0204 	orr.w	r2, r2, #4
 8002466:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a83      	ldr	r2, [pc, #524]	@ (800267c <HAL_DMA_Start_IT+0x474>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d072      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a82      	ldr	r2, [pc, #520]	@ (8002680 <HAL_DMA_Start_IT+0x478>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d06d      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a80      	ldr	r2, [pc, #512]	@ (8002684 <HAL_DMA_Start_IT+0x47c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d068      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7f      	ldr	r2, [pc, #508]	@ (8002688 <HAL_DMA_Start_IT+0x480>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d063      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a7d      	ldr	r2, [pc, #500]	@ (800268c <HAL_DMA_Start_IT+0x484>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d05e      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7c      	ldr	r2, [pc, #496]	@ (8002690 <HAL_DMA_Start_IT+0x488>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d059      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a7a      	ldr	r2, [pc, #488]	@ (8002694 <HAL_DMA_Start_IT+0x48c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d054      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a79      	ldr	r2, [pc, #484]	@ (8002698 <HAL_DMA_Start_IT+0x490>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04f      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a77      	ldr	r2, [pc, #476]	@ (800269c <HAL_DMA_Start_IT+0x494>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d04a      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a76      	ldr	r2, [pc, #472]	@ (80026a0 <HAL_DMA_Start_IT+0x498>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d045      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a74      	ldr	r2, [pc, #464]	@ (80026a4 <HAL_DMA_Start_IT+0x49c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d040      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a73      	ldr	r2, [pc, #460]	@ (80026a8 <HAL_DMA_Start_IT+0x4a0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d03b      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a71      	ldr	r2, [pc, #452]	@ (80026ac <HAL_DMA_Start_IT+0x4a4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d036      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a70      	ldr	r2, [pc, #448]	@ (80026b0 <HAL_DMA_Start_IT+0x4a8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d031      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a6e      	ldr	r2, [pc, #440]	@ (80026b4 <HAL_DMA_Start_IT+0x4ac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02c      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6d      	ldr	r2, [pc, #436]	@ (80026b8 <HAL_DMA_Start_IT+0x4b0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d027      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6b      	ldr	r2, [pc, #428]	@ (80026bc <HAL_DMA_Start_IT+0x4b4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d022      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6a      	ldr	r2, [pc, #424]	@ (80026c0 <HAL_DMA_Start_IT+0x4b8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d01d      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a68      	ldr	r2, [pc, #416]	@ (80026c4 <HAL_DMA_Start_IT+0x4bc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d018      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a67      	ldr	r2, [pc, #412]	@ (80026c8 <HAL_DMA_Start_IT+0x4c0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a65      	ldr	r2, [pc, #404]	@ (80026cc <HAL_DMA_Start_IT+0x4c4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00e      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a64      	ldr	r2, [pc, #400]	@ (80026d0 <HAL_DMA_Start_IT+0x4c8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a62      	ldr	r2, [pc, #392]	@ (80026d4 <HAL_DMA_Start_IT+0x4cc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_DMA_Start_IT+0x350>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a61      	ldr	r2, [pc, #388]	@ (80026d8 <HAL_DMA_Start_IT+0x4d0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_DMA_Start_IT+0x354>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_DMA_Start_IT+0x356>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01a      	beq.n	8002598 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800257e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002592:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002596:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a37      	ldr	r2, [pc, #220]	@ (800267c <HAL_DMA_Start_IT+0x474>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d04a      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a36      	ldr	r2, [pc, #216]	@ (8002680 <HAL_DMA_Start_IT+0x478>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d045      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a34      	ldr	r2, [pc, #208]	@ (8002684 <HAL_DMA_Start_IT+0x47c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d040      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a33      	ldr	r2, [pc, #204]	@ (8002688 <HAL_DMA_Start_IT+0x480>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d03b      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a31      	ldr	r2, [pc, #196]	@ (800268c <HAL_DMA_Start_IT+0x484>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d036      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a30      	ldr	r2, [pc, #192]	@ (8002690 <HAL_DMA_Start_IT+0x488>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d031      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002694 <HAL_DMA_Start_IT+0x48c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02c      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002698 <HAL_DMA_Start_IT+0x490>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d027      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a2b      	ldr	r2, [pc, #172]	@ (800269c <HAL_DMA_Start_IT+0x494>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d022      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2a      	ldr	r2, [pc, #168]	@ (80026a0 <HAL_DMA_Start_IT+0x498>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d01d      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a28      	ldr	r2, [pc, #160]	@ (80026a4 <HAL_DMA_Start_IT+0x49c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d018      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a27      	ldr	r2, [pc, #156]	@ (80026a8 <HAL_DMA_Start_IT+0x4a0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a25      	ldr	r2, [pc, #148]	@ (80026ac <HAL_DMA_Start_IT+0x4a4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a24      	ldr	r2, [pc, #144]	@ (80026b0 <HAL_DMA_Start_IT+0x4a8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <HAL_DMA_Start_IT+0x4ac>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_DMA_Start_IT+0x430>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a21      	ldr	r2, [pc, #132]	@ (80026b8 <HAL_DMA_Start_IT+0x4b0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d108      	bne.n	800264a <HAL_DMA_Start_IT+0x442>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e012      	b.n	8002670 <HAL_DMA_Start_IT+0x468>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e009      	b.n	8002670 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002662:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002670:	7dfb      	ldrb	r3, [r7, #23]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40020010 	.word	0x40020010
 8002680:	40020028 	.word	0x40020028
 8002684:	40020040 	.word	0x40020040
 8002688:	40020058 	.word	0x40020058
 800268c:	40020070 	.word	0x40020070
 8002690:	40020088 	.word	0x40020088
 8002694:	400200a0 	.word	0x400200a0
 8002698:	400200b8 	.word	0x400200b8
 800269c:	40020410 	.word	0x40020410
 80026a0:	40020428 	.word	0x40020428
 80026a4:	40020440 	.word	0x40020440
 80026a8:	40020458 	.word	0x40020458
 80026ac:	40020470 	.word	0x40020470
 80026b0:	40020488 	.word	0x40020488
 80026b4:	400204a0 	.word	0x400204a0
 80026b8:	400204b8 	.word	0x400204b8
 80026bc:	58025408 	.word	0x58025408
 80026c0:	5802541c 	.word	0x5802541c
 80026c4:	58025430 	.word	0x58025430
 80026c8:	58025444 	.word	0x58025444
 80026cc:	58025458 	.word	0x58025458
 80026d0:	5802546c 	.word	0x5802546c
 80026d4:	58025480 	.word	0x58025480
 80026d8:	58025494 	.word	0x58025494

080026dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7fe fdb8 	bl	8001258 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e2dc      	b.n	8002cae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d008      	beq.n	8002712 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2280      	movs	r2, #128	@ 0x80
 8002704:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e2cd      	b.n	8002cae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a76      	ldr	r2, [pc, #472]	@ (80028f0 <HAL_DMA_Abort+0x214>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d04a      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a74      	ldr	r2, [pc, #464]	@ (80028f4 <HAL_DMA_Abort+0x218>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d045      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	@ (80028f8 <HAL_DMA_Abort+0x21c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d040      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a71      	ldr	r2, [pc, #452]	@ (80028fc <HAL_DMA_Abort+0x220>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d03b      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a70      	ldr	r2, [pc, #448]	@ (8002900 <HAL_DMA_Abort+0x224>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d036      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6e      	ldr	r2, [pc, #440]	@ (8002904 <HAL_DMA_Abort+0x228>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d031      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6d      	ldr	r2, [pc, #436]	@ (8002908 <HAL_DMA_Abort+0x22c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d02c      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6b      	ldr	r2, [pc, #428]	@ (800290c <HAL_DMA_Abort+0x230>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d027      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6a      	ldr	r2, [pc, #424]	@ (8002910 <HAL_DMA_Abort+0x234>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d022      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a68      	ldr	r2, [pc, #416]	@ (8002914 <HAL_DMA_Abort+0x238>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01d      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a67      	ldr	r2, [pc, #412]	@ (8002918 <HAL_DMA_Abort+0x23c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d018      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a65      	ldr	r2, [pc, #404]	@ (800291c <HAL_DMA_Abort+0x240>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a64      	ldr	r2, [pc, #400]	@ (8002920 <HAL_DMA_Abort+0x244>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00e      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a62      	ldr	r2, [pc, #392]	@ (8002924 <HAL_DMA_Abort+0x248>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a61      	ldr	r2, [pc, #388]	@ (8002928 <HAL_DMA_Abort+0x24c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_DMA_Abort+0xd6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a5f      	ldr	r2, [pc, #380]	@ (800292c <HAL_DMA_Abort+0x250>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_DMA_Abort+0xda>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_DMA_Abort+0xdc>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 021e 	bic.w	r2, r2, #30
 80027ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e00a      	b.n	80027fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 020e 	bic.w	r2, r2, #14
 80027f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a3c      	ldr	r2, [pc, #240]	@ (80028f0 <HAL_DMA_Abort+0x214>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d072      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3a      	ldr	r2, [pc, #232]	@ (80028f4 <HAL_DMA_Abort+0x218>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d06d      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a39      	ldr	r2, [pc, #228]	@ (80028f8 <HAL_DMA_Abort+0x21c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d068      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a37      	ldr	r2, [pc, #220]	@ (80028fc <HAL_DMA_Abort+0x220>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d063      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a36      	ldr	r2, [pc, #216]	@ (8002900 <HAL_DMA_Abort+0x224>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d05e      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a34      	ldr	r2, [pc, #208]	@ (8002904 <HAL_DMA_Abort+0x228>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d059      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a33      	ldr	r2, [pc, #204]	@ (8002908 <HAL_DMA_Abort+0x22c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d054      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a31      	ldr	r2, [pc, #196]	@ (800290c <HAL_DMA_Abort+0x230>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d04f      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a30      	ldr	r2, [pc, #192]	@ (8002910 <HAL_DMA_Abort+0x234>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d04a      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2e      	ldr	r2, [pc, #184]	@ (8002914 <HAL_DMA_Abort+0x238>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d045      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2d      	ldr	r2, [pc, #180]	@ (8002918 <HAL_DMA_Abort+0x23c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d040      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2b      	ldr	r2, [pc, #172]	@ (800291c <HAL_DMA_Abort+0x240>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d03b      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2a      	ldr	r2, [pc, #168]	@ (8002920 <HAL_DMA_Abort+0x244>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d036      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a28      	ldr	r2, [pc, #160]	@ (8002924 <HAL_DMA_Abort+0x248>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a27      	ldr	r2, [pc, #156]	@ (8002928 <HAL_DMA_Abort+0x24c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d02c      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a25      	ldr	r2, [pc, #148]	@ (800292c <HAL_DMA_Abort+0x250>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d027      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a24      	ldr	r2, [pc, #144]	@ (8002930 <HAL_DMA_Abort+0x254>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a22      	ldr	r2, [pc, #136]	@ (8002934 <HAL_DMA_Abort+0x258>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01d      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a21      	ldr	r2, [pc, #132]	@ (8002938 <HAL_DMA_Abort+0x25c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d018      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <HAL_DMA_Abort+0x260>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002940 <HAL_DMA_Abort+0x264>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002944 <HAL_DMA_Abort+0x268>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	@ (8002948 <HAL_DMA_Abort+0x26c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_DMA_Abort+0x20e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_DMA_Abort+0x270>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d132      	bne.n	8002950 <HAL_DMA_Abort+0x274>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e031      	b.n	8002952 <HAL_DMA_Abort+0x276>
 80028ee:	bf00      	nop
 80028f0:	40020010 	.word	0x40020010
 80028f4:	40020028 	.word	0x40020028
 80028f8:	40020040 	.word	0x40020040
 80028fc:	40020058 	.word	0x40020058
 8002900:	40020070 	.word	0x40020070
 8002904:	40020088 	.word	0x40020088
 8002908:	400200a0 	.word	0x400200a0
 800290c:	400200b8 	.word	0x400200b8
 8002910:	40020410 	.word	0x40020410
 8002914:	40020428 	.word	0x40020428
 8002918:	40020440 	.word	0x40020440
 800291c:	40020458 	.word	0x40020458
 8002920:	40020470 	.word	0x40020470
 8002924:	40020488 	.word	0x40020488
 8002928:	400204a0 	.word	0x400204a0
 800292c:	400204b8 	.word	0x400204b8
 8002930:	58025408 	.word	0x58025408
 8002934:	5802541c 	.word	0x5802541c
 8002938:	58025430 	.word	0x58025430
 800293c:	58025444 	.word	0x58025444
 8002940:	58025458 	.word	0x58025458
 8002944:	5802546c 	.word	0x5802546c
 8002948:	58025480 	.word	0x58025480
 800294c:	58025494 	.word	0x58025494
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002964:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6d      	ldr	r2, [pc, #436]	@ (8002b20 <HAL_DMA_Abort+0x444>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04a      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6b      	ldr	r2, [pc, #428]	@ (8002b24 <HAL_DMA_Abort+0x448>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d045      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6a      	ldr	r2, [pc, #424]	@ (8002b28 <HAL_DMA_Abort+0x44c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d040      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a68      	ldr	r2, [pc, #416]	@ (8002b2c <HAL_DMA_Abort+0x450>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d03b      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a67      	ldr	r2, [pc, #412]	@ (8002b30 <HAL_DMA_Abort+0x454>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d036      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a65      	ldr	r2, [pc, #404]	@ (8002b34 <HAL_DMA_Abort+0x458>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d031      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a64      	ldr	r2, [pc, #400]	@ (8002b38 <HAL_DMA_Abort+0x45c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d02c      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a62      	ldr	r2, [pc, #392]	@ (8002b3c <HAL_DMA_Abort+0x460>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d027      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a61      	ldr	r2, [pc, #388]	@ (8002b40 <HAL_DMA_Abort+0x464>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d022      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002b44 <HAL_DMA_Abort+0x468>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01d      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002b48 <HAL_DMA_Abort+0x46c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d018      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5c      	ldr	r2, [pc, #368]	@ (8002b4c <HAL_DMA_Abort+0x470>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b50 <HAL_DMA_Abort+0x474>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00e      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a59      	ldr	r2, [pc, #356]	@ (8002b54 <HAL_DMA_Abort+0x478>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a58      	ldr	r2, [pc, #352]	@ (8002b58 <HAL_DMA_Abort+0x47c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d004      	beq.n	8002a06 <HAL_DMA_Abort+0x32a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a56      	ldr	r2, [pc, #344]	@ (8002b5c <HAL_DMA_Abort+0x480>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d108      	bne.n	8002a18 <HAL_DMA_Abort+0x33c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e007      	b.n	8002a28 <HAL_DMA_Abort+0x34c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a28:	e013      	b.n	8002a52 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2a:	f7fe fc15 	bl	8001258 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d90c      	bls.n	8002a52 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2203      	movs	r2, #3
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e12d      	b.n	8002cae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e5      	bne.n	8002a2a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2f      	ldr	r2, [pc, #188]	@ (8002b20 <HAL_DMA_Abort+0x444>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d04a      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b24 <HAL_DMA_Abort+0x448>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d045      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2c      	ldr	r2, [pc, #176]	@ (8002b28 <HAL_DMA_Abort+0x44c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d040      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2a      	ldr	r2, [pc, #168]	@ (8002b2c <HAL_DMA_Abort+0x450>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d03b      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a29      	ldr	r2, [pc, #164]	@ (8002b30 <HAL_DMA_Abort+0x454>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d036      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a27      	ldr	r2, [pc, #156]	@ (8002b34 <HAL_DMA_Abort+0x458>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d031      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a26      	ldr	r2, [pc, #152]	@ (8002b38 <HAL_DMA_Abort+0x45c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d02c      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a24      	ldr	r2, [pc, #144]	@ (8002b3c <HAL_DMA_Abort+0x460>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d027      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a23      	ldr	r2, [pc, #140]	@ (8002b40 <HAL_DMA_Abort+0x464>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d022      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a21      	ldr	r2, [pc, #132]	@ (8002b44 <HAL_DMA_Abort+0x468>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01d      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a20      	ldr	r2, [pc, #128]	@ (8002b48 <HAL_DMA_Abort+0x46c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d018      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b4c <HAL_DMA_Abort+0x470>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1d      	ldr	r2, [pc, #116]	@ (8002b50 <HAL_DMA_Abort+0x474>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00e      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_DMA_Abort+0x478>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d009      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1a      	ldr	r2, [pc, #104]	@ (8002b58 <HAL_DMA_Abort+0x47c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d004      	beq.n	8002afe <HAL_DMA_Abort+0x422>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a18      	ldr	r2, [pc, #96]	@ (8002b5c <HAL_DMA_Abort+0x480>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_DMA_Abort+0x426>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_DMA_Abort+0x428>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02b      	beq.n	8002b60 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	223f      	movs	r2, #63	@ 0x3f
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	e02a      	b.n	8002b76 <HAL_DMA_Abort+0x49a>
 8002b20:	40020010 	.word	0x40020010
 8002b24:	40020028 	.word	0x40020028
 8002b28:	40020040 	.word	0x40020040
 8002b2c:	40020058 	.word	0x40020058
 8002b30:	40020070 	.word	0x40020070
 8002b34:	40020088 	.word	0x40020088
 8002b38:	400200a0 	.word	0x400200a0
 8002b3c:	400200b8 	.word	0x400200b8
 8002b40:	40020410 	.word	0x40020410
 8002b44:	40020428 	.word	0x40020428
 8002b48:	40020440 	.word	0x40020440
 8002b4c:	40020458 	.word	0x40020458
 8002b50:	40020470 	.word	0x40020470
 8002b54:	40020488 	.word	0x40020488
 8002b58:	400204a0 	.word	0x400204a0
 8002b5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b64:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2201      	movs	r2, #1
 8002b70:	409a      	lsls	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb8 <HAL_DMA_Abort+0x5dc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d072      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	@ (8002cbc <HAL_DMA_Abort+0x5e0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d06d      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc0 <HAL_DMA_Abort+0x5e4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d068      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc4 <HAL_DMA_Abort+0x5e8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d063      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a49      	ldr	r2, [pc, #292]	@ (8002cc8 <HAL_DMA_Abort+0x5ec>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d05e      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a47      	ldr	r2, [pc, #284]	@ (8002ccc <HAL_DMA_Abort+0x5f0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d059      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a46      	ldr	r2, [pc, #280]	@ (8002cd0 <HAL_DMA_Abort+0x5f4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d054      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a44      	ldr	r2, [pc, #272]	@ (8002cd4 <HAL_DMA_Abort+0x5f8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d04f      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a43      	ldr	r2, [pc, #268]	@ (8002cd8 <HAL_DMA_Abort+0x5fc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d04a      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a41      	ldr	r2, [pc, #260]	@ (8002cdc <HAL_DMA_Abort+0x600>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d045      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a40      	ldr	r2, [pc, #256]	@ (8002ce0 <HAL_DMA_Abort+0x604>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d040      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ce4 <HAL_DMA_Abort+0x608>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d03b      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce8 <HAL_DMA_Abort+0x60c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d036      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8002cec <HAL_DMA_Abort+0x610>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d031      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf0 <HAL_DMA_Abort+0x614>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d02c      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a38      	ldr	r2, [pc, #224]	@ (8002cf4 <HAL_DMA_Abort+0x618>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d027      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a37      	ldr	r2, [pc, #220]	@ (8002cf8 <HAL_DMA_Abort+0x61c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a35      	ldr	r2, [pc, #212]	@ (8002cfc <HAL_DMA_Abort+0x620>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01d      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a34      	ldr	r2, [pc, #208]	@ (8002d00 <HAL_DMA_Abort+0x624>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d018      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a32      	ldr	r2, [pc, #200]	@ (8002d04 <HAL_DMA_Abort+0x628>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a31      	ldr	r2, [pc, #196]	@ (8002d08 <HAL_DMA_Abort+0x62c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8002d0c <HAL_DMA_Abort+0x630>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2e      	ldr	r2, [pc, #184]	@ (8002d10 <HAL_DMA_Abort+0x634>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_DMA_Abort+0x58a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2c      	ldr	r2, [pc, #176]	@ (8002d14 <HAL_DMA_Abort+0x638>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Abort+0x58e>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_Abort+0x590>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c78:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00c      	beq.n	8002c9c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c90:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c9a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40020010 	.word	0x40020010
 8002cbc:	40020028 	.word	0x40020028
 8002cc0:	40020040 	.word	0x40020040
 8002cc4:	40020058 	.word	0x40020058
 8002cc8:	40020070 	.word	0x40020070
 8002ccc:	40020088 	.word	0x40020088
 8002cd0:	400200a0 	.word	0x400200a0
 8002cd4:	400200b8 	.word	0x400200b8
 8002cd8:	40020410 	.word	0x40020410
 8002cdc:	40020428 	.word	0x40020428
 8002ce0:	40020440 	.word	0x40020440
 8002ce4:	40020458 	.word	0x40020458
 8002ce8:	40020470 	.word	0x40020470
 8002cec:	40020488 	.word	0x40020488
 8002cf0:	400204a0 	.word	0x400204a0
 8002cf4:	400204b8 	.word	0x400204b8
 8002cf8:	58025408 	.word	0x58025408
 8002cfc:	5802541c 	.word	0x5802541c
 8002d00:	58025430 	.word	0x58025430
 8002d04:	58025444 	.word	0x58025444
 8002d08:	58025458 	.word	0x58025458
 8002d0c:	5802546c 	.word	0x5802546c
 8002d10:	58025480 	.word	0x58025480
 8002d14:	58025494 	.word	0x58025494

08002d18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e237      	b.n	800319a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d004      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2280      	movs	r2, #128	@ 0x80
 8002d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e22c      	b.n	800319a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1a0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04a      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ebc <HAL_DMA_Abort_IT+0x1a4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d045      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a59      	ldr	r2, [pc, #356]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1a8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d040      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a58      	ldr	r2, [pc, #352]	@ (8002ec4 <HAL_DMA_Abort_IT+0x1ac>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d03b      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a56      	ldr	r2, [pc, #344]	@ (8002ec8 <HAL_DMA_Abort_IT+0x1b0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d036      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a55      	ldr	r2, [pc, #340]	@ (8002ecc <HAL_DMA_Abort_IT+0x1b4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d031      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a53      	ldr	r2, [pc, #332]	@ (8002ed0 <HAL_DMA_Abort_IT+0x1b8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02c      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_DMA_Abort_IT+0x1bc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d027      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a50      	ldr	r2, [pc, #320]	@ (8002ed8 <HAL_DMA_Abort_IT+0x1c0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d022      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a4f      	ldr	r2, [pc, #316]	@ (8002edc <HAL_DMA_Abort_IT+0x1c4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d01d      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee0 <HAL_DMA_Abort_IT+0x1c8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee4 <HAL_DMA_Abort_IT+0x1cc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee8 <HAL_DMA_Abort_IT+0x1d0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a49      	ldr	r2, [pc, #292]	@ (8002eec <HAL_DMA_Abort_IT+0x1d4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a47      	ldr	r2, [pc, #284]	@ (8002ef0 <HAL_DMA_Abort_IT+0x1d8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_DMA_Abort_IT+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a46      	ldr	r2, [pc, #280]	@ (8002ef4 <HAL_DMA_Abort_IT+0x1dc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_DMA_Abort_IT+0xcc>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_Abort_IT+0xce>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8086 	beq.w	8002ef8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1a0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d04a      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2e      	ldr	r2, [pc, #184]	@ (8002ebc <HAL_DMA_Abort_IT+0x1a4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d045      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1a8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d040      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec4 <HAL_DMA_Abort_IT+0x1ac>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d03b      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a29      	ldr	r2, [pc, #164]	@ (8002ec8 <HAL_DMA_Abort_IT+0x1b0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d036      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a28      	ldr	r2, [pc, #160]	@ (8002ecc <HAL_DMA_Abort_IT+0x1b4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d031      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a26      	ldr	r2, [pc, #152]	@ (8002ed0 <HAL_DMA_Abort_IT+0x1b8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d02c      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a25      	ldr	r2, [pc, #148]	@ (8002ed4 <HAL_DMA_Abort_IT+0x1bc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d027      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a23      	ldr	r2, [pc, #140]	@ (8002ed8 <HAL_DMA_Abort_IT+0x1c0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d022      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <HAL_DMA_Abort_IT+0x1c4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d01d      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ee0 <HAL_DMA_Abort_IT+0x1c8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <HAL_DMA_Abort_IT+0x1cc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee8 <HAL_DMA_Abort_IT+0x1d0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002eec <HAL_DMA_Abort_IT+0x1d4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef0 <HAL_DMA_Abort_IT+0x1d8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x17c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <HAL_DMA_Abort_IT+0x1dc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <HAL_DMA_Abort_IT+0x18e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e178      	b.n	8003198 <HAL_DMA_Abort_IT+0x480>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e16f      	b.n	8003198 <HAL_DMA_Abort_IT+0x480>
 8002eb8:	40020010 	.word	0x40020010
 8002ebc:	40020028 	.word	0x40020028
 8002ec0:	40020040 	.word	0x40020040
 8002ec4:	40020058 	.word	0x40020058
 8002ec8:	40020070 	.word	0x40020070
 8002ecc:	40020088 	.word	0x40020088
 8002ed0:	400200a0 	.word	0x400200a0
 8002ed4:	400200b8 	.word	0x400200b8
 8002ed8:	40020410 	.word	0x40020410
 8002edc:	40020428 	.word	0x40020428
 8002ee0:	40020440 	.word	0x40020440
 8002ee4:	40020458 	.word	0x40020458
 8002ee8:	40020470 	.word	0x40020470
 8002eec:	40020488 	.word	0x40020488
 8002ef0:	400204a0 	.word	0x400204a0
 8002ef4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 020e 	bic.w	r2, r2, #14
 8002f06:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6c      	ldr	r2, [pc, #432]	@ (80030c0 <HAL_DMA_Abort_IT+0x3a8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d04a      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6b      	ldr	r2, [pc, #428]	@ (80030c4 <HAL_DMA_Abort_IT+0x3ac>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d045      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a69      	ldr	r2, [pc, #420]	@ (80030c8 <HAL_DMA_Abort_IT+0x3b0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d040      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a68      	ldr	r2, [pc, #416]	@ (80030cc <HAL_DMA_Abort_IT+0x3b4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d03b      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a66      	ldr	r2, [pc, #408]	@ (80030d0 <HAL_DMA_Abort_IT+0x3b8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d036      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a65      	ldr	r2, [pc, #404]	@ (80030d4 <HAL_DMA_Abort_IT+0x3bc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d031      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a63      	ldr	r2, [pc, #396]	@ (80030d8 <HAL_DMA_Abort_IT+0x3c0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02c      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a62      	ldr	r2, [pc, #392]	@ (80030dc <HAL_DMA_Abort_IT+0x3c4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d027      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a60      	ldr	r2, [pc, #384]	@ (80030e0 <HAL_DMA_Abort_IT+0x3c8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d022      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5f      	ldr	r2, [pc, #380]	@ (80030e4 <HAL_DMA_Abort_IT+0x3cc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d01d      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5d      	ldr	r2, [pc, #372]	@ (80030e8 <HAL_DMA_Abort_IT+0x3d0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d018      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5c      	ldr	r2, [pc, #368]	@ (80030ec <HAL_DMA_Abort_IT+0x3d4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d013      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a5a      	ldr	r2, [pc, #360]	@ (80030f0 <HAL_DMA_Abort_IT+0x3d8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00e      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a59      	ldr	r2, [pc, #356]	@ (80030f4 <HAL_DMA_Abort_IT+0x3dc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d009      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a57      	ldr	r2, [pc, #348]	@ (80030f8 <HAL_DMA_Abort_IT+0x3e0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x290>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a56      	ldr	r2, [pc, #344]	@ (80030fc <HAL_DMA_Abort_IT+0x3e4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d108      	bne.n	8002fba <HAL_DMA_Abort_IT+0x2a2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e007      	b.n	8002fca <HAL_DMA_Abort_IT+0x2b2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3c      	ldr	r2, [pc, #240]	@ (80030c0 <HAL_DMA_Abort_IT+0x3a8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d072      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80030c4 <HAL_DMA_Abort_IT+0x3ac>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d06d      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a39      	ldr	r2, [pc, #228]	@ (80030c8 <HAL_DMA_Abort_IT+0x3b0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d068      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a37      	ldr	r2, [pc, #220]	@ (80030cc <HAL_DMA_Abort_IT+0x3b4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d063      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a36      	ldr	r2, [pc, #216]	@ (80030d0 <HAL_DMA_Abort_IT+0x3b8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d05e      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a34      	ldr	r2, [pc, #208]	@ (80030d4 <HAL_DMA_Abort_IT+0x3bc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d059      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a33      	ldr	r2, [pc, #204]	@ (80030d8 <HAL_DMA_Abort_IT+0x3c0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d054      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a31      	ldr	r2, [pc, #196]	@ (80030dc <HAL_DMA_Abort_IT+0x3c4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d04f      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a30      	ldr	r2, [pc, #192]	@ (80030e0 <HAL_DMA_Abort_IT+0x3c8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d04a      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2e      	ldr	r2, [pc, #184]	@ (80030e4 <HAL_DMA_Abort_IT+0x3cc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d045      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2d      	ldr	r2, [pc, #180]	@ (80030e8 <HAL_DMA_Abort_IT+0x3d0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d040      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2b      	ldr	r2, [pc, #172]	@ (80030ec <HAL_DMA_Abort_IT+0x3d4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d03b      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a2a      	ldr	r2, [pc, #168]	@ (80030f0 <HAL_DMA_Abort_IT+0x3d8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d036      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a28      	ldr	r2, [pc, #160]	@ (80030f4 <HAL_DMA_Abort_IT+0x3dc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d031      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a27      	ldr	r2, [pc, #156]	@ (80030f8 <HAL_DMA_Abort_IT+0x3e0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d02c      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a25      	ldr	r2, [pc, #148]	@ (80030fc <HAL_DMA_Abort_IT+0x3e4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d027      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a24      	ldr	r2, [pc, #144]	@ (8003100 <HAL_DMA_Abort_IT+0x3e8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a22      	ldr	r2, [pc, #136]	@ (8003104 <HAL_DMA_Abort_IT+0x3ec>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01d      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a21      	ldr	r2, [pc, #132]	@ (8003108 <HAL_DMA_Abort_IT+0x3f0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d018      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1f      	ldr	r2, [pc, #124]	@ (800310c <HAL_DMA_Abort_IT+0x3f4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1e      	ldr	r2, [pc, #120]	@ (8003110 <HAL_DMA_Abort_IT+0x3f8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00e      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003114 <HAL_DMA_Abort_IT+0x3fc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d009      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003118 <HAL_DMA_Abort_IT+0x400>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_DMA_Abort_IT+0x3a2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a19      	ldr	r2, [pc, #100]	@ (800311c <HAL_DMA_Abort_IT+0x404>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d132      	bne.n	8003120 <HAL_DMA_Abort_IT+0x408>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e031      	b.n	8003122 <HAL_DMA_Abort_IT+0x40a>
 80030be:	bf00      	nop
 80030c0:	40020010 	.word	0x40020010
 80030c4:	40020028 	.word	0x40020028
 80030c8:	40020040 	.word	0x40020040
 80030cc:	40020058 	.word	0x40020058
 80030d0:	40020070 	.word	0x40020070
 80030d4:	40020088 	.word	0x40020088
 80030d8:	400200a0 	.word	0x400200a0
 80030dc:	400200b8 	.word	0x400200b8
 80030e0:	40020410 	.word	0x40020410
 80030e4:	40020428 	.word	0x40020428
 80030e8:	40020440 	.word	0x40020440
 80030ec:	40020458 	.word	0x40020458
 80030f0:	40020470 	.word	0x40020470
 80030f4:	40020488 	.word	0x40020488
 80030f8:	400204a0 	.word	0x400204a0
 80030fc:	400204b8 	.word	0x400204b8
 8003100:	58025408 	.word	0x58025408
 8003104:	5802541c 	.word	0x5802541c
 8003108:	58025430 	.word	0x58025430
 800310c:	58025444 	.word	0x58025444
 8003110:	58025458 	.word	0x58025458
 8003114:	5802546c 	.word	0x5802546c
 8003118:	58025480 	.word	0x58025480
 800311c:	58025494 	.word	0x58025494
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d028      	beq.n	8003178 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003134:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003154:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800316c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003176:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop

080031a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031b0:	4b67      	ldr	r3, [pc, #412]	@ (8003350 <HAL_DMA_IRQHandler+0x1ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a67      	ldr	r2, [pc, #412]	@ (8003354 <HAL_DMA_IRQHandler+0x1b0>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0a9b      	lsrs	r3, r3, #10
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5f      	ldr	r2, [pc, #380]	@ (8003358 <HAL_DMA_IRQHandler+0x1b4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d04a      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a5d      	ldr	r2, [pc, #372]	@ (800335c <HAL_DMA_IRQHandler+0x1b8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d045      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003360 <HAL_DMA_IRQHandler+0x1bc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d040      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003364 <HAL_DMA_IRQHandler+0x1c0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d03b      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a59      	ldr	r2, [pc, #356]	@ (8003368 <HAL_DMA_IRQHandler+0x1c4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d036      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a57      	ldr	r2, [pc, #348]	@ (800336c <HAL_DMA_IRQHandler+0x1c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d031      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a56      	ldr	r2, [pc, #344]	@ (8003370 <HAL_DMA_IRQHandler+0x1cc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d02c      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a54      	ldr	r2, [pc, #336]	@ (8003374 <HAL_DMA_IRQHandler+0x1d0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d027      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a53      	ldr	r2, [pc, #332]	@ (8003378 <HAL_DMA_IRQHandler+0x1d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a51      	ldr	r2, [pc, #324]	@ (800337c <HAL_DMA_IRQHandler+0x1d8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01d      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a50      	ldr	r2, [pc, #320]	@ (8003380 <HAL_DMA_IRQHandler+0x1dc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a4e      	ldr	r2, [pc, #312]	@ (8003384 <HAL_DMA_IRQHandler+0x1e0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a4d      	ldr	r2, [pc, #308]	@ (8003388 <HAL_DMA_IRQHandler+0x1e4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a4b      	ldr	r2, [pc, #300]	@ (800338c <HAL_DMA_IRQHandler+0x1e8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a4a      	ldr	r2, [pc, #296]	@ (8003390 <HAL_DMA_IRQHandler+0x1ec>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_DMA_IRQHandler+0xd2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a48      	ldr	r2, [pc, #288]	@ (8003394 <HAL_DMA_IRQHandler+0x1f0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_DMA_IRQHandler+0xd6>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_DMA_IRQHandler+0xd8>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 842b 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2208      	movs	r2, #8
 800328c:	409a      	lsls	r2, r3
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80a2 	beq.w	80033dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2e      	ldr	r2, [pc, #184]	@ (8003358 <HAL_DMA_IRQHandler+0x1b4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d04a      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2d      	ldr	r2, [pc, #180]	@ (800335c <HAL_DMA_IRQHandler+0x1b8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d045      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003360 <HAL_DMA_IRQHandler+0x1bc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d040      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003364 <HAL_DMA_IRQHandler+0x1c0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d03b      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a28      	ldr	r2, [pc, #160]	@ (8003368 <HAL_DMA_IRQHandler+0x1c4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d036      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a27      	ldr	r2, [pc, #156]	@ (800336c <HAL_DMA_IRQHandler+0x1c8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d031      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a25      	ldr	r2, [pc, #148]	@ (8003370 <HAL_DMA_IRQHandler+0x1cc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d02c      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a24      	ldr	r2, [pc, #144]	@ (8003374 <HAL_DMA_IRQHandler+0x1d0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d027      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a22      	ldr	r2, [pc, #136]	@ (8003378 <HAL_DMA_IRQHandler+0x1d4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d022      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a21      	ldr	r2, [pc, #132]	@ (800337c <HAL_DMA_IRQHandler+0x1d8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d01d      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1f      	ldr	r2, [pc, #124]	@ (8003380 <HAL_DMA_IRQHandler+0x1dc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d018      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1e      	ldr	r2, [pc, #120]	@ (8003384 <HAL_DMA_IRQHandler+0x1e0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d013      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <HAL_DMA_IRQHandler+0x1e4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00e      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1b      	ldr	r2, [pc, #108]	@ (800338c <HAL_DMA_IRQHandler+0x1e8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d009      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a19      	ldr	r2, [pc, #100]	@ (8003390 <HAL_DMA_IRQHandler+0x1ec>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d004      	beq.n	8003338 <HAL_DMA_IRQHandler+0x194>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a18      	ldr	r2, [pc, #96]	@ (8003394 <HAL_DMA_IRQHandler+0x1f0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d12f      	bne.n	8003398 <HAL_DMA_IRQHandler+0x1f4>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e02e      	b.n	80033ac <HAL_DMA_IRQHandler+0x208>
 800334e:	bf00      	nop
 8003350:	240023f0 	.word	0x240023f0
 8003354:	1b4e81b5 	.word	0x1b4e81b5
 8003358:	40020010 	.word	0x40020010
 800335c:	40020028 	.word	0x40020028
 8003360:	40020040 	.word	0x40020040
 8003364:	40020058 	.word	0x40020058
 8003368:	40020070 	.word	0x40020070
 800336c:	40020088 	.word	0x40020088
 8003370:	400200a0 	.word	0x400200a0
 8003374:	400200b8 	.word	0x400200b8
 8003378:	40020410 	.word	0x40020410
 800337c:	40020428 	.word	0x40020428
 8003380:	40020440 	.word	0x40020440
 8003384:	40020458 	.word	0x40020458
 8003388:	40020470 	.word	0x40020470
 800338c:	40020488 	.word	0x40020488
 8003390:	400204a0 	.word	0x400204a0
 8003394:	400204b8 	.word	0x400204b8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d015      	beq.n	80033dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2208      	movs	r2, #8
 80033ca:	409a      	lsls	r2, r3
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d06e      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a69      	ldr	r2, [pc, #420]	@ (800359c <HAL_DMA_IRQHandler+0x3f8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d04a      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a67      	ldr	r2, [pc, #412]	@ (80035a0 <HAL_DMA_IRQHandler+0x3fc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d045      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a66      	ldr	r2, [pc, #408]	@ (80035a4 <HAL_DMA_IRQHandler+0x400>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d040      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a64      	ldr	r2, [pc, #400]	@ (80035a8 <HAL_DMA_IRQHandler+0x404>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d03b      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <HAL_DMA_IRQHandler+0x408>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d036      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a61      	ldr	r2, [pc, #388]	@ (80035b0 <HAL_DMA_IRQHandler+0x40c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d031      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a60      	ldr	r2, [pc, #384]	@ (80035b4 <HAL_DMA_IRQHandler+0x410>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d02c      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a5e      	ldr	r2, [pc, #376]	@ (80035b8 <HAL_DMA_IRQHandler+0x414>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d027      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5d      	ldr	r2, [pc, #372]	@ (80035bc <HAL_DMA_IRQHandler+0x418>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5b      	ldr	r2, [pc, #364]	@ (80035c0 <HAL_DMA_IRQHandler+0x41c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01d      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5a      	ldr	r2, [pc, #360]	@ (80035c4 <HAL_DMA_IRQHandler+0x420>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d018      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a58      	ldr	r2, [pc, #352]	@ (80035c8 <HAL_DMA_IRQHandler+0x424>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a57      	ldr	r2, [pc, #348]	@ (80035cc <HAL_DMA_IRQHandler+0x428>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00e      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a55      	ldr	r2, [pc, #340]	@ (80035d0 <HAL_DMA_IRQHandler+0x42c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a54      	ldr	r2, [pc, #336]	@ (80035d4 <HAL_DMA_IRQHandler+0x430>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2ee>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a52      	ldr	r2, [pc, #328]	@ (80035d8 <HAL_DMA_IRQHandler+0x434>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d10a      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x304>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e003      	b.n	80034b0 <HAL_DMA_IRQHandler+0x30c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f043 0202 	orr.w	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2204      	movs	r2, #4
 80034da:	409a      	lsls	r2, r3
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 808f 	beq.w	8003604 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2c      	ldr	r2, [pc, #176]	@ (800359c <HAL_DMA_IRQHandler+0x3f8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d04a      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2a      	ldr	r2, [pc, #168]	@ (80035a0 <HAL_DMA_IRQHandler+0x3fc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d045      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a29      	ldr	r2, [pc, #164]	@ (80035a4 <HAL_DMA_IRQHandler+0x400>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d040      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a27      	ldr	r2, [pc, #156]	@ (80035a8 <HAL_DMA_IRQHandler+0x404>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d03b      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a26      	ldr	r2, [pc, #152]	@ (80035ac <HAL_DMA_IRQHandler+0x408>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d036      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <HAL_DMA_IRQHandler+0x40c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d031      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a23      	ldr	r2, [pc, #140]	@ (80035b4 <HAL_DMA_IRQHandler+0x410>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d02c      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a21      	ldr	r2, [pc, #132]	@ (80035b8 <HAL_DMA_IRQHandler+0x414>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d027      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a20      	ldr	r2, [pc, #128]	@ (80035bc <HAL_DMA_IRQHandler+0x418>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1e      	ldr	r2, [pc, #120]	@ (80035c0 <HAL_DMA_IRQHandler+0x41c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01d      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1d      	ldr	r2, [pc, #116]	@ (80035c4 <HAL_DMA_IRQHandler+0x420>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1b      	ldr	r2, [pc, #108]	@ (80035c8 <HAL_DMA_IRQHandler+0x424>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1a      	ldr	r2, [pc, #104]	@ (80035cc <HAL_DMA_IRQHandler+0x428>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a18      	ldr	r2, [pc, #96]	@ (80035d0 <HAL_DMA_IRQHandler+0x42c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <HAL_DMA_IRQHandler+0x430>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3e2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a15      	ldr	r2, [pc, #84]	@ (80035d8 <HAL_DMA_IRQHandler+0x434>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d12a      	bne.n	80035dc <HAL_DMA_IRQHandler+0x438>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e023      	b.n	80035e4 <HAL_DMA_IRQHandler+0x440>
 800359c:	40020010 	.word	0x40020010
 80035a0:	40020028 	.word	0x40020028
 80035a4:	40020040 	.word	0x40020040
 80035a8:	40020058 	.word	0x40020058
 80035ac:	40020070 	.word	0x40020070
 80035b0:	40020088 	.word	0x40020088
 80035b4:	400200a0 	.word	0x400200a0
 80035b8:	400200b8 	.word	0x400200b8
 80035bc:	40020410 	.word	0x40020410
 80035c0:	40020428 	.word	0x40020428
 80035c4:	40020440 	.word	0x40020440
 80035c8:	40020458 	.word	0x40020458
 80035cc:	40020470 	.word	0x40020470
 80035d0:	40020488 	.word	0x40020488
 80035d4:	400204a0 	.word	0x400204a0
 80035d8:	400204b8 	.word	0x400204b8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2204      	movs	r2, #4
 80035f2:	409a      	lsls	r2, r3
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	f043 0204 	orr.w	r2, r3, #4
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2210      	movs	r2, #16
 800360e:	409a      	lsls	r2, r3
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80a6 	beq.w	8003766 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a85      	ldr	r2, [pc, #532]	@ (8003834 <HAL_DMA_IRQHandler+0x690>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d04a      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a83      	ldr	r2, [pc, #524]	@ (8003838 <HAL_DMA_IRQHandler+0x694>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d045      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a82      	ldr	r2, [pc, #520]	@ (800383c <HAL_DMA_IRQHandler+0x698>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d040      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a80      	ldr	r2, [pc, #512]	@ (8003840 <HAL_DMA_IRQHandler+0x69c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d03b      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7f      	ldr	r2, [pc, #508]	@ (8003844 <HAL_DMA_IRQHandler+0x6a0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d036      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a7d      	ldr	r2, [pc, #500]	@ (8003848 <HAL_DMA_IRQHandler+0x6a4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d031      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a7c      	ldr	r2, [pc, #496]	@ (800384c <HAL_DMA_IRQHandler+0x6a8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d02c      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a7a      	ldr	r2, [pc, #488]	@ (8003850 <HAL_DMA_IRQHandler+0x6ac>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d027      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a79      	ldr	r2, [pc, #484]	@ (8003854 <HAL_DMA_IRQHandler+0x6b0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d022      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a77      	ldr	r2, [pc, #476]	@ (8003858 <HAL_DMA_IRQHandler+0x6b4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01d      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a76      	ldr	r2, [pc, #472]	@ (800385c <HAL_DMA_IRQHandler+0x6b8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d018      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a74      	ldr	r2, [pc, #464]	@ (8003860 <HAL_DMA_IRQHandler+0x6bc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a73      	ldr	r2, [pc, #460]	@ (8003864 <HAL_DMA_IRQHandler+0x6c0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a71      	ldr	r2, [pc, #452]	@ (8003868 <HAL_DMA_IRQHandler+0x6c4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a70      	ldr	r2, [pc, #448]	@ (800386c <HAL_DMA_IRQHandler+0x6c8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_DMA_IRQHandler+0x516>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003870 <HAL_DMA_IRQHandler+0x6cc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10a      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x52c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e009      	b.n	80036e4 <HAL_DMA_IRQHandler+0x540>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03e      	beq.n	8003766 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2210      	movs	r2, #16
 80036f2:	409a      	lsls	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d018      	beq.n	8003738 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d108      	bne.n	8003726 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d024      	beq.n	8003766 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
 8003724:	e01f      	b.n	8003766 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372a:	2b00      	cmp	r3, #0
 800372c:	d01b      	beq.n	8003766 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
 8003736:	e016      	b.n	8003766 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d107      	bne.n	8003756 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0208 	bic.w	r2, r2, #8
 8003754:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2220      	movs	r2, #32
 8003770:	409a      	lsls	r2, r3
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8110 	beq.w	800399c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2c      	ldr	r2, [pc, #176]	@ (8003834 <HAL_DMA_IRQHandler+0x690>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04a      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2b      	ldr	r2, [pc, #172]	@ (8003838 <HAL_DMA_IRQHandler+0x694>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d045      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a29      	ldr	r2, [pc, #164]	@ (800383c <HAL_DMA_IRQHandler+0x698>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d040      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a28      	ldr	r2, [pc, #160]	@ (8003840 <HAL_DMA_IRQHandler+0x69c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d03b      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a26      	ldr	r2, [pc, #152]	@ (8003844 <HAL_DMA_IRQHandler+0x6a0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d036      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a25      	ldr	r2, [pc, #148]	@ (8003848 <HAL_DMA_IRQHandler+0x6a4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d031      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a23      	ldr	r2, [pc, #140]	@ (800384c <HAL_DMA_IRQHandler+0x6a8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02c      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <HAL_DMA_IRQHandler+0x6ac>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d027      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a20      	ldr	r2, [pc, #128]	@ (8003854 <HAL_DMA_IRQHandler+0x6b0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1f      	ldr	r2, [pc, #124]	@ (8003858 <HAL_DMA_IRQHandler+0x6b4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01d      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	@ (800385c <HAL_DMA_IRQHandler+0x6b8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003860 <HAL_DMA_IRQHandler+0x6bc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003864 <HAL_DMA_IRQHandler+0x6c0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a19      	ldr	r2, [pc, #100]	@ (8003868 <HAL_DMA_IRQHandler+0x6c4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a17      	ldr	r2, [pc, #92]	@ (800386c <HAL_DMA_IRQHandler+0x6c8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_DMA_IRQHandler+0x678>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a16      	ldr	r2, [pc, #88]	@ (8003870 <HAL_DMA_IRQHandler+0x6cc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d12b      	bne.n	8003874 <HAL_DMA_IRQHandler+0x6d0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e02a      	b.n	8003888 <HAL_DMA_IRQHandler+0x6e4>
 8003832:	bf00      	nop
 8003834:	40020010 	.word	0x40020010
 8003838:	40020028 	.word	0x40020028
 800383c:	40020040 	.word	0x40020040
 8003840:	40020058 	.word	0x40020058
 8003844:	40020070 	.word	0x40020070
 8003848:	40020088 	.word	0x40020088
 800384c:	400200a0 	.word	0x400200a0
 8003850:	400200b8 	.word	0x400200b8
 8003854:	40020410 	.word	0x40020410
 8003858:	40020428 	.word	0x40020428
 800385c:	40020440 	.word	0x40020440
 8003860:	40020458 	.word	0x40020458
 8003864:	40020470 	.word	0x40020470
 8003868:	40020488 	.word	0x40020488
 800386c:	400204a0 	.word	0x400204a0
 8003870:	400204b8 	.word	0x400204b8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8087 	beq.w	800399c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2220      	movs	r2, #32
 8003898:	409a      	lsls	r2, r3
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d139      	bne.n	800391e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0216 	bic.w	r2, r2, #22
 80038b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_DMA_IRQHandler+0x736>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0208 	bic.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	223f      	movs	r2, #63	@ 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8382 	beq.w	8004018 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
          }
          return;
 800391c:	e37c      	b.n	8004018 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d018      	beq.n	800395e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d108      	bne.n	800394c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	2b00      	cmp	r3, #0
 8003940:	d02c      	beq.n	800399c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
 800394a:	e027      	b.n	800399c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d023      	beq.n	800399c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
 800395c:	e01e      	b.n	800399c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10f      	bne.n	800398c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0210 	bic.w	r2, r2, #16
 800397a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 833e 	beq.w	8004022 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8088 	beq.w	8003ac4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2204      	movs	r2, #4
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a89      	ldr	r2, [pc, #548]	@ (8003be8 <HAL_DMA_IRQHandler+0xa44>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d04a      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a88      	ldr	r2, [pc, #544]	@ (8003bec <HAL_DMA_IRQHandler+0xa48>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d045      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a86      	ldr	r2, [pc, #536]	@ (8003bf0 <HAL_DMA_IRQHandler+0xa4c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d040      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a85      	ldr	r2, [pc, #532]	@ (8003bf4 <HAL_DMA_IRQHandler+0xa50>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d03b      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a83      	ldr	r2, [pc, #524]	@ (8003bf8 <HAL_DMA_IRQHandler+0xa54>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d036      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a82      	ldr	r2, [pc, #520]	@ (8003bfc <HAL_DMA_IRQHandler+0xa58>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d031      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a80      	ldr	r2, [pc, #512]	@ (8003c00 <HAL_DMA_IRQHandler+0xa5c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d02c      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a7f      	ldr	r2, [pc, #508]	@ (8003c04 <HAL_DMA_IRQHandler+0xa60>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d027      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a7d      	ldr	r2, [pc, #500]	@ (8003c08 <HAL_DMA_IRQHandler+0xa64>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d022      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c0c <HAL_DMA_IRQHandler+0xa68>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d01d      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a7a      	ldr	r2, [pc, #488]	@ (8003c10 <HAL_DMA_IRQHandler+0xa6c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d018      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a79      	ldr	r2, [pc, #484]	@ (8003c14 <HAL_DMA_IRQHandler+0xa70>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a77      	ldr	r2, [pc, #476]	@ (8003c18 <HAL_DMA_IRQHandler+0xa74>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00e      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a76      	ldr	r2, [pc, #472]	@ (8003c1c <HAL_DMA_IRQHandler+0xa78>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d009      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a74      	ldr	r2, [pc, #464]	@ (8003c20 <HAL_DMA_IRQHandler+0xa7c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x8b8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a73      	ldr	r2, [pc, #460]	@ (8003c24 <HAL_DMA_IRQHandler+0xa80>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d108      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x8ca>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	e007      	b.n	8003a7e <HAL_DMA_IRQHandler+0x8da>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d307      	bcc.n	8003a9a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f2      	bne.n	8003a7e <HAL_DMA_IRQHandler+0x8da>
 8003a98:	e000      	b.n	8003a9c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a9a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2203      	movs	r2, #3
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003ab2:	e003      	b.n	8003abc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 82aa 	beq.w	8004022 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
 8003ad6:	e2a4      	b.n	8004022 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <HAL_DMA_IRQHandler+0xa84>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d04a      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a51      	ldr	r2, [pc, #324]	@ (8003c2c <HAL_DMA_IRQHandler+0xa88>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d045      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4f      	ldr	r2, [pc, #316]	@ (8003c30 <HAL_DMA_IRQHandler+0xa8c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d040      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4e      	ldr	r2, [pc, #312]	@ (8003c34 <HAL_DMA_IRQHandler+0xa90>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d03b      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a4c      	ldr	r2, [pc, #304]	@ (8003c38 <HAL_DMA_IRQHandler+0xa94>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d036      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a4b      	ldr	r2, [pc, #300]	@ (8003c3c <HAL_DMA_IRQHandler+0xa98>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a49      	ldr	r2, [pc, #292]	@ (8003c40 <HAL_DMA_IRQHandler+0xa9c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02c      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a48      	ldr	r2, [pc, #288]	@ (8003c44 <HAL_DMA_IRQHandler+0xaa0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d027      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a46      	ldr	r2, [pc, #280]	@ (8003c48 <HAL_DMA_IRQHandler+0xaa4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a45      	ldr	r2, [pc, #276]	@ (8003c4c <HAL_DMA_IRQHandler+0xaa8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a43      	ldr	r2, [pc, #268]	@ (8003c50 <HAL_DMA_IRQHandler+0xaac>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a42      	ldr	r2, [pc, #264]	@ (8003c54 <HAL_DMA_IRQHandler+0xab0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a40      	ldr	r2, [pc, #256]	@ (8003c58 <HAL_DMA_IRQHandler+0xab4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c5c <HAL_DMA_IRQHandler+0xab8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3d      	ldr	r2, [pc, #244]	@ (8003c60 <HAL_DMA_IRQHandler+0xabc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x9d4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3c      	ldr	r2, [pc, #240]	@ (8003c64 <HAL_DMA_IRQHandler+0xac0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_IRQHandler+0x9d8>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_DMA_IRQHandler+0x9da>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 824f 	beq.w	8004022 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2204      	movs	r2, #4
 8003b96:	409a      	lsls	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80dd 	beq.w	8003d5c <HAL_DMA_IRQHandler+0xbb8>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80d7 	beq.w	8003d5c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d059      	beq.n	8003c7c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d14a      	bne.n	8003c68 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8220 	beq.w	800401c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be4:	e21a      	b.n	800401c <HAL_DMA_IRQHandler+0xe78>
 8003be6:	bf00      	nop
 8003be8:	40020010 	.word	0x40020010
 8003bec:	40020028 	.word	0x40020028
 8003bf0:	40020040 	.word	0x40020040
 8003bf4:	40020058 	.word	0x40020058
 8003bf8:	40020070 	.word	0x40020070
 8003bfc:	40020088 	.word	0x40020088
 8003c00:	400200a0 	.word	0x400200a0
 8003c04:	400200b8 	.word	0x400200b8
 8003c08:	40020410 	.word	0x40020410
 8003c0c:	40020428 	.word	0x40020428
 8003c10:	40020440 	.word	0x40020440
 8003c14:	40020458 	.word	0x40020458
 8003c18:	40020470 	.word	0x40020470
 8003c1c:	40020488 	.word	0x40020488
 8003c20:	400204a0 	.word	0x400204a0
 8003c24:	400204b8 	.word	0x400204b8
 8003c28:	48022c08 	.word	0x48022c08
 8003c2c:	48022c1c 	.word	0x48022c1c
 8003c30:	48022c30 	.word	0x48022c30
 8003c34:	48022c44 	.word	0x48022c44
 8003c38:	48022c58 	.word	0x48022c58
 8003c3c:	48022c6c 	.word	0x48022c6c
 8003c40:	48022c80 	.word	0x48022c80
 8003c44:	48022c94 	.word	0x48022c94
 8003c48:	58025408 	.word	0x58025408
 8003c4c:	5802541c 	.word	0x5802541c
 8003c50:	58025430 	.word	0x58025430
 8003c54:	58025444 	.word	0x58025444
 8003c58:	58025458 	.word	0x58025458
 8003c5c:	5802546c 	.word	0x5802546c
 8003c60:	58025480 	.word	0x58025480
 8003c64:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 81d5 	beq.w	800401c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c7a:	e1cf      	b.n	800401c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d160      	bne.n	8003d48 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e88 <HAL_DMA_IRQHandler+0xce4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04a      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7d      	ldr	r2, [pc, #500]	@ (8003e8c <HAL_DMA_IRQHandler+0xce8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d045      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e90 <HAL_DMA_IRQHandler+0xcec>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d040      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7a      	ldr	r2, [pc, #488]	@ (8003e94 <HAL_DMA_IRQHandler+0xcf0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a79      	ldr	r2, [pc, #484]	@ (8003e98 <HAL_DMA_IRQHandler+0xcf4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d036      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a77      	ldr	r2, [pc, #476]	@ (8003e9c <HAL_DMA_IRQHandler+0xcf8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a76      	ldr	r2, [pc, #472]	@ (8003ea0 <HAL_DMA_IRQHandler+0xcfc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02c      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a74      	ldr	r2, [pc, #464]	@ (8003ea4 <HAL_DMA_IRQHandler+0xd00>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a73      	ldr	r2, [pc, #460]	@ (8003ea8 <HAL_DMA_IRQHandler+0xd04>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a71      	ldr	r2, [pc, #452]	@ (8003eac <HAL_DMA_IRQHandler+0xd08>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a70      	ldr	r2, [pc, #448]	@ (8003eb0 <HAL_DMA_IRQHandler+0xd0c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb4 <HAL_DMA_IRQHandler+0xd10>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6d      	ldr	r2, [pc, #436]	@ (8003eb8 <HAL_DMA_IRQHandler+0xd14>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ebc <HAL_DMA_IRQHandler+0xd18>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6a      	ldr	r2, [pc, #424]	@ (8003ec0 <HAL_DMA_IRQHandler+0xd1c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xb82>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <HAL_DMA_IRQHandler+0xd20>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <HAL_DMA_IRQHandler+0xb94>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0208 	bic.w	r2, r2, #8
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e007      	b.n	8003d48 <HAL_DMA_IRQHandler+0xba4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8165 	beq.w	800401c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d5a:	e15f      	b.n	800401c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2202      	movs	r2, #2
 8003d66:	409a      	lsls	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80c5 	beq.w	8003efc <HAL_DMA_IRQHandler+0xd58>
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80bf 	beq.w	8003efc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2202      	movs	r2, #2
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d018      	beq.n	8003dca <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 813a 	beq.w	8004020 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003db4:	e134      	b.n	8004020 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8130 	beq.w	8004020 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc8:	e12a      	b.n	8004020 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 8089 	bne.w	8003ee8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <HAL_DMA_IRQHandler+0xce4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d04a      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a29      	ldr	r2, [pc, #164]	@ (8003e8c <HAL_DMA_IRQHandler+0xce8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d045      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a28      	ldr	r2, [pc, #160]	@ (8003e90 <HAL_DMA_IRQHandler+0xcec>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d040      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a26      	ldr	r2, [pc, #152]	@ (8003e94 <HAL_DMA_IRQHandler+0xcf0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d03b      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a25      	ldr	r2, [pc, #148]	@ (8003e98 <HAL_DMA_IRQHandler+0xcf4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d036      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a23      	ldr	r2, [pc, #140]	@ (8003e9c <HAL_DMA_IRQHandler+0xcf8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d031      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a22      	ldr	r2, [pc, #136]	@ (8003ea0 <HAL_DMA_IRQHandler+0xcfc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d02c      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a20      	ldr	r2, [pc, #128]	@ (8003ea4 <HAL_DMA_IRQHandler+0xd00>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d027      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <HAL_DMA_IRQHandler+0xd04>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	@ (8003eac <HAL_DMA_IRQHandler+0xd08>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01d      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <HAL_DMA_IRQHandler+0xd0c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d018      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb4 <HAL_DMA_IRQHandler+0xd10>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a19      	ldr	r2, [pc, #100]	@ (8003eb8 <HAL_DMA_IRQHandler+0xd14>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a17      	ldr	r2, [pc, #92]	@ (8003ebc <HAL_DMA_IRQHandler+0xd18>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a16      	ldr	r2, [pc, #88]	@ (8003ec0 <HAL_DMA_IRQHandler+0xd1c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xcd2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <HAL_DMA_IRQHandler+0xd20>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d128      	bne.n	8003ec8 <HAL_DMA_IRQHandler+0xd24>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0214 	bic.w	r2, r2, #20
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e027      	b.n	8003ed8 <HAL_DMA_IRQHandler+0xd34>
 8003e88:	40020010 	.word	0x40020010
 8003e8c:	40020028 	.word	0x40020028
 8003e90:	40020040 	.word	0x40020040
 8003e94:	40020058 	.word	0x40020058
 8003e98:	40020070 	.word	0x40020070
 8003e9c:	40020088 	.word	0x40020088
 8003ea0:	400200a0 	.word	0x400200a0
 8003ea4:	400200b8 	.word	0x400200b8
 8003ea8:	40020410 	.word	0x40020410
 8003eac:	40020428 	.word	0x40020428
 8003eb0:	40020440 	.word	0x40020440
 8003eb4:	40020458 	.word	0x40020458
 8003eb8:	40020470 	.word	0x40020470
 8003ebc:	40020488 	.word	0x40020488
 8003ec0:	400204a0 	.word	0x400204a0
 8003ec4:	400204b8 	.word	0x400204b8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 020a 	bic.w	r2, r2, #10
 8003ed6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8097 	beq.w	8004020 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003efa:	e091      	b.n	8004020 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2208      	movs	r2, #8
 8003f06:	409a      	lsls	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8088 	beq.w	8004022 <HAL_DMA_IRQHandler+0xe7e>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8082 	beq.w	8004022 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a41      	ldr	r2, [pc, #260]	@ (8004028 <HAL_DMA_IRQHandler+0xe84>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d04a      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800402c <HAL_DMA_IRQHandler+0xe88>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d045      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a3e      	ldr	r2, [pc, #248]	@ (8004030 <HAL_DMA_IRQHandler+0xe8c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d040      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3c      	ldr	r2, [pc, #240]	@ (8004034 <HAL_DMA_IRQHandler+0xe90>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d03b      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8004038 <HAL_DMA_IRQHandler+0xe94>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d036      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a39      	ldr	r2, [pc, #228]	@ (800403c <HAL_DMA_IRQHandler+0xe98>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d031      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a38      	ldr	r2, [pc, #224]	@ (8004040 <HAL_DMA_IRQHandler+0xe9c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d02c      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a36      	ldr	r2, [pc, #216]	@ (8004044 <HAL_DMA_IRQHandler+0xea0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d027      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a35      	ldr	r2, [pc, #212]	@ (8004048 <HAL_DMA_IRQHandler+0xea4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d022      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a33      	ldr	r2, [pc, #204]	@ (800404c <HAL_DMA_IRQHandler+0xea8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01d      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a32      	ldr	r2, [pc, #200]	@ (8004050 <HAL_DMA_IRQHandler+0xeac>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d018      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a30      	ldr	r2, [pc, #192]	@ (8004054 <HAL_DMA_IRQHandler+0xeb0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004058 <HAL_DMA_IRQHandler+0xeb4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800405c <HAL_DMA_IRQHandler+0xeb8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <HAL_DMA_IRQHandler+0xebc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xe1a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8004064 <HAL_DMA_IRQHandler+0xec0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0xe2c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 021c 	bic.w	r2, r2, #28
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e007      	b.n	8003fe0 <HAL_DMA_IRQHandler+0xe3c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 020e 	bic.w	r2, r2, #14
 8003fde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
 8004016:	e004      	b.n	8004022 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004018:	bf00      	nop
 800401a:	e002      	b.n	8004022 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800401c:	bf00      	nop
 800401e:	e000      	b.n	8004022 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004020:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004022:	3728      	adds	r7, #40	@ 0x28
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40020010 	.word	0x40020010
 800402c:	40020028 	.word	0x40020028
 8004030:	40020040 	.word	0x40020040
 8004034:	40020058 	.word	0x40020058
 8004038:	40020070 	.word	0x40020070
 800403c:	40020088 	.word	0x40020088
 8004040:	400200a0 	.word	0x400200a0
 8004044:	400200b8 	.word	0x400200b8
 8004048:	40020410 	.word	0x40020410
 800404c:	40020428 	.word	0x40020428
 8004050:	40020440 	.word	0x40020440
 8004054:	40020458 	.word	0x40020458
 8004058:	40020470 	.word	0x40020470
 800405c:	40020488 	.word	0x40020488
 8004060:	400204a0 	.word	0x400204a0
 8004064:	400204b8 	.word	0x400204b8

08004068 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a7f      	ldr	r2, [pc, #508]	@ (8004284 <DMA_SetConfig+0x21c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d072      	beq.n	8004172 <DMA_SetConfig+0x10a>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a7d      	ldr	r2, [pc, #500]	@ (8004288 <DMA_SetConfig+0x220>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d06d      	beq.n	8004172 <DMA_SetConfig+0x10a>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a7c      	ldr	r2, [pc, #496]	@ (800428c <DMA_SetConfig+0x224>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d068      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a7a      	ldr	r2, [pc, #488]	@ (8004290 <DMA_SetConfig+0x228>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d063      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a79      	ldr	r2, [pc, #484]	@ (8004294 <DMA_SetConfig+0x22c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d05e      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a77      	ldr	r2, [pc, #476]	@ (8004298 <DMA_SetConfig+0x230>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d059      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a76      	ldr	r2, [pc, #472]	@ (800429c <DMA_SetConfig+0x234>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d054      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a74      	ldr	r2, [pc, #464]	@ (80042a0 <DMA_SetConfig+0x238>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d04f      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a73      	ldr	r2, [pc, #460]	@ (80042a4 <DMA_SetConfig+0x23c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d04a      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a71      	ldr	r2, [pc, #452]	@ (80042a8 <DMA_SetConfig+0x240>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d045      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a70      	ldr	r2, [pc, #448]	@ (80042ac <DMA_SetConfig+0x244>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d040      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a6e      	ldr	r2, [pc, #440]	@ (80042b0 <DMA_SetConfig+0x248>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d03b      	beq.n	8004172 <DMA_SetConfig+0x10a>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6d      	ldr	r2, [pc, #436]	@ (80042b4 <DMA_SetConfig+0x24c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d036      	beq.n	8004172 <DMA_SetConfig+0x10a>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a6b      	ldr	r2, [pc, #428]	@ (80042b8 <DMA_SetConfig+0x250>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d031      	beq.n	8004172 <DMA_SetConfig+0x10a>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6a      	ldr	r2, [pc, #424]	@ (80042bc <DMA_SetConfig+0x254>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d02c      	beq.n	8004172 <DMA_SetConfig+0x10a>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a68      	ldr	r2, [pc, #416]	@ (80042c0 <DMA_SetConfig+0x258>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d027      	beq.n	8004172 <DMA_SetConfig+0x10a>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a67      	ldr	r2, [pc, #412]	@ (80042c4 <DMA_SetConfig+0x25c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d022      	beq.n	8004172 <DMA_SetConfig+0x10a>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a65      	ldr	r2, [pc, #404]	@ (80042c8 <DMA_SetConfig+0x260>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01d      	beq.n	8004172 <DMA_SetConfig+0x10a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a64      	ldr	r2, [pc, #400]	@ (80042cc <DMA_SetConfig+0x264>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d018      	beq.n	8004172 <DMA_SetConfig+0x10a>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a62      	ldr	r2, [pc, #392]	@ (80042d0 <DMA_SetConfig+0x268>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d013      	beq.n	8004172 <DMA_SetConfig+0x10a>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a61      	ldr	r2, [pc, #388]	@ (80042d4 <DMA_SetConfig+0x26c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00e      	beq.n	8004172 <DMA_SetConfig+0x10a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a5f      	ldr	r2, [pc, #380]	@ (80042d8 <DMA_SetConfig+0x270>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d009      	beq.n	8004172 <DMA_SetConfig+0x10a>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5e      	ldr	r2, [pc, #376]	@ (80042dc <DMA_SetConfig+0x274>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d004      	beq.n	8004172 <DMA_SetConfig+0x10a>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a5c      	ldr	r2, [pc, #368]	@ (80042e0 <DMA_SetConfig+0x278>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <DMA_SetConfig+0x10e>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <DMA_SetConfig+0x110>
 8004176:	2300      	movs	r3, #0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004184:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004196:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a39      	ldr	r2, [pc, #228]	@ (8004284 <DMA_SetConfig+0x21c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d04a      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a38      	ldr	r2, [pc, #224]	@ (8004288 <DMA_SetConfig+0x220>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d045      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a36      	ldr	r2, [pc, #216]	@ (800428c <DMA_SetConfig+0x224>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d040      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a35      	ldr	r2, [pc, #212]	@ (8004290 <DMA_SetConfig+0x228>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d03b      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a33      	ldr	r2, [pc, #204]	@ (8004294 <DMA_SetConfig+0x22c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d036      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a32      	ldr	r2, [pc, #200]	@ (8004298 <DMA_SetConfig+0x230>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d031      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a30      	ldr	r2, [pc, #192]	@ (800429c <DMA_SetConfig+0x234>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d02c      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2f      	ldr	r2, [pc, #188]	@ (80042a0 <DMA_SetConfig+0x238>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d027      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2d      	ldr	r2, [pc, #180]	@ (80042a4 <DMA_SetConfig+0x23c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d022      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a2c      	ldr	r2, [pc, #176]	@ (80042a8 <DMA_SetConfig+0x240>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d01d      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2a      	ldr	r2, [pc, #168]	@ (80042ac <DMA_SetConfig+0x244>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d018      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a29      	ldr	r2, [pc, #164]	@ (80042b0 <DMA_SetConfig+0x248>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a27      	ldr	r2, [pc, #156]	@ (80042b4 <DMA_SetConfig+0x24c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00e      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a26      	ldr	r2, [pc, #152]	@ (80042b8 <DMA_SetConfig+0x250>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a24      	ldr	r2, [pc, #144]	@ (80042bc <DMA_SetConfig+0x254>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <DMA_SetConfig+0x1d0>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a23      	ldr	r2, [pc, #140]	@ (80042c0 <DMA_SetConfig+0x258>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d101      	bne.n	800423c <DMA_SetConfig+0x1d4>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <DMA_SetConfig+0x1d6>
 800423c:	2300      	movs	r3, #0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d059      	beq.n	80042f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	223f      	movs	r2, #63	@ 0x3f
 800424c:	409a      	lsls	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004260:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	d138      	bne.n	80042e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004282:	e0ae      	b.n	80043e2 <DMA_SetConfig+0x37a>
 8004284:	40020010 	.word	0x40020010
 8004288:	40020028 	.word	0x40020028
 800428c:	40020040 	.word	0x40020040
 8004290:	40020058 	.word	0x40020058
 8004294:	40020070 	.word	0x40020070
 8004298:	40020088 	.word	0x40020088
 800429c:	400200a0 	.word	0x400200a0
 80042a0:	400200b8 	.word	0x400200b8
 80042a4:	40020410 	.word	0x40020410
 80042a8:	40020428 	.word	0x40020428
 80042ac:	40020440 	.word	0x40020440
 80042b0:	40020458 	.word	0x40020458
 80042b4:	40020470 	.word	0x40020470
 80042b8:	40020488 	.word	0x40020488
 80042bc:	400204a0 	.word	0x400204a0
 80042c0:	400204b8 	.word	0x400204b8
 80042c4:	58025408 	.word	0x58025408
 80042c8:	5802541c 	.word	0x5802541c
 80042cc:	58025430 	.word	0x58025430
 80042d0:	58025444 	.word	0x58025444
 80042d4:	58025458 	.word	0x58025458
 80042d8:	5802546c 	.word	0x5802546c
 80042dc:	58025480 	.word	0x58025480
 80042e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]
}
 80042f4:	e075      	b.n	80043e2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3d      	ldr	r2, [pc, #244]	@ (80043f0 <DMA_SetConfig+0x388>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d04a      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3b      	ldr	r2, [pc, #236]	@ (80043f4 <DMA_SetConfig+0x38c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d045      	beq.n	8004396 <DMA_SetConfig+0x32e>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3a      	ldr	r2, [pc, #232]	@ (80043f8 <DMA_SetConfig+0x390>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d040      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a38      	ldr	r2, [pc, #224]	@ (80043fc <DMA_SetConfig+0x394>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d03b      	beq.n	8004396 <DMA_SetConfig+0x32e>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a37      	ldr	r2, [pc, #220]	@ (8004400 <DMA_SetConfig+0x398>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d036      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a35      	ldr	r2, [pc, #212]	@ (8004404 <DMA_SetConfig+0x39c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d031      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a34      	ldr	r2, [pc, #208]	@ (8004408 <DMA_SetConfig+0x3a0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d02c      	beq.n	8004396 <DMA_SetConfig+0x32e>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a32      	ldr	r2, [pc, #200]	@ (800440c <DMA_SetConfig+0x3a4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d027      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a31      	ldr	r2, [pc, #196]	@ (8004410 <DMA_SetConfig+0x3a8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2f      	ldr	r2, [pc, #188]	@ (8004414 <DMA_SetConfig+0x3ac>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01d      	beq.n	8004396 <DMA_SetConfig+0x32e>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2e      	ldr	r2, [pc, #184]	@ (8004418 <DMA_SetConfig+0x3b0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2c      	ldr	r2, [pc, #176]	@ (800441c <DMA_SetConfig+0x3b4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <DMA_SetConfig+0x32e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2b      	ldr	r2, [pc, #172]	@ (8004420 <DMA_SetConfig+0x3b8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a29      	ldr	r2, [pc, #164]	@ (8004424 <DMA_SetConfig+0x3bc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <DMA_SetConfig+0x32e>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a28      	ldr	r2, [pc, #160]	@ (8004428 <DMA_SetConfig+0x3c0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <DMA_SetConfig+0x32e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a26      	ldr	r2, [pc, #152]	@ (800442c <DMA_SetConfig+0x3c4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <DMA_SetConfig+0x332>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <DMA_SetConfig+0x334>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2201      	movs	r2, #1
 80043aa:	409a      	lsls	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d108      	bne.n	80043d2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	60da      	str	r2, [r3, #12]
}
 80043d0:	e007      	b.n	80043e2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	60da      	str	r2, [r3, #12]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	48022c08 	.word	0x48022c08
 80043f4:	48022c1c 	.word	0x48022c1c
 80043f8:	48022c30 	.word	0x48022c30
 80043fc:	48022c44 	.word	0x48022c44
 8004400:	48022c58 	.word	0x48022c58
 8004404:	48022c6c 	.word	0x48022c6c
 8004408:	48022c80 	.word	0x48022c80
 800440c:	48022c94 	.word	0x48022c94
 8004410:	58025408 	.word	0x58025408
 8004414:	5802541c 	.word	0x5802541c
 8004418:	58025430 	.word	0x58025430
 800441c:	58025444 	.word	0x58025444
 8004420:	58025458 	.word	0x58025458
 8004424:	5802546c 	.word	0x5802546c
 8004428:	58025480 	.word	0x58025480
 800442c:	58025494 	.word	0x58025494

08004430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a42      	ldr	r2, [pc, #264]	@ (8004548 <DMA_CalcBaseAndBitshift+0x118>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d04a      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a41      	ldr	r2, [pc, #260]	@ (800454c <DMA_CalcBaseAndBitshift+0x11c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d045      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a3f      	ldr	r2, [pc, #252]	@ (8004550 <DMA_CalcBaseAndBitshift+0x120>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d040      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a3e      	ldr	r2, [pc, #248]	@ (8004554 <DMA_CalcBaseAndBitshift+0x124>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d03b      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a3c      	ldr	r2, [pc, #240]	@ (8004558 <DMA_CalcBaseAndBitshift+0x128>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d036      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3b      	ldr	r2, [pc, #236]	@ (800455c <DMA_CalcBaseAndBitshift+0x12c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d031      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a39      	ldr	r2, [pc, #228]	@ (8004560 <DMA_CalcBaseAndBitshift+0x130>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d02c      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a38      	ldr	r2, [pc, #224]	@ (8004564 <DMA_CalcBaseAndBitshift+0x134>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d027      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a36      	ldr	r2, [pc, #216]	@ (8004568 <DMA_CalcBaseAndBitshift+0x138>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d022      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a35      	ldr	r2, [pc, #212]	@ (800456c <DMA_CalcBaseAndBitshift+0x13c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d01d      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a33      	ldr	r2, [pc, #204]	@ (8004570 <DMA_CalcBaseAndBitshift+0x140>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a32      	ldr	r2, [pc, #200]	@ (8004574 <DMA_CalcBaseAndBitshift+0x144>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <DMA_CalcBaseAndBitshift+0x148>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2f      	ldr	r2, [pc, #188]	@ (800457c <DMA_CalcBaseAndBitshift+0x14c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <DMA_CalcBaseAndBitshift+0x150>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <DMA_CalcBaseAndBitshift+0x154>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d101      	bne.n	80044dc <DMA_CalcBaseAndBitshift+0xac>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <DMA_CalcBaseAndBitshift+0xae>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d024      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3b10      	subs	r3, #16
 80044ea:	4a27      	ldr	r2, [pc, #156]	@ (8004588 <DMA_CalcBaseAndBitshift+0x158>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	4a24      	ldr	r2, [pc, #144]	@ (800458c <DMA_CalcBaseAndBitshift+0x15c>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d908      	bls.n	800451c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <DMA_CalcBaseAndBitshift+0x160>)
 8004512:	4013      	ands	r3, r2
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	659a      	str	r2, [r3, #88]	@ 0x58
 800451a:	e00d      	b.n	8004538 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <DMA_CalcBaseAndBitshift+0x160>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6593      	str	r3, [r2, #88]	@ 0x58
 800452a:	e005      	b.n	8004538 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
 8004588:	aaaaaaab 	.word	0xaaaaaaab
 800458c:	0800ba90 	.word	0x0800ba90
 8004590:	fffffc00 	.word	0xfffffc00

08004594 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d120      	bne.n	80045ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d858      	bhi.n	8004662 <DMA_CheckFifoParam+0xce>
 80045b0:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <DMA_CheckFifoParam+0x24>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045db 	.word	0x080045db
 80045c0:	080045c9 	.word	0x080045c9
 80045c4:	08004663 	.word	0x08004663
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d048      	beq.n	8004666 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045d8:	e045      	b.n	8004666 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045e2:	d142      	bne.n	800466a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045e8:	e03f      	b.n	800466a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f2:	d123      	bne.n	800463c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d838      	bhi.n	800466e <DMA_CheckFifoParam+0xda>
 80045fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <DMA_CheckFifoParam+0x70>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004615 	.word	0x08004615
 8004608:	0800461b 	.word	0x0800461b
 800460c:	08004615 	.word	0x08004615
 8004610:	0800462d 	.word	0x0800462d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
        break;
 8004618:	e030      	b.n	800467c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d025      	beq.n	8004672 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800462a:	e022      	b.n	8004672 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004634:	d11f      	bne.n	8004676 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800463a:	e01c      	b.n	8004676 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	2b02      	cmp	r3, #2
 8004642:	d902      	bls.n	800464a <DMA_CheckFifoParam+0xb6>
 8004644:	2b03      	cmp	r3, #3
 8004646:	d003      	beq.n	8004650 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004648:	e018      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
        break;
 800464e:	e015      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
    break;
 8004660:	e00b      	b.n	800467a <DMA_CheckFifoParam+0xe6>
        break;
 8004662:	bf00      	nop
 8004664:	e00a      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 8004666:	bf00      	nop
 8004668:	e008      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 800466a:	bf00      	nop
 800466c:	e006      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 800466e:	bf00      	nop
 8004670:	e004      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <DMA_CheckFifoParam+0xe8>
    break;
 800467a:	bf00      	nop
    }
  }

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop

0800468c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a38      	ldr	r2, [pc, #224]	@ (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a36      	ldr	r2, [pc, #216]	@ (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01d      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a35      	ldr	r2, [pc, #212]	@ (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a33      	ldr	r2, [pc, #204]	@ (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a32      	ldr	r2, [pc, #200]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a30      	ldr	r2, [pc, #192]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2f      	ldr	r2, [pc, #188]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2d      	ldr	r2, [pc, #180]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01a      	beq.n	800472a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	3b08      	subs	r3, #8
 80046fc:	4a28      	ldr	r2, [pc, #160]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4b26      	ldr	r3, [pc, #152]	@ (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a24      	ldr	r2, [pc, #144]	@ (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004718:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004728:	e024      	b.n	8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	3b10      	subs	r3, #16
 8004732:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a1c      	ldr	r2, [pc, #112]	@ (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d806      	bhi.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4a1b      	ldr	r2, [pc, #108]	@ (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d902      	bls.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3308      	adds	r3, #8
 8004750:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a16      	ldr	r2, [pc, #88]	@ (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004764:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2201      	movs	r2, #1
 800476e:	409a      	lsls	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	58025408 	.word	0x58025408
 8004784:	5802541c 	.word	0x5802541c
 8004788:	58025430 	.word	0x58025430
 800478c:	58025444 	.word	0x58025444
 8004790:	58025458 	.word	0x58025458
 8004794:	5802546c 	.word	0x5802546c
 8004798:	58025480 	.word	0x58025480
 800479c:	58025494 	.word	0x58025494
 80047a0:	cccccccd 	.word	0xcccccccd
 80047a4:	16009600 	.word	0x16009600
 80047a8:	58025880 	.word	0x58025880
 80047ac:	aaaaaaab 	.word	0xaaaaaaab
 80047b0:	400204b8 	.word	0x400204b8
 80047b4:	4002040f 	.word	0x4002040f
 80047b8:	10008200 	.word	0x10008200
 80047bc:	40020880 	.word	0x40020880

080047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04a      	beq.n	800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d847      	bhi.n	800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a25      	ldr	r2, [pc, #148]	@ (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d022      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a24      	ldr	r2, [pc, #144]	@ (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01d      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a22      	ldr	r2, [pc, #136]	@ (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d018      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a21      	ldr	r2, [pc, #132]	@ (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1f      	ldr	r2, [pc, #124]	@ (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1e      	ldr	r2, [pc, #120]	@ (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1c      	ldr	r2, [pc, #112]	@ (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1b      	ldr	r2, [pc, #108]	@ (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4b17      	ldr	r3, [pc, #92]	@ (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	461a      	mov	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a15      	ldr	r2, [pc, #84]	@ (800489c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004848:	671a      	str	r2, [r3, #112]	@ 0x70
 800484a:	e009      	b.n	8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a11      	ldr	r2, [pc, #68]	@ (80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800485e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b01      	subs	r3, #1
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	58025408 	.word	0x58025408
 800487c:	5802541c 	.word	0x5802541c
 8004880:	58025430 	.word	0x58025430
 8004884:	58025444 	.word	0x58025444
 8004888:	58025458 	.word	0x58025458
 800488c:	5802546c 	.word	0x5802546c
 8004890:	58025480 	.word	0x58025480
 8004894:	58025494 	.word	0x58025494
 8004898:	1600963f 	.word	0x1600963f
 800489c:	58025940 	.word	0x58025940
 80048a0:	1000823f 	.word	0x1000823f
 80048a4:	40020940 	.word	0x40020940

080048a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	@ 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048b6:	4b89      	ldr	r3, [pc, #548]	@ (8004adc <HAL_GPIO_Init+0x234>)
 80048b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ba:	e194      	b.n	8004be6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8186 	beq.w	8004be0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d005      	beq.n	80048ec <HAL_GPIO_Init+0x44>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d130      	bne.n	800494e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004922:	2201      	movs	r2, #1
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0201 	and.w	r2, r3, #1
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b03      	cmp	r3, #3
 8004958:	d017      	beq.n	800498a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d123      	bne.n	80049de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	08da      	lsrs	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3208      	adds	r2, #8
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	2203      	movs	r2, #3
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0203 	and.w	r2, r3, #3
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80e0 	beq.w	8004be0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a20:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a22:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004a26:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004a30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a32:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3e:	4a29      	ldr	r2, [pc, #164]	@ (8004ae4 <HAL_GPIO_Init+0x23c>)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a20      	ldr	r2, [pc, #128]	@ (8004ae8 <HAL_GPIO_Init+0x240>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d052      	beq.n	8004b10 <HAL_GPIO_Init+0x268>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004aec <HAL_GPIO_Init+0x244>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d031      	beq.n	8004ad6 <HAL_GPIO_Init+0x22e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <HAL_GPIO_Init+0x248>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02b      	beq.n	8004ad2 <HAL_GPIO_Init+0x22a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_GPIO_Init+0x24c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d025      	beq.n	8004ace <HAL_GPIO_Init+0x226>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <HAL_GPIO_Init+0x250>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <HAL_GPIO_Init+0x222>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <HAL_GPIO_Init+0x254>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d019      	beq.n	8004ac6 <HAL_GPIO_Init+0x21e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1a      	ldr	r2, [pc, #104]	@ (8004b00 <HAL_GPIO_Init+0x258>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_GPIO_Init+0x21a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_GPIO_Init+0x25c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00d      	beq.n	8004abe <HAL_GPIO_Init+0x216>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_GPIO_Init+0x260>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <HAL_GPIO_Init+0x212>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a17      	ldr	r2, [pc, #92]	@ (8004b0c <HAL_GPIO_Init+0x264>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_GPIO_Init+0x20e>
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	e02d      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	e02b      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004aba:	2308      	movs	r3, #8
 8004abc:	e029      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004abe:	2307      	movs	r3, #7
 8004ac0:	e027      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	e025      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ac6:	2305      	movs	r3, #5
 8004ac8:	e023      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004aca:	2304      	movs	r3, #4
 8004acc:	e021      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e01f      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e01d      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e01b      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ada:	bf00      	nop
 8004adc:	58000080 	.word	0x58000080
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	58000400 	.word	0x58000400
 8004ae8:	58020000 	.word	0x58020000
 8004aec:	58020400 	.word	0x58020400
 8004af0:	58020800 	.word	0x58020800
 8004af4:	58020c00 	.word	0x58020c00
 8004af8:	58021000 	.word	0x58021000
 8004afc:	58021400 	.word	0x58021400
 8004b00:	58021800 	.word	0x58021800
 8004b04:	58021c00 	.word	0x58021c00
 8004b08:	58022000 	.word	0x58022000
 8004b0c:	58022400 	.word	0x58022400
 8004b10:	2300      	movs	r3, #0
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	f002 0203 	and.w	r2, r2, #3
 8004b18:	0092      	lsls	r2, r2, #2
 8004b1a:	4093      	lsls	r3, r2
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b22:	4938      	ldr	r1, [pc, #224]	@ (8004c04 <HAL_GPIO_Init+0x35c>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f ae63 	bne.w	80048bc <HAL_GPIO_Init+0x14>
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	3724      	adds	r7, #36	@ 0x24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	58000400 	.word	0x58000400

08004c08 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e0b1      	b.n	8004d82 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d101      	bne.n	8004c2e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0a9      	b.n	8004d82 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d101      	bne.n	8004c3e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0a1      	b.n	8004d82 <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc f87a 	bl	8000d54 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c6e:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b40      	cmp	r3, #64	@ 0x40
 8004c76:	d119      	bne.n	8004cac <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b43      	ldr	r3, [pc, #268]	@ (8004d8c <HAL_OPAMP_Init+0x184>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6851      	ldr	r1, [r2, #4]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6892      	ldr	r2, [r2, #8]
 8004c8a:	4311      	orrs	r1, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6952      	ldr	r2, [r2, #20]
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6992      	ldr	r2, [r2, #24]
 8004c96:	4311      	orrs	r1, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6912      	ldr	r2, [r2, #16]
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	69d2      	ldr	r2, [r2, #28]
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d113      	bne.n	8004cdc <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b35      	ldr	r3, [pc, #212]	@ (8004d90 <HAL_OPAMP_Init+0x188>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6851      	ldr	r1, [r2, #4]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6892      	ldr	r2, [r2, #8]
 8004cc6:	4311      	orrs	r1, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6912      	ldr	r2, [r2, #16]
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	69d2      	ldr	r2, [r2, #28]
 8004cd2:	4311      	orrs	r1, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b29      	ldr	r3, [pc, #164]	@ (8004d90 <HAL_OPAMP_Init+0x188>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6851      	ldr	r1, [r2, #4]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6892      	ldr	r2, [r2, #8]
 8004cf6:	4311      	orrs	r1, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68d2      	ldr	r2, [r2, #12]
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6912      	ldr	r2, [r2, #16]
 8004d02:	4311      	orrs	r1, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	69d2      	ldr	r2, [r2, #28]
 8004d08:	4311      	orrs	r1, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d1a:	d127      	bne.n	8004d6c <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d24:	d011      	beq.n	8004d4a <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <HAL_OPAMP_Init+0x18c>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6053      	str	r3, [r2, #4]
 8004d48:	e010      	b.n	8004d6c <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <HAL_OPAMP_Init+0x18c>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d103      	bne.n	8004d80 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	fff83e93 	.word	0xfff83e93
 8004d90:	fffbfe93 	.word	0xfffbfe93
 8004d94:	ffffe0e0 	.word	0xffffe0e0

08004d98 <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
 8004dae:	e01d      	b.n	8004dec <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d102      	bne.n	8004dc2 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e014      	b.n	8004dec <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10c      	bne.n	8004de8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2204      	movs	r2, #4
 8004de2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8004de6:	e001      	b.n	8004dec <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a04      	ldr	r2, [pc, #16]	@ (8004e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0a:	6013      	str	r3, [r2, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	58024800 	.word	0x58024800

08004e1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e24:	4b29      	ldr	r3, [pc, #164]	@ (8004ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	2b06      	cmp	r3, #6
 8004e2e:	d00a      	beq.n	8004e46 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e30:	4b26      	ldr	r3, [pc, #152]	@ (8004ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e040      	b.n	8004ec4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e03e      	b.n	8004ec4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e46:	4b21      	ldr	r3, [pc, #132]	@ (8004ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004e4e:	491f      	ldr	r1, [pc, #124]	@ (8004ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e56:	f7fc f9ff 	bl	8001258 <HAL_GetTick>
 8004e5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e5c:	e009      	b.n	8004e72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e5e:	f7fc f9fb 	bl	8001258 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e6c:	d901      	bls.n	8004e72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e028      	b.n	8004ec4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e72:	4b16      	ldr	r3, [pc, #88]	@ (8004ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e7e:	d1ee      	bne.n	8004e5e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b1e      	cmp	r3, #30
 8004e84:	d008      	beq.n	8004e98 <HAL_PWREx_ConfigSupply+0x7c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e8a:	d005      	beq.n	8004e98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b1d      	cmp	r3, #29
 8004e90:	d002      	beq.n	8004e98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b2d      	cmp	r3, #45	@ 0x2d
 8004e96:	d114      	bne.n	8004ec2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004e98:	f7fc f9de 	bl	8001258 <HAL_GetTick>
 8004e9c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e9e:	e009      	b.n	8004eb4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ea0:	f7fc f9da 	bl	8001258 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eae:	d901      	bls.n	8004eb4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e007      	b.n	8004ec4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004eb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec0:	d1ee      	bne.n	8004ea0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	58024800 	.word	0x58024800

08004ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	@ 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f000 bc1f 	b.w	8005722 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80b3 	beq.w	8005058 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef2:	4b95      	ldr	r3, [pc, #596]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004efc:	4b92      	ldr	r3, [pc, #584]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d007      	beq.n	8004f18 <HAL_RCC_OscConfig+0x48>
 8004f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0a:	2b18      	cmp	r3, #24
 8004f0c:	d112      	bne.n	8004f34 <HAL_RCC_OscConfig+0x64>
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d10d      	bne.n	8004f34 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	4b8b      	ldr	r3, [pc, #556]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8098 	beq.w	8005056 <HAL_RCC_OscConfig+0x186>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 8093 	bne.w	8005056 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e3f6      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3c:	d106      	bne.n	8004f4c <HAL_RCC_OscConfig+0x7c>
 8004f3e:	4b82      	ldr	r3, [pc, #520]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a81      	ldr	r2, [pc, #516]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e058      	b.n	8004ffe <HAL_RCC_OscConfig+0x12e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d112      	bne.n	8004f7a <HAL_RCC_OscConfig+0xaa>
 8004f54:	4b7c      	ldr	r3, [pc, #496]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a7b      	ldr	r2, [pc, #492]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	4b79      	ldr	r3, [pc, #484]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a78      	ldr	r2, [pc, #480]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f66:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4b76      	ldr	r3, [pc, #472]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a75      	ldr	r2, [pc, #468]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	e041      	b.n	8004ffe <HAL_RCC_OscConfig+0x12e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f82:	d112      	bne.n	8004faa <HAL_RCC_OscConfig+0xda>
 8004f84:	4b70      	ldr	r3, [pc, #448]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6f      	ldr	r2, [pc, #444]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b6d      	ldr	r3, [pc, #436]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6c      	ldr	r2, [pc, #432]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f96:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a69      	ldr	r2, [pc, #420]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e029      	b.n	8004ffe <HAL_RCC_OscConfig+0x12e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004fb2:	d112      	bne.n	8004fda <HAL_RCC_OscConfig+0x10a>
 8004fb4:	4b64      	ldr	r3, [pc, #400]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a63      	ldr	r2, [pc, #396]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b61      	ldr	r3, [pc, #388]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a60      	ldr	r2, [pc, #384]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e011      	b.n	8004ffe <HAL_RCC_OscConfig+0x12e>
 8004fda:	4b5b      	ldr	r3, [pc, #364]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a5a      	ldr	r2, [pc, #360]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	4b58      	ldr	r3, [pc, #352]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a57      	ldr	r2, [pc, #348]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004fec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4b55      	ldr	r3, [pc, #340]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a54      	ldr	r2, [pc, #336]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8004ff8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d013      	beq.n	800502e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fc f927 	bl	8001258 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800500e:	f7fc f923 	bl	8001258 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b64      	cmp	r3, #100	@ 0x64
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e380      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005020:	4b49      	ldr	r3, [pc, #292]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x13e>
 800502c:	e014      	b.n	8005058 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fc f913 	bl	8001258 <HAL_GetTick>
 8005032:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005036:	f7fc f90f 	bl	8001258 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b64      	cmp	r3, #100	@ 0x64
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e36c      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005048:	4b3f      	ldr	r3, [pc, #252]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCC_OscConfig+0x166>
 8005054:	e000      	b.n	8005058 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005056:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 808c 	beq.w	800517e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005066:	4b38      	ldr	r3, [pc, #224]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800506e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005070:	4b35      	ldr	r3, [pc, #212]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_RCC_OscConfig+0x1bc>
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	2b18      	cmp	r3, #24
 8005080:	d137      	bne.n	80050f2 <HAL_RCC_OscConfig+0x222>
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d132      	bne.n	80050f2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800508c:	4b2e      	ldr	r3, [pc, #184]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_OscConfig+0x1d4>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e33e      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050a4:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f023 0219 	bic.w	r2, r3, #25
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4925      	ldr	r1, [pc, #148]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7fc f8cf 	bl	8001258 <HAL_GetTick>
 80050ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050be:	f7fc f8cb 	bl	8001258 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e328      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	061b      	lsls	r3, r3, #24
 80050ea:	4917      	ldr	r1, [pc, #92]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f0:	e045      	b.n	800517e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d028      	beq.n	800514c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050fa:	4b13      	ldr	r3, [pc, #76]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 0219 	bic.w	r2, r3, #25
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4910      	ldr	r1, [pc, #64]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fc f8a4 	bl	8001258 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005114:	f7fc f8a0 	bl	8001258 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e2fd      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005126:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	4901      	ldr	r1, [pc, #4]	@ (8005148 <HAL_RCC_OscConfig+0x278>)
 8005142:	4313      	orrs	r3, r2
 8005144:	604b      	str	r3, [r1, #4]
 8005146:	e01a      	b.n	800517e <HAL_RCC_OscConfig+0x2ae>
 8005148:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800514c:	4b97      	ldr	r3, [pc, #604]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a96      	ldr	r2, [pc, #600]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fc f87e 	bl	8001258 <HAL_GetTick>
 800515c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005160:	f7fc f87a 	bl	8001258 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e2d7      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005172:	4b8e      	ldr	r3, [pc, #568]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	d06a      	beq.n	8005260 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518a:	4b88      	ldr	r3, [pc, #544]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005192:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005194:	4b85      	ldr	r3, [pc, #532]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005198:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d007      	beq.n	80051b0 <HAL_RCC_OscConfig+0x2e0>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b18      	cmp	r3, #24
 80051a4:	d11b      	bne.n	80051de <HAL_RCC_OscConfig+0x30e>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d116      	bne.n	80051de <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051b0:	4b7e      	ldr	r3, [pc, #504]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_RCC_OscConfig+0x2f8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	2b80      	cmp	r3, #128	@ 0x80
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e2ac      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051c8:	4b78      	ldr	r3, [pc, #480]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	4975      	ldr	r1, [pc, #468]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051dc:	e040      	b.n	8005260 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d023      	beq.n	800522e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051e6:	4b71      	ldr	r3, [pc, #452]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a70      	ldr	r2, [pc, #448]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80051ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f2:	f7fc f831 	bl	8001258 <HAL_GetTick>
 80051f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051fa:	f7fc f82d 	bl	8001258 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e28a      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800520c:	4b67      	ldr	r3, [pc, #412]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005218:	4b64      	ldr	r3, [pc, #400]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	4961      	ldr	r1, [pc, #388]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005228:	4313      	orrs	r3, r2
 800522a:	60cb      	str	r3, [r1, #12]
 800522c:	e018      	b.n	8005260 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800522e:	4b5f      	ldr	r3, [pc, #380]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a5e      	ldr	r2, [pc, #376]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523a:	f7fc f80d 	bl	8001258 <HAL_GetTick>
 800523e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005242:	f7fc f809 	bl	8001258 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e266      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005254:	4b55      	ldr	r3, [pc, #340]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f0      	bne.n	8005242 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d036      	beq.n	80052da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d019      	beq.n	80052a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005274:	4b4d      	ldr	r3, [pc, #308]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005278:	4a4c      	ldr	r2, [pc, #304]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 800527a:	f043 0301 	orr.w	r3, r3, #1
 800527e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fb ffea 	bl	8001258 <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005288:	f7fb ffe6 	bl	8001258 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e243      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800529a:	4b44      	ldr	r3, [pc, #272]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 800529c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0x3b8>
 80052a6:	e018      	b.n	80052da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a8:	4b40      	ldr	r3, [pc, #256]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80052aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ac:	4a3f      	ldr	r2, [pc, #252]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b4:	f7fb ffd0 	bl	8001258 <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052bc:	f7fb ffcc 	bl	8001258 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e229      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052ce:	4b37      	ldr	r3, [pc, #220]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80052d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d036      	beq.n	8005354 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d019      	beq.n	8005322 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052ee:	4b2f      	ldr	r3, [pc, #188]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2e      	ldr	r2, [pc, #184]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80052f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052fa:	f7fb ffad 	bl	8001258 <HAL_GetTick>
 80052fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005302:	f7fb ffa9 	bl	8001258 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e206      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005314:	4b25      	ldr	r3, [pc, #148]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x432>
 8005320:	e018      	b.n	8005354 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005322:	4b22      	ldr	r3, [pc, #136]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a21      	ldr	r2, [pc, #132]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 8005328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800532c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800532e:	f7fb ff93 	bl	8001258 <HAL_GetTick>
 8005332:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005336:	f7fb ff8f 	bl	8001258 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e1ec      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005348:	4b18      	ldr	r3, [pc, #96]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f0      	bne.n	8005336 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80af 	beq.w	80054c0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005362:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <HAL_RCC_OscConfig+0x4e0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a12      	ldr	r2, [pc, #72]	@ (80053b0 <HAL_RCC_OscConfig+0x4e0>)
 8005368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800536c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800536e:	f7fb ff73 	bl	8001258 <HAL_GetTick>
 8005372:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005376:	f7fb ff6f 	bl	8001258 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b64      	cmp	r3, #100	@ 0x64
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e1cc      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005388:	4b09      	ldr	r3, [pc, #36]	@ (80053b0 <HAL_RCC_OscConfig+0x4e0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d10b      	bne.n	80053b4 <HAL_RCC_OscConfig+0x4e4>
 800539c:	4b03      	ldr	r3, [pc, #12]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a0:	4a02      	ldr	r2, [pc, #8]	@ (80053ac <HAL_RCC_OscConfig+0x4dc>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a8:	e05b      	b.n	8005462 <HAL_RCC_OscConfig+0x592>
 80053aa:	bf00      	nop
 80053ac:	58024400 	.word	0x58024400
 80053b0:	58024800 	.word	0x58024800
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d112      	bne.n	80053e2 <HAL_RCC_OscConfig+0x512>
 80053bc:	4b9d      	ldr	r3, [pc, #628]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c0:	4a9c      	ldr	r2, [pc, #624]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c8:	4b9a      	ldr	r3, [pc, #616]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053cc:	4a99      	ldr	r2, [pc, #612]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d4:	4b97      	ldr	r3, [pc, #604]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d8:	4a96      	ldr	r2, [pc, #600]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053da:	f023 0304 	bic.w	r3, r3, #4
 80053de:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e0:	e03f      	b.n	8005462 <HAL_RCC_OscConfig+0x592>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d112      	bne.n	8005410 <HAL_RCC_OscConfig+0x540>
 80053ea:	4b92      	ldr	r3, [pc, #584]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	4a91      	ldr	r2, [pc, #580]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053f0:	f043 0304 	orr.w	r3, r3, #4
 80053f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f6:	4b8f      	ldr	r3, [pc, #572]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	4a8e      	ldr	r2, [pc, #568]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80053fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005400:	6713      	str	r3, [r2, #112]	@ 0x70
 8005402:	4b8c      	ldr	r3, [pc, #560]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005406:	4a8b      	ldr	r2, [pc, #556]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	6713      	str	r3, [r2, #112]	@ 0x70
 800540e:	e028      	b.n	8005462 <HAL_RCC_OscConfig+0x592>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b85      	cmp	r3, #133	@ 0x85
 8005416:	d112      	bne.n	800543e <HAL_RCC_OscConfig+0x56e>
 8005418:	4b86      	ldr	r3, [pc, #536]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800541a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541c:	4a85      	ldr	r2, [pc, #532]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800541e:	f043 0304 	orr.w	r3, r3, #4
 8005422:	6713      	str	r3, [r2, #112]	@ 0x70
 8005424:	4b83      	ldr	r3, [pc, #524]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	4a82      	ldr	r2, [pc, #520]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800542a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005430:	4b80      	ldr	r3, [pc, #512]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005434:	4a7f      	ldr	r2, [pc, #508]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6713      	str	r3, [r2, #112]	@ 0x70
 800543c:	e011      	b.n	8005462 <HAL_RCC_OscConfig+0x592>
 800543e:	4b7d      	ldr	r3, [pc, #500]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	4a7c      	ldr	r2, [pc, #496]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6713      	str	r3, [r2, #112]	@ 0x70
 800544a:	4b7a      	ldr	r3, [pc, #488]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544e:	4a79      	ldr	r2, [pc, #484]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005450:	f023 0304 	bic.w	r3, r3, #4
 8005454:	6713      	str	r3, [r2, #112]	@ 0x70
 8005456:	4b77      	ldr	r3, [pc, #476]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545a:	4a76      	ldr	r2, [pc, #472]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800545c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005460:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d015      	beq.n	8005496 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546a:	f7fb fef5 	bl	8001258 <HAL_GetTick>
 800546e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005470:	e00a      	b.n	8005488 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fb fef1 	bl	8001258 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e14c      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005488:	4b6a      	ldr	r3, [pc, #424]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ee      	beq.n	8005472 <HAL_RCC_OscConfig+0x5a2>
 8005494:	e014      	b.n	80054c0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fb fedf 	bl	8001258 <HAL_GetTick>
 800549a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fb fedb 	bl	8001258 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e136      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054b4:	4b5f      	ldr	r3, [pc, #380]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ee      	bne.n	800549e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 812b 	beq.w	8005720 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054d2:	2b18      	cmp	r3, #24
 80054d4:	f000 80bb 	beq.w	800564e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	2b02      	cmp	r3, #2
 80054de:	f040 8095 	bne.w	800560c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e2:	4b54      	ldr	r3, [pc, #336]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a53      	ldr	r2, [pc, #332]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80054e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fb feb3 	bl	8001258 <HAL_GetTick>
 80054f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f6:	f7fb feaf 	bl	8001258 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e10c      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005508:	4b4a      	ldr	r3, [pc, #296]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f0      	bne.n	80054f6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005514:	4b47      	ldr	r3, [pc, #284]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005518:	4b47      	ldr	r3, [pc, #284]	@ (8005638 <HAL_RCC_OscConfig+0x768>)
 800551a:	4013      	ands	r3, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005524:	0112      	lsls	r2, r2, #4
 8005526:	430a      	orrs	r2, r1
 8005528:	4942      	ldr	r1, [pc, #264]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800552a:	4313      	orrs	r3, r2
 800552c:	628b      	str	r3, [r1, #40]	@ 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	3b01      	subs	r3, #1
 8005534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553c:	3b01      	subs	r3, #1
 800553e:	025b      	lsls	r3, r3, #9
 8005540:	b29b      	uxth	r3, r3
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005548:	3b01      	subs	r3, #1
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005556:	3b01      	subs	r3, #1
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800555e:	4935      	ldr	r1, [pc, #212]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005560:	4313      	orrs	r3, r2
 8005562:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005564:	4b33      	ldr	r3, [pc, #204]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	4a32      	ldr	r2, [pc, #200]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005570:	4b30      	ldr	r3, [pc, #192]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005574:	4b31      	ldr	r3, [pc, #196]	@ (800563c <HAL_RCC_OscConfig+0x76c>)
 8005576:	4013      	ands	r3, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800557c:	00d2      	lsls	r2, r2, #3
 800557e:	492d      	ldr	r1, [pc, #180]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005580:	4313      	orrs	r3, r2
 8005582:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005584:	4b2b      	ldr	r3, [pc, #172]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005588:	f023 020c 	bic.w	r2, r3, #12
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	4928      	ldr	r1, [pc, #160]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005592:	4313      	orrs	r3, r2
 8005594:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005596:	4b27      	ldr	r3, [pc, #156]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	f023 0202 	bic.w	r2, r3, #2
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	4924      	ldr	r1, [pc, #144]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055a8:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80055cc:	4b19      	ldr	r3, [pc, #100]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	4a18      	ldr	r2, [pc, #96]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d8:	4b16      	ldr	r3, [pc, #88]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 80055de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fb fe38 	bl	8001258 <HAL_GetTick>
 80055e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fb fe34 	bl	8001258 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e091      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x71c>
 800560a:	e089      	b.n	8005720 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560c:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a08      	ldr	r2, [pc, #32]	@ (8005634 <HAL_RCC_OscConfig+0x764>)
 8005612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fb fe1e 	bl	8001258 <HAL_GetTick>
 800561c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800561e:	e00f      	b.n	8005640 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fb fe1a 	bl	8001258 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d908      	bls.n	8005640 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e077      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
 8005632:	bf00      	nop
 8005634:	58024400 	.word	0x58024400
 8005638:	fffffc0c 	.word	0xfffffc0c
 800563c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005640:	4b3a      	ldr	r3, [pc, #232]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e9      	bne.n	8005620 <HAL_RCC_OscConfig+0x750>
 800564c:	e068      	b.n	8005720 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800564e:	4b37      	ldr	r3, [pc, #220]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005654:	4b35      	ldr	r3, [pc, #212]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	2b01      	cmp	r3, #1
 8005660:	d031      	beq.n	80056c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f003 0203 	and.w	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d12a      	bne.n	80056c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567c:	429a      	cmp	r2, r3
 800567e:	d122      	bne.n	80056c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800568c:	429a      	cmp	r2, r3
 800568e:	d11a      	bne.n	80056c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	0a5b      	lsrs	r3, r3, #9
 8005694:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d111      	bne.n	80056c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d108      	bne.n	80056c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	0e1b      	lsrs	r3, r3, #24
 80056b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d001      	beq.n	80056ca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e02b      	b.n	8005722 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80056ca:	4b18      	ldr	r3, [pc, #96]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 80056cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ce:	08db      	lsrs	r3, r3, #3
 80056d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056d4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d01f      	beq.n	8005720 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80056e0:	4b12      	ldr	r3, [pc, #72]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	4a11      	ldr	r2, [pc, #68]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056ec:	f7fb fdb4 	bl	8001258 <HAL_GetTick>
 80056f0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80056f2:	bf00      	nop
 80056f4:	f7fb fdb0 	bl	8001258 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d0f9      	beq.n	80056f4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005700:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 8005702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005704:	4b0a      	ldr	r3, [pc, #40]	@ (8005730 <HAL_RCC_OscConfig+0x860>)
 8005706:	4013      	ands	r3, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800570c:	00d2      	lsls	r2, r2, #3
 800570e:	4907      	ldr	r1, [pc, #28]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 8005710:	4313      	orrs	r3, r2
 8005712:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005714:	4b05      	ldr	r3, [pc, #20]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	4a04      	ldr	r2, [pc, #16]	@ (800572c <HAL_RCC_OscConfig+0x85c>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3730      	adds	r7, #48	@ 0x30
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	58024400 	.word	0x58024400
 8005730:	ffff0007 	.word	0xffff0007

08005734 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e19c      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005748:	4b8a      	ldr	r3, [pc, #552]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d910      	bls.n	8005778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b87      	ldr	r3, [pc, #540]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 020f 	bic.w	r2, r3, #15
 800575e:	4985      	ldr	r1, [pc, #532]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b83      	ldr	r3, [pc, #524]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e184      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d010      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	4b7b      	ldr	r3, [pc, #492]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005790:	429a      	cmp	r2, r3
 8005792:	d908      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005794:	4b78      	ldr	r3, [pc, #480]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	4975      	ldr	r1, [pc, #468]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	4b70      	ldr	r3, [pc, #448]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057be:	429a      	cmp	r2, r3
 80057c0:	d908      	bls.n	80057d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	496a      	ldr	r1, [pc, #424]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	4b64      	ldr	r3, [pc, #400]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d908      	bls.n	8005802 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057f0:	4b61      	ldr	r3, [pc, #388]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	495e      	ldr	r1, [pc, #376]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	4b59      	ldr	r3, [pc, #356]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800581a:	429a      	cmp	r2, r3
 800581c:	d908      	bls.n	8005830 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800581e:	4b56      	ldr	r3, [pc, #344]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4953      	ldr	r1, [pc, #332]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800582c:	4313      	orrs	r3, r2
 800582e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d010      	beq.n	800585e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	4b4d      	ldr	r3, [pc, #308]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	429a      	cmp	r2, r3
 800584a:	d908      	bls.n	800585e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800584c:	4b4a      	ldr	r3, [pc, #296]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f023 020f 	bic.w	r2, r3, #15
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4947      	ldr	r1, [pc, #284]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800585a:	4313      	orrs	r3, r2
 800585c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d055      	beq.n	8005916 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800586a:	4b43      	ldr	r3, [pc, #268]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4940      	ldr	r1, [pc, #256]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005878:	4313      	orrs	r3, r2
 800587a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d107      	bne.n	8005894 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005884:	4b3c      	ldr	r3, [pc, #240]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d121      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0f6      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d107      	bne.n	80058ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800589c:	4b36      	ldr	r3, [pc, #216]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d115      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0ea      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d107      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058b4:	4b30      	ldr	r3, [pc, #192]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0de      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0d6      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058d4:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f023 0207 	bic.w	r2, r3, #7
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4925      	ldr	r1, [pc, #148]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e6:	f7fb fcb7 	bl	8001258 <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ec:	e00a      	b.n	8005904 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fb fcb3 	bl	8001258 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e0be      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005904:	4b1c      	ldr	r3, [pc, #112]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	429a      	cmp	r2, r3
 8005914:	d1eb      	bne.n	80058ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d010      	beq.n	8005944 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	429a      	cmp	r2, r3
 8005930:	d208      	bcs.n	8005944 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005932:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f023 020f 	bic.w	r2, r3, #15
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	490e      	ldr	r1, [pc, #56]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005940:	4313      	orrs	r3, r2
 8005942:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d214      	bcs.n	800597c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005952:	4b08      	ldr	r3, [pc, #32]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 020f 	bic.w	r2, r3, #15
 800595a:	4906      	ldr	r1, [pc, #24]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	4313      	orrs	r3, r2
 8005960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005962:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e086      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
 8005974:	52002000 	.word	0x52002000
 8005978:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d010      	beq.n	80059aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005994:	429a      	cmp	r2, r3
 8005996:	d208      	bcs.n	80059aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005998:	4b3c      	ldr	r3, [pc, #240]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4939      	ldr	r1, [pc, #228]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d010      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	4b34      	ldr	r3, [pc, #208]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d208      	bcs.n	80059d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059c6:	4b31      	ldr	r3, [pc, #196]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	492e      	ldr	r1, [pc, #184]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d010      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	4b28      	ldr	r3, [pc, #160]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d208      	bcs.n	8005a06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059f4:	4b25      	ldr	r3, [pc, #148]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	4922      	ldr	r1, [pc, #136]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d010      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d208      	bcs.n	8005a34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a22:	4b1a      	ldr	r3, [pc, #104]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4917      	ldr	r1, [pc, #92]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005a34:	f000 f89e 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	4b14      	ldr	r3, [pc, #80]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	4912      	ldr	r1, [pc, #72]	@ (8005a90 <HAL_RCC_ClockConfig+0x35c>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a50:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005a52:	4b0e      	ldr	r3, [pc, #56]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a90 <HAL_RCC_ClockConfig+0x35c>)
 8005a5c:	5cd3      	ldrb	r3, [r2, r3]
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
 8005a68:	4a0a      	ldr	r2, [pc, #40]	@ (8005a94 <HAL_RCC_ClockConfig+0x360>)
 8005a6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a98 <HAL_RCC_ClockConfig+0x364>)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <HAL_RCC_ClockConfig+0x368>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fb fba4 	bl	80011c4 <HAL_InitTick>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	0800ba80 	.word	0x0800ba80
 8005a94:	240023f4 	.word	0x240023f4
 8005a98:	240023f0 	.word	0x240023f0
 8005a9c:	240023f8 	.word	0x240023f8

08005aa0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08c      	sub	sp, #48	@ 0x30
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d12a      	bne.n	8005b08 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005ab4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005ac2:	4b29      	ldr	r3, [pc, #164]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ada:	2303      	movs	r3, #3
 8005adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005ae6:	f107 031c 	add.w	r3, r7, #28
 8005aea:	4619      	mov	r1, r3
 8005aec:	481f      	ldr	r0, [pc, #124]	@ (8005b6c <HAL_RCC_MCOConfig+0xcc>)
 8005aee:	f7fe fedb 	bl	80048a8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005af2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	430b      	orrs	r3, r1
 8005b00:	4919      	ldr	r1, [pc, #100]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005b06:	e02a      	b.n	8005b5e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005b08:	4b17      	ldr	r3, [pc, #92]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b0e:	4a16      	ldr	r2, [pc, #88]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005b18:	4b13      	ldr	r3, [pc, #76]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b30:	2303      	movs	r3, #3
 8005b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005b3c:	f107 031c 	add.w	r3, r7, #28
 8005b40:	4619      	mov	r1, r3
 8005b42:	480b      	ldr	r0, [pc, #44]	@ (8005b70 <HAL_RCC_MCOConfig+0xd0>)
 8005b44:	f7fe feb0 	bl	80048a8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005b48:	4b07      	ldr	r3, [pc, #28]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	01d9      	lsls	r1, r3, #7
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	430b      	orrs	r3, r1
 8005b58:	4903      	ldr	r1, [pc, #12]	@ (8005b68 <HAL_RCC_MCOConfig+0xc8>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	610b      	str	r3, [r1, #16]
}
 8005b5e:	bf00      	nop
 8005b60:	3730      	adds	r7, #48	@ 0x30
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	58024400 	.word	0x58024400
 8005b6c:	58020000 	.word	0x58020000
 8005b70:	58020800 	.word	0x58020800

08005b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	@ 0x24
 8005b78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b7a:	4bb3      	ldr	r3, [pc, #716]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b82:	2b18      	cmp	r3, #24
 8005b84:	f200 8155 	bhi.w	8005e32 <HAL_RCC_GetSysClockFreq+0x2be>
 8005b88:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bf5 	.word	0x08005bf5
 8005b94:	08005e33 	.word	0x08005e33
 8005b98:	08005e33 	.word	0x08005e33
 8005b9c:	08005e33 	.word	0x08005e33
 8005ba0:	08005e33 	.word	0x08005e33
 8005ba4:	08005e33 	.word	0x08005e33
 8005ba8:	08005e33 	.word	0x08005e33
 8005bac:	08005e33 	.word	0x08005e33
 8005bb0:	08005c1b 	.word	0x08005c1b
 8005bb4:	08005e33 	.word	0x08005e33
 8005bb8:	08005e33 	.word	0x08005e33
 8005bbc:	08005e33 	.word	0x08005e33
 8005bc0:	08005e33 	.word	0x08005e33
 8005bc4:	08005e33 	.word	0x08005e33
 8005bc8:	08005e33 	.word	0x08005e33
 8005bcc:	08005e33 	.word	0x08005e33
 8005bd0:	08005c21 	.word	0x08005c21
 8005bd4:	08005e33 	.word	0x08005e33
 8005bd8:	08005e33 	.word	0x08005e33
 8005bdc:	08005e33 	.word	0x08005e33
 8005be0:	08005e33 	.word	0x08005e33
 8005be4:	08005e33 	.word	0x08005e33
 8005be8:	08005e33 	.word	0x08005e33
 8005bec:	08005e33 	.word	0x08005e33
 8005bf0:	08005c27 	.word	0x08005c27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bf4:	4b94      	ldr	r3, [pc, #592]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c00:	4b91      	ldr	r3, [pc, #580]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	08db      	lsrs	r3, r3, #3
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	4a90      	ldr	r2, [pc, #576]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c12:	e111      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c14:	4b8d      	ldr	r3, [pc, #564]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c16:	61bb      	str	r3, [r7, #24]
      break;
 8005c18:	e10e      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c1c:	61bb      	str	r3, [r7, #24]
      break;
 8005c1e:	e10b      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c20:	4b8c      	ldr	r3, [pc, #560]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c22:	61bb      	str	r3, [r7, #24]
      break;
 8005c24:	e108      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c26:	4b88      	ldr	r3, [pc, #544]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c30:	4b85      	ldr	r3, [pc, #532]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c3c:	4b82      	ldr	r3, [pc, #520]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c46:	4b80      	ldr	r3, [pc, #512]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4a:	08db      	lsrs	r3, r3, #3
 8005c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80e1 	beq.w	8005e2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	f000 8083 	beq.w	8005d78 <HAL_RCC_GetSysClockFreq+0x204>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f200 80a1 	bhi.w	8005dbc <HAL_RCC_GetSysClockFreq+0x248>
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0x114>
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d056      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c86:	e099      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c88:	4b6f      	ldr	r3, [pc, #444]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02d      	beq.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c94:	4b6c      	ldr	r3, [pc, #432]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	08db      	lsrs	r3, r3, #3
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	4a6b      	ldr	r2, [pc, #428]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b62      	ldr	r3, [pc, #392]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005cee:	e087      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005e5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d02:	4b51      	ldr	r3, [pc, #324]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d32:	e065      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b40      	ldr	r3, [pc, #256]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d76:	e043      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005e64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dba:	e021      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dce:	4b1e      	ldr	r3, [pc, #120]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8005de2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e00:	4b11      	ldr	r3, [pc, #68]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e04:	0a5b      	lsrs	r3, r3, #9
 8005e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	ee07 3a90 	vmov	s15, r3
 8005e14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e24:	ee17 3a90 	vmov	r3, s15
 8005e28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e2a:	e005      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61bb      	str	r3, [r7, #24]
      break;
 8005e30:	e002      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e32:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e34:	61bb      	str	r3, [r7, #24]
      break;
 8005e36:	bf00      	nop
  }

  return sysclockfreq;
 8005e38:	69bb      	ldr	r3, [r7, #24]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3724      	adds	r7, #36	@ 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	03d09000 	.word	0x03d09000
 8005e50:	003d0900 	.word	0x003d0900
 8005e54:	007a1200 	.word	0x007a1200
 8005e58:	46000000 	.word	0x46000000
 8005e5c:	4c742400 	.word	0x4c742400
 8005e60:	4a742400 	.word	0x4a742400
 8005e64:	4af42400 	.word	0x4af42400

08005e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005e6e:	f7ff fe81 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8005e72:	4602      	mov	r2, r0
 8005e74:	4b10      	ldr	r3, [pc, #64]	@ (8005eb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	490f      	ldr	r1, [pc, #60]	@ (8005ebc <HAL_RCC_GetHCLKFreq+0x54>)
 8005e80:	5ccb      	ldrb	r3, [r1, r3]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	4a09      	ldr	r2, [pc, #36]	@ (8005ebc <HAL_RCC_GetHCLKFreq+0x54>)
 8005e96:	5cd3      	ldrb	r3, [r2, r3]
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea2:	4a07      	ldr	r2, [pc, #28]	@ (8005ec0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ea4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ea6:	4a07      	ldr	r2, [pc, #28]	@ (8005ec4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	0800ba80 	.word	0x0800ba80
 8005ec0:	240023f4 	.word	0x240023f4
 8005ec4:	240023f0 	.word	0x240023f0

08005ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005ecc:	f7ff ffcc 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	4904      	ldr	r1, [pc, #16]	@ (8005ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ede:	5ccb      	ldrb	r3, [r1, r3]
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	0800ba80 	.word	0x0800ba80

08005ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005ef8:	f7ff ffb6 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005efc:	4602      	mov	r2, r0
 8005efe:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	4904      	ldr	r1, [pc, #16]	@ (8005f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f0a:	5ccb      	ldrb	r3, [r1, r3]
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	0800ba80 	.word	0x0800ba80

08005f20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f24:	b0c8      	sub	sp, #288	@ 0x120
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005f44:	2500      	movs	r5, #0
 8005f46:	ea54 0305 	orrs.w	r3, r4, r5
 8005f4a:	d049      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f56:	d02f      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005f58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f5c:	d828      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f62:	d01a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f68:	d822      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f72:	d007      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f74:	e01c      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f76:	4ba7      	ldr	r3, [pc, #668]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	4aa6      	ldr	r2, [pc, #664]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f82:	e01a      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fc99 	bl	80078c4 <RCCEx_PLL2_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f98:	e00f      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f9e:	3328      	adds	r3, #40	@ 0x28
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fd40 	bl	8007a28 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fae:	e004      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fb6:	e000      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10a      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005fc2:	4b94      	ldr	r3, [pc, #592]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fd0:	4a90      	ldr	r2, [pc, #576]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fd6:	e003      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005fec:	f04f 0900 	mov.w	r9, #0
 8005ff0:	ea58 0309 	orrs.w	r3, r8, r9
 8005ff4:	d047      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d82a      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006000:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800601d 	.word	0x0800601d
 800600c:	0800602b 	.word	0x0800602b
 8006010:	08006041 	.word	0x08006041
 8006014:	0800605f 	.word	0x0800605f
 8006018:	0800605f 	.word	0x0800605f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601c:	4b7d      	ldr	r3, [pc, #500]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	4a7c      	ldr	r2, [pc, #496]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006028:	e01a      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800602a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800602e:	3308      	adds	r3, #8
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f001 fc46 	bl	80078c4 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800603e:	e00f      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006044:	3328      	adds	r3, #40	@ 0x28
 8006046:	2100      	movs	r1, #0
 8006048:	4618      	mov	r0, r3
 800604a:	f001 fced 	bl	8007a28 <RCCEx_PLL3_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006054:	e004      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800605c:	e000      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800605e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006060:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006068:	4b6a      	ldr	r3, [pc, #424]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800606a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800606c:	f023 0107 	bic.w	r1, r3, #7
 8006070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006076:	4a67      	ldr	r2, [pc, #412]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006078:	430b      	orrs	r3, r1
 800607a:	6513      	str	r3, [r2, #80]	@ 0x50
 800607c:	e003      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006082:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006092:	f04f 0b00 	mov.w	fp, #0
 8006096:	ea5a 030b 	orrs.w	r3, sl, fp
 800609a:	d054      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800609c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80060a6:	d036      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80060a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80060ac:	d82f      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b2:	d032      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b8:	d829      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80060bc:	d02f      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80060be:	2bc0      	cmp	r3, #192	@ 0xc0
 80060c0:	d825      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060c2:	2b80      	cmp	r3, #128	@ 0x80
 80060c4:	d018      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80060c6:	2b80      	cmp	r3, #128	@ 0x80
 80060c8:	d821      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	d007      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80060d2:	e01c      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	4a4e      	ldr	r2, [pc, #312]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80060e0:	e01e      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060e6:	3308      	adds	r3, #8
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fbea 	bl	80078c4 <RCCEx_PLL2_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80060f6:	e013      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060fc:	3328      	adds	r3, #40	@ 0x28
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f001 fc91 	bl	8007a28 <RCCEx_PLL3_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800610c:	e008      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006114:	e004      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006116:	bf00      	nop
 8006118:	e002      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800611e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006128:	4b3a      	ldr	r3, [pc, #232]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800612a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006136:	4a37      	ldr	r2, [pc, #220]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006138:	430b      	orrs	r3, r1
 800613a:	6513      	str	r3, [r2, #80]	@ 0x50
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006142:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006152:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006156:	2300      	movs	r3, #0
 8006158:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800615c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006160:	460b      	mov	r3, r1
 8006162:	4313      	orrs	r3, r2
 8006164:	d05c      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800616a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800616c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006170:	d03b      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006172:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006176:	d834      	bhi.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800617c:	d037      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800617e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006182:	d82e      	bhi.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006184:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006188:	d033      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800618a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800618e:	d828      	bhi.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006194:	d01a      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800619a:	d822      	bhi.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80061a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a4:	d007      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80061a6:	e01c      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ac:	4a19      	ldr	r2, [pc, #100]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061b4:	e01e      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ba:	3308      	adds	r3, #8
 80061bc:	2100      	movs	r1, #0
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 fb80 	bl	80078c4 <RCCEx_PLL2_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061ca:	e013      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061d0:	3328      	adds	r3, #40	@ 0x28
 80061d2:	2100      	movs	r1, #0
 80061d4:	4618      	mov	r0, r3
 80061d6:	f001 fc27 	bl	8007a28 <RCCEx_PLL3_Config>
 80061da:	4603      	mov	r3, r0
 80061dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061e0:	e008      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061e8:	e004      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061ea:	bf00      	nop
 80061ec:	e002      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10d      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80061fc:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006200:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800620a:	4a02      	ldr	r2, [pc, #8]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800620c:	430b      	orrs	r3, r1
 800620e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006210:	e006      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006212:	bf00      	nop
 8006214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800621c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800622c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006230:	2300      	movs	r3, #0
 8006232:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006236:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800623a:	460b      	mov	r3, r1
 800623c:	4313      	orrs	r3, r2
 800623e:	d03a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006246:	2b30      	cmp	r3, #48	@ 0x30
 8006248:	d01f      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800624a:	2b30      	cmp	r3, #48	@ 0x30
 800624c:	d819      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800624e:	2b20      	cmp	r3, #32
 8006250:	d00c      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006252:	2b20      	cmp	r3, #32
 8006254:	d815      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d019      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800625a:	2b10      	cmp	r3, #16
 800625c:	d111      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625e:	4bae      	ldr	r3, [pc, #696]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	4aad      	ldr	r2, [pc, #692]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800626a:	e011      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800626c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006270:	3308      	adds	r3, #8
 8006272:	2102      	movs	r1, #2
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fb25 	bl	80078c4 <RCCEx_PLL2_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006280:	e006      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006288:	e002      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800628e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006290:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006298:	4b9f      	ldr	r3, [pc, #636]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800629a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80062a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062a6:	4a9c      	ldr	r2, [pc, #624]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80062c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062c6:	2300      	movs	r3, #0
 80062c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80062cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d051      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062e0:	d035      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80062e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062e6:	d82e      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80062e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062ec:	d031      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80062ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062f2:	d828      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80062f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f8:	d01a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80062fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062fe:	d822      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006308:	d007      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800630a:	e01c      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630c:	4b82      	ldr	r3, [pc, #520]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	4a81      	ldr	r2, [pc, #516]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006318:	e01c      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800631a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800631e:	3308      	adds	r3, #8
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f001 face 	bl	80078c4 <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800632e:	e011      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006334:	3328      	adds	r3, #40	@ 0x28
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fb75 	bl	8007a28 <RCCEx_PLL3_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006344:	e006      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800634c:	e002      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800635c:	4b6e      	ldr	r3, [pc, #440]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800635e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006360:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800636a:	4a6b      	ldr	r2, [pc, #428]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800636c:	430b      	orrs	r3, r1
 800636e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006370:	e003      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006372:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006376:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800637a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006386:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800638a:	2300      	movs	r3, #0
 800638c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006390:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006394:	460b      	mov	r3, r1
 8006396:	4313      	orrs	r3, r2
 8006398:	d053      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800639a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800639e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063a4:	d033      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80063a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063aa:	d82c      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063b0:	d02f      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80063b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063b6:	d826      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063bc:	d02b      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063c2:	d820      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063c8:	d012      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80063ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ce:	d81a      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d022      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d8:	d115      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063de:	3308      	adds	r3, #8
 80063e0:	2101      	movs	r1, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fa6e 	bl	80078c4 <RCCEx_PLL2_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063ee:	e015      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f4:	3328      	adds	r3, #40	@ 0x28
 80063f6:	2101      	movs	r1, #1
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 fb15 	bl	8007a28 <RCCEx_PLL3_Config>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006404:	e00a      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800640c:	e006      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800641a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006424:	4b3c      	ldr	r3, [pc, #240]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006428:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800642c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006432:	4a39      	ldr	r2, [pc, #228]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006434:	430b      	orrs	r3, r1
 8006436:	6513      	str	r3, [r2, #80]	@ 0x50
 8006438:	e003      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800643e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800644e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006452:	2300      	movs	r3, #0
 8006454:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006458:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800645c:	460b      	mov	r3, r1
 800645e:	4313      	orrs	r3, r2
 8006460:	d060      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800646a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800646e:	d039      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006470:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006474:	d832      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800647a:	d035      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800647c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006480:	d82c      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006486:	d031      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800648c:	d826      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800648e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006492:	d02d      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006494:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006498:	d820      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800649a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800649e:	d012      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80064a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064a4:	d81a      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d024      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80064aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ae:	d115      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064b4:	3308      	adds	r3, #8
 80064b6:	2101      	movs	r1, #1
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 fa03 	bl	80078c4 <RCCEx_PLL2_Config>
 80064be:	4603      	mov	r3, r0
 80064c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064c4:	e017      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ca:	3328      	adds	r3, #40	@ 0x28
 80064cc:	2101      	movs	r1, #1
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 faaa 	bl	8007a28 <RCCEx_PLL3_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064da:	e00c      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064e2:	e008      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064e4:	bf00      	nop
 80064e6:	e006      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064e8:	bf00      	nop
 80064ea:	e004      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064ec:	bf00      	nop
 80064ee:	e002      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064f0:	bf00      	nop
 80064f2:	e000      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10e      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064fe:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006502:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800650a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800650e:	4a02      	ldr	r2, [pc, #8]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006510:	430b      	orrs	r3, r1
 8006512:	6593      	str	r3, [r2, #88]	@ 0x58
 8006514:	e006      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006516:	bf00      	nop
 8006518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006520:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006534:	2300      	movs	r3, #0
 8006536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800653a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800653e:	460b      	mov	r3, r1
 8006540:	4313      	orrs	r3, r2
 8006542:	d037      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800654a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800654e:	d00e      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006554:	d816      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d018      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800655a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800655e:	d111      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006560:	4bc4      	ldr	r3, [pc, #784]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006564:	4ac3      	ldr	r2, [pc, #780]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800656a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800656c:	e00f      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800656e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006572:	3308      	adds	r3, #8
 8006574:	2101      	movs	r1, #1
 8006576:	4618      	mov	r0, r3
 8006578:	f001 f9a4 	bl	80078c4 <RCCEx_PLL2_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006582:	e004      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800658a:	e000      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800658c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006596:	4bb7      	ldr	r3, [pc, #732]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800659a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800659e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065a4:	4ab3      	ldr	r2, [pc, #716]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80065aa:	e003      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80065c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065c4:	2300      	movs	r3, #0
 80065c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4313      	orrs	r3, r2
 80065d2:	d039      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d81c      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80065de:	a201      	add	r2, pc, #4	@ (adr r2, 80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006621 	.word	0x08006621
 80065e8:	080065f5 	.word	0x080065f5
 80065ec:	08006603 	.word	0x08006603
 80065f0:	08006621 	.word	0x08006621
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f4:	4b9f      	ldr	r3, [pc, #636]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	4a9e      	ldr	r2, [pc, #632]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006600:	e00f      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006606:	3308      	adds	r3, #8
 8006608:	2102      	movs	r1, #2
 800660a:	4618      	mov	r0, r3
 800660c:	f001 f95a 	bl	80078c4 <RCCEx_PLL2_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006616:	e004      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800661e:	e000      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006622:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800662a:	4b92      	ldr	r3, [pc, #584]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800662c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662e:	f023 0103 	bic.w	r1, r3, #3
 8006632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006638:	4a8e      	ldr	r2, [pc, #568]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800663a:	430b      	orrs	r3, r1
 800663c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800663e:	e003      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006644:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006654:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006658:	2300      	movs	r3, #0
 800665a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800665e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006662:	460b      	mov	r3, r1
 8006664:	4313      	orrs	r3, r2
 8006666:	f000 8099 	beq.w	800679c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800666a:	4b83      	ldr	r3, [pc, #524]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a82      	ldr	r2, [pc, #520]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006674:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006676:	f7fa fdef 	bl	8001258 <HAL_GetTick>
 800667a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800667e:	e00b      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006680:	f7fa fdea 	bl	8001258 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b64      	cmp	r3, #100	@ 0x64
 800668e:	d903      	bls.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006696:	e005      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006698:	4b77      	ldr	r3, [pc, #476]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0ed      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80066a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d173      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066ac:	4b71      	ldr	r3, [pc, #452]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066b8:	4053      	eors	r3, r2
 80066ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d015      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066ce:	4b69      	ldr	r3, [pc, #420]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d2:	4a68      	ldr	r2, [pc, #416]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066da:	4b66      	ldr	r3, [pc, #408]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066de:	4a65      	ldr	r2, [pc, #404]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066e6:	4a63      	ldr	r2, [pc, #396]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066fa:	d118      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fc:	f7fa fdac 	bl	8001258 <HAL_GetTick>
 8006700:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006704:	e00d      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006706:	f7fa fda7 	bl	8001258 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006710:	1ad2      	subs	r2, r2, r3
 8006712:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006716:	429a      	cmp	r2, r3
 8006718:	d903      	bls.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006720:	e005      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006722:	4b54      	ldr	r3, [pc, #336]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0eb      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800672e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006732:	2b00      	cmp	r3, #0
 8006734:	d129      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800673a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800673e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006746:	d10e      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006748:	4b4a      	ldr	r3, [pc, #296]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006754:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006758:	091a      	lsrs	r2, r3, #4
 800675a:	4b48      	ldr	r3, [pc, #288]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800675c:	4013      	ands	r3, r2
 800675e:	4a45      	ldr	r2, [pc, #276]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006760:	430b      	orrs	r3, r1
 8006762:	6113      	str	r3, [r2, #16]
 8006764:	e005      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006766:	4b43      	ldr	r3, [pc, #268]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	4a42      	ldr	r2, [pc, #264]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800676c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006770:	6113      	str	r3, [r2, #16]
 8006772:	4b40      	ldr	r3, [pc, #256]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006774:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800677a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800677e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006782:	4a3c      	ldr	r2, [pc, #240]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006784:	430b      	orrs	r3, r1
 8006786:	6713      	str	r3, [r2, #112]	@ 0x70
 8006788:	e008      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800678a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800678e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006792:	e003      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006798:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800679c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f002 0301 	and.w	r3, r2, #1
 80067a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067ac:	2300      	movs	r3, #0
 80067ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f000 8090 	beq.w	80068de <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067c6:	2b28      	cmp	r3, #40	@ 0x28
 80067c8:	d870      	bhi.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80067ca:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	080068b5 	.word	0x080068b5
 80067d4:	080068ad 	.word	0x080068ad
 80067d8:	080068ad 	.word	0x080068ad
 80067dc:	080068ad 	.word	0x080068ad
 80067e0:	080068ad 	.word	0x080068ad
 80067e4:	080068ad 	.word	0x080068ad
 80067e8:	080068ad 	.word	0x080068ad
 80067ec:	080068ad 	.word	0x080068ad
 80067f0:	08006881 	.word	0x08006881
 80067f4:	080068ad 	.word	0x080068ad
 80067f8:	080068ad 	.word	0x080068ad
 80067fc:	080068ad 	.word	0x080068ad
 8006800:	080068ad 	.word	0x080068ad
 8006804:	080068ad 	.word	0x080068ad
 8006808:	080068ad 	.word	0x080068ad
 800680c:	080068ad 	.word	0x080068ad
 8006810:	08006897 	.word	0x08006897
 8006814:	080068ad 	.word	0x080068ad
 8006818:	080068ad 	.word	0x080068ad
 800681c:	080068ad 	.word	0x080068ad
 8006820:	080068ad 	.word	0x080068ad
 8006824:	080068ad 	.word	0x080068ad
 8006828:	080068ad 	.word	0x080068ad
 800682c:	080068ad 	.word	0x080068ad
 8006830:	080068b5 	.word	0x080068b5
 8006834:	080068ad 	.word	0x080068ad
 8006838:	080068ad 	.word	0x080068ad
 800683c:	080068ad 	.word	0x080068ad
 8006840:	080068ad 	.word	0x080068ad
 8006844:	080068ad 	.word	0x080068ad
 8006848:	080068ad 	.word	0x080068ad
 800684c:	080068ad 	.word	0x080068ad
 8006850:	080068b5 	.word	0x080068b5
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068ad 	.word	0x080068ad
 800685c:	080068ad 	.word	0x080068ad
 8006860:	080068ad 	.word	0x080068ad
 8006864:	080068ad 	.word	0x080068ad
 8006868:	080068ad 	.word	0x080068ad
 800686c:	080068ad 	.word	0x080068ad
 8006870:	080068b5 	.word	0x080068b5
 8006874:	58024400 	.word	0x58024400
 8006878:	58024800 	.word	0x58024800
 800687c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006884:	3308      	adds	r3, #8
 8006886:	2101      	movs	r1, #1
 8006888:	4618      	mov	r0, r3
 800688a:	f001 f81b 	bl	80078c4 <RCCEx_PLL2_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006894:	e00f      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689a:	3328      	adds	r3, #40	@ 0x28
 800689c:	2101      	movs	r1, #1
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 f8c2 	bl	8007a28 <RCCEx_PLL3_Config>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068aa:	e004      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068b2:	e000      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80068b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10b      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068be:	4bc0      	ldr	r3, [pc, #768]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80068c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ce:	4abc      	ldr	r2, [pc, #752]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80068d4:	e003      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f002 0302 	and.w	r3, r2, #2
 80068ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068ee:	2300      	movs	r3, #0
 80068f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80068f4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80068f8:	460b      	mov	r3, r1
 80068fa:	4313      	orrs	r3, r2
 80068fc:	d043      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006906:	2b05      	cmp	r3, #5
 8006908:	d824      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800690a:	a201      	add	r2, pc, #4	@ (adr r2, 8006910 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	0800695d 	.word	0x0800695d
 8006914:	08006929 	.word	0x08006929
 8006918:	0800693f 	.word	0x0800693f
 800691c:	0800695d 	.word	0x0800695d
 8006920:	0800695d 	.word	0x0800695d
 8006924:	0800695d 	.word	0x0800695d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800692c:	3308      	adds	r3, #8
 800692e:	2101      	movs	r1, #1
 8006930:	4618      	mov	r0, r3
 8006932:	f000 ffc7 	bl	80078c4 <RCCEx_PLL2_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800693c:	e00f      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800693e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006942:	3328      	adds	r3, #40	@ 0x28
 8006944:	2101      	movs	r1, #1
 8006946:	4618      	mov	r0, r3
 8006948:	f001 f86e 	bl	8007a28 <RCCEx_PLL3_Config>
 800694c:	4603      	mov	r3, r0
 800694e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006952:	e004      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800695a:	e000      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800695c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800695e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006966:	4b96      	ldr	r3, [pc, #600]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800696a:	f023 0107 	bic.w	r1, r3, #7
 800696e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006976:	4a92      	ldr	r2, [pc, #584]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006978:	430b      	orrs	r3, r1
 800697a:	6553      	str	r3, [r2, #84]	@ 0x54
 800697c:	e003      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006982:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f002 0304 	and.w	r3, r2, #4
 8006992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006996:	2300      	movs	r3, #0
 8006998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800699c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4313      	orrs	r3, r2
 80069a4:	d043      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80069a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d824      	bhi.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80069b2:	a201      	add	r2, pc, #4	@ (adr r2, 80069b8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	08006a05 	.word	0x08006a05
 80069bc:	080069d1 	.word	0x080069d1
 80069c0:	080069e7 	.word	0x080069e7
 80069c4:	08006a05 	.word	0x08006a05
 80069c8:	08006a05 	.word	0x08006a05
 80069cc:	08006a05 	.word	0x08006a05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069d4:	3308      	adds	r3, #8
 80069d6:	2101      	movs	r1, #1
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 ff73 	bl	80078c4 <RCCEx_PLL2_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069e4:	e00f      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ea:	3328      	adds	r3, #40	@ 0x28
 80069ec:	2101      	movs	r1, #1
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 f81a 	bl	8007a28 <RCCEx_PLL3_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069fa:	e004      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a02:	e000      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a12:	f023 0107 	bic.w	r1, r3, #7
 8006a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a1e:	4a68      	ldr	r2, [pc, #416]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a20:	430b      	orrs	r3, r1
 8006a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a24:	e003      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f002 0320 	and.w	r3, r2, #32
 8006a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	d055      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a5a:	d033      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a60:	d82c      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a66:	d02f      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a6c:	d826      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a72:	d02b      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006a74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a78:	d820      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a7e:	d012      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a84:	d81a      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d022      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a8e:	d115      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a94:	3308      	adds	r3, #8
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 ff13 	bl	80078c4 <RCCEx_PLL2_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006aa4:	e015      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aaa:	3328      	adds	r3, #40	@ 0x28
 8006aac:	2102      	movs	r1, #2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 ffba 	bl	8007a28 <RCCEx_PLL3_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006aba:	e00a      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ac2:	e006      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ac4:	bf00      	nop
 8006ac6:	e004      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10b      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ada:	4b39      	ldr	r3, [pc, #228]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ade:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006aea:	4a35      	ldr	r2, [pc, #212]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6553      	str	r3, [r2, #84]	@ 0x54
 8006af0:	e003      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006af6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4313      	orrs	r3, r2
 8006b18:	d058      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b22:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b26:	d033      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006b28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b2c:	d82c      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b32:	d02f      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b38:	d826      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b3e:	d02b      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006b40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b44:	d820      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b4a:	d012      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b50:	d81a      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d022      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b5a:	d115      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b60:	3308      	adds	r3, #8
 8006b62:	2100      	movs	r1, #0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fead 	bl	80078c4 <RCCEx_PLL2_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b70:	e015      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b76:	3328      	adds	r3, #40	@ 0x28
 8006b78:	2102      	movs	r1, #2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 ff54 	bl	8007a28 <RCCEx_PLL3_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b86:	e00a      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b8e:	e006      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b90:	bf00      	nop
 8006b92:	e004      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b94:	bf00      	nop
 8006b96:	e002      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b98:	bf00      	nop
 8006b9a:	e000      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ba6:	4b06      	ldr	r3, [pc, #24]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006baa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bb6:	4a02      	ldr	r2, [pc, #8]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bbc:	e006      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006bbe:	bf00      	nop
 8006bc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006be2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006be6:	460b      	mov	r3, r1
 8006be8:	4313      	orrs	r3, r2
 8006bea:	d055      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006bf4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006bf8:	d033      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006bfa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006bfe:	d82c      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c04:	d02f      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c0a:	d826      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c0c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c10:	d02b      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006c12:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c16:	d820      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c1c:	d012      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006c1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c22:	d81a      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d022      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c2c:	d115      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c32:	3308      	adds	r3, #8
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fe44 	bl	80078c4 <RCCEx_PLL2_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c42:	e015      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c48:	3328      	adds	r3, #40	@ 0x28
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 feeb 	bl	8007a28 <RCCEx_PLL3_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c58:	e00a      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c60:	e006      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c62:	bf00      	nop
 8006c64:	e004      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c66:	bf00      	nop
 8006c68:	e002      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c6a:	bf00      	nop
 8006c6c:	e000      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10b      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c78:	4ba1      	ldr	r3, [pc, #644]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c88:	4a9d      	ldr	r2, [pc, #628]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c8e:	e003      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f002 0308 	and.w	r3, r2, #8
 8006ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	d01e      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc4:	d10c      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cca:	3328      	adds	r3, #40	@ 0x28
 8006ccc:	2102      	movs	r1, #2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 feaa 	bl	8007a28 <RCCEx_PLL3_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ce0:	4b87      	ldr	r3, [pc, #540]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf0:	4a83      	ldr	r2, [pc, #524]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f002 0310 	and.w	r3, r2, #16
 8006d02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d01e      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d22:	d10c      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d28:	3328      	adds	r3, #40	@ 0x28
 8006d2a:	2102      	movs	r1, #2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fe7b 	bl	8007a28 <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d3e:	4b70      	ldr	r3, [pc, #448]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d6a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d03e      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d80:	d022      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006d82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d86:	d81b      	bhi.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d90:	d00b      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006d92:	e015      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d98:	3308      	adds	r3, #8
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fd91 	bl	80078c4 <RCCEx_PLL2_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006da8:	e00f      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dae:	3328      	adds	r3, #40	@ 0x28
 8006db0:	2102      	movs	r1, #2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fe38 	bl	8007a28 <RCCEx_PLL3_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dbe:	e004      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006de2:	4a47      	ldr	r2, [pc, #284]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006de8:	e003      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e00:	2300      	movs	r3, #0
 8006e02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	d03b      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e1a:	d01f      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006e1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e20:	d818      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e26:	d003      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006e28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e2c:	d007      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006e2e:	e011      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e30:	4b33      	ldr	r3, [pc, #204]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e34:	4a32      	ldr	r2, [pc, #200]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e3c:	e00f      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e42:	3328      	adds	r3, #40	@ 0x28
 8006e44:	2101      	movs	r1, #1
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fdee 	bl	8007a28 <RCCEx_PLL3_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e52:	e004      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e5a:	e000      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10b      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e66:	4b26      	ldr	r3, [pc, #152]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e76:	4a22      	ldr	r2, [pc, #136]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e7c:	e003      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e92:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e94:	2300      	movs	r3, #0
 8006e96:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	d034      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb0:	d007      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006eb2:	e011      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb4:	4b12      	ldr	r3, [pc, #72]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	4a11      	ldr	r2, [pc, #68]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ec0:	e00e      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	2102      	movs	r1, #2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fcfa 	bl	80078c4 <RCCEx_PLL2_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ed6:	e003      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10d      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ee8:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef6:	4a02      	ldr	r2, [pc, #8]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006efc:	e006      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f22:	460b      	mov	r3, r1
 8006f24:	4313      	orrs	r3, r2
 8006f26:	d00c      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f2c:	3328      	adds	r3, #40	@ 0x28
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fd79 	bl	8007a28 <RCCEx_PLL3_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006f4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f50:	2300      	movs	r3, #0
 8006f52:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	d038      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f6a:	d018      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f70:	d811      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006f72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f76:	d014      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f7c:	d80b      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d011      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f86:	d106      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f88:	4bc3      	ldr	r3, [pc, #780]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	4ac2      	ldr	r2, [pc, #776]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f94:	e008      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f9c:	e004      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10b      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fb0:	4bb9      	ldr	r3, [pc, #740]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	4ab5      	ldr	r2, [pc, #724]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fc6:	e003      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fcc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fde:	2300      	movs	r3, #0
 8006fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fe2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fec:	4baa      	ldr	r3, [pc, #680]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ffa:	4aa7      	ldr	r2, [pc, #668]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800700c:	653b      	str	r3, [r7, #80]	@ 0x50
 800700e:	2300      	movs	r3, #0
 8007010:	657b      	str	r3, [r7, #84]	@ 0x54
 8007012:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007016:	460b      	mov	r3, r1
 8007018:	4313      	orrs	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800701c:	4b9e      	ldr	r3, [pc, #632]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800701e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007020:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	4a9b      	ldr	r2, [pc, #620]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800702c:	430b      	orrs	r3, r1
 800702e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800703c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800703e:	2300      	movs	r3, #0
 8007040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007042:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007046:	460b      	mov	r3, r1
 8007048:	4313      	orrs	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800704c:	4b92      	ldr	r3, [pc, #584]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800704e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007050:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800705a:	4a8f      	ldr	r2, [pc, #572]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800705c:	430b      	orrs	r3, r1
 800705e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800706c:	643b      	str	r3, [r7, #64]	@ 0x40
 800706e:	2300      	movs	r3, #0
 8007070:	647b      	str	r3, [r7, #68]	@ 0x44
 8007072:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007076:	460b      	mov	r3, r1
 8007078:	4313      	orrs	r3, r2
 800707a:	d00e      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800707c:	4b86      	ldr	r3, [pc, #536]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	4a85      	ldr	r2, [pc, #532]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007082:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007086:	6113      	str	r3, [r2, #16]
 8007088:	4b83      	ldr	r3, [pc, #524]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800708a:	6919      	ldr	r1, [r3, #16]
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007090:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007094:	4a80      	ldr	r2, [pc, #512]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007096:	430b      	orrs	r3, r1
 8007098:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800709a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80070a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070a8:	2300      	movs	r3, #0
 80070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80070b0:	460b      	mov	r3, r1
 80070b2:	4313      	orrs	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070b6:	4b78      	ldr	r3, [pc, #480]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c4:	4a74      	ldr	r2, [pc, #464]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070c6:	430b      	orrs	r3, r1
 80070c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80070d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d8:	2300      	movs	r3, #0
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
 80070dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80070e0:	460b      	mov	r3, r1
 80070e2:	4313      	orrs	r3, r2
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070e6:	4b6c      	ldr	r3, [pc, #432]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80070ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070f6:	4a68      	ldr	r2, [pc, #416]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80070fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	2100      	movs	r1, #0
 8007106:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800710e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007112:	460b      	mov	r3, r1
 8007114:	4313      	orrs	r3, r2
 8007116:	d011      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800711c:	3308      	adds	r3, #8
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fbcf 	bl	80078c4 <RCCEx_PLL2_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800712c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007134:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007138:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800713c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	2100      	movs	r1, #0
 8007146:	6239      	str	r1, [r7, #32]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
 800714e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007152:	460b      	mov	r3, r1
 8007154:	4313      	orrs	r3, r2
 8007156:	d011      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800715c:	3308      	adds	r3, #8
 800715e:	2101      	movs	r1, #1
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fbaf 	bl	80078c4 <RCCEx_PLL2_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800716c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007178:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800717c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	2100      	movs	r1, #0
 8007186:	61b9      	str	r1, [r7, #24]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007192:	460b      	mov	r3, r1
 8007194:	4313      	orrs	r3, r2
 8007196:	d011      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800719c:	3308      	adds	r3, #8
 800719e:	2102      	movs	r1, #2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fb8f 	bl	80078c4 <RCCEx_PLL2_Config>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80071ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	2100      	movs	r1, #0
 80071c6:	6139      	str	r1, [r7, #16]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80071d2:	460b      	mov	r3, r1
 80071d4:	4313      	orrs	r3, r2
 80071d6:	d011      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071dc:	3328      	adds	r3, #40	@ 0x28
 80071de:	2100      	movs	r1, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fc21 	bl	8007a28 <RCCEx_PLL3_Config>
 80071e6:	4603      	mov	r3, r0
 80071e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80071ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80071fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	2100      	movs	r1, #0
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d011      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800721c:	3328      	adds	r3, #40	@ 0x28
 800721e:	2101      	movs	r1, #1
 8007220:	4618      	mov	r0, r3
 8007222:	f000 fc01 	bl	8007a28 <RCCEx_PLL3_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800722c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007234:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007238:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800723c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	2100      	movs	r1, #0
 8007246:	6039      	str	r1, [r7, #0]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	607b      	str	r3, [r7, #4]
 800724e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007252:	460b      	mov	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	d011      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800725c:	3328      	adds	r3, #40	@ 0x28
 800725e:	2102      	movs	r1, #2
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fbe1 	bl	8007a28 <RCCEx_PLL3_Config>
 8007266:	4603      	mov	r3, r0
 8007268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800726c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007274:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007278:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800727c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	e000      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
}
 800728a:	4618      	mov	r0, r3
 800728c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007290:	46bd      	mov	sp, r7
 8007292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007296:	bf00      	nop
 8007298:	58024400 	.word	0x58024400

0800729c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80072a0:	f7fe fde2 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 80072a4:	4602      	mov	r2, r0
 80072a6:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	091b      	lsrs	r3, r3, #4
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	4904      	ldr	r1, [pc, #16]	@ (80072c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072b2:	5ccb      	ldrb	r3, [r1, r3]
 80072b4:	f003 031f 	and.w	r3, r3, #31
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80072bc:	4618      	mov	r0, r3
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	58024400 	.word	0x58024400
 80072c4:	0800ba80 	.word	0x0800ba80

080072c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b089      	sub	sp, #36	@ 0x24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072d0:	4ba1      	ldr	r3, [pc, #644]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80072da:	4b9f      	ldr	r3, [pc, #636]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072de:	0b1b      	lsrs	r3, r3, #12
 80072e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80072e6:	4b9c      	ldr	r3, [pc, #624]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80072f2:	4b99      	ldr	r3, [pc, #612]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f6:	08db      	lsrs	r3, r3, #3
 80072f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	fb02 f303 	mul.w	r3, r2, r3
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8111 	beq.w	8007538 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b02      	cmp	r3, #2
 800731a:	f000 8083 	beq.w	8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b02      	cmp	r3, #2
 8007322:	f200 80a1 	bhi.w	8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d056      	beq.n	80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007332:	e099      	b.n	8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007334:	4b88      	ldr	r3, [pc, #544]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d02d      	beq.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007340:	4b85      	ldr	r3, [pc, #532]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	08db      	lsrs	r3, r3, #3
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	4a84      	ldr	r2, [pc, #528]	@ (800755c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
 8007350:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736a:	4b7b      	ldr	r3, [pc, #492]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737a:	ed97 6a03 	vldr	s12, [r7, #12]
 800737e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007396:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800739a:	e087      	b.n	80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ae:	4b6a      	ldr	r3, [pc, #424]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073be:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073de:	e065      	b.n	80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f2:	4b59      	ldr	r3, [pc, #356]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007402:	ed97 6a03 	vldr	s12, [r7, #12]
 8007406:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800740a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007422:	e043      	b.n	80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007436:	4b48      	ldr	r3, [pc, #288]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007446:	ed97 6a03 	vldr	s12, [r7, #12]
 800744a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800744e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800745a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007466:	e021      	b.n	80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007472:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800747a:	4b37      	ldr	r3, [pc, #220]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748a:	ed97 6a03 	vldr	s12, [r7, #12]
 800748e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800749a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800749e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b0:	0a5b      	lsrs	r3, r3, #9
 80074b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d2:	ee17 2a90 	vmov	r2, s15
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80074da:	4b1f      	ldr	r3, [pc, #124]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074de:	0c1b      	lsrs	r3, r3, #16
 80074e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007500:	ee17 2a90 	vmov	r2, s15
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007508:	4b13      	ldr	r3, [pc, #76]	@ (8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	0e1b      	lsrs	r3, r3, #24
 800750e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800751e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007522:	edd7 6a07 	vldr	s13, [r7, #28]
 8007526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752e:	ee17 2a90 	vmov	r2, s15
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007536:	e008      	b.n	800754a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	609a      	str	r2, [r3, #8]
}
 800754a:	bf00      	nop
 800754c:	3724      	adds	r7, #36	@ 0x24
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	58024400 	.word	0x58024400
 800755c:	03d09000 	.word	0x03d09000
 8007560:	46000000 	.word	0x46000000
 8007564:	4c742400 	.word	0x4c742400
 8007568:	4a742400 	.word	0x4a742400
 800756c:	4af42400 	.word	0x4af42400

08007570 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007570:	b480      	push	{r7}
 8007572:	b089      	sub	sp, #36	@ 0x24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007578:	4ba1      	ldr	r3, [pc, #644]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757c:	f003 0303 	and.w	r3, r3, #3
 8007580:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007582:	4b9f      	ldr	r3, [pc, #636]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	0d1b      	lsrs	r3, r3, #20
 8007588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800758c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800758e:	4b9c      	ldr	r3, [pc, #624]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007592:	0a1b      	lsrs	r3, r3, #8
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800759a:	4b99      	ldr	r3, [pc, #612]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800759c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759e:	08db      	lsrs	r3, r3, #3
 80075a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8111 	beq.w	80077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	f000 8083 	beq.w	80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	f200 80a1 	bhi.w	8007710 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d056      	beq.n	8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80075da:	e099      	b.n	8007710 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075dc:	4b88      	ldr	r3, [pc, #544]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d02d      	beq.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075e8:	4b85      	ldr	r3, [pc, #532]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	08db      	lsrs	r3, r3, #3
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	4a84      	ldr	r2, [pc, #528]	@ (8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
 80075f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	ee07 3a90 	vmov	s15, r3
 8007600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007612:	4b7b      	ldr	r3, [pc, #492]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	ed97 6a03 	vldr	s12, [r7, #12]
 8007626:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007642:	e087      	b.n	8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800780c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007656:	4b6a      	ldr	r3, [pc, #424]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007666:	ed97 6a03 	vldr	s12, [r7, #12]
 800766a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800766e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800767a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007686:	e065      	b.n	8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007810 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769a:	4b59      	ldr	r3, [pc, #356]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ca:	e043      	b.n	8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076de:	4b48      	ldr	r3, [pc, #288]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800770e:	e021      	b.n	8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007810 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800771e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007722:	4b37      	ldr	r3, [pc, #220]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007732:	ed97 6a03 	vldr	s12, [r7, #12]
 8007736:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800773a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007752:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007754:	4b2a      	ldr	r3, [pc, #168]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007758:	0a5b      	lsrs	r3, r3, #9
 800775a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800776a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800776e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800777a:	ee17 2a90 	vmov	r2, s15
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007782:	4b1f      	ldr	r3, [pc, #124]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	0c1b      	lsrs	r3, r3, #16
 8007788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007794:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800779c:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a8:	ee17 2a90 	vmov	r2, s15
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077b0:	4b13      	ldr	r3, [pc, #76]	@ (8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	0e1b      	lsrs	r3, r3, #24
 80077b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d6:	ee17 2a90 	vmov	r2, s15
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077de:	e008      	b.n	80077f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	609a      	str	r2, [r3, #8]
}
 80077f2:	bf00      	nop
 80077f4:	3724      	adds	r7, #36	@ 0x24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	58024400 	.word	0x58024400
 8007804:	03d09000 	.word	0x03d09000
 8007808:	46000000 	.word	0x46000000
 800780c:	4c742400 	.word	0x4c742400
 8007810:	4a742400 	.word	0x4a742400
 8007814:	4af42400 	.word	0x4af42400

08007818 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007820:	4b26      	ldr	r3, [pc, #152]	@ (80078bc <HAL_RCCEx_CRSConfig+0xa4>)
 8007822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007826:	4a25      	ldr	r2, [pc, #148]	@ (80078bc <HAL_RCCEx_CRSConfig+0xa4>)
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007830:	4b22      	ldr	r3, [pc, #136]	@ (80078bc <HAL_RCCEx_CRSConfig+0xa4>)
 8007832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007836:	4a21      	ldr	r2, [pc, #132]	@ (80078bc <HAL_RCCEx_CRSConfig+0xa4>)
 8007838:	f023 0302 	bic.w	r3, r3, #2
 800783c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007840:	f7f9 fd16 	bl	8001270 <HAL_GetREVID>
 8007844:	4603      	mov	r3, r0
 8007846:	f241 0203 	movw	r2, #4099	@ 0x1003
 800784a:	4293      	cmp	r3, r2
 800784c:	d80b      	bhi.n	8007866 <HAL_RCCEx_CRSConfig+0x4e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007856:	d106      	bne.n	8007866 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e008      	b.n	8007878 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800788e:	4a0c      	ldr	r2, [pc, #48]	@ (80078c0 <HAL_RCCEx_CRSConfig+0xa8>)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007894:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <HAL_RCCEx_CRSConfig+0xa8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	4907      	ldr	r1, [pc, #28]	@ (80078c0 <HAL_RCCEx_CRSConfig+0xa8>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80078a8:	4b05      	ldr	r3, [pc, #20]	@ (80078c0 <HAL_RCCEx_CRSConfig+0xa8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a04      	ldr	r2, [pc, #16]	@ (80078c0 <HAL_RCCEx_CRSConfig+0xa8>)
 80078ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80078b2:	6013      	str	r3, [r2, #0]
}
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	58024400 	.word	0x58024400
 80078c0:	40008400 	.word	0x40008400

080078c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078d2:	4b53      	ldr	r3, [pc, #332]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80078d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d101      	bne.n	80078e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e099      	b.n	8007a16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80078e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ee:	f7f9 fcb3 	bl	8001258 <HAL_GetTick>
 80078f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078f4:	e008      	b.n	8007908 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078f6:	f7f9 fcaf 	bl	8001258 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e086      	b.n	8007a16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007908:	4b45      	ldr	r3, [pc, #276]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f0      	bne.n	80078f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007914:	4b42      	ldr	r3, [pc, #264]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007918:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	031b      	lsls	r3, r3, #12
 8007922:	493f      	ldr	r1, [pc, #252]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007924:	4313      	orrs	r3, r2
 8007926:	628b      	str	r3, [r1, #40]	@ 0x28
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	3b01      	subs	r3, #1
 800792e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	3b01      	subs	r3, #1
 8007938:	025b      	lsls	r3, r3, #9
 800793a:	b29b      	uxth	r3, r3
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	3b01      	subs	r3, #1
 8007944:	041b      	lsls	r3, r3, #16
 8007946:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	3b01      	subs	r3, #1
 8007952:	061b      	lsls	r3, r3, #24
 8007954:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007958:	4931      	ldr	r1, [pc, #196]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800795a:	4313      	orrs	r3, r2
 800795c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800795e:	4b30      	ldr	r3, [pc, #192]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007962:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	492d      	ldr	r1, [pc, #180]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800796c:	4313      	orrs	r3, r2
 800796e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007970:	4b2b      	ldr	r3, [pc, #172]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	f023 0220 	bic.w	r2, r3, #32
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	4928      	ldr	r1, [pc, #160]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800797e:	4313      	orrs	r3, r2
 8007980:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007982:	4b27      	ldr	r3, [pc, #156]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007986:	4a26      	ldr	r2, [pc, #152]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007988:	f023 0310 	bic.w	r3, r3, #16
 800798c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800798e:	4b24      	ldr	r3, [pc, #144]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007992:	4b24      	ldr	r3, [pc, #144]	@ (8007a24 <RCCEx_PLL2_Config+0x160>)
 8007994:	4013      	ands	r3, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	69d2      	ldr	r2, [r2, #28]
 800799a:	00d2      	lsls	r2, r2, #3
 800799c:	4920      	ldr	r1, [pc, #128]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079a8:	f043 0310 	orr.w	r3, r3, #16
 80079ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	4a19      	ldr	r2, [pc, #100]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079c0:	e00f      	b.n	80079e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d106      	bne.n	80079d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079c8:	4b15      	ldr	r3, [pc, #84]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079cc:	4a14      	ldr	r2, [pc, #80]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079d4:	e005      	b.n	80079e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079d6:	4b12      	ldr	r3, [pc, #72]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079da:	4a11      	ldr	r2, [pc, #68]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ee:	f7f9 fc33 	bl	8001258 <HAL_GetTick>
 80079f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079f4:	e008      	b.n	8007a08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079f6:	f7f9 fc2f 	bl	8001258 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d901      	bls.n	8007a08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e006      	b.n	8007a16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a08:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0f0      	beq.n	80079f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	58024400 	.word	0x58024400
 8007a24:	ffff0007 	.word	0xffff0007

08007a28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a36:	4b53      	ldr	r3, [pc, #332]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d101      	bne.n	8007a46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e099      	b.n	8007b7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a46:	4b4f      	ldr	r3, [pc, #316]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a52:	f7f9 fc01 	bl	8001258 <HAL_GetTick>
 8007a56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a58:	e008      	b.n	8007a6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a5a:	f7f9 fbfd 	bl	8001258 <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d901      	bls.n	8007a6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e086      	b.n	8007b7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a6c:	4b45      	ldr	r3, [pc, #276]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f0      	bne.n	8007a5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a78:	4b42      	ldr	r3, [pc, #264]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	051b      	lsls	r3, r3, #20
 8007a86:	493f      	ldr	r1, [pc, #252]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	025b      	lsls	r3, r3, #9
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	041b      	lsls	r3, r3, #16
 8007aaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	061b      	lsls	r3, r3, #24
 8007ab8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007abc:	4931      	ldr	r1, [pc, #196]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ac2:	4b30      	ldr	r3, [pc, #192]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	492d      	ldr	r1, [pc, #180]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	4928      	ldr	r1, [pc, #160]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ae6:	4b27      	ldr	r3, [pc, #156]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aea:	4a26      	ldr	r2, [pc, #152]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007af2:	4b24      	ldr	r3, [pc, #144]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007af6:	4b24      	ldr	r3, [pc, #144]	@ (8007b88 <RCCEx_PLL3_Config+0x160>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	69d2      	ldr	r2, [r2, #28]
 8007afe:	00d2      	lsls	r2, r2, #3
 8007b00:	4920      	ldr	r1, [pc, #128]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b06:	4b1f      	ldr	r3, [pc, #124]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b18:	4b1a      	ldr	r3, [pc, #104]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	4a19      	ldr	r2, [pc, #100]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b24:	e00f      	b.n	8007b46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d106      	bne.n	8007b3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b2c:	4b15      	ldr	r3, [pc, #84]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b30:	4a14      	ldr	r2, [pc, #80]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b38:	e005      	b.n	8007b46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b3a:	4b12      	ldr	r3, [pc, #72]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3e:	4a11      	ldr	r2, [pc, #68]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b46:	4b0f      	ldr	r3, [pc, #60]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b52:	f7f9 fb81 	bl	8001258 <HAL_GetTick>
 8007b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b58:	e008      	b.n	8007b6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b5a:	f7f9 fb7d 	bl	8001258 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e006      	b.n	8007b7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b6c:	4b05      	ldr	r3, [pc, #20]	@ (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	58024400 	.word	0x58024400
 8007b88:	ffff0007 	.word	0xffff0007

08007b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e049      	b.n	8007c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7f9 f914 	bl	8000de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f000 f8a6 	bl	8007d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d001      	beq.n	8007c54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e04c      	b.n	8007cee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a26      	ldr	r2, [pc, #152]	@ (8007cfc <HAL_TIM_Base_Start+0xc0>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d022      	beq.n	8007cac <HAL_TIM_Base_Start+0x70>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6e:	d01d      	beq.n	8007cac <HAL_TIM_Base_Start+0x70>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a22      	ldr	r2, [pc, #136]	@ (8007d00 <HAL_TIM_Base_Start+0xc4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d018      	beq.n	8007cac <HAL_TIM_Base_Start+0x70>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a21      	ldr	r2, [pc, #132]	@ (8007d04 <HAL_TIM_Base_Start+0xc8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d013      	beq.n	8007cac <HAL_TIM_Base_Start+0x70>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1f      	ldr	r2, [pc, #124]	@ (8007d08 <HAL_TIM_Base_Start+0xcc>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00e      	beq.n	8007cac <HAL_TIM_Base_Start+0x70>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1e      	ldr	r2, [pc, #120]	@ (8007d0c <HAL_TIM_Base_Start+0xd0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d009      	beq.n	8007cac <HAL_TIM_Base_Start+0x70>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8007d10 <HAL_TIM_Base_Start+0xd4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d004      	beq.n	8007cac <HAL_TIM_Base_Start+0x70>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8007d14 <HAL_TIM_Base_Start+0xd8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d115      	bne.n	8007cd8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	4b19      	ldr	r3, [pc, #100]	@ (8007d18 <HAL_TIM_Base_Start+0xdc>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b06      	cmp	r3, #6
 8007cbc:	d015      	beq.n	8007cea <HAL_TIM_Base_Start+0xae>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d011      	beq.n	8007cea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0201 	orr.w	r2, r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd6:	e008      	b.n	8007cea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	e000      	b.n	8007cec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40000400 	.word	0x40000400
 8007d04:	40000800 	.word	0x40000800
 8007d08:	40000c00 	.word	0x40000c00
 8007d0c:	40010400 	.word	0x40010400
 8007d10:	40001800 	.word	0x40001800
 8007d14:	40014000 	.word	0x40014000
 8007d18:	00010007 	.word	0x00010007

08007d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a46      	ldr	r2, [pc, #280]	@ (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d013      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d3a:	d00f      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a43      	ldr	r2, [pc, #268]	@ (8007e4c <TIM_Base_SetConfig+0x130>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a42      	ldr	r2, [pc, #264]	@ (8007e50 <TIM_Base_SetConfig+0x134>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a41      	ldr	r2, [pc, #260]	@ (8007e54 <TIM_Base_SetConfig+0x138>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a40      	ldr	r2, [pc, #256]	@ (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d108      	bne.n	8007d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a35      	ldr	r2, [pc, #212]	@ (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01f      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d7c:	d01b      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a32      	ldr	r2, [pc, #200]	@ (8007e4c <TIM_Base_SetConfig+0x130>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d017      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a31      	ldr	r2, [pc, #196]	@ (8007e50 <TIM_Base_SetConfig+0x134>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a30      	ldr	r2, [pc, #192]	@ (8007e54 <TIM_Base_SetConfig+0x138>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00f      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2f      	ldr	r2, [pc, #188]	@ (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00b      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a2e      	ldr	r2, [pc, #184]	@ (8007e5c <TIM_Base_SetConfig+0x140>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2d      	ldr	r2, [pc, #180]	@ (8007e60 <TIM_Base_SetConfig+0x144>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d003      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a2c      	ldr	r2, [pc, #176]	@ (8007e64 <TIM_Base_SetConfig+0x148>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d108      	bne.n	8007dc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a16      	ldr	r2, [pc, #88]	@ (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d00f      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a18      	ldr	r2, [pc, #96]	@ (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d00b      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a17      	ldr	r2, [pc, #92]	@ (8007e5c <TIM_Base_SetConfig+0x140>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d007      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a16      	ldr	r2, [pc, #88]	@ (8007e60 <TIM_Base_SetConfig+0x144>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d003      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a15      	ldr	r2, [pc, #84]	@ (8007e64 <TIM_Base_SetConfig+0x148>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d103      	bne.n	8007e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f023 0201 	bic.w	r2, r3, #1
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	611a      	str	r2, [r3, #16]
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	40000400 	.word	0x40000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40010400 	.word	0x40010400
 8007e5c:	40014000 	.word	0x40014000
 8007e60:	40014400 	.word	0x40014400
 8007e64:	40014800 	.word	0x40014800

08007e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e06d      	b.n	8007f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a30      	ldr	r2, [pc, #192]	@ (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a2f      	ldr	r2, [pc, #188]	@ (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d108      	bne.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a20      	ldr	r2, [pc, #128]	@ (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d022      	beq.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ef2:	d01d      	beq.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d018      	beq.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1c      	ldr	r2, [pc, #112]	@ (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d013      	beq.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00e      	beq.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a15      	ldr	r2, [pc, #84]	@ (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d009      	beq.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a16      	ldr	r2, [pc, #88]	@ (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d004      	beq.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a15      	ldr	r2, [pc, #84]	@ (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10c      	bne.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	40010000 	.word	0x40010000
 8007f6c:	40010400 	.word	0x40010400
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800
 8007f78:	40000c00 	.word	0x40000c00
 8007f7c:	40001800 	.word	0x40001800
 8007f80:	40014000 	.word	0x40014000

08007f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e042      	b.n	800801c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d106      	bne.n	8007fae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7f8 ff3b 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2224      	movs	r2, #36	@ 0x24
 8007fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0201 	bic.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 fb52 	bl	8009678 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fce3 	bl	80089a0 <UART_SetConfig>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e01b      	b.n	800801c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fbd1 	bl	80097bc <UART_CheckIdleState>
 800801a:	4603      	mov	r3, r0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08a      	sub	sp, #40	@ 0x28
 8008028:	af02      	add	r7, sp, #8
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	4613      	mov	r3, r2
 8008032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800803a:	2b20      	cmp	r3, #32
 800803c:	d17b      	bne.n	8008136 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <HAL_UART_Transmit+0x26>
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e074      	b.n	8008138 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2221      	movs	r2, #33	@ 0x21
 800805a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800805e:	f7f9 f8fb 	bl	8001258 <HAL_GetTick>
 8008062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	88fa      	ldrh	r2, [r7, #6]
 8008068:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	88fa      	ldrh	r2, [r7, #6]
 8008070:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800807c:	d108      	bne.n	8008090 <HAL_UART_Transmit+0x6c>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d104      	bne.n	8008090 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	61bb      	str	r3, [r7, #24]
 800808e:	e003      	b.n	8008098 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008094:	2300      	movs	r3, #0
 8008096:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008098:	e030      	b.n	80080fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2200      	movs	r2, #0
 80080a2:	2180      	movs	r1, #128	@ 0x80
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f001 fc33 	bl	8009910 <UART_WaitOnFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e03d      	b.n	8008138 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10b      	bne.n	80080da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	3302      	adds	r3, #2
 80080d6:	61bb      	str	r3, [r7, #24]
 80080d8:	e007      	b.n	80080ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	781a      	ldrb	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	3301      	adds	r3, #1
 80080e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008102:	b29b      	uxth	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1c8      	bne.n	800809a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2200      	movs	r2, #0
 8008110:	2140      	movs	r1, #64	@ 0x40
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f001 fbfc 	bl	8009910 <UART_WaitOnFlagUntilTimeout>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e006      	b.n	8008138 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2220      	movs	r2, #32
 800812e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	e000      	b.n	8008138 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008136:	2302      	movs	r3, #2
  }
}
 8008138:	4618      	mov	r0, r3
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08a      	sub	sp, #40	@ 0x28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008154:	2b20      	cmp	r3, #32
 8008156:	d137      	bne.n	80081c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d002      	beq.n	8008164 <HAL_UART_Receive_DMA+0x24>
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e030      	b.n	80081ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a18      	ldr	r2, [pc, #96]	@ (80081d4 <HAL_UART_Receive_DMA+0x94>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d01f      	beq.n	80081b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d018      	beq.n	80081b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	613b      	str	r3, [r7, #16]
   return(result);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800819a:	627b      	str	r3, [r7, #36]	@ 0x24
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	623b      	str	r3, [r7, #32]
 80081a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	69f9      	ldr	r1, [r7, #28]
 80081aa:	6a3a      	ldr	r2, [r7, #32]
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e6      	bne.n	8008186 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80081b8:	88fb      	ldrh	r3, [r7, #6]
 80081ba:	461a      	mov	r2, r3
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f001 fc14 	bl	80099ec <UART_Start_Receive_DMA>
 80081c4:	4603      	mov	r3, r0
 80081c6:	e000      	b.n	80081ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081c8:	2302      	movs	r3, #2
  }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3728      	adds	r7, #40	@ 0x28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	58000c00 	.word	0x58000c00

080081d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b0ba      	sub	sp, #232	@ 0xe8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008202:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008206:	4013      	ands	r3, r2
 8008208:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800820c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d11b      	bne.n	800824c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	d015      	beq.n	800824c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b00      	cmp	r3, #0
 800822a:	d105      	bne.n	8008238 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800822c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8377 	beq.w	8008930 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
      }
      return;
 800824a:	e371      	b.n	8008930 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800824c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 8123 	beq.w	800849c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008256:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800825a:	4b8d      	ldr	r3, [pc, #564]	@ (8008490 <HAL_UART_IRQHandler+0x2b8>)
 800825c:	4013      	ands	r3, r2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008262:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008266:	4b8b      	ldr	r3, [pc, #556]	@ (8008494 <HAL_UART_IRQHandler+0x2bc>)
 8008268:	4013      	ands	r3, r2
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8116 	beq.w	800849c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d011      	beq.n	80082a0 <HAL_UART_IRQHandler+0xc8>
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2201      	movs	r2, #1
 800828e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008296:	f043 0201 	orr.w	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d011      	beq.n	80082d0 <HAL_UART_IRQHandler+0xf8>
 80082ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2202      	movs	r2, #2
 80082be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c6:	f043 0204 	orr.w	r2, r3, #4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d011      	beq.n	8008300 <HAL_UART_IRQHandler+0x128>
 80082dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2204      	movs	r2, #4
 80082ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f6:	f043 0202 	orr.w	r2, r3, #2
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d017      	beq.n	800833c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800830c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008318:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800831c:	4b5c      	ldr	r3, [pc, #368]	@ (8008490 <HAL_UART_IRQHandler+0x2b8>)
 800831e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2208      	movs	r2, #8
 800832a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008332:	f043 0208 	orr.w	r2, r3, #8
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800833c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008344:	2b00      	cmp	r3, #0
 8008346:	d012      	beq.n	800836e <HAL_UART_IRQHandler+0x196>
 8008348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800834c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00c      	beq.n	800836e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800835c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008364:	f043 0220 	orr.w	r2, r3, #32
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 82dd 	beq.w	8008934 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d013      	beq.n	80083ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c2:	2b40      	cmp	r3, #64	@ 0x40
 80083c4:	d005      	beq.n	80083d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d054      	beq.n	800847c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 fbf2 	bl	8009bbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e2:	2b40      	cmp	r3, #64	@ 0x40
 80083e4:	d146      	bne.n	8008474 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3308      	adds	r3, #8
 80083ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3308      	adds	r3, #8
 800840e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008412:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800841e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800842a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1d9      	bne.n	80083e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008438:	2b00      	cmp	r3, #0
 800843a:	d017      	beq.n	800846c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008442:	4a15      	ldr	r2, [pc, #84]	@ (8008498 <HAL_UART_IRQHandler+0x2c0>)
 8008444:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800844c:	4618      	mov	r0, r3
 800844e:	f7fa fc63 	bl	8002d18 <HAL_DMA_Abort_IT>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d019      	beq.n	800848c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800845e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008466:	4610      	mov	r0, r2
 8008468:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846a:	e00f      	b.n	800848c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fa81 	bl	8008974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008472:	e00b      	b.n	800848c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fa7d 	bl	8008974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800847a:	e007      	b.n	800848c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fa79 	bl	8008974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800848a:	e253      	b.n	8008934 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	bf00      	nop
    return;
 800848e:	e251      	b.n	8008934 <HAL_UART_IRQHandler+0x75c>
 8008490:	10000001 	.word	0x10000001
 8008494:	04000120 	.word	0x04000120
 8008498:	08009e6f 	.word	0x08009e6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	f040 81e7 	bne.w	8008874 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084aa:	f003 0310 	and.w	r3, r3, #16
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 81e0 	beq.w	8008874 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 81d9 	beq.w	8008874 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2210      	movs	r2, #16
 80084c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d4:	2b40      	cmp	r3, #64	@ 0x40
 80084d6:	f040 8151 	bne.w	800877c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a96      	ldr	r2, [pc, #600]	@ (800873c <HAL_UART_IRQHandler+0x564>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d068      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a93      	ldr	r2, [pc, #588]	@ (8008740 <HAL_UART_IRQHandler+0x568>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d061      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a91      	ldr	r2, [pc, #580]	@ (8008744 <HAL_UART_IRQHandler+0x56c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d05a      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a8e      	ldr	r2, [pc, #568]	@ (8008748 <HAL_UART_IRQHandler+0x570>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d053      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a8c      	ldr	r2, [pc, #560]	@ (800874c <HAL_UART_IRQHandler+0x574>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d04c      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a89      	ldr	r2, [pc, #548]	@ (8008750 <HAL_UART_IRQHandler+0x578>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d045      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a87      	ldr	r2, [pc, #540]	@ (8008754 <HAL_UART_IRQHandler+0x57c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d03e      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a84      	ldr	r2, [pc, #528]	@ (8008758 <HAL_UART_IRQHandler+0x580>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d037      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a82      	ldr	r2, [pc, #520]	@ (800875c <HAL_UART_IRQHandler+0x584>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d030      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a7f      	ldr	r2, [pc, #508]	@ (8008760 <HAL_UART_IRQHandler+0x588>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d029      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a7d      	ldr	r2, [pc, #500]	@ (8008764 <HAL_UART_IRQHandler+0x58c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d022      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a7a      	ldr	r2, [pc, #488]	@ (8008768 <HAL_UART_IRQHandler+0x590>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d01b      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a78      	ldr	r2, [pc, #480]	@ (800876c <HAL_UART_IRQHandler+0x594>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d014      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a75      	ldr	r2, [pc, #468]	@ (8008770 <HAL_UART_IRQHandler+0x598>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00d      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a73      	ldr	r2, [pc, #460]	@ (8008774 <HAL_UART_IRQHandler+0x59c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d006      	beq.n	80085ba <HAL_UART_IRQHandler+0x3e2>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a70      	ldr	r2, [pc, #448]	@ (8008778 <HAL_UART_IRQHandler+0x5a0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d106      	bne.n	80085c8 <HAL_UART_IRQHandler+0x3f0>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	e005      	b.n	80085d4 <HAL_UART_IRQHandler+0x3fc>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 81ab 	beq.w	8008938 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085ec:	429a      	cmp	r2, r3
 80085ee:	f080 81a3 	bcs.w	8008938 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008608:	f000 8087 	beq.w	800871a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800863a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008642:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800864e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1da      	bne.n	800860c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008668:	f023 0301 	bic.w	r3, r3, #1
 800866c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3308      	adds	r3, #8
 8008676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800867a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800867e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008682:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800868c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e1      	bne.n	8008656 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3308      	adds	r3, #8
 80086b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80086b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80086c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e3      	bne.n	8008692 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086e8:	f023 0310 	bic.w	r3, r3, #16
 80086ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008700:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e4      	bne.n	80086d8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008714:	4618      	mov	r0, r3
 8008716:	f7f9 ffe1 	bl	80026dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2202      	movs	r2, #2
 800871e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800872c:	b29b      	uxth	r3, r3
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	b29b      	uxth	r3, r3
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f927 	bl	8008988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800873a:	e0fd      	b.n	8008938 <HAL_UART_IRQHandler+0x760>
 800873c:	40020010 	.word	0x40020010
 8008740:	40020028 	.word	0x40020028
 8008744:	40020040 	.word	0x40020040
 8008748:	40020058 	.word	0x40020058
 800874c:	40020070 	.word	0x40020070
 8008750:	40020088 	.word	0x40020088
 8008754:	400200a0 	.word	0x400200a0
 8008758:	400200b8 	.word	0x400200b8
 800875c:	40020410 	.word	0x40020410
 8008760:	40020428 	.word	0x40020428
 8008764:	40020440 	.word	0x40020440
 8008768:	40020458 	.word	0x40020458
 800876c:	40020470 	.word	0x40020470
 8008770:	40020488 	.word	0x40020488
 8008774:	400204a0 	.word	0x400204a0
 8008778:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008788:	b29b      	uxth	r3, r3
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008796:	b29b      	uxth	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 80cf 	beq.w	800893c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800879e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80ca 	beq.w	800893c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80087cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e4      	bne.n	80087a8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3308      	adds	r3, #8
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	623b      	str	r3, [r7, #32]
   return(result);
 80087ee:	6a3a      	ldr	r2, [r7, #32]
 80087f0:	4b55      	ldr	r3, [pc, #340]	@ (8008948 <HAL_UART_IRQHandler+0x770>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3308      	adds	r3, #8
 80087fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008802:	633a      	str	r2, [r7, #48]	@ 0x30
 8008804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e3      	bne.n	80087de <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	60fb      	str	r3, [r7, #12]
   return(result);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0310 	bic.w	r3, r3, #16
 800883e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	69b9      	ldr	r1, [r7, #24]
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	617b      	str	r3, [r7, #20]
   return(result);
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e4      	bne.n	800882a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f88b 	bl	8008988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008872:	e063      	b.n	800893c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00e      	beq.n	800889e <HAL_UART_IRQHandler+0x6c6>
 8008880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d008      	beq.n	800889e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 fb2a 	bl	8009ef0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800889c:	e051      	b.n	8008942 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800889e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d014      	beq.n	80088d4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d008      	beq.n	80088d4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d03a      	beq.n	8008940 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
    }
    return;
 80088d2:	e035      	b.n	8008940 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <HAL_UART_IRQHandler+0x71c>
 80088e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 fad4 	bl	8009e9a <UART_EndTransmit_IT>
    return;
 80088f2:	e026      	b.n	8008942 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d009      	beq.n	8008914 <HAL_UART_IRQHandler+0x73c>
 8008900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008904:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 fb03 	bl	8009f18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008912:	e016      	b.n	8008942 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d010      	beq.n	8008942 <HAL_UART_IRQHandler+0x76a>
 8008920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008924:	2b00      	cmp	r3, #0
 8008926:	da0c      	bge.n	8008942 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 faeb 	bl	8009f04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800892e:	e008      	b.n	8008942 <HAL_UART_IRQHandler+0x76a>
      return;
 8008930:	bf00      	nop
 8008932:	e006      	b.n	8008942 <HAL_UART_IRQHandler+0x76a>
    return;
 8008934:	bf00      	nop
 8008936:	e004      	b.n	8008942 <HAL_UART_IRQHandler+0x76a>
      return;
 8008938:	bf00      	nop
 800893a:	e002      	b.n	8008942 <HAL_UART_IRQHandler+0x76a>
      return;
 800893c:	bf00      	nop
 800893e:	e000      	b.n	8008942 <HAL_UART_IRQHandler+0x76a>
    return;
 8008940:	bf00      	nop
  }
}
 8008942:	37e8      	adds	r7, #232	@ 0xe8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	effffffe 	.word	0xeffffffe

0800894c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089a4:	b092      	sub	sp, #72	@ 0x48
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	431a      	orrs	r2, r3
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	431a      	orrs	r2, r3
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	4bbe      	ldr	r3, [pc, #760]	@ (8008cc8 <UART_SetConfig+0x328>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	6812      	ldr	r2, [r2, #0]
 80089d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089d8:	430b      	orrs	r3, r1
 80089da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4ab3      	ldr	r2, [pc, #716]	@ (8008ccc <UART_SetConfig+0x32c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d004      	beq.n	8008a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	4baf      	ldr	r3, [pc, #700]	@ (8008cd0 <UART_SetConfig+0x330>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	6812      	ldr	r2, [r2, #0]
 8008a1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a26:	f023 010f 	bic.w	r1, r3, #15
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4aa6      	ldr	r2, [pc, #664]	@ (8008cd4 <UART_SetConfig+0x334>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d177      	bne.n	8008b30 <UART_SetConfig+0x190>
 8008a40:	4ba5      	ldr	r3, [pc, #660]	@ (8008cd8 <UART_SetConfig+0x338>)
 8008a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a48:	2b28      	cmp	r3, #40	@ 0x28
 8008a4a:	d86d      	bhi.n	8008b28 <UART_SetConfig+0x188>
 8008a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a54 <UART_SetConfig+0xb4>)
 8008a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a52:	bf00      	nop
 8008a54:	08008af9 	.word	0x08008af9
 8008a58:	08008b29 	.word	0x08008b29
 8008a5c:	08008b29 	.word	0x08008b29
 8008a60:	08008b29 	.word	0x08008b29
 8008a64:	08008b29 	.word	0x08008b29
 8008a68:	08008b29 	.word	0x08008b29
 8008a6c:	08008b29 	.word	0x08008b29
 8008a70:	08008b29 	.word	0x08008b29
 8008a74:	08008b01 	.word	0x08008b01
 8008a78:	08008b29 	.word	0x08008b29
 8008a7c:	08008b29 	.word	0x08008b29
 8008a80:	08008b29 	.word	0x08008b29
 8008a84:	08008b29 	.word	0x08008b29
 8008a88:	08008b29 	.word	0x08008b29
 8008a8c:	08008b29 	.word	0x08008b29
 8008a90:	08008b29 	.word	0x08008b29
 8008a94:	08008b09 	.word	0x08008b09
 8008a98:	08008b29 	.word	0x08008b29
 8008a9c:	08008b29 	.word	0x08008b29
 8008aa0:	08008b29 	.word	0x08008b29
 8008aa4:	08008b29 	.word	0x08008b29
 8008aa8:	08008b29 	.word	0x08008b29
 8008aac:	08008b29 	.word	0x08008b29
 8008ab0:	08008b29 	.word	0x08008b29
 8008ab4:	08008b11 	.word	0x08008b11
 8008ab8:	08008b29 	.word	0x08008b29
 8008abc:	08008b29 	.word	0x08008b29
 8008ac0:	08008b29 	.word	0x08008b29
 8008ac4:	08008b29 	.word	0x08008b29
 8008ac8:	08008b29 	.word	0x08008b29
 8008acc:	08008b29 	.word	0x08008b29
 8008ad0:	08008b29 	.word	0x08008b29
 8008ad4:	08008b19 	.word	0x08008b19
 8008ad8:	08008b29 	.word	0x08008b29
 8008adc:	08008b29 	.word	0x08008b29
 8008ae0:	08008b29 	.word	0x08008b29
 8008ae4:	08008b29 	.word	0x08008b29
 8008ae8:	08008b29 	.word	0x08008b29
 8008aec:	08008b29 	.word	0x08008b29
 8008af0:	08008b29 	.word	0x08008b29
 8008af4:	08008b21 	.word	0x08008b21
 8008af8:	2301      	movs	r3, #1
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afe:	e326      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b00:	2304      	movs	r3, #4
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b06:	e322      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b08:	2308      	movs	r3, #8
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0e:	e31e      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b10:	2310      	movs	r3, #16
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b16:	e31a      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b18:	2320      	movs	r3, #32
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	e316      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b20:	2340      	movs	r3, #64	@ 0x40
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b26:	e312      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b28:	2380      	movs	r3, #128	@ 0x80
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2e:	e30e      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a69      	ldr	r2, [pc, #420]	@ (8008cdc <UART_SetConfig+0x33c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d130      	bne.n	8008b9c <UART_SetConfig+0x1fc>
 8008b3a:	4b67      	ldr	r3, [pc, #412]	@ (8008cd8 <UART_SetConfig+0x338>)
 8008b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	2b05      	cmp	r3, #5
 8008b44:	d826      	bhi.n	8008b94 <UART_SetConfig+0x1f4>
 8008b46:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <UART_SetConfig+0x1ac>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008b65 	.word	0x08008b65
 8008b50:	08008b6d 	.word	0x08008b6d
 8008b54:	08008b75 	.word	0x08008b75
 8008b58:	08008b7d 	.word	0x08008b7d
 8008b5c:	08008b85 	.word	0x08008b85
 8008b60:	08008b8d 	.word	0x08008b8d
 8008b64:	2300      	movs	r3, #0
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6a:	e2f0      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e2ec      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b74:	2308      	movs	r3, #8
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e2e8      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e2e4      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b84:	2320      	movs	r3, #32
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e2e0      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b8c:	2340      	movs	r3, #64	@ 0x40
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e2dc      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b94:	2380      	movs	r3, #128	@ 0x80
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e2d8      	b.n	800914e <UART_SetConfig+0x7ae>
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8008ce0 <UART_SetConfig+0x340>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d130      	bne.n	8008c08 <UART_SetConfig+0x268>
 8008ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8008cd8 <UART_SetConfig+0x338>)
 8008ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	2b05      	cmp	r3, #5
 8008bb0:	d826      	bhi.n	8008c00 <UART_SetConfig+0x260>
 8008bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb8 <UART_SetConfig+0x218>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008bd1 	.word	0x08008bd1
 8008bbc:	08008bd9 	.word	0x08008bd9
 8008bc0:	08008be1 	.word	0x08008be1
 8008bc4:	08008be9 	.word	0x08008be9
 8008bc8:	08008bf1 	.word	0x08008bf1
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e2ba      	b.n	800914e <UART_SetConfig+0x7ae>
 8008bd8:	2304      	movs	r3, #4
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e2b6      	b.n	800914e <UART_SetConfig+0x7ae>
 8008be0:	2308      	movs	r3, #8
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e2b2      	b.n	800914e <UART_SetConfig+0x7ae>
 8008be8:	2310      	movs	r3, #16
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e2ae      	b.n	800914e <UART_SetConfig+0x7ae>
 8008bf0:	2320      	movs	r3, #32
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e2aa      	b.n	800914e <UART_SetConfig+0x7ae>
 8008bf8:	2340      	movs	r3, #64	@ 0x40
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e2a6      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c00:	2380      	movs	r3, #128	@ 0x80
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c06:	e2a2      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a35      	ldr	r2, [pc, #212]	@ (8008ce4 <UART_SetConfig+0x344>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d130      	bne.n	8008c74 <UART_SetConfig+0x2d4>
 8008c12:	4b31      	ldr	r3, [pc, #196]	@ (8008cd8 <UART_SetConfig+0x338>)
 8008c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	2b05      	cmp	r3, #5
 8008c1c:	d826      	bhi.n	8008c6c <UART_SetConfig+0x2cc>
 8008c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c24 <UART_SetConfig+0x284>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008c3d 	.word	0x08008c3d
 8008c28:	08008c45 	.word	0x08008c45
 8008c2c:	08008c4d 	.word	0x08008c4d
 8008c30:	08008c55 	.word	0x08008c55
 8008c34:	08008c5d 	.word	0x08008c5d
 8008c38:	08008c65 	.word	0x08008c65
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e284      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c44:	2304      	movs	r3, #4
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e280      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c4c:	2308      	movs	r3, #8
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e27c      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c54:	2310      	movs	r3, #16
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e278      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c5c:	2320      	movs	r3, #32
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e274      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c64:	2340      	movs	r3, #64	@ 0x40
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e270      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c6c:	2380      	movs	r3, #128	@ 0x80
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e26c      	b.n	800914e <UART_SetConfig+0x7ae>
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce8 <UART_SetConfig+0x348>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d142      	bne.n	8008d04 <UART_SetConfig+0x364>
 8008c7e:	4b16      	ldr	r3, [pc, #88]	@ (8008cd8 <UART_SetConfig+0x338>)
 8008c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d838      	bhi.n	8008cfc <UART_SetConfig+0x35c>
 8008c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c90 <UART_SetConfig+0x2f0>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008ca9 	.word	0x08008ca9
 8008c94:	08008cb1 	.word	0x08008cb1
 8008c98:	08008cb9 	.word	0x08008cb9
 8008c9c:	08008cc1 	.word	0x08008cc1
 8008ca0:	08008ced 	.word	0x08008ced
 8008ca4:	08008cf5 	.word	0x08008cf5
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e24e      	b.n	800914e <UART_SetConfig+0x7ae>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e24a      	b.n	800914e <UART_SetConfig+0x7ae>
 8008cb8:	2308      	movs	r3, #8
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e246      	b.n	800914e <UART_SetConfig+0x7ae>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e242      	b.n	800914e <UART_SetConfig+0x7ae>
 8008cc8:	cfff69f3 	.word	0xcfff69f3
 8008ccc:	58000c00 	.word	0x58000c00
 8008cd0:	11fff4ff 	.word	0x11fff4ff
 8008cd4:	40011000 	.word	0x40011000
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	40004400 	.word	0x40004400
 8008ce0:	40004800 	.word	0x40004800
 8008ce4:	40004c00 	.word	0x40004c00
 8008ce8:	40005000 	.word	0x40005000
 8008cec:	2320      	movs	r3, #32
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e22c      	b.n	800914e <UART_SetConfig+0x7ae>
 8008cf4:	2340      	movs	r3, #64	@ 0x40
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e228      	b.n	800914e <UART_SetConfig+0x7ae>
 8008cfc:	2380      	movs	r3, #128	@ 0x80
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e224      	b.n	800914e <UART_SetConfig+0x7ae>
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4ab1      	ldr	r2, [pc, #708]	@ (8008fd0 <UART_SetConfig+0x630>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d176      	bne.n	8008dfc <UART_SetConfig+0x45c>
 8008d0e:	4bb1      	ldr	r3, [pc, #708]	@ (8008fd4 <UART_SetConfig+0x634>)
 8008d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d16:	2b28      	cmp	r3, #40	@ 0x28
 8008d18:	d86c      	bhi.n	8008df4 <UART_SetConfig+0x454>
 8008d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <UART_SetConfig+0x380>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008dc5 	.word	0x08008dc5
 8008d24:	08008df5 	.word	0x08008df5
 8008d28:	08008df5 	.word	0x08008df5
 8008d2c:	08008df5 	.word	0x08008df5
 8008d30:	08008df5 	.word	0x08008df5
 8008d34:	08008df5 	.word	0x08008df5
 8008d38:	08008df5 	.word	0x08008df5
 8008d3c:	08008df5 	.word	0x08008df5
 8008d40:	08008dcd 	.word	0x08008dcd
 8008d44:	08008df5 	.word	0x08008df5
 8008d48:	08008df5 	.word	0x08008df5
 8008d4c:	08008df5 	.word	0x08008df5
 8008d50:	08008df5 	.word	0x08008df5
 8008d54:	08008df5 	.word	0x08008df5
 8008d58:	08008df5 	.word	0x08008df5
 8008d5c:	08008df5 	.word	0x08008df5
 8008d60:	08008dd5 	.word	0x08008dd5
 8008d64:	08008df5 	.word	0x08008df5
 8008d68:	08008df5 	.word	0x08008df5
 8008d6c:	08008df5 	.word	0x08008df5
 8008d70:	08008df5 	.word	0x08008df5
 8008d74:	08008df5 	.word	0x08008df5
 8008d78:	08008df5 	.word	0x08008df5
 8008d7c:	08008df5 	.word	0x08008df5
 8008d80:	08008ddd 	.word	0x08008ddd
 8008d84:	08008df5 	.word	0x08008df5
 8008d88:	08008df5 	.word	0x08008df5
 8008d8c:	08008df5 	.word	0x08008df5
 8008d90:	08008df5 	.word	0x08008df5
 8008d94:	08008df5 	.word	0x08008df5
 8008d98:	08008df5 	.word	0x08008df5
 8008d9c:	08008df5 	.word	0x08008df5
 8008da0:	08008de5 	.word	0x08008de5
 8008da4:	08008df5 	.word	0x08008df5
 8008da8:	08008df5 	.word	0x08008df5
 8008dac:	08008df5 	.word	0x08008df5
 8008db0:	08008df5 	.word	0x08008df5
 8008db4:	08008df5 	.word	0x08008df5
 8008db8:	08008df5 	.word	0x08008df5
 8008dbc:	08008df5 	.word	0x08008df5
 8008dc0:	08008ded 	.word	0x08008ded
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e1c0      	b.n	800914e <UART_SetConfig+0x7ae>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd2:	e1bc      	b.n	800914e <UART_SetConfig+0x7ae>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dda:	e1b8      	b.n	800914e <UART_SetConfig+0x7ae>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e1b4      	b.n	800914e <UART_SetConfig+0x7ae>
 8008de4:	2320      	movs	r3, #32
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dea:	e1b0      	b.n	800914e <UART_SetConfig+0x7ae>
 8008dec:	2340      	movs	r3, #64	@ 0x40
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e1ac      	b.n	800914e <UART_SetConfig+0x7ae>
 8008df4:	2380      	movs	r3, #128	@ 0x80
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e1a8      	b.n	800914e <UART_SetConfig+0x7ae>
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a75      	ldr	r2, [pc, #468]	@ (8008fd8 <UART_SetConfig+0x638>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d130      	bne.n	8008e68 <UART_SetConfig+0x4c8>
 8008e06:	4b73      	ldr	r3, [pc, #460]	@ (8008fd4 <UART_SetConfig+0x634>)
 8008e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e0a:	f003 0307 	and.w	r3, r3, #7
 8008e0e:	2b05      	cmp	r3, #5
 8008e10:	d826      	bhi.n	8008e60 <UART_SetConfig+0x4c0>
 8008e12:	a201      	add	r2, pc, #4	@ (adr r2, 8008e18 <UART_SetConfig+0x478>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e31 	.word	0x08008e31
 8008e1c:	08008e39 	.word	0x08008e39
 8008e20:	08008e41 	.word	0x08008e41
 8008e24:	08008e49 	.word	0x08008e49
 8008e28:	08008e51 	.word	0x08008e51
 8008e2c:	08008e59 	.word	0x08008e59
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e36:	e18a      	b.n	800914e <UART_SetConfig+0x7ae>
 8008e38:	2304      	movs	r3, #4
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e186      	b.n	800914e <UART_SetConfig+0x7ae>
 8008e40:	2308      	movs	r3, #8
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e46:	e182      	b.n	800914e <UART_SetConfig+0x7ae>
 8008e48:	2310      	movs	r3, #16
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4e:	e17e      	b.n	800914e <UART_SetConfig+0x7ae>
 8008e50:	2320      	movs	r3, #32
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e56:	e17a      	b.n	800914e <UART_SetConfig+0x7ae>
 8008e58:	2340      	movs	r3, #64	@ 0x40
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e176      	b.n	800914e <UART_SetConfig+0x7ae>
 8008e60:	2380      	movs	r3, #128	@ 0x80
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e172      	b.n	800914e <UART_SetConfig+0x7ae>
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a5b      	ldr	r2, [pc, #364]	@ (8008fdc <UART_SetConfig+0x63c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d130      	bne.n	8008ed4 <UART_SetConfig+0x534>
 8008e72:	4b58      	ldr	r3, [pc, #352]	@ (8008fd4 <UART_SetConfig+0x634>)
 8008e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b05      	cmp	r3, #5
 8008e7c:	d826      	bhi.n	8008ecc <UART_SetConfig+0x52c>
 8008e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e84 <UART_SetConfig+0x4e4>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008e9d 	.word	0x08008e9d
 8008e88:	08008ea5 	.word	0x08008ea5
 8008e8c:	08008ead 	.word	0x08008ead
 8008e90:	08008eb5 	.word	0x08008eb5
 8008e94:	08008ebd 	.word	0x08008ebd
 8008e98:	08008ec5 	.word	0x08008ec5
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e154      	b.n	800914e <UART_SetConfig+0x7ae>
 8008ea4:	2304      	movs	r3, #4
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e150      	b.n	800914e <UART_SetConfig+0x7ae>
 8008eac:	2308      	movs	r3, #8
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb2:	e14c      	b.n	800914e <UART_SetConfig+0x7ae>
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e148      	b.n	800914e <UART_SetConfig+0x7ae>
 8008ebc:	2320      	movs	r3, #32
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e144      	b.n	800914e <UART_SetConfig+0x7ae>
 8008ec4:	2340      	movs	r3, #64	@ 0x40
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e140      	b.n	800914e <UART_SetConfig+0x7ae>
 8008ecc:	2380      	movs	r3, #128	@ 0x80
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e13c      	b.n	800914e <UART_SetConfig+0x7ae>
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a41      	ldr	r2, [pc, #260]	@ (8008fe0 <UART_SetConfig+0x640>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	f040 8082 	bne.w	8008fe4 <UART_SetConfig+0x644>
 8008ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8008fd4 <UART_SetConfig+0x634>)
 8008ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ee8:	2b28      	cmp	r3, #40	@ 0x28
 8008eea:	d86d      	bhi.n	8008fc8 <UART_SetConfig+0x628>
 8008eec:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <UART_SetConfig+0x554>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f99 	.word	0x08008f99
 8008ef8:	08008fc9 	.word	0x08008fc9
 8008efc:	08008fc9 	.word	0x08008fc9
 8008f00:	08008fc9 	.word	0x08008fc9
 8008f04:	08008fc9 	.word	0x08008fc9
 8008f08:	08008fc9 	.word	0x08008fc9
 8008f0c:	08008fc9 	.word	0x08008fc9
 8008f10:	08008fc9 	.word	0x08008fc9
 8008f14:	08008fa1 	.word	0x08008fa1
 8008f18:	08008fc9 	.word	0x08008fc9
 8008f1c:	08008fc9 	.word	0x08008fc9
 8008f20:	08008fc9 	.word	0x08008fc9
 8008f24:	08008fc9 	.word	0x08008fc9
 8008f28:	08008fc9 	.word	0x08008fc9
 8008f2c:	08008fc9 	.word	0x08008fc9
 8008f30:	08008fc9 	.word	0x08008fc9
 8008f34:	08008fa9 	.word	0x08008fa9
 8008f38:	08008fc9 	.word	0x08008fc9
 8008f3c:	08008fc9 	.word	0x08008fc9
 8008f40:	08008fc9 	.word	0x08008fc9
 8008f44:	08008fc9 	.word	0x08008fc9
 8008f48:	08008fc9 	.word	0x08008fc9
 8008f4c:	08008fc9 	.word	0x08008fc9
 8008f50:	08008fc9 	.word	0x08008fc9
 8008f54:	08008fb1 	.word	0x08008fb1
 8008f58:	08008fc9 	.word	0x08008fc9
 8008f5c:	08008fc9 	.word	0x08008fc9
 8008f60:	08008fc9 	.word	0x08008fc9
 8008f64:	08008fc9 	.word	0x08008fc9
 8008f68:	08008fc9 	.word	0x08008fc9
 8008f6c:	08008fc9 	.word	0x08008fc9
 8008f70:	08008fc9 	.word	0x08008fc9
 8008f74:	08008fb9 	.word	0x08008fb9
 8008f78:	08008fc9 	.word	0x08008fc9
 8008f7c:	08008fc9 	.word	0x08008fc9
 8008f80:	08008fc9 	.word	0x08008fc9
 8008f84:	08008fc9 	.word	0x08008fc9
 8008f88:	08008fc9 	.word	0x08008fc9
 8008f8c:	08008fc9 	.word	0x08008fc9
 8008f90:	08008fc9 	.word	0x08008fc9
 8008f94:	08008fc1 	.word	0x08008fc1
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e0d6      	b.n	800914e <UART_SetConfig+0x7ae>
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa6:	e0d2      	b.n	800914e <UART_SetConfig+0x7ae>
 8008fa8:	2308      	movs	r3, #8
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fae:	e0ce      	b.n	800914e <UART_SetConfig+0x7ae>
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e0ca      	b.n	800914e <UART_SetConfig+0x7ae>
 8008fb8:	2320      	movs	r3, #32
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e0c6      	b.n	800914e <UART_SetConfig+0x7ae>
 8008fc0:	2340      	movs	r3, #64	@ 0x40
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e0c2      	b.n	800914e <UART_SetConfig+0x7ae>
 8008fc8:	2380      	movs	r3, #128	@ 0x80
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e0be      	b.n	800914e <UART_SetConfig+0x7ae>
 8008fd0:	40011400 	.word	0x40011400
 8008fd4:	58024400 	.word	0x58024400
 8008fd8:	40007800 	.word	0x40007800
 8008fdc:	40007c00 	.word	0x40007c00
 8008fe0:	40011800 	.word	0x40011800
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4aad      	ldr	r2, [pc, #692]	@ (80092a0 <UART_SetConfig+0x900>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d176      	bne.n	80090dc <UART_SetConfig+0x73c>
 8008fee:	4bad      	ldr	r3, [pc, #692]	@ (80092a4 <UART_SetConfig+0x904>)
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ff6:	2b28      	cmp	r3, #40	@ 0x28
 8008ff8:	d86c      	bhi.n	80090d4 <UART_SetConfig+0x734>
 8008ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <UART_SetConfig+0x660>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	080090a5 	.word	0x080090a5
 8009004:	080090d5 	.word	0x080090d5
 8009008:	080090d5 	.word	0x080090d5
 800900c:	080090d5 	.word	0x080090d5
 8009010:	080090d5 	.word	0x080090d5
 8009014:	080090d5 	.word	0x080090d5
 8009018:	080090d5 	.word	0x080090d5
 800901c:	080090d5 	.word	0x080090d5
 8009020:	080090ad 	.word	0x080090ad
 8009024:	080090d5 	.word	0x080090d5
 8009028:	080090d5 	.word	0x080090d5
 800902c:	080090d5 	.word	0x080090d5
 8009030:	080090d5 	.word	0x080090d5
 8009034:	080090d5 	.word	0x080090d5
 8009038:	080090d5 	.word	0x080090d5
 800903c:	080090d5 	.word	0x080090d5
 8009040:	080090b5 	.word	0x080090b5
 8009044:	080090d5 	.word	0x080090d5
 8009048:	080090d5 	.word	0x080090d5
 800904c:	080090d5 	.word	0x080090d5
 8009050:	080090d5 	.word	0x080090d5
 8009054:	080090d5 	.word	0x080090d5
 8009058:	080090d5 	.word	0x080090d5
 800905c:	080090d5 	.word	0x080090d5
 8009060:	080090bd 	.word	0x080090bd
 8009064:	080090d5 	.word	0x080090d5
 8009068:	080090d5 	.word	0x080090d5
 800906c:	080090d5 	.word	0x080090d5
 8009070:	080090d5 	.word	0x080090d5
 8009074:	080090d5 	.word	0x080090d5
 8009078:	080090d5 	.word	0x080090d5
 800907c:	080090d5 	.word	0x080090d5
 8009080:	080090c5 	.word	0x080090c5
 8009084:	080090d5 	.word	0x080090d5
 8009088:	080090d5 	.word	0x080090d5
 800908c:	080090d5 	.word	0x080090d5
 8009090:	080090d5 	.word	0x080090d5
 8009094:	080090d5 	.word	0x080090d5
 8009098:	080090d5 	.word	0x080090d5
 800909c:	080090d5 	.word	0x080090d5
 80090a0:	080090cd 	.word	0x080090cd
 80090a4:	2301      	movs	r3, #1
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e050      	b.n	800914e <UART_SetConfig+0x7ae>
 80090ac:	2304      	movs	r3, #4
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e04c      	b.n	800914e <UART_SetConfig+0x7ae>
 80090b4:	2308      	movs	r3, #8
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e048      	b.n	800914e <UART_SetConfig+0x7ae>
 80090bc:	2310      	movs	r3, #16
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e044      	b.n	800914e <UART_SetConfig+0x7ae>
 80090c4:	2320      	movs	r3, #32
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e040      	b.n	800914e <UART_SetConfig+0x7ae>
 80090cc:	2340      	movs	r3, #64	@ 0x40
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e03c      	b.n	800914e <UART_SetConfig+0x7ae>
 80090d4:	2380      	movs	r3, #128	@ 0x80
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090da:	e038      	b.n	800914e <UART_SetConfig+0x7ae>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a71      	ldr	r2, [pc, #452]	@ (80092a8 <UART_SetConfig+0x908>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d130      	bne.n	8009148 <UART_SetConfig+0x7a8>
 80090e6:	4b6f      	ldr	r3, [pc, #444]	@ (80092a4 <UART_SetConfig+0x904>)
 80090e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ea:	f003 0307 	and.w	r3, r3, #7
 80090ee:	2b05      	cmp	r3, #5
 80090f0:	d826      	bhi.n	8009140 <UART_SetConfig+0x7a0>
 80090f2:	a201      	add	r2, pc, #4	@ (adr r2, 80090f8 <UART_SetConfig+0x758>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	08009111 	.word	0x08009111
 80090fc:	08009119 	.word	0x08009119
 8009100:	08009121 	.word	0x08009121
 8009104:	08009129 	.word	0x08009129
 8009108:	08009131 	.word	0x08009131
 800910c:	08009139 	.word	0x08009139
 8009110:	2302      	movs	r3, #2
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e01a      	b.n	800914e <UART_SetConfig+0x7ae>
 8009118:	2304      	movs	r3, #4
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e016      	b.n	800914e <UART_SetConfig+0x7ae>
 8009120:	2308      	movs	r3, #8
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e012      	b.n	800914e <UART_SetConfig+0x7ae>
 8009128:	2310      	movs	r3, #16
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e00e      	b.n	800914e <UART_SetConfig+0x7ae>
 8009130:	2320      	movs	r3, #32
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e00a      	b.n	800914e <UART_SetConfig+0x7ae>
 8009138:	2340      	movs	r3, #64	@ 0x40
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e006      	b.n	800914e <UART_SetConfig+0x7ae>
 8009140:	2380      	movs	r3, #128	@ 0x80
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009146:	e002      	b.n	800914e <UART_SetConfig+0x7ae>
 8009148:	2380      	movs	r3, #128	@ 0x80
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a55      	ldr	r2, [pc, #340]	@ (80092a8 <UART_SetConfig+0x908>)
 8009154:	4293      	cmp	r3, r2
 8009156:	f040 80f8 	bne.w	800934a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800915a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800915e:	2b20      	cmp	r3, #32
 8009160:	dc46      	bgt.n	80091f0 <UART_SetConfig+0x850>
 8009162:	2b02      	cmp	r3, #2
 8009164:	db75      	blt.n	8009252 <UART_SetConfig+0x8b2>
 8009166:	3b02      	subs	r3, #2
 8009168:	2b1e      	cmp	r3, #30
 800916a:	d872      	bhi.n	8009252 <UART_SetConfig+0x8b2>
 800916c:	a201      	add	r2, pc, #4	@ (adr r2, 8009174 <UART_SetConfig+0x7d4>)
 800916e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009172:	bf00      	nop
 8009174:	080091f7 	.word	0x080091f7
 8009178:	08009253 	.word	0x08009253
 800917c:	080091ff 	.word	0x080091ff
 8009180:	08009253 	.word	0x08009253
 8009184:	08009253 	.word	0x08009253
 8009188:	08009253 	.word	0x08009253
 800918c:	0800920f 	.word	0x0800920f
 8009190:	08009253 	.word	0x08009253
 8009194:	08009253 	.word	0x08009253
 8009198:	08009253 	.word	0x08009253
 800919c:	08009253 	.word	0x08009253
 80091a0:	08009253 	.word	0x08009253
 80091a4:	08009253 	.word	0x08009253
 80091a8:	08009253 	.word	0x08009253
 80091ac:	0800921f 	.word	0x0800921f
 80091b0:	08009253 	.word	0x08009253
 80091b4:	08009253 	.word	0x08009253
 80091b8:	08009253 	.word	0x08009253
 80091bc:	08009253 	.word	0x08009253
 80091c0:	08009253 	.word	0x08009253
 80091c4:	08009253 	.word	0x08009253
 80091c8:	08009253 	.word	0x08009253
 80091cc:	08009253 	.word	0x08009253
 80091d0:	08009253 	.word	0x08009253
 80091d4:	08009253 	.word	0x08009253
 80091d8:	08009253 	.word	0x08009253
 80091dc:	08009253 	.word	0x08009253
 80091e0:	08009253 	.word	0x08009253
 80091e4:	08009253 	.word	0x08009253
 80091e8:	08009253 	.word	0x08009253
 80091ec:	08009245 	.word	0x08009245
 80091f0:	2b40      	cmp	r3, #64	@ 0x40
 80091f2:	d02a      	beq.n	800924a <UART_SetConfig+0x8aa>
 80091f4:	e02d      	b.n	8009252 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091f6:	f7fe f851 	bl	800729c <HAL_RCCEx_GetD3PCLK1Freq>
 80091fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091fc:	e02f      	b.n	800925e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe f860 	bl	80072c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800920c:	e027      	b.n	800925e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800920e:	f107 0318 	add.w	r3, r7, #24
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe f9ac 	bl	8007570 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921c:	e01f      	b.n	800925e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800921e:	4b21      	ldr	r3, [pc, #132]	@ (80092a4 <UART_SetConfig+0x904>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0320 	and.w	r3, r3, #32
 8009226:	2b00      	cmp	r3, #0
 8009228:	d009      	beq.n	800923e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800922a:	4b1e      	ldr	r3, [pc, #120]	@ (80092a4 <UART_SetConfig+0x904>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	08db      	lsrs	r3, r3, #3
 8009230:	f003 0303 	and.w	r3, r3, #3
 8009234:	4a1d      	ldr	r2, [pc, #116]	@ (80092ac <UART_SetConfig+0x90c>)
 8009236:	fa22 f303 	lsr.w	r3, r2, r3
 800923a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800923c:	e00f      	b.n	800925e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800923e:	4b1b      	ldr	r3, [pc, #108]	@ (80092ac <UART_SetConfig+0x90c>)
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009242:	e00c      	b.n	800925e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009244:	4b1a      	ldr	r3, [pc, #104]	@ (80092b0 <UART_SetConfig+0x910>)
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009248:	e009      	b.n	800925e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800924a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009250:	e005      	b.n	800925e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800925c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800925e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 81ee 	beq.w	8009642 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926a:	4a12      	ldr	r2, [pc, #72]	@ (80092b4 <UART_SetConfig+0x914>)
 800926c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009270:	461a      	mov	r2, r3
 8009272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009274:	fbb3 f3f2 	udiv	r3, r3, r2
 8009278:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	4413      	add	r3, r2
 8009284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009286:	429a      	cmp	r2, r3
 8009288:	d305      	bcc.n	8009296 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	429a      	cmp	r2, r3
 8009294:	d910      	bls.n	80092b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800929c:	e1d1      	b.n	8009642 <UART_SetConfig+0xca2>
 800929e:	bf00      	nop
 80092a0:	40011c00 	.word	0x40011c00
 80092a4:	58024400 	.word	0x58024400
 80092a8:	58000c00 	.word	0x58000c00
 80092ac:	03d09000 	.word	0x03d09000
 80092b0:	003d0900 	.word	0x003d0900
 80092b4:	0800ba98 	.word	0x0800ba98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ba:	2200      	movs	r2, #0
 80092bc:	60bb      	str	r3, [r7, #8]
 80092be:	60fa      	str	r2, [r7, #12]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	4ac0      	ldr	r2, [pc, #768]	@ (80095c8 <UART_SetConfig+0xc28>)
 80092c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	2200      	movs	r2, #0
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	607a      	str	r2, [r7, #4]
 80092d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092da:	f7f7 f809 	bl	80002f0 <__aeabi_uldivmod>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4610      	mov	r0, r2
 80092e4:	4619      	mov	r1, r3
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	020b      	lsls	r3, r1, #8
 80092f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092f4:	0202      	lsls	r2, r0, #8
 80092f6:	6979      	ldr	r1, [r7, #20]
 80092f8:	6849      	ldr	r1, [r1, #4]
 80092fa:	0849      	lsrs	r1, r1, #1
 80092fc:	2000      	movs	r0, #0
 80092fe:	460c      	mov	r4, r1
 8009300:	4605      	mov	r5, r0
 8009302:	eb12 0804 	adds.w	r8, r2, r4
 8009306:	eb43 0905 	adc.w	r9, r3, r5
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	469a      	mov	sl, r3
 8009312:	4693      	mov	fp, r2
 8009314:	4652      	mov	r2, sl
 8009316:	465b      	mov	r3, fp
 8009318:	4640      	mov	r0, r8
 800931a:	4649      	mov	r1, r9
 800931c:	f7f6 ffe8 	bl	80002f0 <__aeabi_uldivmod>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4613      	mov	r3, r2
 8009326:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800932e:	d308      	bcc.n	8009342 <UART_SetConfig+0x9a2>
 8009330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009332:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009336:	d204      	bcs.n	8009342 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800933e:	60da      	str	r2, [r3, #12]
 8009340:	e17f      	b.n	8009642 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009348:	e17b      	b.n	8009642 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009352:	f040 80bd 	bne.w	80094d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009356:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800935a:	2b20      	cmp	r3, #32
 800935c:	dc48      	bgt.n	80093f0 <UART_SetConfig+0xa50>
 800935e:	2b00      	cmp	r3, #0
 8009360:	db7b      	blt.n	800945a <UART_SetConfig+0xaba>
 8009362:	2b20      	cmp	r3, #32
 8009364:	d879      	bhi.n	800945a <UART_SetConfig+0xaba>
 8009366:	a201      	add	r2, pc, #4	@ (adr r2, 800936c <UART_SetConfig+0x9cc>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	080093f7 	.word	0x080093f7
 8009370:	080093ff 	.word	0x080093ff
 8009374:	0800945b 	.word	0x0800945b
 8009378:	0800945b 	.word	0x0800945b
 800937c:	08009407 	.word	0x08009407
 8009380:	0800945b 	.word	0x0800945b
 8009384:	0800945b 	.word	0x0800945b
 8009388:	0800945b 	.word	0x0800945b
 800938c:	08009417 	.word	0x08009417
 8009390:	0800945b 	.word	0x0800945b
 8009394:	0800945b 	.word	0x0800945b
 8009398:	0800945b 	.word	0x0800945b
 800939c:	0800945b 	.word	0x0800945b
 80093a0:	0800945b 	.word	0x0800945b
 80093a4:	0800945b 	.word	0x0800945b
 80093a8:	0800945b 	.word	0x0800945b
 80093ac:	08009427 	.word	0x08009427
 80093b0:	0800945b 	.word	0x0800945b
 80093b4:	0800945b 	.word	0x0800945b
 80093b8:	0800945b 	.word	0x0800945b
 80093bc:	0800945b 	.word	0x0800945b
 80093c0:	0800945b 	.word	0x0800945b
 80093c4:	0800945b 	.word	0x0800945b
 80093c8:	0800945b 	.word	0x0800945b
 80093cc:	0800945b 	.word	0x0800945b
 80093d0:	0800945b 	.word	0x0800945b
 80093d4:	0800945b 	.word	0x0800945b
 80093d8:	0800945b 	.word	0x0800945b
 80093dc:	0800945b 	.word	0x0800945b
 80093e0:	0800945b 	.word	0x0800945b
 80093e4:	0800945b 	.word	0x0800945b
 80093e8:	0800945b 	.word	0x0800945b
 80093ec:	0800944d 	.word	0x0800944d
 80093f0:	2b40      	cmp	r3, #64	@ 0x40
 80093f2:	d02e      	beq.n	8009452 <UART_SetConfig+0xab2>
 80093f4:	e031      	b.n	800945a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f6:	f7fc fd67 	bl	8005ec8 <HAL_RCC_GetPCLK1Freq>
 80093fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093fc:	e033      	b.n	8009466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093fe:	f7fc fd79 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 8009402:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009404:	e02f      	b.n	8009466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800940a:	4618      	mov	r0, r3
 800940c:	f7fd ff5c 	bl	80072c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009414:	e027      	b.n	8009466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009416:	f107 0318 	add.w	r3, r7, #24
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe f8a8 	bl	8007570 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009424:	e01f      	b.n	8009466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009426:	4b69      	ldr	r3, [pc, #420]	@ (80095cc <UART_SetConfig+0xc2c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0320 	and.w	r3, r3, #32
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009432:	4b66      	ldr	r3, [pc, #408]	@ (80095cc <UART_SetConfig+0xc2c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	08db      	lsrs	r3, r3, #3
 8009438:	f003 0303 	and.w	r3, r3, #3
 800943c:	4a64      	ldr	r2, [pc, #400]	@ (80095d0 <UART_SetConfig+0xc30>)
 800943e:	fa22 f303 	lsr.w	r3, r2, r3
 8009442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009444:	e00f      	b.n	8009466 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009446:	4b62      	ldr	r3, [pc, #392]	@ (80095d0 <UART_SetConfig+0xc30>)
 8009448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944a:	e00c      	b.n	8009466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800944c:	4b61      	ldr	r3, [pc, #388]	@ (80095d4 <UART_SetConfig+0xc34>)
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	e009      	b.n	8009466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009458:	e005      	b.n	8009466 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 80ea 	beq.w	8009642 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009472:	4a55      	ldr	r2, [pc, #340]	@ (80095c8 <UART_SetConfig+0xc28>)
 8009474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009478:	461a      	mov	r2, r3
 800947a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009480:	005a      	lsls	r2, r3, #1
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	441a      	add	r2, r3
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009492:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009496:	2b0f      	cmp	r3, #15
 8009498:	d916      	bls.n	80094c8 <UART_SetConfig+0xb28>
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094a0:	d212      	bcs.n	80094c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	f023 030f 	bic.w	r3, r3, #15
 80094aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094ba:	4313      	orrs	r3, r2
 80094bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80094c4:	60da      	str	r2, [r3, #12]
 80094c6:	e0bc      	b.n	8009642 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094ce:	e0b8      	b.n	8009642 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094d4:	2b20      	cmp	r3, #32
 80094d6:	dc4b      	bgt.n	8009570 <UART_SetConfig+0xbd0>
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f2c0 8087 	blt.w	80095ec <UART_SetConfig+0xc4c>
 80094de:	2b20      	cmp	r3, #32
 80094e0:	f200 8084 	bhi.w	80095ec <UART_SetConfig+0xc4c>
 80094e4:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <UART_SetConfig+0xb4c>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	08009577 	.word	0x08009577
 80094f0:	0800957f 	.word	0x0800957f
 80094f4:	080095ed 	.word	0x080095ed
 80094f8:	080095ed 	.word	0x080095ed
 80094fc:	08009587 	.word	0x08009587
 8009500:	080095ed 	.word	0x080095ed
 8009504:	080095ed 	.word	0x080095ed
 8009508:	080095ed 	.word	0x080095ed
 800950c:	08009597 	.word	0x08009597
 8009510:	080095ed 	.word	0x080095ed
 8009514:	080095ed 	.word	0x080095ed
 8009518:	080095ed 	.word	0x080095ed
 800951c:	080095ed 	.word	0x080095ed
 8009520:	080095ed 	.word	0x080095ed
 8009524:	080095ed 	.word	0x080095ed
 8009528:	080095ed 	.word	0x080095ed
 800952c:	080095a7 	.word	0x080095a7
 8009530:	080095ed 	.word	0x080095ed
 8009534:	080095ed 	.word	0x080095ed
 8009538:	080095ed 	.word	0x080095ed
 800953c:	080095ed 	.word	0x080095ed
 8009540:	080095ed 	.word	0x080095ed
 8009544:	080095ed 	.word	0x080095ed
 8009548:	080095ed 	.word	0x080095ed
 800954c:	080095ed 	.word	0x080095ed
 8009550:	080095ed 	.word	0x080095ed
 8009554:	080095ed 	.word	0x080095ed
 8009558:	080095ed 	.word	0x080095ed
 800955c:	080095ed 	.word	0x080095ed
 8009560:	080095ed 	.word	0x080095ed
 8009564:	080095ed 	.word	0x080095ed
 8009568:	080095ed 	.word	0x080095ed
 800956c:	080095df 	.word	0x080095df
 8009570:	2b40      	cmp	r3, #64	@ 0x40
 8009572:	d037      	beq.n	80095e4 <UART_SetConfig+0xc44>
 8009574:	e03a      	b.n	80095ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009576:	f7fc fca7 	bl	8005ec8 <HAL_RCC_GetPCLK1Freq>
 800957a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800957c:	e03c      	b.n	80095f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800957e:	f7fc fcb9 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 8009582:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009584:	e038      	b.n	80095f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800958a:	4618      	mov	r0, r3
 800958c:	f7fd fe9c 	bl	80072c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009594:	e030      	b.n	80095f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009596:	f107 0318 	add.w	r3, r7, #24
 800959a:	4618      	mov	r0, r3
 800959c:	f7fd ffe8 	bl	8007570 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a4:	e028      	b.n	80095f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095a6:	4b09      	ldr	r3, [pc, #36]	@ (80095cc <UART_SetConfig+0xc2c>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d012      	beq.n	80095d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095b2:	4b06      	ldr	r3, [pc, #24]	@ (80095cc <UART_SetConfig+0xc2c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	08db      	lsrs	r3, r3, #3
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	4a04      	ldr	r2, [pc, #16]	@ (80095d0 <UART_SetConfig+0xc30>)
 80095be:	fa22 f303 	lsr.w	r3, r2, r3
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095c4:	e018      	b.n	80095f8 <UART_SetConfig+0xc58>
 80095c6:	bf00      	nop
 80095c8:	0800ba98 	.word	0x0800ba98
 80095cc:	58024400 	.word	0x58024400
 80095d0:	03d09000 	.word	0x03d09000
 80095d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80095d8:	4b24      	ldr	r3, [pc, #144]	@ (800966c <UART_SetConfig+0xccc>)
 80095da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095dc:	e00c      	b.n	80095f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095de:	4b24      	ldr	r3, [pc, #144]	@ (8009670 <UART_SetConfig+0xcd0>)
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e2:	e009      	b.n	80095f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ea:	e005      	b.n	80095f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095f6:	bf00      	nop
    }

    if (pclk != 0U)
 80095f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d021      	beq.n	8009642 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009602:	4a1c      	ldr	r2, [pc, #112]	@ (8009674 <UART_SetConfig+0xcd4>)
 8009604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009608:	461a      	mov	r2, r3
 800960a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800960c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	085b      	lsrs	r3, r3, #1
 8009616:	441a      	add	r2, r3
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009620:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009624:	2b0f      	cmp	r3, #15
 8009626:	d909      	bls.n	800963c <UART_SetConfig+0xc9c>
 8009628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800962e:	d205      	bcs.n	800963c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009632:	b29a      	uxth	r2, r3
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	60da      	str	r2, [r3, #12]
 800963a:	e002      	b.n	8009642 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2201      	movs	r2, #1
 8009646:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2201      	movs	r2, #1
 800964e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2200      	movs	r2, #0
 8009656:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2200      	movs	r2, #0
 800965c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800965e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009662:	4618      	mov	r0, r3
 8009664:	3748      	adds	r7, #72	@ 0x48
 8009666:	46bd      	mov	sp, r7
 8009668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800966c:	03d09000 	.word	0x03d09000
 8009670:	003d0900 	.word	0x003d0900
 8009674:	0800ba98 	.word	0x0800ba98

08009678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	f003 0308 	and.w	r3, r3, #8
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ea:	f003 0304 	and.w	r3, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00a      	beq.n	800972a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01a      	beq.n	800978e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009776:	d10a      	bne.n	800978e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	430a      	orrs	r2, r1
 80097ae:	605a      	str	r2, [r3, #4]
  }
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b098      	sub	sp, #96	@ 0x60
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097cc:	f7f7 fd44 	bl	8001258 <HAL_GetTick>
 80097d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0308 	and.w	r3, r3, #8
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d12f      	bne.n	8009840 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097e8:	2200      	movs	r2, #0
 80097ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f88e 	bl	8009910 <UART_WaitOnFlagUntilTimeout>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d022      	beq.n	8009840 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800980a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800980e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009818:	647b      	str	r3, [r7, #68]	@ 0x44
 800981a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800981e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e6      	bne.n	80097fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	e063      	b.n	8009908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	2b04      	cmp	r3, #4
 800984c:	d149      	bne.n	80098e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800984e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009856:	2200      	movs	r2, #0
 8009858:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f857 	bl	8009910 <UART_WaitOnFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d03c      	beq.n	80098e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	623b      	str	r3, [r7, #32]
   return(result);
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800987c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009886:	633b      	str	r3, [r7, #48]	@ 0x30
 8009888:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800988c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e6      	bne.n	8009868 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3308      	adds	r3, #8
 80098a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f023 0301 	bic.w	r3, r3, #1
 80098b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098ba:	61fa      	str	r2, [r7, #28]
 80098bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	69b9      	ldr	r1, [r7, #24]
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	617b      	str	r3, [r7, #20]
   return(result);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e5      	bne.n	800989a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e012      	b.n	8009908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3758      	adds	r7, #88	@ 0x58
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	603b      	str	r3, [r7, #0]
 800991c:	4613      	mov	r3, r2
 800991e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009920:	e04f      	b.n	80099c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d04b      	beq.n	80099c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800992a:	f7f7 fc95 	bl	8001258 <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	429a      	cmp	r2, r3
 8009938:	d302      	bcc.n	8009940 <UART_WaitOnFlagUntilTimeout+0x30>
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e04e      	b.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0304 	and.w	r3, r3, #4
 800994e:	2b00      	cmp	r3, #0
 8009950:	d037      	beq.n	80099c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b80      	cmp	r3, #128	@ 0x80
 8009956:	d034      	beq.n	80099c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2b40      	cmp	r3, #64	@ 0x40
 800995c:	d031      	beq.n	80099c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	2b08      	cmp	r3, #8
 800996a:	d110      	bne.n	800998e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2208      	movs	r2, #8
 8009972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 f921 	bl	8009bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2208      	movs	r2, #8
 800997e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e029      	b.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800999c:	d111      	bne.n	80099c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 f907 	bl	8009bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e00f      	b.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	69da      	ldr	r2, [r3, #28]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	4013      	ands	r3, r2
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	bf0c      	ite	eq
 80099d2:	2301      	moveq	r3, #1
 80099d4:	2300      	movne	r3, #0
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	461a      	mov	r2, r3
 80099da:	79fb      	ldrb	r3, [r7, #7]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d0a0      	beq.n	8009922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b096      	sub	sp, #88	@ 0x58
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	88fa      	ldrh	r2, [r7, #6]
 8009a04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2222      	movs	r2, #34	@ 0x22
 8009a14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d02d      	beq.n	8009a7e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a28:	4a40      	ldr	r2, [pc, #256]	@ (8009b2c <UART_Start_Receive_DMA+0x140>)
 8009a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a32:	4a3f      	ldr	r2, [pc, #252]	@ (8009b30 <UART_Start_Receive_DMA+0x144>)
 8009a34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8009b34 <UART_Start_Receive_DMA+0x148>)
 8009a3e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a46:	2200      	movs	r2, #0
 8009a48:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3324      	adds	r3, #36	@ 0x24
 8009a56:	4619      	mov	r1, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	f7f8 fbd2 	bl	8002208 <HAL_DMA_Start_IT>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2210      	movs	r2, #16
 8009a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e051      	b.n	8009b22 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d018      	beq.n	8009ab8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aa6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e6      	bne.n	8009a86 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3308      	adds	r3, #8
 8009abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	f043 0301 	orr.w	r3, r3, #1
 8009ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ad8:	637a      	str	r2, [r7, #52]	@ 0x34
 8009ada:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e5      	bne.n	8009ab8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3308      	adds	r3, #8
 8009af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	613b      	str	r3, [r7, #16]
   return(result);
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3308      	adds	r3, #8
 8009b0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b0c:	623a      	str	r2, [r7, #32]
 8009b0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	69f9      	ldr	r1, [r7, #28]
 8009b12:	6a3a      	ldr	r2, [r7, #32]
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e5      	bne.n	8009aec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3758      	adds	r7, #88	@ 0x58
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	08009c89 	.word	0x08009c89
 8009b30:	08009db1 	.word	0x08009db1
 8009b34:	08009def 	.word	0x08009def

08009b38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b08f      	sub	sp, #60	@ 0x3c
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b60:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b66:	e841 2300 	strex	r3, r2, [r1]
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e6      	bne.n	8009b40 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3308      	adds	r3, #8
 8009b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	e853 3f00 	ldrex	r3, [r3]
 8009b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b92:	61ba      	str	r2, [r7, #24]
 8009b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b96:	6979      	ldr	r1, [r7, #20]
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e5      	bne.n	8009b72 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009bae:	bf00      	nop
 8009bb0:	373c      	adds	r7, #60	@ 0x3c
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b095      	sub	sp, #84	@ 0x54
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009be2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009be4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009be8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bea:	e841 2300 	strex	r3, r2, [r1]
 8009bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e6      	bne.n	8009bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	4b1e      	ldr	r3, [pc, #120]	@ (8009c84 <UART_EndRxTransfer+0xc8>)
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3308      	adds	r3, #8
 8009c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e5      	bne.n	8009bf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d118      	bne.n	8009c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	e853 3f00 	ldrex	r3, [r3]
 8009c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f023 0310 	bic.w	r3, r3, #16
 8009c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	6979      	ldr	r1, [r7, #20]
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e6      	bne.n	8009c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c78:	bf00      	nop
 8009c7a:	3754      	adds	r7, #84	@ 0x54
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	effffffe 	.word	0xeffffffe

08009c88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b09c      	sub	sp, #112	@ 0x70
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c94:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c9e:	d071      	beq.n	8009d84 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ccc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e6      	bne.n	8009ca8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cec:	f023 0301 	bic.w	r3, r3, #1
 8009cf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009cfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e5      	bne.n	8009cda <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3308      	adds	r3, #8
 8009d14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d24:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e5      	bne.n	8009d0e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d44:	2220      	movs	r2, #32
 8009d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d118      	bne.n	8009d84 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f023 0310 	bic.w	r3, r3, #16
 8009d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d70:	61fb      	str	r3, [r7, #28]
 8009d72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	69b9      	ldr	r1, [r7, #24]
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e6      	bne.n	8009d52 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d86:	2200      	movs	r2, #0
 8009d88:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d107      	bne.n	8009da2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d9c:	f7fe fdf4 	bl	8008988 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009da0:	e002      	b.n	8009da8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009da2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009da4:	f7f6 ff48 	bl	8000c38 <HAL_UART_RxCpltCallback>
}
 8009da8:	bf00      	nop
 8009daa:	3770      	adds	r7, #112	@ 0x70
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d109      	bne.n	8009de0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009dd2:	085b      	lsrs	r3, r3, #1
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7fe fdd5 	bl	8008988 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dde:	e002      	b.n	8009de6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f7fe fdbd 	bl	8008960 <HAL_UART_RxHalfCpltCallback>
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e16:	2b80      	cmp	r3, #128	@ 0x80
 8009e18:	d109      	bne.n	8009e2e <UART_DMAError+0x40>
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2b21      	cmp	r3, #33	@ 0x21
 8009e1e:	d106      	bne.n	8009e2e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009e28:	6978      	ldr	r0, [r7, #20]
 8009e2a:	f7ff fe85 	bl	8009b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e38:	2b40      	cmp	r3, #64	@ 0x40
 8009e3a:	d109      	bne.n	8009e50 <UART_DMAError+0x62>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b22      	cmp	r3, #34	@ 0x22
 8009e40:	d106      	bne.n	8009e50 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009e4a:	6978      	ldr	r0, [r7, #20]
 8009e4c:	f7ff feb6 	bl	8009bbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e56:	f043 0210 	orr.w	r2, r3, #16
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e60:	6978      	ldr	r0, [r7, #20]
 8009e62:	f7fe fd87 	bl	8008974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e66:	bf00      	nop
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7fe fd71 	bl	8008974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e92:	bf00      	nop
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b088      	sub	sp, #32
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	e853 3f00 	ldrex	r3, [r3]
 8009eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eb6:	61fb      	str	r3, [r7, #28]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	6979      	ldr	r1, [r7, #20]
 8009ec6:	69ba      	ldr	r2, [r7, #24]
 8009ec8:	e841 2300 	strex	r3, r2, [r1]
 8009ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e6      	bne.n	8009ea2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fe fd32 	bl	800894c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ee8:	bf00      	nop
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d101      	bne.n	8009f42 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f3e:	2302      	movs	r3, #2
 8009f40:	e027      	b.n	8009f92 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2224      	movs	r2, #36	@ 0x24
 8009f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0201 	bic.w	r2, r2, #1
 8009f68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d101      	bne.n	8009fb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e02d      	b.n	800a012 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2224      	movs	r2, #36	@ 0x24
 8009fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0201 	bic.w	r2, r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f850 	bl	800a098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2220      	movs	r2, #32
 800a004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a02e:	2302      	movs	r3, #2
 800a030:	e02d      	b.n	800a08e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2224      	movs	r2, #36	@ 0x24
 800a03e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 0201 	bic.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f812 	bl	800a098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2220      	movs	r2, #32
 800a080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d108      	bne.n	800a0ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0b8:	e031      	b.n	800a11e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0ba:	2310      	movs	r3, #16
 800a0bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0be:	2310      	movs	r3, #16
 800a0c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	0e5b      	lsrs	r3, r3, #25
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	f003 0307 	and.w	r3, r3, #7
 800a0d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	0f5b      	lsrs	r3, r3, #29
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	7b3a      	ldrb	r2, [r7, #12]
 800a0e6:	4911      	ldr	r1, [pc, #68]	@ (800a12c <UARTEx_SetNbDataToProcess+0x94>)
 800a0e8:	5c8a      	ldrb	r2, [r1, r2]
 800a0ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0ee:	7b3a      	ldrb	r2, [r7, #12]
 800a0f0:	490f      	ldr	r1, [pc, #60]	@ (800a130 <UARTEx_SetNbDataToProcess+0x98>)
 800a0f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	7b7a      	ldrb	r2, [r7, #13]
 800a104:	4909      	ldr	r1, [pc, #36]	@ (800a12c <UARTEx_SetNbDataToProcess+0x94>)
 800a106:	5c8a      	ldrb	r2, [r1, r2]
 800a108:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a10c:	7b7a      	ldrb	r2, [r7, #13]
 800a10e:	4908      	ldr	r1, [pc, #32]	@ (800a130 <UARTEx_SetNbDataToProcess+0x98>)
 800a110:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a112:	fb93 f3f2 	sdiv	r3, r3, r2
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	0800bab0 	.word	0x0800bab0
 800a130:	0800bab8 	.word	0x0800bab8

0800a134 <arm_conv_f32>:
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	b08b      	sub	sp, #44	@ 0x2c
 800a13a:	4299      	cmp	r1, r3
 800a13c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a13e:	d205      	bcs.n	800a14c <arm_conv_f32+0x18>
 800a140:	4606      	mov	r6, r0
 800a142:	460c      	mov	r4, r1
 800a144:	4610      	mov	r0, r2
 800a146:	4619      	mov	r1, r3
 800a148:	4632      	mov	r2, r6
 800a14a:	4623      	mov	r3, r4
 800a14c:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800a150:	3101      	adds	r1, #1
 800a152:	1ac9      	subs	r1, r1, r3
 800a154:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a158:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800a15c:	9101      	str	r1, [sp, #4]
 800a15e:	1e59      	subs	r1, r3, #1
 800a160:	eb02 070b 	add.w	r7, r2, fp
 800a164:	f000 8277 	beq.w	800a656 <arm_conv_f32+0x522>
 800a168:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800a428 <arm_conv_f32+0x2f4>
 800a16c:	f102 0904 	add.w	r9, r2, #4
 800a170:	46aa      	mov	sl, r5
 800a172:	4680      	mov	r8, r0
 800a174:	2401      	movs	r4, #1
 800a176:	f014 0603 	ands.w	r6, r4, #3
 800a17a:	d01b      	beq.n	800a1b4 <arm_conv_f32+0x80>
 800a17c:	ed92 7a00 	vldr	s14, [r2]
 800a180:	edd8 6a00 	vldr	s13, [r8]
 800a184:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a188:	3e01      	subs	r6, #1
 800a18a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a18e:	d011      	beq.n	800a1b4 <arm_conv_f32+0x80>
 800a190:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a194:	edd8 6a01 	vldr	s13, [r8, #4]
 800a198:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a19c:	2e01      	cmp	r6, #1
 800a19e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1a2:	d007      	beq.n	800a1b4 <arm_conv_f32+0x80>
 800a1a4:	ed98 7a02 	vldr	s14, [r8, #8]
 800a1a8:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a1ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a1b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1b4:	3401      	adds	r4, #1
 800a1b6:	42a3      	cmp	r3, r4
 800a1b8:	ecea 7a01 	vstmia	sl!, {s15}
 800a1bc:	464a      	mov	r2, r9
 800a1be:	d03a      	beq.n	800a236 <arm_conv_f32+0x102>
 800a1c0:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800a1c4:	f000 824c 	beq.w	800a660 <arm_conv_f32+0x52c>
 800a1c8:	f100 0210 	add.w	r2, r0, #16
 800a1cc:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800a1d0:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800a428 <arm_conv_f32+0x2f4>
 800a1d4:	eb02 0c08 	add.w	ip, r2, r8
 800a1d8:	f1a9 0610 	sub.w	r6, r9, #16
 800a1dc:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a1e0:	edd6 3a04 	vldr	s7, [r6, #16]
 800a1e4:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a1e8:	ed96 4a03 	vldr	s8, [r6, #12]
 800a1ec:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a1f0:	edd6 4a02 	vldr	s9, [r6, #8]
 800a1f4:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a1f8:	ed96 5a01 	vldr	s10, [r6, #4]
 800a1fc:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a200:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a204:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a208:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800a20c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a210:	ee65 6a85 	vmul.f32	s13, s11, s10
 800a214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a218:	3210      	adds	r2, #16
 800a21a:	4594      	cmp	ip, r2
 800a21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a220:	f1a6 0610 	sub.w	r6, r6, #16
 800a224:	d1da      	bne.n	800a1dc <arm_conv_f32+0xa8>
 800a226:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800a22a:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800a22e:	4480      	add	r8, r0
 800a230:	f109 0904 	add.w	r9, r9, #4
 800a234:	e79f      	b.n	800a176 <arm_conv_f32+0x42>
 800a236:	2b03      	cmp	r3, #3
 800a238:	445d      	add	r5, fp
 800a23a:	f240 80e9 	bls.w	800a410 <arm_conv_f32+0x2dc>
 800a23e:	9b01      	ldr	r3, [sp, #4]
 800a240:	089a      	lsrs	r2, r3, #2
 800a242:	9202      	str	r2, [sp, #8]
 800a244:	f000 8203 	beq.w	800a64e <arm_conv_f32+0x51a>
 800a248:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800a24c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800a250:	0112      	lsls	r2, r2, #4
 800a252:	f004 0603 	and.w	r6, r4, #3
 800a256:	9203      	str	r2, [sp, #12]
 800a258:	f1a3 0a10 	sub.w	sl, r3, #16
 800a25c:	f1a3 020c 	sub.w	r2, r3, #12
 800a260:	3b08      	subs	r3, #8
 800a262:	9204      	str	r2, [sp, #16]
 800a264:	9305      	str	r3, [sp, #20]
 800a266:	f106 39ff 	add.w	r9, r6, #4294967295
 800a26a:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800a26e:	9a03      	ldr	r2, [sp, #12]
 800a270:	f100 0c1c 	add.w	ip, r0, #28
 800a274:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800a278:	464c      	mov	r4, r9
 800a27a:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800a27e:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800a282:	f1a7 0310 	sub.w	r3, r7, #16
 800a286:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800a28a:	eb05 0b02 	add.w	fp, r5, r2
 800a28e:	461f      	mov	r7, r3
 800a290:	3510      	adds	r5, #16
 800a292:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800a428 <arm_conv_f32+0x2f4>
 800a296:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800a29a:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800a29e:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800a2a2:	eeb0 5a46 	vmov.f32	s10, s12
 800a2a6:	eef0 4a46 	vmov.f32	s9, s12
 800a2aa:	eef0 5a46 	vmov.f32	s11, s12
 800a2ae:	463a      	mov	r2, r7
 800a2b0:	4663      	mov	r3, ip
 800a2b2:	4641      	mov	r1, r8
 800a2b4:	edd2 6a04 	vldr	s13, [r2, #16]
 800a2b8:	ed13 0a04 	vldr	s0, [r3, #-16]
 800a2bc:	ed92 7a03 	vldr	s14, [r2, #12]
 800a2c0:	edd2 7a02 	vldr	s15, [r2, #8]
 800a2c4:	edd2 0a01 	vldr	s1, [r2, #4]
 800a2c8:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800a2cc:	ee62 3a26 	vmul.f32	s7, s4, s13
 800a2d0:	ee61 2a26 	vmul.f32	s5, s2, s13
 800a2d4:	ed13 1a03 	vldr	s2, [r3, #-12]
 800a2d8:	ee66 6a80 	vmul.f32	s13, s13, s0
 800a2dc:	ee21 4a87 	vmul.f32	s8, s3, s14
 800a2e0:	ee73 4a24 	vadd.f32	s9, s6, s9
 800a2e4:	ee33 5a85 	vadd.f32	s10, s7, s10
 800a2e8:	ee22 3a07 	vmul.f32	s6, s4, s14
 800a2ec:	ed53 1a02 	vldr	s3, [r3, #-8]
 800a2f0:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800a2f4:	ee36 6a86 	vadd.f32	s12, s13, s12
 800a2f8:	ee60 3a07 	vmul.f32	s7, s0, s14
 800a2fc:	ee27 7a01 	vmul.f32	s14, s14, s2
 800a300:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a304:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a308:	ee74 2a22 	vadd.f32	s5, s8, s5
 800a30c:	ee60 4a27 	vmul.f32	s9, s0, s15
 800a310:	ee22 4a27 	vmul.f32	s8, s4, s15
 800a314:	ee73 3a85 	vadd.f32	s7, s7, s10
 800a318:	ed13 2a01 	vldr	s4, [r3, #-4]
 800a31c:	ee21 5a27 	vmul.f32	s10, s2, s15
 800a320:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800a324:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a32c:	ee34 4a22 	vadd.f32	s8, s8, s5
 800a330:	ee60 5a20 	vmul.f32	s11, s0, s1
 800a334:	ee21 3a20 	vmul.f32	s6, s2, s1
 800a338:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a33c:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800a340:	ee20 6a82 	vmul.f32	s12, s1, s4
 800a344:	3901      	subs	r1, #1
 800a346:	f1a2 0210 	sub.w	r2, r2, #16
 800a34a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800a34e:	ee73 4a24 	vadd.f32	s9, s6, s9
 800a352:	ee37 5a05 	vadd.f32	s10, s14, s10
 800a356:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a35a:	f103 0310 	add.w	r3, r3, #16
 800a35e:	d1a9      	bne.n	800a2b4 <arm_conv_f32+0x180>
 800a360:	eb0a 030c 	add.w	r3, sl, ip
 800a364:	2e00      	cmp	r6, #0
 800a366:	d042      	beq.n	800a3ee <arm_conv_f32+0x2ba>
 800a368:	edde 7a00 	vldr	s15, [lr]
 800a36c:	ed93 4a00 	vldr	s8, [r3]
 800a370:	ee61 6a27 	vmul.f32	s13, s2, s15
 800a374:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800a378:	ee22 7a27 	vmul.f32	s14, s4, s15
 800a37c:	ee64 7a27 	vmul.f32	s15, s8, s15
 800a380:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800a384:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a388:	ee35 5a07 	vadd.f32	s10, s10, s14
 800a38c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a390:	eb09 030c 	add.w	r3, r9, ip
 800a394:	b35c      	cbz	r4, 800a3ee <arm_conv_f32+0x2ba>
 800a396:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800a39a:	edd3 6a00 	vldr	s13, [r3]
 800a39e:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800a3a2:	ee22 3a27 	vmul.f32	s6, s4, s15
 800a3a6:	ee67 3a84 	vmul.f32	s7, s15, s8
 800a3aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3ae:	2c01      	cmp	r4, #1
 800a3b0:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a3b4:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a3b8:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a3bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a3c0:	eb00 030c 	add.w	r3, r0, ip
 800a3c4:	d013      	beq.n	800a3ee <arm_conv_f32+0x2ba>
 800a3c6:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800a3ca:	edd3 3a00 	vldr	s7, [r3]
 800a3ce:	ee62 7a07 	vmul.f32	s15, s4, s14
 800a3d2:	ee27 4a04 	vmul.f32	s8, s14, s8
 800a3d6:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a3da:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a3de:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a3e2:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a3e6:	ee35 5a26 	vadd.f32	s10, s10, s13
 800a3ea:	ee36 6a07 	vadd.f32	s12, s12, s14
 800a3ee:	45ab      	cmp	fp, r5
 800a3f0:	ed45 5a04 	vstr	s11, [r5, #-16]
 800a3f4:	ed45 4a03 	vstr	s9, [r5, #-12]
 800a3f8:	ed05 5a02 	vstr	s10, [r5, #-8]
 800a3fc:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a400:	f10c 0c10 	add.w	ip, ip, #16
 800a404:	f105 0310 	add.w	r3, r5, #16
 800a408:	f000 809e 	beq.w	800a548 <arm_conv_f32+0x414>
 800a40c:	461d      	mov	r5, r3
 800a40e:	e740      	b.n	800a292 <arm_conv_f32+0x15e>
 800a410:	9a01      	ldr	r2, [sp, #4]
 800a412:	46ac      	mov	ip, r5
 800a414:	2a00      	cmp	r2, #0
 800a416:	d037      	beq.n	800a488 <arm_conv_f32+0x354>
 800a418:	9a01      	ldr	r2, [sp, #4]
 800a41a:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800a428 <arm_conv_f32+0x2f4>
 800a41e:	0096      	lsls	r6, r2, #2
 800a420:	eb05 0c06 	add.w	ip, r5, r6
 800a424:	4604      	mov	r4, r0
 800a426:	e021      	b.n	800a46c <arm_conv_f32+0x338>
 800a428:	00000000 	.word	0x00000000
 800a42c:	edd7 7a00 	vldr	s15, [r7]
 800a430:	ecb2 7a01 	vldmia	r2!, {s14}
 800a434:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a438:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a43c:	b189      	cbz	r1, 800a462 <arm_conv_f32+0x32e>
 800a43e:	ed17 7a01 	vldr	s14, [r7, #-4]
 800a442:	edd4 6a01 	vldr	s13, [r4, #4]
 800a446:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a450:	d007      	beq.n	800a462 <arm_conv_f32+0x32e>
 800a452:	ed94 7a02 	vldr	s14, [r4, #8]
 800a456:	ed57 6a02 	vldr	s13, [r7, #-8]
 800a45a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a45e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a462:	ece5 7a01 	vstmia	r5!, {s15}
 800a466:	4565      	cmp	r5, ip
 800a468:	4614      	mov	r4, r2
 800a46a:	d00a      	beq.n	800a482 <arm_conv_f32+0x34e>
 800a46c:	4622      	mov	r2, r4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1dc      	bne.n	800a42c <arm_conv_f32+0x2f8>
 800a472:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800a428 <arm_conv_f32+0x2f4>
 800a476:	ece5 7a01 	vstmia	r5!, {s15}
 800a47a:	1d22      	adds	r2, r4, #4
 800a47c:	4565      	cmp	r5, ip
 800a47e:	4614      	mov	r4, r2
 800a480:	d1f4      	bne.n	800a46c <arm_conv_f32+0x338>
 800a482:	4430      	add	r0, r6
 800a484:	2900      	cmp	r1, #0
 800a486:	d059      	beq.n	800a53c <arm_conv_f32+0x408>
 800a488:	088d      	lsrs	r5, r1, #2
 800a48a:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800a428 <arm_conv_f32+0x2f4>
 800a48e:	d058      	beq.n	800a542 <arm_conv_f32+0x40e>
 800a490:	f100 0210 	add.w	r2, r0, #16
 800a494:	f1a7 0310 	sub.w	r3, r7, #16
 800a498:	462c      	mov	r4, r5
 800a49a:	ed52 6a04 	vldr	s13, [r2, #-16]
 800a49e:	edd3 3a04 	vldr	s7, [r3, #16]
 800a4a2:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a4a6:	ed93 4a03 	vldr	s8, [r3, #12]
 800a4aa:	ed52 7a02 	vldr	s15, [r2, #-8]
 800a4ae:	edd3 4a02 	vldr	s9, [r3, #8]
 800a4b2:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a4b6:	ed93 5a01 	vldr	s10, [r3, #4]
 800a4ba:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a4be:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a4c2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a4c6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a4ca:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a4ce:	ee66 6a05 	vmul.f32	s13, s12, s10
 800a4d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4d6:	3c01      	subs	r4, #1
 800a4d8:	f102 0210 	add.w	r2, r2, #16
 800a4dc:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800a4e0:	f1a3 0310 	sub.w	r3, r3, #16
 800a4e4:	d1d9      	bne.n	800a49a <arm_conv_f32+0x366>
 800a4e6:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800a4ea:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800a4ee:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800a4f2:	f011 0203 	ands.w	r2, r1, #3
 800a4f6:	d01b      	beq.n	800a530 <arm_conv_f32+0x3fc>
 800a4f8:	edd3 7a00 	vldr	s15, [r3]
 800a4fc:	ed95 7a00 	vldr	s14, [r5]
 800a500:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a504:	3a01      	subs	r2, #1
 800a506:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a50a:	d011      	beq.n	800a530 <arm_conv_f32+0x3fc>
 800a50c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a510:	ed95 7a01 	vldr	s14, [r5, #4]
 800a514:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a518:	2a01      	cmp	r2, #1
 800a51a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a51e:	d007      	beq.n	800a530 <arm_conv_f32+0x3fc>
 800a520:	edd5 7a02 	vldr	s15, [r5, #8]
 800a524:	ed13 7a02 	vldr	s14, [r3, #-8]
 800a528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a52c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a530:	3901      	subs	r1, #1
 800a532:	ecec 5a01 	vstmia	ip!, {s11}
 800a536:	f100 0004 	add.w	r0, r0, #4
 800a53a:	d1a5      	bne.n	800a488 <arm_conv_f32+0x354>
 800a53c:	b00b      	add	sp, #44	@ 0x2c
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	463b      	mov	r3, r7
 800a544:	4605      	mov	r5, r0
 800a546:	e7d4      	b.n	800a4f2 <arm_conv_f32+0x3be>
 800a548:	9b02      	ldr	r3, [sp, #8]
 800a54a:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	9302      	str	r3, [sp, #8]
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800a558:	4403      	add	r3, r0
 800a55a:	465d      	mov	r5, fp
 800a55c:	469e      	mov	lr, r3
 800a55e:	9b01      	ldr	r3, [sp, #4]
 800a560:	f013 0c03 	ands.w	ip, r3, #3
 800a564:	d075      	beq.n	800a652 <arm_conv_f32+0x51e>
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800a56c:	f004 0403 	and.w	r4, r4, #3
 800a570:	f104 3bff 	add.w	fp, r4, #4294967295
 800a574:	f103 0801 	add.w	r8, r3, #1
 800a578:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800a57c:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800a580:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800a584:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800a588:	f1a7 0210 	sub.w	r2, r7, #16
 800a58c:	4618      	mov	r0, r3
 800a58e:	465b      	mov	r3, fp
 800a590:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800a594:	468b      	mov	fp, r1
 800a596:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800a59a:	4621      	mov	r1, r4
 800a59c:	4617      	mov	r7, r2
 800a59e:	461c      	mov	r4, r3
 800a5a0:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800a428 <arm_conv_f32+0x2f4>
 800a5a4:	f10e 0210 	add.w	r2, lr, #16
 800a5a8:	463b      	mov	r3, r7
 800a5aa:	4656      	mov	r6, sl
 800a5ac:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a5b0:	edd3 3a04 	vldr	s7, [r3, #16]
 800a5b4:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a5b8:	ed93 4a03 	vldr	s8, [r3, #12]
 800a5bc:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a5c0:	edd3 4a02 	vldr	s9, [r3, #8]
 800a5c4:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a5c8:	ed93 5a01 	vldr	s10, [r3, #4]
 800a5cc:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a5d0:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a5d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5d8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800a5dc:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a5e0:	ee65 6a85 	vmul.f32	s13, s11, s10
 800a5e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5e8:	3e01      	subs	r6, #1
 800a5ea:	f102 0210 	add.w	r2, r2, #16
 800a5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f2:	f1a3 0310 	sub.w	r3, r3, #16
 800a5f6:	d1d9      	bne.n	800a5ac <arm_conv_f32+0x478>
 800a5f8:	4486      	add	lr, r0
 800a5fa:	b1d1      	cbz	r1, 800a632 <arm_conv_f32+0x4fe>
 800a5fc:	ed99 7a00 	vldr	s14, [r9]
 800a600:	edde 6a00 	vldr	s13, [lr]
 800a604:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a608:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a60c:	b18c      	cbz	r4, 800a632 <arm_conv_f32+0x4fe>
 800a60e:	ed19 7a01 	vldr	s14, [r9, #-4]
 800a612:	edde 6a01 	vldr	s13, [lr, #4]
 800a616:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a61a:	2c01      	cmp	r4, #1
 800a61c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a620:	d007      	beq.n	800a632 <arm_conv_f32+0x4fe>
 800a622:	ed9e 7a02 	vldr	s14, [lr, #8]
 800a626:	ed59 6a02 	vldr	s13, [r9, #-8]
 800a62a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a62e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a632:	ece5 7a01 	vstmia	r5!, {s15}
 800a636:	4565      	cmp	r5, ip
 800a638:	46c6      	mov	lr, r8
 800a63a:	f108 0804 	add.w	r8, r8, #4
 800a63e:	d1af      	bne.n	800a5a0 <arm_conv_f32+0x46c>
 800a640:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800a644:	4659      	mov	r1, fp
 800a646:	9b01      	ldr	r3, [sp, #4]
 800a648:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a64c:	e71c      	b.n	800a488 <arm_conv_f32+0x354>
 800a64e:	4686      	mov	lr, r0
 800a650:	e785      	b.n	800a55e <arm_conv_f32+0x42a>
 800a652:	46ac      	mov	ip, r5
 800a654:	e7f7      	b.n	800a646 <arm_conv_f32+0x512>
 800a656:	9a01      	ldr	r2, [sp, #4]
 800a658:	2a00      	cmp	r2, #0
 800a65a:	f47f aedd 	bne.w	800a418 <arm_conv_f32+0x2e4>
 800a65e:	e76d      	b.n	800a53c <arm_conv_f32+0x408>
 800a660:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800a428 <arm_conv_f32+0x2f4>
 800a664:	4680      	mov	r8, r0
 800a666:	e5e3      	b.n	800a230 <arm_conv_f32+0xfc>

0800a668 <memset>:
 800a668:	4402      	add	r2, r0
 800a66a:	4603      	mov	r3, r0
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d100      	bne.n	800a672 <memset+0xa>
 800a670:	4770      	bx	lr
 800a672:	f803 1b01 	strb.w	r1, [r3], #1
 800a676:	e7f9      	b.n	800a66c <memset+0x4>

0800a678 <__libc_init_array>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	4d0d      	ldr	r5, [pc, #52]	@ (800a6b0 <__libc_init_array+0x38>)
 800a67c:	4c0d      	ldr	r4, [pc, #52]	@ (800a6b4 <__libc_init_array+0x3c>)
 800a67e:	1b64      	subs	r4, r4, r5
 800a680:	10a4      	asrs	r4, r4, #2
 800a682:	2600      	movs	r6, #0
 800a684:	42a6      	cmp	r6, r4
 800a686:	d109      	bne.n	800a69c <__libc_init_array+0x24>
 800a688:	4d0b      	ldr	r5, [pc, #44]	@ (800a6b8 <__libc_init_array+0x40>)
 800a68a:	4c0c      	ldr	r4, [pc, #48]	@ (800a6bc <__libc_init_array+0x44>)
 800a68c:	f000 fde4 	bl	800b258 <_init>
 800a690:	1b64      	subs	r4, r4, r5
 800a692:	10a4      	asrs	r4, r4, #2
 800a694:	2600      	movs	r6, #0
 800a696:	42a6      	cmp	r6, r4
 800a698:	d105      	bne.n	800a6a6 <__libc_init_array+0x2e>
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a0:	4798      	blx	r3
 800a6a2:	3601      	adds	r6, #1
 800a6a4:	e7ee      	b.n	800a684 <__libc_init_array+0xc>
 800a6a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6aa:	4798      	blx	r3
 800a6ac:	3601      	adds	r6, #1
 800a6ae:	e7f2      	b.n	800a696 <__libc_init_array+0x1e>
 800a6b0:	0800bca0 	.word	0x0800bca0
 800a6b4:	0800bca0 	.word	0x0800bca0
 800a6b8:	0800bca0 	.word	0x0800bca0
 800a6bc:	0800bca4 	.word	0x0800bca4

0800a6c0 <cos>:
 800a6c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6c2:	eeb0 7b40 	vmov.f64	d7, d0
 800a6c6:	ee17 3a90 	vmov	r3, s15
 800a6ca:	4a21      	ldr	r2, [pc, #132]	@ (800a750 <cos+0x90>)
 800a6cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d806      	bhi.n	800a6e2 <cos+0x22>
 800a6d4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800a748 <cos+0x88>
 800a6d8:	b005      	add	sp, #20
 800a6da:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6de:	f000 b83b 	b.w	800a758 <__kernel_cos>
 800a6e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a754 <cos+0x94>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d904      	bls.n	800a6f2 <cos+0x32>
 800a6e8:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a6ec:	b005      	add	sp, #20
 800a6ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6f2:	4668      	mov	r0, sp
 800a6f4:	f000 f8f0 	bl	800a8d8 <__ieee754_rem_pio2>
 800a6f8:	f000 0003 	and.w	r0, r0, #3
 800a6fc:	2801      	cmp	r0, #1
 800a6fe:	d009      	beq.n	800a714 <cos+0x54>
 800a700:	2802      	cmp	r0, #2
 800a702:	d010      	beq.n	800a726 <cos+0x66>
 800a704:	b9b0      	cbnz	r0, 800a734 <cos+0x74>
 800a706:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a70a:	ed9d 0b00 	vldr	d0, [sp]
 800a70e:	f000 f823 	bl	800a758 <__kernel_cos>
 800a712:	e7eb      	b.n	800a6ec <cos+0x2c>
 800a714:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a718:	ed9d 0b00 	vldr	d0, [sp]
 800a71c:	f000 f884 	bl	800a828 <__kernel_sin>
 800a720:	eeb1 0b40 	vneg.f64	d0, d0
 800a724:	e7e2      	b.n	800a6ec <cos+0x2c>
 800a726:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a72a:	ed9d 0b00 	vldr	d0, [sp]
 800a72e:	f000 f813 	bl	800a758 <__kernel_cos>
 800a732:	e7f5      	b.n	800a720 <cos+0x60>
 800a734:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a738:	ed9d 0b00 	vldr	d0, [sp]
 800a73c:	2001      	movs	r0, #1
 800a73e:	f000 f873 	bl	800a828 <__kernel_sin>
 800a742:	e7d3      	b.n	800a6ec <cos+0x2c>
 800a744:	f3af 8000 	nop.w
	...
 800a750:	3fe921fb 	.word	0x3fe921fb
 800a754:	7fefffff 	.word	0x7fefffff

0800a758 <__kernel_cos>:
 800a758:	eeb0 5b40 	vmov.f64	d5, d0
 800a75c:	ee15 1a90 	vmov	r1, s11
 800a760:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a764:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a768:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800a76c:	d204      	bcs.n	800a778 <__kernel_cos+0x20>
 800a76e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800a772:	ee17 3a90 	vmov	r3, s15
 800a776:	b343      	cbz	r3, 800a7ca <__kernel_cos+0x72>
 800a778:	ee25 6b05 	vmul.f64	d6, d5, d5
 800a77c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800a780:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800a7f0 <__kernel_cos+0x98>
 800a784:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a7f8 <__kernel_cos+0xa0>
 800a788:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a78c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a800 <__kernel_cos+0xa8>
 800a790:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a794:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a808 <__kernel_cos+0xb0>
 800a798:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a79c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a810 <__kernel_cos+0xb8>
 800a7a0:	4b1f      	ldr	r3, [pc, #124]	@ (800a820 <__kernel_cos+0xc8>)
 800a7a2:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a7a6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a818 <__kernel_cos+0xc0>
 800a7aa:	4299      	cmp	r1, r3
 800a7ac:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a7b0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a7b4:	ee24 4b06 	vmul.f64	d4, d4, d6
 800a7b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a7bc:	eea6 1b04 	vfma.f64	d1, d6, d4
 800a7c0:	d804      	bhi.n	800a7cc <__kernel_cos+0x74>
 800a7c2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a7c6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a7ca:	4770      	bx	lr
 800a7cc:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <__kernel_cos+0xcc>)
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	d809      	bhi.n	800a7e6 <__kernel_cos+0x8e>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800a7d8:	ec43 2b16 	vmov	d6, r2, r3
 800a7dc:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a7e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a7e4:	e7ed      	b.n	800a7c2 <__kernel_cos+0x6a>
 800a7e6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800a7ea:	e7f7      	b.n	800a7dc <__kernel_cos+0x84>
 800a7ec:	f3af 8000 	nop.w
 800a7f0:	be8838d4 	.word	0xbe8838d4
 800a7f4:	bda8fae9 	.word	0xbda8fae9
 800a7f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a7fc:	3e21ee9e 	.word	0x3e21ee9e
 800a800:	809c52ad 	.word	0x809c52ad
 800a804:	be927e4f 	.word	0xbe927e4f
 800a808:	19cb1590 	.word	0x19cb1590
 800a80c:	3efa01a0 	.word	0x3efa01a0
 800a810:	16c15177 	.word	0x16c15177
 800a814:	bf56c16c 	.word	0xbf56c16c
 800a818:	5555554c 	.word	0x5555554c
 800a81c:	3fa55555 	.word	0x3fa55555
 800a820:	3fd33332 	.word	0x3fd33332
 800a824:	3fe90000 	.word	0x3fe90000

0800a828 <__kernel_sin>:
 800a828:	ee10 3a90 	vmov	r3, s1
 800a82c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a830:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a834:	d204      	bcs.n	800a840 <__kernel_sin+0x18>
 800a836:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a83a:	ee17 3a90 	vmov	r3, s15
 800a83e:	b35b      	cbz	r3, 800a898 <__kernel_sin+0x70>
 800a840:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a844:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a848:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800a8a0 <__kernel_sin+0x78>
 800a84c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a8a8 <__kernel_sin+0x80>
 800a850:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a854:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a8b0 <__kernel_sin+0x88>
 800a858:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a85c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a8b8 <__kernel_sin+0x90>
 800a860:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a864:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a8c0 <__kernel_sin+0x98>
 800a868:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a86c:	b930      	cbnz	r0, 800a87c <__kernel_sin+0x54>
 800a86e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a8c8 <__kernel_sin+0xa0>
 800a872:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a876:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a87a:	4770      	bx	lr
 800a87c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a880:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800a884:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a888:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a88c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a8d0 <__kernel_sin+0xa8>
 800a890:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a894:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	f3af 8000 	nop.w
 800a8a0:	5acfd57c 	.word	0x5acfd57c
 800a8a4:	3de5d93a 	.word	0x3de5d93a
 800a8a8:	8a2b9ceb 	.word	0x8a2b9ceb
 800a8ac:	be5ae5e6 	.word	0xbe5ae5e6
 800a8b0:	57b1fe7d 	.word	0x57b1fe7d
 800a8b4:	3ec71de3 	.word	0x3ec71de3
 800a8b8:	19c161d5 	.word	0x19c161d5
 800a8bc:	bf2a01a0 	.word	0xbf2a01a0
 800a8c0:	1110f8a6 	.word	0x1110f8a6
 800a8c4:	3f811111 	.word	0x3f811111
 800a8c8:	55555549 	.word	0x55555549
 800a8cc:	bfc55555 	.word	0xbfc55555
 800a8d0:	55555549 	.word	0x55555549
 800a8d4:	3fc55555 	.word	0x3fc55555

0800a8d8 <__ieee754_rem_pio2>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	eeb0 7b40 	vmov.f64	d7, d0
 800a8de:	ee17 5a90 	vmov	r5, s15
 800a8e2:	4b99      	ldr	r3, [pc, #612]	@ (800ab48 <__ieee754_rem_pio2+0x270>)
 800a8e4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a8e8:	429e      	cmp	r6, r3
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	d807      	bhi.n	800a900 <__ieee754_rem_pio2+0x28>
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	ed84 0b00 	vstr	d0, [r4]
 800a8f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e01b      	b.n	800a938 <__ieee754_rem_pio2+0x60>
 800a900:	4b92      	ldr	r3, [pc, #584]	@ (800ab4c <__ieee754_rem_pio2+0x274>)
 800a902:	429e      	cmp	r6, r3
 800a904:	d83b      	bhi.n	800a97e <__ieee754_rem_pio2+0xa6>
 800a906:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ab08 <__ieee754_rem_pio2+0x230>
 800a910:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800a914:	dd19      	ble.n	800a94a <__ieee754_rem_pio2+0x72>
 800a916:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a91a:	429e      	cmp	r6, r3
 800a91c:	d00e      	beq.n	800a93c <__ieee754_rem_pio2+0x64>
 800a91e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800ab10 <__ieee754_rem_pio2+0x238>
 800a922:	ee37 6b45 	vsub.f64	d6, d7, d5
 800a926:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a92a:	ed84 6b00 	vstr	d6, [r4]
 800a92e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a932:	ed84 7b02 	vstr	d7, [r4, #8]
 800a936:	2001      	movs	r0, #1
 800a938:	b008      	add	sp, #32
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ab18 <__ieee754_rem_pio2+0x240>
 800a940:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ab20 <__ieee754_rem_pio2+0x248>
 800a944:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a948:	e7eb      	b.n	800a922 <__ieee754_rem_pio2+0x4a>
 800a94a:	429e      	cmp	r6, r3
 800a94c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a950:	d00e      	beq.n	800a970 <__ieee754_rem_pio2+0x98>
 800a952:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800ab10 <__ieee754_rem_pio2+0x238>
 800a956:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a95a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a95e:	ed84 6b00 	vstr	d6, [r4]
 800a962:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a966:	f04f 30ff 	mov.w	r0, #4294967295
 800a96a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a96e:	e7e3      	b.n	800a938 <__ieee754_rem_pio2+0x60>
 800a970:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ab18 <__ieee754_rem_pio2+0x240>
 800a974:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ab20 <__ieee754_rem_pio2+0x248>
 800a978:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a97c:	e7eb      	b.n	800a956 <__ieee754_rem_pio2+0x7e>
 800a97e:	4b74      	ldr	r3, [pc, #464]	@ (800ab50 <__ieee754_rem_pio2+0x278>)
 800a980:	429e      	cmp	r6, r3
 800a982:	d870      	bhi.n	800aa66 <__ieee754_rem_pio2+0x18e>
 800a984:	f000 f8ec 	bl	800ab60 <fabs>
 800a988:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a98c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ab28 <__ieee754_rem_pio2+0x250>
 800a990:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a994:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a998:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a99c:	ee17 0a90 	vmov	r0, s15
 800a9a0:	eeb1 4b45 	vneg.f64	d4, d5
 800a9a4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ab08 <__ieee754_rem_pio2+0x230>
 800a9a8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a9ac:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ab10 <__ieee754_rem_pio2+0x238>
 800a9b0:	281f      	cmp	r0, #31
 800a9b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a9b6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a9ba:	dc05      	bgt.n	800a9c8 <__ieee754_rem_pio2+0xf0>
 800a9bc:	4b65      	ldr	r3, [pc, #404]	@ (800ab54 <__ieee754_rem_pio2+0x27c>)
 800a9be:	1e42      	subs	r2, r0, #1
 800a9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c4:	42b3      	cmp	r3, r6
 800a9c6:	d109      	bne.n	800a9dc <__ieee754_rem_pio2+0x104>
 800a9c8:	ee16 3a90 	vmov	r3, s13
 800a9cc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a9d0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a9d4:	2b10      	cmp	r3, #16
 800a9d6:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a9da:	dc02      	bgt.n	800a9e2 <__ieee754_rem_pio2+0x10a>
 800a9dc:	ed84 6b00 	vstr	d6, [r4]
 800a9e0:	e01a      	b.n	800aa18 <__ieee754_rem_pio2+0x140>
 800a9e2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ab18 <__ieee754_rem_pio2+0x240>
 800a9e6:	eeb0 6b40 	vmov.f64	d6, d0
 800a9ea:	eea4 6b03 	vfma.f64	d6, d4, d3
 800a9ee:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a9f2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a9f6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ab20 <__ieee754_rem_pio2+0x248>
 800a9fa:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a9fe:	ee36 3b47 	vsub.f64	d3, d6, d7
 800aa02:	ee13 3a90 	vmov	r3, s7
 800aa06:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	2b31      	cmp	r3, #49	@ 0x31
 800aa0e:	dc17      	bgt.n	800aa40 <__ieee754_rem_pio2+0x168>
 800aa10:	eeb0 0b46 	vmov.f64	d0, d6
 800aa14:	ed84 3b00 	vstr	d3, [r4]
 800aa18:	ed94 6b00 	vldr	d6, [r4]
 800aa1c:	2d00      	cmp	r5, #0
 800aa1e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800aa22:	ee30 0b47 	vsub.f64	d0, d0, d7
 800aa26:	ed84 0b02 	vstr	d0, [r4, #8]
 800aa2a:	da85      	bge.n	800a938 <__ieee754_rem_pio2+0x60>
 800aa2c:	eeb1 6b46 	vneg.f64	d6, d6
 800aa30:	eeb1 0b40 	vneg.f64	d0, d0
 800aa34:	ed84 6b00 	vstr	d6, [r4]
 800aa38:	ed84 0b02 	vstr	d0, [r4, #8]
 800aa3c:	4240      	negs	r0, r0
 800aa3e:	e77b      	b.n	800a938 <__ieee754_rem_pio2+0x60>
 800aa40:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ab30 <__ieee754_rem_pio2+0x258>
 800aa44:	eeb0 0b46 	vmov.f64	d0, d6
 800aa48:	eea4 0b07 	vfma.f64	d0, d4, d7
 800aa4c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800aa50:	eea4 6b07 	vfma.f64	d6, d4, d7
 800aa54:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800ab38 <__ieee754_rem_pio2+0x260>
 800aa58:	eeb0 7b46 	vmov.f64	d7, d6
 800aa5c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800aa60:	ee30 6b47 	vsub.f64	d6, d0, d7
 800aa64:	e7ba      	b.n	800a9dc <__ieee754_rem_pio2+0x104>
 800aa66:	4b3c      	ldr	r3, [pc, #240]	@ (800ab58 <__ieee754_rem_pio2+0x280>)
 800aa68:	429e      	cmp	r6, r3
 800aa6a:	d906      	bls.n	800aa7a <__ieee754_rem_pio2+0x1a2>
 800aa6c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800aa70:	ed80 7b02 	vstr	d7, [r0, #8]
 800aa74:	ed80 7b00 	vstr	d7, [r0]
 800aa78:	e740      	b.n	800a8fc <__ieee754_rem_pio2+0x24>
 800aa7a:	ee10 3a10 	vmov	r3, s0
 800aa7e:	1532      	asrs	r2, r6, #20
 800aa80:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800aa84:	4618      	mov	r0, r3
 800aa86:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800aa8a:	ec41 0b17 	vmov	d7, r0, r1
 800aa8e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aa92:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800ab40 <__ieee754_rem_pio2+0x268>
 800aa96:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aa9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa9e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800aaa2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aaa6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aaaa:	a808      	add	r0, sp, #32
 800aaac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aab0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aab4:	ed8d 6b04 	vstr	d6, [sp, #16]
 800aab8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aabc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aac0:	2103      	movs	r1, #3
 800aac2:	ed30 7b02 	vldmdb	r0!, {d7}
 800aac6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aaca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aace:	460b      	mov	r3, r1
 800aad0:	f101 31ff 	add.w	r1, r1, #4294967295
 800aad4:	d0f5      	beq.n	800aac2 <__ieee754_rem_pio2+0x1ea>
 800aad6:	4921      	ldr	r1, [pc, #132]	@ (800ab5c <__ieee754_rem_pio2+0x284>)
 800aad8:	9101      	str	r1, [sp, #4]
 800aada:	2102      	movs	r1, #2
 800aadc:	9100      	str	r1, [sp, #0]
 800aade:	a802      	add	r0, sp, #8
 800aae0:	4621      	mov	r1, r4
 800aae2:	f000 f845 	bl	800ab70 <__kernel_rem_pio2>
 800aae6:	2d00      	cmp	r5, #0
 800aae8:	f6bf af26 	bge.w	800a938 <__ieee754_rem_pio2+0x60>
 800aaec:	ed94 7b00 	vldr	d7, [r4]
 800aaf0:	eeb1 7b47 	vneg.f64	d7, d7
 800aaf4:	ed84 7b00 	vstr	d7, [r4]
 800aaf8:	ed94 7b02 	vldr	d7, [r4, #8]
 800aafc:	eeb1 7b47 	vneg.f64	d7, d7
 800ab00:	ed84 7b02 	vstr	d7, [r4, #8]
 800ab04:	e79a      	b.n	800aa3c <__ieee754_rem_pio2+0x164>
 800ab06:	bf00      	nop
 800ab08:	54400000 	.word	0x54400000
 800ab0c:	3ff921fb 	.word	0x3ff921fb
 800ab10:	1a626331 	.word	0x1a626331
 800ab14:	3dd0b461 	.word	0x3dd0b461
 800ab18:	1a600000 	.word	0x1a600000
 800ab1c:	3dd0b461 	.word	0x3dd0b461
 800ab20:	2e037073 	.word	0x2e037073
 800ab24:	3ba3198a 	.word	0x3ba3198a
 800ab28:	6dc9c883 	.word	0x6dc9c883
 800ab2c:	3fe45f30 	.word	0x3fe45f30
 800ab30:	2e000000 	.word	0x2e000000
 800ab34:	3ba3198a 	.word	0x3ba3198a
 800ab38:	252049c1 	.word	0x252049c1
 800ab3c:	397b839a 	.word	0x397b839a
 800ab40:	00000000 	.word	0x00000000
 800ab44:	41700000 	.word	0x41700000
 800ab48:	3fe921fb 	.word	0x3fe921fb
 800ab4c:	4002d97b 	.word	0x4002d97b
 800ab50:	413921fb 	.word	0x413921fb
 800ab54:	0800bac0 	.word	0x0800bac0
 800ab58:	7fefffff 	.word	0x7fefffff
 800ab5c:	0800bb40 	.word	0x0800bb40

0800ab60 <fabs>:
 800ab60:	ec51 0b10 	vmov	r0, r1, d0
 800ab64:	4602      	mov	r2, r0
 800ab66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab6a:	ec43 2b10 	vmov	d0, r2, r3
 800ab6e:	4770      	bx	lr

0800ab70 <__kernel_rem_pio2>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	ed2d 8b06 	vpush	{d8-d10}
 800ab78:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800ab7c:	469b      	mov	fp, r3
 800ab7e:	9001      	str	r0, [sp, #4]
 800ab80:	4bbb      	ldr	r3, [pc, #748]	@ (800ae70 <__kernel_rem_pio2+0x300>)
 800ab82:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800ab84:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800ab88:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800ab8c:	f112 0f14 	cmn.w	r2, #20
 800ab90:	bfa8      	it	ge
 800ab92:	1ed3      	subge	r3, r2, #3
 800ab94:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ab98:	bfb8      	it	lt
 800ab9a:	2300      	movlt	r3, #0
 800ab9c:	f06f 0517 	mvn.w	r5, #23
 800aba0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800ae58 <__kernel_rem_pio2+0x2e8>
 800aba4:	bfa4      	itt	ge
 800aba6:	2018      	movge	r0, #24
 800aba8:	fb93 f3f0 	sdivge	r3, r3, r0
 800abac:	fb03 5505 	mla	r5, r3, r5, r5
 800abb0:	eba3 040a 	sub.w	r4, r3, sl
 800abb4:	4415      	add	r5, r2
 800abb6:	460f      	mov	r7, r1
 800abb8:	eb09 060a 	add.w	r6, r9, sl
 800abbc:	a81a      	add	r0, sp, #104	@ 0x68
 800abbe:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800abc2:	2200      	movs	r2, #0
 800abc4:	42b2      	cmp	r2, r6
 800abc6:	dd0e      	ble.n	800abe6 <__kernel_rem_pio2+0x76>
 800abc8:	aa1a      	add	r2, sp, #104	@ 0x68
 800abca:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800abce:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800abd2:	2600      	movs	r6, #0
 800abd4:	454e      	cmp	r6, r9
 800abd6:	dc25      	bgt.n	800ac24 <__kernel_rem_pio2+0xb4>
 800abd8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800ae58 <__kernel_rem_pio2+0x2e8>
 800abdc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800abe0:	4614      	mov	r4, r2
 800abe2:	2000      	movs	r0, #0
 800abe4:	e015      	b.n	800ac12 <__kernel_rem_pio2+0xa2>
 800abe6:	42d4      	cmn	r4, r2
 800abe8:	d409      	bmi.n	800abfe <__kernel_rem_pio2+0x8e>
 800abea:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800abee:	ee07 1a90 	vmov	s15, r1
 800abf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800abf6:	eca0 7b02 	vstmia	r0!, {d7}
 800abfa:	3201      	adds	r2, #1
 800abfc:	e7e2      	b.n	800abc4 <__kernel_rem_pio2+0x54>
 800abfe:	eeb0 7b46 	vmov.f64	d7, d6
 800ac02:	e7f8      	b.n	800abf6 <__kernel_rem_pio2+0x86>
 800ac04:	ecbc 5b02 	vldmia	ip!, {d5}
 800ac08:	ed94 6b00 	vldr	d6, [r4]
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac12:	4550      	cmp	r0, sl
 800ac14:	f1a4 0408 	sub.w	r4, r4, #8
 800ac18:	ddf4      	ble.n	800ac04 <__kernel_rem_pio2+0x94>
 800ac1a:	ecae 7b02 	vstmia	lr!, {d7}
 800ac1e:	3601      	adds	r6, #1
 800ac20:	3208      	adds	r2, #8
 800ac22:	e7d7      	b.n	800abd4 <__kernel_rem_pio2+0x64>
 800ac24:	aa06      	add	r2, sp, #24
 800ac26:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800ae60 <__kernel_rem_pio2+0x2f0>
 800ac2a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800ae68 <__kernel_rem_pio2+0x2f8>
 800ac2e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ac32:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800ac36:	9203      	str	r2, [sp, #12]
 800ac38:	9302      	str	r3, [sp, #8]
 800ac3a:	464c      	mov	r4, r9
 800ac3c:	00e3      	lsls	r3, r4, #3
 800ac3e:	9304      	str	r3, [sp, #16]
 800ac40:	ab92      	add	r3, sp, #584	@ 0x248
 800ac42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac46:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800ac4a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800ac4c:	ab06      	add	r3, sp, #24
 800ac4e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ac52:	461e      	mov	r6, r3
 800ac54:	4620      	mov	r0, r4
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f1a2 0208 	sub.w	r2, r2, #8
 800ac5c:	dc4a      	bgt.n	800acf4 <__kernel_rem_pio2+0x184>
 800ac5e:	4628      	mov	r0, r5
 800ac60:	9305      	str	r3, [sp, #20]
 800ac62:	f000 fa01 	bl	800b068 <scalbn>
 800ac66:	eeb0 8b40 	vmov.f64	d8, d0
 800ac6a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800ac6e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ac72:	f000 fa79 	bl	800b168 <floor>
 800ac76:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800ac7a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ac7e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	ee17 8a90 	vmov	r8, s15
 800ac88:	9b05      	ldr	r3, [sp, #20]
 800ac8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac8e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ac92:	dd41      	ble.n	800ad18 <__kernel_rem_pio2+0x1a8>
 800ac94:	1e60      	subs	r0, r4, #1
 800ac96:	aa06      	add	r2, sp, #24
 800ac98:	f1c5 0c18 	rsb	ip, r5, #24
 800ac9c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800aca0:	fa46 f20c 	asr.w	r2, r6, ip
 800aca4:	4490      	add	r8, r2
 800aca6:	fa02 f20c 	lsl.w	r2, r2, ip
 800acaa:	1ab6      	subs	r6, r6, r2
 800acac:	aa06      	add	r2, sp, #24
 800acae:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800acb2:	f1c5 0217 	rsb	r2, r5, #23
 800acb6:	4116      	asrs	r6, r2
 800acb8:	2e00      	cmp	r6, #0
 800acba:	dd3c      	ble.n	800ad36 <__kernel_rem_pio2+0x1c6>
 800acbc:	f04f 0c00 	mov.w	ip, #0
 800acc0:	f108 0801 	add.w	r8, r8, #1
 800acc4:	4660      	mov	r0, ip
 800acc6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800acca:	4564      	cmp	r4, ip
 800accc:	dc66      	bgt.n	800ad9c <__kernel_rem_pio2+0x22c>
 800acce:	2d00      	cmp	r5, #0
 800acd0:	dd03      	ble.n	800acda <__kernel_rem_pio2+0x16a>
 800acd2:	2d01      	cmp	r5, #1
 800acd4:	d072      	beq.n	800adbc <__kernel_rem_pio2+0x24c>
 800acd6:	2d02      	cmp	r5, #2
 800acd8:	d07a      	beq.n	800add0 <__kernel_rem_pio2+0x260>
 800acda:	2e02      	cmp	r6, #2
 800acdc:	d12b      	bne.n	800ad36 <__kernel_rem_pio2+0x1c6>
 800acde:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ace2:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ace6:	b330      	cbz	r0, 800ad36 <__kernel_rem_pio2+0x1c6>
 800ace8:	4628      	mov	r0, r5
 800acea:	f000 f9bd 	bl	800b068 <scalbn>
 800acee:	ee38 8b40 	vsub.f64	d8, d8, d0
 800acf2:	e020      	b.n	800ad36 <__kernel_rem_pio2+0x1c6>
 800acf4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800acf8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800acfc:	3801      	subs	r0, #1
 800acfe:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ad02:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ad06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ad0a:	eca6 0a01 	vstmia	r6!, {s0}
 800ad0e:	ed92 0b00 	vldr	d0, [r2]
 800ad12:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ad16:	e79e      	b.n	800ac56 <__kernel_rem_pio2+0xe6>
 800ad18:	d105      	bne.n	800ad26 <__kernel_rem_pio2+0x1b6>
 800ad1a:	1e62      	subs	r2, r4, #1
 800ad1c:	a906      	add	r1, sp, #24
 800ad1e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800ad22:	15f6      	asrs	r6, r6, #23
 800ad24:	e7c8      	b.n	800acb8 <__kernel_rem_pio2+0x148>
 800ad26:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ad2a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad32:	da31      	bge.n	800ad98 <__kernel_rem_pio2+0x228>
 800ad34:	2600      	movs	r6, #0
 800ad36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad3e:	f040 809b 	bne.w	800ae78 <__kernel_rem_pio2+0x308>
 800ad42:	1e62      	subs	r2, r4, #1
 800ad44:	2000      	movs	r0, #0
 800ad46:	454a      	cmp	r2, r9
 800ad48:	da49      	bge.n	800adde <__kernel_rem_pio2+0x26e>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d062      	beq.n	800ae14 <__kernel_rem_pio2+0x2a4>
 800ad4e:	3c01      	subs	r4, #1
 800ad50:	ab06      	add	r3, sp, #24
 800ad52:	3d18      	subs	r5, #24
 800ad54:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d0f8      	beq.n	800ad4e <__kernel_rem_pio2+0x1de>
 800ad5c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ad60:	4628      	mov	r0, r5
 800ad62:	f000 f981 	bl	800b068 <scalbn>
 800ad66:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800ae60 <__kernel_rem_pio2+0x2f0>
 800ad6a:	1c62      	adds	r2, r4, #1
 800ad6c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ad6e:	00d3      	lsls	r3, r2, #3
 800ad70:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ad74:	4622      	mov	r2, r4
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	f280 80a8 	bge.w	800aecc <__kernel_rem_pio2+0x35c>
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	f2c0 80c6 	blt.w	800af10 <__kernel_rem_pio2+0x3a0>
 800ad84:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ad86:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ad8a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800ae58 <__kernel_rem_pio2+0x2e8>
 800ad8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800ae74 <__kernel_rem_pio2+0x304>
 800ad92:	2000      	movs	r0, #0
 800ad94:	1aa1      	subs	r1, r4, r2
 800ad96:	e0b0      	b.n	800aefa <__kernel_rem_pio2+0x38a>
 800ad98:	2602      	movs	r6, #2
 800ad9a:	e78f      	b.n	800acbc <__kernel_rem_pio2+0x14c>
 800ad9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada0:	b948      	cbnz	r0, 800adb6 <__kernel_rem_pio2+0x246>
 800ada2:	b122      	cbz	r2, 800adae <__kernel_rem_pio2+0x23e>
 800ada4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ada8:	f843 2c04 	str.w	r2, [r3, #-4]
 800adac:	2201      	movs	r2, #1
 800adae:	f10c 0c01 	add.w	ip, ip, #1
 800adb2:	4610      	mov	r0, r2
 800adb4:	e789      	b.n	800acca <__kernel_rem_pio2+0x15a>
 800adb6:	ebae 0202 	sub.w	r2, lr, r2
 800adba:	e7f5      	b.n	800ada8 <__kernel_rem_pio2+0x238>
 800adbc:	1e62      	subs	r2, r4, #1
 800adbe:	ab06      	add	r3, sp, #24
 800adc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800adc8:	a906      	add	r1, sp, #24
 800adca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800adce:	e784      	b.n	800acda <__kernel_rem_pio2+0x16a>
 800add0:	1e62      	subs	r2, r4, #1
 800add2:	ab06      	add	r3, sp, #24
 800add4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800addc:	e7f4      	b.n	800adc8 <__kernel_rem_pio2+0x258>
 800adde:	ab06      	add	r3, sp, #24
 800ade0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade4:	3a01      	subs	r2, #1
 800ade6:	4318      	orrs	r0, r3
 800ade8:	e7ad      	b.n	800ad46 <__kernel_rem_pio2+0x1d6>
 800adea:	3301      	adds	r3, #1
 800adec:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d0fa      	beq.n	800adea <__kernel_rem_pio2+0x27a>
 800adf4:	9a04      	ldr	r2, [sp, #16]
 800adf6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800adfa:	446a      	add	r2, sp
 800adfc:	eb04 000b 	add.w	r0, r4, fp
 800ae00:	a91a      	add	r1, sp, #104	@ 0x68
 800ae02:	1c66      	adds	r6, r4, #1
 800ae04:	3a98      	subs	r2, #152	@ 0x98
 800ae06:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ae0a:	4423      	add	r3, r4
 800ae0c:	42b3      	cmp	r3, r6
 800ae0e:	da04      	bge.n	800ae1a <__kernel_rem_pio2+0x2aa>
 800ae10:	461c      	mov	r4, r3
 800ae12:	e713      	b.n	800ac3c <__kernel_rem_pio2+0xcc>
 800ae14:	9a03      	ldr	r2, [sp, #12]
 800ae16:	2301      	movs	r3, #1
 800ae18:	e7e8      	b.n	800adec <__kernel_rem_pio2+0x27c>
 800ae1a:	9902      	ldr	r1, [sp, #8]
 800ae1c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ae20:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ae24:	9104      	str	r1, [sp, #16]
 800ae26:	ee07 1a90 	vmov	s15, r1
 800ae2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae2e:	2400      	movs	r4, #0
 800ae30:	eca0 7b02 	vstmia	r0!, {d7}
 800ae34:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800ae58 <__kernel_rem_pio2+0x2e8>
 800ae38:	4686      	mov	lr, r0
 800ae3a:	4554      	cmp	r4, sl
 800ae3c:	dd03      	ble.n	800ae46 <__kernel_rem_pio2+0x2d6>
 800ae3e:	eca2 7b02 	vstmia	r2!, {d7}
 800ae42:	3601      	adds	r6, #1
 800ae44:	e7e2      	b.n	800ae0c <__kernel_rem_pio2+0x29c>
 800ae46:	ecbc 5b02 	vldmia	ip!, {d5}
 800ae4a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800ae4e:	3401      	adds	r4, #1
 800ae50:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ae54:	e7f1      	b.n	800ae3a <__kernel_rem_pio2+0x2ca>
 800ae56:	bf00      	nop
	...
 800ae64:	3e700000 	.word	0x3e700000
 800ae68:	00000000 	.word	0x00000000
 800ae6c:	41700000 	.word	0x41700000
 800ae70:	0800bc88 	.word	0x0800bc88
 800ae74:	0800bc48 	.word	0x0800bc48
 800ae78:	4268      	negs	r0, r5
 800ae7a:	eeb0 0b48 	vmov.f64	d0, d8
 800ae7e:	f000 f8f3 	bl	800b068 <scalbn>
 800ae82:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800b050 <__kernel_rem_pio2+0x4e0>
 800ae86:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ae8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8e:	db17      	blt.n	800aec0 <__kernel_rem_pio2+0x350>
 800ae90:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800b058 <__kernel_rem_pio2+0x4e8>
 800ae94:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ae98:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ae9c:	aa06      	add	r2, sp, #24
 800ae9e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800aea2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800aea6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aeaa:	3518      	adds	r5, #24
 800aeac:	ee10 3a10 	vmov	r3, s0
 800aeb0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aeb4:	ee17 3a10 	vmov	r3, s14
 800aeb8:	3401      	adds	r4, #1
 800aeba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aebe:	e74d      	b.n	800ad5c <__kernel_rem_pio2+0x1ec>
 800aec0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aec4:	aa06      	add	r2, sp, #24
 800aec6:	ee10 3a10 	vmov	r3, s0
 800aeca:	e7f6      	b.n	800aeba <__kernel_rem_pio2+0x34a>
 800aecc:	a806      	add	r0, sp, #24
 800aece:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800aed2:	9001      	str	r0, [sp, #4]
 800aed4:	ee07 0a90 	vmov	s15, r0
 800aed8:	3a01      	subs	r2, #1
 800aeda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aede:	ee27 7b00 	vmul.f64	d7, d7, d0
 800aee2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800aee6:	ed21 7b02 	vstmdb	r1!, {d7}
 800aeea:	e744      	b.n	800ad76 <__kernel_rem_pio2+0x206>
 800aeec:	ecbc 5b02 	vldmia	ip!, {d5}
 800aef0:	ecb5 6b02 	vldmia	r5!, {d6}
 800aef4:	3001      	adds	r0, #1
 800aef6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aefa:	4548      	cmp	r0, r9
 800aefc:	dc01      	bgt.n	800af02 <__kernel_rem_pio2+0x392>
 800aefe:	4281      	cmp	r1, r0
 800af00:	daf4      	bge.n	800aeec <__kernel_rem_pio2+0x37c>
 800af02:	a842      	add	r0, sp, #264	@ 0x108
 800af04:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800af08:	ed81 7b00 	vstr	d7, [r1]
 800af0c:	3a01      	subs	r2, #1
 800af0e:	e736      	b.n	800ad7e <__kernel_rem_pio2+0x20e>
 800af10:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800af12:	2a02      	cmp	r2, #2
 800af14:	dc0a      	bgt.n	800af2c <__kernel_rem_pio2+0x3bc>
 800af16:	2a00      	cmp	r2, #0
 800af18:	dc2d      	bgt.n	800af76 <__kernel_rem_pio2+0x406>
 800af1a:	d046      	beq.n	800afaa <__kernel_rem_pio2+0x43a>
 800af1c:	f008 0007 	and.w	r0, r8, #7
 800af20:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800af24:	ecbd 8b06 	vpop	{d8-d10}
 800af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800af2e:	2a03      	cmp	r2, #3
 800af30:	d1f4      	bne.n	800af1c <__kernel_rem_pio2+0x3ac>
 800af32:	a942      	add	r1, sp, #264	@ 0x108
 800af34:	f1a3 0208 	sub.w	r2, r3, #8
 800af38:	440a      	add	r2, r1
 800af3a:	4611      	mov	r1, r2
 800af3c:	4620      	mov	r0, r4
 800af3e:	2800      	cmp	r0, #0
 800af40:	f1a1 0108 	sub.w	r1, r1, #8
 800af44:	dc52      	bgt.n	800afec <__kernel_rem_pio2+0x47c>
 800af46:	4621      	mov	r1, r4
 800af48:	2901      	cmp	r1, #1
 800af4a:	f1a2 0208 	sub.w	r2, r2, #8
 800af4e:	dc5d      	bgt.n	800b00c <__kernel_rem_pio2+0x49c>
 800af50:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800b060 <__kernel_rem_pio2+0x4f0>
 800af54:	aa42      	add	r2, sp, #264	@ 0x108
 800af56:	4413      	add	r3, r2
 800af58:	2c01      	cmp	r4, #1
 800af5a:	dc67      	bgt.n	800b02c <__kernel_rem_pio2+0x4bc>
 800af5c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800af60:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800af64:	2e00      	cmp	r6, #0
 800af66:	d167      	bne.n	800b038 <__kernel_rem_pio2+0x4c8>
 800af68:	ed87 5b00 	vstr	d5, [r7]
 800af6c:	ed87 6b02 	vstr	d6, [r7, #8]
 800af70:	ed87 7b04 	vstr	d7, [r7, #16]
 800af74:	e7d2      	b.n	800af1c <__kernel_rem_pio2+0x3ac>
 800af76:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800b060 <__kernel_rem_pio2+0x4f0>
 800af7a:	aa42      	add	r2, sp, #264	@ 0x108
 800af7c:	4413      	add	r3, r2
 800af7e:	4622      	mov	r2, r4
 800af80:	2a00      	cmp	r2, #0
 800af82:	da24      	bge.n	800afce <__kernel_rem_pio2+0x45e>
 800af84:	b34e      	cbz	r6, 800afda <__kernel_rem_pio2+0x46a>
 800af86:	eeb1 7b46 	vneg.f64	d7, d6
 800af8a:	ed87 7b00 	vstr	d7, [r7]
 800af8e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800af92:	aa44      	add	r2, sp, #272	@ 0x110
 800af94:	2301      	movs	r3, #1
 800af96:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af9a:	429c      	cmp	r4, r3
 800af9c:	da20      	bge.n	800afe0 <__kernel_rem_pio2+0x470>
 800af9e:	b10e      	cbz	r6, 800afa4 <__kernel_rem_pio2+0x434>
 800afa0:	eeb1 7b47 	vneg.f64	d7, d7
 800afa4:	ed87 7b02 	vstr	d7, [r7, #8]
 800afa8:	e7b8      	b.n	800af1c <__kernel_rem_pio2+0x3ac>
 800afaa:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800b060 <__kernel_rem_pio2+0x4f0>
 800afae:	aa42      	add	r2, sp, #264	@ 0x108
 800afb0:	4413      	add	r3, r2
 800afb2:	2c00      	cmp	r4, #0
 800afb4:	da05      	bge.n	800afc2 <__kernel_rem_pio2+0x452>
 800afb6:	b10e      	cbz	r6, 800afbc <__kernel_rem_pio2+0x44c>
 800afb8:	eeb1 7b47 	vneg.f64	d7, d7
 800afbc:	ed87 7b00 	vstr	d7, [r7]
 800afc0:	e7ac      	b.n	800af1c <__kernel_rem_pio2+0x3ac>
 800afc2:	ed33 6b02 	vldmdb	r3!, {d6}
 800afc6:	3c01      	subs	r4, #1
 800afc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800afcc:	e7f1      	b.n	800afb2 <__kernel_rem_pio2+0x442>
 800afce:	ed33 7b02 	vldmdb	r3!, {d7}
 800afd2:	3a01      	subs	r2, #1
 800afd4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800afd8:	e7d2      	b.n	800af80 <__kernel_rem_pio2+0x410>
 800afda:	eeb0 7b46 	vmov.f64	d7, d6
 800afde:	e7d4      	b.n	800af8a <__kernel_rem_pio2+0x41a>
 800afe0:	ecb2 6b02 	vldmia	r2!, {d6}
 800afe4:	3301      	adds	r3, #1
 800afe6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800afea:	e7d6      	b.n	800af9a <__kernel_rem_pio2+0x42a>
 800afec:	ed91 7b00 	vldr	d7, [r1]
 800aff0:	ed91 5b02 	vldr	d5, [r1, #8]
 800aff4:	3801      	subs	r0, #1
 800aff6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800affa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800affe:	ed81 6b00 	vstr	d6, [r1]
 800b002:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b006:	ed81 7b02 	vstr	d7, [r1, #8]
 800b00a:	e798      	b.n	800af3e <__kernel_rem_pio2+0x3ce>
 800b00c:	ed92 7b00 	vldr	d7, [r2]
 800b010:	ed92 5b02 	vldr	d5, [r2, #8]
 800b014:	3901      	subs	r1, #1
 800b016:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b01a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b01e:	ed82 6b00 	vstr	d6, [r2]
 800b022:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b026:	ed82 7b02 	vstr	d7, [r2, #8]
 800b02a:	e78d      	b.n	800af48 <__kernel_rem_pio2+0x3d8>
 800b02c:	ed33 6b02 	vldmdb	r3!, {d6}
 800b030:	3c01      	subs	r4, #1
 800b032:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b036:	e78f      	b.n	800af58 <__kernel_rem_pio2+0x3e8>
 800b038:	eeb1 5b45 	vneg.f64	d5, d5
 800b03c:	eeb1 6b46 	vneg.f64	d6, d6
 800b040:	ed87 5b00 	vstr	d5, [r7]
 800b044:	eeb1 7b47 	vneg.f64	d7, d7
 800b048:	ed87 6b02 	vstr	d6, [r7, #8]
 800b04c:	e790      	b.n	800af70 <__kernel_rem_pio2+0x400>
 800b04e:	bf00      	nop
 800b050:	00000000 	.word	0x00000000
 800b054:	41700000 	.word	0x41700000
 800b058:	00000000 	.word	0x00000000
 800b05c:	3e700000 	.word	0x3e700000
	...

0800b068 <scalbn>:
 800b068:	ee10 1a90 	vmov	r1, s1
 800b06c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b070:	b98b      	cbnz	r3, 800b096 <scalbn+0x2e>
 800b072:	ee10 3a10 	vmov	r3, s0
 800b076:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b07a:	4319      	orrs	r1, r3
 800b07c:	d00a      	beq.n	800b094 <scalbn+0x2c>
 800b07e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b130 <scalbn+0xc8>
 800b082:	4b37      	ldr	r3, [pc, #220]	@ (800b160 <scalbn+0xf8>)
 800b084:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b088:	4298      	cmp	r0, r3
 800b08a:	da0b      	bge.n	800b0a4 <scalbn+0x3c>
 800b08c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b138 <scalbn+0xd0>
 800b090:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b094:	4770      	bx	lr
 800b096:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d107      	bne.n	800b0ae <scalbn+0x46>
 800b09e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b0a2:	4770      	bx	lr
 800b0a4:	ee10 1a90 	vmov	r1, s1
 800b0a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0ac:	3b36      	subs	r3, #54	@ 0x36
 800b0ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b0b2:	4290      	cmp	r0, r2
 800b0b4:	dd0d      	ble.n	800b0d2 <scalbn+0x6a>
 800b0b6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b140 <scalbn+0xd8>
 800b0ba:	ee10 3a90 	vmov	r3, s1
 800b0be:	eeb0 6b47 	vmov.f64	d6, d7
 800b0c2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800b148 <scalbn+0xe0>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b0cc:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b0d0:	4770      	bx	lr
 800b0d2:	4418      	add	r0, r3
 800b0d4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800b0d8:	4298      	cmp	r0, r3
 800b0da:	dcec      	bgt.n	800b0b6 <scalbn+0x4e>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	dd0a      	ble.n	800b0f6 <scalbn+0x8e>
 800b0e0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b0e4:	ec53 2b10 	vmov	r2, r3, d0
 800b0e8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b0ec:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b0f0:	ec43 2b10 	vmov	d0, r2, r3
 800b0f4:	4770      	bx	lr
 800b0f6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800b0fa:	da09      	bge.n	800b110 <scalbn+0xa8>
 800b0fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800b138 <scalbn+0xd0>
 800b100:	ee10 3a90 	vmov	r3, s1
 800b104:	eeb0 6b47 	vmov.f64	d6, d7
 800b108:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800b150 <scalbn+0xe8>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	e7db      	b.n	800b0c8 <scalbn+0x60>
 800b110:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b114:	ec53 2b10 	vmov	r2, r3, d0
 800b118:	3036      	adds	r0, #54	@ 0x36
 800b11a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b11e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b122:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800b158 <scalbn+0xf0>
 800b126:	ec43 2b10 	vmov	d0, r2, r3
 800b12a:	e7b1      	b.n	800b090 <scalbn+0x28>
 800b12c:	f3af 8000 	nop.w
 800b130:	00000000 	.word	0x00000000
 800b134:	43500000 	.word	0x43500000
 800b138:	c2f8f359 	.word	0xc2f8f359
 800b13c:	01a56e1f 	.word	0x01a56e1f
 800b140:	8800759c 	.word	0x8800759c
 800b144:	7e37e43c 	.word	0x7e37e43c
 800b148:	8800759c 	.word	0x8800759c
 800b14c:	fe37e43c 	.word	0xfe37e43c
 800b150:	c2f8f359 	.word	0xc2f8f359
 800b154:	81a56e1f 	.word	0x81a56e1f
 800b158:	00000000 	.word	0x00000000
 800b15c:	3c900000 	.word	0x3c900000
 800b160:	ffff3cb0 	.word	0xffff3cb0
 800b164:	00000000 	.word	0x00000000

0800b168 <floor>:
 800b168:	ee10 3a90 	vmov	r3, s1
 800b16c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800b170:	ee10 2a10 	vmov	r2, s0
 800b174:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b178:	2913      	cmp	r1, #19
 800b17a:	b530      	push	{r4, r5, lr}
 800b17c:	4615      	mov	r5, r2
 800b17e:	dc33      	bgt.n	800b1e8 <floor+0x80>
 800b180:	2900      	cmp	r1, #0
 800b182:	da18      	bge.n	800b1b6 <floor+0x4e>
 800b184:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800b248 <floor+0xe0>
 800b188:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b18c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b194:	dd0a      	ble.n	800b1ac <floor+0x44>
 800b196:	2b00      	cmp	r3, #0
 800b198:	da50      	bge.n	800b23c <floor+0xd4>
 800b19a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b250 <floor+0xe8>)
 800b1a6:	bf08      	it	eq
 800b1a8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	ec41 0b10 	vmov	d0, r0, r1
 800b1b4:	e01f      	b.n	800b1f6 <floor+0x8e>
 800b1b6:	4827      	ldr	r0, [pc, #156]	@ (800b254 <floor+0xec>)
 800b1b8:	4108      	asrs	r0, r1
 800b1ba:	ea03 0400 	and.w	r4, r3, r0
 800b1be:	4314      	orrs	r4, r2
 800b1c0:	d019      	beq.n	800b1f6 <floor+0x8e>
 800b1c2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b248 <floor+0xe0>
 800b1c6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b1ca:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d2:	ddeb      	ble.n	800b1ac <floor+0x44>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bfbe      	ittt	lt
 800b1d8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800b1dc:	410a      	asrlt	r2, r1
 800b1de:	189b      	addlt	r3, r3, r2
 800b1e0:	ea23 0300 	bic.w	r3, r3, r0
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	e7e1      	b.n	800b1ac <floor+0x44>
 800b1e8:	2933      	cmp	r1, #51	@ 0x33
 800b1ea:	dd05      	ble.n	800b1f8 <floor+0x90>
 800b1ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b1f0:	d101      	bne.n	800b1f6 <floor+0x8e>
 800b1f2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b1f6:	bd30      	pop	{r4, r5, pc}
 800b1f8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800b1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b200:	40e0      	lsrs	r0, r4
 800b202:	4210      	tst	r0, r2
 800b204:	d0f7      	beq.n	800b1f6 <floor+0x8e>
 800b206:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b248 <floor+0xe0>
 800b20a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b20e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b216:	ddc9      	ble.n	800b1ac <floor+0x44>
 800b218:	2b00      	cmp	r3, #0
 800b21a:	da02      	bge.n	800b222 <floor+0xba>
 800b21c:	2914      	cmp	r1, #20
 800b21e:	d103      	bne.n	800b228 <floor+0xc0>
 800b220:	3301      	adds	r3, #1
 800b222:	ea22 0200 	bic.w	r2, r2, r0
 800b226:	e7c1      	b.n	800b1ac <floor+0x44>
 800b228:	2401      	movs	r4, #1
 800b22a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800b22e:	fa04 f101 	lsl.w	r1, r4, r1
 800b232:	440a      	add	r2, r1
 800b234:	42aa      	cmp	r2, r5
 800b236:	bf38      	it	cc
 800b238:	191b      	addcc	r3, r3, r4
 800b23a:	e7f2      	b.n	800b222 <floor+0xba>
 800b23c:	2200      	movs	r2, #0
 800b23e:	4613      	mov	r3, r2
 800b240:	e7b4      	b.n	800b1ac <floor+0x44>
 800b242:	bf00      	nop
 800b244:	f3af 8000 	nop.w
 800b248:	8800759c 	.word	0x8800759c
 800b24c:	7e37e43c 	.word	0x7e37e43c
 800b250:	bff00000 	.word	0xbff00000
 800b254:	000fffff 	.word	0x000fffff

0800b258 <_init>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	bf00      	nop
 800b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25e:	bc08      	pop	{r3}
 800b260:	469e      	mov	lr, r3
 800b262:	4770      	bx	lr

0800b264 <_fini>:
 800b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b266:	bf00      	nop
 800b268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26a:	bc08      	pop	{r3}
 800b26c:	469e      	mov	lr, r3
 800b26e:	4770      	bx	lr
